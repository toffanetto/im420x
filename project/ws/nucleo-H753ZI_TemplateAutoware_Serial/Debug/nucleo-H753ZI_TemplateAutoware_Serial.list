
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022f34  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b64  080231d8  080231d8  000241d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025d3c  08025d3c  00026d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08025d44  08025d44  00026d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025d88  08025d88  00026d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000130c  24000000  08025d8c  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000683e0  24001310  08027098  00028310  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240696f0  08027098  000286f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002830c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f8e0  00000000  00000000  0002833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d59  00000000  00000000  00057c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe0  00000000  00000000  0005d978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001884  00000000  00000000  0005f958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000445de  00000000  00000000  000611dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003771b  00000000  00000000  000a57ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001928c0  00000000  00000000  000dced5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0026f795  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009354  00000000  00000000  0026f80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  00278b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001310 	.word	0x24001310
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080231bc 	.word	0x080231bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001314 	.word	0x24001314
 80002dc:	080231bc 	.word	0x080231bc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f003 f8ca 	bl	800395c <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f001 f969 	bl	8001aa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f004 f8ed 	bl	80049bc <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f001 f95c 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f003 fb28 	bl	8003e64 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f001 f943 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f003 fb1a 	bl	8003e64 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f001 f935 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400132c 	.word	0x2400132c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f021 fd43 	bl	8022300 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fac8 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f001 f8eb 	bl	8001aa4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f007 f84f 	bl	80079c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f004 f9e1 	bl	8004d38 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f001 f892 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001390 	.word	0x24001390
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00f f88a 	bl	800facc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e fff9 	bl	800fae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032150 	.word	0x24032150
 8000b28:	2403215c 	.word	0x2403215c
 8000b2c:	24032154 	.word	0x24032154
 8000b30:	24032148 	.word	0x24032148
 8000b34:	24032158 	.word	0x24032158

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e ff82 	bl	800facc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e ff84 	bl	800fae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403215c 	.word	0x2403215c
 8000bec:	24032154 	.word	0x24032154

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403215c 	.word	0x2403215c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e ff49 	bl	800facc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f021 fc66 	bl	802253e <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e ff36 	bl	800fae8 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e ff1c 	bl	800facc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e ff12 	bl	800fae8 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	24001408 	.word	0x24001408
 8000d84:	24032148 	.word	0x24032148
 8000d88:	24032150 	.word	0x24032150
 8000d8c:	24032158 	.word	0x24032158
 8000d90:	24032154 	.word	0x24032154
 8000d94:	2403215c 	.word	0x2403215c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032148 	.word	0x24032148
 8000e48:	24032150 	.word	0x24032150

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 ff28 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 ff3f 	bl	8004d1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 ff20 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 ff37 	bl	8004d1c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2039      	movs	r0, #57	@ 0x39
 8000eb4:	f003 ff18 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000eb8:	2039      	movs	r0, #57	@ 0x39
 8000eba:	f003 ff2f 	bl	8004d1c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f003 ff10 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ec8:	203a      	movs	r0, #58	@ 0x3a
 8000eca:	f003 ff27 	bl	8004d1c <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400

08000edc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef0:	4904      	ldr	r1, [pc, #16]	@ (8000f04 <cubemx_transport_open+0x28>)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f00b f84a 	bl	800bf8c <HAL_UART_Receive_DMA>
    return true;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24032160 	.word	0x24032160

08000f08 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f16:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00b f883 	bl	800c024 <HAL_UART_DMAStop>
    return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f3c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d11b      	bne.n	8000f80 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00a ff9b 	bl	800be8c <HAL_UART_Transmit_DMA>
 8000f56:	4603      	mov	r3, r0
 8000f58:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f00d fa29 	bl	800e3b4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <cubemx_transport_write+0x4a>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d1f4      	bne.n	8000f5c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <cubemx_transport_write+0x54>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <cubemx_transport_write+0x5a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f80:	2300      	movs	r3, #0
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fa0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <cubemx_transport_read+0x190>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d068      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <cubemx_transport_read+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <cubemx_transport_read+0x198>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05a      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <cubemx_transport_read+0x19c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d053      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a50      	ldr	r2, [pc, #320]	@ (800112c <cubemx_transport_read+0x1a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <cubemx_transport_read+0x1a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d045      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <cubemx_transport_read+0x1a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03e      	beq.n	800108a <cubemx_transport_read+0xfe>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <cubemx_transport_read+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <cubemx_transport_read+0xfe>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <cubemx_transport_read+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d030      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <cubemx_transport_read+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <cubemx_transport_read+0x1b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <cubemx_transport_read+0x1bc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3c      	ldr	r2, [pc, #240]	@ (800114c <cubemx_transport_read+0x1c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d014      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <cubemx_transport_read+0x1c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <cubemx_transport_read+0xfe>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <cubemx_transport_read+0x1c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d006      	beq.n	800108a <cubemx_transport_read+0xfe>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	@ (8001158 <cubemx_transport_read+0x1cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d107      	bne.n	800109a <cubemx_transport_read+0x10e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001098:	e006      	b.n	80010a8 <cubemx_transport_read+0x11c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ac:	b662      	cpsie	i
}
 80010ae:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00d f97c 	bl	800e3b4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d104      	bne.n	80010d2 <cubemx_transport_read+0x146>
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f6ff af6a 	blt.w	8000fa6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d6:	e011      	b.n	80010fc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	440b      	add	r3, r1
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <cubemx_transport_read+0x1d8>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <cubemx_transport_read+0x1d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d003      	beq.n	8001110 <cubemx_transport_read+0x184>
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3e3      	bcc.n	80010d8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001110:	69bb      	ldr	r3, [r7, #24]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020010 	.word	0x40020010
 8001120:	40020028 	.word	0x40020028
 8001124:	40020040 	.word	0x40020040
 8001128:	40020058 	.word	0x40020058
 800112c:	40020070 	.word	0x40020070
 8001130:	40020088 	.word	0x40020088
 8001134:	400200a0 	.word	0x400200a0
 8001138:	400200b8 	.word	0x400200b8
 800113c:	40020410 	.word	0x40020410
 8001140:	40020428 	.word	0x40020428
 8001144:	40020440 	.word	0x40020440
 8001148:	40020458 	.word	0x40020458
 800114c:	40020470 	.word	0x40020470
 8001150:	40020488 	.word	0x40020488
 8001154:	400204a0 	.word	0x400204a0
 8001158:	400204b8 	.word	0x400204b8
 800115c:	24032964 	.word	0x24032964
 8001160:	24032960 	.word	0x24032960
 8001164:	24032160 	.word	0x24032160

08001168 <timer_watchdog_agent_callback>:
extern osThreadId_t TaskMicroAutowaHandle;

// Timer callbacks

void timer_watchdog_agent_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	e9c7 2300 	strd	r2, r3, [r7]
	
  if(RMW_RET_OK != rmw_uros_ping_agent(20, 1)) 
 8001174:	2101      	movs	r1, #1
 8001176:	2014      	movs	r0, #20
 8001178:	f014 fa64 	bl	8015644 <rmw_uros_ping_agent>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <timer_watchdog_agent_callback+0x32>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <timer_watchdog_agent_callback+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00d f823 	bl	800e1d4 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <timer_watchdog_agent_callback+0x40>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2110      	movs	r1, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f00d f81d 	bl	800e1d4 <osThreadFlagsSet>
  } 

  // Try to reconnect

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24032968 	.word	0x24032968
 80011a8:	2403296c 	.word	0x2403296c

080011ac <clock_callback>:
  * @brief  ROS topic subscriber callback to recieve current timestamp
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void clock_callback(const void * xMsgIn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  const rosgraph_msgs__msg__Clock * clock_msg_ = (const rosgraph_msgs__msg__Clock * )xMsgIn;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 0);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <clock_callback+0x28>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <clock_callback+0x28>)
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	240329ae 	.word	0x240329ae

080011d8 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  const autoware_auto_control_msgs__msg__AckermannControlCommand * control_cmd_msg_ = (const autoware_auto_control_msgs__msg__AckermannControlCommand * )xMsgIn;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 1);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <control_cmd_callback+0x28>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <control_cmd_callback+0x28>)
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	240329ae 	.word	0x240329ae

08001204 <control_mode_cmd_callback>:
  * @param  xRequestMsg: pointer to the request made for the server.
  * @param  xResponseMsg: pointer to the response gave by the server.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response * xResponseMsg)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  if(AUTOWARE == control_mode_request_msg_->mode)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	7a1b      	ldrb	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10f      	bne.n	800123a <control_mode_cmd_callback+0x36>
  {
    xResponseMsg->success = true;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, TO_AUTOWARE_MODE_FLAG);
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <control_mode_cmd_callback+0x6c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f00c ffd4 	bl	800e1d4 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <control_mode_cmd_callback+0x70>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	4618      	mov	r0, r3
 8001234:	f00c ffce 	bl	800e1d4 <osThreadFlagsSet>
  else
  {
    xResponseMsg->success = false;
  }

}
 8001238:	e016      	b.n	8001268 <control_mode_cmd_callback+0x64>
  else if(MANUAL == control_mode_request_msg_->mode)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	7a1b      	ldrb	r3, [r3, #8]
 800123e:	2b04      	cmp	r3, #4
 8001240:	d10f      	bne.n	8001262 <control_mode_cmd_callback+0x5e>
    xResponseMsg->success = true;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <control_mode_cmd_callback+0x6c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2110      	movs	r1, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f00c ffc0 	bl	800e1d4 <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <control_mode_cmd_callback+0x70>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2110      	movs	r1, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f00c ffba 	bl	800e1d4 <osThreadFlagsSet>
}
 8001260:	e002      	b.n	8001268 <control_mode_cmd_callback+0x64>
    xResponseMsg->success = false;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24032968 	.word	0x24032968
 8001274:	2403296c 	.word	0x2403296c

08001278 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 800127c:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <MX_FREERTOS_Init+0x40>)
 800127e:	f00d f8b4 	bl	800e3ea <osMutexNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <MX_FREERTOS_Init+0x44>)
 8001286:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001288:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <MX_FREERTOS_Init+0x48>)
 800128a:	f00d f8ae 	bl	800e3ea <osMutexNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <MX_FREERTOS_Init+0x4c>)
 8001292:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001294:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <MX_FREERTOS_Init+0x50>)
 8001296:	2100      	movs	r1, #0
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <MX_FREERTOS_Init+0x54>)
 800129a:	f00c ff08 	bl	800e0ae <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <MX_FREERTOS_Init+0x58>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 80012a4:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <MX_FREERTOS_Init+0x5c>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <MX_FREERTOS_Init+0x60>)
 80012aa:	f00c ff00 	bl	800e0ae <osThreadNew>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <MX_FREERTOS_Init+0x64>)
 80012b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	080234d8 	.word	0x080234d8
 80012bc:	24032970 	.word	0x24032970
 80012c0:	080234e8 	.word	0x080234e8
 80012c4:	24032974 	.word	0x24032974
 80012c8:	08023490 	.word	0x08023490
 80012cc:	0800283d 	.word	0x0800283d
 80012d0:	24032968 	.word	0x24032968
 80012d4:	080234b4 	.word	0x080234b4
 80012d8:	08001ab1 	.word	0x08001ab1
 80012dc:	2403296c 	.word	0x2403296c

080012e0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	@ 0x38
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001570 <MX_GPIO_Init+0x290>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001570 <MX_GPIO_Init+0x290>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4b9a      	ldr	r3, [pc, #616]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	623b      	str	r3, [r7, #32]
 8001312:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001314:	4b96      	ldr	r3, [pc, #600]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a95      	ldr	r2, [pc, #596]	@ (8001570 <MX_GPIO_Init+0x290>)
 800131c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b92      	ldr	r3, [pc, #584]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b8f      	ldr	r3, [pc, #572]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a8d      	ldr	r2, [pc, #564]	@ (8001570 <MX_GPIO_Init+0x290>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b8b      	ldr	r3, [pc, #556]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b87      	ldr	r3, [pc, #540]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a86      	ldr	r2, [pc, #536]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b83      	ldr	r3, [pc, #524]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b80      	ldr	r3, [pc, #512]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	4a7e      	ldr	r2, [pc, #504]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137e:	4b7c      	ldr	r3, [pc, #496]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138c:	4b78      	ldr	r3, [pc, #480]	@ (8001570 <MX_GPIO_Init+0x290>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	4a77      	ldr	r2, [pc, #476]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139c:	4b74      	ldr	r3, [pc, #464]	@ (8001570 <MX_GPIO_Init+0x290>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013aa:	4b71      	ldr	r3, [pc, #452]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	4a6f      	ldr	r2, [pc, #444]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c8:	4b69      	ldr	r3, [pc, #420]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	4a68      	ldr	r2, [pc, #416]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d8:	4b65      	ldr	r3, [pc, #404]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80013ec:	4861      	ldr	r0, [pc, #388]	@ (8001574 <MX_GPIO_Init+0x294>)
 80013ee:	f006 fc9b 	bl	8007d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f8:	485f      	ldr	r0, [pc, #380]	@ (8001578 <MX_GPIO_Init+0x298>)
 80013fa:	f006 fc95 	bl	8007d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2102      	movs	r1, #2
 8001402:	485e      	ldr	r0, [pc, #376]	@ (800157c <MX_GPIO_Init+0x29c>)
 8001404:	f006 fc90 	bl	8007d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4858      	ldr	r0, [pc, #352]	@ (8001580 <MX_GPIO_Init+0x2a0>)
 800141e:	f006 fad3 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001422:	2332      	movs	r3, #50	@ 0x32
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001432:	230b      	movs	r3, #11
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4850      	ldr	r0, [pc, #320]	@ (8001580 <MX_GPIO_Init+0x2a0>)
 800143e:	f006 fac3 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001442:	2386      	movs	r3, #134	@ 0x86
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001452:	230b      	movs	r3, #11
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4849      	ldr	r0, [pc, #292]	@ (8001584 <MX_GPIO_Init+0x2a4>)
 800145e:	f006 fab3 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001462:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	483e      	ldr	r0, [pc, #248]	@ (8001574 <MX_GPIO_Init+0x294>)
 800147c:	f006 faa4 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	483c      	ldr	r0, [pc, #240]	@ (8001588 <MX_GPIO_Init+0x2a8>)
 8001498:	f006 fa96 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800149c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ae:	230b      	movs	r3, #11
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	482e      	ldr	r0, [pc, #184]	@ (8001574 <MX_GPIO_Init+0x294>)
 80014ba:	f006 fa85 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80014be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4828      	ldr	r0, [pc, #160]	@ (8001578 <MX_GPIO_Init+0x298>)
 80014d8:	f006 fa76 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014dc:	2380      	movs	r3, #128	@ 0x80
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4826      	ldr	r0, [pc, #152]	@ (800158c <MX_GPIO_Init+0x2ac>)
 80014f2:	f006 fa69 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014f6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001508:	230a      	movs	r3, #10
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	481c      	ldr	r0, [pc, #112]	@ (8001584 <MX_GPIO_Init+0x2a4>)
 8001514:	f006 fa58 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001518:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152a:	230b      	movs	r3, #11
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4815      	ldr	r0, [pc, #84]	@ (800158c <MX_GPIO_Init+0x2ac>)
 8001536:	f006 fa47 	bl	80079c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800153a:	2302      	movs	r3, #2
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	480a      	ldr	r0, [pc, #40]	@ (800157c <MX_GPIO_Init+0x29c>)
 8001552:	f006 fa39 	bl	80079c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2107      	movs	r1, #7
 800155a:	2028      	movs	r0, #40	@ 0x28
 800155c:	f003 fbc4 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001560:	2028      	movs	r0, #40	@ 0x28
 8001562:	f003 fbdb 	bl	8004d1c <HAL_NVIC_EnableIRQ>

}
 8001566:	bf00      	nop
 8001568:	3738      	adds	r7, #56	@ 0x38
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	58024400 	.word	0x58024400
 8001574:	58020400 	.word	0x58020400
 8001578:	58020c00 	.word	0x58020c00
 800157c:	58021000 	.word	0x58021000
 8001580:	58020800 	.word	0x58020800
 8001584:	58020000 	.word	0x58020000
 8001588:	58021400 	.word	0x58021400
 800158c:	58021800 	.word	0x58021800

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f001 ff92 	bl	80034bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f81c 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f7ff fea0 	bl	80012e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a0:	f7ff fc54 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015a4:	f001 fc38 	bl	8002e18 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015a8:	f7ff f8ca 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80015ac:	f001 fbe8 	bl	8002d80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 80015b0:	2202      	movs	r2, #2
 80015b2:	4906      	ldr	r1, [pc, #24]	@ (80015cc <main+0x3c>)
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <main+0x40>)
 80015b6:	f002 fb73 	bl	8003ca0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015ba:	f00c fd19 	bl	800dff0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015be:	f7ff fe5b 	bl	8001278 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015c2:	f00c fd39 	bl	800e038 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <main+0x36>
 80015ca:	bf00      	nop
 80015cc:	2403297c 	.word	0x2403297c
 80015d0:	2400132c 	.word	0x2400132c

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b09e      	sub	sp, #120	@ 0x78
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015de:	224c      	movs	r2, #76	@ 0x4c
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f020 fe8c 	bl	8022300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2220      	movs	r2, #32
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f020 fe85 	bl	8022300 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015f6:	2002      	movs	r0, #2
 80015f8:	f006 fbca 	bl	8007d90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <SystemClock_Config+0x154>)
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	4a48      	ldr	r2, [pc, #288]	@ (8001728 <SystemClock_Config+0x154>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800160c:	4b46      	ldr	r3, [pc, #280]	@ (8001728 <SystemClock_Config+0x154>)
 800160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b45      	ldr	r3, [pc, #276]	@ (800172c <SystemClock_Config+0x158>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a44      	ldr	r2, [pc, #272]	@ (800172c <SystemClock_Config+0x158>)
 800161c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b42      	ldr	r3, [pc, #264]	@ (800172c <SystemClock_Config+0x158>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800162e:	bf00      	nop
 8001630:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <SystemClock_Config+0x158>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800163c:	d1f8      	bne.n	8001630 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <SystemClock_Config+0x15c>)
 8001640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001644:	4a3a      	ldr	r2, [pc, #232]	@ (8001730 <SystemClock_Config+0x15c>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800164e:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <SystemClock_Config+0x15c>)
 8001650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <SystemClock_Config+0x158>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a31      	ldr	r2, [pc, #196]	@ (800172c <SystemClock_Config+0x158>)
 8001666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <SystemClock_Config+0x158>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <SystemClock_Config+0x154>)
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	4a2b      	ldr	r2, [pc, #172]	@ (8001728 <SystemClock_Config+0x154>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <SystemClock_Config+0x154>)
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800168e:	bf00      	nop
 8001690:	4b26      	ldr	r3, [pc, #152]	@ (800172c <SystemClock_Config+0x158>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800169c:	d1f8      	bne.n	8001690 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800169e:	2310      	movs	r3, #16
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80016a6:	2320      	movs	r3, #32
 80016a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2302      	movs	r3, #2
 80016ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80016b6:	23f0      	movs	r3, #240	@ 0xf0
 80016b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016be:	2304      	movs	r3, #4
 80016c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016c6:	2308      	movs	r3, #8
 80016c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 fb94 	bl	8007e04 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016e2:	f000 f9df 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	233f      	movs	r3, #63	@ 0x3f
 80016e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2303      	movs	r3, #3
 80016ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016f2:	2308      	movs	r3, #8
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016f6:	2340      	movs	r3, #64	@ 0x40
 80016f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001704:	2340      	movs	r3, #64	@ 0x40
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2104      	movs	r1, #4
 800170e:	4618      	mov	r0, r3
 8001710:	f006 ffd2 	bl	80086b8 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800171a:	f000 f9c3 	bl	8001aa4 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3778      	adds	r7, #120	@ 0x78
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	58000400 	.word	0x58000400
 800172c:	58024800 	.word	0x58024800
 8001730:	58024400 	.word	0x58024400

08001734 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001744:	d11a      	bne.n	800177c <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8001746:	f00c fc9d 	bl	800e084 <osKernelGetTickCount>
 800174a:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <HAL_GPIO_EXTI_Callback+0x50>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	429a      	cmp	r2, r3
 8001758:	d910      	bls.n	800177c <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_GPIO_EXTI_Callback+0x54>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f083 0301 	eor.w	r3, r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <HAL_GPIO_EXTI_Callback+0x54>)
 8001766:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <HAL_GPIO_EXTI_Callback+0x50>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, JOYSW_FLAG);
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_GPIO_EXTI_Callback+0x58>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001776:	4618      	mov	r0, r3
 8001778:	f00c fd2c 	bl	800e1d4 <osThreadFlagsSet>
    }
  }
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	24032984 	.word	0x24032984
 8001788:	24032978 	.word	0x24032978
 800178c:	24032968 	.word	0x24032968

08001790 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4ab5      	ldr	r2, [pc, #724]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2e0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	f040 8163 	bne.w	8001a68 <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	72fb      	strb	r3, [r7, #11]
 80017aa:	e154      	b.n	8001a56 <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80017b0:	f200 814a 	bhi.w	8001a48 <HAL_UART_RxCpltCallback+0x2b8>
 80017b4:	a201      	add	r2, pc, #4	@ (adr r2, 80017bc <HAL_UART_RxCpltCallback+0x2c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	0800186d 	.word	0x0800186d
 80017c0:	0800187f 	.word	0x0800187f
 80017c4:	08001a49 	.word	0x08001a49
 80017c8:	08001a49 	.word	0x08001a49
 80017cc:	08001a49 	.word	0x08001a49
 80017d0:	08001a49 	.word	0x08001a49
 80017d4:	08001a49 	.word	0x08001a49
 80017d8:	08001a49 	.word	0x08001a49
 80017dc:	08001a49 	.word	0x08001a49
 80017e0:	08001a49 	.word	0x08001a49
 80017e4:	08001949 	.word	0x08001949
 80017e8:	08001959 	.word	0x08001959
 80017ec:	08001969 	.word	0x08001969
 80017f0:	08001979 	.word	0x08001979
 80017f4:	08001a49 	.word	0x08001a49
 80017f8:	08001a49 	.word	0x08001a49
 80017fc:	08001a49 	.word	0x08001a49
 8001800:	08001a49 	.word	0x08001a49
 8001804:	08001a49 	.word	0x08001a49
 8001808:	08001a49 	.word	0x08001a49
 800180c:	08001989 	.word	0x08001989
 8001810:	08001999 	.word	0x08001999
 8001814:	080019a9 	.word	0x080019a9
 8001818:	080019b9 	.word	0x080019b9
 800181c:	08001a49 	.word	0x08001a49
 8001820:	08001a49 	.word	0x08001a49
 8001824:	08001a49 	.word	0x08001a49
 8001828:	08001a49 	.word	0x08001a49
 800182c:	08001a49 	.word	0x08001a49
 8001830:	08001a49 	.word	0x08001a49
 8001834:	080019c9 	.word	0x080019c9
 8001838:	080019d9 	.word	0x080019d9
 800183c:	080019e9 	.word	0x080019e9
 8001840:	080019f9 	.word	0x080019f9
 8001844:	08001a49 	.word	0x08001a49
 8001848:	08001a49 	.word	0x08001a49
 800184c:	08001a49 	.word	0x08001a49
 8001850:	08001a49 	.word	0x08001a49
 8001854:	08001a49 	.word	0x08001a49
 8001858:	08001a49 	.word	0x08001a49
 800185c:	08001a09 	.word	0x08001a09
 8001860:	08001a19 	.word	0x08001a19
 8001864:	08001a29 	.word	0x08001a29
 8001868:	08001a39 	.word	0x08001a39
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	4a81      	ldr	r2, [pc, #516]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	2b23      	cmp	r3, #35	@ 0x23
 8001874:	f040 80eb 	bne.w	8001a4e <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800187c:	e0e7      	b.n	8001a4e <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	4a7c      	ldr	r2, [pc, #496]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	3b24      	subs	r3, #36	@ 0x24
 8001886:	2b20      	cmp	r3, #32
 8001888:	d85a      	bhi.n	8001940 <HAL_UART_RxCpltCallback+0x1b0>
 800188a:	a201      	add	r2, pc, #4	@ (adr r2, 8001890 <HAL_UART_RxCpltCallback+0x100>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001941 	.word	0x08001941
 8001898:	08001941 	.word	0x08001941
 800189c:	08001941 	.word	0x08001941
 80018a0:	08001941 	.word	0x08001941
 80018a4:	08001941 	.word	0x08001941
 80018a8:	08001941 	.word	0x08001941
 80018ac:	08001941 	.word	0x08001941
 80018b0:	08001941 	.word	0x08001941
 80018b4:	08001941 	.word	0x08001941
 80018b8:	08001941 	.word	0x08001941
 80018bc:	08001941 	.word	0x08001941
 80018c0:	08001941 	.word	0x08001941
 80018c4:	08001941 	.word	0x08001941
 80018c8:	08001941 	.word	0x08001941
 80018cc:	08001941 	.word	0x08001941
 80018d0:	08001941 	.word	0x08001941
 80018d4:	08001941 	.word	0x08001941
 80018d8:	08001941 	.word	0x08001941
 80018dc:	08001941 	.word	0x08001941
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001941 	.word	0x08001941
 80018e8:	08001941 	.word	0x08001941
 80018ec:	08001941 	.word	0x08001941
 80018f0:	08001941 	.word	0x08001941
 80018f4:	08001941 	.word	0x08001941
 80018f8:	08001941 	.word	0x08001941
 80018fc:	08001941 	.word	0x08001941
 8001900:	08001941 	.word	0x08001941
 8001904:	08001915 	.word	0x08001915
 8001908:	0800191b 	.word	0x0800191b
 800190c:	08001921 	.word	0x08001921
 8001910:	08001927 	.word	0x08001927
          {
            case 'A':
              ucSmState = 10;
 8001914:	230a      	movs	r3, #10
 8001916:	60fb      	str	r3, [r7, #12]
              break;
 8001918:	e015      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
              ucSmState = 20;
 800191a:	2314      	movs	r3, #20
 800191c:	60fb      	str	r3, [r7, #12]
              break;
 800191e:	e012      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
              ucSmState = 30;
 8001920:	231e      	movs	r3, #30
 8001922:	60fb      	str	r3, [r7, #12]
              break;
 8001924:	e00f      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
              ucSmState = 40;
 8001926:	2328      	movs	r3, #40	@ 0x28
 8001928:	60fb      	str	r3, [r7, #12]
              break;
 800192a:	e00c      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
              ucSmState = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
              // Message fully received, setting TaskControle ThreadFlag for sync.
              osThreadFlagsSet(TaskControleHandle, UART_NEW_DATA_FLAG);
 8001930:	4b51      	ldr	r3, [pc, #324]	@ (8001a78 <HAL_UART_RxCpltCallback+0x2e8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001938:	4618      	mov	r0, r3
 800193a:	f00c fc4b 	bl	800e1d4 <osThreadFlagsSet>
              break;
 800193e:	e002      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
              break;
 8001944:	bf00      	nop
          }
          break;
 8001946:	e083      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800194c:	5cd2      	ldrb	r2, [r2, r3]
 800194e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001950:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8001952:	230b      	movs	r3, #11
 8001954:	60fb      	str	r3, [r7, #12]
          break;
 8001956:	e07b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	4a46      	ldr	r2, [pc, #280]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800195c:	5cd2      	ldrb	r2, [r2, r3]
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001960:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8001962:	230c      	movs	r3, #12
 8001964:	60fb      	str	r3, [r7, #12]
          break;
 8001966:	e073      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	4a42      	ldr	r2, [pc, #264]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800196c:	5cd2      	ldrb	r2, [r2, r3]
 800196e:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001970:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8001972:	230d      	movs	r3, #13
 8001974:	60fb      	str	r3, [r7, #12]
          break;
 8001976:	e06b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800197c:	5cd2      	ldrb	r2, [r2, r3]
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001980:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
          break;
 8001986:	e063      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800198c:	5cd2      	ldrb	r2, [r2, r3]
 800198e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001990:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8001992:	2315      	movs	r3, #21
 8001994:	60fb      	str	r3, [r7, #12]
          break;
 8001996:	e05b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001998:	7afb      	ldrb	r3, [r7, #11]
 800199a:	4a36      	ldr	r2, [pc, #216]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800199c:	5cd2      	ldrb	r2, [r2, r3]
 800199e:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019a0:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 80019a2:	2316      	movs	r3, #22
 80019a4:	60fb      	str	r3, [r7, #12]
          break;
 80019a6:	e053      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	4a32      	ldr	r2, [pc, #200]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019ac:	5cd2      	ldrb	r2, [r2, r3]
 80019ae:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019b0:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 80019b2:	2317      	movs	r3, #23
 80019b4:	60fb      	str	r3, [r7, #12]
          break;
 80019b6:	e04b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019bc:	5cd2      	ldrb	r2, [r2, r3]
 80019be:	4b2f      	ldr	r3, [pc, #188]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019c0:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
          break;
 80019c6:	e043      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019cc:	5cd2      	ldrb	r2, [r2, r3]
 80019ce:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019d0:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 80019d2:	231f      	movs	r3, #31
 80019d4:	60fb      	str	r3, [r7, #12]
          break;
 80019d6:	e03b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	4a26      	ldr	r2, [pc, #152]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019dc:	5cd2      	ldrb	r2, [r2, r3]
 80019de:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019e0:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 80019e2:	2320      	movs	r3, #32
 80019e4:	60fb      	str	r3, [r7, #12]
          break;
 80019e6:	e033      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019ec:	5cd2      	ldrb	r2, [r2, r3]
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019f0:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 80019f2:	2321      	movs	r3, #33	@ 0x21
 80019f4:	60fb      	str	r3, [r7, #12]
          break;
 80019f6:	e02b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019fc:	5cd2      	ldrb	r2, [r2, r3]
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a00:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
          break;
 8001a06:	e023      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a0c:	5cd2      	ldrb	r2, [r2, r3]
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a10:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 8001a12:	2329      	movs	r3, #41	@ 0x29
 8001a14:	60fb      	str	r3, [r7, #12]
          break;
 8001a16:	e01b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	4a16      	ldr	r2, [pc, #88]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a1c:	5cd2      	ldrb	r2, [r2, r3]
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a20:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 8001a22:	232a      	movs	r3, #42	@ 0x2a
 8001a24:	60fb      	str	r3, [r7, #12]
          break;
 8001a26:	e013      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a2c:	5cd2      	ldrb	r2, [r2, r3]
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a30:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 8001a32:	232b      	movs	r3, #43	@ 0x2b
 8001a34:	60fb      	str	r3, [r7, #12]
          break;
 8001a36:	e00b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a3c:	5cd2      	ldrb	r2, [r2, r3]
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a40:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
          break;
 8001a46:	e003      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
          break;
 8001a4c:	e000      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 8001a4e:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	3301      	adds	r3, #1
 8001a54:	72fb      	strb	r3, [r7, #11]
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	2b15      	cmp	r3, #21
 8001a5a:	f67f aea7 	bls.w	80017ac <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001a5e:	2216      	movs	r2, #22
 8001a60:	4904      	ldr	r1, [pc, #16]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a62:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2e0>)
 8001a64:	f00a fa92 	bl	800bf8c <HAL_UART_Receive_DMA>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	24032a48 	.word	0x24032a48
 8001a74:	24032998 	.word	0x24032998
 8001a78:	24032968 	.word	0x24032968
 8001a7c:	24032988 	.word	0x24032988

08001a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a92:	f001 fd4f 	bl	8003534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40001000 	.word	0x40001000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void * argument)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 8001ab6:	af02      	add	r7, sp, #8
 8001ab8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001abc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001ac0:	6018      	str	r0, [r3, #0]

  /**
  * @name   ucControlMode
  * @brief  Keeps the current control mode
  */
  unsigned char ucControlMode = AUTOWARE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f

  // micro-ros QoS
  const rmw_qos_profile_t * qos_autoware = &rmw_qos_profile_autoware;
 8001ac8:	4bd7      	ldr	r3, [pc, #860]	@ (8001e28 <StartMicroAutoware+0x378>)
 8001aca:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
  /**
  * @name   ucNumberOfHandles
  * @brief  Number of subscribers + number of timers + number of services 
  *         OR Number total of callbacks
  */
  unsigned char ucNumberOfHandles = 3;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001ad4:	4bd5      	ldr	r3, [pc, #852]	@ (8001e2c <StartMicroAutoware+0x37c>)
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	4bd5      	ldr	r3, [pc, #852]	@ (8001e30 <StartMicroAutoware+0x380>)
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4bd5      	ldr	r3, [pc, #852]	@ (8001e34 <StartMicroAutoware+0x384>)
 8001ade:	4ad6      	ldr	r2, [pc, #856]	@ (8001e38 <StartMicroAutoware+0x388>)
 8001ae0:	49d6      	ldr	r1, [pc, #856]	@ (8001e3c <StartMicroAutoware+0x38c>)
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f013 fd98 	bl	8015618 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001ae8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001aec:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001af0:	4618      	mov	r0, r3
 8001af2:	f013 fce5 	bl	80154c0 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001af6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001afa:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001afe:	4ad0      	ldr	r2, [pc, #832]	@ (8001e40 <StartMicroAutoware+0x390>)
 8001b00:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001b02:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b06:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b0a:	4ace      	ldr	r2, [pc, #824]	@ (8001e44 <StartMicroAutoware+0x394>)
 8001b0c:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001b0e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b12:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b16:	4acc      	ldr	r2, [pc, #816]	@ (8001e48 <StartMicroAutoware+0x398>)
 8001b18:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b1a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b1e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b22:	4aca      	ldr	r2, [pc, #808]	@ (8001e4c <StartMicroAutoware+0x39c>)
 8001b24:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 8001b26:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b2a:	f5a3 741c 	sub.w	r4, r3, #624	@ 0x270
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f013 f811 	bl	8014b58 <rclc_executor_get_zero_initialized_executor>
 8001b36:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b3a:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4619      	mov	r1, r3
 8001b42:	2388      	movs	r3, #136	@ 0x88
 8001b44:	461a      	mov	r2, r3
 8001b46:	f020 fcfa 	bl	802253e <memcpy>

  allocator = rcl_get_default_allocator();
 8001b4a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b4e:	f5a3 74f2 	sub.w	r4, r3, #484	@ 0x1e4
 8001b52:	463b      	mov	r3, r7
 8001b54:	4618      	mov	r0, r3
 8001b56:	f013 fcc1 	bl	80154dc <rcutils_get_default_allocator>
 8001b5a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b5e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b62:	461d      	mov	r5, r3
 8001b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001b6c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001b70:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	f013 fb1e 	bl	80151b8 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001b7c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001b80:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 8001b84:	4ab2      	ldr	r2, [pc, #712]	@ (8001e50 <StartMicroAutoware+0x3a0>)
 8001b86:	49b3      	ldr	r1, [pc, #716]	@ (8001e54 <StartMicroAutoware+0x3a4>)
 8001b88:	f013 fb60 	bl	801524c <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, ucNumberOfHandles, &allocator);
 8001b8c:	f897 2327 	ldrb.w	r2, [r7, #807]	@ 0x327
 8001b90:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001b94:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001b98:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001b9c:	f012 ffe8 	bl	8014b70 <rclc_executor_init>

  // create timers
  rclc_timer_init_default(&timer_watchdog_agent, &support, WATCHDOG_AGENT_TIMEOUT, timer_watchdog_agent_callback);
 8001ba0:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001ba4:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 8001ba8:	4bab      	ldr	r3, [pc, #684]	@ (8001e58 <StartMicroAutoware+0x3a8>)
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f013 fc4c 	bl	8015450 <rclc_timer_init_default>
  // create subscribers
  rclc_subscription_init(
 8001bb8:	f014 fb74 	bl	80162a4 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bc2:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8001bc6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4ba3      	ldr	r3, [pc, #652]	@ (8001e5c <StartMicroAutoware+0x3ac>)
 8001bce:	f013 fbff 	bl	80153d0 <rclc_subscription_init>
    		&clock_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(rosgraph_msgs, msg, Clock),
    		"/clock", qos_autoware);
        
  rclc_subscription_init(
 8001bd2:	f00f ff43 	bl	8011a5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bdc:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001be0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4b9e      	ldr	r3, [pc, #632]	@ (8001e60 <StartMicroAutoware+0x3b0>)
 8001be8:	f013 fbf2 	bl	80153d0 <rclc_subscription_init>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_control_msgs, msg, AckermannControlCommand),
    		"/control/command/control_cmd", qos_autoware);

  rclc_subscription_init(
 8001bec:	f010 f9ae 	bl	8011f4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bf6:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001bfa:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4b98      	ldr	r3, [pc, #608]	@ (8001e64 <StartMicroAutoware+0x3b4>)
 8001c02:	f013 fbe5 	bl	80153d0 <rclc_subscription_init>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd", qos_autoware);

  rclc_subscription_init(
 8001c06:	f010 fa19 	bl	801203c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c10:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001c14:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	4b93      	ldr	r3, [pc, #588]	@ (8001e68 <StartMicroAutoware+0x3b8>)
 8001c1c:	f013 fbd8 	bl	80153d0 <rclc_subscription_init>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd", qos_autoware);

  rclc_subscription_init(
 8001c20:	f010 f9c4 	bl	8011fac <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c2a:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001c2e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4b8d      	ldr	r3, [pc, #564]	@ (8001e6c <StartMicroAutoware+0x3bc>)
 8001c36:	f013 fbcb 	bl	80153d0 <rclc_subscription_init>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd", qos_autoware);

  rclc_subscription_init(
 8001c3a:	f014 fcc5 	bl	80165c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c44:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001c48:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4b88      	ldr	r3, [pc, #544]	@ (8001e70 <StartMicroAutoware+0x3c0>)
 8001c50:	f013 fbbe 	bl	80153d0 <rclc_subscription_init>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd", qos_autoware);

  rclc_subscription_init(
 8001c54:	f014 fd00 	bl	8016658 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c5e:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001c62:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4b82      	ldr	r3, [pc, #520]	@ (8001e74 <StartMicroAutoware+0x3c4>)
 8001c6a:	f013 fbb1 	bl	80153d0 <rclc_subscription_init>
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd", qos_autoware);

  // create publishers
  rclc_publisher_init(
 8001c6e:	f010 f955 	bl	8011f1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c78:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8001c7c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4b7d      	ldr	r3, [pc, #500]	@ (8001e78 <StartMicroAutoware+0x3c8>)
 8001c84:	f013 fb24 	bl	80152d0 <rclc_publisher_init>
        &control_mode_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, ControlModeReport),
        "/vehicle/status/control_mode", qos_autoware);

  rclc_publisher_init(
 8001c88:	f010 fa08 	bl	801209c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c92:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001c96:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4b77      	ldr	r3, [pc, #476]	@ (8001e7c <StartMicroAutoware+0x3cc>)
 8001c9e:	f013 fb17 	bl	80152d0 <rclc_publisher_init>
		    &vehicle_twist_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, VelocityReport),
        "/vehicle/status/velocity_status", qos_autoware);

  rclc_publisher_init(
 8001ca2:	f010 f9b3 	bl	801200c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cac:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001cb0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4b72      	ldr	r3, [pc, #456]	@ (8001e80 <StartMicroAutoware+0x3d0>)
 8001cb8:	f013 fb0a 	bl	80152d0 <rclc_publisher_init>
        &steering_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, SteeringReport),
        "/vehicle/status/steering_status", qos_autoware);

  rclc_publisher_init(
 8001cbc:	f010 f95e 	bl	8011f7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cc6:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001cca:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e84 <StartMicroAutoware+0x3d4>)
 8001cd2:	f013 fafd 	bl	80152d0 <rclc_publisher_init>
        &gear_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearReport),
        "/vehicle/status/gear_status", qos_autoware);

  rclc_publisher_init(
 8001cd6:	f010 f9c9 	bl	801206c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001ce0:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001ce4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4b67      	ldr	r3, [pc, #412]	@ (8001e88 <StartMicroAutoware+0x3d8>)
 8001cec:	f013 faf0 	bl	80152d0 <rclc_publisher_init>
        &turn_indicators_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsReport),
        "/vehicle/status/turn_indicators_status", qos_autoware);

  rclc_publisher_init(
 8001cf0:	f010 f974 	bl	8011fdc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cfa:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001cfe:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4b61      	ldr	r3, [pc, #388]	@ (8001e8c <StartMicroAutoware+0x3dc>)
 8001d06:	f013 fae3 	bl	80152d0 <rclc_publisher_init>
        &hazard_lights_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsReport),
        "/vehicle/status/hazard_lights_status", qos_autoware);

  rclc_publisher_init(
 8001d0a:	f014 fc75 	bl	80165f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d14:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001d18:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001e90 <StartMicroAutoware+0x3e0>)
 8001d20:	f013 fad6 	bl	80152d0 <rclc_publisher_init>
        &actuation_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
        "/vehicle/status/actuation_status", qos_autoware);

  rclc_publisher_init(
 8001d24:	f014 fc80 	bl	8016628 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d2e:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001d32:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4b56      	ldr	r3, [pc, #344]	@ (8001e94 <StartMicroAutoware+0x3e4>)
 8001d3a:	f013 fac9 	bl	80152d0 <rclc_publisher_init>
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
        "/vehicle/status/steering_wheel_status", qos_autoware);

  // creating servers
  rclc_service_init(
 8001d3e:	f010 f8cd 	bl	8011edc <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d48:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001d4c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4b51      	ldr	r3, [pc, #324]	@ (8001e98 <StartMicroAutoware+0x3e8>)
 8001d54:	f013 fafc 	bl	8015350 <rclc_service_init>
        ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_auto_vehicle_msgs, srv, ControlModeCommand),
        "/control/control_mode_request", qos_autoware);


  // Adding callbacks to executor -- START
  rclc_executor_add_subscription(&executor, &clock_sub_, &clock_msg_, &clock_callback, ON_NEW_DATA);
 8001d58:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 8001d5c:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001d60:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4b4c      	ldr	r3, [pc, #304]	@ (8001e9c <StartMicroAutoware+0x3ec>)
 8001d6a:	f012 ff7d 	bl	8014c68 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001d6e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8001d72:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001d76:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4b48      	ldr	r3, [pc, #288]	@ (8001ea0 <StartMicroAutoware+0x3f0>)
 8001d80:	f012 ff72 	bl	8014c68 <rclc_executor_add_subscription>

  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001d84:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001d88:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001d8c:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001d90:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d94:	4c43      	ldr	r4, [pc, #268]	@ (8001ea4 <StartMicroAutoware+0x3f4>)
 8001d96:	9400      	str	r4, [sp, #0]
 8001d98:	f012 ffa4 	bl	8014ce4 <rclc_executor_add_service>
  // rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);

  // Adding callbacks to executor -- END

  // pinging micro-ros agent
  rmw_ret_t xPingResult = rmw_uros_ping_agent(1000, 20);
 8001d9c:	2114      	movs	r1, #20
 8001d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da2:	f013 fc4f 	bl	8015644 <rmw_uros_ping_agent>
 8001da6:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320

  // Setting flag on TaskControle to enable autonomous mode
  osThreadFlagsSet(TaskControleHandle, MICRO_ROS_AGENT_ONLINE_FLAG);
 8001daa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <StartMicroAutoware+0x3f8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00c fa0e 	bl	800e1d4 <osThreadFlagsSet>
  // Task loop
  for (;;)
  {

    // Sync time with ROS
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8001db8:	203c      	movs	r0, #60	@ 0x3c
 8001dba:	f013 fe5d 	bl	8015a78 <rmw_uros_sync_session>

    // Run executor for EXECUTOR_SPIN_TIME ms
    rclc_executor_spin_some(&executor, EXECUTOR_SPIN_TIME * (1000 * 1000)); // Spinning executor for EXECUTOR_SPIN_PERIOD * (1000 * 1000) ns.
 8001dbe:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001dc2:	a317      	add	r3, pc, #92	@ (adr r3, 8001e20 <StartMicroAutoware+0x370>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	4608      	mov	r0, r1
 8001dca:	f013 f9bb 	bl	8015144 <rclc_executor_spin_some>


    // Checking if control mode has changed by vehicle or Autoware.
    uiFlags = osThreadFlagsGet();
 8001dce:	f00c fa4f 	bl	800e270 <osThreadFlagsGet>
 8001dd2:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2011      	movs	r0, #17
 8001ddc:	f00c fa69 	bl	800e2b2 <osThreadFlagsWait>
 8001de0:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

    if(CHECK_FLAG(TO_AUTOWARE_MODE_FLAG, uiFlags))
 8001de4:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <StartMicroAutoware+0x350>
 8001df0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db03      	blt.n	8001e00 <StartMicroAutoware+0x350>
    {
      ucControlMode = AUTOWARE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001dfe:	e070      	b.n	8001ee2 <StartMicroAutoware+0x432>
    }
    else if(CHECK_FLAG(TO_MANUAL_MODE_FLAG, uiFlags))
 8001e00:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d04f      	beq.n	8001eac <StartMicroAutoware+0x3fc>
 8001e0c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db4b      	blt.n	8001eac <StartMicroAutoware+0x3fc>
    {
      ucControlMode = MANUAL;
 8001e14:	2304      	movs	r3, #4
 8001e16:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001e1a:	e062      	b.n	8001ee2 <StartMicroAutoware+0x432>
 8001e1c:	f3af 8000 	nop.w
 8001e20:	01312d00 	.word	0x01312d00
 8001e24:	00000000 	.word	0x00000000
 8001e28:	080234f8 	.word	0x080234f8
 8001e2c:	08000f8d 	.word	0x08000f8d
 8001e30:	08000f29 	.word	0x08000f29
 8001e34:	08000f09 	.word	0x08000f09
 8001e38:	08000edd 	.word	0x08000edd
 8001e3c:	24032adc 	.word	0x24032adc
 8001e40:	080020ed 	.word	0x080020ed
 8001e44:	08002131 	.word	0x08002131
 8001e48:	08002169 	.word	0x08002169
 8001e4c:	080021d5 	.word	0x080021d5
 8001e50:	08023220 	.word	0x08023220
 8001e54:	08023230 	.word	0x08023230
 8001e58:	08001169 	.word	0x08001169
 8001e5c:	08023244 	.word	0x08023244
 8001e60:	0802324c 	.word	0x0802324c
 8001e64:	0802326c 	.word	0x0802326c
 8001e68:	08023288 	.word	0x08023288
 8001e6c:	080232b0 	.word	0x080232b0
 8001e70:	080232d4 	.word	0x080232d4
 8001e74:	080232f4 	.word	0x080232f4
 8001e78:	08023314 	.word	0x08023314
 8001e7c:	08023334 	.word	0x08023334
 8001e80:	08023354 	.word	0x08023354
 8001e84:	08023374 	.word	0x08023374
 8001e88:	08023390 	.word	0x08023390
 8001e8c:	080233b8 	.word	0x080233b8
 8001e90:	080233e0 	.word	0x080233e0
 8001e94:	08023404 	.word	0x08023404
 8001e98:	0802342c 	.word	0x0802342c
 8001e9c:	080011ad 	.word	0x080011ad
 8001ea0:	080011d9 	.word	0x080011d9
 8001ea4:	08001205 	.word	0x08001205
 8001ea8:	24032968 	.word	0x24032968
    }
    else if(CHECK_FLAG(TO_EMERGENCY_MODE_FLAG, uiFlags))
 8001eac:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <StartMicroAutoware+0x418>
 8001eb8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db03      	blt.n	8001ec8 <StartMicroAutoware+0x418>
    {
      ucControlMode = MANUAL;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001ec6:	e00c      	b.n	8001ee2 <StartMicroAutoware+0x432>
      // do some of emergency thing in Autoware way.
    }
    else if(CHECK_FLAG((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG), uiFlags))
 8001ec8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001ecc:	f003 0311 	and.w	r3, r3, #17
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d106      	bne.n	8001ee2 <StartMicroAutoware+0x432>
 8001ed4:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db02      	blt.n	8001ee2 <StartMicroAutoware+0x432>
    {
      ucControlMode = MANUAL;
 8001edc:	2304      	movs	r3, #4
 8001ede:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
    }

    // Publishing control mode
    control_mode_msg_.stamp = clock_msg_.clock;
 8001ee2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001eea:	461a      	mov	r2, r3
 8001eec:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001ef0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ef4:	e882 0003 	stmia.w	r2, {r0, r1}
    control_mode_msg_.mode = ucControlMode;
 8001ef8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f00:	f897 232f 	ldrb.w	r2, [r7, #815]	@ 0x32f
 8001f04:	721a      	strb	r2, [r3, #8]
    rcl_publish(&control_mode_pub_, &control_mode_msg_, NULL);
 8001f06:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8001f0a:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f012 fa93 	bl	801443c <rcl_publish>


    // Checking what data was recieved
    if(0b1 & (ucSubscribersRecieved >> 1)) // Checking if control_cmd_sub_ data arrives (second bit of ucSubscribersRecieved)
 8001f16:	4b6e      	ldr	r3, [pc, #440]	@ (80020d0 <StartMicroAutoware+0x620>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03f      	beq.n	8001fa4 <StartMicroAutoware+0x4f4>
    {
      // Autonomous mode: Gather all subs data, then compact and send to TaskControle.
      if(AUTOWARE == ucControlMode)
 8001f24:	f897 332f 	ldrb.w	r3, [r7, #815]	@ 0x32f
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d13b      	bne.n	8001fa4 <StartMicroAutoware+0x4f4>
      {
        // Assembling xControlAction with Autoware data
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001f2c:	4b69      	ldr	r3, [pc, #420]	@ (80020d4 <StartMicroAutoware+0x624>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00c fade 	bl	800e4f6 <osMutexAcquire>

        xControlAction.xSteeringAngle.fFloat = control_cmd_msg_.lateral.steering_tire_angle * 1.2;
 8001f3a:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8001f3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f42:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 80020c8 <StartMicroAutoware+0x618>
 8001f46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f4e:	4b62      	ldr	r3, [pc, #392]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f50:	edc3 7a00 	vstr	s15, [r3]
        xControlAction.xSteeringVelocity.fFloat = control_cmd_msg_.lateral.steering_tire_rotation_rate * 1.2;
 8001f54:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 8001f58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f5c:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80020c8 <StartMicroAutoware+0x618>
 8001f60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f68:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f6a:	edc3 7a01 	vstr	s15, [r3, #4]
        xControlAction.xSpeed.fFloat = control_cmd_msg_.longitudinal.speed;
 8001f6e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001f72:	4a59      	ldr	r2, [pc, #356]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f74:	6093      	str	r3, [r2, #8]
        xControlAction.xAcceleration.fFloat = control_cmd_msg_.longitudinal.acceleration;
 8001f76:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001f7a:	4a57      	ldr	r2, [pc, #348]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f7c:	60d3      	str	r3, [r2, #12]
        xControlAction.xJerk.fFloat = control_cmd_msg_.longitudinal.jerk;
 8001f7e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001f82:	4a55      	ldr	r2, [pc, #340]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f84:	6113      	str	r3, [r2, #16]
        xControlAction.ucControlMode = AUTOWARE;
 8001f86:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	751a      	strb	r2, [r3, #20]

        osMutexRelease(MutexControlActionHandle);
 8001f8c:	4b51      	ldr	r3, [pc, #324]	@ (80020d4 <StartMicroAutoware+0x624>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00c fafb 	bl	800e58c <osMutexRelease>

        // Sync new Autoware command data to TaskControle
        osThreadFlagsSet(TaskControleHandle, DATA_UPDATED_FLAG);
 8001f96:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <StartMicroAutoware+0x62c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00c f918 	bl	800e1d4 <osThreadFlagsSet>
    }


    // Check flag to sync xControlSignal update -- Doesn't need to wait becouse taskControle waits for CARLA data and just pack and sent to here,
    // as microAutoware never blocks taskControle, then we don't need to wait here.
    uiFlags = osThreadFlagsGet();
 8001fa4:	f00c f964 	bl	800e270 <osThreadFlagsGet>
 8001fa8:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
    uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2101      	movs	r1, #1
 8001fb0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fb4:	f00c f97d 	bl	800e2b2 <osThreadFlagsWait>
 8001fb8:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

    // xControlSignal updated
    if(CHECK_FLAG(DATA_UPDATED_FLAG, uiFlags))
 8001fbc:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d078      	beq.n	80020ba <StartMicroAutoware+0x60a>
 8001fc8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db74      	blt.n	80020ba <StartMicroAutoware+0x60a>
    {
      // Assembling microAutoware msgs 
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001fd0:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <StartMicroAutoware+0x630>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00c fa8c 	bl	800e4f6 <osMutexAcquire>

      // Assembling vehicle_twist_msg_ data | <autoware_auto_vehicle_msgs/msg/velocity_report.h>

      // Frame ID atribute
      rosidl_runtime_c__String xFrameId;
      char cFrame[10] = "base_link";
 8001fde:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001fe2:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	@ (80020e4 <StartMicroAutoware+0x634>)
 8001fe8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fea:	c303      	stmia	r3!, {r0, r1}
 8001fec:	801a      	strh	r2, [r3, #0]
      xFrameId.data = cFrame;
 8001fee:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ff2:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001ff6:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001ffa:	601a      	str	r2, [r3, #0]
      xFrameId.size = 9;
 8001ffc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002000:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002004:	2209      	movs	r2, #9
 8002006:	605a      	str	r2, [r3, #4]
      xFrameId.capacity = 9;
 8002008:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800200c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002010:	2209      	movs	r2, #9
 8002012:	609a      	str	r2, [r3, #8]

      vehicle_twist_msg_.header.stamp = clock_msg_.clock;
 8002014:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002018:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800201c:	461a      	mov	r2, r3
 800201e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002022:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002026:	e882 0003 	stmia.w	r2, {r0, r1}
      vehicle_twist_msg_.header.frame_id = xFrameId;
 800202a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800202e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002032:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8002036:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 800203a:	3308      	adds	r3, #8
 800203c:	ca07      	ldmia	r2, {r0, r1, r2}
 800203e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      vehicle_twist_msg_.heading_rate = xControlSignal.fHeadingRate;
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800204a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800204e:	61da      	str	r2, [r3, #28]
      vehicle_twist_msg_.lateral_velocity = xControlSignal.fLatSpeed;
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002058:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800205c:	619a      	str	r2, [r3, #24]
      vehicle_twist_msg_.longitudinal_velocity = xControlSignal.fLongSpeed;
 800205e:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002066:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800206a:	615a      	str	r2, [r3, #20]

      // Assembling steering_status_msg_ data | <autoware_auto_vehicle_msgs/msg/steering_report.h>
      steering_status_msg_.stamp = clock_msg_.clock;
 800206c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002070:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002074:	461a      	mov	r2, r3
 8002076:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800207a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800207e:	e882 0003 	stmia.w	r2, {r0, r1}
      steering_status_msg_.steering_tire_angle = xControlSignal.fSteeringStatus;
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800208a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800208e:	609a      	str	r2, [r3, #8]

      osMutexRelease(MutexControlSignalHandle);
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <StartMicroAutoware+0x630>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f00c fa79 	bl	800e58c <osMutexRelease>

      // Publishing in Autoware topics
      rcl_publish(&vehicle_twist_pub_, &vehicle_twist_msg_, NULL);
 800209a:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 800209e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80020a2:	2200      	movs	r2, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f012 f9c9 	bl	801443c <rcl_publish>
      rcl_publish(&steering_status_pub_, &steering_status_msg_, NULL);
 80020aa:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80020ae:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 80020b2:	2200      	movs	r2, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f012 f9c1 	bl	801443c <rcl_publish>
    }

    // Reseting subscribers flags
    ucSubscribersRecieved = 0;
 80020ba:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <StartMicroAutoware+0x620>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 80020c0:	e67a      	b.n	8001db8 <StartMicroAutoware+0x308>
 80020c2:	bf00      	nop
 80020c4:	f3af 8000 	nop.w
 80020c8:	33333333 	.word	0x33333333
 80020cc:	3ff33333 	.word	0x3ff33333
 80020d0:	240329ae 	.word	0x240329ae
 80020d4:	24032974 	.word	0x24032974
 80020d8:	240329b0 	.word	0x240329b0
 80020dc:	24032968 	.word	0x24032968
 80020e0:	24032970 	.word	0x24032970
 80020e4:	0802344c 	.word	0x0802344c
 80020e8:	240329c8 	.word	0x240329c8

080020ec <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <microros_allocate+0x3c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <microros_allocate+0x3c>)
 8002104:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <microros_allocate+0x40>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <microros_allocate+0x40>)
 8002114:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fc46 	bl	80009a8 <pvPortMallocMicroROS>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	240329ec 	.word	0x240329ec
 800212c:	240329f0 	.word	0x240329f0

08002130 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00c      	beq.n	800215a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7fe fd55 	bl	8000bf0 <getBlockSize>
 8002146:	4603      	mov	r3, r0
 8002148:	4a06      	ldr	r2, [pc, #24]	@ (8002164 <microros_deallocate+0x34>)
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <microros_deallocate+0x34>)
 8002152:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fcef 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	240329f0 	.word	0x240329f0

08002168 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002174:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <microros_reallocate+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4413      	add	r3, r2
 800217e:	461a      	mov	r2, r3
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <microros_reallocate+0x64>)
 8002182:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <microros_reallocate+0x68>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	461a      	mov	r2, r3
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <microros_reallocate+0x68>)
 8002192:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800219a:	68b8      	ldr	r0, [r7, #8]
 800219c:	f7fe fc04 	bl	80009a8 <pvPortMallocMicroROS>
 80021a0:	4603      	mov	r3, r0
 80021a2:	e00e      	b.n	80021c2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7fe fd23 	bl	8000bf0 <getBlockSize>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a08      	ldr	r2, [pc, #32]	@ (80021d0 <microros_reallocate+0x68>)
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <microros_reallocate+0x68>)
 80021b6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7fe fd36 	bl	8000c2c <pvPortReallocMicroROS>
 80021c0:	4603      	mov	r3, r0
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	240329ec 	.word	0x240329ec
 80021d0:	240329f0 	.word	0x240329f0

080021d4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	4a0c      	ldr	r2, [pc, #48]	@ (800221c <microros_zero_allocate+0x48>)
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <microros_zero_allocate+0x48>)
 80021f2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <microros_zero_allocate+0x4c>)
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	461a      	mov	r2, r3
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <microros_zero_allocate+0x4c>)
 8002206:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7fe fd3b 	bl	8000c86 <pvPortCallocMicroROS>
 8002210:	4603      	mov	r3, r0
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	240329ec 	.word	0x240329ec
 8002220:	240329f0 	.word	0x240329f0
 8002224:	00000000 	.word	0x00000000

08002228 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800223a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800223e:	a320      	add	r3, pc, #128	@ (adr r3, 80022c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f8b4 	bl	80003b0 <__aeabi_ldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002256:	a31a      	add	r3, pc, #104	@ (adr r3, 80022c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f8a8 	bl	80003b0 <__aeabi_ldivmod>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	da20      	bge.n	80022ae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <UTILS_NanosecondsToTimespec+0x90>)
 8002272:	fb82 1203 	smull	r1, r2, r2, r3
 8002276:	1712      	asrs	r2, r2, #28
 8002278:	17db      	asrs	r3, r3, #31
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	17c8      	asrs	r0, r1, #31
 800228a:	460c      	mov	r4, r1
 800228c:	4605      	mov	r5, r0
 800228e:	ebb2 0804 	subs.w	r8, r2, r4
 8002292:	eb63 0905 	sbc.w	r9, r3, r5
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4906      	ldr	r1, [pc, #24]	@ (80022bc <UTILS_NanosecondsToTimespec+0x94>)
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]
    }
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022b8:	44b82fa1 	.word	0x44b82fa1
 80022bc:	3b9aca00 	.word	0x3b9aca00
 80022c0:	3b9aca00 	.word	0x3b9aca00
 80022c4:	00000000 	.word	0x00000000

080022c8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b08e      	sub	sp, #56	@ 0x38
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80022d2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022d8:	2300      	movs	r3, #0
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80022ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00d fe90 	bl	8010014 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	17da      	asrs	r2, r3, #31
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	61fa      	str	r2, [r7, #28]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	69b9      	ldr	r1, [r7, #24]
 8002306:	000b      	movs	r3, r1
 8002308:	2200      	movs	r2, #0
 800230a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800230e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002310:	2200      	movs	r2, #0
 8002312:	461c      	mov	r4, r3
 8002314:	4615      	mov	r5, r2
 8002316:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800231a:	1911      	adds	r1, r2, r4
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	416b      	adcs	r3, r5
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002326:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800232a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	f04f 0500 	mov.w	r5, #0
 800233a:	015d      	lsls	r5, r3, #5
 800233c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002340:	0154      	lsls	r4, r2, #5
 8002342:	4622      	mov	r2, r4
 8002344:	462b      	mov	r3, r5
 8002346:	ebb2 0800 	subs.w	r8, r2, r0
 800234a:	eb63 0901 	sbc.w	r9, r3, r1
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800235a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800235e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002362:	4690      	mov	r8, r2
 8002364:	4699      	mov	r9, r3
 8002366:	eb18 0a00 	adds.w	sl, r8, r0
 800236a:	eb49 0b01 	adc.w	fp, r9, r1
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800237a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800237e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002382:	ebb2 040a 	subs.w	r4, r2, sl
 8002386:	603c      	str	r4, [r7, #0]
 8002388:	eb63 030b 	sbc.w	r3, r3, fp
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4623      	mov	r3, r4
 8002394:	181b      	adds	r3, r3, r0
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	462b      	mov	r3, r5
 800239a:	eb41 0303 	adc.w	r3, r1, r3
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023a6:	f7ff ff3f 	bl	8002228 <UTILS_NanosecondsToTimespec>

    return 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	3738      	adds	r7, #56	@ 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_MspInit+0x38>)
 80023c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <HAL_MspInit+0x38>)
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_MspInit+0x38>)
 80023d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	210f      	movs	r1, #15
 80023e0:	f06f 0001 	mvn.w	r0, #1
 80023e4:	f002 fc80 	bl	8004ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	58024400 	.word	0x58024400

080023f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b090      	sub	sp, #64	@ 0x40
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d827      	bhi.n	8002452 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002402:	2200      	movs	r2, #0
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	2036      	movs	r0, #54	@ 0x36
 8002408:	f002 fc6e 	bl	8004ce8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800240c:	2036      	movs	r0, #54	@ 0x36
 800240e:	f002 fc85 	bl	8004d1c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002412:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <HAL_InitTick+0xc4>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_InitTick+0xc8>)
 800241a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241e:	4a27      	ldr	r2, [pc, #156]	@ (80024bc <HAL_InitTick+0xc8>)
 8002420:	f043 0310 	orr.w	r3, r3, #16
 8002424:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002428:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_InitTick+0xc8>)
 800242a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002436:	f107 0210 	add.w	r2, r7, #16
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f006 fcc5 	bl	8008dd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_InitTick+0x6a>
 8002450:	e001      	b.n	8002456 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e02b      	b.n	80024ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002456:	f006 fc8f 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 800245a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800245c:	e004      	b.n	8002468 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800245e:	f006 fc8b 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 8002462:	4603      	mov	r3, r0
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <HAL_InitTick+0xcc>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	0c9b      	lsrs	r3, r3, #18
 8002472:	3b01      	subs	r3, #1
 8002474:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002476:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002478:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <HAL_InitTick+0xd4>)
 800247a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_InitTick+0xd0>)
 800247e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002482:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002484:	4a0f      	ldr	r2, [pc, #60]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002488:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <HAL_InitTick+0xd0>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002496:	480b      	ldr	r0, [pc, #44]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002498:	f009 f9da 	bl	800b850 <HAL_TIM_Base_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024a2:	4808      	ldr	r0, [pc, #32]	@ (80024c4 <HAL_InitTick+0xd0>)
 80024a4:	f009 fa36 	bl	800b914 <HAL_TIM_Base_Start_IT>
 80024a8:	4603      	mov	r3, r0
 80024aa:	e000      	b.n	80024ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3740      	adds	r7, #64	@ 0x40
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2400000c 	.word	0x2400000c
 80024bc:	58024400 	.word	0x58024400
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	240329f4 	.word	0x240329f4
 80024c8:	40001000 	.word	0x40001000

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <NMI_Handler+0x4>

080024d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <MemManage_Handler+0x4>

080024e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <BusFault_Handler+0x4>

080024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <UsageFault_Handler+0x4>

080024f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <DMA1_Stream0_IRQHandler+0x10>)
 800250a:	f003 ff3f 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	24032c60 	.word	0x24032c60

08002518 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <DMA1_Stream1_IRQHandler+0x10>)
 800251e:	f003 ff35 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24032cd8 	.word	0x24032cd8

0800252c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <USART2_IRQHandler+0x10>)
 8002532:	f009 fe0d 	bl	800c150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	24032a48 	.word	0x24032a48

08002540 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <USART3_IRQHandler+0x10>)
 8002546:	f009 fe03 	bl	800c150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	24032adc 	.word	0x24032adc

08002554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8002558:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800255c:	f005 fbfd 	bl	8007d5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <TIM6_DAC_IRQHandler+0x10>)
 800256a:	f009 fa4b 	bl	800ba04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	240329f4 	.word	0x240329f4

08002578 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800257c:	4802      	ldr	r0, [pc, #8]	@ (8002588 <DMA2_Stream1_IRQHandler+0x10>)
 800257e:	f003 ff05 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24032b70 	.word	0x24032b70

0800258c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002590:	4802      	ldr	r0, [pc, #8]	@ (800259c <DMA2_Stream2_IRQHandler+0x10>)
 8002592:	f003 fefb 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	24032be8 	.word	0x24032be8

080025a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return 1;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_kill>:

int _kill(int pid, int sig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ba:	f01f ff8b 	bl	80224d4 <__errno>
 80025be:	4603      	mov	r3, r0
 80025c0:	2216      	movs	r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
  return -1;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_exit>:

void _exit (int status)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ffe7 	bl	80025b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025e2:	bf00      	nop
 80025e4:	e7fd      	b.n	80025e2 <_exit+0x12>

080025e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e00a      	b.n	800260e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025f8:	f3af 8000 	nop.w
 80025fc:	4601      	mov	r1, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	60ba      	str	r2, [r7, #8]
 8002604:	b2ca      	uxtb	r2, r1
 8002606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dbf0      	blt.n	80025f8 <_read+0x12>
  }

  return len;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e009      	b.n	8002646 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	60ba      	str	r2, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	dbf1      	blt.n	8002632 <_write+0x12>
  }
  return len;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_close>:

int _close(int file)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002680:	605a      	str	r2, [r3, #4]
  return 0;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_isatty>:

int _isatty(int file)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c8:	4a14      	ldr	r2, [pc, #80]	@ (800271c <_sbrk+0x5c>)
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <_sbrk+0x60>)
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d4:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <_sbrk+0x64>)
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <_sbrk+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d207      	bcs.n	8002700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f0:	f01f fef0 	bl	80224d4 <__errno>
 80026f4:	4603      	mov	r3, r0
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026fe:	e009      	b.n	8002714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	4a05      	ldr	r2, [pc, #20]	@ (8002724 <_sbrk+0x64>)
 8002710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	24080000 	.word	0x24080000
 8002720:	00000400 	.word	0x00000400
 8002724:	24032a44 	.word	0x24032a44
 8002728:	240696f0 	.word	0x240696f0

0800272c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <SystemInit+0xe4>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <SystemInit+0xe4>)
 8002738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002740:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <SystemInit+0xe8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	2b06      	cmp	r3, #6
 800274a:	d807      	bhi.n	800275c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800274c:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <SystemInit+0xe8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <SystemInit+0xe8>)
 8002756:	f043 0307 	orr.w	r3, r3, #7
 800275a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800275c:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <SystemInit+0xec>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2d      	ldr	r2, [pc, #180]	@ (8002818 <SystemInit+0xec>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <SystemInit+0xec>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800276e:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <SystemInit+0xec>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4929      	ldr	r1, [pc, #164]	@ (8002818 <SystemInit+0xec>)
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <SystemInit+0xf0>)
 8002776:	4013      	ands	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800277a:	4b26      	ldr	r3, [pc, #152]	@ (8002814 <SystemInit+0xe8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002786:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <SystemInit+0xe8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 030f 	bic.w	r3, r3, #15
 800278e:	4a21      	ldr	r2, [pc, #132]	@ (8002814 <SystemInit+0xe8>)
 8002790:	f043 0307 	orr.w	r3, r3, #7
 8002794:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <SystemInit+0xec>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <SystemInit+0xec>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <SystemInit+0xec>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <SystemInit+0xec>)
 80027aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <SystemInit+0xf4>)
 80027ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <SystemInit+0xec>)
 80027b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <SystemInit+0xf8>)
 80027b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027b4:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <SystemInit+0xec>)
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <SystemInit+0xfc>)
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027ba:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <SystemInit+0xec>)
 80027bc:	2200      	movs	r2, #0
 80027be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027c0:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <SystemInit+0xec>)
 80027c2:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <SystemInit+0xfc>)
 80027c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027c6:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <SystemInit+0xec>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <SystemInit+0xec>)
 80027ce:	4a16      	ldr	r2, [pc, #88]	@ (8002828 <SystemInit+0xfc>)
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <SystemInit+0xec>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <SystemInit+0xec>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002818 <SystemInit+0xec>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <SystemInit+0xec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <SystemInit+0x100>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <SystemInit+0x104>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f6:	d202      	bcs.n	80027fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <SystemInit+0x108>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <SystemInit+0x10c>)
 8002800:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002804:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00
 8002814:	52002000 	.word	0x52002000
 8002818:	58024400 	.word	0x58024400
 800281c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002820:	02020200 	.word	0x02020200
 8002824:	01ff0000 	.word	0x01ff0000
 8002828:	01010280 	.word	0x01010280
 800282c:	5c001000 	.word	0x5c001000
 8002830:	ffff0000 	.word	0xffff0000
 8002834:	51008108 	.word	0x51008108
 8002838:	52004000 	.word	0x52004000

0800283c <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b099      	sub	sp, #100	@ 0x64
 8002840:	af04      	add	r7, sp, #16
 8002842:	6078      	str	r0, [r7, #4]

  // Local variables -- START
  unsigned char ucControlMode;

  // Joystick calibration -- Keep as variable for future auto-calibration implementation
  unsigned int uiX0   = 33970;
 8002844:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8002848:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 800284a:	f240 4321 	movw	r3, #1057	@ 0x421
 800284e:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 8002850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002854:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 8002856:	f248 332c 	movw	r3, #33580	@ 0x832c
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 800285c:	f240 4326 	movw	r3, #1062	@ 0x426
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 8002862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30

  // Deadline lost counter for control command msg
  unsigned char ucNumberOfLostMessageCtlCmd = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

  // Deadline lost counter for status msg
  unsigned char ucNumberOfLostMessageStatus = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in single mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8002878:	2216      	movs	r2, #22
 800287a:	49b3      	ldr	r1, [pc, #716]	@ (8002b48 <StartTaskControle+0x30c>)
 800287c:	48b3      	ldr	r0, [pc, #716]	@ (8002b4c <StartTaskControle+0x310>)
 800287e:	f009 fb85 	bl	800bf8c <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = AUTOWARE;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  // Waiting for micro-ROS connect to agent
  uiFlags = osThreadFlagsGet();
 8002888:	f00b fcf2 	bl	800e270 <osThreadFlagsGet>
 800288c:	6338      	str	r0, [r7, #48]	@ 0x30
  uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init
 800288e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002892:	2100      	movs	r1, #0
 8002894:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002898:	f00b fd0b 	bl	800e2b2 <osThreadFlagsWait>
 800289c:	6338      	str	r0, [r7, #48]	@ 0x30

  // If micro-ROS agent is unvailable, start in MANUAL mode
  if(osFlagsErrorTimeout == uiFlags)
 800289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a0:	f113 0f02 	cmn.w	r3, #2
 80028a4:	d102      	bne.n	80028ac <StartTaskControle+0x70>
  {
    ucControlMode = MANUAL;
 80028a6:	2304      	movs	r3, #4
 80028a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking for operation mode change by Autoware -- START
	  uiFlags = osThreadFlagsGet();
 80028ac:	f00b fce0 	bl	800e270 <osThreadFlagsGet>
 80028b0:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2011      	movs	r0, #17
 80028b8:	f00b fcfb 	bl	800e2b2 <osThreadFlagsWait>
 80028bc:	6338      	str	r0, [r7, #48]	@ 0x30

    if(CHECK_FLAG(TO_AUTOWARE_MODE_FLAG, uiFlags))
 80028be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <StartTaskControle+0x9a>
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db03      	blt.n	80028d6 <StartTaskControle+0x9a>
    {
      ucControlMode = AUTOWARE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80028d4:	e016      	b.n	8002904 <StartTaskControle+0xc8>
    }
    else if(CHECK_FLAG(TO_MANUAL_MODE_FLAG, uiFlags))
 80028d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <StartTaskControle+0xb2>
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db03      	blt.n	80028ee <StartTaskControle+0xb2>
    {
      ucControlMode = MANUAL;
 80028e6:	2304      	movs	r3, #4
 80028e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80028ec:	e00a      	b.n	8002904 <StartTaskControle+0xc8>
    }
    else if(CHECK_FLAG((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG), uiFlags))
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	f003 0311 	and.w	r3, r3, #17
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d105      	bne.n	8002904 <StartTaskControle+0xc8>
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	db02      	blt.n	8002904 <StartTaskControle+0xc8>
    {
      ucControlMode = MANUAL;
 80028fe:	2304      	movs	r3, #4
 8002900:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 8002904:	f00b fcb4 	bl	800e270 <osThreadFlagsGet>
 8002908:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2101      	movs	r1, #1
 800290e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002912:	f00b fcce 	bl	800e2b2 <osThreadFlagsWait>
 8002916:	6338      	str	r0, [r7, #48]	@ 0x30

    if(CHECK_FLAG(JOYSW_FLAG, uiFlags))
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01d      	beq.n	800295e <StartTaskControle+0x122>
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	2b00      	cmp	r3, #0
 8002926:	db1a      	blt.n	800295e <StartTaskControle+0x122>
    {
      if(AUTOWARE == ucControlMode)
 8002928:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800292c:	2b01      	cmp	r3, #1
 800292e:	d109      	bne.n	8002944 <StartTaskControle+0x108>
      {
        ucControlMode = MANUAL;
 8002930:	2304      	movs	r3, #4
 8002932:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002936:	4b86      	ldr	r3, [pc, #536]	@ (8002b50 <StartTaskControle+0x314>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2110      	movs	r1, #16
 800293c:	4618      	mov	r0, r3
 800293e:	f00b fc49 	bl	800e1d4 <osThreadFlagsSet>
 8002942:	e00c      	b.n	800295e <StartTaskControle+0x122>
      }
      else if(MANUAL == ucControlMode)
 8002944:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002948:	2b04      	cmp	r3, #4
 800294a:	d108      	bne.n	800295e <StartTaskControle+0x122>
      {
        ucControlMode = AUTOWARE;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 8002952:	4b7f      	ldr	r3, [pc, #508]	@ (8002b50 <StartTaskControle+0x314>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f00b fc3b 	bl	800e1d4 <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 800295e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002962:	2b01      	cmp	r3, #1
 8002964:	f040 80b9 	bne.w	8002ada <StartTaskControle+0x29e>
    {
      // Setting driving mode lights
	    vDrivingModeLights(ucControlMode);
 8002968:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fd31 	bl	80033d4 <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 8002972:	f00b fc7d 	bl	800e270 <osThreadFlagsGet>
 8002976:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 8002978:	226e      	movs	r2, #110	@ 0x6e
 800297a:	2101      	movs	r1, #1
 800297c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002980:	f00b fc97 	bl	800e2b2 <osThreadFlagsWait>
 8002984:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error -- deadline lost
      if(osFlagsErrorTimeout == uiFlags)
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	f113 0f02 	cmn.w	r3, #2
 800298c:	d11d      	bne.n	80029ca <StartTaskControle+0x18e>
      {
        // Increment the lost data counter
        ucNumberOfLostMessageCtlCmd++;
 800298e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002992:	3301      	adds	r3, #1
 8002994:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        // Check if the max of data lost was got
        if(ucNumberOfLostMessageCtlCmd >= MAX_OF_LOST_MESSAGES) // If yes, change to manual
 8002998:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800299c:	2b09      	cmp	r3, #9
 800299e:	d90c      	bls.n	80029ba <StartTaskControle+0x17e>
        {
          ucControlMode = MANUAL;
 80029a0:	2304      	movs	r3, #4
 80029a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 80029a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b50 <StartTaskControle+0x314>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2110      	movs	r1, #16
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00b fc11 	bl	800e1d4 <osThreadFlagsSet>
          ucNumberOfLostMessageCtlCmd = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80029b8:	e08f      	b.n	8002ada <StartTaskControle+0x29e>
        }
        else // If not, sends the same command again
        {
          HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	221e      	movs	r2, #30
 80029c0:	4619      	mov	r1, r3
 80029c2:	4862      	ldr	r0, [pc, #392]	@ (8002b4c <StartTaskControle+0x310>)
 80029c4:	f009 fa62 	bl	800be8c <HAL_UART_Transmit_DMA>
 80029c8:	e087      	b.n	8002ada <StartTaskControle+0x29e>
        }
      }
      else if(CHECK_FLAG(DATA_UPDATED_FLAG, uiFlags))
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8082 	beq.w	8002ada <StartTaskControle+0x29e>
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db7e      	blt.n	8002ada <StartTaskControle+0x29e>
      {
	      ucNumberOfLostMessageCtlCmd = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    	  // Reshaping control command to array of bytes
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80029e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b54 <StartTaskControle+0x318>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00b fd83 	bl	800e4f6 <osMutexAcquire>

        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80029f0:	4b59      	ldr	r3, [pc, #356]	@ (8002b58 <StartTaskControle+0x31c>)
 80029f2:	f107 0208 	add.w	r2, r7, #8
 80029f6:	9202      	str	r2, [sp, #8]
 80029f8:	466c      	mov	r4, sp
 80029fa:	f103 0210 	add.w	r2, r3, #16
 80029fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a02:	e884 0003 	stmia.w	r4, {r0, r1}
 8002a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a08:	f000 fc60 	bl	80032cc <vGetStringFromControlAction>

        osMutexRelease(MutexControlActionHandle);
 8002a0c:	4b51      	ldr	r3, [pc, #324]	@ (8002b54 <StartTaskControle+0x318>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f00b fdbb 	bl	800e58c <osMutexRelease>

        // Send ucTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	221e      	movs	r2, #30
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	484b      	ldr	r0, [pc, #300]	@ (8002b4c <StartTaskControle+0x310>)
 8002a20:	f009 fa34 	bl	800be8c <HAL_UART_Transmit_DMA>

        // Wait recieve CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 8002a24:	f00b fc24 	bl	800e270 <osThreadFlagsGet>
 8002a28:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002a2a:	2264      	movs	r2, #100	@ 0x64
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002a32:	f00b fc3e 	bl	800e2b2 <osThreadFlagsWait>
 8002a36:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error -- deadline lost
        if(osFlagsErrorTimeout == uiFlags)
 8002a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3a:	f113 0f02 	cmn.w	r3, #2
 8002a3e:	d11e      	bne.n	8002a7e <StartTaskControle+0x242>
        {
          // Increment the lost data counter
          ucNumberOfLostMessageStatus++;
 8002a40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a44:	3301      	adds	r3, #1
 8002a46:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

          // Check if the max of data lost was got
          if(ucNumberOfLostMessageStatus >= MAX_OF_LOST_MESSAGES) // If yes, change to manual
 8002a4a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a4e:	2b09      	cmp	r3, #9
 8002a50:	d90d      	bls.n	8002a6e <StartTaskControle+0x232>
          {
    		    ucControlMode = EMERGENCY;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    		    osThreadFlagsSet(TaskMicroAutowaHandle, TO_EMERGENCY_MODE_FLAG);
 8002a58:	4b3d      	ldr	r3, [pc, #244]	@ (8002b50 <StartTaskControle+0x314>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002a60:	4618      	mov	r0, r3
 8002a62:	f00b fbb7 	bl	800e1d4 <osThreadFlagsSet>
      	    ucNumberOfLostMessageStatus = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002a6c:	e035      	b.n	8002ada <StartTaskControle+0x29e>
          }
          else // If not, sends the same command again
          {
            osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002a6e:	4b38      	ldr	r3, [pc, #224]	@ (8002b50 <StartTaskControle+0x314>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00b fbac 	bl	800e1d4 <osThreadFlagsSet>
 8002a7c:	e02d      	b.n	8002ada <StartTaskControle+0x29e>
          }
        }
        else if(CHECK_FLAG(UART_NEW_DATA_FLAG, uiFlags))
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d028      	beq.n	8002ada <StartTaskControle+0x29e>
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db25      	blt.n	8002ada <StartTaskControle+0x29e>
        {
          ucNumberOfLostMessageStatus = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

          // Fitting CARLA recieved data in xControlSignal way for microAutoware
          osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002a94:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <StartTaskControle+0x320>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f00b fd2a 	bl	800e4f6 <osMutexAcquire>

          xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b60 <StartTaskControle+0x324>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b64 <StartTaskControle+0x328>)
 8002aa8:	6153      	str	r3, [r2, #20]
          xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <StartTaskControle+0x324>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a2d      	ldr	r2, [pc, #180]	@ (8002b64 <StartTaskControle+0x328>)
 8002ab0:	6193      	str	r3, [r2, #24]
          xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b60 <StartTaskControle+0x324>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <StartTaskControle+0x328>)
 8002ab8:	61d3      	str	r3, [r2, #28]
          xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002aba:	4b29      	ldr	r3, [pc, #164]	@ (8002b60 <StartTaskControle+0x324>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a29      	ldr	r2, [pc, #164]	@ (8002b64 <StartTaskControle+0x328>)
 8002ac0:	6213      	str	r3, [r2, #32]

          osMutexRelease(MutexControlSignalHandle);
 8002ac2:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <StartTaskControle+0x320>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f00b fd60 	bl	800e58c <osMutexRelease>

          // Sync new data with microAutoware
          osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002acc:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <StartTaskControle+0x314>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00b fb7d 	bl	800e1d4 <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 8002ada:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	f040 80d8 	bne.w	8002c94 <StartTaskControle+0x458>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002ae4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fc73 	bl	80033d4 <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 8002aee:	4b1e      	ldr	r3, [pc, #120]	@ (8002b68 <StartTaskControle+0x32c>)
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002af6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002af8:	f000 fb9a 	bl	8003230 <fGetJoyPostition>
 8002afc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <StartTaskControle+0x32c>)
 8002b02:	6858      	ldr	r0, [r3, #4]
 8002b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b0a:	f000 fb91 	bl	8003230 <fGetJoyPostition>
 8002b0e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction with joystick data
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <StartTaskControle+0x318>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00b fceb 	bl	800e4f6 <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = -fJoyXAxis*MAX_STEERING_ANGLE; 
 8002b20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b24:	eef1 7a67 	vneg.f32	s15, s15
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <StartTaskControle+0x31c>)
 8002b2a:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <StartTaskControle+0x31c>)
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = (fJoyYAxis > 0) ? fJoyYAxis*MAX_THROTTLE : 0.0; // Throttle
 8002b36:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	dd13      	ble.n	8002b6c <StartTaskControle+0x330>
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	e013      	b.n	8002b70 <StartTaskControle+0x334>
 8002b48:	24032998 	.word	0x24032998
 8002b4c:	24032a48 	.word	0x24032a48
 8002b50:	2403296c 	.word	0x2403296c
 8002b54:	24032974 	.word	0x24032974
 8002b58:	240329b0 	.word	0x240329b0
 8002b5c:	24032970 	.word	0x24032970
 8002b60:	24032988 	.word	0x24032988
 8002b64:	240329c8 	.word	0x240329c8
 8002b68:	2403297c 	.word	0x2403297c
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	4a7b      	ldr	r2, [pc, #492]	@ (8002d60 <StartTaskControle+0x524>)
 8002b72:	6093      	str	r3, [r2, #8]
      xControlAction.xAcceleration.fFloat = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0; // Brake
 8002b74:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	d504      	bpl.n	8002b8c <StartTaskControle+0x350>
 8002b82:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b86:	eef1 7a67 	vneg.f32	s15, s15
 8002b8a:	e001      	b.n	8002b90 <StartTaskControle+0x354>
 8002b8c:	eddf 7a75 	vldr	s15, [pc, #468]	@ 8002d64 <StartTaskControle+0x528>
 8002b90:	4b73      	ldr	r3, [pc, #460]	@ (8002d60 <StartTaskControle+0x524>)
 8002b92:	edc3 7a03 	vstr	s15, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002b96:	4b72      	ldr	r3, [pc, #456]	@ (8002d60 <StartTaskControle+0x524>)
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = MANUAL;
 8002b9e:	4b70      	ldr	r3, [pc, #448]	@ (8002d60 <StartTaskControle+0x524>)
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	751a      	strb	r2, [r3, #20]

      // Reshaping control command to array of bytes
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002ba4:	4b6e      	ldr	r3, [pc, #440]	@ (8002d60 <StartTaskControle+0x524>)
 8002ba6:	f107 0208 	add.w	r2, r7, #8
 8002baa:	9202      	str	r2, [sp, #8]
 8002bac:	466c      	mov	r4, sp
 8002bae:	f103 0210 	add.w	r2, r3, #16
 8002bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bb6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bbc:	f000 fb86 	bl	80032cc <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8002bc0:	4b69      	ldr	r3, [pc, #420]	@ (8002d68 <StartTaskControle+0x52c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00b fce1 	bl	800e58c <osMutexRelease>

      // Send ucTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	221e      	movs	r2, #30
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4866      	ldr	r0, [pc, #408]	@ (8002d6c <StartTaskControle+0x530>)
 8002bd4:	f009 f95a 	bl	800be8c <HAL_UART_Transmit_DMA>

      // Wait recieve CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002bd8:	f00b fb4a 	bl	800e270 <osThreadFlagsGet>
 8002bdc:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002bde:	2264      	movs	r2, #100	@ 0x64
 8002be0:	2101      	movs	r1, #1
 8002be2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002be6:	f00b fb64 	bl	800e2b2 <osThreadFlagsWait>
 8002bea:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	f113 0f02 	cmn.w	r3, #2
 8002bf2:	d11e      	bne.n	8002c32 <StartTaskControle+0x3f6>
      {
      // Increment the lost data counter
      ucNumberOfLostMessageStatus++;
 8002bf4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

      // Check if the max of data lost was got
      if(ucNumberOfLostMessageStatus >= MAX_OF_LOST_MESSAGES) // If yes, change to manual
 8002bfe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	d90d      	bls.n	8002c22 <StartTaskControle+0x3e6>
      {
        ucControlMode = EMERGENCY;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_EMERGENCY_MODE_FLAG);
 8002c0c:	4b58      	ldr	r3, [pc, #352]	@ (8002d70 <StartTaskControle+0x534>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002c14:	4618      	mov	r0, r3
 8002c16:	f00b fadd 	bl	800e1d4 <osThreadFlagsSet>
        ucNumberOfLostMessageStatus = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002c20:	e035      	b.n	8002c8e <StartTaskControle+0x452>
      }
      else // If not, sends the same command again
      {
        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002c22:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <StartTaskControle+0x534>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f00b fad2 	bl	800e1d4 <osThreadFlagsSet>
 8002c30:	e02d      	b.n	8002c8e <StartTaskControle+0x452>
      }
      }
        else if(CHECK_FLAG(UART_NEW_DATA_FLAG, uiFlags))
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d028      	beq.n	8002c8e <StartTaskControle+0x452>
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db25      	blt.n	8002c8e <StartTaskControle+0x452>
      {
        ucNumberOfLostMessageStatus = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

        // Assembling xControlSignal
        osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002c48:	4b4a      	ldr	r3, [pc, #296]	@ (8002d74 <StartTaskControle+0x538>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c50:	4618      	mov	r0, r3
 8002c52:	f00b fc50 	bl	800e4f6 <osMutexAcquire>

        xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002c56:	4b48      	ldr	r3, [pc, #288]	@ (8002d78 <StartTaskControle+0x53c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a48      	ldr	r2, [pc, #288]	@ (8002d7c <StartTaskControle+0x540>)
 8002c5c:	6153      	str	r3, [r2, #20]
        xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002c5e:	4b46      	ldr	r3, [pc, #280]	@ (8002d78 <StartTaskControle+0x53c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a46      	ldr	r2, [pc, #280]	@ (8002d7c <StartTaskControle+0x540>)
 8002c64:	6193      	str	r3, [r2, #24]
        xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002c66:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <StartTaskControle+0x53c>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4a44      	ldr	r2, [pc, #272]	@ (8002d7c <StartTaskControle+0x540>)
 8002c6c:	61d3      	str	r3, [r2, #28]
        xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002c6e:	4b42      	ldr	r3, [pc, #264]	@ (8002d78 <StartTaskControle+0x53c>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a42      	ldr	r2, [pc, #264]	@ (8002d7c <StartTaskControle+0x540>)
 8002c74:	6213      	str	r3, [r2, #32]

        osMutexRelease(MutexControlSignalHandle);
 8002c76:	4b3f      	ldr	r3, [pc, #252]	@ (8002d74 <StartTaskControle+0x538>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f00b fc86 	bl	800e58c <osMutexRelease>

        osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002c80:	4b3b      	ldr	r3, [pc, #236]	@ (8002d70 <StartTaskControle+0x534>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00b faa3 	bl	800e1d4 <osThreadFlagsSet>
	    }

      // WAIT for send other joystick command
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 8002c8e:	203c      	movs	r0, #60	@ 0x3c
 8002c90:	f00b fb90 	bl	800e3b4 <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 8002c94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f ae07 	bne.w	80028ac <StartTaskControle+0x70>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002c9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fb96 	bl	80033d4 <vDrivingModeLights>
    
      // Assemble xControlAction to stop the vehicle
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <StartTaskControle+0x52c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f00b fc20 	bl	800e4f6 <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0.0;
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d60 <StartTaskControle+0x524>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0.0;
 8002cbe:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <StartTaskControle+0x524>)
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0.0;
 8002cc6:	4b26      	ldr	r3, [pc, #152]	@ (8002d60 <StartTaskControle+0x524>)
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0.0;
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <StartTaskControle+0x524>)
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0.0;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <StartTaskControle+0x524>)
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = EMERGENCY;
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <StartTaskControle+0x524>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	751a      	strb	r2, [r3, #20]

      // Reshaping control command to array of bytes
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <StartTaskControle+0x524>)
 8002ce6:	f107 0208 	add.w	r2, r7, #8
 8002cea:	9202      	str	r2, [sp, #8]
 8002cec:	466c      	mov	r4, sp
 8002cee:	f103 0210 	add.w	r2, r3, #16
 8002cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cf6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfc:	f000 fae6 	bl	80032cc <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <StartTaskControle+0x52c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00b fc41 	bl	800e58c <osMutexRelease>

      // Send ucTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	221e      	movs	r2, #30
 8002d10:	4619      	mov	r1, r3
 8002d12:	4816      	ldr	r0, [pc, #88]	@ (8002d6c <StartTaskControle+0x530>)
 8002d14:	f009 f8ba 	bl	800be8c <HAL_UART_Transmit_DMA>

      // Wait recieve CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002d18:	f00b faaa 	bl	800e270 <osThreadFlagsGet>
 8002d1c:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002d1e:	2264      	movs	r2, #100	@ 0x64
 8002d20:	2101      	movs	r1, #1
 8002d22:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002d26:	f00b fac4 	bl	800e2b2 <osThreadFlagsWait>
 8002d2a:	6338      	str	r0, [r7, #48]	@ 0x30

      // If data from CARLA arrives, control mode returns to MANUAL
      if(CHECK_FLAG(UART_NEW_DATA_FLAG, uiFlags))
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f43f adba 	beq.w	80028ac <StartTaskControle+0x70>
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f6ff adb6 	blt.w	80028ac <StartTaskControle+0x70>
      {
        ucNumberOfLostMessageCtlCmd = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        ucNumberOfLostMessageStatus = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
        ucControlMode = MANUAL;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <StartTaskControle+0x534>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2110      	movs	r1, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f00b fa3b 	bl	800e1d4 <osThreadFlagsSet>
	  uiFlags = osThreadFlagsGet();
 8002d5e:	e5a5      	b.n	80028ac <StartTaskControle+0x70>
 8002d60:	240329b0 	.word	0x240329b0
 8002d64:	00000000 	.word	0x00000000
 8002d68:	24032974 	.word	0x24032974
 8002d6c:	24032a48 	.word	0x24032a48
 8002d70:	2403296c 	.word	0x2403296c
 8002d74:	24032970 	.word	0x24032970
 8002d78:	24032988 	.word	0x24032988
 8002d7c:	240329c8 	.word	0x240329c8

08002d80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002d86:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <MX_USART2_UART_Init+0x94>)
 8002d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002d8a:	4b21      	ldr	r3, [pc, #132]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002d8c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d92:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002da6:	220c      	movs	r2, #12
 8002da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db0:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dc2:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dc8:	4811      	ldr	r0, [pc, #68]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002dca:	f009 f80f 	bl	800bdec <HAL_UART_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002dd4:	f7fe fe66 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd8:	2100      	movs	r1, #0
 8002dda:	480d      	ldr	r0, [pc, #52]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002ddc:	f00a fffa 	bl	800ddd4 <HAL_UARTEx_SetTxFifoThreshold>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002de6:	f7fe fe5d 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dea:	2100      	movs	r1, #0
 8002dec:	4808      	ldr	r0, [pc, #32]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002dee:	f00b f82f 	bl	800de50 <HAL_UARTEx_SetRxFifoThreshold>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002df8:	f7fe fe54 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dfc:	4804      	ldr	r0, [pc, #16]	@ (8002e10 <MX_USART2_UART_Init+0x90>)
 8002dfe:	f00a ffb0 	bl	800dd62 <HAL_UARTEx_DisableFifoMode>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002e08:	f7fe fe4c 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	24032a48 	.word	0x24032a48
 8002e14:	40004400 	.word	0x40004400

08002e18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e1e:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <MX_USART3_UART_Init+0x94>)
 8002e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002e22:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e24:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e3e:	220c      	movs	r2, #12
 8002e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e54:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e60:	4811      	ldr	r0, [pc, #68]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e62:	f008 ffc3 	bl	800bdec <HAL_UART_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e6c:	f7fe fe1a 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e70:	2100      	movs	r1, #0
 8002e72:	480d      	ldr	r0, [pc, #52]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e74:	f00a ffae 	bl	800ddd4 <HAL_UARTEx_SetTxFifoThreshold>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e7e:	f7fe fe11 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e82:	2100      	movs	r1, #0
 8002e84:	4808      	ldr	r0, [pc, #32]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e86:	f00a ffe3 	bl	800de50 <HAL_UARTEx_SetRxFifoThreshold>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e90:	f7fe fe08 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e94:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <MX_USART3_UART_Init+0x90>)
 8002e96:	f00a ff64 	bl	800dd62 <HAL_UARTEx_DisableFifoMode>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ea0:	f7fe fe00 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	24032adc 	.word	0x24032adc
 8002eac:	40004800 	.word	0x40004800

08002eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b0be      	sub	sp, #248	@ 0xf8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec8:	f107 0320 	add.w	r3, r7, #32
 8002ecc:	22c0      	movs	r2, #192	@ 0xc0
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f01f fa15 	bl	8022300 <memset>
  if(uartHandle->Instance==USART2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6a      	ldr	r2, [pc, #424]	@ (8003084 <HAL_UART_MspInit+0x1d4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	f040 80e1 	bne.w	80030a4 <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ee2:	f04f 0202 	mov.w	r2, #2
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ef4:	f107 0320 	add.w	r3, r7, #32
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 ffab 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002f04:	f7fe fdce 	bl	8001aa4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f08:	4b5f      	ldr	r3, [pc, #380]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f18:	4b5b      	ldr	r3, [pc, #364]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f2c:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f36:	4b54      	ldr	r3, [pc, #336]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f44:	4b50      	ldr	r3, [pc, #320]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f4a:	4a4f      	ldr	r2, [pc, #316]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f54:	4b4c      	ldr	r3, [pc, #304]	@ (8003088 <HAL_UART_MspInit+0x1d8>)
 8002f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f62:	2308      	movs	r3, #8
 8002f64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4841      	ldr	r0, [pc, #260]	@ (800308c <HAL_UART_MspInit+0x1dc>)
 8002f88:	f004 fd1e 	bl	80079c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fa4:	2307      	movs	r3, #7
 8002fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002faa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4837      	ldr	r0, [pc, #220]	@ (8003090 <HAL_UART_MspInit+0x1e0>)
 8002fb2:	f004 fd09 	bl	80079c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8002fb6:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fb8:	4a37      	ldr	r2, [pc, #220]	@ (8003098 <HAL_UART_MspInit+0x1e8>)
 8002fba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002fbc:	4b35      	ldr	r3, [pc, #212]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fbe:	222b      	movs	r2, #43	@ 0x2b
 8002fc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc2:	4b34      	ldr	r3, [pc, #208]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc8:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fce:	4b31      	ldr	r3, [pc, #196]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002fea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002fee:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff0:	4b28      	ldr	r3, [pc, #160]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ff6:	4827      	ldr	r0, [pc, #156]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8002ff8:	f001 fe9e 	bl	8004d38 <HAL_DMA_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8003002:	f7fe fd4f 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 800300a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800300e:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <HAL_UART_MspInit+0x1e4>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8003014:	4b21      	ldr	r3, [pc, #132]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003016:	4a22      	ldr	r2, [pc, #136]	@ (80030a0 <HAL_UART_MspInit+0x1f0>)
 8003018:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 800301c:	222c      	movs	r2, #44	@ 0x2c
 800301e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003020:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003022:	2240      	movs	r2, #64	@ 0x40
 8003024:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003026:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800302c:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 800302e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003032:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303a:	4b18      	ldr	r3, [pc, #96]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003040:	4b16      	ldr	r3, [pc, #88]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003046:	4b15      	ldr	r3, [pc, #84]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003048:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800304c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304e:	4b13      	ldr	r3, [pc, #76]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003050:	2200      	movs	r2, #0
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003054:	4811      	ldr	r0, [pc, #68]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003056:	f001 fe6f 	bl	8004d38 <HAL_DMA_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8003060:	f7fe fd20 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 8003068:	67da      	str	r2, [r3, #124]	@ 0x7c
 800306a:	4a0c      	ldr	r2, [pc, #48]	@ (800309c <HAL_UART_MspInit+0x1ec>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2105      	movs	r1, #5
 8003074:	2026      	movs	r0, #38	@ 0x26
 8003076:	f001 fe37 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800307a:	2026      	movs	r0, #38	@ 0x26
 800307c:	f001 fe4e 	bl	8004d1c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003080:	e0c3      	b.n	800320a <HAL_UART_MspInit+0x35a>
 8003082:	bf00      	nop
 8003084:	40004400 	.word	0x40004400
 8003088:	58024400 	.word	0x58024400
 800308c:	58020000 	.word	0x58020000
 8003090:	58020c00 	.word	0x58020c00
 8003094:	24032b70 	.word	0x24032b70
 8003098:	40020428 	.word	0x40020428
 800309c:	24032be8 	.word	0x24032be8
 80030a0:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003214 <HAL_UART_MspInit+0x364>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	f040 80ad 	bne.w	800320a <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80030b0:	f04f 0202 	mov.w	r2, #2
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030c2:	f107 0320 	add.w	r3, r7, #32
 80030c6:	4618      	mov	r0, r3
 80030c8:	f005 fec4 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 80030d2:	f7fe fce7 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030d6:	4b50      	ldr	r3, [pc, #320]	@ (8003218 <HAL_UART_MspInit+0x368>)
 80030d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003218 <HAL_UART_MspInit+0x368>)
 80030de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003218 <HAL_UART_MspInit+0x368>)
 80030e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030f4:	4b48      	ldr	r3, [pc, #288]	@ (8003218 <HAL_UART_MspInit+0x368>)
 80030f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030fa:	4a47      	ldr	r2, [pc, #284]	@ (8003218 <HAL_UART_MspInit+0x368>)
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003104:	4b44      	ldr	r3, [pc, #272]	@ (8003218 <HAL_UART_MspInit+0x368>)
 8003106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003112:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800312c:	2307      	movs	r3, #7
 800312e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003132:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003136:	4619      	mov	r1, r3
 8003138:	4838      	ldr	r0, [pc, #224]	@ (800321c <HAL_UART_MspInit+0x36c>)
 800313a:	f004 fc45 	bl	80079c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800313e:	4b38      	ldr	r3, [pc, #224]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003140:	4a38      	ldr	r2, [pc, #224]	@ (8003224 <HAL_UART_MspInit+0x374>)
 8003142:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003144:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003146:	222d      	movs	r2, #45	@ 0x2d
 8003148:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314a:	4b35      	ldr	r3, [pc, #212]	@ (8003220 <HAL_UART_MspInit+0x370>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003150:	4b33      	ldr	r3, [pc, #204]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003156:	4b32      	ldr	r3, [pc, #200]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003158:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800315c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800315e:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003164:	4b2e      	ldr	r3, [pc, #184]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800316a:	4b2d      	ldr	r3, [pc, #180]	@ (8003220 <HAL_UART_MspInit+0x370>)
 800316c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003170:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003172:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003174:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003178:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800317a:	4b29      	ldr	r3, [pc, #164]	@ (8003220 <HAL_UART_MspInit+0x370>)
 800317c:	2200      	movs	r2, #0
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003180:	4827      	ldr	r0, [pc, #156]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003182:	f001 fdd9 	bl	8004d38 <HAL_DMA_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 800318c:	f7fe fc8a 	bl	8001aa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a23      	ldr	r2, [pc, #140]	@ (8003220 <HAL_UART_MspInit+0x370>)
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003198:	4a21      	ldr	r2, [pc, #132]	@ (8003220 <HAL_UART_MspInit+0x370>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800319e:	4b22      	ldr	r3, [pc, #136]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031a0:	4a22      	ldr	r2, [pc, #136]	@ (800322c <HAL_UART_MspInit+0x37c>)
 80031a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80031a4:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031a6:	222e      	movs	r2, #46	@ 0x2e
 80031a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031ac:	2240      	movs	r2, #64	@ 0x40
 80031ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031be:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c4:	4b18      	ldr	r3, [pc, #96]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80031ca:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031d0:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031d8:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031da:	2200      	movs	r2, #0
 80031dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80031de:	4812      	ldr	r0, [pc, #72]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031e0:	f001 fdaa 	bl	8004d38 <HAL_DMA_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80031ea:	f7fe fc5b 	bl	8001aa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031f2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80031f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003228 <HAL_UART_MspInit+0x378>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2108      	movs	r1, #8
 80031fe:	2027      	movs	r0, #39	@ 0x27
 8003200:	f001 fd72 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003204:	2027      	movs	r0, #39	@ 0x27
 8003206:	f001 fd89 	bl	8004d1c <HAL_NVIC_EnableIRQ>
}
 800320a:	bf00      	nop
 800320c:	37f8      	adds	r7, #248	@ 0xf8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40004800 	.word	0x40004800
 8003218:	58024400 	.word	0x58024400
 800321c:	58020c00 	.word	0x58020c00
 8003220:	24032c60 	.word	0x24032c60
 8003224:	40020010 	.word	0x40020010
 8003228:	24032cd8 	.word	0x24032cd8
 800322c:	40020028 	.word	0x40020028

08003230 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  if((uiValue > (uiRef0 + JOY_DEAD_BAND)) || (uiValue < (uiRef0 - JOY_DEAD_BAND)))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	429a      	cmp	r2, r3
 8003248:	d805      	bhi.n	8003256 <fGetJoyPostition+0x26>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	429a      	cmp	r2, r3
 8003254:	d22e      	bcs.n	80032b4 <fGetJoyPostition+0x84>
  {
    return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0 - JOY_DEAD_BAND))/((float)(uiRefMax - uiRef0 - JOY_DEAD_BAND)) : ((int)(uiValue - uiRef0 + JOY_DEAD_BAND))/((float)(uiRef0 - JOY_DEAD_BAND - uiRefMin));
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	dd14      	ble.n	800328a <fGetJoyPostition+0x5a>
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003288:	e016      	b.n	80032b8 <fGetJoyPostition+0x88>
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b2:	e001      	b.n	80032b8 <fGetJoyPostition+0x88>
  }
  else
  {
	return 0.0;
 80032b4:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80032c8 <fGetJoyPostition+0x98>
  }
}
 80032b8:	eeb0 0a67 	vmov.f32	s0, s15
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	00000000 	.word	0x00000000

080032cc <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 80032cc:	b084      	sub	sp, #16
 80032ce:	b490      	push	{r4, r7}
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	f107 0408 	add.w	r4, r7, #8
 80032d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2223      	movs	r2, #35	@ 0x23
 80032de:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	3301      	adds	r3, #1
 80032e4:	2253      	movs	r2, #83	@ 0x53
 80032e6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	3302      	adds	r3, #2
 80032ec:	7a3a      	ldrb	r2, [r7, #8]
 80032ee:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	3303      	adds	r3, #3
 80032f4:	7a7a      	ldrb	r2, [r7, #9]
 80032f6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	3304      	adds	r3, #4
 80032fc:	7aba      	ldrb	r2, [r7, #10]
 80032fe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	3305      	adds	r3, #5
 8003304:	7afa      	ldrb	r2, [r7, #11]
 8003306:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	3306      	adds	r3, #6
 800330c:	2257      	movs	r2, #87	@ 0x57
 800330e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	3307      	adds	r3, #7
 8003314:	7b3a      	ldrb	r2, [r7, #12]
 8003316:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	3308      	adds	r3, #8
 800331c:	7b7a      	ldrb	r2, [r7, #13]
 800331e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	3309      	adds	r3, #9
 8003324:	7bba      	ldrb	r2, [r7, #14]
 8003326:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	330a      	adds	r3, #10
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	330b      	adds	r3, #11
 8003334:	2256      	movs	r2, #86	@ 0x56
 8003336:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	330c      	adds	r3, #12
 800333c:	7c3a      	ldrb	r2, [r7, #16]
 800333e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	330d      	adds	r3, #13
 8003344:	7c7a      	ldrb	r2, [r7, #17]
 8003346:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	330e      	adds	r3, #14
 800334c:	7cba      	ldrb	r2, [r7, #18]
 800334e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	330f      	adds	r3, #15
 8003354:	7cfa      	ldrb	r2, [r7, #19]
 8003356:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	3310      	adds	r3, #16
 800335c:	2241      	movs	r2, #65	@ 0x41
 800335e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	3311      	adds	r3, #17
 8003364:	7d3a      	ldrb	r2, [r7, #20]
 8003366:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	3312      	adds	r3, #18
 800336c:	7d7a      	ldrb	r2, [r7, #21]
 800336e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	3313      	adds	r3, #19
 8003374:	7dba      	ldrb	r2, [r7, #22]
 8003376:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	3314      	adds	r3, #20
 800337c:	7dfa      	ldrb	r2, [r7, #23]
 800337e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	3315      	adds	r3, #21
 8003384:	224a      	movs	r2, #74	@ 0x4a
 8003386:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	3316      	adds	r3, #22
 800338c:	7e3a      	ldrb	r2, [r7, #24]
 800338e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	3317      	adds	r3, #23
 8003394:	7e7a      	ldrb	r2, [r7, #25]
 8003396:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	3318      	adds	r3, #24
 800339c:	7eba      	ldrb	r2, [r7, #26]
 800339e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	3319      	adds	r3, #25
 80033a4:	7efa      	ldrb	r2, [r7, #27]
 80033a6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'M';
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	331a      	adds	r3, #26
 80033ac:	224d      	movs	r2, #77	@ 0x4d
 80033ae:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = xControlActionTx.ucControlMode;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	331b      	adds	r3, #27
 80033b4:	7f3a      	ldrb	r2, [r7, #28]
 80033b6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[28] = (unsigned char)'$';
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	331c      	adds	r3, #28
 80033bc:	2224      	movs	r2, #36	@ 0x24
 80033be:	701a      	strb	r2, [r3, #0]
  ucTxMsg[29] = (unsigned char)'\0';
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	331d      	adds	r3, #29
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
  
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc90      	pop	{r4, r7}
 80033ce:	b004      	add	sp, #16
 80033d0:	4770      	bx	lr
	...

080033d4 <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d016      	beq.n	8003412 <vDrivingModeLights+0x3e>
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	dc36      	bgt.n	8003456 <vDrivingModeLights+0x82>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d023      	beq.n	8003434 <vDrivingModeLights+0x60>
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d132      	bne.n	8003456 <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 80033f0:	2200      	movs	r2, #0
 80033f2:	2101      	movs	r1, #1
 80033f4:	481a      	ldr	r0, [pc, #104]	@ (8003460 <vDrivingModeLights+0x8c>)
 80033f6:	f004 fc97 	bl	8007d28 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 80033fa:	2201      	movs	r2, #1
 80033fc:	2102      	movs	r1, #2
 80033fe:	4819      	ldr	r0, [pc, #100]	@ (8003464 <vDrivingModeLights+0x90>)
 8003400:	f004 fc92 	bl	8007d28 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8003404:	2200      	movs	r2, #0
 8003406:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800340a:	4815      	ldr	r0, [pc, #84]	@ (8003460 <vDrivingModeLights+0x8c>)
 800340c:	f004 fc8c 	bl	8007d28 <HAL_GPIO_WritePin>
      break;
 8003410:	e022      	b.n	8003458 <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 8003412:	2201      	movs	r2, #1
 8003414:	2101      	movs	r1, #1
 8003416:	4812      	ldr	r0, [pc, #72]	@ (8003460 <vDrivingModeLights+0x8c>)
 8003418:	f004 fc86 	bl	8007d28 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 800341c:	2200      	movs	r2, #0
 800341e:	2102      	movs	r1, #2
 8003420:	4810      	ldr	r0, [pc, #64]	@ (8003464 <vDrivingModeLights+0x90>)
 8003422:	f004 fc81 	bl	8007d28 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 8003426:	2200      	movs	r2, #0
 8003428:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800342c:	480c      	ldr	r0, [pc, #48]	@ (8003460 <vDrivingModeLights+0x8c>)
 800342e:	f004 fc7b 	bl	8007d28 <HAL_GPIO_WritePin>
      break;
 8003432:	e011      	b.n	8003458 <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 8003434:	2200      	movs	r2, #0
 8003436:	2102      	movs	r1, #2
 8003438:	480a      	ldr	r0, [pc, #40]	@ (8003464 <vDrivingModeLights+0x90>)
 800343a:	f004 fc75 	bl	8007d28 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 800343e:	2200      	movs	r2, #0
 8003440:	2101      	movs	r1, #1
 8003442:	4807      	ldr	r0, [pc, #28]	@ (8003460 <vDrivingModeLights+0x8c>)
 8003444:	f004 fc70 	bl	8007d28 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 8003448:	2201      	movs	r2, #1
 800344a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800344e:	4804      	ldr	r0, [pc, #16]	@ (8003460 <vDrivingModeLights+0x8c>)
 8003450:	f004 fc6a 	bl	8007d28 <HAL_GPIO_WritePin>
      break;
 8003454:	e000      	b.n	8003458 <vDrivingModeLights+0x84>

    default:
      break;
 8003456:	bf00      	nop
  }

}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	58020400 	.word	0x58020400
 8003464:	58021000 	.word	0x58021000

08003468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800346c:	f7ff f95e 	bl	800272c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003470:	480c      	ldr	r0, [pc, #48]	@ (80034a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003472:	490d      	ldr	r1, [pc, #52]	@ (80034a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003474:	4a0d      	ldr	r2, [pc, #52]	@ (80034ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003478:	e002      	b.n	8003480 <LoopCopyDataInit>

0800347a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800347c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347e:	3304      	adds	r3, #4

08003480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003484:	d3f9      	bcc.n	800347a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003488:	4c0a      	ldr	r4, [pc, #40]	@ (80034b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800348c:	e001      	b.n	8003492 <LoopFillZerobss>

0800348e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003490:	3204      	adds	r2, #4

08003492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003494:	d3fb      	bcc.n	800348e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003496:	f01f f823 	bl	80224e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800349a:	f7fe f879 	bl	8001590 <main>
  bx  lr
 800349e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80034a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034a8:	2400130c 	.word	0x2400130c
  ldr r2, =_sidata
 80034ac:	08025d8c 	.word	0x08025d8c
  ldr r2, =_sbss
 80034b0:	24001310 	.word	0x24001310
  ldr r4, =_ebss
 80034b4:	240696f0 	.word	0x240696f0

080034b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034b8:	e7fe      	b.n	80034b8 <ADC3_IRQHandler>
	...

080034bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c2:	2003      	movs	r0, #3
 80034c4:	f001 fc05 	bl	8004cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034c8:	f005 faac 	bl	8008a24 <HAL_RCC_GetSysClockFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <HAL_Init+0x68>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	4913      	ldr	r1, [pc, #76]	@ (8003528 <HAL_Init+0x6c>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
 80034e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <HAL_Init+0x68>)
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003528 <HAL_Init+0x6c>)
 80034f0:	5cd3      	ldrb	r3, [r2, r3]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
 80034fc:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <HAL_Init+0x70>)
 80034fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003500:	4a0b      	ldr	r2, [pc, #44]	@ (8003530 <HAL_Init+0x74>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003506:	200f      	movs	r0, #15
 8003508:	f7fe ff74 	bl	80023f4 <HAL_InitTick>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e002      	b.n	800351c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003516:	f7fe ff4f 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	58024400 	.word	0x58024400
 8003528:	08023548 	.word	0x08023548
 800352c:	24000008 	.word	0x24000008
 8003530:	24000004 	.word	0x24000004

08003534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003538:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_IncTick+0x20>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_IncTick+0x24>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4413      	add	r3, r2
 8003544:	4a04      	ldr	r2, [pc, #16]	@ (8003558 <HAL_IncTick+0x24>)
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	24000010 	.word	0x24000010
 8003558:	24032d50 	.word	0x24032d50

0800355c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return uwTick;
 8003560:	4b03      	ldr	r3, [pc, #12]	@ (8003570 <HAL_GetTick+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	24032d50 	.word	0x24032d50

08003574 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003578:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_GetREVID+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0c1b      	lsrs	r3, r3, #16
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	5c001000 	.word	0x5c001000

0800358c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	609a      	str	r2, [r3, #8]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3360      	adds	r3, #96	@ 0x60
 8003606:	461a      	mov	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	430b      	orrs	r3, r1
 8003622:	431a      	orrs	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	611a      	str	r2, [r3, #16]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003666:	b480      	push	{r7}
 8003668:	b087      	sub	sp, #28
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3360      	adds	r3, #96	@ 0x60
 8003676:	461a      	mov	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	431a      	orrs	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	601a      	str	r2, [r3, #0]
  }
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3330      	adds	r3, #48	@ 0x30
 80036d2:	461a      	mov	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	4413      	add	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	211f      	movs	r1, #31
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	401a      	ands	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0e9b      	lsrs	r3, r3, #26
 80036fa:	f003 011f 	and.w	r1, r3, #31
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f023 0203 	bic.w	r2, r3, #3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3314      	adds	r3, #20
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	0e5b      	lsrs	r3, r3, #25
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	0d1b      	lsrs	r3, r3, #20
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2107      	movs	r1, #7
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0d1b      	lsrs	r3, r3, #20
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	431a      	orrs	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0318 	and.w	r3, r3, #24
 80037ba:	4908      	ldr	r1, [pc, #32]	@ (80037dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80037bc:	40d9      	lsrs	r1, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	400b      	ands	r3, r1
 80037c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	000fffff 	.word	0x000fffff

080037e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 031f 	and.w	r3, r3, #31
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b04      	ldr	r3, [pc, #16]	@ (800381c <LL_ADC_DisableDeepPowerDown+0x20>)
 800380a:	4013      	ands	r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6093      	str	r3, [r2, #8]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	5fffffc0 	.word	0x5fffffc0

08003820 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003834:	d101      	bne.n	800383a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <LL_ADC_EnableInternalRegulator+0x24>)
 8003856:	4013      	ands	r3, r2
 8003858:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	6fffffc0 	.word	0x6fffffc0

08003870 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003884:	d101      	bne.n	800388a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <LL_ADC_Enable+0x24>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	f043 0201 	orr.w	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	7fffffc0 	.word	0x7fffffc0

080038c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_IsEnabled+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_IsEnabled+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <LL_ADC_REG_StartConversion+0x24>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	f043 0204 	orr.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	7fffffc0 	.word	0x7fffffc0

08003910 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d101      	bne.n	8003928 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d101      	bne.n	800394e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b089      	sub	sp, #36	@ 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e18f      	b.n	8003c96 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fc ff65 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff3f 	bl	8003820 <LL_ADC_IsDeepPowerDownEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff25 	bl	80037fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff5a 	bl	8003870 <LL_ADC_IsInternalRegulatorEnabled>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d114      	bne.n	80039ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff3e 	bl	8003848 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039cc:	4b87      	ldr	r3, [pc, #540]	@ (8003bec <HAL_ADC_Init+0x290>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	099b      	lsrs	r3, r3, #6
 80039d2:	4a87      	ldr	r2, [pc, #540]	@ (8003bf0 <HAL_ADC_Init+0x294>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	3301      	adds	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039de:	e002      	b.n	80039e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f9      	bne.n	80039e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff3d 	bl	8003870 <LL_ADC_IsInternalRegulatorEnabled>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a00:	f043 0210 	orr.w	r2, r3, #16
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff77 	bl	8003910 <LL_ADC_REG_IsConversionOngoing>
 8003a22:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8129 	bne.w	8003c84 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 8125 	bne.w	8003c84 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff36 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d136      	bne.n	8003ac8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a65      	ldr	r2, [pc, #404]	@ (8003bf4 <HAL_ADC_Init+0x298>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_ADC_Init+0x112>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a63      	ldr	r2, [pc, #396]	@ (8003bf8 <HAL_ADC_Init+0x29c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10e      	bne.n	8003a8c <HAL_ADC_Init+0x130>
 8003a6e:	4861      	ldr	r0, [pc, #388]	@ (8003bf4 <HAL_ADC_Init+0x298>)
 8003a70:	f7ff ff26 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a74:	4604      	mov	r4, r0
 8003a76:	4860      	ldr	r0, [pc, #384]	@ (8003bf8 <HAL_ADC_Init+0x29c>)
 8003a78:	f7ff ff22 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4323      	orrs	r3, r4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e008      	b.n	8003a9e <HAL_ADC_Init+0x142>
 8003a8c:	485b      	ldr	r0, [pc, #364]	@ (8003bfc <HAL_ADC_Init+0x2a0>)
 8003a8e:	f7ff ff17 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a53      	ldr	r2, [pc, #332]	@ (8003bf4 <HAL_ADC_Init+0x298>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADC_Init+0x15a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a51      	ldr	r2, [pc, #324]	@ (8003bf8 <HAL_ADC_Init+0x29c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_Init+0x15e>
 8003ab6:	4a52      	ldr	r2, [pc, #328]	@ (8003c00 <HAL_ADC_Init+0x2a4>)
 8003ab8:	e000      	b.n	8003abc <HAL_ADC_Init+0x160>
 8003aba:	4a52      	ldr	r2, [pc, #328]	@ (8003c04 <HAL_ADC_Init+0x2a8>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7ff fd62 	bl	800358c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ac8:	f7ff fd54 	bl	8003574 <HAL_GetREVID>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d914      	bls.n	8003b00 <HAL_ADC_Init+0x1a4>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d110      	bne.n	8003b00 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7d5b      	ldrb	r3, [r3, #21]
 8003ae2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ae8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003aee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7f1b      	ldrb	r3, [r3, #28]
 8003af4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003af6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003af8:	f043 030c 	orr.w	r3, r3, #12
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e00d      	b.n	8003b1c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7d5b      	ldrb	r3, [r3, #21]
 8003b04:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b0a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b10:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7f1b      	ldrb	r3, [r3, #28]
 8003b16:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	7f1b      	ldrb	r3, [r3, #28]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	045b      	lsls	r3, r3, #17
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	4b2c      	ldr	r3, [pc, #176]	@ (8003c08 <HAL_ADC_Init+0x2ac>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fed2 	bl	8003910 <LL_ADC_REG_IsConversionOngoing>
 8003b6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fedf 	bl	8003936 <LL_ADC_INJ_IsConversionOngoing>
 8003b78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d15f      	bne.n	8003c40 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d15c      	bne.n	8003c40 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	7d1b      	ldrb	r3, [r3, #20]
 8003b8a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c0c <HAL_ADC_Init+0x2b0>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d130      	bne.n	8003c14 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <HAL_ADC_Init+0x2b4>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0411      	lsls	r1, r2, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003bd4:	4311      	orrs	r1, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	611a      	str	r2, [r3, #16]
 8003be8:	e01c      	b.n	8003c24 <HAL_ADC_Init+0x2c8>
 8003bea:	bf00      	nop
 8003bec:	24000004 	.word	0x24000004
 8003bf0:	053e2d63 	.word	0x053e2d63
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40022100 	.word	0x40022100
 8003bfc:	58026000 	.word	0x58026000
 8003c00:	40022300 	.word	0x40022300
 8003c04:	58026300 	.word	0x58026300
 8003c08:	fff0c003 	.word	0xfff0c003
 8003c0c:	ffffbffc 	.word	0xffffbffc
 8003c10:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fd8c 	bl	8004758 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10c      	bne.n	8003c62 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	f023 010f 	bic.w	r1, r3, #15
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c60:	e007      	b.n	8003c72 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 020f 	bic.w	r2, r2, #15
 8003c70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c82:	e007      	b.n	8003c94 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c88:	f043 0210 	orr.w	r2, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	@ 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}
 8003c9e:	bf00      	nop

08003ca0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a55      	ldr	r2, [pc, #340]	@ (8003e08 <HAL_ADC_Start_DMA+0x168>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_ADC_Start_DMA+0x20>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a54      	ldr	r2, [pc, #336]	@ (8003e0c <HAL_ADC_Start_DMA+0x16c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_Start_DMA+0x24>
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_ADC_Start_DMA+0x170>)
 8003cc2:	e000      	b.n	8003cc6 <HAL_ADC_Start_DMA+0x26>
 8003cc4:	4b53      	ldr	r3, [pc, #332]	@ (8003e14 <HAL_ADC_Start_DMA+0x174>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fd8a 	bl	80037e0 <LL_ADC_GetMultimode>
 8003ccc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fe1c 	bl	8003910 <LL_ADC_REG_IsConversionOngoing>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 808c 	bne.w	8003df8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_ADC_Start_DMA+0x4e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e087      	b.n	8003dfe <HAL_ADC_Start_DMA+0x15e>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d002      	beq.n	8003d08 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b09      	cmp	r3, #9
 8003d06:	d170      	bne.n	8003dea <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fc07 	bl	800451c <ADC_Enable>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d163      	bne.n	8003de0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <HAL_ADC_Start_DMA+0x178>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a37      	ldr	r2, [pc, #220]	@ (8003e0c <HAL_ADC_Start_DMA+0x16c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d002      	beq.n	8003d38 <HAL_ADC_Start_DMA+0x98>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	e000      	b.n	8003d3a <HAL_ADC_Start_DMA+0x9a>
 8003d38:	4b33      	ldr	r3, [pc, #204]	@ (8003e08 <HAL_ADC_Start_DMA+0x168>)
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d002      	beq.n	8003d48 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	f023 0206 	bic.w	r2, r3, #6
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d6c:	e002      	b.n	8003d74 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d78:	4a28      	ldr	r2, [pc, #160]	@ (8003e1c <HAL_ADC_Start_DMA+0x17c>)
 8003d7a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d80:	4a27      	ldr	r2, [pc, #156]	@ (8003e20 <HAL_ADC_Start_DMA+0x180>)
 8003d82:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d88:	4a26      	ldr	r2, [pc, #152]	@ (8003e24 <HAL_ADC_Start_DMA+0x184>)
 8003d8a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	221c      	movs	r2, #28
 8003d92:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0210 	orr.w	r2, r2, #16
 8003daa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7ff fcaf 	bl	800371a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3340      	adds	r3, #64	@ 0x40
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f001 fb10 	bl	80053f0 <HAL_DMA_Start_IT>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fd85 	bl	80038e8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003dde:	e00d      	b.n	8003dfc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003de8:	e008      	b.n	8003dfc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003df6:	e001      	b.n	8003dfc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40022000 	.word	0x40022000
 8003e0c:	40022100 	.word	0x40022100
 8003e10:	40022300 	.word	0x40022300
 8003e14:	58026300 	.word	0x58026300
 8003e18:	fffff0fe 	.word	0xfffff0fe
 8003e1c:	08004631 	.word	0x08004631
 8003e20:	08004709 	.word	0x08004709
 8003e24:	08004725 	.word	0x08004725

08003e28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b0a1      	sub	sp, #132	@ 0x84
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a65      	ldr	r2, [pc, #404]	@ (8004014 <HAL_ADC_ConfigChannel+0x1b0>)
 8003e7e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x2a>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e32e      	b.n	80044ec <HAL_ADC_ConfigChannel+0x688>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fd38 	bl	8003910 <LL_ADC_REG_IsConversionOngoing>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 8313 	bne.w	80044ce <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	db2c      	blt.n	8003f0a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d108      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x6a>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	e016      	b.n	8003efc <HAL_ADC_ConfigChannel+0x98>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003edc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ede:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	e003      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	69d1      	ldr	r1, [r2, #28]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f7ff fbd3 	bl	80036c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fcf5 	bl	8003910 <LL_ADC_REG_IsConversionOngoing>
 8003f26:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fd02 	bl	8003936 <LL_ADC_INJ_IsConversionOngoing>
 8003f32:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 80b8 	bne.w	80040ac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 80b4 	bne.w	80040ac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6819      	ldr	r1, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	461a      	mov	r2, r3
 8003f52:	f7ff fbf5 	bl	8003740 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f56:	4b30      	ldr	r3, [pc, #192]	@ (8004018 <HAL_ADC_ConfigChannel+0x1b4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f62:	d10b      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x118>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	e01d      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x154>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x13e>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	e00a      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x154>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d02c      	beq.n	800401c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6919      	ldr	r1, [r3, #16]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fd0:	f7ff fb10 	bl	80035f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6919      	ldr	r1, [r3, #16]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	7e5b      	ldrb	r3, [r3, #25]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d102      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x186>
 8003fe4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003fe8:	e000      	b.n	8003fec <HAL_ADC_ConfigChannel+0x188>
 8003fea:	2300      	movs	r3, #0
 8003fec:	461a      	mov	r2, r3
 8003fee:	f7ff fb3a 	bl	8003666 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6919      	ldr	r1, [r3, #16]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	7e1b      	ldrb	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d102      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x1a4>
 8004002:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004006:	e000      	b.n	800400a <HAL_ADC_ConfigChannel+0x1a6>
 8004008:	2300      	movs	r3, #0
 800400a:	461a      	mov	r2, r3
 800400c:	f7ff fb12 	bl	8003634 <LL_ADC_SetDataRightShift>
 8004010:	e04c      	b.n	80040ac <HAL_ADC_ConfigChannel+0x248>
 8004012:	bf00      	nop
 8004014:	47ff0000 	.word	0x47ff0000
 8004018:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	069b      	lsls	r3, r3, #26
 800402c:	429a      	cmp	r2, r3
 800402e:	d107      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800403e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	069b      	lsls	r3, r3, #26
 8004050:	429a      	cmp	r2, r3
 8004052:	d107      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004062:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800406a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	429a      	cmp	r2, r3
 8004076:	d107      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004086:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800408e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	069b      	lsls	r3, r3, #26
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fc05 	bl	80038c0 <LL_ADC_IsEnabled>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 8211 	bne.w	80044e0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7ff fb64 	bl	8003798 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4aa1      	ldr	r2, [pc, #644]	@ (800435c <HAL_ADC_ConfigChannel+0x4f8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	f040 812e 	bne.w	8004338 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x2a0>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	3301      	adds	r3, #1
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	bf94      	ite	ls
 80040fc:	2301      	movls	r3, #1
 80040fe:	2300      	movhi	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e019      	b.n	8004138 <HAL_ADC_ConfigChannel+0x2d4>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004114:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e003      	b.n	8004128 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2b09      	cmp	r3, #9
 8004130:	bf94      	ite	ls
 8004132:	2301      	movls	r3, #1
 8004134:	2300      	movhi	r3, #0
 8004136:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004138:	2b00      	cmp	r3, #0
 800413a:	d079      	beq.n	8004230 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004144:	2b00      	cmp	r3, #0
 8004146:	d107      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x2f4>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	3301      	adds	r3, #1
 8004150:	069b      	lsls	r3, r3, #26
 8004152:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004156:	e015      	b.n	8004184 <HAL_ADC_ConfigChannel+0x320>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004168:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800416a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e003      	b.n	800417c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	069b      	lsls	r3, r3, #26
 8004180:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x340>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	3301      	adds	r3, #1
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	e017      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x370>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80041b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80041b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80041bc:	2320      	movs	r3, #32
 80041be:	e003      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80041c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2101      	movs	r1, #1
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	ea42 0103 	orr.w	r1, r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x396>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	3301      	adds	r3, #1
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	051b      	lsls	r3, r3, #20
 80041f8:	e018      	b.n	800422c <HAL_ADC_ConfigChannel+0x3c8>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004212:	2320      	movs	r3, #32
 8004214:	e003      	b.n	800421e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	3301      	adds	r3, #1
 8004220:	f003 021f 	and.w	r2, r3, #31
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800422c:	430b      	orrs	r3, r1
 800422e:	e07e      	b.n	800432e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <HAL_ADC_ConfigChannel+0x3e8>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	3301      	adds	r3, #1
 8004244:	069b      	lsls	r3, r3, #26
 8004246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800424a:	e015      	b.n	8004278 <HAL_ADC_ConfigChannel+0x414>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	069b      	lsls	r3, r3, #26
 8004274:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x434>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0e9b      	lsrs	r3, r3, #26
 800428a:	3301      	adds	r3, #1
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	2101      	movs	r1, #1
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	e017      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x464>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	61bb      	str	r3, [r7, #24]
  return result;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e003      	b.n	80042bc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	ea42 0103 	orr.w	r1, r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x490>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	3b1e      	subs	r3, #30
 80042ec:	051b      	lsls	r3, r3, #20
 80042ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042f2:	e01b      	b.n	800432c <HAL_ADC_ConfigChannel+0x4c8>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	60fb      	str	r3, [r7, #12]
  return result;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 021f 	and.w	r2, r3, #31
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	3b1e      	subs	r3, #30
 8004326:	051b      	lsls	r3, r3, #20
 8004328:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800432c:	430b      	orrs	r3, r1
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	4619      	mov	r1, r3
 8004334:	f7ff fa04 	bl	8003740 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f280 80cf 	bge.w	80044e0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a06      	ldr	r2, [pc, #24]	@ (8004360 <HAL_ADC_ConfigChannel+0x4fc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x4f2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <HAL_ADC_ConfigChannel+0x500>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10a      	bne.n	800436c <HAL_ADC_ConfigChannel+0x508>
 8004356:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <HAL_ADC_ConfigChannel+0x504>)
 8004358:	e009      	b.n	800436e <HAL_ADC_ConfigChannel+0x50a>
 800435a:	bf00      	nop
 800435c:	47ff0000 	.word	0x47ff0000
 8004360:	40022000 	.word	0x40022000
 8004364:	40022100 	.word	0x40022100
 8004368:	40022300 	.word	0x40022300
 800436c:	4b61      	ldr	r3, [pc, #388]	@ (80044f4 <HAL_ADC_ConfigChannel+0x690>)
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff f932 	bl	80035d8 <LL_ADC_GetCommonPathInternalCh>
 8004374:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5f      	ldr	r2, [pc, #380]	@ (80044f8 <HAL_ADC_ConfigChannel+0x694>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_ADC_ConfigChannel+0x526>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5d      	ldr	r2, [pc, #372]	@ (80044fc <HAL_ADC_ConfigChannel+0x698>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10e      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x544>
 800438a:	485b      	ldr	r0, [pc, #364]	@ (80044f8 <HAL_ADC_ConfigChannel+0x694>)
 800438c:	f7ff fa98 	bl	80038c0 <LL_ADC_IsEnabled>
 8004390:	4604      	mov	r4, r0
 8004392:	485a      	ldr	r0, [pc, #360]	@ (80044fc <HAL_ADC_ConfigChannel+0x698>)
 8004394:	f7ff fa94 	bl	80038c0 <LL_ADC_IsEnabled>
 8004398:	4603      	mov	r3, r0
 800439a:	4323      	orrs	r3, r4
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e008      	b.n	80043ba <HAL_ADC_ConfigChannel+0x556>
 80043a8:	4855      	ldr	r0, [pc, #340]	@ (8004500 <HAL_ADC_ConfigChannel+0x69c>)
 80043aa:	f7ff fa89 	bl	80038c0 <LL_ADC_IsEnabled>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d07d      	beq.n	80044ba <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a50      	ldr	r2, [pc, #320]	@ (8004504 <HAL_ADC_ConfigChannel+0x6a0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d130      	bne.n	800442a <HAL_ADC_ConfigChannel+0x5c6>
 80043c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d12b      	bne.n	800442a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004500 <HAL_ADC_ConfigChannel+0x69c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	f040 8081 	bne.w	80044e0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a45      	ldr	r2, [pc, #276]	@ (80044f8 <HAL_ADC_ConfigChannel+0x694>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_ConfigChannel+0x58e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a43      	ldr	r2, [pc, #268]	@ (80044fc <HAL_ADC_ConfigChannel+0x698>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x592>
 80043f2:	4a45      	ldr	r2, [pc, #276]	@ (8004508 <HAL_ADC_ConfigChannel+0x6a4>)
 80043f4:	e000      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x594>
 80043f6:	4a3f      	ldr	r2, [pc, #252]	@ (80044f4 <HAL_ADC_ConfigChannel+0x690>)
 80043f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7ff f8d6 	bl	80035b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004406:	4b41      	ldr	r3, [pc, #260]	@ (800450c <HAL_ADC_ConfigChannel+0x6a8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	4a40      	ldr	r2, [pc, #256]	@ (8004510 <HAL_ADC_ConfigChannel+0x6ac>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	3301      	adds	r3, #1
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800441a:	e002      	b.n	8004422 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3b01      	subs	r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f9      	bne.n	800441c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004428:	e05a      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a39      	ldr	r2, [pc, #228]	@ (8004514 <HAL_ADC_ConfigChannel+0x6b0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d11e      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x60e>
 8004434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d119      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2f      	ldr	r2, [pc, #188]	@ (8004500 <HAL_ADC_ConfigChannel+0x69c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d14b      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2a      	ldr	r2, [pc, #168]	@ (80044f8 <HAL_ADC_ConfigChannel+0x694>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_ADC_ConfigChannel+0x5f8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a29      	ldr	r2, [pc, #164]	@ (80044fc <HAL_ADC_ConfigChannel+0x698>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x5fc>
 800445c:	4a2a      	ldr	r2, [pc, #168]	@ (8004508 <HAL_ADC_ConfigChannel+0x6a4>)
 800445e:	e000      	b.n	8004462 <HAL_ADC_ConfigChannel+0x5fe>
 8004460:	4a24      	ldr	r2, [pc, #144]	@ (80044f4 <HAL_ADC_ConfigChannel+0x690>)
 8004462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f7ff f8a1 	bl	80035b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004470:	e036      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a28      	ldr	r2, [pc, #160]	@ (8004518 <HAL_ADC_ConfigChannel+0x6b4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d131      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
 800447c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d12c      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1d      	ldr	r2, [pc, #116]	@ (8004500 <HAL_ADC_ConfigChannel+0x69c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d127      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a18      	ldr	r2, [pc, #96]	@ (80044f8 <HAL_ADC_ConfigChannel+0x694>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_ADC_ConfigChannel+0x640>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a17      	ldr	r2, [pc, #92]	@ (80044fc <HAL_ADC_ConfigChannel+0x698>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x644>
 80044a4:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <HAL_ADC_ConfigChannel+0x6a4>)
 80044a6:	e000      	b.n	80044aa <HAL_ADC_ConfigChannel+0x646>
 80044a8:	4a12      	ldr	r2, [pc, #72]	@ (80044f4 <HAL_ADC_ConfigChannel+0x690>)
 80044aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7ff f87d 	bl	80035b2 <LL_ADC_SetCommonPathInternalCh>
 80044b8:	e012      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80044cc:	e008      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3784      	adds	r7, #132	@ 0x84
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd90      	pop	{r4, r7, pc}
 80044f4:	58026300 	.word	0x58026300
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40022100 	.word	0x40022100
 8004500:	58026000 	.word	0x58026000
 8004504:	cb840000 	.word	0xcb840000
 8004508:	40022300 	.word	0x40022300
 800450c:	24000004 	.word	0x24000004
 8004510:	053e2d63 	.word	0x053e2d63
 8004514:	c7520000 	.word	0xc7520000
 8004518:	cfb80000 	.word	0xcfb80000

0800451c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f9c9 	bl	80038c0 <LL_ADC_IsEnabled>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d16e      	bne.n	8004612 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	4b38      	ldr	r3, [pc, #224]	@ (800461c <ADC_Enable+0x100>)
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004546:	f043 0210 	orr.w	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e05a      	b.n	8004614 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff f998 	bl	8003898 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004568:	f7fe fff8 	bl	800355c <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2b      	ldr	r2, [pc, #172]	@ (8004620 <ADC_Enable+0x104>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <ADC_Enable+0x66>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a29      	ldr	r2, [pc, #164]	@ (8004624 <ADC_Enable+0x108>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <ADC_Enable+0x6a>
 8004582:	4b29      	ldr	r3, [pc, #164]	@ (8004628 <ADC_Enable+0x10c>)
 8004584:	e000      	b.n	8004588 <ADC_Enable+0x6c>
 8004586:	4b29      	ldr	r3, [pc, #164]	@ (800462c <ADC_Enable+0x110>)
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff f929 	bl	80037e0 <LL_ADC_GetMultimode>
 800458e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a23      	ldr	r2, [pc, #140]	@ (8004624 <ADC_Enable+0x108>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d002      	beq.n	80045a0 <ADC_Enable+0x84>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	e000      	b.n	80045a2 <ADC_Enable+0x86>
 80045a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004620 <ADC_Enable+0x104>)
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d02c      	beq.n	8004604 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d130      	bne.n	8004612 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b0:	e028      	b.n	8004604 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff f982 	bl	80038c0 <LL_ADC_IsEnabled>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f966 	bl	8003898 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045cc:	f7fe ffc6 	bl	800355c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d914      	bls.n	8004604 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d00d      	beq.n	8004604 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	f043 0210 	orr.w	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e007      	b.n	8004614 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d1cf      	bne.n	80045b2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	8000003f 	.word	0x8000003f
 8004620:	40022000 	.word	0x40022000
 8004624:	40022100 	.word	0x40022100
 8004628:	40022300 	.word	0x40022300
 800462c:	58026300 	.word	0x58026300

08004630 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004646:	2b00      	cmp	r3, #0
 8004648:	d14b      	bne.n	80046e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d021      	beq.n	80046a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f817 	bl	800369c <LL_ADC_REG_IsTriggerSourceSWStart>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d032      	beq.n	80046da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d12b      	bne.n	80046da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004686:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11f      	bne.n	80046da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80046a6:	e018      	b.n	80046da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d111      	bne.n	80046da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fba4 	bl	8003e28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046e0:	e00e      	b.n	8004700 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff fbae 	bl	8003e50 <HAL_ADC_ErrorCallback>
}
 80046f4:	e004      	b.n	8004700 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff fb90 	bl	8003e3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	f043 0204 	orr.w	r2, r3, #4
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fb80 	bl	8003e50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a7a      	ldr	r2, [pc, #488]	@ (8004950 <ADC_ConfigureBoostMode+0x1f8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <ADC_ConfigureBoostMode+0x1c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a79      	ldr	r2, [pc, #484]	@ (8004954 <ADC_ConfigureBoostMode+0x1fc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d109      	bne.n	8004788 <ADC_ConfigureBoostMode+0x30>
 8004774:	4b78      	ldr	r3, [pc, #480]	@ (8004958 <ADC_ConfigureBoostMode+0x200>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e008      	b.n	800479a <ADC_ConfigureBoostMode+0x42>
 8004788:	4b74      	ldr	r3, [pc, #464]	@ (800495c <ADC_ConfigureBoostMode+0x204>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01c      	beq.n	80047d8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800479e:	f004 fabb 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 80047a2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047ac:	d010      	beq.n	80047d0 <ADC_ConfigureBoostMode+0x78>
 80047ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047b2:	d873      	bhi.n	800489c <ADC_ConfigureBoostMode+0x144>
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b8:	d002      	beq.n	80047c0 <ADC_ConfigureBoostMode+0x68>
 80047ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047be:	d16d      	bne.n	800489c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	60fb      	str	r3, [r7, #12]
        break;
 80047ce:	e068      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	60fb      	str	r3, [r7, #12]
        break;
 80047d6:	e064      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80047d8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	f005 fd42 	bl	800a268 <HAL_RCCEx_GetPeriphCLKFreq>
 80047e4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80047ee:	d051      	beq.n	8004894 <ADC_ConfigureBoostMode+0x13c>
 80047f0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80047f4:	d854      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 80047f6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80047fa:	d047      	beq.n	800488c <ADC_ConfigureBoostMode+0x134>
 80047fc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004800:	d84e      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 8004802:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004806:	d03d      	beq.n	8004884 <ADC_ConfigureBoostMode+0x12c>
 8004808:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800480c:	d848      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 800480e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004812:	d033      	beq.n	800487c <ADC_ConfigureBoostMode+0x124>
 8004814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004818:	d842      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 800481a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800481e:	d029      	beq.n	8004874 <ADC_ConfigureBoostMode+0x11c>
 8004820:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004824:	d83c      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 8004826:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800482a:	d01a      	beq.n	8004862 <ADC_ConfigureBoostMode+0x10a>
 800482c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004830:	d836      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 8004832:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004836:	d014      	beq.n	8004862 <ADC_ConfigureBoostMode+0x10a>
 8004838:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800483c:	d830      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004842:	d00e      	beq.n	8004862 <ADC_ConfigureBoostMode+0x10a>
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004848:	d82a      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 800484a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800484e:	d008      	beq.n	8004862 <ADC_ConfigureBoostMode+0x10a>
 8004850:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004854:	d824      	bhi.n	80048a0 <ADC_ConfigureBoostMode+0x148>
 8004856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800485a:	d002      	beq.n	8004862 <ADC_ConfigureBoostMode+0x10a>
 800485c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004860:	d11e      	bne.n	80048a0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	0c9b      	lsrs	r3, r3, #18
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	60fb      	str	r3, [r7, #12]
        break;
 8004872:	e016      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
        break;
 800487a:	e012      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	60fb      	str	r3, [r7, #12]
        break;
 8004882:	e00e      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	60fb      	str	r3, [r7, #12]
        break;
 800488a:	e00a      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	60fb      	str	r3, [r7, #12]
        break;
 8004892:	e006      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	60fb      	str	r3, [r7, #12]
        break;
 800489a:	e002      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
        break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048a0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80048a2:	f7fe fe67 	bl	8003574 <HAL_GetREVID>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d815      	bhi.n	80048dc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004960 <ADC_ConfigureBoostMode+0x208>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d908      	bls.n	80048ca <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048c8:	e03e      	b.n	8004948 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048d8:	609a      	str	r2, [r3, #8]
}
 80048da:	e035      	b.n	8004948 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <ADC_ConfigureBoostMode+0x20c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d808      	bhi.n	80048fc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048f8:	609a      	str	r2, [r3, #8]
}
 80048fa:	e025      	b.n	8004948 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004968 <ADC_ConfigureBoostMode+0x210>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d80a      	bhi.n	800491a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004916:	609a      	str	r2, [r3, #8]
}
 8004918:	e016      	b.n	8004948 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a13      	ldr	r2, [pc, #76]	@ (800496c <ADC_ConfigureBoostMode+0x214>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d80a      	bhi.n	8004938 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004934:	609a      	str	r2, [r3, #8]
}
 8004936:	e007      	b.n	8004948 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40022000 	.word	0x40022000
 8004954:	40022100 	.word	0x40022100
 8004958:	40022300 	.word	0x40022300
 800495c:	58026300 	.word	0x58026300
 8004960:	01312d00 	.word	0x01312d00
 8004964:	005f5e10 	.word	0x005f5e10
 8004968:	00bebc20 	.word	0x00bebc20
 800496c:	017d7840 	.word	0x017d7840

08004970 <LL_ADC_IsEnabled>:
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <LL_ADC_IsEnabled+0x18>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <LL_ADC_IsEnabled+0x1a>
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_ADC_REG_IsConversionOngoing>:
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d101      	bne.n	80049ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b09f      	sub	sp, #124	@ 0x7c
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0be      	b.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d102      	bne.n	80049fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	e001      	b.n	80049fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e09d      	b.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff ffb9 	bl	8004996 <LL_ADC_REG_IsConversionOngoing>
 8004a24:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff ffb3 	bl	8004996 <LL_ADC_REG_IsConversionOngoing>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d17f      	bne.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d17c      	bne.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a47      	ldr	r2, [pc, #284]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a46      	ldr	r2, [pc, #280]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004a50:	4b45      	ldr	r3, [pc, #276]	@ (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a52:	e000      	b.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a54:	4b45      	ldr	r3, [pc, #276]	@ (8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a56:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d039      	beq.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a70:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3a      	ldr	r2, [pc, #232]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a38      	ldr	r2, [pc, #224]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10e      	bne.n	8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a86:	4836      	ldr	r0, [pc, #216]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a88:	f7ff ff72 	bl	8004970 <LL_ADC_IsEnabled>
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	4835      	ldr	r0, [pc, #212]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a90:	f7ff ff6e 	bl	8004970 <LL_ADC_IsEnabled>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4323      	orrs	r3, r4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e008      	b.n	8004ab6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004aa4:	4832      	ldr	r0, [pc, #200]	@ (8004b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004aa6:	f7ff ff63 	bl	8004970 <LL_ADC_IsEnabled>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d047      	beq.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	4b2d      	ldr	r3, [pc, #180]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	6811      	ldr	r1, [r2, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ad2:	e03a      	b.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ade:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1d      	ldr	r2, [pc, #116]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10e      	bne.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004af4:	481a      	ldr	r0, [pc, #104]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004af6:	f7ff ff3b 	bl	8004970 <LL_ADC_IsEnabled>
 8004afa:	4604      	mov	r4, r0
 8004afc:	4819      	ldr	r0, [pc, #100]	@ (8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004afe:	f7ff ff37 	bl	8004970 <LL_ADC_IsEnabled>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4323      	orrs	r3, r4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e008      	b.n	8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004b12:	4817      	ldr	r0, [pc, #92]	@ (8004b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004b14:	f7ff ff2c 	bl	8004970 <LL_ADC_IsEnabled>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b32:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b34:	e009      	b.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004b48:	e000      	b.n	8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	377c      	adds	r7, #124	@ 0x7c
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40022100 	.word	0x40022100
 8004b68:	40022300 	.word	0x40022300
 8004b6c:	58026300 	.word	0x58026300
 8004b70:	58026000 	.word	0x58026000
 8004b74:	fffff0e0 	.word	0xfffff0e0

08004b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ba0:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <__NVIC_SetPriorityGrouping+0x44>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ba6:	4a04      	ldr	r2, [pc, #16]	@ (8004bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	60d3      	str	r3, [r2, #12]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00
 8004bbc:	05fa0000 	.word	0x05fa0000

08004bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc4:	4b04      	ldr	r3, [pc, #16]	@ (8004bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	0a1b      	lsrs	r3, r3, #8
 8004bca:	f003 0307 	and.w	r3, r3, #7
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	db0b      	blt.n	8004c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	f003 021f 	and.w	r2, r3, #31
 8004bf4:	4907      	ldr	r1, [pc, #28]	@ (8004c14 <__NVIC_EnableIRQ+0x38>)
 8004bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8004c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000e100 	.word	0xe000e100

08004c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	db0a      	blt.n	8004c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	490c      	ldr	r1, [pc, #48]	@ (8004c64 <__NVIC_SetPriority+0x4c>)
 8004c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c40:	e00a      	b.n	8004c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4908      	ldr	r1, [pc, #32]	@ (8004c68 <__NVIC_SetPriority+0x50>)
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	440b      	add	r3, r1
 8004c56:	761a      	strb	r2, [r3, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	e000e100 	.word	0xe000e100
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	@ 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f1c3 0307 	rsb	r3, r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	bf28      	it	cs
 8004c8a:	2304      	movcs	r3, #4
 8004c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d902      	bls.n	8004c9c <NVIC_EncodePriority+0x30>
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3b03      	subs	r3, #3
 8004c9a:	e000      	b.n	8004c9e <NVIC_EncodePriority+0x32>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	401a      	ands	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	43d9      	mvns	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc4:	4313      	orrs	r3, r2
         );
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3724      	adds	r7, #36	@ 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ff4c 	bl	8004b78 <__NVIC_SetPriorityGrouping>
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf6:	f7ff ff63 	bl	8004bc0 <__NVIC_GetPriorityGrouping>
 8004cfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	6978      	ldr	r0, [r7, #20]
 8004d02:	f7ff ffb3 	bl	8004c6c <NVIC_EncodePriority>
 8004d06:	4602      	mov	r2, r0
 8004d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff82 	bl	8004c18 <__NVIC_SetPriority>
}
 8004d14:	bf00      	nop
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ff56 	bl	8004bdc <__NVIC_EnableIRQ>
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d40:	f7fe fc0c 	bl	800355c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e316      	b.n	800537e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a66      	ldr	r2, [pc, #408]	@ (8004ef0 <HAL_DMA_Init+0x1b8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d04a      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a65      	ldr	r2, [pc, #404]	@ (8004ef4 <HAL_DMA_Init+0x1bc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d045      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a63      	ldr	r2, [pc, #396]	@ (8004ef8 <HAL_DMA_Init+0x1c0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d040      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a62      	ldr	r2, [pc, #392]	@ (8004efc <HAL_DMA_Init+0x1c4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d03b      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a60      	ldr	r2, [pc, #384]	@ (8004f00 <HAL_DMA_Init+0x1c8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d036      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a5f      	ldr	r2, [pc, #380]	@ (8004f04 <HAL_DMA_Init+0x1cc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d031      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5d      	ldr	r2, [pc, #372]	@ (8004f08 <HAL_DMA_Init+0x1d0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02c      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5c      	ldr	r2, [pc, #368]	@ (8004f0c <HAL_DMA_Init+0x1d4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d027      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f10 <HAL_DMA_Init+0x1d8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a59      	ldr	r2, [pc, #356]	@ (8004f14 <HAL_DMA_Init+0x1dc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d01d      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a57      	ldr	r2, [pc, #348]	@ (8004f18 <HAL_DMA_Init+0x1e0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a56      	ldr	r2, [pc, #344]	@ (8004f1c <HAL_DMA_Init+0x1e4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a54      	ldr	r2, [pc, #336]	@ (8004f20 <HAL_DMA_Init+0x1e8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a53      	ldr	r2, [pc, #332]	@ (8004f24 <HAL_DMA_Init+0x1ec>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a51      	ldr	r2, [pc, #324]	@ (8004f28 <HAL_DMA_Init+0x1f0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_DMA_Init+0xb8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a50      	ldr	r2, [pc, #320]	@ (8004f2c <HAL_DMA_Init+0x1f4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_DMA_Init+0xbc>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_DMA_Init+0xbe>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 813b 	beq.w	8005072 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a37      	ldr	r2, [pc, #220]	@ (8004ef0 <HAL_DMA_Init+0x1b8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04a      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a36      	ldr	r2, [pc, #216]	@ (8004ef4 <HAL_DMA_Init+0x1bc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d045      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a34      	ldr	r2, [pc, #208]	@ (8004ef8 <HAL_DMA_Init+0x1c0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d040      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a33      	ldr	r2, [pc, #204]	@ (8004efc <HAL_DMA_Init+0x1c4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d03b      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a31      	ldr	r2, [pc, #196]	@ (8004f00 <HAL_DMA_Init+0x1c8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d036      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a30      	ldr	r2, [pc, #192]	@ (8004f04 <HAL_DMA_Init+0x1cc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d031      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f08 <HAL_DMA_Init+0x1d0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02c      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2d      	ldr	r2, [pc, #180]	@ (8004f0c <HAL_DMA_Init+0x1d4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d027      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <HAL_DMA_Init+0x1d8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d022      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f14 <HAL_DMA_Init+0x1dc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d01d      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a28      	ldr	r2, [pc, #160]	@ (8004f18 <HAL_DMA_Init+0x1e0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d018      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a27      	ldr	r2, [pc, #156]	@ (8004f1c <HAL_DMA_Init+0x1e4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a25      	ldr	r2, [pc, #148]	@ (8004f20 <HAL_DMA_Init+0x1e8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <HAL_DMA_Init+0x1ec>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	@ (8004f28 <HAL_DMA_Init+0x1f0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_DMA_Init+0x174>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	@ (8004f2c <HAL_DMA_Init+0x1f4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <HAL_DMA_Init+0x186>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e007      	b.n	8004ece <HAL_DMA_Init+0x196>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ece:	e02f      	b.n	8004f30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed0:	f7fe fb44 	bl	800355c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d928      	bls.n	8004f30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e246      	b.n	800537e <HAL_DMA_Init+0x646>
 8004ef0:	40020010 	.word	0x40020010
 8004ef4:	40020028 	.word	0x40020028
 8004ef8:	40020040 	.word	0x40020040
 8004efc:	40020058 	.word	0x40020058
 8004f00:	40020070 	.word	0x40020070
 8004f04:	40020088 	.word	0x40020088
 8004f08:	400200a0 	.word	0x400200a0
 8004f0c:	400200b8 	.word	0x400200b8
 8004f10:	40020410 	.word	0x40020410
 8004f14:	40020428 	.word	0x40020428
 8004f18:	40020440 	.word	0x40020440
 8004f1c:	40020458 	.word	0x40020458
 8004f20:	40020470 	.word	0x40020470
 8004f24:	40020488 	.word	0x40020488
 8004f28:	400204a0 	.word	0x400204a0
 8004f2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1c8      	bne.n	8004ed0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4b83      	ldr	r3, [pc, #524]	@ (8005158 <HAL_DMA_Init+0x420>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d107      	bne.n	8004f94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f94:	4b71      	ldr	r3, [pc, #452]	@ (800515c <HAL_DMA_Init+0x424>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b71      	ldr	r3, [pc, #452]	@ (8005160 <HAL_DMA_Init+0x428>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fa0:	d328      	bcc.n	8004ff4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b28      	cmp	r3, #40	@ 0x28
 8004fa8:	d903      	bls.n	8004fb2 <HAL_DMA_Init+0x27a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fb0:	d917      	bls.n	8004fe2 <HAL_DMA_Init+0x2aa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fb8:	d903      	bls.n	8004fc2 <HAL_DMA_Init+0x28a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b42      	cmp	r3, #66	@ 0x42
 8004fc0:	d90f      	bls.n	8004fe2 <HAL_DMA_Init+0x2aa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b46      	cmp	r3, #70	@ 0x46
 8004fc8:	d903      	bls.n	8004fd2 <HAL_DMA_Init+0x29a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b48      	cmp	r3, #72	@ 0x48
 8004fd0:	d907      	bls.n	8004fe2 <HAL_DMA_Init+0x2aa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b4e      	cmp	r3, #78	@ 0x4e
 8004fd8:	d905      	bls.n	8004fe6 <HAL_DMA_Init+0x2ae>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b52      	cmp	r3, #82	@ 0x52
 8004fe0:	d801      	bhi.n	8004fe6 <HAL_DMA_Init+0x2ae>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_DMA_Init+0x2b0>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0307 	bic.w	r3, r3, #7
 800500a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	2b04      	cmp	r3, #4
 800501c:	d117      	bne.n	800504e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00e      	beq.n	800504e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f002 fb3f 	bl	80076b4 <DMA_CheckFifoParam>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2240      	movs	r2, #64	@ 0x40
 8005040:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e197      	b.n	800537e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f002 fa7a 	bl	8007550 <DMA_CalcBaseAndBitshift>
 800505c:	4603      	mov	r3, r0
 800505e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	223f      	movs	r2, #63	@ 0x3f
 800506a:	409a      	lsls	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	e0cd      	b.n	800520e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a3b      	ldr	r2, [pc, #236]	@ (8005164 <HAL_DMA_Init+0x42c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_DMA_Init+0x38a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a39      	ldr	r2, [pc, #228]	@ (8005168 <HAL_DMA_Init+0x430>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <HAL_DMA_Init+0x38a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a38      	ldr	r2, [pc, #224]	@ (800516c <HAL_DMA_Init+0x434>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_DMA_Init+0x38a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a36      	ldr	r2, [pc, #216]	@ (8005170 <HAL_DMA_Init+0x438>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_DMA_Init+0x38a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a35      	ldr	r2, [pc, #212]	@ (8005174 <HAL_DMA_Init+0x43c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_DMA_Init+0x38a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a33      	ldr	r2, [pc, #204]	@ (8005178 <HAL_DMA_Init+0x440>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_DMA_Init+0x38a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a32      	ldr	r2, [pc, #200]	@ (800517c <HAL_DMA_Init+0x444>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_DMA_Init+0x38a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a30      	ldr	r2, [pc, #192]	@ (8005180 <HAL_DMA_Init+0x448>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_Init+0x38e>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <HAL_DMA_Init+0x390>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8097 	beq.w	80051fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a24      	ldr	r2, [pc, #144]	@ (8005164 <HAL_DMA_Init+0x42c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d021      	beq.n	800511c <HAL_DMA_Init+0x3e4>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <HAL_DMA_Init+0x430>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01c      	beq.n	800511c <HAL_DMA_Init+0x3e4>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a21      	ldr	r2, [pc, #132]	@ (800516c <HAL_DMA_Init+0x434>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d017      	beq.n	800511c <HAL_DMA_Init+0x3e4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005170 <HAL_DMA_Init+0x438>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d012      	beq.n	800511c <HAL_DMA_Init+0x3e4>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005174 <HAL_DMA_Init+0x43c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00d      	beq.n	800511c <HAL_DMA_Init+0x3e4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <HAL_DMA_Init+0x440>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d008      	beq.n	800511c <HAL_DMA_Init+0x3e4>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <HAL_DMA_Init+0x444>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <HAL_DMA_Init+0x3e4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <HAL_DMA_Init+0x448>)
 800511a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <HAL_DMA_Init+0x44c>)
 8005138:	4013      	ands	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b40      	cmp	r3, #64	@ 0x40
 8005142:	d021      	beq.n	8005188 <HAL_DMA_Init+0x450>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b80      	cmp	r3, #128	@ 0x80
 800514a:	d102      	bne.n	8005152 <HAL_DMA_Init+0x41a>
 800514c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005150:	e01b      	b.n	800518a <HAL_DMA_Init+0x452>
 8005152:	2300      	movs	r3, #0
 8005154:	e019      	b.n	800518a <HAL_DMA_Init+0x452>
 8005156:	bf00      	nop
 8005158:	fe10803f 	.word	0xfe10803f
 800515c:	5c001000 	.word	0x5c001000
 8005160:	ffff0000 	.word	0xffff0000
 8005164:	58025408 	.word	0x58025408
 8005168:	5802541c 	.word	0x5802541c
 800516c:	58025430 	.word	0x58025430
 8005170:	58025444 	.word	0x58025444
 8005174:	58025458 	.word	0x58025458
 8005178:	5802546c 	.word	0x5802546c
 800517c:	58025480 	.word	0x58025480
 8005180:	58025494 	.word	0x58025494
 8005184:	fffe000f 	.word	0xfffe000f
 8005188:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	68d2      	ldr	r2, [r2, #12]
 800518e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b6e      	ldr	r3, [pc, #440]	@ (8005388 <HAL_DMA_Init+0x650>)
 80051d0:	4413      	add	r3, r2
 80051d2:	4a6e      	ldr	r2, [pc, #440]	@ (800538c <HAL_DMA_Init+0x654>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	009a      	lsls	r2, r3, #2
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f002 f9b5 	bl	8007550 <DMA_CalcBaseAndBitshift>
 80051e6:	4603      	mov	r3, r0
 80051e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2201      	movs	r2, #1
 80051f4:	409a      	lsls	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e008      	b.n	800520e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2240      	movs	r2, #64	@ 0x40
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2203      	movs	r2, #3
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0b7      	b.n	800537e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a5f      	ldr	r2, [pc, #380]	@ (8005390 <HAL_DMA_Init+0x658>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d072      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5d      	ldr	r2, [pc, #372]	@ (8005394 <HAL_DMA_Init+0x65c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d06d      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5c      	ldr	r2, [pc, #368]	@ (8005398 <HAL_DMA_Init+0x660>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d068      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a5a      	ldr	r2, [pc, #360]	@ (800539c <HAL_DMA_Init+0x664>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d063      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a59      	ldr	r2, [pc, #356]	@ (80053a0 <HAL_DMA_Init+0x668>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d05e      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a57      	ldr	r2, [pc, #348]	@ (80053a4 <HAL_DMA_Init+0x66c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d059      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a56      	ldr	r2, [pc, #344]	@ (80053a8 <HAL_DMA_Init+0x670>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d054      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a54      	ldr	r2, [pc, #336]	@ (80053ac <HAL_DMA_Init+0x674>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d04f      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a53      	ldr	r2, [pc, #332]	@ (80053b0 <HAL_DMA_Init+0x678>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d04a      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a51      	ldr	r2, [pc, #324]	@ (80053b4 <HAL_DMA_Init+0x67c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a50      	ldr	r2, [pc, #320]	@ (80053b8 <HAL_DMA_Init+0x680>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d040      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a4e      	ldr	r2, [pc, #312]	@ (80053bc <HAL_DMA_Init+0x684>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d03b      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a4d      	ldr	r2, [pc, #308]	@ (80053c0 <HAL_DMA_Init+0x688>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d036      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a4b      	ldr	r2, [pc, #300]	@ (80053c4 <HAL_DMA_Init+0x68c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a4a      	ldr	r2, [pc, #296]	@ (80053c8 <HAL_DMA_Init+0x690>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d02c      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a48      	ldr	r2, [pc, #288]	@ (80053cc <HAL_DMA_Init+0x694>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d027      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a47      	ldr	r2, [pc, #284]	@ (80053d0 <HAL_DMA_Init+0x698>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a45      	ldr	r2, [pc, #276]	@ (80053d4 <HAL_DMA_Init+0x69c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a44      	ldr	r2, [pc, #272]	@ (80053d8 <HAL_DMA_Init+0x6a0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a42      	ldr	r2, [pc, #264]	@ (80053dc <HAL_DMA_Init+0x6a4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a41      	ldr	r2, [pc, #260]	@ (80053e0 <HAL_DMA_Init+0x6a8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3f      	ldr	r2, [pc, #252]	@ (80053e4 <HAL_DMA_Init+0x6ac>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3e      	ldr	r2, [pc, #248]	@ (80053e8 <HAL_DMA_Init+0x6b0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_DMA_Init+0x5c6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3c      	ldr	r2, [pc, #240]	@ (80053ec <HAL_DMA_Init+0x6b4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_DMA_Init+0x5ca>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_DMA_Init+0x5cc>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d032      	beq.n	800536e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f002 fa4f 	bl	80077ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b80      	cmp	r3, #128	@ 0x80
 8005314:	d102      	bne.n	800531c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005330:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d010      	beq.n	800535c <HAL_DMA_Init+0x624>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b08      	cmp	r3, #8
 8005340:	d80c      	bhi.n	800535c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f002 facc 	bl	80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	e008      	b.n	800536e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	a7fdabf8 	.word	0xa7fdabf8
 800538c:	cccccccd 	.word	0xcccccccd
 8005390:	40020010 	.word	0x40020010
 8005394:	40020028 	.word	0x40020028
 8005398:	40020040 	.word	0x40020040
 800539c:	40020058 	.word	0x40020058
 80053a0:	40020070 	.word	0x40020070
 80053a4:	40020088 	.word	0x40020088
 80053a8:	400200a0 	.word	0x400200a0
 80053ac:	400200b8 	.word	0x400200b8
 80053b0:	40020410 	.word	0x40020410
 80053b4:	40020428 	.word	0x40020428
 80053b8:	40020440 	.word	0x40020440
 80053bc:	40020458 	.word	0x40020458
 80053c0:	40020470 	.word	0x40020470
 80053c4:	40020488 	.word	0x40020488
 80053c8:	400204a0 	.word	0x400204a0
 80053cc:	400204b8 	.word	0x400204b8
 80053d0:	58025408 	.word	0x58025408
 80053d4:	5802541c 	.word	0x5802541c
 80053d8:	58025430 	.word	0x58025430
 80053dc:	58025444 	.word	0x58025444
 80053e0:	58025458 	.word	0x58025458
 80053e4:	5802546c 	.word	0x5802546c
 80053e8:	58025480 	.word	0x58025480
 80053ec:	58025494 	.word	0x58025494

080053f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e226      	b.n	800585a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_DMA_Start_IT+0x2a>
 8005416:	2302      	movs	r3, #2
 8005418:	e21f      	b.n	800585a <HAL_DMA_Start_IT+0x46a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b01      	cmp	r3, #1
 800542c:	f040 820a 	bne.w	8005844 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a68      	ldr	r2, [pc, #416]	@ (80055e4 <HAL_DMA_Start_IT+0x1f4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d04a      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a66      	ldr	r2, [pc, #408]	@ (80055e8 <HAL_DMA_Start_IT+0x1f8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d045      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a65      	ldr	r2, [pc, #404]	@ (80055ec <HAL_DMA_Start_IT+0x1fc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d040      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a63      	ldr	r2, [pc, #396]	@ (80055f0 <HAL_DMA_Start_IT+0x200>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d03b      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a62      	ldr	r2, [pc, #392]	@ (80055f4 <HAL_DMA_Start_IT+0x204>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d036      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a60      	ldr	r2, [pc, #384]	@ (80055f8 <HAL_DMA_Start_IT+0x208>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5f      	ldr	r2, [pc, #380]	@ (80055fc <HAL_DMA_Start_IT+0x20c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d02c      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5d      	ldr	r2, [pc, #372]	@ (8005600 <HAL_DMA_Start_IT+0x210>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d027      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a5c      	ldr	r2, [pc, #368]	@ (8005604 <HAL_DMA_Start_IT+0x214>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5a      	ldr	r2, [pc, #360]	@ (8005608 <HAL_DMA_Start_IT+0x218>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01d      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a59      	ldr	r2, [pc, #356]	@ (800560c <HAL_DMA_Start_IT+0x21c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d018      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a57      	ldr	r2, [pc, #348]	@ (8005610 <HAL_DMA_Start_IT+0x220>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a56      	ldr	r2, [pc, #344]	@ (8005614 <HAL_DMA_Start_IT+0x224>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a54      	ldr	r2, [pc, #336]	@ (8005618 <HAL_DMA_Start_IT+0x228>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a53      	ldr	r2, [pc, #332]	@ (800561c <HAL_DMA_Start_IT+0x22c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a51      	ldr	r2, [pc, #324]	@ (8005620 <HAL_DMA_Start_IT+0x230>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d108      	bne.n	80054f0 <HAL_DMA_Start_IT+0x100>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e007      	b.n	8005500 <HAL_DMA_Start_IT+0x110>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 fe76 	bl	80071f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a34      	ldr	r2, [pc, #208]	@ (80055e4 <HAL_DMA_Start_IT+0x1f4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d04a      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a33      	ldr	r2, [pc, #204]	@ (80055e8 <HAL_DMA_Start_IT+0x1f8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d045      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a31      	ldr	r2, [pc, #196]	@ (80055ec <HAL_DMA_Start_IT+0x1fc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d040      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a30      	ldr	r2, [pc, #192]	@ (80055f0 <HAL_DMA_Start_IT+0x200>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d03b      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2e      	ldr	r2, [pc, #184]	@ (80055f4 <HAL_DMA_Start_IT+0x204>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d036      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2d      	ldr	r2, [pc, #180]	@ (80055f8 <HAL_DMA_Start_IT+0x208>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d031      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2b      	ldr	r2, [pc, #172]	@ (80055fc <HAL_DMA_Start_IT+0x20c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d02c      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2a      	ldr	r2, [pc, #168]	@ (8005600 <HAL_DMA_Start_IT+0x210>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d027      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a28      	ldr	r2, [pc, #160]	@ (8005604 <HAL_DMA_Start_IT+0x214>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d022      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a27      	ldr	r2, [pc, #156]	@ (8005608 <HAL_DMA_Start_IT+0x218>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d01d      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a25      	ldr	r2, [pc, #148]	@ (800560c <HAL_DMA_Start_IT+0x21c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a24      	ldr	r2, [pc, #144]	@ (8005610 <HAL_DMA_Start_IT+0x220>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a22      	ldr	r2, [pc, #136]	@ (8005614 <HAL_DMA_Start_IT+0x224>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a21      	ldr	r2, [pc, #132]	@ (8005618 <HAL_DMA_Start_IT+0x228>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <HAL_DMA_Start_IT+0x22c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005620 <HAL_DMA_Start_IT+0x230>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <HAL_DMA_Start_IT+0x1c0>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_DMA_Start_IT+0x1c2>
 80055b0:	2300      	movs	r3, #0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d036      	beq.n	8005624 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 021e 	bic.w	r2, r3, #30
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0216 	orr.w	r2, r2, #22
 80055c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d03e      	beq.n	8005650 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0208 	orr.w	r2, r2, #8
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e035      	b.n	8005650 <HAL_DMA_Start_IT+0x260>
 80055e4:	40020010 	.word	0x40020010
 80055e8:	40020028 	.word	0x40020028
 80055ec:	40020040 	.word	0x40020040
 80055f0:	40020058 	.word	0x40020058
 80055f4:	40020070 	.word	0x40020070
 80055f8:	40020088 	.word	0x40020088
 80055fc:	400200a0 	.word	0x400200a0
 8005600:	400200b8 	.word	0x400200b8
 8005604:	40020410 	.word	0x40020410
 8005608:	40020428 	.word	0x40020428
 800560c:	40020440 	.word	0x40020440
 8005610:	40020458 	.word	0x40020458
 8005614:	40020470 	.word	0x40020470
 8005618:	40020488 	.word	0x40020488
 800561c:	400204a0 	.word	0x400204a0
 8005620:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 020e 	bic.w	r2, r3, #14
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 020a 	orr.w	r2, r2, #10
 8005636:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0204 	orr.w	r2, r2, #4
 800564e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a83      	ldr	r2, [pc, #524]	@ (8005864 <HAL_DMA_Start_IT+0x474>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d072      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a82      	ldr	r2, [pc, #520]	@ (8005868 <HAL_DMA_Start_IT+0x478>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d06d      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a80      	ldr	r2, [pc, #512]	@ (800586c <HAL_DMA_Start_IT+0x47c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d068      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a7f      	ldr	r2, [pc, #508]	@ (8005870 <HAL_DMA_Start_IT+0x480>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d063      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a7d      	ldr	r2, [pc, #500]	@ (8005874 <HAL_DMA_Start_IT+0x484>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d05e      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a7c      	ldr	r2, [pc, #496]	@ (8005878 <HAL_DMA_Start_IT+0x488>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d059      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a7a      	ldr	r2, [pc, #488]	@ (800587c <HAL_DMA_Start_IT+0x48c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d054      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a79      	ldr	r2, [pc, #484]	@ (8005880 <HAL_DMA_Start_IT+0x490>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d04f      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a77      	ldr	r2, [pc, #476]	@ (8005884 <HAL_DMA_Start_IT+0x494>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d04a      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a76      	ldr	r2, [pc, #472]	@ (8005888 <HAL_DMA_Start_IT+0x498>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d045      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a74      	ldr	r2, [pc, #464]	@ (800588c <HAL_DMA_Start_IT+0x49c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d040      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a73      	ldr	r2, [pc, #460]	@ (8005890 <HAL_DMA_Start_IT+0x4a0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d03b      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a71      	ldr	r2, [pc, #452]	@ (8005894 <HAL_DMA_Start_IT+0x4a4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d036      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a70      	ldr	r2, [pc, #448]	@ (8005898 <HAL_DMA_Start_IT+0x4a8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d031      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a6e      	ldr	r2, [pc, #440]	@ (800589c <HAL_DMA_Start_IT+0x4ac>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d02c      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a6d      	ldr	r2, [pc, #436]	@ (80058a0 <HAL_DMA_Start_IT+0x4b0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d027      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6b      	ldr	r2, [pc, #428]	@ (80058a4 <HAL_DMA_Start_IT+0x4b4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d022      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6a      	ldr	r2, [pc, #424]	@ (80058a8 <HAL_DMA_Start_IT+0x4b8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d01d      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a68      	ldr	r2, [pc, #416]	@ (80058ac <HAL_DMA_Start_IT+0x4bc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d018      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a67      	ldr	r2, [pc, #412]	@ (80058b0 <HAL_DMA_Start_IT+0x4c0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a65      	ldr	r2, [pc, #404]	@ (80058b4 <HAL_DMA_Start_IT+0x4c4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00e      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a64      	ldr	r2, [pc, #400]	@ (80058b8 <HAL_DMA_Start_IT+0x4c8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d009      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a62      	ldr	r2, [pc, #392]	@ (80058bc <HAL_DMA_Start_IT+0x4cc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a61      	ldr	r2, [pc, #388]	@ (80058c0 <HAL_DMA_Start_IT+0x4d0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d101      	bne.n	8005744 <HAL_DMA_Start_IT+0x354>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_DMA_Start_IT+0x356>
 8005744:	2300      	movs	r3, #0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01a      	beq.n	8005780 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005766:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800577a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800577e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a37      	ldr	r2, [pc, #220]	@ (8005864 <HAL_DMA_Start_IT+0x474>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d04a      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a36      	ldr	r2, [pc, #216]	@ (8005868 <HAL_DMA_Start_IT+0x478>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d045      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a34      	ldr	r2, [pc, #208]	@ (800586c <HAL_DMA_Start_IT+0x47c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d040      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a33      	ldr	r2, [pc, #204]	@ (8005870 <HAL_DMA_Start_IT+0x480>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d03b      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a31      	ldr	r2, [pc, #196]	@ (8005874 <HAL_DMA_Start_IT+0x484>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d036      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a30      	ldr	r2, [pc, #192]	@ (8005878 <HAL_DMA_Start_IT+0x488>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d031      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2e      	ldr	r2, [pc, #184]	@ (800587c <HAL_DMA_Start_IT+0x48c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d02c      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005880 <HAL_DMA_Start_IT+0x490>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d027      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005884 <HAL_DMA_Start_IT+0x494>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d022      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2a      	ldr	r2, [pc, #168]	@ (8005888 <HAL_DMA_Start_IT+0x498>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d01d      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a28      	ldr	r2, [pc, #160]	@ (800588c <HAL_DMA_Start_IT+0x49c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a27      	ldr	r2, [pc, #156]	@ (8005890 <HAL_DMA_Start_IT+0x4a0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a25      	ldr	r2, [pc, #148]	@ (8005894 <HAL_DMA_Start_IT+0x4a4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a24      	ldr	r2, [pc, #144]	@ (8005898 <HAL_DMA_Start_IT+0x4a8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a22      	ldr	r2, [pc, #136]	@ (800589c <HAL_DMA_Start_IT+0x4ac>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a21      	ldr	r2, [pc, #132]	@ (80058a0 <HAL_DMA_Start_IT+0x4b0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d108      	bne.n	8005832 <HAL_DMA_Start_IT+0x442>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e012      	b.n	8005858 <HAL_DMA_Start_IT+0x468>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e009      	b.n	8005858 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40020010 	.word	0x40020010
 8005868:	40020028 	.word	0x40020028
 800586c:	40020040 	.word	0x40020040
 8005870:	40020058 	.word	0x40020058
 8005874:	40020070 	.word	0x40020070
 8005878:	40020088 	.word	0x40020088
 800587c:	400200a0 	.word	0x400200a0
 8005880:	400200b8 	.word	0x400200b8
 8005884:	40020410 	.word	0x40020410
 8005888:	40020428 	.word	0x40020428
 800588c:	40020440 	.word	0x40020440
 8005890:	40020458 	.word	0x40020458
 8005894:	40020470 	.word	0x40020470
 8005898:	40020488 	.word	0x40020488
 800589c:	400204a0 	.word	0x400204a0
 80058a0:	400204b8 	.word	0x400204b8
 80058a4:	58025408 	.word	0x58025408
 80058a8:	5802541c 	.word	0x5802541c
 80058ac:	58025430 	.word	0x58025430
 80058b0:	58025444 	.word	0x58025444
 80058b4:	58025458 	.word	0x58025458
 80058b8:	5802546c 	.word	0x5802546c
 80058bc:	58025480 	.word	0x58025480
 80058c0:	58025494 	.word	0x58025494

080058c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80058cc:	f7fd fe46 	bl	800355c <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e2dc      	b.n	8005e96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d008      	beq.n	80058fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2280      	movs	r2, #128	@ 0x80
 80058ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e2cd      	b.n	8005e96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a76      	ldr	r2, [pc, #472]	@ (8005ad8 <HAL_DMA_Abort+0x214>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d04a      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a74      	ldr	r2, [pc, #464]	@ (8005adc <HAL_DMA_Abort+0x218>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d045      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a73      	ldr	r2, [pc, #460]	@ (8005ae0 <HAL_DMA_Abort+0x21c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d040      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a71      	ldr	r2, [pc, #452]	@ (8005ae4 <HAL_DMA_Abort+0x220>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d03b      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a70      	ldr	r2, [pc, #448]	@ (8005ae8 <HAL_DMA_Abort+0x224>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d036      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a6e      	ldr	r2, [pc, #440]	@ (8005aec <HAL_DMA_Abort+0x228>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d031      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6d      	ldr	r2, [pc, #436]	@ (8005af0 <HAL_DMA_Abort+0x22c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d02c      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6b      	ldr	r2, [pc, #428]	@ (8005af4 <HAL_DMA_Abort+0x230>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d027      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6a      	ldr	r2, [pc, #424]	@ (8005af8 <HAL_DMA_Abort+0x234>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a68      	ldr	r2, [pc, #416]	@ (8005afc <HAL_DMA_Abort+0x238>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01d      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a67      	ldr	r2, [pc, #412]	@ (8005b00 <HAL_DMA_Abort+0x23c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a65      	ldr	r2, [pc, #404]	@ (8005b04 <HAL_DMA_Abort+0x240>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a64      	ldr	r2, [pc, #400]	@ (8005b08 <HAL_DMA_Abort+0x244>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a62      	ldr	r2, [pc, #392]	@ (8005b0c <HAL_DMA_Abort+0x248>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a61      	ldr	r2, [pc, #388]	@ (8005b10 <HAL_DMA_Abort+0x24c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5f      	ldr	r2, [pc, #380]	@ (8005b14 <HAL_DMA_Abort+0x250>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_DMA_Abort+0xda>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_DMA_Abort+0xdc>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d013      	beq.n	80059cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 021e 	bic.w	r2, r2, #30
 80059b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e00a      	b.n	80059e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 020e 	bic.w	r2, r2, #14
 80059da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad8 <HAL_DMA_Abort+0x214>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d072      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a3a      	ldr	r2, [pc, #232]	@ (8005adc <HAL_DMA_Abort+0x218>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d06d      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a39      	ldr	r2, [pc, #228]	@ (8005ae0 <HAL_DMA_Abort+0x21c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d068      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a37      	ldr	r2, [pc, #220]	@ (8005ae4 <HAL_DMA_Abort+0x220>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d063      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a36      	ldr	r2, [pc, #216]	@ (8005ae8 <HAL_DMA_Abort+0x224>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d05e      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a34      	ldr	r2, [pc, #208]	@ (8005aec <HAL_DMA_Abort+0x228>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d059      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a33      	ldr	r2, [pc, #204]	@ (8005af0 <HAL_DMA_Abort+0x22c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d054      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a31      	ldr	r2, [pc, #196]	@ (8005af4 <HAL_DMA_Abort+0x230>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04f      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a30      	ldr	r2, [pc, #192]	@ (8005af8 <HAL_DMA_Abort+0x234>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d04a      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2e      	ldr	r2, [pc, #184]	@ (8005afc <HAL_DMA_Abort+0x238>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d045      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8005b00 <HAL_DMA_Abort+0x23c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d040      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2b      	ldr	r2, [pc, #172]	@ (8005b04 <HAL_DMA_Abort+0x240>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d03b      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b08 <HAL_DMA_Abort+0x244>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d036      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a28      	ldr	r2, [pc, #160]	@ (8005b0c <HAL_DMA_Abort+0x248>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d031      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a27      	ldr	r2, [pc, #156]	@ (8005b10 <HAL_DMA_Abort+0x24c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d02c      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	@ (8005b14 <HAL_DMA_Abort+0x250>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d027      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a24      	ldr	r2, [pc, #144]	@ (8005b18 <HAL_DMA_Abort+0x254>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a22      	ldr	r2, [pc, #136]	@ (8005b1c <HAL_DMA_Abort+0x258>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01d      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	@ (8005b20 <HAL_DMA_Abort+0x25c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b24 <HAL_DMA_Abort+0x260>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1e      	ldr	r2, [pc, #120]	@ (8005b28 <HAL_DMA_Abort+0x264>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b2c <HAL_DMA_Abort+0x268>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b30 <HAL_DMA_Abort+0x26c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <HAL_DMA_Abort+0x270>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d132      	bne.n	8005b38 <HAL_DMA_Abort+0x274>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e031      	b.n	8005b3a <HAL_DMA_Abort+0x276>
 8005ad6:	bf00      	nop
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
 8005b18:	58025408 	.word	0x58025408
 8005b1c:	5802541c 	.word	0x5802541c
 8005b20:	58025430 	.word	0x58025430
 8005b24:	58025444 	.word	0x58025444
 8005b28:	58025458 	.word	0x58025458
 8005b2c:	5802546c 	.word	0x5802546c
 8005b30:	58025480 	.word	0x58025480
 8005b34:	58025494 	.word	0x58025494
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6d      	ldr	r2, [pc, #436]	@ (8005d08 <HAL_DMA_Abort+0x444>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04a      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d0c <HAL_DMA_Abort+0x448>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d045      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a6a      	ldr	r2, [pc, #424]	@ (8005d10 <HAL_DMA_Abort+0x44c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d040      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a68      	ldr	r2, [pc, #416]	@ (8005d14 <HAL_DMA_Abort+0x450>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03b      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a67      	ldr	r2, [pc, #412]	@ (8005d18 <HAL_DMA_Abort+0x454>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d036      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a65      	ldr	r2, [pc, #404]	@ (8005d1c <HAL_DMA_Abort+0x458>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a64      	ldr	r2, [pc, #400]	@ (8005d20 <HAL_DMA_Abort+0x45c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02c      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a62      	ldr	r2, [pc, #392]	@ (8005d24 <HAL_DMA_Abort+0x460>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a61      	ldr	r2, [pc, #388]	@ (8005d28 <HAL_DMA_Abort+0x464>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5f      	ldr	r2, [pc, #380]	@ (8005d2c <HAL_DMA_Abort+0x468>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01d      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8005d30 <HAL_DMA_Abort+0x46c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a5c      	ldr	r2, [pc, #368]	@ (8005d34 <HAL_DMA_Abort+0x470>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5b      	ldr	r2, [pc, #364]	@ (8005d38 <HAL_DMA_Abort+0x474>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a59      	ldr	r2, [pc, #356]	@ (8005d3c <HAL_DMA_Abort+0x478>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a58      	ldr	r2, [pc, #352]	@ (8005d40 <HAL_DMA_Abort+0x47c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a56      	ldr	r2, [pc, #344]	@ (8005d44 <HAL_DMA_Abort+0x480>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <HAL_DMA_Abort+0x33c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e007      	b.n	8005c10 <HAL_DMA_Abort+0x34c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c10:	e013      	b.n	8005c3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c12:	f7fd fca3 	bl	800355c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b05      	cmp	r3, #5
 8005c1e:	d90c      	bls.n	8005c3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2203      	movs	r2, #3
 8005c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e12d      	b.n	8005e96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d08 <HAL_DMA_Abort+0x444>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d04a      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2d      	ldr	r2, [pc, #180]	@ (8005d0c <HAL_DMA_Abort+0x448>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d045      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d10 <HAL_DMA_Abort+0x44c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d040      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2a      	ldr	r2, [pc, #168]	@ (8005d14 <HAL_DMA_Abort+0x450>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d03b      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a29      	ldr	r2, [pc, #164]	@ (8005d18 <HAL_DMA_Abort+0x454>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d036      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a27      	ldr	r2, [pc, #156]	@ (8005d1c <HAL_DMA_Abort+0x458>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d031      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a26      	ldr	r2, [pc, #152]	@ (8005d20 <HAL_DMA_Abort+0x45c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d02c      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a24      	ldr	r2, [pc, #144]	@ (8005d24 <HAL_DMA_Abort+0x460>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d027      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a23      	ldr	r2, [pc, #140]	@ (8005d28 <HAL_DMA_Abort+0x464>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d022      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a21      	ldr	r2, [pc, #132]	@ (8005d2c <HAL_DMA_Abort+0x468>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01d      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a20      	ldr	r2, [pc, #128]	@ (8005d30 <HAL_DMA_Abort+0x46c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d018      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8005d34 <HAL_DMA_Abort+0x470>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <HAL_DMA_Abort+0x474>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d3c <HAL_DMA_Abort+0x478>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d40 <HAL_DMA_Abort+0x47c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a18      	ldr	r2, [pc, #96]	@ (8005d44 <HAL_DMA_Abort+0x480>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d101      	bne.n	8005cea <HAL_DMA_Abort+0x426>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <HAL_DMA_Abort+0x428>
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d02b      	beq.n	8005d48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	223f      	movs	r2, #63	@ 0x3f
 8005d00:	409a      	lsls	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	e02a      	b.n	8005d5e <HAL_DMA_Abort+0x49a>
 8005d08:	40020010 	.word	0x40020010
 8005d0c:	40020028 	.word	0x40020028
 8005d10:	40020040 	.word	0x40020040
 8005d14:	40020058 	.word	0x40020058
 8005d18:	40020070 	.word	0x40020070
 8005d1c:	40020088 	.word	0x40020088
 8005d20:	400200a0 	.word	0x400200a0
 8005d24:	400200b8 	.word	0x400200b8
 8005d28:	40020410 	.word	0x40020410
 8005d2c:	40020428 	.word	0x40020428
 8005d30:	40020440 	.word	0x40020440
 8005d34:	40020458 	.word	0x40020458
 8005d38:	40020470 	.word	0x40020470
 8005d3c:	40020488 	.word	0x40020488
 8005d40:	400204a0 	.word	0x400204a0
 8005d44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2201      	movs	r2, #1
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a4f      	ldr	r2, [pc, #316]	@ (8005ea0 <HAL_DMA_Abort+0x5dc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d072      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a4d      	ldr	r2, [pc, #308]	@ (8005ea4 <HAL_DMA_Abort+0x5e0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d06d      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a4c      	ldr	r2, [pc, #304]	@ (8005ea8 <HAL_DMA_Abort+0x5e4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d068      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a4a      	ldr	r2, [pc, #296]	@ (8005eac <HAL_DMA_Abort+0x5e8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d063      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a49      	ldr	r2, [pc, #292]	@ (8005eb0 <HAL_DMA_Abort+0x5ec>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d05e      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a47      	ldr	r2, [pc, #284]	@ (8005eb4 <HAL_DMA_Abort+0x5f0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d059      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a46      	ldr	r2, [pc, #280]	@ (8005eb8 <HAL_DMA_Abort+0x5f4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d054      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a44      	ldr	r2, [pc, #272]	@ (8005ebc <HAL_DMA_Abort+0x5f8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d04f      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a43      	ldr	r2, [pc, #268]	@ (8005ec0 <HAL_DMA_Abort+0x5fc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d04a      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a41      	ldr	r2, [pc, #260]	@ (8005ec4 <HAL_DMA_Abort+0x600>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d045      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a40      	ldr	r2, [pc, #256]	@ (8005ec8 <HAL_DMA_Abort+0x604>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d040      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8005ecc <HAL_DMA_Abort+0x608>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d03b      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3d      	ldr	r2, [pc, #244]	@ (8005ed0 <HAL_DMA_Abort+0x60c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d036      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ed4 <HAL_DMA_Abort+0x610>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d031      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed8 <HAL_DMA_Abort+0x614>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d02c      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a38      	ldr	r2, [pc, #224]	@ (8005edc <HAL_DMA_Abort+0x618>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d027      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a37      	ldr	r2, [pc, #220]	@ (8005ee0 <HAL_DMA_Abort+0x61c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d022      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a35      	ldr	r2, [pc, #212]	@ (8005ee4 <HAL_DMA_Abort+0x620>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01d      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a34      	ldr	r2, [pc, #208]	@ (8005ee8 <HAL_DMA_Abort+0x624>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d018      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a32      	ldr	r2, [pc, #200]	@ (8005eec <HAL_DMA_Abort+0x628>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a31      	ldr	r2, [pc, #196]	@ (8005ef0 <HAL_DMA_Abort+0x62c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2f      	ldr	r2, [pc, #188]	@ (8005ef4 <HAL_DMA_Abort+0x630>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ef8 <HAL_DMA_Abort+0x634>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2c      	ldr	r2, [pc, #176]	@ (8005efc <HAL_DMA_Abort+0x638>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d101      	bne.n	8005e52 <HAL_DMA_Abort+0x58e>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <HAL_DMA_Abort+0x590>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40020010 	.word	0x40020010
 8005ea4:	40020028 	.word	0x40020028
 8005ea8:	40020040 	.word	0x40020040
 8005eac:	40020058 	.word	0x40020058
 8005eb0:	40020070 	.word	0x40020070
 8005eb4:	40020088 	.word	0x40020088
 8005eb8:	400200a0 	.word	0x400200a0
 8005ebc:	400200b8 	.word	0x400200b8
 8005ec0:	40020410 	.word	0x40020410
 8005ec4:	40020428 	.word	0x40020428
 8005ec8:	40020440 	.word	0x40020440
 8005ecc:	40020458 	.word	0x40020458
 8005ed0:	40020470 	.word	0x40020470
 8005ed4:	40020488 	.word	0x40020488
 8005ed8:	400204a0 	.word	0x400204a0
 8005edc:	400204b8 	.word	0x400204b8
 8005ee0:	58025408 	.word	0x58025408
 8005ee4:	5802541c 	.word	0x5802541c
 8005ee8:	58025430 	.word	0x58025430
 8005eec:	58025444 	.word	0x58025444
 8005ef0:	58025458 	.word	0x58025458
 8005ef4:	5802546c 	.word	0x5802546c
 8005ef8:	58025480 	.word	0x58025480
 8005efc:	58025494 	.word	0x58025494

08005f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e237      	b.n	8006382 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d004      	beq.n	8005f28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2280      	movs	r2, #128	@ 0x80
 8005f22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e22c      	b.n	8006382 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5c      	ldr	r2, [pc, #368]	@ (80060a0 <HAL_DMA_Abort_IT+0x1a0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d04a      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5b      	ldr	r2, [pc, #364]	@ (80060a4 <HAL_DMA_Abort_IT+0x1a4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d045      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a59      	ldr	r2, [pc, #356]	@ (80060a8 <HAL_DMA_Abort_IT+0x1a8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d040      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a58      	ldr	r2, [pc, #352]	@ (80060ac <HAL_DMA_Abort_IT+0x1ac>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d03b      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a56      	ldr	r2, [pc, #344]	@ (80060b0 <HAL_DMA_Abort_IT+0x1b0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d036      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a55      	ldr	r2, [pc, #340]	@ (80060b4 <HAL_DMA_Abort_IT+0x1b4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d031      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a53      	ldr	r2, [pc, #332]	@ (80060b8 <HAL_DMA_Abort_IT+0x1b8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02c      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a52      	ldr	r2, [pc, #328]	@ (80060bc <HAL_DMA_Abort_IT+0x1bc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d027      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a50      	ldr	r2, [pc, #320]	@ (80060c0 <HAL_DMA_Abort_IT+0x1c0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4f      	ldr	r2, [pc, #316]	@ (80060c4 <HAL_DMA_Abort_IT+0x1c4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a4d      	ldr	r2, [pc, #308]	@ (80060c8 <HAL_DMA_Abort_IT+0x1c8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4c      	ldr	r2, [pc, #304]	@ (80060cc <HAL_DMA_Abort_IT+0x1cc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80060d0 <HAL_DMA_Abort_IT+0x1d0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a49      	ldr	r2, [pc, #292]	@ (80060d4 <HAL_DMA_Abort_IT+0x1d4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a47      	ldr	r2, [pc, #284]	@ (80060d8 <HAL_DMA_Abort_IT+0x1d8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a46      	ldr	r2, [pc, #280]	@ (80060dc <HAL_DMA_Abort_IT+0x1dc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <HAL_DMA_Abort_IT+0xcc>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <HAL_DMA_Abort_IT+0xce>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8086 	beq.w	80060e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80060a0 <HAL_DMA_Abort_IT+0x1a0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d04a      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2e      	ldr	r2, [pc, #184]	@ (80060a4 <HAL_DMA_Abort_IT+0x1a4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d045      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80060a8 <HAL_DMA_Abort_IT+0x1a8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d040      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80060ac <HAL_DMA_Abort_IT+0x1ac>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d03b      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a29      	ldr	r2, [pc, #164]	@ (80060b0 <HAL_DMA_Abort_IT+0x1b0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d036      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a28      	ldr	r2, [pc, #160]	@ (80060b4 <HAL_DMA_Abort_IT+0x1b4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d031      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a26      	ldr	r2, [pc, #152]	@ (80060b8 <HAL_DMA_Abort_IT+0x1b8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02c      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a25      	ldr	r2, [pc, #148]	@ (80060bc <HAL_DMA_Abort_IT+0x1bc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d027      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a23      	ldr	r2, [pc, #140]	@ (80060c0 <HAL_DMA_Abort_IT+0x1c0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d022      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a22      	ldr	r2, [pc, #136]	@ (80060c4 <HAL_DMA_Abort_IT+0x1c4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d01d      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a20      	ldr	r2, [pc, #128]	@ (80060c8 <HAL_DMA_Abort_IT+0x1c8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1f      	ldr	r2, [pc, #124]	@ (80060cc <HAL_DMA_Abort_IT+0x1cc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <HAL_DMA_Abort_IT+0x1d0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <HAL_DMA_Abort_IT+0x1d4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <HAL_DMA_Abort_IT+0x1d8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a19      	ldr	r2, [pc, #100]	@ (80060dc <HAL_DMA_Abort_IT+0x1dc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <HAL_DMA_Abort_IT+0x18e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e178      	b.n	8006380 <HAL_DMA_Abort_IT+0x480>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e16f      	b.n	8006380 <HAL_DMA_Abort_IT+0x480>
 80060a0:	40020010 	.word	0x40020010
 80060a4:	40020028 	.word	0x40020028
 80060a8:	40020040 	.word	0x40020040
 80060ac:	40020058 	.word	0x40020058
 80060b0:	40020070 	.word	0x40020070
 80060b4:	40020088 	.word	0x40020088
 80060b8:	400200a0 	.word	0x400200a0
 80060bc:	400200b8 	.word	0x400200b8
 80060c0:	40020410 	.word	0x40020410
 80060c4:	40020428 	.word	0x40020428
 80060c8:	40020440 	.word	0x40020440
 80060cc:	40020458 	.word	0x40020458
 80060d0:	40020470 	.word	0x40020470
 80060d4:	40020488 	.word	0x40020488
 80060d8:	400204a0 	.word	0x400204a0
 80060dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 020e 	bic.w	r2, r2, #14
 80060ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a6c      	ldr	r2, [pc, #432]	@ (80062a8 <HAL_DMA_Abort_IT+0x3a8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d04a      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a6b      	ldr	r2, [pc, #428]	@ (80062ac <HAL_DMA_Abort_IT+0x3ac>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d045      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a69      	ldr	r2, [pc, #420]	@ (80062b0 <HAL_DMA_Abort_IT+0x3b0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d040      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a68      	ldr	r2, [pc, #416]	@ (80062b4 <HAL_DMA_Abort_IT+0x3b4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d03b      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a66      	ldr	r2, [pc, #408]	@ (80062b8 <HAL_DMA_Abort_IT+0x3b8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d036      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a65      	ldr	r2, [pc, #404]	@ (80062bc <HAL_DMA_Abort_IT+0x3bc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d031      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a63      	ldr	r2, [pc, #396]	@ (80062c0 <HAL_DMA_Abort_IT+0x3c0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02c      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a62      	ldr	r2, [pc, #392]	@ (80062c4 <HAL_DMA_Abort_IT+0x3c4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d027      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a60      	ldr	r2, [pc, #384]	@ (80062c8 <HAL_DMA_Abort_IT+0x3c8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d022      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a5f      	ldr	r2, [pc, #380]	@ (80062cc <HAL_DMA_Abort_IT+0x3cc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d01d      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5d      	ldr	r2, [pc, #372]	@ (80062d0 <HAL_DMA_Abort_IT+0x3d0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d018      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a5c      	ldr	r2, [pc, #368]	@ (80062d4 <HAL_DMA_Abort_IT+0x3d4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5a      	ldr	r2, [pc, #360]	@ (80062d8 <HAL_DMA_Abort_IT+0x3d8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00e      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a59      	ldr	r2, [pc, #356]	@ (80062dc <HAL_DMA_Abort_IT+0x3dc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d009      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a57      	ldr	r2, [pc, #348]	@ (80062e0 <HAL_DMA_Abort_IT+0x3e0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a56      	ldr	r2, [pc, #344]	@ (80062e4 <HAL_DMA_Abort_IT+0x3e4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d108      	bne.n	80061a2 <HAL_DMA_Abort_IT+0x2a2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e007      	b.n	80061b2 <HAL_DMA_Abort_IT+0x2b2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3c      	ldr	r2, [pc, #240]	@ (80062a8 <HAL_DMA_Abort_IT+0x3a8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d072      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a3a      	ldr	r2, [pc, #232]	@ (80062ac <HAL_DMA_Abort_IT+0x3ac>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d06d      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a39      	ldr	r2, [pc, #228]	@ (80062b0 <HAL_DMA_Abort_IT+0x3b0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d068      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a37      	ldr	r2, [pc, #220]	@ (80062b4 <HAL_DMA_Abort_IT+0x3b4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d063      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a36      	ldr	r2, [pc, #216]	@ (80062b8 <HAL_DMA_Abort_IT+0x3b8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d05e      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a34      	ldr	r2, [pc, #208]	@ (80062bc <HAL_DMA_Abort_IT+0x3bc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d059      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a33      	ldr	r2, [pc, #204]	@ (80062c0 <HAL_DMA_Abort_IT+0x3c0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d054      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a31      	ldr	r2, [pc, #196]	@ (80062c4 <HAL_DMA_Abort_IT+0x3c4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04f      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a30      	ldr	r2, [pc, #192]	@ (80062c8 <HAL_DMA_Abort_IT+0x3c8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2e      	ldr	r2, [pc, #184]	@ (80062cc <HAL_DMA_Abort_IT+0x3cc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2d      	ldr	r2, [pc, #180]	@ (80062d0 <HAL_DMA_Abort_IT+0x3d0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2b      	ldr	r2, [pc, #172]	@ (80062d4 <HAL_DMA_Abort_IT+0x3d4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2a      	ldr	r2, [pc, #168]	@ (80062d8 <HAL_DMA_Abort_IT+0x3d8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a28      	ldr	r2, [pc, #160]	@ (80062dc <HAL_DMA_Abort_IT+0x3dc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a27      	ldr	r2, [pc, #156]	@ (80062e0 <HAL_DMA_Abort_IT+0x3e0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a25      	ldr	r2, [pc, #148]	@ (80062e4 <HAL_DMA_Abort_IT+0x3e4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a24      	ldr	r2, [pc, #144]	@ (80062e8 <HAL_DMA_Abort_IT+0x3e8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a22      	ldr	r2, [pc, #136]	@ (80062ec <HAL_DMA_Abort_IT+0x3ec>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a21      	ldr	r2, [pc, #132]	@ (80062f0 <HAL_DMA_Abort_IT+0x3f0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1f      	ldr	r2, [pc, #124]	@ (80062f4 <HAL_DMA_Abort_IT+0x3f4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1e      	ldr	r2, [pc, #120]	@ (80062f8 <HAL_DMA_Abort_IT+0x3f8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <HAL_DMA_Abort_IT+0x3fc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1b      	ldr	r2, [pc, #108]	@ (8006300 <HAL_DMA_Abort_IT+0x400>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a19      	ldr	r2, [pc, #100]	@ (8006304 <HAL_DMA_Abort_IT+0x404>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d132      	bne.n	8006308 <HAL_DMA_Abort_IT+0x408>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e031      	b.n	800630a <HAL_DMA_Abort_IT+0x40a>
 80062a6:	bf00      	nop
 80062a8:	40020010 	.word	0x40020010
 80062ac:	40020028 	.word	0x40020028
 80062b0:	40020040 	.word	0x40020040
 80062b4:	40020058 	.word	0x40020058
 80062b8:	40020070 	.word	0x40020070
 80062bc:	40020088 	.word	0x40020088
 80062c0:	400200a0 	.word	0x400200a0
 80062c4:	400200b8 	.word	0x400200b8
 80062c8:	40020410 	.word	0x40020410
 80062cc:	40020428 	.word	0x40020428
 80062d0:	40020440 	.word	0x40020440
 80062d4:	40020458 	.word	0x40020458
 80062d8:	40020470 	.word	0x40020470
 80062dc:	40020488 	.word	0x40020488
 80062e0:	400204a0 	.word	0x400204a0
 80062e4:	400204b8 	.word	0x400204b8
 80062e8:	58025408 	.word	0x58025408
 80062ec:	5802541c 	.word	0x5802541c
 80062f0:	58025430 	.word	0x58025430
 80062f4:	58025444 	.word	0x58025444
 80062f8:	58025458 	.word	0x58025458
 80062fc:	5802546c 	.word	0x5802546c
 8006300:	58025480 	.word	0x58025480
 8006304:	58025494 	.word	0x58025494
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d028      	beq.n	8006360 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800631c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006322:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2201      	movs	r2, #1
 800632e:	409a      	lsls	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800633c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006354:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800635e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop

0800638c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	@ 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006398:	4b67      	ldr	r3, [pc, #412]	@ (8006538 <HAL_DMA_IRQHandler+0x1ac>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a67      	ldr	r2, [pc, #412]	@ (800653c <HAL_DMA_IRQHandler+0x1b0>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	0a9b      	lsrs	r3, r3, #10
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5f      	ldr	r2, [pc, #380]	@ (8006540 <HAL_DMA_IRQHandler+0x1b4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d04a      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006544 <HAL_DMA_IRQHandler+0x1b8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d045      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5c      	ldr	r2, [pc, #368]	@ (8006548 <HAL_DMA_IRQHandler+0x1bc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d040      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5a      	ldr	r2, [pc, #360]	@ (800654c <HAL_DMA_IRQHandler+0x1c0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d03b      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a59      	ldr	r2, [pc, #356]	@ (8006550 <HAL_DMA_IRQHandler+0x1c4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d036      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a57      	ldr	r2, [pc, #348]	@ (8006554 <HAL_DMA_IRQHandler+0x1c8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d031      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a56      	ldr	r2, [pc, #344]	@ (8006558 <HAL_DMA_IRQHandler+0x1cc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d02c      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a54      	ldr	r2, [pc, #336]	@ (800655c <HAL_DMA_IRQHandler+0x1d0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d027      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a53      	ldr	r2, [pc, #332]	@ (8006560 <HAL_DMA_IRQHandler+0x1d4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d022      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a51      	ldr	r2, [pc, #324]	@ (8006564 <HAL_DMA_IRQHandler+0x1d8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01d      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a50      	ldr	r2, [pc, #320]	@ (8006568 <HAL_DMA_IRQHandler+0x1dc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d018      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a4e      	ldr	r2, [pc, #312]	@ (800656c <HAL_DMA_IRQHandler+0x1e0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a4d      	ldr	r2, [pc, #308]	@ (8006570 <HAL_DMA_IRQHandler+0x1e4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a4b      	ldr	r2, [pc, #300]	@ (8006574 <HAL_DMA_IRQHandler+0x1e8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4a      	ldr	r2, [pc, #296]	@ (8006578 <HAL_DMA_IRQHandler+0x1ec>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a48      	ldr	r2, [pc, #288]	@ (800657c <HAL_DMA_IRQHandler+0x1f0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d101      	bne.n	8006462 <HAL_DMA_IRQHandler+0xd6>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_DMA_IRQHandler+0xd8>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 842b 	beq.w	8006cc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2208      	movs	r2, #8
 8006474:	409a      	lsls	r2, r3
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80a2 	beq.w	80065c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2e      	ldr	r2, [pc, #184]	@ (8006540 <HAL_DMA_IRQHandler+0x1b4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d04a      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a2d      	ldr	r2, [pc, #180]	@ (8006544 <HAL_DMA_IRQHandler+0x1b8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d045      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2b      	ldr	r2, [pc, #172]	@ (8006548 <HAL_DMA_IRQHandler+0x1bc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d040      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2a      	ldr	r2, [pc, #168]	@ (800654c <HAL_DMA_IRQHandler+0x1c0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d03b      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a28      	ldr	r2, [pc, #160]	@ (8006550 <HAL_DMA_IRQHandler+0x1c4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d036      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a27      	ldr	r2, [pc, #156]	@ (8006554 <HAL_DMA_IRQHandler+0x1c8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d031      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a25      	ldr	r2, [pc, #148]	@ (8006558 <HAL_DMA_IRQHandler+0x1cc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d02c      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a24      	ldr	r2, [pc, #144]	@ (800655c <HAL_DMA_IRQHandler+0x1d0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d027      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a22      	ldr	r2, [pc, #136]	@ (8006560 <HAL_DMA_IRQHandler+0x1d4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d022      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a21      	ldr	r2, [pc, #132]	@ (8006564 <HAL_DMA_IRQHandler+0x1d8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d01d      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006568 <HAL_DMA_IRQHandler+0x1dc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1e      	ldr	r2, [pc, #120]	@ (800656c <HAL_DMA_IRQHandler+0x1e0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006570 <HAL_DMA_IRQHandler+0x1e4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <HAL_DMA_IRQHandler+0x1e8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a19      	ldr	r2, [pc, #100]	@ (8006578 <HAL_DMA_IRQHandler+0x1ec>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a18      	ldr	r2, [pc, #96]	@ (800657c <HAL_DMA_IRQHandler+0x1f0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d12f      	bne.n	8006580 <HAL_DMA_IRQHandler+0x1f4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	e02e      	b.n	8006594 <HAL_DMA_IRQHandler+0x208>
 8006536:	bf00      	nop
 8006538:	24000004 	.word	0x24000004
 800653c:	1b4e81b5 	.word	0x1b4e81b5
 8006540:	40020010 	.word	0x40020010
 8006544:	40020028 	.word	0x40020028
 8006548:	40020040 	.word	0x40020040
 800654c:	40020058 	.word	0x40020058
 8006550:	40020070 	.word	0x40020070
 8006554:	40020088 	.word	0x40020088
 8006558:	400200a0 	.word	0x400200a0
 800655c:	400200b8 	.word	0x400200b8
 8006560:	40020410 	.word	0x40020410
 8006564:	40020428 	.word	0x40020428
 8006568:	40020440 	.word	0x40020440
 800656c:	40020458 	.word	0x40020458
 8006570:	40020470 	.word	0x40020470
 8006574:	40020488 	.word	0x40020488
 8006578:	400204a0 	.word	0x400204a0
 800657c:	400204b8 	.word	0x400204b8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf14      	ite	ne
 800658e:	2301      	movne	r3, #1
 8006590:	2300      	moveq	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d015      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0204 	bic.w	r2, r2, #4
 80065a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	2208      	movs	r2, #8
 80065b2:	409a      	lsls	r2, r3
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065bc:	f043 0201 	orr.w	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d06e      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a69      	ldr	r2, [pc, #420]	@ (8006784 <HAL_DMA_IRQHandler+0x3f8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d04a      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a67      	ldr	r2, [pc, #412]	@ (8006788 <HAL_DMA_IRQHandler+0x3fc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d045      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a66      	ldr	r2, [pc, #408]	@ (800678c <HAL_DMA_IRQHandler+0x400>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d040      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a64      	ldr	r2, [pc, #400]	@ (8006790 <HAL_DMA_IRQHandler+0x404>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d03b      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a63      	ldr	r2, [pc, #396]	@ (8006794 <HAL_DMA_IRQHandler+0x408>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d036      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a61      	ldr	r2, [pc, #388]	@ (8006798 <HAL_DMA_IRQHandler+0x40c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d031      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a60      	ldr	r2, [pc, #384]	@ (800679c <HAL_DMA_IRQHandler+0x410>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d02c      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5e      	ldr	r2, [pc, #376]	@ (80067a0 <HAL_DMA_IRQHandler+0x414>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d027      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a5d      	ldr	r2, [pc, #372]	@ (80067a4 <HAL_DMA_IRQHandler+0x418>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d022      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5b      	ldr	r2, [pc, #364]	@ (80067a8 <HAL_DMA_IRQHandler+0x41c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01d      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a5a      	ldr	r2, [pc, #360]	@ (80067ac <HAL_DMA_IRQHandler+0x420>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d018      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a58      	ldr	r2, [pc, #352]	@ (80067b0 <HAL_DMA_IRQHandler+0x424>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a57      	ldr	r2, [pc, #348]	@ (80067b4 <HAL_DMA_IRQHandler+0x428>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00e      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a55      	ldr	r2, [pc, #340]	@ (80067b8 <HAL_DMA_IRQHandler+0x42c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a54      	ldr	r2, [pc, #336]	@ (80067bc <HAL_DMA_IRQHandler+0x430>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a52      	ldr	r2, [pc, #328]	@ (80067c0 <HAL_DMA_IRQHandler+0x434>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d10a      	bne.n	8006690 <HAL_DMA_IRQHandler+0x304>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006684:	2b00      	cmp	r3, #0
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e003      	b.n	8006698 <HAL_DMA_IRQHandler+0x30c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	2201      	movs	r2, #1
 80066a6:	409a      	lsls	r2, r3
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b0:	f043 0202 	orr.w	r2, r3, #2
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2204      	movs	r2, #4
 80066c2:	409a      	lsls	r2, r3
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 808f 	beq.w	80067ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006784 <HAL_DMA_IRQHandler+0x3f8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d04a      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006788 <HAL_DMA_IRQHandler+0x3fc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d045      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a29      	ldr	r2, [pc, #164]	@ (800678c <HAL_DMA_IRQHandler+0x400>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d040      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a27      	ldr	r2, [pc, #156]	@ (8006790 <HAL_DMA_IRQHandler+0x404>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d03b      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a26      	ldr	r2, [pc, #152]	@ (8006794 <HAL_DMA_IRQHandler+0x408>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d036      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a24      	ldr	r2, [pc, #144]	@ (8006798 <HAL_DMA_IRQHandler+0x40c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d031      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a23      	ldr	r2, [pc, #140]	@ (800679c <HAL_DMA_IRQHandler+0x410>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d02c      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a21      	ldr	r2, [pc, #132]	@ (80067a0 <HAL_DMA_IRQHandler+0x414>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d027      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a20      	ldr	r2, [pc, #128]	@ (80067a4 <HAL_DMA_IRQHandler+0x418>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d022      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1e      	ldr	r2, [pc, #120]	@ (80067a8 <HAL_DMA_IRQHandler+0x41c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1d      	ldr	r2, [pc, #116]	@ (80067ac <HAL_DMA_IRQHandler+0x420>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1b      	ldr	r2, [pc, #108]	@ (80067b0 <HAL_DMA_IRQHandler+0x424>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1a      	ldr	r2, [pc, #104]	@ (80067b4 <HAL_DMA_IRQHandler+0x428>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	@ (80067b8 <HAL_DMA_IRQHandler+0x42c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a17      	ldr	r2, [pc, #92]	@ (80067bc <HAL_DMA_IRQHandler+0x430>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a15      	ldr	r2, [pc, #84]	@ (80067c0 <HAL_DMA_IRQHandler+0x434>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d12a      	bne.n	80067c4 <HAL_DMA_IRQHandler+0x438>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e023      	b.n	80067cc <HAL_DMA_IRQHandler+0x440>
 8006784:	40020010 	.word	0x40020010
 8006788:	40020028 	.word	0x40020028
 800678c:	40020040 	.word	0x40020040
 8006790:	40020058 	.word	0x40020058
 8006794:	40020070 	.word	0x40020070
 8006798:	40020088 	.word	0x40020088
 800679c:	400200a0 	.word	0x400200a0
 80067a0:	400200b8 	.word	0x400200b8
 80067a4:	40020410 	.word	0x40020410
 80067a8:	40020428 	.word	0x40020428
 80067ac:	40020440 	.word	0x40020440
 80067b0:	40020458 	.word	0x40020458
 80067b4:	40020470 	.word	0x40020470
 80067b8:	40020488 	.word	0x40020488
 80067bc:	400204a0 	.word	0x400204a0
 80067c0:	400204b8 	.word	0x400204b8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00d      	beq.n	80067ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2204      	movs	r2, #4
 80067da:	409a      	lsls	r2, r3
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e4:	f043 0204 	orr.w	r2, r3, #4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	2210      	movs	r2, #16
 80067f6:	409a      	lsls	r2, r3
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	4013      	ands	r3, r2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80a6 	beq.w	800694e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a85      	ldr	r2, [pc, #532]	@ (8006a1c <HAL_DMA_IRQHandler+0x690>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d04a      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a83      	ldr	r2, [pc, #524]	@ (8006a20 <HAL_DMA_IRQHandler+0x694>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d045      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a82      	ldr	r2, [pc, #520]	@ (8006a24 <HAL_DMA_IRQHandler+0x698>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d040      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a80      	ldr	r2, [pc, #512]	@ (8006a28 <HAL_DMA_IRQHandler+0x69c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d03b      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7f      	ldr	r2, [pc, #508]	@ (8006a2c <HAL_DMA_IRQHandler+0x6a0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d036      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a7d      	ldr	r2, [pc, #500]	@ (8006a30 <HAL_DMA_IRQHandler+0x6a4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d031      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7c      	ldr	r2, [pc, #496]	@ (8006a34 <HAL_DMA_IRQHandler+0x6a8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d02c      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7a      	ldr	r2, [pc, #488]	@ (8006a38 <HAL_DMA_IRQHandler+0x6ac>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d027      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a79      	ldr	r2, [pc, #484]	@ (8006a3c <HAL_DMA_IRQHandler+0x6b0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a77      	ldr	r2, [pc, #476]	@ (8006a40 <HAL_DMA_IRQHandler+0x6b4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01d      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a76      	ldr	r2, [pc, #472]	@ (8006a44 <HAL_DMA_IRQHandler+0x6b8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d018      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a74      	ldr	r2, [pc, #464]	@ (8006a48 <HAL_DMA_IRQHandler+0x6bc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a73      	ldr	r2, [pc, #460]	@ (8006a4c <HAL_DMA_IRQHandler+0x6c0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00e      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a71      	ldr	r2, [pc, #452]	@ (8006a50 <HAL_DMA_IRQHandler+0x6c4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d009      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a70      	ldr	r2, [pc, #448]	@ (8006a54 <HAL_DMA_IRQHandler+0x6c8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a6e      	ldr	r2, [pc, #440]	@ (8006a58 <HAL_DMA_IRQHandler+0x6cc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10a      	bne.n	80068b8 <HAL_DMA_IRQHandler+0x52c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf14      	ite	ne
 80068b0:	2301      	movne	r3, #1
 80068b2:	2300      	moveq	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e009      	b.n	80068cc <HAL_DMA_IRQHandler+0x540>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bf14      	ite	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2300      	moveq	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03e      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2210      	movs	r2, #16
 80068da:	409a      	lsls	r2, r3
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d018      	beq.n	8006920 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d024      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
 800690c:	e01f      	b.n	800694e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01b      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
 800691e:	e016      	b.n	800694e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0208 	bic.w	r2, r2, #8
 800693c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2220      	movs	r2, #32
 8006958:	409a      	lsls	r2, r3
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	4013      	ands	r3, r2
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8110 	beq.w	8006b84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2c      	ldr	r2, [pc, #176]	@ (8006a1c <HAL_DMA_IRQHandler+0x690>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d04a      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2b      	ldr	r2, [pc, #172]	@ (8006a20 <HAL_DMA_IRQHandler+0x694>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d045      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a29      	ldr	r2, [pc, #164]	@ (8006a24 <HAL_DMA_IRQHandler+0x698>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d040      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a28      	ldr	r2, [pc, #160]	@ (8006a28 <HAL_DMA_IRQHandler+0x69c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d03b      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a26      	ldr	r2, [pc, #152]	@ (8006a2c <HAL_DMA_IRQHandler+0x6a0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d036      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a25      	ldr	r2, [pc, #148]	@ (8006a30 <HAL_DMA_IRQHandler+0x6a4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d031      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a23      	ldr	r2, [pc, #140]	@ (8006a34 <HAL_DMA_IRQHandler+0x6a8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d02c      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a22      	ldr	r2, [pc, #136]	@ (8006a38 <HAL_DMA_IRQHandler+0x6ac>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d027      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a20      	ldr	r2, [pc, #128]	@ (8006a3c <HAL_DMA_IRQHandler+0x6b0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d022      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a40 <HAL_DMA_IRQHandler+0x6b4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d01d      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a44 <HAL_DMA_IRQHandler+0x6b8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006a48 <HAL_DMA_IRQHandler+0x6bc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1a      	ldr	r2, [pc, #104]	@ (8006a4c <HAL_DMA_IRQHandler+0x6c0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00e      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a19      	ldr	r2, [pc, #100]	@ (8006a50 <HAL_DMA_IRQHandler+0x6c4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a17      	ldr	r2, [pc, #92]	@ (8006a54 <HAL_DMA_IRQHandler+0x6c8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a16      	ldr	r2, [pc, #88]	@ (8006a58 <HAL_DMA_IRQHandler+0x6cc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d12b      	bne.n	8006a5c <HAL_DMA_IRQHandler+0x6d0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bf14      	ite	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	2300      	moveq	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e02a      	b.n	8006a70 <HAL_DMA_IRQHandler+0x6e4>
 8006a1a:	bf00      	nop
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	2300      	moveq	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8087 	beq.w	8006b84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2220      	movs	r2, #32
 8006a80:	409a      	lsls	r2, r3
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d139      	bne.n	8006b06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0216 	bic.w	r2, r2, #22
 8006aa0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695a      	ldr	r2, [r3, #20]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ab0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <HAL_DMA_IRQHandler+0x736>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0208 	bic.w	r2, r2, #8
 8006ad0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	223f      	movs	r2, #63	@ 0x3f
 8006adc:	409a      	lsls	r2, r3
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 834a 	beq.w	8007190 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
          }
          return;
 8006b04:	e344      	b.n	8007190 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d018      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
 8006b32:	e027      	b.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d023      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
 8006b44:	e01e      	b.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0210 	bic.w	r2, r2, #16
 8006b62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8306 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 8088 	beq.w	8006cac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a7a      	ldr	r2, [pc, #488]	@ (8006d94 <HAL_DMA_IRQHandler+0xa08>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d04a      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a79      	ldr	r2, [pc, #484]	@ (8006d98 <HAL_DMA_IRQHandler+0xa0c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d045      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a77      	ldr	r2, [pc, #476]	@ (8006d9c <HAL_DMA_IRQHandler+0xa10>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d040      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a76      	ldr	r2, [pc, #472]	@ (8006da0 <HAL_DMA_IRQHandler+0xa14>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d03b      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a74      	ldr	r2, [pc, #464]	@ (8006da4 <HAL_DMA_IRQHandler+0xa18>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d036      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a73      	ldr	r2, [pc, #460]	@ (8006da8 <HAL_DMA_IRQHandler+0xa1c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d031      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a71      	ldr	r2, [pc, #452]	@ (8006dac <HAL_DMA_IRQHandler+0xa20>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d02c      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a70      	ldr	r2, [pc, #448]	@ (8006db0 <HAL_DMA_IRQHandler+0xa24>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d027      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8006db4 <HAL_DMA_IRQHandler+0xa28>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d022      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6d      	ldr	r2, [pc, #436]	@ (8006db8 <HAL_DMA_IRQHandler+0xa2c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d01d      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a6b      	ldr	r2, [pc, #428]	@ (8006dbc <HAL_DMA_IRQHandler+0xa30>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d018      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a6a      	ldr	r2, [pc, #424]	@ (8006dc0 <HAL_DMA_IRQHandler+0xa34>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d013      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a68      	ldr	r2, [pc, #416]	@ (8006dc4 <HAL_DMA_IRQHandler+0xa38>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00e      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a67      	ldr	r2, [pc, #412]	@ (8006dc8 <HAL_DMA_IRQHandler+0xa3c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a65      	ldr	r2, [pc, #404]	@ (8006dcc <HAL_DMA_IRQHandler+0xa40>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a64      	ldr	r2, [pc, #400]	@ (8006dd0 <HAL_DMA_IRQHandler+0xa44>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d108      	bne.n	8006c56 <HAL_DMA_IRQHandler+0x8ca>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e007      	b.n	8006c66 <HAL_DMA_IRQHandler+0x8da>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d307      	bcc.n	8006c82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f2      	bne.n	8006c66 <HAL_DMA_IRQHandler+0x8da>
 8006c80:	e000      	b.n	8006c84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2203      	movs	r2, #3
 8006c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006c9a:	e003      	b.n	8006ca4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8272 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
 8006cbe:	e26c      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a43      	ldr	r2, [pc, #268]	@ (8006dd4 <HAL_DMA_IRQHandler+0xa48>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a42      	ldr	r2, [pc, #264]	@ (8006dd8 <HAL_DMA_IRQHandler+0xa4c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01d      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a40      	ldr	r2, [pc, #256]	@ (8006ddc <HAL_DMA_IRQHandler+0xa50>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8006de0 <HAL_DMA_IRQHandler+0xa54>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a3d      	ldr	r2, [pc, #244]	@ (8006de4 <HAL_DMA_IRQHandler+0xa58>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8006de8 <HAL_DMA_IRQHandler+0xa5c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3a      	ldr	r2, [pc, #232]	@ (8006dec <HAL_DMA_IRQHandler+0xa60>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a39      	ldr	r2, [pc, #228]	@ (8006df0 <HAL_DMA_IRQHandler+0xa64>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <HAL_DMA_IRQHandler+0x988>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_DMA_IRQHandler+0x98a>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 823f 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80cd 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xb48>
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80c7 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2204      	movs	r2, #4
 8006d50:	409a      	lsls	r2, r3
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d049      	beq.n	8006df4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8210 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d7c:	e20a      	b.n	8007194 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8206 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d90:	e200      	b.n	8007194 <HAL_DMA_IRQHandler+0xe08>
 8006d92:	bf00      	nop
 8006d94:	40020010 	.word	0x40020010
 8006d98:	40020028 	.word	0x40020028
 8006d9c:	40020040 	.word	0x40020040
 8006da0:	40020058 	.word	0x40020058
 8006da4:	40020070 	.word	0x40020070
 8006da8:	40020088 	.word	0x40020088
 8006dac:	400200a0 	.word	0x400200a0
 8006db0:	400200b8 	.word	0x400200b8
 8006db4:	40020410 	.word	0x40020410
 8006db8:	40020428 	.word	0x40020428
 8006dbc:	40020440 	.word	0x40020440
 8006dc0:	40020458 	.word	0x40020458
 8006dc4:	40020470 	.word	0x40020470
 8006dc8:	40020488 	.word	0x40020488
 8006dcc:	400204a0 	.word	0x400204a0
 8006dd0:	400204b8 	.word	0x400204b8
 8006dd4:	58025408 	.word	0x58025408
 8006dd8:	5802541c 	.word	0x5802541c
 8006ddc:	58025430 	.word	0x58025430
 8006de0:	58025444 	.word	0x58025444
 8006de4:	58025458 	.word	0x58025458
 8006de8:	5802546c 	.word	0x5802546c
 8006dec:	58025480 	.word	0x58025480
 8006df0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d160      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a7f      	ldr	r2, [pc, #508]	@ (8007000 <HAL_DMA_IRQHandler+0xc74>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d04a      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a7d      	ldr	r2, [pc, #500]	@ (8007004 <HAL_DMA_IRQHandler+0xc78>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d045      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a7c      	ldr	r2, [pc, #496]	@ (8007008 <HAL_DMA_IRQHandler+0xc7c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d040      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a7a      	ldr	r2, [pc, #488]	@ (800700c <HAL_DMA_IRQHandler+0xc80>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d03b      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a79      	ldr	r2, [pc, #484]	@ (8007010 <HAL_DMA_IRQHandler+0xc84>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d036      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a77      	ldr	r2, [pc, #476]	@ (8007014 <HAL_DMA_IRQHandler+0xc88>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d031      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a76      	ldr	r2, [pc, #472]	@ (8007018 <HAL_DMA_IRQHandler+0xc8c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d02c      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a74      	ldr	r2, [pc, #464]	@ (800701c <HAL_DMA_IRQHandler+0xc90>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d027      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a73      	ldr	r2, [pc, #460]	@ (8007020 <HAL_DMA_IRQHandler+0xc94>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d022      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a71      	ldr	r2, [pc, #452]	@ (8007024 <HAL_DMA_IRQHandler+0xc98>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01d      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a70      	ldr	r2, [pc, #448]	@ (8007028 <HAL_DMA_IRQHandler+0xc9c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d018      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a6e      	ldr	r2, [pc, #440]	@ (800702c <HAL_DMA_IRQHandler+0xca0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a6d      	ldr	r2, [pc, #436]	@ (8007030 <HAL_DMA_IRQHandler+0xca4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a6b      	ldr	r2, [pc, #428]	@ (8007034 <HAL_DMA_IRQHandler+0xca8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a6a      	ldr	r2, [pc, #424]	@ (8007038 <HAL_DMA_IRQHandler+0xcac>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a68      	ldr	r2, [pc, #416]	@ (800703c <HAL_DMA_IRQHandler+0xcb0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d108      	bne.n	8006eb0 <HAL_DMA_IRQHandler+0xb24>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0208 	bic.w	r2, r2, #8
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e007      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xb34>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0204 	bic.w	r2, r2, #4
 8006ebe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8165 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ed2:	e15f      	b.n	8007194 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2202      	movs	r2, #2
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80c5 	beq.w	8007074 <HAL_DMA_IRQHandler+0xce8>
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80bf 	beq.w	8007074 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2202      	movs	r2, #2
 8006f00:	409a      	lsls	r2, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d018      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d109      	bne.n	8006f2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 813a 	beq.w	8007198 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f2c:	e134      	b.n	8007198 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8130 	beq.w	8007198 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f40:	e12a      	b.n	8007198 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f040 8089 	bne.w	8007060 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2b      	ldr	r2, [pc, #172]	@ (8007000 <HAL_DMA_IRQHandler+0xc74>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d04a      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a29      	ldr	r2, [pc, #164]	@ (8007004 <HAL_DMA_IRQHandler+0xc78>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d045      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a28      	ldr	r2, [pc, #160]	@ (8007008 <HAL_DMA_IRQHandler+0xc7c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d040      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a26      	ldr	r2, [pc, #152]	@ (800700c <HAL_DMA_IRQHandler+0xc80>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d03b      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a25      	ldr	r2, [pc, #148]	@ (8007010 <HAL_DMA_IRQHandler+0xc84>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d036      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a23      	ldr	r2, [pc, #140]	@ (8007014 <HAL_DMA_IRQHandler+0xc88>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d031      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a22      	ldr	r2, [pc, #136]	@ (8007018 <HAL_DMA_IRQHandler+0xc8c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d02c      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a20      	ldr	r2, [pc, #128]	@ (800701c <HAL_DMA_IRQHandler+0xc90>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d027      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <HAL_DMA_IRQHandler+0xc94>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d022      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1d      	ldr	r2, [pc, #116]	@ (8007024 <HAL_DMA_IRQHandler+0xc98>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01d      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8007028 <HAL_DMA_IRQHandler+0xc9c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d018      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800702c <HAL_DMA_IRQHandler+0xca0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a19      	ldr	r2, [pc, #100]	@ (8007030 <HAL_DMA_IRQHandler+0xca4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00e      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a17      	ldr	r2, [pc, #92]	@ (8007034 <HAL_DMA_IRQHandler+0xca8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a16      	ldr	r2, [pc, #88]	@ (8007038 <HAL_DMA_IRQHandler+0xcac>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d004      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	@ (800703c <HAL_DMA_IRQHandler+0xcb0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d128      	bne.n	8007040 <HAL_DMA_IRQHandler+0xcb4>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0214 	bic.w	r2, r2, #20
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e027      	b.n	8007050 <HAL_DMA_IRQHandler+0xcc4>
 8007000:	40020010 	.word	0x40020010
 8007004:	40020028 	.word	0x40020028
 8007008:	40020040 	.word	0x40020040
 800700c:	40020058 	.word	0x40020058
 8007010:	40020070 	.word	0x40020070
 8007014:	40020088 	.word	0x40020088
 8007018:	400200a0 	.word	0x400200a0
 800701c:	400200b8 	.word	0x400200b8
 8007020:	40020410 	.word	0x40020410
 8007024:	40020428 	.word	0x40020428
 8007028:	40020440 	.word	0x40020440
 800702c:	40020458 	.word	0x40020458
 8007030:	40020470 	.word	0x40020470
 8007034:	40020488 	.word	0x40020488
 8007038:	400204a0 	.word	0x400204a0
 800703c:	400204b8 	.word	0x400204b8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 020a 	bic.w	r2, r2, #10
 800704e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 8097 	beq.w	8007198 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007072:	e091      	b.n	8007198 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2208      	movs	r2, #8
 800707e:	409a      	lsls	r2, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8088 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8082 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a41      	ldr	r2, [pc, #260]	@ (80071a0 <HAL_DMA_IRQHandler+0xe14>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04a      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a3f      	ldr	r2, [pc, #252]	@ (80071a4 <HAL_DMA_IRQHandler+0xe18>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d045      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a3e      	ldr	r2, [pc, #248]	@ (80071a8 <HAL_DMA_IRQHandler+0xe1c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d040      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a3c      	ldr	r2, [pc, #240]	@ (80071ac <HAL_DMA_IRQHandler+0xe20>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a3b      	ldr	r2, [pc, #236]	@ (80071b0 <HAL_DMA_IRQHandler+0xe24>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d036      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a39      	ldr	r2, [pc, #228]	@ (80071b4 <HAL_DMA_IRQHandler+0xe28>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a38      	ldr	r2, [pc, #224]	@ (80071b8 <HAL_DMA_IRQHandler+0xe2c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02c      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a36      	ldr	r2, [pc, #216]	@ (80071bc <HAL_DMA_IRQHandler+0xe30>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d027      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a35      	ldr	r2, [pc, #212]	@ (80071c0 <HAL_DMA_IRQHandler+0xe34>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a33      	ldr	r2, [pc, #204]	@ (80071c4 <HAL_DMA_IRQHandler+0xe38>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a32      	ldr	r2, [pc, #200]	@ (80071c8 <HAL_DMA_IRQHandler+0xe3c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a30      	ldr	r2, [pc, #192]	@ (80071cc <HAL_DMA_IRQHandler+0xe40>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2f      	ldr	r2, [pc, #188]	@ (80071d0 <HAL_DMA_IRQHandler+0xe44>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2d      	ldr	r2, [pc, #180]	@ (80071d4 <HAL_DMA_IRQHandler+0xe48>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2c      	ldr	r2, [pc, #176]	@ (80071d8 <HAL_DMA_IRQHandler+0xe4c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2a      	ldr	r2, [pc, #168]	@ (80071dc <HAL_DMA_IRQHandler+0xe50>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <HAL_DMA_IRQHandler+0xdbc>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 021c 	bic.w	r2, r2, #28
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e007      	b.n	8007158 <HAL_DMA_IRQHandler+0xdcc>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 020e 	bic.w	r2, r2, #14
 8007156:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	2201      	movs	r2, #1
 8007162:	409a      	lsls	r2, r3
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
 800718e:	e004      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007190:	bf00      	nop
 8007192:	e002      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007194:	bf00      	nop
 8007196:	e000      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007198:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800719a:	3728      	adds	r7, #40	@ 0x28
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40020010 	.word	0x40020010
 80071a4:	40020028 	.word	0x40020028
 80071a8:	40020040 	.word	0x40020040
 80071ac:	40020058 	.word	0x40020058
 80071b0:	40020070 	.word	0x40020070
 80071b4:	40020088 	.word	0x40020088
 80071b8:	400200a0 	.word	0x400200a0
 80071bc:	400200b8 	.word	0x400200b8
 80071c0:	40020410 	.word	0x40020410
 80071c4:	40020428 	.word	0x40020428
 80071c8:	40020440 	.word	0x40020440
 80071cc:	40020458 	.word	0x40020458
 80071d0:	40020470 	.word	0x40020470
 80071d4:	40020488 	.word	0x40020488
 80071d8:	400204a0 	.word	0x400204a0
 80071dc:	400204b8 	.word	0x400204b8

080071e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007210:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a7f      	ldr	r2, [pc, #508]	@ (8007414 <DMA_SetConfig+0x21c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d072      	beq.n	8007302 <DMA_SetConfig+0x10a>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a7d      	ldr	r2, [pc, #500]	@ (8007418 <DMA_SetConfig+0x220>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d06d      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a7c      	ldr	r2, [pc, #496]	@ (800741c <DMA_SetConfig+0x224>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d068      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a7a      	ldr	r2, [pc, #488]	@ (8007420 <DMA_SetConfig+0x228>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d063      	beq.n	8007302 <DMA_SetConfig+0x10a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a79      	ldr	r2, [pc, #484]	@ (8007424 <DMA_SetConfig+0x22c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d05e      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a77      	ldr	r2, [pc, #476]	@ (8007428 <DMA_SetConfig+0x230>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d059      	beq.n	8007302 <DMA_SetConfig+0x10a>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a76      	ldr	r2, [pc, #472]	@ (800742c <DMA_SetConfig+0x234>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d054      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a74      	ldr	r2, [pc, #464]	@ (8007430 <DMA_SetConfig+0x238>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d04f      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a73      	ldr	r2, [pc, #460]	@ (8007434 <DMA_SetConfig+0x23c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d04a      	beq.n	8007302 <DMA_SetConfig+0x10a>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a71      	ldr	r2, [pc, #452]	@ (8007438 <DMA_SetConfig+0x240>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d045      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a70      	ldr	r2, [pc, #448]	@ (800743c <DMA_SetConfig+0x244>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d040      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a6e      	ldr	r2, [pc, #440]	@ (8007440 <DMA_SetConfig+0x248>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d03b      	beq.n	8007302 <DMA_SetConfig+0x10a>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a6d      	ldr	r2, [pc, #436]	@ (8007444 <DMA_SetConfig+0x24c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d036      	beq.n	8007302 <DMA_SetConfig+0x10a>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a6b      	ldr	r2, [pc, #428]	@ (8007448 <DMA_SetConfig+0x250>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d031      	beq.n	8007302 <DMA_SetConfig+0x10a>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a6a      	ldr	r2, [pc, #424]	@ (800744c <DMA_SetConfig+0x254>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d02c      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a68      	ldr	r2, [pc, #416]	@ (8007450 <DMA_SetConfig+0x258>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d027      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a67      	ldr	r2, [pc, #412]	@ (8007454 <DMA_SetConfig+0x25c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d022      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a65      	ldr	r2, [pc, #404]	@ (8007458 <DMA_SetConfig+0x260>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01d      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a64      	ldr	r2, [pc, #400]	@ (800745c <DMA_SetConfig+0x264>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d018      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a62      	ldr	r2, [pc, #392]	@ (8007460 <DMA_SetConfig+0x268>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a61      	ldr	r2, [pc, #388]	@ (8007464 <DMA_SetConfig+0x26c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00e      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a5f      	ldr	r2, [pc, #380]	@ (8007468 <DMA_SetConfig+0x270>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d009      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a5e      	ldr	r2, [pc, #376]	@ (800746c <DMA_SetConfig+0x274>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <DMA_SetConfig+0x10a>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a5c      	ldr	r2, [pc, #368]	@ (8007470 <DMA_SetConfig+0x278>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d101      	bne.n	8007306 <DMA_SetConfig+0x10e>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <DMA_SetConfig+0x110>
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00d      	beq.n	8007328 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007314:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007326:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a39      	ldr	r2, [pc, #228]	@ (8007414 <DMA_SetConfig+0x21c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d04a      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a38      	ldr	r2, [pc, #224]	@ (8007418 <DMA_SetConfig+0x220>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d045      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a36      	ldr	r2, [pc, #216]	@ (800741c <DMA_SetConfig+0x224>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d040      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a35      	ldr	r2, [pc, #212]	@ (8007420 <DMA_SetConfig+0x228>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d03b      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a33      	ldr	r2, [pc, #204]	@ (8007424 <DMA_SetConfig+0x22c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d036      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a32      	ldr	r2, [pc, #200]	@ (8007428 <DMA_SetConfig+0x230>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d031      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a30      	ldr	r2, [pc, #192]	@ (800742c <DMA_SetConfig+0x234>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d02c      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2f      	ldr	r2, [pc, #188]	@ (8007430 <DMA_SetConfig+0x238>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d027      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a2d      	ldr	r2, [pc, #180]	@ (8007434 <DMA_SetConfig+0x23c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d022      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a2c      	ldr	r2, [pc, #176]	@ (8007438 <DMA_SetConfig+0x240>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d01d      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2a      	ldr	r2, [pc, #168]	@ (800743c <DMA_SetConfig+0x244>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a29      	ldr	r2, [pc, #164]	@ (8007440 <DMA_SetConfig+0x248>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a27      	ldr	r2, [pc, #156]	@ (8007444 <DMA_SetConfig+0x24c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a26      	ldr	r2, [pc, #152]	@ (8007448 <DMA_SetConfig+0x250>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a24      	ldr	r2, [pc, #144]	@ (800744c <DMA_SetConfig+0x254>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <DMA_SetConfig+0x1d0>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a23      	ldr	r2, [pc, #140]	@ (8007450 <DMA_SetConfig+0x258>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d101      	bne.n	80073cc <DMA_SetConfig+0x1d4>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <DMA_SetConfig+0x1d6>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d059      	beq.n	8007486 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	223f      	movs	r2, #63	@ 0x3f
 80073dc:	409a      	lsls	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80073f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b40      	cmp	r3, #64	@ 0x40
 8007400:	d138      	bne.n	8007474 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007412:	e086      	b.n	8007522 <DMA_SetConfig+0x32a>
 8007414:	40020010 	.word	0x40020010
 8007418:	40020028 	.word	0x40020028
 800741c:	40020040 	.word	0x40020040
 8007420:	40020058 	.word	0x40020058
 8007424:	40020070 	.word	0x40020070
 8007428:	40020088 	.word	0x40020088
 800742c:	400200a0 	.word	0x400200a0
 8007430:	400200b8 	.word	0x400200b8
 8007434:	40020410 	.word	0x40020410
 8007438:	40020428 	.word	0x40020428
 800743c:	40020440 	.word	0x40020440
 8007440:	40020458 	.word	0x40020458
 8007444:	40020470 	.word	0x40020470
 8007448:	40020488 	.word	0x40020488
 800744c:	400204a0 	.word	0x400204a0
 8007450:	400204b8 	.word	0x400204b8
 8007454:	58025408 	.word	0x58025408
 8007458:	5802541c 	.word	0x5802541c
 800745c:	58025430 	.word	0x58025430
 8007460:	58025444 	.word	0x58025444
 8007464:	58025458 	.word	0x58025458
 8007468:	5802546c 	.word	0x5802546c
 800746c:	58025480 	.word	0x58025480
 8007470:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]
}
 8007484:	e04d      	b.n	8007522 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a29      	ldr	r2, [pc, #164]	@ (8007530 <DMA_SetConfig+0x338>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d022      	beq.n	80074d6 <DMA_SetConfig+0x2de>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a27      	ldr	r2, [pc, #156]	@ (8007534 <DMA_SetConfig+0x33c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01d      	beq.n	80074d6 <DMA_SetConfig+0x2de>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a26      	ldr	r2, [pc, #152]	@ (8007538 <DMA_SetConfig+0x340>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d018      	beq.n	80074d6 <DMA_SetConfig+0x2de>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a24      	ldr	r2, [pc, #144]	@ (800753c <DMA_SetConfig+0x344>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <DMA_SetConfig+0x2de>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a23      	ldr	r2, [pc, #140]	@ (8007540 <DMA_SetConfig+0x348>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00e      	beq.n	80074d6 <DMA_SetConfig+0x2de>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a21      	ldr	r2, [pc, #132]	@ (8007544 <DMA_SetConfig+0x34c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d009      	beq.n	80074d6 <DMA_SetConfig+0x2de>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a20      	ldr	r2, [pc, #128]	@ (8007548 <DMA_SetConfig+0x350>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <DMA_SetConfig+0x2de>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1e      	ldr	r2, [pc, #120]	@ (800754c <DMA_SetConfig+0x354>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d101      	bne.n	80074da <DMA_SetConfig+0x2e2>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <DMA_SetConfig+0x2e4>
 80074da:	2300      	movs	r3, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d020      	beq.n	8007522 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	2201      	movs	r2, #1
 80074ea:	409a      	lsls	r2, r3
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b40      	cmp	r3, #64	@ 0x40
 80074fe:	d108      	bne.n	8007512 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	60da      	str	r2, [r3, #12]
}
 8007510:	e007      	b.n	8007522 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	60da      	str	r2, [r3, #12]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	58025408 	.word	0x58025408
 8007534:	5802541c 	.word	0x5802541c
 8007538:	58025430 	.word	0x58025430
 800753c:	58025444 	.word	0x58025444
 8007540:	58025458 	.word	0x58025458
 8007544:	5802546c 	.word	0x5802546c
 8007548:	58025480 	.word	0x58025480
 800754c:	58025494 	.word	0x58025494

08007550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a42      	ldr	r2, [pc, #264]	@ (8007668 <DMA_CalcBaseAndBitshift+0x118>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d04a      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a41      	ldr	r2, [pc, #260]	@ (800766c <DMA_CalcBaseAndBitshift+0x11c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d045      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a3f      	ldr	r2, [pc, #252]	@ (8007670 <DMA_CalcBaseAndBitshift+0x120>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d040      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a3e      	ldr	r2, [pc, #248]	@ (8007674 <DMA_CalcBaseAndBitshift+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d03b      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a3c      	ldr	r2, [pc, #240]	@ (8007678 <DMA_CalcBaseAndBitshift+0x128>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d036      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a3b      	ldr	r2, [pc, #236]	@ (800767c <DMA_CalcBaseAndBitshift+0x12c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d031      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a39      	ldr	r2, [pc, #228]	@ (8007680 <DMA_CalcBaseAndBitshift+0x130>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02c      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a38      	ldr	r2, [pc, #224]	@ (8007684 <DMA_CalcBaseAndBitshift+0x134>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d027      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a36      	ldr	r2, [pc, #216]	@ (8007688 <DMA_CalcBaseAndBitshift+0x138>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d022      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a35      	ldr	r2, [pc, #212]	@ (800768c <DMA_CalcBaseAndBitshift+0x13c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01d      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a33      	ldr	r2, [pc, #204]	@ (8007690 <DMA_CalcBaseAndBitshift+0x140>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d018      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a32      	ldr	r2, [pc, #200]	@ (8007694 <DMA_CalcBaseAndBitshift+0x144>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d013      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a30      	ldr	r2, [pc, #192]	@ (8007698 <DMA_CalcBaseAndBitshift+0x148>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00e      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2f      	ldr	r2, [pc, #188]	@ (800769c <DMA_CalcBaseAndBitshift+0x14c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d009      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2d      	ldr	r2, [pc, #180]	@ (80076a0 <DMA_CalcBaseAndBitshift+0x150>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <DMA_CalcBaseAndBitshift+0xa8>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a2c      	ldr	r2, [pc, #176]	@ (80076a4 <DMA_CalcBaseAndBitshift+0x154>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d101      	bne.n	80075fc <DMA_CalcBaseAndBitshift+0xac>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <DMA_CalcBaseAndBitshift+0xae>
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d024      	beq.n	800764c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	3b10      	subs	r3, #16
 800760a:	4a27      	ldr	r2, [pc, #156]	@ (80076a8 <DMA_CalcBaseAndBitshift+0x158>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	091b      	lsrs	r3, r3, #4
 8007612:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	4a24      	ldr	r2, [pc, #144]	@ (80076ac <DMA_CalcBaseAndBitshift+0x15c>)
 800761c:	5cd3      	ldrb	r3, [r2, r3]
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b03      	cmp	r3, #3
 8007628:	d908      	bls.n	800763c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	4b1f      	ldr	r3, [pc, #124]	@ (80076b0 <DMA_CalcBaseAndBitshift+0x160>)
 8007632:	4013      	ands	r3, r2
 8007634:	1d1a      	adds	r2, r3, #4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	659a      	str	r2, [r3, #88]	@ 0x58
 800763a:	e00d      	b.n	8007658 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	4b1b      	ldr	r3, [pc, #108]	@ (80076b0 <DMA_CalcBaseAndBitshift+0x160>)
 8007644:	4013      	ands	r3, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6593      	str	r3, [r2, #88]	@ 0x58
 800764a:	e005      	b.n	8007658 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	40020010 	.word	0x40020010
 800766c:	40020028 	.word	0x40020028
 8007670:	40020040 	.word	0x40020040
 8007674:	40020058 	.word	0x40020058
 8007678:	40020070 	.word	0x40020070
 800767c:	40020088 	.word	0x40020088
 8007680:	400200a0 	.word	0x400200a0
 8007684:	400200b8 	.word	0x400200b8
 8007688:	40020410 	.word	0x40020410
 800768c:	40020428 	.word	0x40020428
 8007690:	40020440 	.word	0x40020440
 8007694:	40020458 	.word	0x40020458
 8007698:	40020470 	.word	0x40020470
 800769c:	40020488 	.word	0x40020488
 80076a0:	400204a0 	.word	0x400204a0
 80076a4:	400204b8 	.word	0x400204b8
 80076a8:	aaaaaaab 	.word	0xaaaaaaab
 80076ac:	08023558 	.word	0x08023558
 80076b0:	fffffc00 	.word	0xfffffc00

080076b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d120      	bne.n	800770a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d858      	bhi.n	8007782 <DMA_CheckFifoParam+0xce>
 80076d0:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <DMA_CheckFifoParam+0x24>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	080076fb 	.word	0x080076fb
 80076e0:	080076e9 	.word	0x080076e9
 80076e4:	08007783 	.word	0x08007783
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d048      	beq.n	8007786 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076f8:	e045      	b.n	8007786 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007702:	d142      	bne.n	800778a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007708:	e03f      	b.n	800778a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007712:	d123      	bne.n	800775c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007718:	2b03      	cmp	r3, #3
 800771a:	d838      	bhi.n	800778e <DMA_CheckFifoParam+0xda>
 800771c:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <DMA_CheckFifoParam+0x70>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007735 	.word	0x08007735
 8007728:	0800773b 	.word	0x0800773b
 800772c:	08007735 	.word	0x08007735
 8007730:	0800774d 	.word	0x0800774d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	73fb      	strb	r3, [r7, #15]
        break;
 8007738:	e030      	b.n	800779c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d025      	beq.n	8007792 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800774a:	e022      	b.n	8007792 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007754:	d11f      	bne.n	8007796 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800775a:	e01c      	b.n	8007796 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007760:	2b02      	cmp	r3, #2
 8007762:	d902      	bls.n	800776a <DMA_CheckFifoParam+0xb6>
 8007764:	2b03      	cmp	r3, #3
 8007766:	d003      	beq.n	8007770 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007768:	e018      	b.n	800779c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
        break;
 800776e:	e015      	b.n	800779c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00e      	beq.n	800779a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
    break;
 8007780:	e00b      	b.n	800779a <DMA_CheckFifoParam+0xe6>
        break;
 8007782:	bf00      	nop
 8007784:	e00a      	b.n	800779c <DMA_CheckFifoParam+0xe8>
        break;
 8007786:	bf00      	nop
 8007788:	e008      	b.n	800779c <DMA_CheckFifoParam+0xe8>
        break;
 800778a:	bf00      	nop
 800778c:	e006      	b.n	800779c <DMA_CheckFifoParam+0xe8>
        break;
 800778e:	bf00      	nop
 8007790:	e004      	b.n	800779c <DMA_CheckFifoParam+0xe8>
        break;
 8007792:	bf00      	nop
 8007794:	e002      	b.n	800779c <DMA_CheckFifoParam+0xe8>
        break;
 8007796:	bf00      	nop
 8007798:	e000      	b.n	800779c <DMA_CheckFifoParam+0xe8>
    break;
 800779a:	bf00      	nop
    }
  }

  return status;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop

080077ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a38      	ldr	r2, [pc, #224]	@ (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d022      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a36      	ldr	r2, [pc, #216]	@ (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d01d      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a35      	ldr	r2, [pc, #212]	@ (80078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d018      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a33      	ldr	r2, [pc, #204]	@ (80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a32      	ldr	r2, [pc, #200]	@ (80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00e      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a30      	ldr	r2, [pc, #192]	@ (80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d009      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2f      	ldr	r2, [pc, #188]	@ (80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d004      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a2d      	ldr	r2, [pc, #180]	@ (80078bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d101      	bne.n	800780e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800780e:	2300      	movs	r3, #0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01a      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	3b08      	subs	r3, #8
 800781c:	4a28      	ldr	r2, [pc, #160]	@ (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	091b      	lsrs	r3, r3, #4
 8007824:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4b26      	ldr	r3, [pc, #152]	@ (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a24      	ldr	r2, [pc, #144]	@ (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007838:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2201      	movs	r2, #1
 8007842:	409a      	lsls	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007848:	e024      	b.n	8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	3b10      	subs	r3, #16
 8007852:	4a1e      	ldr	r2, [pc, #120]	@ (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	091b      	lsrs	r3, r3, #4
 800785a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4a1c      	ldr	r2, [pc, #112]	@ (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d806      	bhi.n	8007872 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4a1b      	ldr	r2, [pc, #108]	@ (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d902      	bls.n	8007872 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3308      	adds	r3, #8
 8007870:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4b18      	ldr	r3, [pc, #96]	@ (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a16      	ldr	r2, [pc, #88]	@ (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007884:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	2201      	movs	r2, #1
 800788e:	409a      	lsls	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	58025408 	.word	0x58025408
 80078a4:	5802541c 	.word	0x5802541c
 80078a8:	58025430 	.word	0x58025430
 80078ac:	58025444 	.word	0x58025444
 80078b0:	58025458 	.word	0x58025458
 80078b4:	5802546c 	.word	0x5802546c
 80078b8:	58025480 	.word	0x58025480
 80078bc:	58025494 	.word	0x58025494
 80078c0:	cccccccd 	.word	0xcccccccd
 80078c4:	16009600 	.word	0x16009600
 80078c8:	58025880 	.word	0x58025880
 80078cc:	aaaaaaab 	.word	0xaaaaaaab
 80078d0:	400204b8 	.word	0x400204b8
 80078d4:	4002040f 	.word	0x4002040f
 80078d8:	10008200 	.word	0x10008200
 80078dc:	40020880 	.word	0x40020880

080078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d04a      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d847      	bhi.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a25      	ldr	r2, [pc, #148]	@ (8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d022      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a24      	ldr	r2, [pc, #144]	@ (800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d01d      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a22      	ldr	r2, [pc, #136]	@ (80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d018      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a21      	ldr	r2, [pc, #132]	@ (80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d013      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1f      	ldr	r2, [pc, #124]	@ (80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00e      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1e      	ldr	r2, [pc, #120]	@ (80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d009      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a1c      	ldr	r2, [pc, #112]	@ (80079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d004      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a1b      	ldr	r2, [pc, #108]	@ (80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d101      	bne.n	8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4b17      	ldr	r3, [pc, #92]	@ (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a15      	ldr	r2, [pc, #84]	@ (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007968:	671a      	str	r2, [r3, #112]	@ 0x70
 800796a:	e009      	b.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4b14      	ldr	r3, [pc, #80]	@ (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a11      	ldr	r2, [pc, #68]	@ (80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800797e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3b01      	subs	r3, #1
 8007984:	2201      	movs	r2, #1
 8007986:	409a      	lsls	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	58025408 	.word	0x58025408
 800799c:	5802541c 	.word	0x5802541c
 80079a0:	58025430 	.word	0x58025430
 80079a4:	58025444 	.word	0x58025444
 80079a8:	58025458 	.word	0x58025458
 80079ac:	5802546c 	.word	0x5802546c
 80079b0:	58025480 	.word	0x58025480
 80079b4:	58025494 	.word	0x58025494
 80079b8:	1600963f 	.word	0x1600963f
 80079bc:	58025940 	.word	0x58025940
 80079c0:	1000823f 	.word	0x1000823f
 80079c4:	40020940 	.word	0x40020940

080079c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b089      	sub	sp, #36	@ 0x24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079d6:	4b89      	ldr	r3, [pc, #548]	@ (8007bfc <HAL_GPIO_Init+0x234>)
 80079d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079da:	e194      	b.n	8007d06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	2101      	movs	r1, #1
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	fa01 f303 	lsl.w	r3, r1, r3
 80079e8:	4013      	ands	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8186 	beq.w	8007d00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d005      	beq.n	8007a0c <HAL_GPIO_Init+0x44>
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d130      	bne.n	8007a6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	2203      	movs	r2, #3
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	4013      	ands	r3, r2
 8007a22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a42:	2201      	movs	r2, #1
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f003 0201 	and.w	r2, r3, #1
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d017      	beq.n	8007aaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	2203      	movs	r2, #3
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	43db      	mvns	r3, r3
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d123      	bne.n	8007afe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	08da      	lsrs	r2, r3, #3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3208      	adds	r2, #8
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	220f      	movs	r2, #15
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	08da      	lsrs	r2, r3, #3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3208      	adds	r2, #8
 8007af8:	69b9      	ldr	r1, [r7, #24]
 8007afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	2203      	movs	r2, #3
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	4013      	ands	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f003 0203 	and.w	r2, r3, #3
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 80e0 	beq.w	8007d00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b40:	4b2f      	ldr	r3, [pc, #188]	@ (8007c00 <HAL_GPIO_Init+0x238>)
 8007b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b46:	4a2e      	ldr	r2, [pc, #184]	@ (8007c00 <HAL_GPIO_Init+0x238>)
 8007b48:	f043 0302 	orr.w	r3, r3, #2
 8007b4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b50:	4b2b      	ldr	r3, [pc, #172]	@ (8007c00 <HAL_GPIO_Init+0x238>)
 8007b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b5e:	4a29      	ldr	r2, [pc, #164]	@ (8007c04 <HAL_GPIO_Init+0x23c>)
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	089b      	lsrs	r3, r3, #2
 8007b64:	3302      	adds	r3, #2
 8007b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	220f      	movs	r2, #15
 8007b76:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7a:	43db      	mvns	r3, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a20      	ldr	r2, [pc, #128]	@ (8007c08 <HAL_GPIO_Init+0x240>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d052      	beq.n	8007c30 <HAL_GPIO_Init+0x268>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007c0c <HAL_GPIO_Init+0x244>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d031      	beq.n	8007bf6 <HAL_GPIO_Init+0x22e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a1e      	ldr	r2, [pc, #120]	@ (8007c10 <HAL_GPIO_Init+0x248>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d02b      	beq.n	8007bf2 <HAL_GPIO_Init+0x22a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c14 <HAL_GPIO_Init+0x24c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d025      	beq.n	8007bee <HAL_GPIO_Init+0x226>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c18 <HAL_GPIO_Init+0x250>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d01f      	beq.n	8007bea <HAL_GPIO_Init+0x222>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	@ (8007c1c <HAL_GPIO_Init+0x254>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d019      	beq.n	8007be6 <HAL_GPIO_Init+0x21e>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8007c20 <HAL_GPIO_Init+0x258>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d013      	beq.n	8007be2 <HAL_GPIO_Init+0x21a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a19      	ldr	r2, [pc, #100]	@ (8007c24 <HAL_GPIO_Init+0x25c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00d      	beq.n	8007bde <HAL_GPIO_Init+0x216>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a18      	ldr	r2, [pc, #96]	@ (8007c28 <HAL_GPIO_Init+0x260>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <HAL_GPIO_Init+0x212>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a17      	ldr	r2, [pc, #92]	@ (8007c2c <HAL_GPIO_Init+0x264>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d101      	bne.n	8007bd6 <HAL_GPIO_Init+0x20e>
 8007bd2:	2309      	movs	r3, #9
 8007bd4:	e02d      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bd6:	230a      	movs	r3, #10
 8007bd8:	e02b      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bda:	2308      	movs	r3, #8
 8007bdc:	e029      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bde:	2307      	movs	r3, #7
 8007be0:	e027      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007be2:	2306      	movs	r3, #6
 8007be4:	e025      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007be6:	2305      	movs	r3, #5
 8007be8:	e023      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bea:	2304      	movs	r3, #4
 8007bec:	e021      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e01f      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e01d      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e01b      	b.n	8007c32 <HAL_GPIO_Init+0x26a>
 8007bfa:	bf00      	nop
 8007bfc:	58000080 	.word	0x58000080
 8007c00:	58024400 	.word	0x58024400
 8007c04:	58000400 	.word	0x58000400
 8007c08:	58020000 	.word	0x58020000
 8007c0c:	58020400 	.word	0x58020400
 8007c10:	58020800 	.word	0x58020800
 8007c14:	58020c00 	.word	0x58020c00
 8007c18:	58021000 	.word	0x58021000
 8007c1c:	58021400 	.word	0x58021400
 8007c20:	58021800 	.word	0x58021800
 8007c24:	58021c00 	.word	0x58021c00
 8007c28:	58022000 	.word	0x58022000
 8007c2c:	58022400 	.word	0x58022400
 8007c30:	2300      	movs	r3, #0
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	f002 0203 	and.w	r2, r2, #3
 8007c38:	0092      	lsls	r2, r2, #2
 8007c3a:	4093      	lsls	r3, r2
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c42:	4938      	ldr	r1, [pc, #224]	@ (8007d24 <HAL_GPIO_Init+0x35c>)
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	089b      	lsrs	r3, r3, #2
 8007c48:	3302      	adds	r3, #2
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	43db      	mvns	r3, r3
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	43db      	mvns	r3, r3
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	3301      	adds	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f47f ae63 	bne.w	80079dc <HAL_GPIO_Init+0x14>
  }
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	3724      	adds	r7, #36	@ 0x24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	58000400 	.word	0x58000400

08007d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	807b      	strh	r3, [r7, #2]
 8007d34:	4613      	mov	r3, r2
 8007d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d38:	787b      	ldrb	r3, [r7, #1]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d3e:	887a      	ldrh	r2, [r7, #2]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d44:	e003      	b.n	8007d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d46:	887b      	ldrh	r3, [r7, #2]
 8007d48:	041a      	lsls	r2, r3, #16
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	619a      	str	r2, [r3, #24]
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	4603      	mov	r3, r0
 8007d62:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7f9 fcd7 	bl	8001734 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d98:	4b19      	ldr	r3, [pc, #100]	@ (8007e00 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d00a      	beq.n	8007dba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007da4:	4b16      	ldr	r3, [pc, #88]	@ (8007e00 <HAL_PWREx_ConfigSupply+0x70>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d001      	beq.n	8007db6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e01f      	b.n	8007df6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e01d      	b.n	8007df6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007dba:	4b11      	ldr	r3, [pc, #68]	@ (8007e00 <HAL_PWREx_ConfigSupply+0x70>)
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f023 0207 	bic.w	r2, r3, #7
 8007dc2:	490f      	ldr	r1, [pc, #60]	@ (8007e00 <HAL_PWREx_ConfigSupply+0x70>)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007dca:	f7fb fbc7 	bl	800355c <HAL_GetTick>
 8007dce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dd0:	e009      	b.n	8007de6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dd2:	f7fb fbc3 	bl	800355c <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007de0:	d901      	bls.n	8007de6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e007      	b.n	8007df6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007de6:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <HAL_PWREx_ConfigSupply+0x70>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007df2:	d1ee      	bne.n	8007dd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	58024800 	.word	0x58024800

08007e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08c      	sub	sp, #48	@ 0x30
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f000 bc48 	b.w	80086a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8088 	beq.w	8007f36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e26:	4b99      	ldr	r3, [pc, #612]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e30:	4b96      	ldr	r3, [pc, #600]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d007      	beq.n	8007e4c <HAL_RCC_OscConfig+0x48>
 8007e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3e:	2b18      	cmp	r3, #24
 8007e40:	d111      	bne.n	8007e66 <HAL_RCC_OscConfig+0x62>
 8007e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d10c      	bne.n	8007e66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d06d      	beq.n	8007f34 <HAL_RCC_OscConfig+0x130>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d169      	bne.n	8007f34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f000 bc21 	b.w	80086a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e6e:	d106      	bne.n	8007e7e <HAL_RCC_OscConfig+0x7a>
 8007e70:	4b86      	ldr	r3, [pc, #536]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a85      	ldr	r2, [pc, #532]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	e02e      	b.n	8007edc <HAL_RCC_OscConfig+0xd8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10c      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x9c>
 8007e86:	4b81      	ldr	r3, [pc, #516]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a80      	ldr	r2, [pc, #512]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	4b7e      	ldr	r3, [pc, #504]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a7d      	ldr	r2, [pc, #500]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007e98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e01d      	b.n	8007edc <HAL_RCC_OscConfig+0xd8>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_RCC_OscConfig+0xc0>
 8007eaa:	4b78      	ldr	r3, [pc, #480]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a77      	ldr	r2, [pc, #476]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	4b75      	ldr	r3, [pc, #468]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a74      	ldr	r2, [pc, #464]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e00b      	b.n	8007edc <HAL_RCC_OscConfig+0xd8>
 8007ec4:	4b71      	ldr	r3, [pc, #452]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a70      	ldr	r2, [pc, #448]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a6d      	ldr	r2, [pc, #436]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d013      	beq.n	8007f0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fb fb3a 	bl	800355c <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fb fb36 	bl	800355c <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	@ 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e3d4      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007efe:	4b63      	ldr	r3, [pc, #396]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0xe8>
 8007f0a:	e014      	b.n	8007f36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0c:	f7fb fb26 	bl	800355c <HAL_GetTick>
 8007f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f14:	f7fb fb22 	bl	800355c <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b64      	cmp	r3, #100	@ 0x64
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e3c0      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f26:	4b59      	ldr	r3, [pc, #356]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <HAL_RCC_OscConfig+0x110>
 8007f32:	e000      	b.n	8007f36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 80ca 	beq.w	80080d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f44:	4b51      	ldr	r3, [pc, #324]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <HAL_RCC_OscConfig+0x166>
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	2b18      	cmp	r3, #24
 8007f5e:	d156      	bne.n	800800e <HAL_RCC_OscConfig+0x20a>
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d151      	bne.n	800800e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f6a:	4b48      	ldr	r3, [pc, #288]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <HAL_RCC_OscConfig+0x17e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e392      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f82:	4b42      	ldr	r3, [pc, #264]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f023 0219 	bic.w	r2, r3, #25
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	493f      	ldr	r1, [pc, #252]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f94:	f7fb fae2 	bl	800355c <HAL_GetTick>
 8007f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f9c:	f7fb fade 	bl	800355c <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e37c      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fae:	4b37      	ldr	r3, [pc, #220]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f0      	beq.n	8007f9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fba:	f7fb fadb 	bl	8003574 <HAL_GetREVID>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d817      	bhi.n	8007ff8 <HAL_RCC_OscConfig+0x1f4>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b40      	cmp	r3, #64	@ 0x40
 8007fce:	d108      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x1de>
 8007fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fe0:	e07a      	b.n	80080d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	031b      	lsls	r3, r3, #12
 8007ff0:	4926      	ldr	r1, [pc, #152]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ff6:	e06f      	b.n	80080d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff8:	4b24      	ldr	r3, [pc, #144]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	061b      	lsls	r3, r3, #24
 8008006:	4921      	ldr	r1, [pc, #132]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8008008:	4313      	orrs	r3, r2
 800800a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800800c:	e064      	b.n	80080d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d047      	beq.n	80080a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008016:	4b1d      	ldr	r3, [pc, #116]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f023 0219 	bic.w	r2, r3, #25
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	491a      	ldr	r1, [pc, #104]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8008024:	4313      	orrs	r3, r2
 8008026:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008028:	f7fb fa98 	bl	800355c <HAL_GetTick>
 800802c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008030:	f7fb fa94 	bl	800355c <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e332      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008042:	4b12      	ldr	r3, [pc, #72]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f0      	beq.n	8008030 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800804e:	f7fb fa91 	bl	8003574 <HAL_GetREVID>
 8008052:	4603      	mov	r3, r0
 8008054:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008058:	4293      	cmp	r3, r2
 800805a:	d819      	bhi.n	8008090 <HAL_RCC_OscConfig+0x28c>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	2b40      	cmp	r3, #64	@ 0x40
 8008062:	d108      	bne.n	8008076 <HAL_RCC_OscConfig+0x272>
 8008064:	4b09      	ldr	r3, [pc, #36]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800806c:	4a07      	ldr	r2, [pc, #28]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 800806e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008072:	6053      	str	r3, [r2, #4]
 8008074:	e030      	b.n	80080d8 <HAL_RCC_OscConfig+0x2d4>
 8008076:	4b05      	ldr	r3, [pc, #20]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	031b      	lsls	r3, r3, #12
 8008084:	4901      	ldr	r1, [pc, #4]	@ (800808c <HAL_RCC_OscConfig+0x288>)
 8008086:	4313      	orrs	r3, r2
 8008088:	604b      	str	r3, [r1, #4]
 800808a:	e025      	b.n	80080d8 <HAL_RCC_OscConfig+0x2d4>
 800808c:	58024400 	.word	0x58024400
 8008090:	4b9a      	ldr	r3, [pc, #616]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	061b      	lsls	r3, r3, #24
 800809e:	4997      	ldr	r1, [pc, #604]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	604b      	str	r3, [r1, #4]
 80080a4:	e018      	b.n	80080d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080a6:	4b95      	ldr	r3, [pc, #596]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a94      	ldr	r2, [pc, #592]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80080ac:	f023 0301 	bic.w	r3, r3, #1
 80080b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b2:	f7fb fa53 	bl	800355c <HAL_GetTick>
 80080b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080b8:	e008      	b.n	80080cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080ba:	f7fb fa4f 	bl	800355c <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e2ed      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080cc:	4b8b      	ldr	r3, [pc, #556]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f0      	bne.n	80080ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0310 	and.w	r3, r3, #16
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80a9 	beq.w	8008238 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080e6:	4b85      	ldr	r3, [pc, #532]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080f0:	4b82      	ldr	r3, [pc, #520]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d007      	beq.n	800810c <HAL_RCC_OscConfig+0x308>
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b18      	cmp	r3, #24
 8008100:	d13a      	bne.n	8008178 <HAL_RCC_OscConfig+0x374>
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	2b01      	cmp	r3, #1
 800810a:	d135      	bne.n	8008178 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800810c:	4b7b      	ldr	r3, [pc, #492]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_RCC_OscConfig+0x320>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	2b80      	cmp	r3, #128	@ 0x80
 800811e:	d001      	beq.n	8008124 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e2c1      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008124:	f7fb fa26 	bl	8003574 <HAL_GetREVID>
 8008128:	4603      	mov	r3, r0
 800812a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800812e:	4293      	cmp	r3, r2
 8008130:	d817      	bhi.n	8008162 <HAL_RCC_OscConfig+0x35e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	2b20      	cmp	r3, #32
 8008138:	d108      	bne.n	800814c <HAL_RCC_OscConfig+0x348>
 800813a:	4b70      	ldr	r3, [pc, #448]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008142:	4a6e      	ldr	r2, [pc, #440]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008144:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008148:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800814a:	e075      	b.n	8008238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800814c:	4b6b      	ldr	r3, [pc, #428]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	069b      	lsls	r3, r3, #26
 800815a:	4968      	ldr	r1, [pc, #416]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 800815c:	4313      	orrs	r3, r2
 800815e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008160:	e06a      	b.n	8008238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008162:	4b66      	ldr	r3, [pc, #408]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	061b      	lsls	r3, r3, #24
 8008170:	4962      	ldr	r1, [pc, #392]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008172:	4313      	orrs	r3, r2
 8008174:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008176:	e05f      	b.n	8008238 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d042      	beq.n	8008206 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008180:	4b5e      	ldr	r3, [pc, #376]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a5d      	ldr	r2, [pc, #372]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800818a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818c:	f7fb f9e6 	bl	800355c <HAL_GetTick>
 8008190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008192:	e008      	b.n	80081a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008194:	f7fb f9e2 	bl	800355c <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e280      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081a6:	4b55      	ldr	r3, [pc, #340]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0f0      	beq.n	8008194 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081b2:	f7fb f9df 	bl	8003574 <HAL_GetREVID>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80081bc:	4293      	cmp	r3, r2
 80081be:	d817      	bhi.n	80081f0 <HAL_RCC_OscConfig+0x3ec>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d108      	bne.n	80081da <HAL_RCC_OscConfig+0x3d6>
 80081c8:	4b4c      	ldr	r3, [pc, #304]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80081d0:	4a4a      	ldr	r2, [pc, #296]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80081d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081d6:	6053      	str	r3, [r2, #4]
 80081d8:	e02e      	b.n	8008238 <HAL_RCC_OscConfig+0x434>
 80081da:	4b48      	ldr	r3, [pc, #288]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	069b      	lsls	r3, r3, #26
 80081e8:	4944      	ldr	r1, [pc, #272]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	604b      	str	r3, [r1, #4]
 80081ee:	e023      	b.n	8008238 <HAL_RCC_OscConfig+0x434>
 80081f0:	4b42      	ldr	r3, [pc, #264]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	061b      	lsls	r3, r3, #24
 80081fe:	493f      	ldr	r1, [pc, #252]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008200:	4313      	orrs	r3, r2
 8008202:	60cb      	str	r3, [r1, #12]
 8008204:	e018      	b.n	8008238 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008206:	4b3d      	ldr	r3, [pc, #244]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a3c      	ldr	r2, [pc, #240]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 800820c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008212:	f7fb f9a3 	bl	800355c <HAL_GetTick>
 8008216:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800821a:	f7fb f99f 	bl	800355c <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e23d      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800822c:	4b33      	ldr	r3, [pc, #204]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1f0      	bne.n	800821a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b00      	cmp	r3, #0
 8008242:	d036      	beq.n	80082b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d019      	beq.n	8008280 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800824c:	4b2b      	ldr	r3, [pc, #172]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 800824e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008250:	4a2a      	ldr	r2, [pc, #168]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008258:	f7fb f980 	bl	800355c <HAL_GetTick>
 800825c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008260:	f7fb f97c 	bl	800355c <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e21a      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008272:	4b22      	ldr	r3, [pc, #136]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0f0      	beq.n	8008260 <HAL_RCC_OscConfig+0x45c>
 800827e:	e018      	b.n	80082b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008280:	4b1e      	ldr	r3, [pc, #120]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008284:	4a1d      	ldr	r2, [pc, #116]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800828c:	f7fb f966 	bl	800355c <HAL_GetTick>
 8008290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008294:	f7fb f962 	bl	800355c <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e200      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082a6:	4b15      	ldr	r3, [pc, #84]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80082a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f0      	bne.n	8008294 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d039      	beq.n	8008332 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d01c      	beq.n	8008300 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082c6:	4b0d      	ldr	r3, [pc, #52]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a0c      	ldr	r2, [pc, #48]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80082cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082d2:	f7fb f943 	bl	800355c <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082d8:	e008      	b.n	80082ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082da:	f7fb f93f 	bl	800355c <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e1dd      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082ec:	4b03      	ldr	r3, [pc, #12]	@ (80082fc <HAL_RCC_OscConfig+0x4f8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0f0      	beq.n	80082da <HAL_RCC_OscConfig+0x4d6>
 80082f8:	e01b      	b.n	8008332 <HAL_RCC_OscConfig+0x52e>
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008300:	4b9b      	ldr	r3, [pc, #620]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a9a      	ldr	r2, [pc, #616]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008306:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800830a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800830c:	f7fb f926 	bl	800355c <HAL_GetTick>
 8008310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008314:	f7fb f922 	bl	800355c <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e1c0      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008326:	4b92      	ldr	r3, [pc, #584]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f0      	bne.n	8008314 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 8081 	beq.w	8008442 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008340:	4b8c      	ldr	r3, [pc, #560]	@ (8008574 <HAL_RCC_OscConfig+0x770>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a8b      	ldr	r2, [pc, #556]	@ (8008574 <HAL_RCC_OscConfig+0x770>)
 8008346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800834a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800834c:	f7fb f906 	bl	800355c <HAL_GetTick>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008354:	f7fb f902 	bl	800355c <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b64      	cmp	r3, #100	@ 0x64
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e1a0      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008366:	4b83      	ldr	r3, [pc, #524]	@ (8008574 <HAL_RCC_OscConfig+0x770>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f0      	beq.n	8008354 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d106      	bne.n	8008388 <HAL_RCC_OscConfig+0x584>
 800837a:	4b7d      	ldr	r3, [pc, #500]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800837c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800837e:	4a7c      	ldr	r2, [pc, #496]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6713      	str	r3, [r2, #112]	@ 0x70
 8008386:	e02d      	b.n	80083e4 <HAL_RCC_OscConfig+0x5e0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10c      	bne.n	80083aa <HAL_RCC_OscConfig+0x5a6>
 8008390:	4b77      	ldr	r3, [pc, #476]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008394:	4a76      	ldr	r2, [pc, #472]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	6713      	str	r3, [r2, #112]	@ 0x70
 800839c:	4b74      	ldr	r3, [pc, #464]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800839e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a0:	4a73      	ldr	r2, [pc, #460]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083a2:	f023 0304 	bic.w	r3, r3, #4
 80083a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083a8:	e01c      	b.n	80083e4 <HAL_RCC_OscConfig+0x5e0>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d10c      	bne.n	80083cc <HAL_RCC_OscConfig+0x5c8>
 80083b2:	4b6f      	ldr	r3, [pc, #444]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b6:	4a6e      	ldr	r2, [pc, #440]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083b8:	f043 0304 	orr.w	r3, r3, #4
 80083bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80083be:	4b6c      	ldr	r3, [pc, #432]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c2:	4a6b      	ldr	r2, [pc, #428]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083c4:	f043 0301 	orr.w	r3, r3, #1
 80083c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083ca:	e00b      	b.n	80083e4 <HAL_RCC_OscConfig+0x5e0>
 80083cc:	4b68      	ldr	r3, [pc, #416]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d0:	4a67      	ldr	r2, [pc, #412]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083d8:	4b65      	ldr	r3, [pc, #404]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083dc:	4a64      	ldr	r2, [pc, #400]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80083de:	f023 0304 	bic.w	r3, r3, #4
 80083e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d015      	beq.n	8008418 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ec:	f7fb f8b6 	bl	800355c <HAL_GetTick>
 80083f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083f2:	e00a      	b.n	800840a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f4:	f7fb f8b2 	bl	800355c <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008402:	4293      	cmp	r3, r2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e14e      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800840a:	4b59      	ldr	r3, [pc, #356]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800840c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0ee      	beq.n	80083f4 <HAL_RCC_OscConfig+0x5f0>
 8008416:	e014      	b.n	8008442 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008418:	f7fb f8a0 	bl	800355c <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800841e:	e00a      	b.n	8008436 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008420:	f7fb f89c 	bl	800355c <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800842e:	4293      	cmp	r3, r2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e138      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008436:	4b4e      	ldr	r3, [pc, #312]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1ee      	bne.n	8008420 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 812d 	beq.w	80086a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800844c:	4b48      	ldr	r3, [pc, #288]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008454:	2b18      	cmp	r3, #24
 8008456:	f000 80bd 	beq.w	80085d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845e:	2b02      	cmp	r3, #2
 8008460:	f040 809e 	bne.w	80085a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008464:	4b42      	ldr	r3, [pc, #264]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a41      	ldr	r2, [pc, #260]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800846a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800846e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008470:	f7fb f874 	bl	800355c <HAL_GetTick>
 8008474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008478:	f7fb f870 	bl	800355c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e10e      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800848a:	4b39      	ldr	r3, [pc, #228]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f0      	bne.n	8008478 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008496:	4b36      	ldr	r3, [pc, #216]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800849a:	4b37      	ldr	r3, [pc, #220]	@ (8008578 <HAL_RCC_OscConfig+0x774>)
 800849c:	4013      	ands	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084a6:	0112      	lsls	r2, r2, #4
 80084a8:	430a      	orrs	r2, r1
 80084aa:	4931      	ldr	r1, [pc, #196]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b4:	3b01      	subs	r3, #1
 80084b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084be:	3b01      	subs	r3, #1
 80084c0:	025b      	lsls	r3, r3, #9
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ca:	3b01      	subs	r3, #1
 80084cc:	041b      	lsls	r3, r3, #16
 80084ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d8:	3b01      	subs	r3, #1
 80084da:	061b      	lsls	r3, r3, #24
 80084dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80084e0:	4923      	ldr	r1, [pc, #140]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80084e6:	4b22      	ldr	r3, [pc, #136]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ea:	4a21      	ldr	r2, [pc, #132]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 80084f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084f6:	4b21      	ldr	r3, [pc, #132]	@ (800857c <HAL_RCC_OscConfig+0x778>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084fe:	00d2      	lsls	r2, r2, #3
 8008500:	491b      	ldr	r1, [pc, #108]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008502:	4313      	orrs	r3, r2
 8008504:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008506:	4b1a      	ldr	r3, [pc, #104]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850a:	f023 020c 	bic.w	r2, r3, #12
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	4917      	ldr	r1, [pc, #92]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008514:	4313      	orrs	r3, r2
 8008516:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008518:	4b15      	ldr	r3, [pc, #84]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800851a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851c:	f023 0202 	bic.w	r2, r3, #2
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008524:	4912      	ldr	r1, [pc, #72]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008526:	4313      	orrs	r3, r2
 8008528:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800852a:	4b11      	ldr	r3, [pc, #68]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800852c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852e:	4a10      	ldr	r2, [pc, #64]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008536:	4b0e      	ldr	r3, [pc, #56]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	4a0d      	ldr	r2, [pc, #52]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800853c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008542:	4b0b      	ldr	r3, [pc, #44]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	4a0a      	ldr	r2, [pc, #40]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800854c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800854e:	4b08      	ldr	r3, [pc, #32]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008552:	4a07      	ldr	r2, [pc, #28]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800855a:	4b05      	ldr	r3, [pc, #20]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a04      	ldr	r2, [pc, #16]	@ (8008570 <HAL_RCC_OscConfig+0x76c>)
 8008560:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008566:	f7fa fff9 	bl	800355c <HAL_GetTick>
 800856a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800856c:	e011      	b.n	8008592 <HAL_RCC_OscConfig+0x78e>
 800856e:	bf00      	nop
 8008570:	58024400 	.word	0x58024400
 8008574:	58024800 	.word	0x58024800
 8008578:	fffffc0c 	.word	0xfffffc0c
 800857c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008580:	f7fa ffec 	bl	800355c <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e08a      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008592:	4b47      	ldr	r3, [pc, #284]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0f0      	beq.n	8008580 <HAL_RCC_OscConfig+0x77c>
 800859e:	e082      	b.n	80086a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085a0:	4b43      	ldr	r3, [pc, #268]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a42      	ldr	r2, [pc, #264]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 80085a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ac:	f7fa ffd6 	bl	800355c <HAL_GetTick>
 80085b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085b2:	e008      	b.n	80085c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b4:	f7fa ffd2 	bl	800355c <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e070      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085c6:	4b3a      	ldr	r3, [pc, #232]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f0      	bne.n	80085b4 <HAL_RCC_OscConfig+0x7b0>
 80085d2:	e068      	b.n	80086a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80085d4:	4b36      	ldr	r3, [pc, #216]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 80085d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085da:	4b35      	ldr	r3, [pc, #212]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d031      	beq.n	800864c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f003 0203 	and.w	r2, r3, #3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d12a      	bne.n	800864c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	091b      	lsrs	r3, r3, #4
 80085fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008602:	429a      	cmp	r2, r3
 8008604:	d122      	bne.n	800864c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008612:	429a      	cmp	r2, r3
 8008614:	d11a      	bne.n	800864c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	0a5b      	lsrs	r3, r3, #9
 800861a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008622:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008624:	429a      	cmp	r2, r3
 8008626:	d111      	bne.n	800864c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	0c1b      	lsrs	r3, r3, #16
 800862c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008634:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008636:	429a      	cmp	r2, r3
 8008638:	d108      	bne.n	800864c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	0e1b      	lsrs	r3, r3, #24
 800863e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008646:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008648:	429a      	cmp	r2, r3
 800864a:	d001      	beq.n	8008650 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e02b      	b.n	80086a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008650:	4b17      	ldr	r3, [pc, #92]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 8008652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800865a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	429a      	cmp	r2, r3
 8008664:	d01f      	beq.n	80086a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008666:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 8008668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866a:	4a11      	ldr	r2, [pc, #68]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008672:	f7fa ff73 	bl	800355c <HAL_GetTick>
 8008676:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008678:	bf00      	nop
 800867a:	f7fa ff6f 	bl	800355c <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	4293      	cmp	r3, r2
 8008684:	d0f9      	beq.n	800867a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008686:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 8008688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800868a:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <HAL_RCC_OscConfig+0x8b0>)
 800868c:	4013      	ands	r3, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008692:	00d2      	lsls	r2, r2, #3
 8008694:	4906      	ldr	r1, [pc, #24]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 8008696:	4313      	orrs	r3, r2
 8008698:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800869a:	4b05      	ldr	r3, [pc, #20]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 800869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869e:	4a04      	ldr	r2, [pc, #16]	@ (80086b0 <HAL_RCC_OscConfig+0x8ac>)
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3730      	adds	r7, #48	@ 0x30
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	58024400 	.word	0x58024400
 80086b4:	ffff0007 	.word	0xffff0007

080086b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e19c      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086cc:	4b8a      	ldr	r3, [pc, #552]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d910      	bls.n	80086fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086da:	4b87      	ldr	r3, [pc, #540]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f023 020f 	bic.w	r2, r3, #15
 80086e2:	4985      	ldr	r1, [pc, #532]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ea:	4b83      	ldr	r3, [pc, #524]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d001      	beq.n	80086fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e184      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d010      	beq.n	800872a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	4b7b      	ldr	r3, [pc, #492]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008714:	429a      	cmp	r2, r3
 8008716:	d908      	bls.n	800872a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008718:	4b78      	ldr	r3, [pc, #480]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	4975      	ldr	r1, [pc, #468]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008726:	4313      	orrs	r3, r2
 8008728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d010      	beq.n	8008758 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695a      	ldr	r2, [r3, #20]
 800873a:	4b70      	ldr	r3, [pc, #448]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008742:	429a      	cmp	r2, r3
 8008744:	d908      	bls.n	8008758 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008746:	4b6d      	ldr	r3, [pc, #436]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	496a      	ldr	r1, [pc, #424]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008754:	4313      	orrs	r3, r2
 8008756:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b00      	cmp	r3, #0
 8008762:	d010      	beq.n	8008786 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	4b64      	ldr	r3, [pc, #400]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008770:	429a      	cmp	r2, r3
 8008772:	d908      	bls.n	8008786 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008774:	4b61      	ldr	r3, [pc, #388]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	495e      	ldr	r1, [pc, #376]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008782:	4313      	orrs	r3, r2
 8008784:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b00      	cmp	r3, #0
 8008790:	d010      	beq.n	80087b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	69da      	ldr	r2, [r3, #28]
 8008796:	4b59      	ldr	r3, [pc, #356]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800879e:	429a      	cmp	r2, r3
 80087a0:	d908      	bls.n	80087b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087a2:	4b56      	ldr	r3, [pc, #344]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	4953      	ldr	r1, [pc, #332]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d010      	beq.n	80087e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	4b4d      	ldr	r3, [pc, #308]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d908      	bls.n	80087e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087d0:	4b4a      	ldr	r3, [pc, #296]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f023 020f 	bic.w	r2, r3, #15
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	4947      	ldr	r1, [pc, #284]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d055      	beq.n	800889a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087ee:	4b43      	ldr	r3, [pc, #268]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	4940      	ldr	r1, [pc, #256]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d107      	bne.n	8008818 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008808:	4b3c      	ldr	r3, [pc, #240]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d121      	bne.n	8008858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e0f6      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2b03      	cmp	r3, #3
 800881e:	d107      	bne.n	8008830 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008820:	4b36      	ldr	r3, [pc, #216]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d115      	bne.n	8008858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e0ea      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d107      	bne.n	8008848 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008838:	4b30      	ldr	r3, [pc, #192]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008840:	2b00      	cmp	r3, #0
 8008842:	d109      	bne.n	8008858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e0de      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008848:	4b2c      	ldr	r3, [pc, #176]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e0d6      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008858:	4b28      	ldr	r3, [pc, #160]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	f023 0207 	bic.w	r2, r3, #7
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4925      	ldr	r1, [pc, #148]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 8008866:	4313      	orrs	r3, r2
 8008868:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886a:	f7fa fe77 	bl	800355c <HAL_GetTick>
 800886e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008870:	e00a      	b.n	8008888 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008872:	f7fa fe73 	bl	800355c <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008880:	4293      	cmp	r3, r2
 8008882:	d901      	bls.n	8008888 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e0be      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008888:	4b1c      	ldr	r3, [pc, #112]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	429a      	cmp	r2, r3
 8008898:	d1eb      	bne.n	8008872 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d010      	beq.n	80088c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	4b14      	ldr	r3, [pc, #80]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d208      	bcs.n	80088c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088b6:	4b11      	ldr	r3, [pc, #68]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	f023 020f 	bic.w	r2, r3, #15
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	490e      	ldr	r1, [pc, #56]	@ (80088fc <HAL_RCC_ClockConfig+0x244>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088c8:	4b0b      	ldr	r3, [pc, #44]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d214      	bcs.n	8008900 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d6:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f023 020f 	bic.w	r2, r3, #15
 80088de:	4906      	ldr	r1, [pc, #24]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e6:	4b04      	ldr	r3, [pc, #16]	@ (80088f8 <HAL_RCC_ClockConfig+0x240>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d005      	beq.n	8008900 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e086      	b.n	8008a06 <HAL_RCC_ClockConfig+0x34e>
 80088f8:	52002000 	.word	0x52002000
 80088fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d010      	beq.n	800892e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	4b3f      	ldr	r3, [pc, #252]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008918:	429a      	cmp	r2, r3
 800891a:	d208      	bcs.n	800892e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800891c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	4939      	ldr	r1, [pc, #228]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 800892a:	4313      	orrs	r3, r2
 800892c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d010      	beq.n	800895c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	4b34      	ldr	r3, [pc, #208]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008946:	429a      	cmp	r2, r3
 8008948:	d208      	bcs.n	800895c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800894a:	4b31      	ldr	r3, [pc, #196]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	492e      	ldr	r1, [pc, #184]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 8008958:	4313      	orrs	r3, r2
 800895a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	d010      	beq.n	800898a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	699a      	ldr	r2, [r3, #24]
 800896c:	4b28      	ldr	r3, [pc, #160]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008974:	429a      	cmp	r2, r3
 8008976:	d208      	bcs.n	800898a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008978:	4b25      	ldr	r3, [pc, #148]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	4922      	ldr	r1, [pc, #136]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 8008986:	4313      	orrs	r3, r2
 8008988:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b00      	cmp	r3, #0
 8008994:	d010      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69da      	ldr	r2, [r3, #28]
 800899a:	4b1d      	ldr	r3, [pc, #116]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d208      	bcs.n	80089b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	4917      	ldr	r1, [pc, #92]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089b8:	f000 f834 	bl	8008a24 <HAL_RCC_GetSysClockFreq>
 80089bc:	4602      	mov	r2, r0
 80089be:	4b14      	ldr	r3, [pc, #80]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	0a1b      	lsrs	r3, r3, #8
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	4912      	ldr	r1, [pc, #72]	@ (8008a14 <HAL_RCC_ClockConfig+0x35c>)
 80089ca:	5ccb      	ldrb	r3, [r1, r3]
 80089cc:	f003 031f 	and.w	r3, r3, #31
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
 80089d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008a10 <HAL_RCC_ClockConfig+0x358>)
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	4a0d      	ldr	r2, [pc, #52]	@ (8008a14 <HAL_RCC_ClockConfig+0x35c>)
 80089e0:	5cd3      	ldrb	r3, [r2, r3]
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008a18 <HAL_RCC_ClockConfig+0x360>)
 80089ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089f0:	4a0a      	ldr	r2, [pc, #40]	@ (8008a1c <HAL_RCC_ClockConfig+0x364>)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80089f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a20 <HAL_RCC_ClockConfig+0x368>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7f9 fcfa 	bl	80023f4 <HAL_InitTick>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	58024400 	.word	0x58024400
 8008a14:	08023548 	.word	0x08023548
 8008a18:	24000008 	.word	0x24000008
 8008a1c:	24000004 	.word	0x24000004
 8008a20:	2400000c 	.word	0x2400000c

08008a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b089      	sub	sp, #36	@ 0x24
 8008a28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a2a:	4bb3      	ldr	r3, [pc, #716]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a32:	2b18      	cmp	r3, #24
 8008a34:	f200 8155 	bhi.w	8008ce2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008a38:	a201      	add	r2, pc, #4	@ (adr r2, 8008a40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3e:	bf00      	nop
 8008a40:	08008aa5 	.word	0x08008aa5
 8008a44:	08008ce3 	.word	0x08008ce3
 8008a48:	08008ce3 	.word	0x08008ce3
 8008a4c:	08008ce3 	.word	0x08008ce3
 8008a50:	08008ce3 	.word	0x08008ce3
 8008a54:	08008ce3 	.word	0x08008ce3
 8008a58:	08008ce3 	.word	0x08008ce3
 8008a5c:	08008ce3 	.word	0x08008ce3
 8008a60:	08008acb 	.word	0x08008acb
 8008a64:	08008ce3 	.word	0x08008ce3
 8008a68:	08008ce3 	.word	0x08008ce3
 8008a6c:	08008ce3 	.word	0x08008ce3
 8008a70:	08008ce3 	.word	0x08008ce3
 8008a74:	08008ce3 	.word	0x08008ce3
 8008a78:	08008ce3 	.word	0x08008ce3
 8008a7c:	08008ce3 	.word	0x08008ce3
 8008a80:	08008ad1 	.word	0x08008ad1
 8008a84:	08008ce3 	.word	0x08008ce3
 8008a88:	08008ce3 	.word	0x08008ce3
 8008a8c:	08008ce3 	.word	0x08008ce3
 8008a90:	08008ce3 	.word	0x08008ce3
 8008a94:	08008ce3 	.word	0x08008ce3
 8008a98:	08008ce3 	.word	0x08008ce3
 8008a9c:	08008ce3 	.word	0x08008ce3
 8008aa0:	08008ad7 	.word	0x08008ad7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa4:	4b94      	ldr	r3, [pc, #592]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab0:	4b91      	ldr	r3, [pc, #580]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	08db      	lsrs	r3, r3, #3
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	4a90      	ldr	r2, [pc, #576]	@ (8008cfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008ac2:	e111      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8008cfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ac6:	61bb      	str	r3, [r7, #24]
      break;
 8008ac8:	e10e      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008aca:	4b8d      	ldr	r3, [pc, #564]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008acc:	61bb      	str	r3, [r7, #24]
      break;
 8008ace:	e10b      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8008d04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ad2:	61bb      	str	r3, [r7, #24]
      break;
 8008ad4:	e108      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ad6:	4b88      	ldr	r3, [pc, #544]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ae0:	4b85      	ldr	r3, [pc, #532]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	091b      	lsrs	r3, r3, #4
 8008ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008aec:	4b82      	ldr	r3, [pc, #520]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008af6:	4b80      	ldr	r3, [pc, #512]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afa:	08db      	lsrs	r3, r3, #3
 8008afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80e1 	beq.w	8008cdc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	f000 8083 	beq.w	8008c28 <HAL_RCC_GetSysClockFreq+0x204>
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	f200 80a1 	bhi.w	8008c6c <HAL_RCC_GetSysClockFreq+0x248>
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_RCC_GetSysClockFreq+0x114>
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d056      	beq.n	8008be4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b36:	e099      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b38:	4b6f      	ldr	r3, [pc, #444]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d02d      	beq.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b44:	4b6c      	ldr	r3, [pc, #432]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	08db      	lsrs	r3, r3, #3
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	4a6b      	ldr	r2, [pc, #428]	@ (8008cfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b50:	fa22 f303 	lsr.w	r3, r2, r3
 8008b54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	ee07 3a90 	vmov	s15, r3
 8008b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b62      	ldr	r3, [pc, #392]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008b9e:	e087      	b.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008d0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb2:	4b51      	ldr	r3, [pc, #324]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008be2:	e065      	b.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf6:	4b40      	ldr	r3, [pc, #256]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c26:	e043      	b.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008d14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c6a:	e021      	b.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008caa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008cb0:	4b11      	ldr	r3, [pc, #68]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb4:	0a5b      	lsrs	r3, r3, #9
 8008cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cba:	3301      	adds	r3, #1
 8008cbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	ee07 3a90 	vmov	s15, r3
 8008cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd4:	ee17 3a90 	vmov	r3, s15
 8008cd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008cda:	e005      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61bb      	str	r3, [r7, #24]
      break;
 8008ce0:	e002      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008ce2:	4b07      	ldr	r3, [pc, #28]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ce4:	61bb      	str	r3, [r7, #24]
      break;
 8008ce6:	bf00      	nop
  }

  return sysclockfreq;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3724      	adds	r7, #36	@ 0x24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	58024400 	.word	0x58024400
 8008cfc:	03d09000 	.word	0x03d09000
 8008d00:	003d0900 	.word	0x003d0900
 8008d04:	007a1200 	.word	0x007a1200
 8008d08:	46000000 	.word	0x46000000
 8008d0c:	4c742400 	.word	0x4c742400
 8008d10:	4a742400 	.word	0x4a742400
 8008d14:	4af42400 	.word	0x4af42400

08008d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d1e:	f7ff fe81 	bl	8008a24 <HAL_RCC_GetSysClockFreq>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b10      	ldr	r3, [pc, #64]	@ (8008d68 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	0a1b      	lsrs	r3, r3, #8
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	490f      	ldr	r1, [pc, #60]	@ (8008d6c <HAL_RCC_GetHCLKFreq+0x54>)
 8008d30:	5ccb      	ldrb	r3, [r1, r3]
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	4a09      	ldr	r2, [pc, #36]	@ (8008d6c <HAL_RCC_GetHCLKFreq+0x54>)
 8008d46:	5cd3      	ldrb	r3, [r2, r3]
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d52:	4a07      	ldr	r2, [pc, #28]	@ (8008d70 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d56:	4a07      	ldr	r2, [pc, #28]	@ (8008d74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d5c:	4b04      	ldr	r3, [pc, #16]	@ (8008d70 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	58024400 	.word	0x58024400
 8008d6c:	08023548 	.word	0x08023548
 8008d70:	24000008 	.word	0x24000008
 8008d74:	24000004 	.word	0x24000004

08008d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d7c:	f7ff ffcc 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008d80:	4602      	mov	r2, r0
 8008d82:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	091b      	lsrs	r3, r3, #4
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	4904      	ldr	r1, [pc, #16]	@ (8008da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d8e:	5ccb      	ldrb	r3, [r1, r3]
 8008d90:	f003 031f 	and.w	r3, r3, #31
 8008d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	08023548 	.word	0x08023548

08008da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008da8:	f7ff ffb6 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008dac:	4602      	mov	r2, r0
 8008dae:	4b06      	ldr	r3, [pc, #24]	@ (8008dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	0a1b      	lsrs	r3, r3, #8
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	4904      	ldr	r1, [pc, #16]	@ (8008dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008dba:	5ccb      	ldrb	r3, [r1, r3]
 8008dbc:	f003 031f 	and.w	r3, r3, #31
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	08023548 	.word	0x08023548

08008dd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	223f      	movs	r2, #63	@ 0x3f
 8008dde:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008de0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e4c <HAL_RCC_GetClockConfig+0x7c>)
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	f003 0207 	and.w	r2, r3, #7
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008dec:	4b17      	ldr	r3, [pc, #92]	@ (8008e4c <HAL_RCC_GetClockConfig+0x7c>)
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008df8:	4b14      	ldr	r3, [pc, #80]	@ (8008e4c <HAL_RCC_GetClockConfig+0x7c>)
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	f003 020f 	and.w	r2, r3, #15
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008e04:	4b11      	ldr	r3, [pc, #68]	@ (8008e4c <HAL_RCC_GetClockConfig+0x7c>)
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008e10:	4b0e      	ldr	r3, [pc, #56]	@ (8008e4c <HAL_RCC_GetClockConfig+0x7c>)
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <HAL_RCC_GetClockConfig+0x7c>)
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008e28:	4b08      	ldr	r3, [pc, #32]	@ (8008e4c <HAL_RCC_GetClockConfig+0x7c>)
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e34:	4b06      	ldr	r3, [pc, #24]	@ (8008e50 <HAL_RCC_GetClockConfig+0x80>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 020f 	and.w	r2, r3, #15
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	601a      	str	r2, [r3, #0]
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	58024400 	.word	0x58024400
 8008e50:	52002000 	.word	0x52002000

08008e54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e58:	b0ca      	sub	sp, #296	@ 0x128
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008e78:	2500      	movs	r5, #0
 8008e7a:	ea54 0305 	orrs.w	r3, r4, r5
 8008e7e:	d049      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e8a:	d02f      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e90:	d828      	bhi.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e96:	d01a      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e9c:	d822      	bhi.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ea6:	d007      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ea8:	e01c      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eaa:	4bb8      	ldr	r3, [pc, #736]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eae:	4ab7      	ldr	r2, [pc, #732]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008eb6:	e01a      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f002 fb61 	bl	800b588 <RCCEx_PLL2_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ecc:	e00f      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed2:	3328      	adds	r3, #40	@ 0x28
 8008ed4:	2102      	movs	r1, #2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f002 fc08 	bl	800b6ec <RCCEx_PLL3_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ee2:	e004      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008eea:	e000      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ef6:	4ba5      	ldr	r3, [pc, #660]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008efa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f04:	4aa1      	ldr	r2, [pc, #644]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f06:	430b      	orrs	r3, r1
 8008f08:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f0a:	e003      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f20:	f04f 0900 	mov.w	r9, #0
 8008f24:	ea58 0309 	orrs.w	r3, r8, r9
 8008f28:	d047      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d82a      	bhi.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f34:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f51 	.word	0x08008f51
 8008f40:	08008f5f 	.word	0x08008f5f
 8008f44:	08008f75 	.word	0x08008f75
 8008f48:	08008f93 	.word	0x08008f93
 8008f4c:	08008f93 	.word	0x08008f93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f50:	4b8e      	ldr	r3, [pc, #568]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	4a8d      	ldr	r2, [pc, #564]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f5c:	e01a      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f62:	3308      	adds	r3, #8
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f002 fb0e 	bl	800b588 <RCCEx_PLL2_Config>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f72:	e00f      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f78:	3328      	adds	r3, #40	@ 0x28
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 fbb5 	bl	800b6ec <RCCEx_PLL3_Config>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f88:	e004      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f90:	e000      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f9c:	4b7b      	ldr	r3, [pc, #492]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa0:	f023 0107 	bic.w	r1, r3, #7
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008faa:	4a78      	ldr	r2, [pc, #480]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fac:	430b      	orrs	r3, r1
 8008fae:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fb0:	e003      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008fc6:	f04f 0b00 	mov.w	fp, #0
 8008fca:	ea5a 030b 	orrs.w	r3, sl, fp
 8008fce:	d04c      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fda:	d030      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fe0:	d829      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fe4:	d02d      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008fe6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fe8:	d825      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fea:	2b80      	cmp	r3, #128	@ 0x80
 8008fec:	d018      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008fee:	2b80      	cmp	r3, #128	@ 0x80
 8008ff0:	d821      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008ff6:	2b40      	cmp	r3, #64	@ 0x40
 8008ff8:	d007      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008ffa:	e01c      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffc:	4b63      	ldr	r3, [pc, #396]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009000:	4a62      	ldr	r2, [pc, #392]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009008:	e01c      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	3308      	adds	r3, #8
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f002 fab8 	bl	800b588 <RCCEx_PLL2_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800901e:	e011      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009024:	3328      	adds	r3, #40	@ 0x28
 8009026:	2100      	movs	r1, #0
 8009028:	4618      	mov	r0, r3
 800902a:	f002 fb5f 	bl	800b6ec <RCCEx_PLL3_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009034:	e006      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800903c:	e002      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800903e:	bf00      	nop
 8009040:	e000      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800904c:	4b4f      	ldr	r3, [pc, #316]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800904e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009050:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800905a:	4a4c      	ldr	r2, [pc, #304]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800905c:	430b      	orrs	r3, r1
 800905e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009060:	e003      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009076:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800907a:	2300      	movs	r3, #0
 800907c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009080:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009084:	460b      	mov	r3, r1
 8009086:	4313      	orrs	r3, r2
 8009088:	d053      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009092:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009096:	d035      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009098:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800909c:	d82e      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800909e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090a2:	d031      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80090a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090a8:	d828      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090ae:	d01a      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80090b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090b4:	d822      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80090ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090be:	d007      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80090c0:	e01c      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c2:	4b32      	ldr	r3, [pc, #200]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c6:	4a31      	ldr	r2, [pc, #196]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090ce:	e01c      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d4:	3308      	adds	r3, #8
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 fa55 	bl	800b588 <RCCEx_PLL2_Config>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80090e4:	e011      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	3328      	adds	r3, #40	@ 0x28
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 fafc 	bl	800b6ec <RCCEx_PLL3_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090fa:	e006      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009102:	e002      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009104:	bf00      	nop
 8009106:	e000      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10b      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009112:	4b1e      	ldr	r3, [pc, #120]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009116:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009122:	4a1a      	ldr	r2, [pc, #104]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009124:	430b      	orrs	r3, r1
 8009126:	6593      	str	r3, [r2, #88]	@ 0x58
 8009128:	e003      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800912e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800913e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009148:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800914c:	460b      	mov	r3, r1
 800914e:	4313      	orrs	r3, r2
 8009150:	d056      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800915a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800915e:	d038      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009164:	d831      	bhi.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009166:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800916a:	d034      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800916c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009170:	d82b      	bhi.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009176:	d01d      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009178:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800917c:	d825      	bhi.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d006      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009186:	d00a      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009188:	e01f      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800918a:	bf00      	nop
 800918c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009190:	4ba2      	ldr	r3, [pc, #648]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009194:	4aa1      	ldr	r2, [pc, #644]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800919a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800919c:	e01c      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a2:	3308      	adds	r3, #8
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f002 f9ee 	bl	800b588 <RCCEx_PLL2_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80091b2:	e011      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b8:	3328      	adds	r3, #40	@ 0x28
 80091ba:	2100      	movs	r1, #0
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 fa95 	bl	800b6ec <RCCEx_PLL3_Config>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091c8:	e006      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091d0:	e002      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091d2:	bf00      	nop
 80091d4:	e000      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091e0:	4b8e      	ldr	r3, [pc, #568]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80091e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091f0:	4a8a      	ldr	r2, [pc, #552]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091f2:	430b      	orrs	r3, r1
 80091f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80091f6:	e003      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800920c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009210:	2300      	movs	r3, #0
 8009212:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009216:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800921a:	460b      	mov	r3, r1
 800921c:	4313      	orrs	r3, r2
 800921e:	d03a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009226:	2b30      	cmp	r3, #48	@ 0x30
 8009228:	d01f      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800922a:	2b30      	cmp	r3, #48	@ 0x30
 800922c:	d819      	bhi.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800922e:	2b20      	cmp	r3, #32
 8009230:	d00c      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009232:	2b20      	cmp	r3, #32
 8009234:	d815      	bhi.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d019      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800923a:	2b10      	cmp	r3, #16
 800923c:	d111      	bne.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800923e:	4b77      	ldr	r3, [pc, #476]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009242:	4a76      	ldr	r2, [pc, #472]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009248:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800924a:	e011      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009250:	3308      	adds	r3, #8
 8009252:	2102      	movs	r1, #2
 8009254:	4618      	mov	r0, r3
 8009256:	f002 f997 	bl	800b588 <RCCEx_PLL2_Config>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009260:	e006      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009268:	e002      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800926a:	bf00      	nop
 800926c:	e000      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800926e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009278:	4b68      	ldr	r3, [pc, #416]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800927a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800927c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009286:	4a65      	ldr	r2, [pc, #404]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009288:	430b      	orrs	r3, r1
 800928a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800928c:	e003      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80092a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80092a6:	2300      	movs	r3, #0
 80092a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4313      	orrs	r3, r2
 80092b4:	d051      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80092b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c0:	d035      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80092c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c6:	d82e      	bhi.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092cc:	d031      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80092ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092d2:	d828      	bhi.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d8:	d01a      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80092da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092de:	d822      	bhi.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80092e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e8:	d007      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80092ea:	e01c      	b.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ec:	4b4b      	ldr	r3, [pc, #300]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f0:	4a4a      	ldr	r2, [pc, #296]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092f8:	e01c      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	3308      	adds	r3, #8
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f002 f940 	bl	800b588 <RCCEx_PLL2_Config>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800930e:	e011      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009314:	3328      	adds	r3, #40	@ 0x28
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f002 f9e7 	bl	800b6ec <RCCEx_PLL3_Config>
 800931e:	4603      	mov	r3, r0
 8009320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009324:	e006      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800932c:	e002      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800932e:	bf00      	nop
 8009330:	e000      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800933c:	4b37      	ldr	r3, [pc, #220]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800933e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009340:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800934a:	4a34      	ldr	r2, [pc, #208]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800934c:	430b      	orrs	r3, r1
 800934e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009350:	e003      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009366:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800936a:	2300      	movs	r3, #0
 800936c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009370:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009374:	460b      	mov	r3, r1
 8009376:	4313      	orrs	r3, r2
 8009378:	d056      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009384:	d033      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009386:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800938a:	d82c      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800938c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009390:	d02f      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009392:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009396:	d826      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009398:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800939c:	d02b      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800939e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093a2:	d820      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a8:	d012      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80093aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ae:	d81a      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d022      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80093b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093b8:	d115      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093be:	3308      	adds	r3, #8
 80093c0:	2101      	movs	r1, #1
 80093c2:	4618      	mov	r0, r3
 80093c4:	f002 f8e0 	bl	800b588 <RCCEx_PLL2_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093ce:	e015      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d4:	3328      	adds	r3, #40	@ 0x28
 80093d6:	2101      	movs	r1, #1
 80093d8:	4618      	mov	r0, r3
 80093da:	f002 f987 	bl	800b6ec <RCCEx_PLL3_Config>
 80093de:	4603      	mov	r3, r0
 80093e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093e4:	e00a      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093ec:	e006      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ee:	bf00      	nop
 80093f0:	e004      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10d      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009404:	4b05      	ldr	r3, [pc, #20]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009408:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800940c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009412:	4a02      	ldr	r2, [pc, #8]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009414:	430b      	orrs	r3, r1
 8009416:	6513      	str	r3, [r2, #80]	@ 0x50
 8009418:	e006      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800941a:	bf00      	nop
 800941c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009438:	2300      	movs	r3, #0
 800943a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800943e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009442:	460b      	mov	r3, r1
 8009444:	4313      	orrs	r3, r2
 8009446:	d055      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009450:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009454:	d033      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800945a:	d82c      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800945c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009460:	d02f      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009466:	d826      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009468:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800946c:	d02b      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800946e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009472:	d820      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009478:	d012      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800947a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800947e:	d81a      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009480:	2b00      	cmp	r3, #0
 8009482:	d022      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009488:	d115      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948e:	3308      	adds	r3, #8
 8009490:	2101      	movs	r1, #1
 8009492:	4618      	mov	r0, r3
 8009494:	f002 f878 	bl	800b588 <RCCEx_PLL2_Config>
 8009498:	4603      	mov	r3, r0
 800949a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800949e:	e015      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a4:	3328      	adds	r3, #40	@ 0x28
 80094a6:	2101      	movs	r1, #1
 80094a8:	4618      	mov	r0, r3
 80094aa:	f002 f91f 	bl	800b6ec <RCCEx_PLL3_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094b4:	e00a      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094bc:	e006      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094be:	bf00      	nop
 80094c0:	e004      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094c2:	bf00      	nop
 80094c4:	e002      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094c6:	bf00      	nop
 80094c8:	e000      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10b      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80094d4:	4ba3      	ldr	r3, [pc, #652]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094e4:	4a9f      	ldr	r2, [pc, #636]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e6:	430b      	orrs	r3, r1
 80094e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ea:	e003      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009504:	2300      	movs	r3, #0
 8009506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800950a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800950e:	460b      	mov	r3, r1
 8009510:	4313      	orrs	r3, r2
 8009512:	d037      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800951a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800951e:	d00e      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009524:	d816      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d018      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800952a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800952e:	d111      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009530:	4b8c      	ldr	r3, [pc, #560]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009534:	4a8b      	ldr	r2, [pc, #556]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800953a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800953c:	e00f      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800953e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009542:	3308      	adds	r3, #8
 8009544:	2101      	movs	r1, #1
 8009546:	4618      	mov	r0, r3
 8009548:	f002 f81e 	bl	800b588 <RCCEx_PLL2_Config>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009552:	e004      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800955a:	e000      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800955c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800955e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009566:	4b7f      	ldr	r3, [pc, #508]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800956e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009574:	4a7b      	ldr	r2, [pc, #492]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009576:	430b      	orrs	r3, r1
 8009578:	6513      	str	r3, [r2, #80]	@ 0x50
 800957a:	e003      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800957c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009590:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009594:	2300      	movs	r3, #0
 8009596:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800959a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800959e:	460b      	mov	r3, r1
 80095a0:	4313      	orrs	r3, r2
 80095a2:	d039      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80095a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d81c      	bhi.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80095ae:	a201      	add	r2, pc, #4	@ (adr r2, 80095b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	080095f1 	.word	0x080095f1
 80095b8:	080095c5 	.word	0x080095c5
 80095bc:	080095d3 	.word	0x080095d3
 80095c0:	080095f1 	.word	0x080095f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c4:	4b67      	ldr	r3, [pc, #412]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c8:	4a66      	ldr	r2, [pc, #408]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095d0:	e00f      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d6:	3308      	adds	r3, #8
 80095d8:	2102      	movs	r1, #2
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 ffd4 	bl	800b588 <RCCEx_PLL2_Config>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095e6:	e004      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ee:	e000      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80095f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095fa:	4b5a      	ldr	r3, [pc, #360]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095fe:	f023 0103 	bic.w	r1, r3, #3
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009608:	4a56      	ldr	r2, [pc, #344]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800960a:	430b      	orrs	r3, r1
 800960c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800960e:	e003      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009624:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009628:	2300      	movs	r3, #0
 800962a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800962e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009632:	460b      	mov	r3, r1
 8009634:	4313      	orrs	r3, r2
 8009636:	f000 809f 	beq.w	8009778 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800963a:	4b4b      	ldr	r3, [pc, #300]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a4a      	ldr	r2, [pc, #296]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009646:	f7f9 ff89 	bl	800355c <HAL_GetTick>
 800964a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800964e:	e00b      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009650:	f7f9 ff84 	bl	800355c <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b64      	cmp	r3, #100	@ 0x64
 800965e:	d903      	bls.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009666:	e005      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009668:	4b3f      	ldr	r3, [pc, #252]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0ed      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009678:	2b00      	cmp	r3, #0
 800967a:	d179      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800967c:	4b39      	ldr	r3, [pc, #228]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800967e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009684:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009688:	4053      	eors	r3, r2
 800968a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800968e:	2b00      	cmp	r3, #0
 8009690:	d015      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009692:	4b34      	ldr	r3, [pc, #208]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800969a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800969e:	4b31      	ldr	r3, [pc, #196]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096a2:	4a30      	ldr	r2, [pc, #192]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096aa:	4b2e      	ldr	r3, [pc, #184]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ae:	4a2d      	ldr	r2, [pc, #180]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ca:	d118      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096cc:	f7f9 ff46 	bl	800355c <HAL_GetTick>
 80096d0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096d4:	e00d      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096d6:	f7f9 ff41 	bl	800355c <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096e0:	1ad2      	subs	r2, r2, r3
 80096e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d903      	bls.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80096f0:	e005      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0eb      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80096fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009702:	2b00      	cmp	r3, #0
 8009704:	d129      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800970a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800970e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009716:	d10e      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009718:	4b12      	ldr	r3, [pc, #72]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009724:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009728:	091a      	lsrs	r2, r3, #4
 800972a:	4b10      	ldr	r3, [pc, #64]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800972c:	4013      	ands	r3, r2
 800972e:	4a0d      	ldr	r2, [pc, #52]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009730:	430b      	orrs	r3, r1
 8009732:	6113      	str	r3, [r2, #16]
 8009734:	e005      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009736:	4b0b      	ldr	r3, [pc, #44]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	4a0a      	ldr	r2, [pc, #40]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800973c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009740:	6113      	str	r3, [r2, #16]
 8009742:	4b08      	ldr	r3, [pc, #32]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009744:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800974e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009752:	4a04      	ldr	r2, [pc, #16]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009754:	430b      	orrs	r3, r1
 8009756:	6713      	str	r3, [r2, #112]	@ 0x70
 8009758:	e00e      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800975a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800975e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009762:	e009      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009764:	58024400 	.word	0x58024400
 8009768:	58024800 	.word	0x58024800
 800976c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009774:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f002 0301 	and.w	r3, r2, #1
 8009784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009788:	2300      	movs	r3, #0
 800978a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800978e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009792:	460b      	mov	r3, r1
 8009794:	4313      	orrs	r3, r2
 8009796:	f000 8089 	beq.w	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800979a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097a0:	2b28      	cmp	r3, #40	@ 0x28
 80097a2:	d86b      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80097a4:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	08009885 	.word	0x08009885
 80097b0:	0800987d 	.word	0x0800987d
 80097b4:	0800987d 	.word	0x0800987d
 80097b8:	0800987d 	.word	0x0800987d
 80097bc:	0800987d 	.word	0x0800987d
 80097c0:	0800987d 	.word	0x0800987d
 80097c4:	0800987d 	.word	0x0800987d
 80097c8:	0800987d 	.word	0x0800987d
 80097cc:	08009851 	.word	0x08009851
 80097d0:	0800987d 	.word	0x0800987d
 80097d4:	0800987d 	.word	0x0800987d
 80097d8:	0800987d 	.word	0x0800987d
 80097dc:	0800987d 	.word	0x0800987d
 80097e0:	0800987d 	.word	0x0800987d
 80097e4:	0800987d 	.word	0x0800987d
 80097e8:	0800987d 	.word	0x0800987d
 80097ec:	08009867 	.word	0x08009867
 80097f0:	0800987d 	.word	0x0800987d
 80097f4:	0800987d 	.word	0x0800987d
 80097f8:	0800987d 	.word	0x0800987d
 80097fc:	0800987d 	.word	0x0800987d
 8009800:	0800987d 	.word	0x0800987d
 8009804:	0800987d 	.word	0x0800987d
 8009808:	0800987d 	.word	0x0800987d
 800980c:	08009885 	.word	0x08009885
 8009810:	0800987d 	.word	0x0800987d
 8009814:	0800987d 	.word	0x0800987d
 8009818:	0800987d 	.word	0x0800987d
 800981c:	0800987d 	.word	0x0800987d
 8009820:	0800987d 	.word	0x0800987d
 8009824:	0800987d 	.word	0x0800987d
 8009828:	0800987d 	.word	0x0800987d
 800982c:	08009885 	.word	0x08009885
 8009830:	0800987d 	.word	0x0800987d
 8009834:	0800987d 	.word	0x0800987d
 8009838:	0800987d 	.word	0x0800987d
 800983c:	0800987d 	.word	0x0800987d
 8009840:	0800987d 	.word	0x0800987d
 8009844:	0800987d 	.word	0x0800987d
 8009848:	0800987d 	.word	0x0800987d
 800984c:	08009885 	.word	0x08009885
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009854:	3308      	adds	r3, #8
 8009856:	2101      	movs	r1, #1
 8009858:	4618      	mov	r0, r3
 800985a:	f001 fe95 	bl	800b588 <RCCEx_PLL2_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009864:	e00f      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986a:	3328      	adds	r3, #40	@ 0x28
 800986c:	2101      	movs	r1, #1
 800986e:	4618      	mov	r0, r3
 8009870:	f001 ff3c 	bl	800b6ec <RCCEx_PLL3_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800987a:	e004      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009882:	e000      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800988e:	4bbf      	ldr	r3, [pc, #764]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009892:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800989c:	4abb      	ldr	r2, [pc, #748]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800989e:	430b      	orrs	r3, r1
 80098a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80098a2:	e003      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f002 0302 	and.w	r3, r2, #2
 80098b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80098c6:	460b      	mov	r3, r1
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d041      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d824      	bhi.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80098d6:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	08009929 	.word	0x08009929
 80098e0:	080098f5 	.word	0x080098f5
 80098e4:	0800990b 	.word	0x0800990b
 80098e8:	08009929 	.word	0x08009929
 80098ec:	08009929 	.word	0x08009929
 80098f0:	08009929 	.word	0x08009929
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f8:	3308      	adds	r3, #8
 80098fa:	2101      	movs	r1, #1
 80098fc:	4618      	mov	r0, r3
 80098fe:	f001 fe43 	bl	800b588 <RCCEx_PLL2_Config>
 8009902:	4603      	mov	r3, r0
 8009904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009908:	e00f      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800990a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990e:	3328      	adds	r3, #40	@ 0x28
 8009910:	2101      	movs	r1, #1
 8009912:	4618      	mov	r0, r3
 8009914:	f001 feea 	bl	800b6ec <RCCEx_PLL3_Config>
 8009918:	4603      	mov	r3, r0
 800991a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800991e:	e004      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009926:	e000      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800992a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10a      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009932:	4b96      	ldr	r3, [pc, #600]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009936:	f023 0107 	bic.w	r1, r3, #7
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009940:	4a92      	ldr	r2, [pc, #584]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009942:	430b      	orrs	r3, r1
 8009944:	6553      	str	r3, [r2, #84]	@ 0x54
 8009946:	e003      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800994c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f002 0304 	and.w	r3, r2, #4
 800995c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009960:	2300      	movs	r3, #0
 8009962:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009966:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800996a:	460b      	mov	r3, r1
 800996c:	4313      	orrs	r3, r2
 800996e:	d044      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009978:	2b05      	cmp	r3, #5
 800997a:	d825      	bhi.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800997c:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	080099d1 	.word	0x080099d1
 8009988:	0800999d 	.word	0x0800999d
 800998c:	080099b3 	.word	0x080099b3
 8009990:	080099d1 	.word	0x080099d1
 8009994:	080099d1 	.word	0x080099d1
 8009998:	080099d1 	.word	0x080099d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800999c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a0:	3308      	adds	r3, #8
 80099a2:	2101      	movs	r1, #1
 80099a4:	4618      	mov	r0, r3
 80099a6:	f001 fdef 	bl	800b588 <RCCEx_PLL2_Config>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099b0:	e00f      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b6:	3328      	adds	r3, #40	@ 0x28
 80099b8:	2101      	movs	r1, #1
 80099ba:	4618      	mov	r0, r3
 80099bc:	f001 fe96 	bl	800b6ec <RCCEx_PLL3_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099c6:	e004      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099ce:	e000      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80099d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10b      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099da:	4b6c      	ldr	r3, [pc, #432]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099de:	f023 0107 	bic.w	r1, r3, #7
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099ea:	4a68      	ldr	r2, [pc, #416]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80099f0:	e003      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	f002 0320 	and.w	r3, r2, #32
 8009a06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a14:	460b      	mov	r3, r1
 8009a16:	4313      	orrs	r3, r2
 8009a18:	d055      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a26:	d033      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a2c:	d82c      	bhi.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a32:	d02f      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a38:	d826      	bhi.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a3e:	d02b      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a44:	d820      	bhi.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a4a:	d012      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a50:	d81a      	bhi.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d022      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a5a:	d115      	bne.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a60:	3308      	adds	r3, #8
 8009a62:	2100      	movs	r1, #0
 8009a64:	4618      	mov	r0, r3
 8009a66:	f001 fd8f 	bl	800b588 <RCCEx_PLL2_Config>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a70:	e015      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a76:	3328      	adds	r3, #40	@ 0x28
 8009a78:	2102      	movs	r1, #2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 fe36 	bl	800b6ec <RCCEx_PLL3_Config>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a86:	e00a      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a8e:	e006      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a90:	bf00      	nop
 8009a92:	e004      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a94:	bf00      	nop
 8009a96:	e002      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a98:	bf00      	nop
 8009a9a:	e000      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009aa6:	4b39      	ldr	r3, [pc, #228]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aaa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab6:	4a35      	ldr	r2, [pc, #212]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	6553      	str	r3, [r2, #84]	@ 0x54
 8009abc:	e003      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009adc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	d058      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009aee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009af2:	d033      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009af4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009af8:	d82c      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009afe:	d02f      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b04:	d826      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b0a:	d02b      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b10:	d820      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b16:	d012      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b1c:	d81a      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d022      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b26:	d115      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 fd29 	bl	800b588 <RCCEx_PLL2_Config>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b3c:	e015      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b42:	3328      	adds	r3, #40	@ 0x28
 8009b44:	2102      	movs	r1, #2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 fdd0 	bl	800b6ec <RCCEx_PLL3_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b52:	e00a      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b5a:	e006      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b5c:	bf00      	nop
 8009b5e:	e004      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b60:	bf00      	nop
 8009b62:	e002      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b64:	bf00      	nop
 8009b66:	e000      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10e      	bne.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b72:	4b06      	ldr	r3, [pc, #24]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b82:	4a02      	ldr	r2, [pc, #8]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b84:	430b      	orrs	r3, r1
 8009b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b88:	e006      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	d055      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009bc0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009bc4:	d033      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009bc6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009bca:	d82c      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd0:	d02f      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd6:	d826      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bd8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bdc:	d02b      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009bde:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009be2:	d820      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009be4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009be8:	d012      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bee:	d81a      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d022      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bf8:	d115      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfe:	3308      	adds	r3, #8
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 fcc0 	bl	800b588 <RCCEx_PLL2_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c0e:	e015      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c14:	3328      	adds	r3, #40	@ 0x28
 8009c16:	2102      	movs	r1, #2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 fd67 	bl	800b6ec <RCCEx_PLL3_Config>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c24:	e00a      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c2c:	e006      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c2e:	bf00      	nop
 8009c30:	e004      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c32:	bf00      	nop
 8009c34:	e002      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c36:	bf00      	nop
 8009c38:	e000      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c44:	4ba1      	ldr	r3, [pc, #644]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c48:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c54:	4a9d      	ldr	r2, [pc, #628]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c5a:	e003      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f002 0308 	and.w	r3, r2, #8
 8009c70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c74:	2300      	movs	r3, #0
 8009c76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d01e      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c90:	d10c      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c96:	3328      	adds	r3, #40	@ 0x28
 8009c98:	2102      	movs	r1, #2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 fd26 	bl	800b6ec <RCCEx_PLL3_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cac:	4b87      	ldr	r3, [pc, #540]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cb0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cbc:	4a83      	ldr	r2, [pc, #524]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cbe:	430b      	orrs	r3, r1
 8009cc0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f002 0310 	and.w	r3, r2, #16
 8009cce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009cd8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	d01e      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cee:	d10c      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf4:	3328      	adds	r3, #40	@ 0x28
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fcf7 	bl	800b6ec <RCCEx_PLL3_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d0a:	4b70      	ldr	r3, [pc, #448]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d30:	2300      	movs	r3, #0
 8009d32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d36:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	d03e      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d4c:	d022      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d52:	d81b      	bhi.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d5c:	d00b      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009d5e:	e015      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d64:	3308      	adds	r3, #8
 8009d66:	2100      	movs	r1, #0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f001 fc0d 	bl	800b588 <RCCEx_PLL2_Config>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d74:	e00f      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7a:	3328      	adds	r3, #40	@ 0x28
 8009d7c:	2102      	movs	r1, #2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 fcb4 	bl	800b6ec <RCCEx_PLL3_Config>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d8a:	e004      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d92:	e000      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10b      	bne.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dae:	4a47      	ldr	r2, [pc, #284]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009db0:	430b      	orrs	r3, r1
 8009db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009db4:	e003      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009dca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dcc:	2300      	movs	r3, #0
 8009dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dd0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	d03b      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009de6:	d01f      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009de8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009dec:	d818      	bhi.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009df2:	d003      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009df4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009df8:	d007      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009dfa:	e011      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfc:	4b33      	ldr	r3, [pc, #204]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e00:	4a32      	ldr	r2, [pc, #200]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e08:	e00f      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e0e:	3328      	adds	r3, #40	@ 0x28
 8009e10:	2101      	movs	r1, #1
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 fc6a 	bl	800b6ec <RCCEx_PLL3_Config>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e1e:	e004      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e26:	e000      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10b      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e32:	4b26      	ldr	r3, [pc, #152]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e42:	4a22      	ldr	r2, [pc, #136]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e44:	430b      	orrs	r3, r1
 8009e46:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e48:	e003      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e60:	2300      	movs	r3, #0
 8009e62:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	d034      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e7c:	d007      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e7e:	e011      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e80:	4b12      	ldr	r3, [pc, #72]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e84:	4a11      	ldr	r2, [pc, #68]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e8c:	e00e      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e92:	3308      	adds	r3, #8
 8009e94:	2102      	movs	r1, #2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fb76 	bl	800b588 <RCCEx_PLL2_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ea2:	e003      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10d      	bne.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009eb4:	4b05      	ldr	r3, [pc, #20]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec2:	4a02      	ldr	r2, [pc, #8]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ec8:	e006      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009eca:	bf00      	nop
 8009ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009eea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	d00c      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef8:	3328      	adds	r3, #40	@ 0x28
 8009efa:	2102      	movs	r1, #2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f001 fbf5 	bl	800b6ec <RCCEx_PLL3_Config>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d002      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f24:	460b      	mov	r3, r1
 8009f26:	4313      	orrs	r3, r2
 8009f28:	d038      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f36:	d018      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f3c:	d811      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f42:	d014      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f48:	d80b      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d011      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f52:	d106      	bne.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f54:	4bc3      	ldr	r3, [pc, #780]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f58:	4ac2      	ldr	r2, [pc, #776]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f60:	e008      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f68:	e004      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f6a:	bf00      	nop
 8009f6c:	e002      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f6e:	bf00      	nop
 8009f70:	e000      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10b      	bne.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f7c:	4bb9      	ldr	r3, [pc, #740]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f8c:	4ab5      	ldr	r2, [pc, #724]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f8e:	430b      	orrs	r3, r1
 8009f90:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f92:	e003      	b.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009faa:	2300      	movs	r3, #0
 8009fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	d009      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fb8:	4baa      	ldr	r3, [pc, #680]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fc6:	4aa7      	ldr	r2, [pc, #668]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fda:	2300      	movs	r3, #0
 8009fdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fde:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	d00a      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009fe8:	4b9e      	ldr	r3, [pc, #632]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ff8:	4a9a      	ldr	r2, [pc, #616]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ffa:	430b      	orrs	r3, r1
 8009ffc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a00a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a00c:	2300      	movs	r3, #0
 800a00e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a010:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a014:	460b      	mov	r3, r1
 800a016:	4313      	orrs	r3, r2
 800a018:	d009      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a01a:	4b92      	ldr	r3, [pc, #584]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a01e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a028:	4a8e      	ldr	r2, [pc, #568]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a02a:	430b      	orrs	r3, r1
 800a02c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a03a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a03c:	2300      	movs	r3, #0
 800a03e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a040:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a044:	460b      	mov	r3, r1
 800a046:	4313      	orrs	r3, r2
 800a048:	d00e      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a04a:	4b86      	ldr	r3, [pc, #536]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	4a85      	ldr	r2, [pc, #532]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a050:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a054:	6113      	str	r3, [r2, #16]
 800a056:	4b83      	ldr	r3, [pc, #524]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a058:	6919      	ldr	r1, [r3, #16]
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a062:	4a80      	ldr	r2, [pc, #512]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a064:	430b      	orrs	r3, r1
 800a066:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a074:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a076:	2300      	movs	r3, #0
 800a078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a07a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a07e:	460b      	mov	r3, r1
 800a080:	4313      	orrs	r3, r2
 800a082:	d009      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a084:	4b77      	ldr	r3, [pc, #476]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a088:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a092:	4a74      	ldr	r2, [pc, #464]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a094:	430b      	orrs	r3, r1
 800a096:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a0a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	d00a      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a0b4:	4b6b      	ldr	r3, [pc, #428]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0c4:	4a67      	ldr	r2, [pc, #412]	@ (800a264 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0c6:	430b      	orrs	r3, r1
 800a0c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	d011      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 fa4a 	bl	800b588 <RCCEx_PLL2_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	2100      	movs	r1, #0
 800a114:	6239      	str	r1, [r7, #32]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a11c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a120:	460b      	mov	r3, r1
 800a122:	4313      	orrs	r3, r2
 800a124:	d011      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12a:	3308      	adds	r3, #8
 800a12c:	2101      	movs	r1, #1
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fa2a 	bl	800b588 <RCCEx_PLL2_Config>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a13a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	2100      	movs	r1, #0
 800a154:	61b9      	str	r1, [r7, #24]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a160:	460b      	mov	r3, r1
 800a162:	4313      	orrs	r3, r2
 800a164:	d011      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16a:	3308      	adds	r3, #8
 800a16c:	2102      	movs	r1, #2
 800a16e:	4618      	mov	r0, r3
 800a170:	f001 fa0a 	bl	800b588 <RCCEx_PLL2_Config>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a17a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	2100      	movs	r1, #0
 800a194:	6139      	str	r1, [r7, #16]
 800a196:	f003 0308 	and.w	r3, r3, #8
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	d011      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1aa:	3328      	adds	r3, #40	@ 0x28
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 fa9c 	bl	800b6ec <RCCEx_PLL3_Config>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	f003 0310 	and.w	r3, r3, #16
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	d011      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ea:	3328      	adds	r3, #40	@ 0x28
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fa7c 	bl	800b6ec <RCCEx_PLL3_Config>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	2100      	movs	r1, #0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	607b      	str	r3, [r7, #4]
 800a21c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a220:	460b      	mov	r3, r1
 800a222:	4313      	orrs	r3, r2
 800a224:	d011      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22a:	3328      	adds	r3, #40	@ 0x28
 800a22c:	2102      	movs	r1, #2
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 fa5c 	bl	800b6ec <RCCEx_PLL3_Config>
 800a234:	4603      	mov	r3, r0
 800a236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a23a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a24a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	e000      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
}
 800a258:	4618      	mov	r0, r3
 800a25a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a25e:	46bd      	mov	sp, r7
 800a260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a264:	58024400 	.word	0x58024400

0800a268 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b090      	sub	sp, #64	@ 0x40
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a272:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a276:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a27a:	430b      	orrs	r3, r1
 800a27c:	f040 8094 	bne.w	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a280:	4b9e      	ldr	r3, [pc, #632]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a284:	f003 0307 	and.w	r3, r3, #7
 800a288:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	f200 8087 	bhi.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a292:	a201      	add	r2, pc, #4	@ (adr r2, 800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a298:	0800a2ad 	.word	0x0800a2ad
 800a29c:	0800a2d5 	.word	0x0800a2d5
 800a2a0:	0800a2fd 	.word	0x0800a2fd
 800a2a4:	0800a399 	.word	0x0800a399
 800a2a8:	0800a325 	.word	0x0800a325
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ac:	4b93      	ldr	r3, [pc, #588]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2b8:	d108      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f001 f810 	bl	800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c8:	f000 bd45 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d0:	f000 bd41 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2d4:	4b89      	ldr	r3, [pc, #548]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2e0:	d108      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2e2:	f107 0318 	add.w	r3, r7, #24
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fd54 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2f0:	f000 bd31 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f8:	f000 bd2d 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2fc:	4b7f      	ldr	r3, [pc, #508]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a308:	d108      	bne.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a30a:	f107 030c 	add.w	r3, r7, #12
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 fe94 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a318:	f000 bd1d 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a31c:	2300      	movs	r3, #0
 800a31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a320:	f000 bd19 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a324:	4b75      	ldr	r3, [pc, #468]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a328:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a32e:	4b73      	ldr	r3, [pc, #460]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0304 	and.w	r3, r3, #4
 800a336:	2b04      	cmp	r3, #4
 800a338:	d10c      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a340:	4b6e      	ldr	r3, [pc, #440]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	08db      	lsrs	r3, r3, #3
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	4a6d      	ldr	r2, [pc, #436]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
 800a350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a352:	e01f      	b.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a354:	4b69      	ldr	r3, [pc, #420]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a35c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a360:	d106      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a368:	d102      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a36a:	4b66      	ldr	r3, [pc, #408]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a36e:	e011      	b.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a370:	4b62      	ldr	r3, [pc, #392]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a37c:	d106      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a384:	d102      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a386:	4b60      	ldr	r3, [pc, #384]	@ (800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a38a:	e003      	b.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a390:	f000 bce1 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a394:	f000 bcdf 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a398:	4b5c      	ldr	r3, [pc, #368]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a39c:	f000 bcdb 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a4:	f000 bcd7 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	f040 80ad 	bne.w	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a3b6:	4b51      	ldr	r3, [pc, #324]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a3be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c6:	d056      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ce:	f200 8090 	bhi.w	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3d6:	f000 8088 	beq.w	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3de:	f200 8088 	bhi.w	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	2b80      	cmp	r3, #128	@ 0x80
 800a3e6:	d032      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	2b80      	cmp	r3, #128	@ 0x80
 800a3ec:	f200 8081 	bhi.w	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	2b40      	cmp	r3, #64	@ 0x40
 800a3fa:	d014      	beq.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a3fc:	e079      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a406:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a40a:	d108      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a40c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a410:	4618      	mov	r0, r3
 800a412:	f000 ff67 	bl	800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a41a:	f000 bc9c 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a422:	f000 bc98 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a426:	4b35      	ldr	r3, [pc, #212]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a42e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a432:	d108      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a434:	f107 0318 	add.w	r3, r7, #24
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fcab 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a442:	f000 bc88 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44a:	f000 bc84 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a44e:	4b2b      	ldr	r3, [pc, #172]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45a:	d108      	bne.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45c:	f107 030c 	add.w	r3, r7, #12
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fdeb 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	f000 bc74 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a472:	f000 bc70 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a476:	4b21      	ldr	r3, [pc, #132]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a47a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a47e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a480:	4b1e      	ldr	r3, [pc, #120]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b04      	cmp	r3, #4
 800a48a:	d10c      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d109      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a492:	4b1a      	ldr	r3, [pc, #104]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	08db      	lsrs	r3, r3, #3
 800a498:	f003 0303 	and.w	r3, r3, #3
 800a49c:	4a18      	ldr	r2, [pc, #96]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a49e:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a4:	e01f      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4a6:	4b15      	ldr	r3, [pc, #84]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4b2:	d106      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ba:	d102      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4bc:	4b11      	ldr	r3, [pc, #68]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c0:	e011      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ce:	d106      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4d6:	d102      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4dc:	e003      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4e2:	f000 bc38 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4e6:	f000 bc36 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4ea:	4b08      	ldr	r3, [pc, #32]	@ (800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ee:	f000 bc32 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f6:	f000 bc2e 	b.w	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4fa:	bf00      	nop
 800a4fc:	58024400 	.word	0x58024400
 800a500:	03d09000 	.word	0x03d09000
 800a504:	003d0900 	.word	0x003d0900
 800a508:	007a1200 	.word	0x007a1200
 800a50c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a514:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a518:	430b      	orrs	r3, r1
 800a51a:	f040 809c 	bne.w	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a51e:	4b9e      	ldr	r3, [pc, #632]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a522:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a526:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a52e:	d054      	beq.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a536:	f200 808b 	bhi.w	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a540:	f000 8083 	beq.w	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a546:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a54a:	f200 8081 	bhi.w	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a554:	d02f      	beq.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a55c:	d878      	bhi.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a560:	2b00      	cmp	r3, #0
 800a562:	d004      	beq.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a56a:	d012      	beq.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a56c:	e070      	b.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a56e:	4b8a      	ldr	r3, [pc, #552]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a576:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a57a:	d107      	bne.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a57c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a580:	4618      	mov	r0, r3
 800a582:	f000 feaf 	bl	800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58a:	e3e4      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a590:	e3e1      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a592:	4b81      	ldr	r3, [pc, #516]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a59a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a59e:	d107      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a0:	f107 0318 	add.w	r3, r7, #24
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fbf5 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ae:	e3d2      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b4:	e3cf      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5b6:	4b78      	ldr	r3, [pc, #480]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5c2:	d107      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5c4:	f107 030c 	add.w	r3, r7, #12
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fd37 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d2:	e3c0      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d8:	e3bd      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5da:	4b6f      	ldr	r3, [pc, #444]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5e4:	4b6c      	ldr	r3, [pc, #432]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d10c      	bne.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d109      	bne.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5f6:	4b68      	ldr	r3, [pc, #416]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	08db      	lsrs	r3, r3, #3
 800a5fc:	f003 0303 	and.w	r3, r3, #3
 800a600:	4a66      	ldr	r2, [pc, #408]	@ (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a602:	fa22 f303 	lsr.w	r3, r2, r3
 800a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a608:	e01e      	b.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a60a:	4b63      	ldr	r3, [pc, #396]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a616:	d106      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a61e:	d102      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a620:	4b5f      	ldr	r3, [pc, #380]	@ (800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a624:	e010      	b.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a626:	4b5c      	ldr	r3, [pc, #368]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a62e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a632:	d106      	bne.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a63a:	d102      	bne.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a63c:	4b59      	ldr	r3, [pc, #356]	@ (800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a640:	e002      	b.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a646:	e386      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a648:	e385      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a64a:	4b57      	ldr	r3, [pc, #348]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64e:	e382      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a654:	e37f      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a65a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a65e:	430b      	orrs	r3, r1
 800a660:	f040 80a7 	bne.w	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a664:	4b4c      	ldr	r3, [pc, #304]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a668:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a66c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a674:	d055      	beq.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a67c:	f200 8096 	bhi.w	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a686:	f000 8084 	beq.w	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a690:	f200 808c 	bhi.w	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a69a:	d030      	beq.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6a2:	f200 8083 	bhi.w	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6b2:	d012      	beq.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a6b4:	e07a      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6b6:	4b38      	ldr	r3, [pc, #224]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6c2:	d107      	bne.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fe0b 	bl	800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d2:	e340      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d8:	e33d      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6da:	4b2f      	ldr	r3, [pc, #188]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6e6:	d107      	bne.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e8:	f107 0318 	add.w	r3, r7, #24
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fb51 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f6:	e32e      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fc:	e32b      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6fe:	4b26      	ldr	r3, [pc, #152]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a70a:	d107      	bne.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70c:	f107 030c 	add.w	r3, r7, #12
 800a710:	4618      	mov	r0, r3
 800a712:	f000 fc93 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a71a:	e31c      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a720:	e319      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a722:	4b1d      	ldr	r3, [pc, #116]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a726:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a72a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a72c:	4b1a      	ldr	r3, [pc, #104]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b04      	cmp	r3, #4
 800a736:	d10c      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d109      	bne.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a73e:	4b16      	ldr	r3, [pc, #88]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	08db      	lsrs	r3, r3, #3
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	4a14      	ldr	r2, [pc, #80]	@ (800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a74a:	fa22 f303 	lsr.w	r3, r2, r3
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a750:	e01e      	b.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a752:	4b11      	ldr	r3, [pc, #68]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a75a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a75e:	d106      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a766:	d102      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a768:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a76c:	e010      	b.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a76e:	4b0a      	ldr	r3, [pc, #40]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a776:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a77a:	d106      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a782:	d102      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a784:	4b07      	ldr	r3, [pc, #28]	@ (800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a788:	e002      	b.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a78e:	e2e2      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a790:	e2e1      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a792:	4b05      	ldr	r3, [pc, #20]	@ (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a796:	e2de      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a798:	58024400 	.word	0x58024400
 800a79c:	03d09000 	.word	0x03d09000
 800a7a0:	003d0900 	.word	0x003d0900
 800a7a4:	007a1200 	.word	0x007a1200
 800a7a8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b0:	e2d1      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a7b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a7ba:	430b      	orrs	r3, r1
 800a7bc:	f040 809c 	bne.w	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a7c0:	4b93      	ldr	r3, [pc, #588]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a7c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7d0:	d054      	beq.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7d8:	f200 808b 	bhi.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7e2:	f000 8083 	beq.w	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7ec:	f200 8081 	bhi.w	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7f6:	d02f      	beq.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7fe:	d878      	bhi.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a802:	2b00      	cmp	r3, #0
 800a804:	d004      	beq.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a80c:	d012      	beq.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a80e:	e070      	b.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a810:	4b7f      	ldr	r3, [pc, #508]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a818:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a81c:	d107      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a81e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fd5e 	bl	800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82c:	e293      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a832:	e290      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a834:	4b76      	ldr	r3, [pc, #472]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a83c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a840:	d107      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a842:	f107 0318 	add.w	r3, r7, #24
 800a846:	4618      	mov	r0, r3
 800a848:	f000 faa4 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a850:	e281      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a856:	e27e      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a858:	4b6d      	ldr	r3, [pc, #436]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a864:	d107      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a866:	f107 030c 	add.w	r3, r7, #12
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fbe6 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a874:	e26f      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a87a:	e26c      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a87c:	4b64      	ldr	r3, [pc, #400]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a87e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a880:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a884:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a886:	4b62      	ldr	r3, [pc, #392]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d10c      	bne.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a894:	2b00      	cmp	r3, #0
 800a896:	d109      	bne.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a898:	4b5d      	ldr	r3, [pc, #372]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	08db      	lsrs	r3, r3, #3
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	4a5c      	ldr	r2, [pc, #368]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8aa:	e01e      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8ac:	4b58      	ldr	r3, [pc, #352]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b8:	d106      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a8ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8c0:	d102      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8c2:	4b55      	ldr	r3, [pc, #340]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8c6:	e010      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8c8:	4b51      	ldr	r3, [pc, #324]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8d4:	d106      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8dc:	d102      	bne.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8de:	4b4f      	ldr	r3, [pc, #316]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8e2:	e002      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8e8:	e235      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8ea:	e234      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	@ (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f0:	e231      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f6:	e22e      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8fc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a900:	430b      	orrs	r3, r1
 800a902:	f040 808f 	bne.w	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a906:	4b42      	ldr	r3, [pc, #264]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a90a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a90e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a912:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a916:	d06b      	beq.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a91e:	d874      	bhi.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a926:	d056      	beq.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a92e:	d86c      	bhi.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a936:	d03b      	beq.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a93e:	d864      	bhi.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a946:	d021      	beq.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a94e:	d85c      	bhi.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a95c:	d004      	beq.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a95e:	e054      	b.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a960:	f7fe fa0a 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 800a964:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a966:	e1f6      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a968:	4b29      	ldr	r3, [pc, #164]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a974:	d107      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a976:	f107 0318 	add.w	r3, r7, #24
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 fa0a 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a984:	e1e7      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98a:	e1e4      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a98c:	4b20      	ldr	r3, [pc, #128]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a998:	d107      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99a:	f107 030c 	add.w	r3, r7, #12
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fb4c 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a8:	e1d5      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ae:	e1d2      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9b0:	4b17      	ldr	r3, [pc, #92]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	d109      	bne.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9bc:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	08db      	lsrs	r3, r3, #3
 800a9c2:	f003 0303 	and.w	r3, r3, #3
 800a9c6:	4a13      	ldr	r2, [pc, #76]	@ (800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ce:	e1c2      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d4:	e1bf      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9e2:	d102      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e8:	e1b5      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ee:	e1b2      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9f0:	4b07      	ldr	r3, [pc, #28]	@ (800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9fc:	d102      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a9fe:	4b07      	ldr	r3, [pc, #28]	@ (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa02:	e1a8      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa08:	e1a5      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa0e:	e1a2      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa10:	58024400 	.word	0x58024400
 800aa14:	03d09000 	.word	0x03d09000
 800aa18:	003d0900 	.word	0x003d0900
 800aa1c:	007a1200 	.word	0x007a1200
 800aa20:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa28:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	d173      	bne.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa30:	4b9c      	ldr	r3, [pc, #624]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa40:	d02f      	beq.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa48:	d863      	bhi.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d004      	beq.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa56:	d012      	beq.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aa58:	e05b      	b.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa5a:	4b92      	ldr	r3, [pc, #584]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa66:	d107      	bne.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa68:	f107 0318 	add.w	r3, r7, #24
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 f991 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa76:	e16e      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa7c:	e16b      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa7e:	4b89      	ldr	r3, [pc, #548]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa8a:	d107      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa8c:	f107 030c 	add.w	r3, r7, #12
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fad3 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa9a:	e15c      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa0:	e159      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aaa2:	4b80      	ldr	r3, [pc, #512]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaac:	4b7d      	ldr	r3, [pc, #500]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	d10c      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d109      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aabe:	4b79      	ldr	r3, [pc, #484]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	08db      	lsrs	r3, r3, #3
 800aac4:	f003 0303 	and.w	r3, r3, #3
 800aac8:	4a77      	ldr	r2, [pc, #476]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaca:	fa22 f303 	lsr.w	r3, r2, r3
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aad0:	e01e      	b.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aad2:	4b74      	ldr	r3, [pc, #464]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aade:	d106      	bne.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aae6:	d102      	bne.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aae8:	4b70      	ldr	r3, [pc, #448]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaec:	e010      	b.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaee:	4b6d      	ldr	r3, [pc, #436]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aafa:	d106      	bne.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab02:	d102      	bne.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab04:	4b6a      	ldr	r3, [pc, #424]	@ (800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab08:	e002      	b.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab0e:	e122      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab10:	e121      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab16:	e11e      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab20:	430b      	orrs	r3, r1
 800ab22:	d133      	bne.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ab24:	4b5f      	ldr	r3, [pc, #380]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab3a:	d012      	beq.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ab3c:	e023      	b.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab3e:	4b59      	ldr	r3, [pc, #356]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab4a:	d107      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 fbc7 	bl	800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab5a:	e0fc      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab60:	e0f9      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab62:	4b50      	ldr	r3, [pc, #320]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab6e:	d107      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab70:	f107 0318 	add.w	r3, r7, #24
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 f90d 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab7e:	e0ea      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab84:	e0e7      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8a:	e0e4      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab90:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ab94:	430b      	orrs	r3, r1
 800ab96:	f040 808d 	bne.w	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ab9a:	4b42      	ldr	r3, [pc, #264]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab9e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aba2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abaa:	d06b      	beq.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800abac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abb2:	d874      	bhi.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abba:	d056      	beq.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abc2:	d86c      	bhi.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abca:	d03b      	beq.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abd2:	d864      	bhi.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abda:	d021      	beq.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800abdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe2:	d85c      	bhi.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d004      	beq.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800abea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abf0:	d004      	beq.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800abf2:	e054      	b.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800abf4:	f000 f8b8 	bl	800ad68 <HAL_RCCEx_GetD3PCLK1Freq>
 800abf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abfa:	e0ac      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abfc:	4b29      	ldr	r3, [pc, #164]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac08:	d107      	bne.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac0a:	f107 0318 	add.w	r3, r7, #24
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 f8c0 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac18:	e09d      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1e:	e09a      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac20:	4b20      	ldr	r3, [pc, #128]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac2c:	d107      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac2e:	f107 030c 	add.w	r3, r7, #12
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fa02 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac3c:	e08b      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac42:	e088      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac44:	4b17      	ldr	r3, [pc, #92]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d109      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac50:	4b14      	ldr	r3, [pc, #80]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	08db      	lsrs	r3, r3, #3
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	4a13      	ldr	r2, [pc, #76]	@ (800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac62:	e078      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac68:	e075      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac76:	d102      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ac78:	4b0c      	ldr	r3, [pc, #48]	@ (800acac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac7c:	e06b      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac82:	e068      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac84:	4b07      	ldr	r3, [pc, #28]	@ (800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac90:	d102      	bne.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ac92:	4b07      	ldr	r3, [pc, #28]	@ (800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac96:	e05e      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac9c:	e05b      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca2:	e058      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aca4:	58024400 	.word	0x58024400
 800aca8:	03d09000 	.word	0x03d09000
 800acac:	003d0900 	.word	0x003d0900
 800acb0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800acb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acb8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800acbc:	430b      	orrs	r3, r1
 800acbe:	d148      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800acc0:	4b27      	ldr	r3, [pc, #156]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800accc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acd0:	d02a      	beq.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800acd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acd8:	d838      	bhi.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800acda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ace0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ace6:	d00d      	beq.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ace8:	e030      	b.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acea:	4b1d      	ldr	r3, [pc, #116]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acf6:	d102      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800acf8:	4b1a      	ldr	r3, [pc, #104]	@ (800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acfc:	e02b      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad02:	e028      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad04:	4b16      	ldr	r3, [pc, #88]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad10:	d107      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fae4 	bl	800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad20:	e019      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad26:	e016      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad28:	4b0d      	ldr	r3, [pc, #52]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad34:	d107      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad36:	f107 0318 	add.w	r3, r7, #24
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 f82a 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad44:	e007      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad4a:	e004      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad50:	e001      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ad56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3740      	adds	r7, #64	@ 0x40
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	58024400 	.word	0x58024400
 800ad64:	007a1200 	.word	0x007a1200

0800ad68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad6c:	f7fd ffd4 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 800ad70:	4602      	mov	r2, r0
 800ad72:	4b06      	ldr	r3, [pc, #24]	@ (800ad8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	091b      	lsrs	r3, r3, #4
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	4904      	ldr	r1, [pc, #16]	@ (800ad90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad7e:	5ccb      	ldrb	r3, [r1, r3]
 800ad80:	f003 031f 	and.w	r3, r3, #31
 800ad84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	08023548 	.word	0x08023548

0800ad94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b089      	sub	sp, #36	@ 0x24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad9c:	4ba1      	ldr	r3, [pc, #644]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ada6:	4b9f      	ldr	r3, [pc, #636]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ada8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adaa:	0b1b      	lsrs	r3, r3, #12
 800adac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adb2:	4b9c      	ldr	r3, [pc, #624]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb6:	091b      	lsrs	r3, r3, #4
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800adbe:	4b99      	ldr	r3, [pc, #612]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adc2:	08db      	lsrs	r3, r3, #3
 800adc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	fb02 f303 	mul.w	r3, r2, r3
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8111 	beq.w	800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	f000 8083 	beq.w	800aef0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2b02      	cmp	r3, #2
 800adee:	f200 80a1 	bhi.w	800af34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d003      	beq.n	800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d056      	beq.n	800aeac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800adfe:	e099      	b.n	800af34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae00:	4b88      	ldr	r3, [pc, #544]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0320 	and.w	r3, r3, #32
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d02d      	beq.n	800ae68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae0c:	4b85      	ldr	r3, [pc, #532]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	08db      	lsrs	r3, r3, #3
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	4a84      	ldr	r2, [pc, #528]	@ (800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae18:	fa22 f303 	lsr.w	r3, r2, r3
 800ae1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	ee07 3a90 	vmov	s15, r3
 800ae24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	ee07 3a90 	vmov	s15, r3
 800ae2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae36:	4b7b      	ldr	r3, [pc, #492]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae66:	e087      	b.n	800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae7a:	4b6a      	ldr	r3, [pc, #424]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeaa:	e065      	b.n	800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aeba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aebe:	4b59      	ldr	r3, [pc, #356]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aece:	ed97 6a03 	vldr	s12, [r7, #12]
 800aed2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeee:	e043      	b.n	800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b038 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aefe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af02:	4b48      	ldr	r3, [pc, #288]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af12:	ed97 6a03 	vldr	s12, [r7, #12]
 800af16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af32:	e021      	b.n	800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af46:	4b37      	ldr	r3, [pc, #220]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4e:	ee07 3a90 	vmov	s15, r3
 800af52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af56:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800af78:	4b2a      	ldr	r3, [pc, #168]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7c:	0a5b      	lsrs	r3, r3, #9
 800af7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af92:	edd7 6a07 	vldr	s13, [r7, #28]
 800af96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af9e:	ee17 2a90 	vmov	r2, s15
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800afa6:	4b1f      	ldr	r3, [pc, #124]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afaa:	0c1b      	lsrs	r3, r3, #16
 800afac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afb0:	ee07 3a90 	vmov	s15, r3
 800afb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afcc:	ee17 2a90 	vmov	r2, s15
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800afd4:	4b13      	ldr	r3, [pc, #76]	@ (800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd8:	0e1b      	lsrs	r3, r3, #24
 800afda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afee:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800affa:	ee17 2a90 	vmov	r2, s15
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b002:	e008      	b.n	800b016 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	609a      	str	r2, [r3, #8]
}
 800b016:	bf00      	nop
 800b018:	3724      	adds	r7, #36	@ 0x24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	58024400 	.word	0x58024400
 800b028:	03d09000 	.word	0x03d09000
 800b02c:	46000000 	.word	0x46000000
 800b030:	4c742400 	.word	0x4c742400
 800b034:	4a742400 	.word	0x4a742400
 800b038:	4af42400 	.word	0x4af42400

0800b03c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b089      	sub	sp, #36	@ 0x24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b044:	4ba1      	ldr	r3, [pc, #644]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b048:	f003 0303 	and.w	r3, r3, #3
 800b04c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b04e:	4b9f      	ldr	r3, [pc, #636]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b052:	0d1b      	lsrs	r3, r3, #20
 800b054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b058:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b05a:	4b9c      	ldr	r3, [pc, #624]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05e:	0a1b      	lsrs	r3, r3, #8
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b066:	4b99      	ldr	r3, [pc, #612]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b06a:	08db      	lsrs	r3, r3, #3
 800b06c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	fb02 f303 	mul.w	r3, r2, r3
 800b076:	ee07 3a90 	vmov	s15, r3
 800b07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 8111 	beq.w	800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	f000 8083 	beq.w	800b198 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	2b02      	cmp	r3, #2
 800b096:	f200 80a1 	bhi.w	800b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d056      	beq.n	800b154 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0a6:	e099      	b.n	800b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0a8:	4b88      	ldr	r3, [pc, #544]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0320 	and.w	r3, r3, #32
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d02d      	beq.n	800b110 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0b4:	4b85      	ldr	r3, [pc, #532]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	08db      	lsrs	r3, r3, #3
 800b0ba:	f003 0303 	and.w	r3, r3, #3
 800b0be:	4a84      	ldr	r2, [pc, #528]	@ (800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	ee07 3a90 	vmov	s15, r3
 800b0cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0de:	4b7b      	ldr	r3, [pc, #492]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b10e:	e087      	b.n	800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b122:	4b6a      	ldr	r3, [pc, #424]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b132:	ed97 6a03 	vldr	s12, [r7, #12]
 800b136:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b152:	e065      	b.n	800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b2dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b166:	4b59      	ldr	r3, [pc, #356]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16e:	ee07 3a90 	vmov	s15, r3
 800b172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b176:	ed97 6a03 	vldr	s12, [r7, #12]
 800b17a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b196:	e043      	b.n	800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1aa:	4b48      	ldr	r3, [pc, #288]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b2:	ee07 3a90 	vmov	s15, r3
 800b1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1da:	e021      	b.n	800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b2dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ee:	4b37      	ldr	r3, [pc, #220]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b202:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b21e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b220:	4b2a      	ldr	r3, [pc, #168]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b224:	0a5b      	lsrs	r3, r3, #9
 800b226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b23a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b23e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b246:	ee17 2a90 	vmov	r2, s15
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b24e:	4b1f      	ldr	r3, [pc, #124]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b252:	0c1b      	lsrs	r3, r3, #16
 800b254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b258:	ee07 3a90 	vmov	s15, r3
 800b25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b264:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b268:	edd7 6a07 	vldr	s13, [r7, #28]
 800b26c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b274:	ee17 2a90 	vmov	r2, s15
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b27c:	4b13      	ldr	r3, [pc, #76]	@ (800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b280:	0e1b      	lsrs	r3, r3, #24
 800b282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b292:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b296:	edd7 6a07 	vldr	s13, [r7, #28]
 800b29a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b29e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2a2:	ee17 2a90 	vmov	r2, s15
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2aa:	e008      	b.n	800b2be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	609a      	str	r2, [r3, #8]
}
 800b2be:	bf00      	nop
 800b2c0:	3724      	adds	r7, #36	@ 0x24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	58024400 	.word	0x58024400
 800b2d0:	03d09000 	.word	0x03d09000
 800b2d4:	46000000 	.word	0x46000000
 800b2d8:	4c742400 	.word	0x4c742400
 800b2dc:	4a742400 	.word	0x4a742400
 800b2e0:	4af42400 	.word	0x4af42400

0800b2e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b089      	sub	sp, #36	@ 0x24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2ec:	4ba0      	ldr	r3, [pc, #640]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f0:	f003 0303 	and.w	r3, r3, #3
 800b2f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b2f6:	4b9e      	ldr	r3, [pc, #632]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fa:	091b      	lsrs	r3, r3, #4
 800b2fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b300:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b302:	4b9b      	ldr	r3, [pc, #620]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b30c:	4b98      	ldr	r3, [pc, #608]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b30e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b310:	08db      	lsrs	r3, r3, #3
 800b312:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	fb02 f303 	mul.w	r3, r2, r3
 800b31c:	ee07 3a90 	vmov	s15, r3
 800b320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b324:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 8111 	beq.w	800b552 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	2b02      	cmp	r3, #2
 800b334:	f000 8083 	beq.w	800b43e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	f200 80a1 	bhi.w	800b482 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d056      	beq.n	800b3fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b34c:	e099      	b.n	800b482 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b34e:	4b88      	ldr	r3, [pc, #544]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0320 	and.w	r3, r3, #32
 800b356:	2b00      	cmp	r3, #0
 800b358:	d02d      	beq.n	800b3b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b35a:	4b85      	ldr	r3, [pc, #532]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	08db      	lsrs	r3, r3, #3
 800b360:	f003 0303 	and.w	r3, r3, #3
 800b364:	4a83      	ldr	r2, [pc, #524]	@ (800b574 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b366:	fa22 f303 	lsr.w	r3, r2, r3
 800b36a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	ee07 3a90 	vmov	s15, r3
 800b372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	ee07 3a90 	vmov	s15, r3
 800b37c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b384:	4b7a      	ldr	r3, [pc, #488]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38c:	ee07 3a90 	vmov	s15, r3
 800b390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b394:	ed97 6a03 	vldr	s12, [r7, #12]
 800b398:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b578 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b39c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3b4:	e087      	b.n	800b4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	ee07 3a90 	vmov	s15, r3
 800b3bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b57c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b3c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c8:	4b69      	ldr	r3, [pc, #420]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d0:	ee07 3a90 	vmov	s15, r3
 800b3d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3dc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b578 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3f8:	e065      	b.n	800b4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	ee07 3a90 	vmov	s15, r3
 800b400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b404:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b580 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40c:	4b58      	ldr	r3, [pc, #352]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b414:	ee07 3a90 	vmov	s15, r3
 800b418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b420:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b578 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b43c:	e043      	b.n	800b4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	ee07 3a90 	vmov	s15, r3
 800b444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b448:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b584 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b44c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b450:	4b47      	ldr	r3, [pc, #284]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b458:	ee07 3a90 	vmov	s15, r3
 800b45c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b460:	ed97 6a03 	vldr	s12, [r7, #12]
 800b464:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b578 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b470:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b480:	e021      	b.n	800b4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b57c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b494:	4b36      	ldr	r3, [pc, #216]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49c:	ee07 3a90 	vmov	s15, r3
 800b4a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b578 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b4c6:	4b2a      	ldr	r3, [pc, #168]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ca:	0a5b      	lsrs	r3, r3, #9
 800b4cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ec:	ee17 2a90 	vmov	r2, s15
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b4f4:	4b1e      	ldr	r3, [pc, #120]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f8:	0c1b      	lsrs	r3, r3, #16
 800b4fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b50a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b50e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b51a:	ee17 2a90 	vmov	r2, s15
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b522:	4b13      	ldr	r3, [pc, #76]	@ (800b570 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b526:	0e1b      	lsrs	r3, r3, #24
 800b528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b52c:	ee07 3a90 	vmov	s15, r3
 800b530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b53c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b548:	ee17 2a90 	vmov	r2, s15
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b550:	e008      	b.n	800b564 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	609a      	str	r2, [r3, #8]
}
 800b564:	bf00      	nop
 800b566:	3724      	adds	r7, #36	@ 0x24
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	58024400 	.word	0x58024400
 800b574:	03d09000 	.word	0x03d09000
 800b578:	46000000 	.word	0x46000000
 800b57c:	4c742400 	.word	0x4c742400
 800b580:	4a742400 	.word	0x4a742400
 800b584:	4af42400 	.word	0x4af42400

0800b588 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b596:	4b53      	ldr	r3, [pc, #332]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d101      	bne.n	800b5a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e099      	b.n	800b6da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a4e      	ldr	r2, [pc, #312]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b5ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b5b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5b2:	f7f7 ffd3 	bl	800355c <HAL_GetTick>
 800b5b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5b8:	e008      	b.n	800b5cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b5ba:	f7f7 ffcf 	bl	800355c <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d901      	bls.n	800b5cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e086      	b.n	800b6da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5cc:	4b45      	ldr	r3, [pc, #276]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1f0      	bne.n	800b5ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b5d8:	4b42      	ldr	r3, [pc, #264]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b5da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	031b      	lsls	r3, r3, #12
 800b5e6:	493f      	ldr	r1, [pc, #252]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	025b      	lsls	r3, r3, #9
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	3b01      	subs	r3, #1
 800b608:	041b      	lsls	r3, r3, #16
 800b60a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b60e:	431a      	orrs	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	3b01      	subs	r3, #1
 800b616:	061b      	lsls	r3, r3, #24
 800b618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b61c:	4931      	ldr	r1, [pc, #196]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b622:	4b30      	ldr	r3, [pc, #192]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	492d      	ldr	r1, [pc, #180]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b630:	4313      	orrs	r3, r2
 800b632:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b634:	4b2b      	ldr	r3, [pc, #172]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b638:	f023 0220 	bic.w	r2, r3, #32
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	4928      	ldr	r1, [pc, #160]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b642:	4313      	orrs	r3, r2
 800b644:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b646:	4b27      	ldr	r3, [pc, #156]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64a:	4a26      	ldr	r2, [pc, #152]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b64c:	f023 0310 	bic.w	r3, r3, #16
 800b650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b652:	4b24      	ldr	r3, [pc, #144]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b656:	4b24      	ldr	r3, [pc, #144]	@ (800b6e8 <RCCEx_PLL2_Config+0x160>)
 800b658:	4013      	ands	r3, r2
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	69d2      	ldr	r2, [r2, #28]
 800b65e:	00d2      	lsls	r2, r2, #3
 800b660:	4920      	ldr	r1, [pc, #128]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b662:	4313      	orrs	r3, r2
 800b664:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b666:	4b1f      	ldr	r3, [pc, #124]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66a:	4a1e      	ldr	r2, [pc, #120]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b66c:	f043 0310 	orr.w	r3, r3, #16
 800b670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b678:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67c:	4a19      	ldr	r2, [pc, #100]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b67e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b684:	e00f      	b.n	800b6a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d106      	bne.n	800b69a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b68c:	4b15      	ldr	r3, [pc, #84]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b690:	4a14      	ldr	r2, [pc, #80]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b698:	e005      	b.n	800b6a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b69a:	4b12      	ldr	r3, [pc, #72]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69e:	4a11      	ldr	r2, [pc, #68]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b6a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b6ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6b2:	f7f7 ff53 	bl	800355c <HAL_GetTick>
 800b6b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6b8:	e008      	b.n	800b6cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6ba:	f7f7 ff4f 	bl	800355c <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d901      	bls.n	800b6cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e006      	b.n	800b6da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6cc:	4b05      	ldr	r3, [pc, #20]	@ (800b6e4 <RCCEx_PLL2_Config+0x15c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0f0      	beq.n	800b6ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	ffff0007 	.word	0xffff0007

0800b6ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6fa:	4b53      	ldr	r3, [pc, #332]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b03      	cmp	r3, #3
 800b704:	d101      	bne.n	800b70a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e099      	b.n	800b83e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b70a:	4b4f      	ldr	r3, [pc, #316]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a4e      	ldr	r2, [pc, #312]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b716:	f7f7 ff21 	bl	800355c <HAL_GetTick>
 800b71a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b71c:	e008      	b.n	800b730 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b71e:	f7f7 ff1d 	bl	800355c <HAL_GetTick>
 800b722:	4602      	mov	r2, r0
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d901      	bls.n	800b730 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e086      	b.n	800b83e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b730:	4b45      	ldr	r3, [pc, #276]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1f0      	bne.n	800b71e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b73c:	4b42      	ldr	r3, [pc, #264]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b740:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	051b      	lsls	r3, r3, #20
 800b74a:	493f      	ldr	r1, [pc, #252]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b74c:	4313      	orrs	r3, r2
 800b74e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	3b01      	subs	r3, #1
 800b756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	3b01      	subs	r3, #1
 800b760:	025b      	lsls	r3, r3, #9
 800b762:	b29b      	uxth	r3, r3
 800b764:	431a      	orrs	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	3b01      	subs	r3, #1
 800b76c:	041b      	lsls	r3, r3, #16
 800b76e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	3b01      	subs	r3, #1
 800b77a:	061b      	lsls	r3, r3, #24
 800b77c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b780:	4931      	ldr	r1, [pc, #196]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b782:	4313      	orrs	r3, r2
 800b784:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b786:	4b30      	ldr	r3, [pc, #192]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	492d      	ldr	r1, [pc, #180]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b794:	4313      	orrs	r3, r2
 800b796:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b798:	4b2b      	ldr	r3, [pc, #172]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	4928      	ldr	r1, [pc, #160]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7aa:	4b27      	ldr	r3, [pc, #156]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ae:	4a26      	ldr	r2, [pc, #152]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b7b6:	4b24      	ldr	r3, [pc, #144]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7ba:	4b24      	ldr	r3, [pc, #144]	@ (800b84c <RCCEx_PLL3_Config+0x160>)
 800b7bc:	4013      	ands	r3, r2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	69d2      	ldr	r2, [r2, #28]
 800b7c2:	00d2      	lsls	r2, r2, #3
 800b7c4:	4920      	ldr	r1, [pc, #128]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7ca:	4b1f      	ldr	r3, [pc, #124]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d106      	bne.n	800b7ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e0:	4a19      	ldr	r2, [pc, #100]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b7e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7e8:	e00f      	b.n	800b80a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d106      	bne.n	800b7fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7f0:	4b15      	ldr	r3, [pc, #84]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f4:	4a14      	ldr	r2, [pc, #80]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b7f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b7fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7fc:	e005      	b.n	800b80a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7fe:	4b12      	ldr	r3, [pc, #72]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b802:	4a11      	ldr	r2, [pc, #68]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b808:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b80a:	4b0f      	ldr	r3, [pc, #60]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a0e      	ldr	r2, [pc, #56]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b816:	f7f7 fea1 	bl	800355c <HAL_GetTick>
 800b81a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b81c:	e008      	b.n	800b830 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b81e:	f7f7 fe9d 	bl	800355c <HAL_GetTick>
 800b822:	4602      	mov	r2, r0
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d901      	bls.n	800b830 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e006      	b.n	800b83e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b830:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <RCCEx_PLL3_Config+0x15c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0f0      	beq.n	800b81e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	58024400 	.word	0x58024400
 800b84c:	ffff0007 	.word	0xffff0007

0800b850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e049      	b.n	800b8f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f841 	bl	800b8fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2202      	movs	r2, #2
 800b880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f000 f9e8 	bl	800bc64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b906:	bf00      	nop
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
	...

0800b914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b01      	cmp	r3, #1
 800b926:	d001      	beq.n	800b92c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	e054      	b.n	800b9d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2202      	movs	r2, #2
 800b930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68da      	ldr	r2, [r3, #12]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f042 0201 	orr.w	r2, r2, #1
 800b942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a26      	ldr	r2, [pc, #152]	@ (800b9e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d022      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0x80>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b956:	d01d      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0x80>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a22      	ldr	r2, [pc, #136]	@ (800b9e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d018      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0x80>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a21      	ldr	r2, [pc, #132]	@ (800b9ec <HAL_TIM_Base_Start_IT+0xd8>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d013      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0x80>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a1f      	ldr	r2, [pc, #124]	@ (800b9f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d00e      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0x80>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a1e      	ldr	r2, [pc, #120]	@ (800b9f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d009      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0x80>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a1c      	ldr	r2, [pc, #112]	@ (800b9f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d004      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0x80>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a1b      	ldr	r2, [pc, #108]	@ (800b9fc <HAL_TIM_Base_Start_IT+0xe8>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d115      	bne.n	800b9c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	4b19      	ldr	r3, [pc, #100]	@ (800ba00 <HAL_TIM_Base_Start_IT+0xec>)
 800b99c:	4013      	ands	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2b06      	cmp	r3, #6
 800b9a4:	d015      	beq.n	800b9d2 <HAL_TIM_Base_Start_IT+0xbe>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9ac:	d011      	beq.n	800b9d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f042 0201 	orr.w	r2, r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9be:	e008      	b.n	800b9d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	e000      	b.n	800b9d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	40010000 	.word	0x40010000
 800b9e8:	40000400 	.word	0x40000400
 800b9ec:	40000800 	.word	0x40000800
 800b9f0:	40000c00 	.word	0x40000c00
 800b9f4:	40010400 	.word	0x40010400
 800b9f8:	40001800 	.word	0x40001800
 800b9fc:	40014000 	.word	0x40014000
 800ba00:	00010007 	.word	0x00010007

0800ba04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d020      	beq.n	800ba68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f003 0302 	and.w	r3, r3, #2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01b      	beq.n	800ba68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f06f 0202 	mvn.w	r2, #2
 800ba38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	f003 0303 	and.w	r3, r3, #3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f8e9 	bl	800bc26 <HAL_TIM_IC_CaptureCallback>
 800ba54:	e005      	b.n	800ba62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f8db 	bl	800bc12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f8ec 	bl	800bc3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d020      	beq.n	800bab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01b      	beq.n	800bab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f06f 0204 	mvn.w	r2, #4
 800ba84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2202      	movs	r2, #2
 800ba8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f8c3 	bl	800bc26 <HAL_TIM_IC_CaptureCallback>
 800baa0:	e005      	b.n	800baae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f8b5 	bl	800bc12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f8c6 	bl	800bc3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f003 0308 	and.w	r3, r3, #8
 800baba:	2b00      	cmp	r3, #0
 800babc:	d020      	beq.n	800bb00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d01b      	beq.n	800bb00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f06f 0208 	mvn.w	r2, #8
 800bad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2204      	movs	r2, #4
 800bad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	f003 0303 	and.w	r3, r3, #3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f89d 	bl	800bc26 <HAL_TIM_IC_CaptureCallback>
 800baec:	e005      	b.n	800bafa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f88f 	bl	800bc12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f8a0 	bl	800bc3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f003 0310 	and.w	r3, r3, #16
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d020      	beq.n	800bb4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f003 0310 	and.w	r3, r3, #16
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d01b      	beq.n	800bb4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f06f 0210 	mvn.w	r2, #16
 800bb1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2208      	movs	r2, #8
 800bb22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f877 	bl	800bc26 <HAL_TIM_IC_CaptureCallback>
 800bb38:	e005      	b.n	800bb46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f869 	bl	800bc12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f87a 	bl	800bc3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00c      	beq.n	800bb70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d007      	beq.n	800bb70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f06f 0201 	mvn.w	r2, #1
 800bb68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7f5 ff88 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d104      	bne.n	800bb84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00c      	beq.n	800bb9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d007      	beq.n	800bb9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bb96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f913 	bl	800bdc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00c      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d007      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bbba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f90b 	bl	800bdd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00c      	beq.n	800bbe6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d007      	beq.n	800bbe6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f834 	bl	800bc4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00c      	beq.n	800bc0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f003 0320 	and.w	r3, r3, #32
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d007      	beq.n	800bc0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f06f 0220 	mvn.w	r2, #32
 800bc02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 f8d3 	bl	800bdb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc0a:	bf00      	nop
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc12:	b480      	push	{r7}
 800bc14:	b083      	sub	sp, #12
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc1a:	bf00      	nop
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc2e:	bf00      	nop
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
	...

0800bc64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a46      	ldr	r2, [pc, #280]	@ (800bd90 <TIM_Base_SetConfig+0x12c>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d013      	beq.n	800bca4 <TIM_Base_SetConfig+0x40>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc82:	d00f      	beq.n	800bca4 <TIM_Base_SetConfig+0x40>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a43      	ldr	r2, [pc, #268]	@ (800bd94 <TIM_Base_SetConfig+0x130>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d00b      	beq.n	800bca4 <TIM_Base_SetConfig+0x40>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a42      	ldr	r2, [pc, #264]	@ (800bd98 <TIM_Base_SetConfig+0x134>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d007      	beq.n	800bca4 <TIM_Base_SetConfig+0x40>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a41      	ldr	r2, [pc, #260]	@ (800bd9c <TIM_Base_SetConfig+0x138>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d003      	beq.n	800bca4 <TIM_Base_SetConfig+0x40>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a40      	ldr	r2, [pc, #256]	@ (800bda0 <TIM_Base_SetConfig+0x13c>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d108      	bne.n	800bcb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a35      	ldr	r2, [pc, #212]	@ (800bd90 <TIM_Base_SetConfig+0x12c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d01f      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcc4:	d01b      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a32      	ldr	r2, [pc, #200]	@ (800bd94 <TIM_Base_SetConfig+0x130>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d017      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a31      	ldr	r2, [pc, #196]	@ (800bd98 <TIM_Base_SetConfig+0x134>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d013      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a30      	ldr	r2, [pc, #192]	@ (800bd9c <TIM_Base_SetConfig+0x138>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00f      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a2f      	ldr	r2, [pc, #188]	@ (800bda0 <TIM_Base_SetConfig+0x13c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d00b      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a2e      	ldr	r2, [pc, #184]	@ (800bda4 <TIM_Base_SetConfig+0x140>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d007      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a2d      	ldr	r2, [pc, #180]	@ (800bda8 <TIM_Base_SetConfig+0x144>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d003      	beq.n	800bcfe <TIM_Base_SetConfig+0x9a>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a2c      	ldr	r2, [pc, #176]	@ (800bdac <TIM_Base_SetConfig+0x148>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d108      	bne.n	800bd10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a16      	ldr	r2, [pc, #88]	@ (800bd90 <TIM_Base_SetConfig+0x12c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d00f      	beq.n	800bd5c <TIM_Base_SetConfig+0xf8>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a18      	ldr	r2, [pc, #96]	@ (800bda0 <TIM_Base_SetConfig+0x13c>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d00b      	beq.n	800bd5c <TIM_Base_SetConfig+0xf8>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a17      	ldr	r2, [pc, #92]	@ (800bda4 <TIM_Base_SetConfig+0x140>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d007      	beq.n	800bd5c <TIM_Base_SetConfig+0xf8>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a16      	ldr	r2, [pc, #88]	@ (800bda8 <TIM_Base_SetConfig+0x144>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d003      	beq.n	800bd5c <TIM_Base_SetConfig+0xf8>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a15      	ldr	r2, [pc, #84]	@ (800bdac <TIM_Base_SetConfig+0x148>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d103      	bne.n	800bd64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	691a      	ldr	r2, [r3, #16]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d105      	bne.n	800bd82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	f023 0201 	bic.w	r2, r3, #1
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	611a      	str	r2, [r3, #16]
  }
}
 800bd82:	bf00      	nop
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	40010000 	.word	0x40010000
 800bd94:	40000400 	.word	0x40000400
 800bd98:	40000800 	.word	0x40000800
 800bd9c:	40000c00 	.word	0x40000c00
 800bda0:	40010400 	.word	0x40010400
 800bda4:	40014000 	.word	0x40014000
 800bda8:	40014400 	.word	0x40014400
 800bdac:	40014800 	.word	0x40014800

0800bdb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e042      	b.n	800be84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be04:	2b00      	cmp	r3, #0
 800be06:	d106      	bne.n	800be16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7f7 f84d 	bl	8002eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2224      	movs	r2, #36	@ 0x24
 800be1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f022 0201 	bic.w	r2, r2, #1
 800be2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f001 fae0 	bl	800d3fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fd75 	bl	800c92c <UART_SetConfig>
 800be42:	4603      	mov	r3, r0
 800be44:	2b01      	cmp	r3, #1
 800be46:	d101      	bne.n	800be4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e01b      	b.n	800be84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689a      	ldr	r2, [r3, #8]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f042 0201 	orr.w	r2, r2, #1
 800be7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 fb5f 	bl	800d540 <UART_CheckIdleState>
 800be82:	4603      	mov	r3, r0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08a      	sub	sp, #40	@ 0x28
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	4613      	mov	r3, r2
 800be98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bea0:	2b20      	cmp	r3, #32
 800bea2:	d167      	bne.n	800bf74 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d002      	beq.n	800beb0 <HAL_UART_Transmit_DMA+0x24>
 800beaa:	88fb      	ldrh	r3, [r7, #6]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e060      	b.n	800bf76 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	88fa      	ldrh	r2, [r7, #6]
 800bebe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	88fa      	ldrh	r2, [r7, #6]
 800bec6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2221      	movs	r2, #33	@ 0x21
 800bed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d028      	beq.n	800bf34 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bee6:	4a26      	ldr	r2, [pc, #152]	@ (800bf80 <HAL_UART_Transmit_DMA+0xf4>)
 800bee8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800beee:	4a25      	ldr	r2, [pc, #148]	@ (800bf84 <HAL_UART_Transmit_DMA+0xf8>)
 800bef0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bef6:	4a24      	ldr	r2, [pc, #144]	@ (800bf88 <HAL_UART_Transmit_DMA+0xfc>)
 800bef8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800befe:	2200      	movs	r2, #0
 800bf00:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3328      	adds	r3, #40	@ 0x28
 800bf12:	461a      	mov	r2, r3
 800bf14:	88fb      	ldrh	r3, [r7, #6]
 800bf16:	f7f9 fa6b 	bl	80053f0 <HAL_DMA_Start_IT>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d009      	beq.n	800bf34 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2210      	movs	r2, #16
 800bf24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2220      	movs	r2, #32
 800bf2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e020      	b.n	800bf76 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2240      	movs	r2, #64	@ 0x40
 800bf3a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3308      	adds	r3, #8
 800bf42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	e853 3f00 	ldrex	r3, [r3]
 800bf4a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf52:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3308      	adds	r3, #8
 800bf5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf5c:	623a      	str	r2, [r7, #32]
 800bf5e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	69f9      	ldr	r1, [r7, #28]
 800bf62:	6a3a      	ldr	r2, [r7, #32]
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e5      	bne.n	800bf3c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	e000      	b.n	800bf76 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bf74:	2302      	movs	r3, #2
  }
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3728      	adds	r7, #40	@ 0x28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	0800da0d 	.word	0x0800da0d
 800bf84:	0800daa3 	.word	0x0800daa3
 800bf88:	0800dc25 	.word	0x0800dc25

0800bf8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08a      	sub	sp, #40	@ 0x28
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	4613      	mov	r3, r2
 800bf98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfa0:	2b20      	cmp	r3, #32
 800bfa2:	d137      	bne.n	800c014 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d002      	beq.n	800bfb0 <HAL_UART_Receive_DMA+0x24>
 800bfaa:	88fb      	ldrh	r3, [r7, #6]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e030      	b.n	800c016 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a18      	ldr	r2, [pc, #96]	@ (800c020 <HAL_UART_Receive_DMA+0x94>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d01f      	beq.n	800c004 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d018      	beq.n	800c004 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	613b      	str	r3, [r7, #16]
   return(result);
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bfe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	461a      	mov	r2, r3
 800bfee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff0:	623b      	str	r3, [r7, #32]
 800bff2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	69f9      	ldr	r1, [r7, #28]
 800bff6:	6a3a      	ldr	r2, [r7, #32]
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e6      	bne.n	800bfd2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c004:	88fb      	ldrh	r3, [r7, #6]
 800c006:	461a      	mov	r2, r3
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f001 fbb0 	bl	800d770 <UART_Start_Receive_DMA>
 800c010:	4603      	mov	r3, r0
 800c012:	e000      	b.n	800c016 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c014:	2302      	movs	r3, #2
  }
}
 800c016:	4618      	mov	r0, r3
 800c018:	3728      	adds	r7, #40	@ 0x28
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	58000c00 	.word	0x58000c00

0800c024 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b090      	sub	sp, #64	@ 0x40
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c03a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c046:	2b80      	cmp	r3, #128	@ 0x80
 800c048:	d139      	bne.n	800c0be <HAL_UART_DMAStop+0x9a>
 800c04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c04c:	2b21      	cmp	r3, #33	@ 0x21
 800c04e:	d136      	bne.n	800c0be <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3308      	adds	r3, #8
 800c056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c058:	6a3b      	ldr	r3, [r7, #32]
 800c05a:	e853 3f00 	ldrex	r3, [r3]
 800c05e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c066:	637b      	str	r3, [r7, #52]	@ 0x34
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3308      	adds	r3, #8
 800c06e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c070:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c078:	e841 2300 	strex	r3, r2, [r1]
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1e5      	bne.n	800c050 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d015      	beq.n	800c0b8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c090:	4618      	mov	r0, r3
 800c092:	f7f9 fc17 	bl	80058c4 <HAL_DMA_Abort>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00d      	beq.n	800c0b8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fb f89d 	bl	80071e0 <HAL_DMA_GetError>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b20      	cmp	r3, #32
 800c0aa:	d105      	bne.n	800c0b8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2210      	movs	r2, #16
 800c0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	e047      	b.n	800c148 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f001 fbff 	bl	800d8bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0c8:	2b40      	cmp	r3, #64	@ 0x40
 800c0ca:	d13c      	bne.n	800c146 <HAL_UART_DMAStop+0x122>
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ce:	2b22      	cmp	r3, #34	@ 0x22
 800c0d0:	d139      	bne.n	800c146 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f2:	61ba      	str	r2, [r7, #24]
 800c0f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f6:	6979      	ldr	r1, [r7, #20]
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	e841 2300 	strex	r3, r2, [r1]
 800c0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1e5      	bne.n	800c0d2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d017      	beq.n	800c140 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c116:	4618      	mov	r0, r3
 800c118:	f7f9 fbd4 	bl	80058c4 <HAL_DMA_Abort>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00e      	beq.n	800c140 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fb f859 	bl	80071e0 <HAL_DMA_GetError>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b20      	cmp	r3, #32
 800c132:	d105      	bne.n	800c140 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2210      	movs	r2, #16
 800c138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c13c:	2303      	movs	r3, #3
 800c13e:	e003      	b.n	800c148 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 fbfd 	bl	800d940 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3740      	adds	r7, #64	@ 0x40
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b0ba      	sub	sp, #232	@ 0xe8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c176:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c17a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c17e:	4013      	ands	r3, r2
 800c180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d11b      	bne.n	800c1c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c190:	f003 0320 	and.w	r3, r3, #32
 800c194:	2b00      	cmp	r3, #0
 800c196:	d015      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c19c:	f003 0320 	and.w	r3, r3, #32
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d105      	bne.n	800c1b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8377 	beq.w	800c8a8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	4798      	blx	r3
      }
      return;
 800c1c2:	e371      	b.n	800c8a8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c1c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 8123 	beq.w	800c414 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c1d2:	4b8d      	ldr	r3, [pc, #564]	@ (800c408 <HAL_UART_IRQHandler+0x2b8>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c1da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c1de:	4b8b      	ldr	r3, [pc, #556]	@ (800c40c <HAL_UART_IRQHandler+0x2bc>)
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 8116 	beq.w	800c414 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d011      	beq.n	800c218 <HAL_UART_IRQHandler+0xc8>
 800c1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2201      	movs	r2, #1
 800c206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c20e:	f043 0201 	orr.w	r2, r3, #1
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	2b00      	cmp	r3, #0
 800c222:	d011      	beq.n	800c248 <HAL_UART_IRQHandler+0xf8>
 800c224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00b      	beq.n	800c248 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2202      	movs	r2, #2
 800c236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c23e:	f043 0204 	orr.w	r2, r3, #4
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	2b00      	cmp	r3, #0
 800c252:	d011      	beq.n	800c278 <HAL_UART_IRQHandler+0x128>
 800c254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00b      	beq.n	800c278 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2204      	movs	r2, #4
 800c266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c26e:	f043 0202 	orr.w	r2, r3, #2
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c27c:	f003 0308 	and.w	r3, r3, #8
 800c280:	2b00      	cmp	r3, #0
 800c282:	d017      	beq.n	800c2b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c288:	f003 0320 	and.w	r3, r3, #32
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d105      	bne.n	800c29c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c290:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c294:	4b5c      	ldr	r3, [pc, #368]	@ (800c408 <HAL_UART_IRQHandler+0x2b8>)
 800c296:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2208      	movs	r2, #8
 800c2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2aa:	f043 0208 	orr.w	r2, r3, #8
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d012      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x196>
 800c2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00c      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2dc:	f043 0220 	orr.w	r2, r3, #32
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 82dd 	beq.w	800c8ac <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d013      	beq.n	800c326 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c302:	f003 0320 	and.w	r3, r3, #32
 800c306:	2b00      	cmp	r3, #0
 800c308:	d105      	bne.n	800c316 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c30a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c30e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d007      	beq.n	800c326 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d003      	beq.n	800c326 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c32c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c33a:	2b40      	cmp	r3, #64	@ 0x40
 800c33c:	d005      	beq.n	800c34a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c33e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c342:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c346:	2b00      	cmp	r3, #0
 800c348:	d054      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f001 faf8 	bl	800d940 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c35a:	2b40      	cmp	r3, #64	@ 0x40
 800c35c:	d146      	bne.n	800c3ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c36c:	e853 3f00 	ldrex	r3, [r3]
 800c370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c37c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	3308      	adds	r3, #8
 800c386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c38a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c38e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c3a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1d9      	bne.n	800c35e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d017      	beq.n	800c3e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ba:	4a15      	ldr	r2, [pc, #84]	@ (800c410 <HAL_UART_IRQHandler+0x2c0>)
 800c3bc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f9 fd9b 	bl	8005f00 <HAL_DMA_Abort_IT>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d019      	beq.n	800c404 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c3de:	4610      	mov	r0, r2
 800c3e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3e2:	e00f      	b.n	800c404 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fa8b 	bl	800c900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ea:	e00b      	b.n	800c404 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fa87 	bl	800c900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f2:	e007      	b.n	800c404 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fa83 	bl	800c900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c402:	e253      	b.n	800c8ac <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c404:	bf00      	nop
    return;
 800c406:	e251      	b.n	800c8ac <HAL_UART_IRQHandler+0x75c>
 800c408:	10000001 	.word	0x10000001
 800c40c:	04000120 	.word	0x04000120
 800c410:	0800dca5 	.word	0x0800dca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c418:	2b01      	cmp	r3, #1
 800c41a:	f040 81e7 	bne.w	800c7ec <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c422:	f003 0310 	and.w	r3, r3, #16
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 81e0 	beq.w	800c7ec <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c430:	f003 0310 	and.w	r3, r3, #16
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 81d9 	beq.w	800c7ec <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2210      	movs	r2, #16
 800c440:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44c:	2b40      	cmp	r3, #64	@ 0x40
 800c44e:	f040 8151 	bne.w	800c6f4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a96      	ldr	r2, [pc, #600]	@ (800c6b4 <HAL_UART_IRQHandler+0x564>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d068      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a93      	ldr	r2, [pc, #588]	@ (800c6b8 <HAL_UART_IRQHandler+0x568>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d061      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a91      	ldr	r2, [pc, #580]	@ (800c6bc <HAL_UART_IRQHandler+0x56c>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d05a      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a8e      	ldr	r2, [pc, #568]	@ (800c6c0 <HAL_UART_IRQHandler+0x570>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d053      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a8c      	ldr	r2, [pc, #560]	@ (800c6c4 <HAL_UART_IRQHandler+0x574>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d04c      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a89      	ldr	r2, [pc, #548]	@ (800c6c8 <HAL_UART_IRQHandler+0x578>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d045      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a87      	ldr	r2, [pc, #540]	@ (800c6cc <HAL_UART_IRQHandler+0x57c>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d03e      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a84      	ldr	r2, [pc, #528]	@ (800c6d0 <HAL_UART_IRQHandler+0x580>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d037      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a82      	ldr	r2, [pc, #520]	@ (800c6d4 <HAL_UART_IRQHandler+0x584>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d030      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a7f      	ldr	r2, [pc, #508]	@ (800c6d8 <HAL_UART_IRQHandler+0x588>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d029      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a7d      	ldr	r2, [pc, #500]	@ (800c6dc <HAL_UART_IRQHandler+0x58c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d022      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a7a      	ldr	r2, [pc, #488]	@ (800c6e0 <HAL_UART_IRQHandler+0x590>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d01b      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a78      	ldr	r2, [pc, #480]	@ (800c6e4 <HAL_UART_IRQHandler+0x594>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d014      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a75      	ldr	r2, [pc, #468]	@ (800c6e8 <HAL_UART_IRQHandler+0x598>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d00d      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a73      	ldr	r2, [pc, #460]	@ (800c6ec <HAL_UART_IRQHandler+0x59c>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d006      	beq.n	800c532 <HAL_UART_IRQHandler+0x3e2>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a70      	ldr	r2, [pc, #448]	@ (800c6f0 <HAL_UART_IRQHandler+0x5a0>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d106      	bne.n	800c540 <HAL_UART_IRQHandler+0x3f0>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	e005      	b.n	800c54c <HAL_UART_IRQHandler+0x3fc>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 81ab 	beq.w	800c8b0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c564:	429a      	cmp	r2, r3
 800c566:	f080 81a3 	bcs.w	800c8b0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c570:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c57a:	69db      	ldr	r3, [r3, #28]
 800c57c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c580:	f000 8087 	beq.w	800c692 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c590:	e853 3f00 	ldrex	r3, [r3]
 800c594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c598:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c59c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c5ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c5ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5be:	e841 2300 	strex	r3, r2, [r1]
 800c5c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c5c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1da      	bne.n	800c584 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5e0:	f023 0301 	bic.w	r3, r3, #1
 800c5e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5fe:	e841 2300 	strex	r3, r2, [r1]
 800c602:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e1      	bne.n	800c5ce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3308      	adds	r3, #8
 800c610:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c614:	e853 3f00 	ldrex	r3, [r3]
 800c618:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c61a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c61c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c620:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3308      	adds	r3, #8
 800c62a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c62e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c630:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c634:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c63c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e3      	bne.n	800c60a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2220      	movs	r2, #32
 800c646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c658:	e853 3f00 	ldrex	r3, [r3]
 800c65c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c65e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c660:	f023 0310 	bic.w	r3, r3, #16
 800c664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	461a      	mov	r2, r3
 800c66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c672:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c674:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c676:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e4      	bne.n	800c650 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7f9 f919 	bl	80058c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2202      	movs	r2, #2
 800c696:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f931 	bl	800c914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6b2:	e0fd      	b.n	800c8b0 <HAL_UART_IRQHandler+0x760>
 800c6b4:	40020010 	.word	0x40020010
 800c6b8:	40020028 	.word	0x40020028
 800c6bc:	40020040 	.word	0x40020040
 800c6c0:	40020058 	.word	0x40020058
 800c6c4:	40020070 	.word	0x40020070
 800c6c8:	40020088 	.word	0x40020088
 800c6cc:	400200a0 	.word	0x400200a0
 800c6d0:	400200b8 	.word	0x400200b8
 800c6d4:	40020410 	.word	0x40020410
 800c6d8:	40020428 	.word	0x40020428
 800c6dc:	40020440 	.word	0x40020440
 800c6e0:	40020458 	.word	0x40020458
 800c6e4:	40020470 	.word	0x40020470
 800c6e8:	40020488 	.word	0x40020488
 800c6ec:	400204a0 	.word	0x400204a0
 800c6f0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c700:	b29b      	uxth	r3, r3
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c70e:	b29b      	uxth	r3, r3
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 80cf 	beq.w	800c8b4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 80ca 	beq.w	800c8b4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	e853 3f00 	ldrex	r3, [r3]
 800c72c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c734:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	461a      	mov	r2, r3
 800c73e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c742:	647b      	str	r3, [r7, #68]	@ 0x44
 800c744:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c74a:	e841 2300 	strex	r3, r2, [r1]
 800c74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1e4      	bne.n	800c720 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3308      	adds	r3, #8
 800c75c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	623b      	str	r3, [r7, #32]
   return(result);
 800c766:	6a3a      	ldr	r2, [r7, #32]
 800c768:	4b55      	ldr	r3, [pc, #340]	@ (800c8c0 <HAL_UART_IRQHandler+0x770>)
 800c76a:	4013      	ands	r3, r2
 800c76c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3308      	adds	r3, #8
 800c776:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c77a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c782:	e841 2300 	strex	r3, r2, [r1]
 800c786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1e3      	bne.n	800c756 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2220      	movs	r2, #32
 800c792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	e853 3f00 	ldrex	r3, [r3]
 800c7ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f023 0310 	bic.w	r3, r3, #16
 800c7b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c7c4:	61fb      	str	r3, [r7, #28]
 800c7c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c8:	69b9      	ldr	r1, [r7, #24]
 800c7ca:	69fa      	ldr	r2, [r7, #28]
 800c7cc:	e841 2300 	strex	r3, r2, [r1]
 800c7d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1e4      	bne.n	800c7a2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f895 	bl	800c914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7ea:	e063      	b.n	800c8b4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00e      	beq.n	800c816 <HAL_UART_IRQHandler+0x6c6>
 800c7f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d008      	beq.n	800c816 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c80c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f001 fa89 	bl	800dd26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c814:	e051      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c81a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d014      	beq.n	800c84c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d105      	bne.n	800c83a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c82e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d03a      	beq.n	800c8b8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	4798      	blx	r3
    }
    return;
 800c84a:	e035      	b.n	800c8b8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c854:	2b00      	cmp	r3, #0
 800c856:	d009      	beq.n	800c86c <HAL_UART_IRQHandler+0x71c>
 800c858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f001 fa33 	bl	800dcd0 <UART_EndTransmit_IT>
    return;
 800c86a:	e026      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c870:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d009      	beq.n	800c88c <HAL_UART_IRQHandler+0x73c>
 800c878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c87c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c880:	2b00      	cmp	r3, #0
 800c882:	d003      	beq.n	800c88c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f001 fa62 	bl	800dd4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c88a:	e016      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c894:	2b00      	cmp	r3, #0
 800c896:	d010      	beq.n	800c8ba <HAL_UART_IRQHandler+0x76a>
 800c898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	da0c      	bge.n	800c8ba <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 fa4a 	bl	800dd3a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8a6:	e008      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
      return;
 800c8a8:	bf00      	nop
 800c8aa:	e006      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
    return;
 800c8ac:	bf00      	nop
 800c8ae:	e004      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
      return;
 800c8b0:	bf00      	nop
 800c8b2:	e002      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
      return;
 800c8b4:	bf00      	nop
 800c8b6:	e000      	b.n	800c8ba <HAL_UART_IRQHandler+0x76a>
    return;
 800c8b8:	bf00      	nop
  }
}
 800c8ba:	37e8      	adds	r7, #232	@ 0xe8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	effffffe 	.word	0xeffffffe

0800c8c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c930:	b092      	sub	sp, #72	@ 0x48
 800c932:	af00      	add	r7, sp, #0
 800c934:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	431a      	orrs	r2, r3
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	431a      	orrs	r2, r3
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	4313      	orrs	r3, r2
 800c952:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	4bbe      	ldr	r3, [pc, #760]	@ (800cc54 <UART_SetConfig+0x328>)
 800c95c:	4013      	ands	r3, r2
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c964:	430b      	orrs	r3, r1
 800c966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	430a      	orrs	r2, r1
 800c97c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4ab3      	ldr	r2, [pc, #716]	@ (800cc58 <UART_SetConfig+0x32c>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d004      	beq.n	800c998 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c994:	4313      	orrs	r3, r2
 800c996:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689a      	ldr	r2, [r3, #8]
 800c99e:	4baf      	ldr	r3, [pc, #700]	@ (800cc5c <UART_SetConfig+0x330>)
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b2:	f023 010f 	bic.w	r1, r3, #15
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4aa6      	ldr	r2, [pc, #664]	@ (800cc60 <UART_SetConfig+0x334>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d177      	bne.n	800cabc <UART_SetConfig+0x190>
 800c9cc:	4ba5      	ldr	r3, [pc, #660]	@ (800cc64 <UART_SetConfig+0x338>)
 800c9ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9d4:	2b28      	cmp	r3, #40	@ 0x28
 800c9d6:	d86d      	bhi.n	800cab4 <UART_SetConfig+0x188>
 800c9d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e0 <UART_SetConfig+0xb4>)
 800c9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9de:	bf00      	nop
 800c9e0:	0800ca85 	.word	0x0800ca85
 800c9e4:	0800cab5 	.word	0x0800cab5
 800c9e8:	0800cab5 	.word	0x0800cab5
 800c9ec:	0800cab5 	.word	0x0800cab5
 800c9f0:	0800cab5 	.word	0x0800cab5
 800c9f4:	0800cab5 	.word	0x0800cab5
 800c9f8:	0800cab5 	.word	0x0800cab5
 800c9fc:	0800cab5 	.word	0x0800cab5
 800ca00:	0800ca8d 	.word	0x0800ca8d
 800ca04:	0800cab5 	.word	0x0800cab5
 800ca08:	0800cab5 	.word	0x0800cab5
 800ca0c:	0800cab5 	.word	0x0800cab5
 800ca10:	0800cab5 	.word	0x0800cab5
 800ca14:	0800cab5 	.word	0x0800cab5
 800ca18:	0800cab5 	.word	0x0800cab5
 800ca1c:	0800cab5 	.word	0x0800cab5
 800ca20:	0800ca95 	.word	0x0800ca95
 800ca24:	0800cab5 	.word	0x0800cab5
 800ca28:	0800cab5 	.word	0x0800cab5
 800ca2c:	0800cab5 	.word	0x0800cab5
 800ca30:	0800cab5 	.word	0x0800cab5
 800ca34:	0800cab5 	.word	0x0800cab5
 800ca38:	0800cab5 	.word	0x0800cab5
 800ca3c:	0800cab5 	.word	0x0800cab5
 800ca40:	0800ca9d 	.word	0x0800ca9d
 800ca44:	0800cab5 	.word	0x0800cab5
 800ca48:	0800cab5 	.word	0x0800cab5
 800ca4c:	0800cab5 	.word	0x0800cab5
 800ca50:	0800cab5 	.word	0x0800cab5
 800ca54:	0800cab5 	.word	0x0800cab5
 800ca58:	0800cab5 	.word	0x0800cab5
 800ca5c:	0800cab5 	.word	0x0800cab5
 800ca60:	0800caa5 	.word	0x0800caa5
 800ca64:	0800cab5 	.word	0x0800cab5
 800ca68:	0800cab5 	.word	0x0800cab5
 800ca6c:	0800cab5 	.word	0x0800cab5
 800ca70:	0800cab5 	.word	0x0800cab5
 800ca74:	0800cab5 	.word	0x0800cab5
 800ca78:	0800cab5 	.word	0x0800cab5
 800ca7c:	0800cab5 	.word	0x0800cab5
 800ca80:	0800caad 	.word	0x0800caad
 800ca84:	2301      	movs	r3, #1
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8a:	e222      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ca8c:	2304      	movs	r3, #4
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca92:	e21e      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ca94:	2308      	movs	r3, #8
 800ca96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca9a:	e21a      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ca9c:	2310      	movs	r3, #16
 800ca9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caa2:	e216      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800caa4:	2320      	movs	r3, #32
 800caa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caaa:	e212      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800caac:	2340      	movs	r3, #64	@ 0x40
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cab2:	e20e      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cab4:	2380      	movs	r3, #128	@ 0x80
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caba:	e20a      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a69      	ldr	r2, [pc, #420]	@ (800cc68 <UART_SetConfig+0x33c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d130      	bne.n	800cb28 <UART_SetConfig+0x1fc>
 800cac6:	4b67      	ldr	r3, [pc, #412]	@ (800cc64 <UART_SetConfig+0x338>)
 800cac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caca:	f003 0307 	and.w	r3, r3, #7
 800cace:	2b05      	cmp	r3, #5
 800cad0:	d826      	bhi.n	800cb20 <UART_SetConfig+0x1f4>
 800cad2:	a201      	add	r2, pc, #4	@ (adr r2, 800cad8 <UART_SetConfig+0x1ac>)
 800cad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad8:	0800caf1 	.word	0x0800caf1
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	0800cb01 	.word	0x0800cb01
 800cae4:	0800cb09 	.word	0x0800cb09
 800cae8:	0800cb11 	.word	0x0800cb11
 800caec:	0800cb19 	.word	0x0800cb19
 800caf0:	2300      	movs	r3, #0
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caf6:	e1ec      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800caf8:	2304      	movs	r3, #4
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cafe:	e1e8      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb00:	2308      	movs	r3, #8
 800cb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb06:	e1e4      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb08:	2310      	movs	r3, #16
 800cb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb0e:	e1e0      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb10:	2320      	movs	r3, #32
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb16:	e1dc      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb18:	2340      	movs	r3, #64	@ 0x40
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1e:	e1d8      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb20:	2380      	movs	r3, #128	@ 0x80
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb26:	e1d4      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a4f      	ldr	r2, [pc, #316]	@ (800cc6c <UART_SetConfig+0x340>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d130      	bne.n	800cb94 <UART_SetConfig+0x268>
 800cb32:	4b4c      	ldr	r3, [pc, #304]	@ (800cc64 <UART_SetConfig+0x338>)
 800cb34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb36:	f003 0307 	and.w	r3, r3, #7
 800cb3a:	2b05      	cmp	r3, #5
 800cb3c:	d826      	bhi.n	800cb8c <UART_SetConfig+0x260>
 800cb3e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb44 <UART_SetConfig+0x218>)
 800cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb44:	0800cb5d 	.word	0x0800cb5d
 800cb48:	0800cb65 	.word	0x0800cb65
 800cb4c:	0800cb6d 	.word	0x0800cb6d
 800cb50:	0800cb75 	.word	0x0800cb75
 800cb54:	0800cb7d 	.word	0x0800cb7d
 800cb58:	0800cb85 	.word	0x0800cb85
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb62:	e1b6      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb64:	2304      	movs	r3, #4
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb6a:	e1b2      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb6c:	2308      	movs	r3, #8
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb72:	e1ae      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb74:	2310      	movs	r3, #16
 800cb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb7a:	e1aa      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb7c:	2320      	movs	r3, #32
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb82:	e1a6      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb84:	2340      	movs	r3, #64	@ 0x40
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8a:	e1a2      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb8c:	2380      	movs	r3, #128	@ 0x80
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb92:	e19e      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a35      	ldr	r2, [pc, #212]	@ (800cc70 <UART_SetConfig+0x344>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d130      	bne.n	800cc00 <UART_SetConfig+0x2d4>
 800cb9e:	4b31      	ldr	r3, [pc, #196]	@ (800cc64 <UART_SetConfig+0x338>)
 800cba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cba2:	f003 0307 	and.w	r3, r3, #7
 800cba6:	2b05      	cmp	r3, #5
 800cba8:	d826      	bhi.n	800cbf8 <UART_SetConfig+0x2cc>
 800cbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800cbb0 <UART_SetConfig+0x284>)
 800cbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb0:	0800cbc9 	.word	0x0800cbc9
 800cbb4:	0800cbd1 	.word	0x0800cbd1
 800cbb8:	0800cbd9 	.word	0x0800cbd9
 800cbbc:	0800cbe1 	.word	0x0800cbe1
 800cbc0:	0800cbe9 	.word	0x0800cbe9
 800cbc4:	0800cbf1 	.word	0x0800cbf1
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbce:	e180      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cbd0:	2304      	movs	r3, #4
 800cbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbd6:	e17c      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cbd8:	2308      	movs	r3, #8
 800cbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbde:	e178      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cbe0:	2310      	movs	r3, #16
 800cbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbe6:	e174      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cbe8:	2320      	movs	r3, #32
 800cbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbee:	e170      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cbf0:	2340      	movs	r3, #64	@ 0x40
 800cbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf6:	e16c      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cbf8:	2380      	movs	r3, #128	@ 0x80
 800cbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfe:	e168      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a1b      	ldr	r2, [pc, #108]	@ (800cc74 <UART_SetConfig+0x348>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d142      	bne.n	800cc90 <UART_SetConfig+0x364>
 800cc0a:	4b16      	ldr	r3, [pc, #88]	@ (800cc64 <UART_SetConfig+0x338>)
 800cc0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d838      	bhi.n	800cc88 <UART_SetConfig+0x35c>
 800cc16:	a201      	add	r2, pc, #4	@ (adr r2, 800cc1c <UART_SetConfig+0x2f0>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800cc35 	.word	0x0800cc35
 800cc20:	0800cc3d 	.word	0x0800cc3d
 800cc24:	0800cc45 	.word	0x0800cc45
 800cc28:	0800cc4d 	.word	0x0800cc4d
 800cc2c:	0800cc79 	.word	0x0800cc79
 800cc30:	0800cc81 	.word	0x0800cc81
 800cc34:	2300      	movs	r3, #0
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc3a:	e14a      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc3c:	2304      	movs	r3, #4
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc42:	e146      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc44:	2308      	movs	r3, #8
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4a:	e142      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc4c:	2310      	movs	r3, #16
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc52:	e13e      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc54:	cfff69f3 	.word	0xcfff69f3
 800cc58:	58000c00 	.word	0x58000c00
 800cc5c:	11fff4ff 	.word	0x11fff4ff
 800cc60:	40011000 	.word	0x40011000
 800cc64:	58024400 	.word	0x58024400
 800cc68:	40004400 	.word	0x40004400
 800cc6c:	40004800 	.word	0x40004800
 800cc70:	40004c00 	.word	0x40004c00
 800cc74:	40005000 	.word	0x40005000
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7e:	e128      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc80:	2340      	movs	r3, #64	@ 0x40
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc86:	e124      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc88:	2380      	movs	r3, #128	@ 0x80
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc8e:	e120      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4acb      	ldr	r2, [pc, #812]	@ (800cfc4 <UART_SetConfig+0x698>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d176      	bne.n	800cd88 <UART_SetConfig+0x45c>
 800cc9a:	4bcb      	ldr	r3, [pc, #812]	@ (800cfc8 <UART_SetConfig+0x69c>)
 800cc9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cca2:	2b28      	cmp	r3, #40	@ 0x28
 800cca4:	d86c      	bhi.n	800cd80 <UART_SetConfig+0x454>
 800cca6:	a201      	add	r2, pc, #4	@ (adr r2, 800ccac <UART_SetConfig+0x380>)
 800cca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccac:	0800cd51 	.word	0x0800cd51
 800ccb0:	0800cd81 	.word	0x0800cd81
 800ccb4:	0800cd81 	.word	0x0800cd81
 800ccb8:	0800cd81 	.word	0x0800cd81
 800ccbc:	0800cd81 	.word	0x0800cd81
 800ccc0:	0800cd81 	.word	0x0800cd81
 800ccc4:	0800cd81 	.word	0x0800cd81
 800ccc8:	0800cd81 	.word	0x0800cd81
 800cccc:	0800cd59 	.word	0x0800cd59
 800ccd0:	0800cd81 	.word	0x0800cd81
 800ccd4:	0800cd81 	.word	0x0800cd81
 800ccd8:	0800cd81 	.word	0x0800cd81
 800ccdc:	0800cd81 	.word	0x0800cd81
 800cce0:	0800cd81 	.word	0x0800cd81
 800cce4:	0800cd81 	.word	0x0800cd81
 800cce8:	0800cd81 	.word	0x0800cd81
 800ccec:	0800cd61 	.word	0x0800cd61
 800ccf0:	0800cd81 	.word	0x0800cd81
 800ccf4:	0800cd81 	.word	0x0800cd81
 800ccf8:	0800cd81 	.word	0x0800cd81
 800ccfc:	0800cd81 	.word	0x0800cd81
 800cd00:	0800cd81 	.word	0x0800cd81
 800cd04:	0800cd81 	.word	0x0800cd81
 800cd08:	0800cd81 	.word	0x0800cd81
 800cd0c:	0800cd69 	.word	0x0800cd69
 800cd10:	0800cd81 	.word	0x0800cd81
 800cd14:	0800cd81 	.word	0x0800cd81
 800cd18:	0800cd81 	.word	0x0800cd81
 800cd1c:	0800cd81 	.word	0x0800cd81
 800cd20:	0800cd81 	.word	0x0800cd81
 800cd24:	0800cd81 	.word	0x0800cd81
 800cd28:	0800cd81 	.word	0x0800cd81
 800cd2c:	0800cd71 	.word	0x0800cd71
 800cd30:	0800cd81 	.word	0x0800cd81
 800cd34:	0800cd81 	.word	0x0800cd81
 800cd38:	0800cd81 	.word	0x0800cd81
 800cd3c:	0800cd81 	.word	0x0800cd81
 800cd40:	0800cd81 	.word	0x0800cd81
 800cd44:	0800cd81 	.word	0x0800cd81
 800cd48:	0800cd81 	.word	0x0800cd81
 800cd4c:	0800cd79 	.word	0x0800cd79
 800cd50:	2301      	movs	r3, #1
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e0bc      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cd58:	2304      	movs	r3, #4
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5e:	e0b8      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cd60:	2308      	movs	r3, #8
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd66:	e0b4      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cd68:	2310      	movs	r3, #16
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6e:	e0b0      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cd70:	2320      	movs	r3, #32
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd76:	e0ac      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cd78:	2340      	movs	r3, #64	@ 0x40
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7e:	e0a8      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cd80:	2380      	movs	r3, #128	@ 0x80
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd86:	e0a4      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a8f      	ldr	r2, [pc, #572]	@ (800cfcc <UART_SetConfig+0x6a0>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d130      	bne.n	800cdf4 <UART_SetConfig+0x4c8>
 800cd92:	4b8d      	ldr	r3, [pc, #564]	@ (800cfc8 <UART_SetConfig+0x69c>)
 800cd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd96:	f003 0307 	and.w	r3, r3, #7
 800cd9a:	2b05      	cmp	r3, #5
 800cd9c:	d826      	bhi.n	800cdec <UART_SetConfig+0x4c0>
 800cd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cda4 <UART_SetConfig+0x478>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdbd 	.word	0x0800cdbd
 800cda8:	0800cdc5 	.word	0x0800cdc5
 800cdac:	0800cdcd 	.word	0x0800cdcd
 800cdb0:	0800cdd5 	.word	0x0800cdd5
 800cdb4:	0800cddd 	.word	0x0800cddd
 800cdb8:	0800cde5 	.word	0x0800cde5
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc2:	e086      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cdc4:	2304      	movs	r3, #4
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdca:	e082      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cdcc:	2308      	movs	r3, #8
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd2:	e07e      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdda:	e07a      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cddc:	2320      	movs	r3, #32
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde2:	e076      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cde4:	2340      	movs	r3, #64	@ 0x40
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdea:	e072      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cdec:	2380      	movs	r3, #128	@ 0x80
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf2:	e06e      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a75      	ldr	r2, [pc, #468]	@ (800cfd0 <UART_SetConfig+0x6a4>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d130      	bne.n	800ce60 <UART_SetConfig+0x534>
 800cdfe:	4b72      	ldr	r3, [pc, #456]	@ (800cfc8 <UART_SetConfig+0x69c>)
 800ce00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2b05      	cmp	r3, #5
 800ce08:	d826      	bhi.n	800ce58 <UART_SetConfig+0x52c>
 800ce0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce10 <UART_SetConfig+0x4e4>)
 800ce0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce10:	0800ce29 	.word	0x0800ce29
 800ce14:	0800ce31 	.word	0x0800ce31
 800ce18:	0800ce39 	.word	0x0800ce39
 800ce1c:	0800ce41 	.word	0x0800ce41
 800ce20:	0800ce49 	.word	0x0800ce49
 800ce24:	0800ce51 	.word	0x0800ce51
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2e:	e050      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce30:	2304      	movs	r3, #4
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce36:	e04c      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce38:	2308      	movs	r3, #8
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce3e:	e048      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce40:	2310      	movs	r3, #16
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce46:	e044      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce48:	2320      	movs	r3, #32
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4e:	e040      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce50:	2340      	movs	r3, #64	@ 0x40
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce56:	e03c      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce58:	2380      	movs	r3, #128	@ 0x80
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5e:	e038      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a5b      	ldr	r2, [pc, #364]	@ (800cfd4 <UART_SetConfig+0x6a8>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d130      	bne.n	800cecc <UART_SetConfig+0x5a0>
 800ce6a:	4b57      	ldr	r3, [pc, #348]	@ (800cfc8 <UART_SetConfig+0x69c>)
 800ce6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce6e:	f003 0307 	and.w	r3, r3, #7
 800ce72:	2b05      	cmp	r3, #5
 800ce74:	d826      	bhi.n	800cec4 <UART_SetConfig+0x598>
 800ce76:	a201      	add	r2, pc, #4	@ (adr r2, 800ce7c <UART_SetConfig+0x550>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800ce95 	.word	0x0800ce95
 800ce80:	0800ce9d 	.word	0x0800ce9d
 800ce84:	0800cea5 	.word	0x0800cea5
 800ce88:	0800cead 	.word	0x0800cead
 800ce8c:	0800ceb5 	.word	0x0800ceb5
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	2302      	movs	r3, #2
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce9a:	e01a      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ce9c:	2304      	movs	r3, #4
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cea2:	e016      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cea4:	2308      	movs	r3, #8
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceaa:	e012      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ceac:	2310      	movs	r3, #16
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb2:	e00e      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800ceb4:	2320      	movs	r3, #32
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceba:	e00a      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cebc:	2340      	movs	r3, #64	@ 0x40
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec2:	e006      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cec4:	2380      	movs	r3, #128	@ 0x80
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceca:	e002      	b.n	800ced2 <UART_SetConfig+0x5a6>
 800cecc:	2380      	movs	r3, #128	@ 0x80
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a3f      	ldr	r2, [pc, #252]	@ (800cfd4 <UART_SetConfig+0x6a8>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	f040 80f8 	bne.w	800d0ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cede:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cee2:	2b20      	cmp	r3, #32
 800cee4:	dc46      	bgt.n	800cf74 <UART_SetConfig+0x648>
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	f2c0 8082 	blt.w	800cff0 <UART_SetConfig+0x6c4>
 800ceec:	3b02      	subs	r3, #2
 800ceee:	2b1e      	cmp	r3, #30
 800cef0:	d87e      	bhi.n	800cff0 <UART_SetConfig+0x6c4>
 800cef2:	a201      	add	r2, pc, #4	@ (adr r2, 800cef8 <UART_SetConfig+0x5cc>)
 800cef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef8:	0800cf7b 	.word	0x0800cf7b
 800cefc:	0800cff1 	.word	0x0800cff1
 800cf00:	0800cf83 	.word	0x0800cf83
 800cf04:	0800cff1 	.word	0x0800cff1
 800cf08:	0800cff1 	.word	0x0800cff1
 800cf0c:	0800cff1 	.word	0x0800cff1
 800cf10:	0800cf93 	.word	0x0800cf93
 800cf14:	0800cff1 	.word	0x0800cff1
 800cf18:	0800cff1 	.word	0x0800cff1
 800cf1c:	0800cff1 	.word	0x0800cff1
 800cf20:	0800cff1 	.word	0x0800cff1
 800cf24:	0800cff1 	.word	0x0800cff1
 800cf28:	0800cff1 	.word	0x0800cff1
 800cf2c:	0800cff1 	.word	0x0800cff1
 800cf30:	0800cfa3 	.word	0x0800cfa3
 800cf34:	0800cff1 	.word	0x0800cff1
 800cf38:	0800cff1 	.word	0x0800cff1
 800cf3c:	0800cff1 	.word	0x0800cff1
 800cf40:	0800cff1 	.word	0x0800cff1
 800cf44:	0800cff1 	.word	0x0800cff1
 800cf48:	0800cff1 	.word	0x0800cff1
 800cf4c:	0800cff1 	.word	0x0800cff1
 800cf50:	0800cff1 	.word	0x0800cff1
 800cf54:	0800cff1 	.word	0x0800cff1
 800cf58:	0800cff1 	.word	0x0800cff1
 800cf5c:	0800cff1 	.word	0x0800cff1
 800cf60:	0800cff1 	.word	0x0800cff1
 800cf64:	0800cff1 	.word	0x0800cff1
 800cf68:	0800cff1 	.word	0x0800cff1
 800cf6c:	0800cff1 	.word	0x0800cff1
 800cf70:	0800cfe3 	.word	0x0800cfe3
 800cf74:	2b40      	cmp	r3, #64	@ 0x40
 800cf76:	d037      	beq.n	800cfe8 <UART_SetConfig+0x6bc>
 800cf78:	e03a      	b.n	800cff0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf7a:	f7fd fef5 	bl	800ad68 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cf80:	e03c      	b.n	800cffc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd ff04 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf90:	e034      	b.n	800cffc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf92:	f107 0318 	add.w	r3, r7, #24
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fe f850 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfa0:	e02c      	b.n	800cffc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfa2:	4b09      	ldr	r3, [pc, #36]	@ (800cfc8 <UART_SetConfig+0x69c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f003 0320 	and.w	r3, r3, #32
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d016      	beq.n	800cfdc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfae:	4b06      	ldr	r3, [pc, #24]	@ (800cfc8 <UART_SetConfig+0x69c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	08db      	lsrs	r3, r3, #3
 800cfb4:	f003 0303 	and.w	r3, r3, #3
 800cfb8:	4a07      	ldr	r2, [pc, #28]	@ (800cfd8 <UART_SetConfig+0x6ac>)
 800cfba:	fa22 f303 	lsr.w	r3, r2, r3
 800cfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfc0:	e01c      	b.n	800cffc <UART_SetConfig+0x6d0>
 800cfc2:	bf00      	nop
 800cfc4:	40011400 	.word	0x40011400
 800cfc8:	58024400 	.word	0x58024400
 800cfcc:	40007800 	.word	0x40007800
 800cfd0:	40007c00 	.word	0x40007c00
 800cfd4:	58000c00 	.word	0x58000c00
 800cfd8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cfdc:	4b9d      	ldr	r3, [pc, #628]	@ (800d254 <UART_SetConfig+0x928>)
 800cfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfe0:	e00c      	b.n	800cffc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfe2:	4b9d      	ldr	r3, [pc, #628]	@ (800d258 <UART_SetConfig+0x92c>)
 800cfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfe6:	e009      	b.n	800cffc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfee:	e005      	b.n	800cffc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cffa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 81de 	beq.w	800d3c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d008:	4a94      	ldr	r2, [pc, #592]	@ (800d25c <UART_SetConfig+0x930>)
 800d00a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d00e:	461a      	mov	r2, r3
 800d010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d012:	fbb3 f3f2 	udiv	r3, r3, r2
 800d016:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	4613      	mov	r3, r2
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	4413      	add	r3, r2
 800d022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d024:	429a      	cmp	r2, r3
 800d026:	d305      	bcc.n	800d034 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d02e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d030:	429a      	cmp	r2, r3
 800d032:	d903      	bls.n	800d03c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d03a:	e1c1      	b.n	800d3c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d03e:	2200      	movs	r2, #0
 800d040:	60bb      	str	r3, [r7, #8]
 800d042:	60fa      	str	r2, [r7, #12]
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d048:	4a84      	ldr	r2, [pc, #528]	@ (800d25c <UART_SetConfig+0x930>)
 800d04a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	2200      	movs	r2, #0
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	607a      	str	r2, [r7, #4]
 800d056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d05a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d05e:	f7f3 f9f7 	bl	8000450 <__aeabi_uldivmod>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4610      	mov	r0, r2
 800d068:	4619      	mov	r1, r3
 800d06a:	f04f 0200 	mov.w	r2, #0
 800d06e:	f04f 0300 	mov.w	r3, #0
 800d072:	020b      	lsls	r3, r1, #8
 800d074:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d078:	0202      	lsls	r2, r0, #8
 800d07a:	6979      	ldr	r1, [r7, #20]
 800d07c:	6849      	ldr	r1, [r1, #4]
 800d07e:	0849      	lsrs	r1, r1, #1
 800d080:	2000      	movs	r0, #0
 800d082:	460c      	mov	r4, r1
 800d084:	4605      	mov	r5, r0
 800d086:	eb12 0804 	adds.w	r8, r2, r4
 800d08a:	eb43 0905 	adc.w	r9, r3, r5
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	469a      	mov	sl, r3
 800d096:	4693      	mov	fp, r2
 800d098:	4652      	mov	r2, sl
 800d09a:	465b      	mov	r3, fp
 800d09c:	4640      	mov	r0, r8
 800d09e:	4649      	mov	r1, r9
 800d0a0:	f7f3 f9d6 	bl	8000450 <__aeabi_uldivmod>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0b2:	d308      	bcc.n	800d0c6 <UART_SetConfig+0x79a>
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0ba:	d204      	bcs.n	800d0c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0c2:	60da      	str	r2, [r3, #12]
 800d0c4:	e17c      	b.n	800d3c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d0cc:	e178      	b.n	800d3c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d0d6:	f040 80c5 	bne.w	800d264 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d0da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0de:	2b20      	cmp	r3, #32
 800d0e0:	dc48      	bgt.n	800d174 <UART_SetConfig+0x848>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	db7b      	blt.n	800d1de <UART_SetConfig+0x8b2>
 800d0e6:	2b20      	cmp	r3, #32
 800d0e8:	d879      	bhi.n	800d1de <UART_SetConfig+0x8b2>
 800d0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f0 <UART_SetConfig+0x7c4>)
 800d0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f0:	0800d17b 	.word	0x0800d17b
 800d0f4:	0800d183 	.word	0x0800d183
 800d0f8:	0800d1df 	.word	0x0800d1df
 800d0fc:	0800d1df 	.word	0x0800d1df
 800d100:	0800d18b 	.word	0x0800d18b
 800d104:	0800d1df 	.word	0x0800d1df
 800d108:	0800d1df 	.word	0x0800d1df
 800d10c:	0800d1df 	.word	0x0800d1df
 800d110:	0800d19b 	.word	0x0800d19b
 800d114:	0800d1df 	.word	0x0800d1df
 800d118:	0800d1df 	.word	0x0800d1df
 800d11c:	0800d1df 	.word	0x0800d1df
 800d120:	0800d1df 	.word	0x0800d1df
 800d124:	0800d1df 	.word	0x0800d1df
 800d128:	0800d1df 	.word	0x0800d1df
 800d12c:	0800d1df 	.word	0x0800d1df
 800d130:	0800d1ab 	.word	0x0800d1ab
 800d134:	0800d1df 	.word	0x0800d1df
 800d138:	0800d1df 	.word	0x0800d1df
 800d13c:	0800d1df 	.word	0x0800d1df
 800d140:	0800d1df 	.word	0x0800d1df
 800d144:	0800d1df 	.word	0x0800d1df
 800d148:	0800d1df 	.word	0x0800d1df
 800d14c:	0800d1df 	.word	0x0800d1df
 800d150:	0800d1df 	.word	0x0800d1df
 800d154:	0800d1df 	.word	0x0800d1df
 800d158:	0800d1df 	.word	0x0800d1df
 800d15c:	0800d1df 	.word	0x0800d1df
 800d160:	0800d1df 	.word	0x0800d1df
 800d164:	0800d1df 	.word	0x0800d1df
 800d168:	0800d1df 	.word	0x0800d1df
 800d16c:	0800d1df 	.word	0x0800d1df
 800d170:	0800d1d1 	.word	0x0800d1d1
 800d174:	2b40      	cmp	r3, #64	@ 0x40
 800d176:	d02e      	beq.n	800d1d6 <UART_SetConfig+0x8aa>
 800d178:	e031      	b.n	800d1de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d17a:	f7fb fdfd 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 800d17e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d180:	e033      	b.n	800d1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d182:	f7fb fe0f 	bl	8008da4 <HAL_RCC_GetPCLK2Freq>
 800d186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d188:	e02f      	b.n	800d1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d18a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fd fe00 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d198:	e027      	b.n	800d1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d19a:	f107 0318 	add.w	r3, r7, #24
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fd ff4c 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a8:	e01f      	b.n	800d1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1aa:	4b2d      	ldr	r3, [pc, #180]	@ (800d260 <UART_SetConfig+0x934>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f003 0320 	and.w	r3, r3, #32
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d009      	beq.n	800d1ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1b6:	4b2a      	ldr	r3, [pc, #168]	@ (800d260 <UART_SetConfig+0x934>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	08db      	lsrs	r3, r3, #3
 800d1bc:	f003 0303 	and.w	r3, r3, #3
 800d1c0:	4a24      	ldr	r2, [pc, #144]	@ (800d254 <UART_SetConfig+0x928>)
 800d1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1c8:	e00f      	b.n	800d1ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d1ca:	4b22      	ldr	r3, [pc, #136]	@ (800d254 <UART_SetConfig+0x928>)
 800d1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ce:	e00c      	b.n	800d1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1d0:	4b21      	ldr	r3, [pc, #132]	@ (800d258 <UART_SetConfig+0x92c>)
 800d1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1d4:	e009      	b.n	800d1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1dc:	e005      	b.n	800d1ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d1e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 80e7 	beq.w	800d3c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f6:	4a19      	ldr	r2, [pc, #100]	@ (800d25c <UART_SetConfig+0x930>)
 800d1f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d200:	fbb3 f3f2 	udiv	r3, r3, r2
 800d204:	005a      	lsls	r2, r3, #1
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	085b      	lsrs	r3, r3, #1
 800d20c:	441a      	add	r2, r3
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	fbb2 f3f3 	udiv	r3, r2, r3
 800d216:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21a:	2b0f      	cmp	r3, #15
 800d21c:	d916      	bls.n	800d24c <UART_SetConfig+0x920>
 800d21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d224:	d212      	bcs.n	800d24c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d228:	b29b      	uxth	r3, r3
 800d22a:	f023 030f 	bic.w	r3, r3, #15
 800d22e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d232:	085b      	lsrs	r3, r3, #1
 800d234:	b29b      	uxth	r3, r3
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d23e:	4313      	orrs	r3, r2
 800d240:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d248:	60da      	str	r2, [r3, #12]
 800d24a:	e0b9      	b.n	800d3c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d252:	e0b5      	b.n	800d3c0 <UART_SetConfig+0xa94>
 800d254:	03d09000 	.word	0x03d09000
 800d258:	003d0900 	.word	0x003d0900
 800d25c:	08023560 	.word	0x08023560
 800d260:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d264:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d268:	2b20      	cmp	r3, #32
 800d26a:	dc49      	bgt.n	800d300 <UART_SetConfig+0x9d4>
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	db7c      	blt.n	800d36a <UART_SetConfig+0xa3e>
 800d270:	2b20      	cmp	r3, #32
 800d272:	d87a      	bhi.n	800d36a <UART_SetConfig+0xa3e>
 800d274:	a201      	add	r2, pc, #4	@ (adr r2, 800d27c <UART_SetConfig+0x950>)
 800d276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27a:	bf00      	nop
 800d27c:	0800d307 	.word	0x0800d307
 800d280:	0800d30f 	.word	0x0800d30f
 800d284:	0800d36b 	.word	0x0800d36b
 800d288:	0800d36b 	.word	0x0800d36b
 800d28c:	0800d317 	.word	0x0800d317
 800d290:	0800d36b 	.word	0x0800d36b
 800d294:	0800d36b 	.word	0x0800d36b
 800d298:	0800d36b 	.word	0x0800d36b
 800d29c:	0800d327 	.word	0x0800d327
 800d2a0:	0800d36b 	.word	0x0800d36b
 800d2a4:	0800d36b 	.word	0x0800d36b
 800d2a8:	0800d36b 	.word	0x0800d36b
 800d2ac:	0800d36b 	.word	0x0800d36b
 800d2b0:	0800d36b 	.word	0x0800d36b
 800d2b4:	0800d36b 	.word	0x0800d36b
 800d2b8:	0800d36b 	.word	0x0800d36b
 800d2bc:	0800d337 	.word	0x0800d337
 800d2c0:	0800d36b 	.word	0x0800d36b
 800d2c4:	0800d36b 	.word	0x0800d36b
 800d2c8:	0800d36b 	.word	0x0800d36b
 800d2cc:	0800d36b 	.word	0x0800d36b
 800d2d0:	0800d36b 	.word	0x0800d36b
 800d2d4:	0800d36b 	.word	0x0800d36b
 800d2d8:	0800d36b 	.word	0x0800d36b
 800d2dc:	0800d36b 	.word	0x0800d36b
 800d2e0:	0800d36b 	.word	0x0800d36b
 800d2e4:	0800d36b 	.word	0x0800d36b
 800d2e8:	0800d36b 	.word	0x0800d36b
 800d2ec:	0800d36b 	.word	0x0800d36b
 800d2f0:	0800d36b 	.word	0x0800d36b
 800d2f4:	0800d36b 	.word	0x0800d36b
 800d2f8:	0800d36b 	.word	0x0800d36b
 800d2fc:	0800d35d 	.word	0x0800d35d
 800d300:	2b40      	cmp	r3, #64	@ 0x40
 800d302:	d02e      	beq.n	800d362 <UART_SetConfig+0xa36>
 800d304:	e031      	b.n	800d36a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d306:	f7fb fd37 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 800d30a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d30c:	e033      	b.n	800d376 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d30e:	f7fb fd49 	bl	8008da4 <HAL_RCC_GetPCLK2Freq>
 800d312:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d314:	e02f      	b.n	800d376 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fd fd3a 	bl	800ad94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d324:	e027      	b.n	800d376 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d326:	f107 0318 	add.w	r3, r7, #24
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fd fe86 	bl	800b03c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d334:	e01f      	b.n	800d376 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d336:	4b2d      	ldr	r3, [pc, #180]	@ (800d3ec <UART_SetConfig+0xac0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0320 	and.w	r3, r3, #32
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d009      	beq.n	800d356 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d342:	4b2a      	ldr	r3, [pc, #168]	@ (800d3ec <UART_SetConfig+0xac0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	08db      	lsrs	r3, r3, #3
 800d348:	f003 0303 	and.w	r3, r3, #3
 800d34c:	4a28      	ldr	r2, [pc, #160]	@ (800d3f0 <UART_SetConfig+0xac4>)
 800d34e:	fa22 f303 	lsr.w	r3, r2, r3
 800d352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d354:	e00f      	b.n	800d376 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d356:	4b26      	ldr	r3, [pc, #152]	@ (800d3f0 <UART_SetConfig+0xac4>)
 800d358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d35a:	e00c      	b.n	800d376 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d35c:	4b25      	ldr	r3, [pc, #148]	@ (800d3f4 <UART_SetConfig+0xac8>)
 800d35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d360:	e009      	b.n	800d376 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d368:	e005      	b.n	800d376 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d36a:	2300      	movs	r3, #0
 800d36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d374:	bf00      	nop
    }

    if (pclk != 0U)
 800d376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d021      	beq.n	800d3c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d380:	4a1d      	ldr	r2, [pc, #116]	@ (800d3f8 <UART_SetConfig+0xacc>)
 800d382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d386:	461a      	mov	r2, r3
 800d388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d38a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	085b      	lsrs	r3, r3, #1
 800d394:	441a      	add	r2, r3
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d39e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a2:	2b0f      	cmp	r3, #15
 800d3a4:	d909      	bls.n	800d3ba <UART_SetConfig+0xa8e>
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3ac:	d205      	bcs.n	800d3ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	60da      	str	r2, [r3, #12]
 800d3b8:	e002      	b.n	800d3c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3748      	adds	r7, #72	@ 0x48
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3ea:	bf00      	nop
 800d3ec:	58024400 	.word	0x58024400
 800d3f0:	03d09000 	.word	0x03d09000
 800d3f4:	003d0900 	.word	0x003d0900
 800d3f8:	08023560 	.word	0x08023560

0800d3fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d408:	f003 0308 	and.w	r3, r3, #8
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00a      	beq.n	800d426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00a      	beq.n	800d448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	430a      	orrs	r2, r1
 800d446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d44c:	f003 0302 	and.w	r3, r3, #2
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00a      	beq.n	800d46a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46e:	f003 0304 	and.w	r3, r3, #4
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00a      	beq.n	800d48c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	430a      	orrs	r2, r1
 800d48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d490:	f003 0310 	and.w	r3, r3, #16
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00a      	beq.n	800d4ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b2:	f003 0320 	and.w	r3, r3, #32
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01a      	beq.n	800d512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4fa:	d10a      	bne.n	800d512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	430a      	orrs	r2, r1
 800d510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00a      	beq.n	800d534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	430a      	orrs	r2, r1
 800d532:	605a      	str	r2, [r3, #4]
  }
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b098      	sub	sp, #96	@ 0x60
 800d544:	af02      	add	r7, sp, #8
 800d546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d550:	f7f6 f804 	bl	800355c <HAL_GetTick>
 800d554:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 0308 	and.w	r3, r3, #8
 800d560:	2b08      	cmp	r3, #8
 800d562:	d12f      	bne.n	800d5c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d564:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d56c:	2200      	movs	r2, #0
 800d56e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f88e 	bl	800d694 <UART_WaitOnFlagUntilTimeout>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d022      	beq.n	800d5c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d586:	e853 3f00 	ldrex	r3, [r3]
 800d58a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d58e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d592:	653b      	str	r3, [r7, #80]	@ 0x50
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	461a      	mov	r2, r3
 800d59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d59c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d59e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5a4:	e841 2300 	strex	r3, r2, [r1]
 800d5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e6      	bne.n	800d57e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2220      	movs	r2, #32
 800d5b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	e063      	b.n	800d68c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 0304 	and.w	r3, r3, #4
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	d149      	bne.n	800d666 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f857 	bl	800d694 <UART_WaitOnFlagUntilTimeout>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d03c      	beq.n	800d666 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f4:	e853 3f00 	ldrex	r3, [r3]
 800d5f8:	623b      	str	r3, [r7, #32]
   return(result);
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	461a      	mov	r2, r3
 800d608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d60a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d60c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d612:	e841 2300 	strex	r3, r2, [r1]
 800d616:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1e6      	bne.n	800d5ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3308      	adds	r3, #8
 800d624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	e853 3f00 	ldrex	r3, [r3]
 800d62c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f023 0301 	bic.w	r3, r3, #1
 800d634:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3308      	adds	r3, #8
 800d63c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d63e:	61fa      	str	r2, [r7, #28]
 800d640:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d642:	69b9      	ldr	r1, [r7, #24]
 800d644:	69fa      	ldr	r2, [r7, #28]
 800d646:	e841 2300 	strex	r3, r2, [r1]
 800d64a:	617b      	str	r3, [r7, #20]
   return(result);
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1e5      	bne.n	800d61e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2220      	movs	r2, #32
 800d656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d662:	2303      	movs	r3, #3
 800d664:	e012      	b.n	800d68c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2220      	movs	r2, #32
 800d66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2220      	movs	r2, #32
 800d672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3758      	adds	r7, #88	@ 0x58
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6a4:	e04f      	b.n	800d746 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6ac:	d04b      	beq.n	800d746 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6ae:	f7f5 ff55 	bl	800355c <HAL_GetTick>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	69ba      	ldr	r2, [r7, #24]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d302      	bcc.n	800d6c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e04e      	b.n	800d766 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f003 0304 	and.w	r3, r3, #4
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d037      	beq.n	800d746 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	2b80      	cmp	r3, #128	@ 0x80
 800d6da:	d034      	beq.n	800d746 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b40      	cmp	r3, #64	@ 0x40
 800d6e0:	d031      	beq.n	800d746 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69db      	ldr	r3, [r3, #28]
 800d6e8:	f003 0308 	and.w	r3, r3, #8
 800d6ec:	2b08      	cmp	r3, #8
 800d6ee:	d110      	bne.n	800d712 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2208      	movs	r2, #8
 800d6f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f000 f921 	bl	800d940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2208      	movs	r2, #8
 800d702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e029      	b.n	800d766 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	69db      	ldr	r3, [r3, #28]
 800d718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d71c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d720:	d111      	bne.n	800d746 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d72a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f000 f907 	bl	800d940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2220      	movs	r2, #32
 800d736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d742:	2303      	movs	r3, #3
 800d744:	e00f      	b.n	800d766 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	69da      	ldr	r2, [r3, #28]
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	4013      	ands	r3, r2
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	429a      	cmp	r2, r3
 800d754:	bf0c      	ite	eq
 800d756:	2301      	moveq	r3, #1
 800d758:	2300      	movne	r3, #0
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	461a      	mov	r2, r3
 800d75e:	79fb      	ldrb	r3, [r7, #7]
 800d760:	429a      	cmp	r2, r3
 800d762:	d0a0      	beq.n	800d6a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b096      	sub	sp, #88	@ 0x58
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	4613      	mov	r3, r2
 800d77c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	88fa      	ldrh	r2, [r7, #6]
 800d788:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2222      	movs	r2, #34	@ 0x22
 800d798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d02d      	beq.n	800d802 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7ac:	4a40      	ldr	r2, [pc, #256]	@ (800d8b0 <UART_Start_Receive_DMA+0x140>)
 800d7ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7b6:	4a3f      	ldr	r2, [pc, #252]	@ (800d8b4 <UART_Start_Receive_DMA+0x144>)
 800d7b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7c0:	4a3d      	ldr	r2, [pc, #244]	@ (800d8b8 <UART_Start_Receive_DMA+0x148>)
 800d7c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	3324      	adds	r3, #36	@ 0x24
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	88fb      	ldrh	r3, [r7, #6]
 800d7e4:	f7f7 fe04 	bl	80053f0 <HAL_DMA_Start_IT>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d009      	beq.n	800d802 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2210      	movs	r2, #16
 800d7f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d7fe:	2301      	movs	r3, #1
 800d800:	e051      	b.n	800d8a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d018      	beq.n	800d83c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d812:	e853 3f00 	ldrex	r3, [r3]
 800d816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d81e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	461a      	mov	r2, r3
 800d826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d82a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d82e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d830:	e841 2300 	strex	r3, r2, [r1]
 800d834:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1e6      	bne.n	800d80a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3308      	adds	r3, #8
 800d842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d846:	e853 3f00 	ldrex	r3, [r3]
 800d84a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84e:	f043 0301 	orr.w	r3, r3, #1
 800d852:	653b      	str	r3, [r7, #80]	@ 0x50
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	3308      	adds	r3, #8
 800d85a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d85c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d85e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d860:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d864:	e841 2300 	strex	r3, r2, [r1]
 800d868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1e5      	bne.n	800d83c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	3308      	adds	r3, #8
 800d876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	e853 3f00 	ldrex	r3, [r3]
 800d87e:	613b      	str	r3, [r7, #16]
   return(result);
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3308      	adds	r3, #8
 800d88e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d890:	623a      	str	r2, [r7, #32]
 800d892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d894:	69f9      	ldr	r1, [r7, #28]
 800d896:	6a3a      	ldr	r2, [r7, #32]
 800d898:	e841 2300 	strex	r3, r2, [r1]
 800d89c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1e5      	bne.n	800d870 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3758      	adds	r7, #88	@ 0x58
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	0800dabf 	.word	0x0800dabf
 800d8b4:	0800dbe7 	.word	0x0800dbe7
 800d8b8:	0800dc25 	.word	0x0800dc25

0800d8bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b08f      	sub	sp, #60	@ 0x3c
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	e853 3f00 	ldrex	r3, [r3]
 800d8d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ea:	e841 2300 	strex	r3, r2, [r1]
 800d8ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1e6      	bne.n	800d8c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	e853 3f00 	ldrex	r3, [r3]
 800d904:	60bb      	str	r3, [r7, #8]
   return(result);
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d90c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3308      	adds	r3, #8
 800d914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d916:	61ba      	str	r2, [r7, #24]
 800d918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91a:	6979      	ldr	r1, [r7, #20]
 800d91c:	69ba      	ldr	r2, [r7, #24]
 800d91e:	e841 2300 	strex	r3, r2, [r1]
 800d922:	613b      	str	r3, [r7, #16]
   return(result);
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1e5      	bne.n	800d8f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2220      	movs	r2, #32
 800d92e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d932:	bf00      	nop
 800d934:	373c      	adds	r7, #60	@ 0x3c
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
	...

0800d940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d940:	b480      	push	{r7}
 800d942:	b095      	sub	sp, #84	@ 0x54
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d950:	e853 3f00 	ldrex	r3, [r3]
 800d954:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d95c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	461a      	mov	r2, r3
 800d964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d966:	643b      	str	r3, [r7, #64]	@ 0x40
 800d968:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d96c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d96e:	e841 2300 	strex	r3, r2, [r1]
 800d972:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1e6      	bne.n	800d948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3308      	adds	r3, #8
 800d980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	e853 3f00 	ldrex	r3, [r3]
 800d988:	61fb      	str	r3, [r7, #28]
   return(result);
 800d98a:	69fa      	ldr	r2, [r7, #28]
 800d98c:	4b1e      	ldr	r3, [pc, #120]	@ (800da08 <UART_EndRxTransfer+0xc8>)
 800d98e:	4013      	ands	r3, r2
 800d990:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3308      	adds	r3, #8
 800d998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d99a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d99c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9a2:	e841 2300 	strex	r3, r2, [r1]
 800d9a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1e5      	bne.n	800d97a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d118      	bne.n	800d9e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	e853 3f00 	ldrex	r3, [r3]
 800d9c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	f023 0310 	bic.w	r3, r3, #16
 800d9ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9d4:	61bb      	str	r3, [r7, #24]
 800d9d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d8:	6979      	ldr	r1, [r7, #20]
 800d9da:	69ba      	ldr	r2, [r7, #24]
 800d9dc:	e841 2300 	strex	r3, r2, [r1]
 800d9e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1e6      	bne.n	800d9b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2220      	movs	r2, #32
 800d9ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d9fc:	bf00      	nop
 800d9fe:	3754      	adds	r7, #84	@ 0x54
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	effffffe 	.word	0xeffffffe

0800da0c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b090      	sub	sp, #64	@ 0x40
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da18:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	69db      	ldr	r3, [r3, #28]
 800da1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da22:	d037      	beq.n	800da94 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800da24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da26:	2200      	movs	r2, #0
 800da28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3308      	adds	r3, #8
 800da32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da36:	e853 3f00 	ldrex	r3, [r3]
 800da3a:	623b      	str	r3, [r7, #32]
   return(result);
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da42:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	3308      	adds	r3, #8
 800da4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da4c:	633a      	str	r2, [r7, #48]	@ 0x30
 800da4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da54:	e841 2300 	strex	r3, r2, [r1]
 800da58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1e5      	bne.n	800da2c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	e853 3f00 	ldrex	r3, [r3]
 800da6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da74:	637b      	str	r3, [r7, #52]	@ 0x34
 800da76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	461a      	mov	r2, r3
 800da7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da7e:	61fb      	str	r3, [r7, #28]
 800da80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da82:	69b9      	ldr	r1, [r7, #24]
 800da84:	69fa      	ldr	r2, [r7, #28]
 800da86:	e841 2300 	strex	r3, r2, [r1]
 800da8a:	617b      	str	r3, [r7, #20]
   return(result);
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e6      	bne.n	800da60 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da92:	e002      	b.n	800da9a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800da94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800da96:	f7fe ff15 	bl	800c8c4 <HAL_UART_TxCpltCallback>
}
 800da9a:	bf00      	nop
 800da9c:	3740      	adds	r7, #64	@ 0x40
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f7fe ff11 	bl	800c8d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dab6:	bf00      	nop
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b09c      	sub	sp, #112	@ 0x70
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	69db      	ldr	r3, [r3, #28]
 800dad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dad4:	d071      	beq.n	800dbba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800dad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dad8:	2200      	movs	r2, #0
 800dada:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dae6:	e853 3f00 	ldrex	r3, [r3]
 800daea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800daec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800daf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800daf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	461a      	mov	r2, r3
 800dafa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dafc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dafe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db04:	e841 2300 	strex	r3, r2, [r1]
 800db08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1e6      	bne.n	800dade <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3308      	adds	r3, #8
 800db16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1a:	e853 3f00 	ldrex	r3, [r3]
 800db1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db22:	f023 0301 	bic.w	r3, r3, #1
 800db26:	667b      	str	r3, [r7, #100]	@ 0x64
 800db28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3308      	adds	r3, #8
 800db2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800db30:	647a      	str	r2, [r7, #68]	@ 0x44
 800db32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db38:	e841 2300 	strex	r3, r2, [r1]
 800db3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1e5      	bne.n	800db10 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3308      	adds	r3, #8
 800db4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4e:	e853 3f00 	ldrex	r3, [r3]
 800db52:	623b      	str	r3, [r7, #32]
   return(result);
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db5a:	663b      	str	r3, [r7, #96]	@ 0x60
 800db5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3308      	adds	r3, #8
 800db62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db64:	633a      	str	r2, [r7, #48]	@ 0x30
 800db66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db6c:	e841 2300 	strex	r3, r2, [r1]
 800db70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1e5      	bne.n	800db44 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800db78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db7a:	2220      	movs	r2, #32
 800db7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db84:	2b01      	cmp	r3, #1
 800db86:	d118      	bne.n	800dbba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	e853 3f00 	ldrex	r3, [r3]
 800db94:	60fb      	str	r3, [r7, #12]
   return(result);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f023 0310 	bic.w	r3, r3, #16
 800db9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	461a      	mov	r2, r3
 800dba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dba6:	61fb      	str	r3, [r7, #28]
 800dba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbaa:	69b9      	ldr	r1, [r7, #24]
 800dbac:	69fa      	ldr	r2, [r7, #28]
 800dbae:	e841 2300 	strex	r3, r2, [r1]
 800dbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1e6      	bne.n	800db88 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d107      	bne.n	800dbd8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dbd2:	f7fe fe9f 	bl	800c914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbd6:	e002      	b.n	800dbde <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dbd8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dbda:	f7f3 fdd9 	bl	8001790 <HAL_UART_RxCpltCallback>
}
 800dbde:	bf00      	nop
 800dbe0:	3770      	adds	r7, #112	@ 0x70
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b084      	sub	sp, #16
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbf2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d109      	bne.n	800dc16 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc08:	085b      	lsrs	r3, r3, #1
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f7fe fe80 	bl	800c914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc14:	e002      	b.n	800dc1c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7fe fe68 	bl	800c8ec <HAL_UART_RxHalfCpltCallback>
}
 800dc1c:	bf00      	nop
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc30:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc38:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc40:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc4c:	2b80      	cmp	r3, #128	@ 0x80
 800dc4e:	d109      	bne.n	800dc64 <UART_DMAError+0x40>
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2b21      	cmp	r3, #33	@ 0x21
 800dc54:	d106      	bne.n	800dc64 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dc5e:	6978      	ldr	r0, [r7, #20]
 800dc60:	f7ff fe2c 	bl	800d8bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc6e:	2b40      	cmp	r3, #64	@ 0x40
 800dc70:	d109      	bne.n	800dc86 <UART_DMAError+0x62>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2b22      	cmp	r3, #34	@ 0x22
 800dc76:	d106      	bne.n	800dc86 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dc80:	6978      	ldr	r0, [r7, #20]
 800dc82:	f7ff fe5d 	bl	800d940 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc8c:	f043 0210 	orr.w	r2, r3, #16
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc96:	6978      	ldr	r0, [r7, #20]
 800dc98:	f7fe fe32 	bl	800c900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc9c:	bf00      	nop
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f7fe fe1c 	bl	800c900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcc8:	bf00      	nop
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	e853 3f00 	ldrex	r3, [r3]
 800dce4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcec:	61fb      	str	r3, [r7, #28]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	61bb      	str	r3, [r7, #24]
 800dcf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcfa:	6979      	ldr	r1, [r7, #20]
 800dcfc:	69ba      	ldr	r2, [r7, #24]
 800dcfe:	e841 2300 	strex	r3, r2, [r1]
 800dd02:	613b      	str	r3, [r7, #16]
   return(result);
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1e6      	bne.n	800dcd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2220      	movs	r2, #32
 800dd0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7fe fdd3 	bl	800c8c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd1e:	bf00      	nop
 800dd20:	3720      	adds	r7, #32
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b083      	sub	sp, #12
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd2e:	bf00      	nop
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b083      	sub	sp, #12
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dd42:	bf00      	nop
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd4e:	b480      	push	{r7}
 800dd50:	b083      	sub	sp, #12
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd56:	bf00      	nop
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b085      	sub	sp, #20
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d101      	bne.n	800dd78 <HAL_UARTEx_DisableFifoMode+0x16>
 800dd74:	2302      	movs	r3, #2
 800dd76:	e027      	b.n	800ddc8 <HAL_UARTEx_DisableFifoMode+0x66>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2224      	movs	r2, #36	@ 0x24
 800dd84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f022 0201 	bic.w	r2, r2, #1
 800dd9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dda6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2220      	movs	r2, #32
 800ddba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d101      	bne.n	800ddec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dde8:	2302      	movs	r3, #2
 800ddea:	e02d      	b.n	800de48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2224      	movs	r2, #36	@ 0x24
 800ddf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f022 0201 	bic.w	r2, r2, #1
 800de12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	430a      	orrs	r2, r1
 800de26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 f84f 	bl	800decc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2220      	movs	r2, #32
 800de3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de60:	2b01      	cmp	r3, #1
 800de62:	d101      	bne.n	800de68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de64:	2302      	movs	r3, #2
 800de66:	e02d      	b.n	800dec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2224      	movs	r2, #36	@ 0x24
 800de74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f022 0201 	bic.w	r2, r2, #1
 800de8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	430a      	orrs	r2, r1
 800dea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f811 	bl	800decc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2220      	movs	r2, #32
 800deb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d108      	bne.n	800deee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800deec:	e031      	b.n	800df52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800deee:	2310      	movs	r3, #16
 800def0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800def2:	2310      	movs	r3, #16
 800def4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	0e5b      	lsrs	r3, r3, #25
 800defe:	b2db      	uxtb	r3, r3
 800df00:	f003 0307 	and.w	r3, r3, #7
 800df04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	0f5b      	lsrs	r3, r3, #29
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	f003 0307 	and.w	r3, r3, #7
 800df14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df16:	7bbb      	ldrb	r3, [r7, #14]
 800df18:	7b3a      	ldrb	r2, [r7, #12]
 800df1a:	4911      	ldr	r1, [pc, #68]	@ (800df60 <UARTEx_SetNbDataToProcess+0x94>)
 800df1c:	5c8a      	ldrb	r2, [r1, r2]
 800df1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df22:	7b3a      	ldrb	r2, [r7, #12]
 800df24:	490f      	ldr	r1, [pc, #60]	@ (800df64 <UARTEx_SetNbDataToProcess+0x98>)
 800df26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df28:	fb93 f3f2 	sdiv	r3, r3, r2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df34:	7bfb      	ldrb	r3, [r7, #15]
 800df36:	7b7a      	ldrb	r2, [r7, #13]
 800df38:	4909      	ldr	r1, [pc, #36]	@ (800df60 <UARTEx_SetNbDataToProcess+0x94>)
 800df3a:	5c8a      	ldrb	r2, [r1, r2]
 800df3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df40:	7b7a      	ldrb	r2, [r7, #13]
 800df42:	4908      	ldr	r1, [pc, #32]	@ (800df64 <UARTEx_SetNbDataToProcess+0x98>)
 800df44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df46:	fb93 f3f2 	sdiv	r3, r3, r2
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800df52:	bf00      	nop
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop
 800df60:	08023578 	.word	0x08023578
 800df64:	08023580 	.word	0x08023580

0800df68 <__NVIC_SetPriority>:
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	4603      	mov	r3, r0
 800df70:	6039      	str	r1, [r7, #0]
 800df72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800df74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	db0a      	blt.n	800df92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	490c      	ldr	r1, [pc, #48]	@ (800dfb4 <__NVIC_SetPriority+0x4c>)
 800df82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df86:	0112      	lsls	r2, r2, #4
 800df88:	b2d2      	uxtb	r2, r2
 800df8a:	440b      	add	r3, r1
 800df8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800df90:	e00a      	b.n	800dfa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	b2da      	uxtb	r2, r3
 800df96:	4908      	ldr	r1, [pc, #32]	@ (800dfb8 <__NVIC_SetPriority+0x50>)
 800df98:	88fb      	ldrh	r3, [r7, #6]
 800df9a:	f003 030f 	and.w	r3, r3, #15
 800df9e:	3b04      	subs	r3, #4
 800dfa0:	0112      	lsls	r2, r2, #4
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	440b      	add	r3, r1
 800dfa6:	761a      	strb	r2, [r3, #24]
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	e000e100 	.word	0xe000e100
 800dfb8:	e000ed00 	.word	0xe000ed00

0800dfbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dfc0:	4b05      	ldr	r3, [pc, #20]	@ (800dfd8 <SysTick_Handler+0x1c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dfc4:	f002 f9c0 	bl	8010348 <xTaskGetSchedulerState>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d001      	beq.n	800dfd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dfce:	f003 fac3 	bl	8011558 <xPortSysTickHandler>
  }
}
 800dfd2:	bf00      	nop
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	e000e010 	.word	0xe000e010

0800dfdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	f06f 0004 	mvn.w	r0, #4
 800dfe6:	f7ff ffbf 	bl	800df68 <__NVIC_SetPriority>
#endif
}
 800dfea:	bf00      	nop
 800dfec:	bd80      	pop	{r7, pc}
	...

0800dff0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dff6:	f3ef 8305 	mrs	r3, IPSR
 800dffa:	603b      	str	r3, [r7, #0]
  return(result);
 800dffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d003      	beq.n	800e00a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e002:	f06f 0305 	mvn.w	r3, #5
 800e006:	607b      	str	r3, [r7, #4]
 800e008:	e00c      	b.n	800e024 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e00a:	4b0a      	ldr	r3, [pc, #40]	@ (800e034 <osKernelInitialize+0x44>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d105      	bne.n	800e01e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e012:	4b08      	ldr	r3, [pc, #32]	@ (800e034 <osKernelInitialize+0x44>)
 800e014:	2201      	movs	r2, #1
 800e016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e018:	2300      	movs	r3, #0
 800e01a:	607b      	str	r3, [r7, #4]
 800e01c:	e002      	b.n	800e024 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e01e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e024:	687b      	ldr	r3, [r7, #4]
}
 800e026:	4618      	mov	r0, r3
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	24032d54 	.word	0x24032d54

0800e038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e03e:	f3ef 8305 	mrs	r3, IPSR
 800e042:	603b      	str	r3, [r7, #0]
  return(result);
 800e044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e046:	2b00      	cmp	r3, #0
 800e048:	d003      	beq.n	800e052 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e04a:	f06f 0305 	mvn.w	r3, #5
 800e04e:	607b      	str	r3, [r7, #4]
 800e050:	e010      	b.n	800e074 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e052:	4b0b      	ldr	r3, [pc, #44]	@ (800e080 <osKernelStart+0x48>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b01      	cmp	r3, #1
 800e058:	d109      	bne.n	800e06e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e05a:	f7ff ffbf 	bl	800dfdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e05e:	4b08      	ldr	r3, [pc, #32]	@ (800e080 <osKernelStart+0x48>)
 800e060:	2202      	movs	r2, #2
 800e062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e064:	f001 fcc2 	bl	800f9ec <vTaskStartScheduler>
      stat = osOK;
 800e068:	2300      	movs	r3, #0
 800e06a:	607b      	str	r3, [r7, #4]
 800e06c:	e002      	b.n	800e074 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e06e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e074:	687b      	ldr	r3, [r7, #4]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	24032d54 	.word	0x24032d54

0800e084 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e08a:	f3ef 8305 	mrs	r3, IPSR
 800e08e:	603b      	str	r3, [r7, #0]
  return(result);
 800e090:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e092:	2b00      	cmp	r3, #0
 800e094:	d003      	beq.n	800e09e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e096:	f001 fdd5 	bl	800fc44 <xTaskGetTickCountFromISR>
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	e002      	b.n	800e0a4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e09e:	f001 fdc1 	bl	800fc24 <xTaskGetTickCount>
 800e0a2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e0a4:	687b      	ldr	r3, [r7, #4]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b08e      	sub	sp, #56	@ 0x38
 800e0b2:	af04      	add	r7, sp, #16
 800e0b4:	60f8      	str	r0, [r7, #12]
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0be:	f3ef 8305 	mrs	r3, IPSR
 800e0c2:	617b      	str	r3, [r7, #20]
  return(result);
 800e0c4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d17e      	bne.n	800e1c8 <osThreadNew+0x11a>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d07b      	beq.n	800e1c8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e0d0:	2380      	movs	r3, #128	@ 0x80
 800e0d2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e0d4:	2318      	movs	r3, #24
 800e0d6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d045      	beq.n	800e174 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <osThreadNew+0x48>
        name = attr->name;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d008      	beq.n	800e11c <osThreadNew+0x6e>
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	2b38      	cmp	r3, #56	@ 0x38
 800e10e:	d805      	bhi.n	800e11c <osThreadNew+0x6e>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	f003 0301 	and.w	r3, r3, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d001      	beq.n	800e120 <osThreadNew+0x72>
        return (NULL);
 800e11c:	2300      	movs	r3, #0
 800e11e:	e054      	b.n	800e1ca <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	695b      	ldr	r3, [r3, #20]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	089b      	lsrs	r3, r3, #2
 800e12e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00e      	beq.n	800e156 <osThreadNew+0xa8>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	2ba7      	cmp	r3, #167	@ 0xa7
 800e13e:	d90a      	bls.n	800e156 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e144:	2b00      	cmp	r3, #0
 800e146:	d006      	beq.n	800e156 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	695b      	ldr	r3, [r3, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d002      	beq.n	800e156 <osThreadNew+0xa8>
        mem = 1;
 800e150:	2301      	movs	r3, #1
 800e152:	61bb      	str	r3, [r7, #24]
 800e154:	e010      	b.n	800e178 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d10c      	bne.n	800e178 <osThreadNew+0xca>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d108      	bne.n	800e178 <osThreadNew+0xca>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d104      	bne.n	800e178 <osThreadNew+0xca>
          mem = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	61bb      	str	r3, [r7, #24]
 800e172:	e001      	b.n	800e178 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d110      	bne.n	800e1a0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e186:	9202      	str	r2, [sp, #8]
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6a3a      	ldr	r2, [r7, #32]
 800e192:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f001 fa35 	bl	800f604 <xTaskCreateStatic>
 800e19a:	4603      	mov	r3, r0
 800e19c:	613b      	str	r3, [r7, #16]
 800e19e:	e013      	b.n	800e1c8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d110      	bne.n	800e1c8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	f107 0310 	add.w	r3, r7, #16
 800e1ae:	9301      	str	r3, [sp, #4]
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	9300      	str	r3, [sp, #0]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f001 fa83 	bl	800f6c4 <xTaskCreate>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d001      	beq.n	800e1c8 <osThreadNew+0x11a>
            hTask = NULL;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e1c8:	693b      	ldr	r3, [r7, #16]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3728      	adds	r7, #40	@ 0x28
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
	...

0800e1d4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b088      	sub	sp, #32
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d002      	beq.n	800e1ee <osThreadFlagsSet+0x1a>
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	da03      	bge.n	800e1f6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e1ee:	f06f 0303 	mvn.w	r3, #3
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e035      	b.n	800e262 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e1f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1fc:	f3ef 8305 	mrs	r3, IPSR
 800e200:	613b      	str	r3, [r7, #16]
  return(result);
 800e202:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e204:	2b00      	cmp	r3, #0
 800e206:	d01f      	beq.n	800e248 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e208:	2300      	movs	r3, #0
 800e20a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e20c:	f107 0308 	add.w	r3, r7, #8
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	2300      	movs	r3, #0
 800e214:	2201      	movs	r2, #1
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6978      	ldr	r0, [r7, #20]
 800e21a:	f002 fb45 	bl	80108a8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e21e:	f107 030c 	add.w	r3, r7, #12
 800e222:	2200      	movs	r2, #0
 800e224:	9200      	str	r2, [sp, #0]
 800e226:	2200      	movs	r2, #0
 800e228:	2100      	movs	r1, #0
 800e22a:	6978      	ldr	r0, [r7, #20]
 800e22c:	f002 fb3c 	bl	80108a8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d015      	beq.n	800e262 <osThreadFlagsSet+0x8e>
 800e236:	4b0d      	ldr	r3, [pc, #52]	@ (800e26c <osThreadFlagsSet+0x98>)
 800e238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	e00c      	b.n	800e262 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e248:	2300      	movs	r3, #0
 800e24a:	2201      	movs	r2, #1
 800e24c:	6839      	ldr	r1, [r7, #0]
 800e24e:	6978      	ldr	r0, [r7, #20]
 800e250:	f002 fa68 	bl	8010724 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e254:	f107 030c 	add.w	r3, r7, #12
 800e258:	2200      	movs	r2, #0
 800e25a:	2100      	movs	r1, #0
 800e25c:	6978      	ldr	r0, [r7, #20]
 800e25e:	f002 fa61 	bl	8010724 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e262:	68fb      	ldr	r3, [r7, #12]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	e000ed04 	.word	0xe000ed04

0800e270 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e276:	f3ef 8305 	mrs	r3, IPSR
 800e27a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e27c:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d003      	beq.n	800e28a <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800e282:	f06f 0305 	mvn.w	r3, #5
 800e286:	607b      	str	r3, [r7, #4]
 800e288:	e00e      	b.n	800e2a8 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e28a:	f002 f84d 	bl	8010328 <xTaskGetCurrentTaskHandle>
 800e28e:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800e290:	1d3b      	adds	r3, r7, #4
 800e292:	2200      	movs	r2, #0
 800e294:	2100      	movs	r1, #0
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f002 fa44 	bl	8010724 <xTaskGenericNotify>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d002      	beq.n	800e2a8 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e2a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800e2a8:	687b      	ldr	r3, [r7, #4]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b08c      	sub	sp, #48	@ 0x30
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	60f8      	str	r0, [r7, #12]
 800e2ba:	60b9      	str	r1, [r7, #8]
 800e2bc:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2be:	f3ef 8305 	mrs	r3, IPSR
 800e2c2:	617b      	str	r3, [r7, #20]
  return(result);
 800e2c4:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d003      	beq.n	800e2d2 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e2ca:	f06f 0305 	mvn.w	r3, #5
 800e2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2d0:	e06b      	b.n	800e3aa <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	da03      	bge.n	800e2e0 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e2d8:	f06f 0303 	mvn.w	r3, #3
 800e2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2de:	e064      	b.n	800e3aa <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	f003 0302 	and.w	r3, r3, #2
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2ee:	e001      	b.n	800e2f4 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e2fc:	f001 fc92 	bl	800fc24 <xTaskGetTickCount>
 800e300:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e302:	f107 0210 	add.w	r2, r7, #16
 800e306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e30a:	2000      	movs	r0, #0
 800e30c:	f002 f9aa 	bl	8010664 <xTaskNotifyWait>
 800e310:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d137      	bne.n	800e388 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	4013      	ands	r3, r2
 800e31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e324:	4313      	orrs	r3, r2
 800e326:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00c      	beq.n	800e34c <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	4013      	ands	r3, r2
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d032      	beq.n	800e3a4 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10f      	bne.n	800e364 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e344:	f06f 0302 	mvn.w	r3, #2
 800e348:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e34a:	e02e      	b.n	800e3aa <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e350:	4013      	ands	r3, r2
 800e352:	2b00      	cmp	r3, #0
 800e354:	d128      	bne.n	800e3a8 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d103      	bne.n	800e364 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e35c:	f06f 0302 	mvn.w	r3, #2
 800e360:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e362:	e022      	b.n	800e3aa <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e364:	f001 fc5e 	bl	800fc24 <xTaskGetTickCount>
 800e368:	4602      	mov	r2, r0
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e370:	69ba      	ldr	r2, [r7, #24]
 800e372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e374:	429a      	cmp	r2, r3
 800e376:	d902      	bls.n	800e37e <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e37c:	e00e      	b.n	800e39c <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e37e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	627b      	str	r3, [r7, #36]	@ 0x24
 800e386:	e009      	b.n	800e39c <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d103      	bne.n	800e396 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e38e:	f06f 0302 	mvn.w	r3, #2
 800e392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e394:	e002      	b.n	800e39c <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e396:	f06f 0301 	mvn.w	r3, #1
 800e39a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1af      	bne.n	800e302 <osThreadFlagsWait+0x50>
 800e3a2:	e002      	b.n	800e3aa <osThreadFlagsWait+0xf8>
            break;
 800e3a4:	bf00      	nop
 800e3a6:	e000      	b.n	800e3aa <osThreadFlagsWait+0xf8>
            break;
 800e3a8:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3730      	adds	r7, #48	@ 0x30
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3bc:	f3ef 8305 	mrs	r3, IPSR
 800e3c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d003      	beq.n	800e3d0 <osDelay+0x1c>
    stat = osErrorISR;
 800e3c8:	f06f 0305 	mvn.w	r3, #5
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	e007      	b.n	800e3e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f001 fad0 	bl	800f980 <vTaskDelay>
    }
  }

  return (stat);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b088      	sub	sp, #32
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3f6:	f3ef 8305 	mrs	r3, IPSR
 800e3fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3fc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d174      	bne.n	800e4ec <osMutexNew+0x102>
    if (attr != NULL) {
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d003      	beq.n	800e410 <osMutexNew+0x26>
      type = attr->attr_bits;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	61bb      	str	r3, [r7, #24]
 800e40e:	e001      	b.n	800e414 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e410:	2300      	movs	r3, #0
 800e412:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	f003 0301 	and.w	r3, r3, #1
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <osMutexNew+0x3a>
      rmtx = 1U;
 800e41e:	2301      	movs	r3, #1
 800e420:	617b      	str	r3, [r7, #20]
 800e422:	e001      	b.n	800e428 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e424:	2300      	movs	r3, #0
 800e426:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	f003 0308 	and.w	r3, r3, #8
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d15c      	bne.n	800e4ec <osMutexNew+0x102>
      mem = -1;
 800e432:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e436:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d015      	beq.n	800e46a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d006      	beq.n	800e454 <osMutexNew+0x6a>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	2b4f      	cmp	r3, #79	@ 0x4f
 800e44c:	d902      	bls.n	800e454 <osMutexNew+0x6a>
          mem = 1;
 800e44e:	2301      	movs	r3, #1
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	e00c      	b.n	800e46e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d108      	bne.n	800e46e <osMutexNew+0x84>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d104      	bne.n	800e46e <osMutexNew+0x84>
            mem = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	e001      	b.n	800e46e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d112      	bne.n	800e49a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d007      	beq.n	800e48a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	4619      	mov	r1, r3
 800e480:	2004      	movs	r0, #4
 800e482:	f000 fb20 	bl	800eac6 <xQueueCreateMutexStatic>
 800e486:	61f8      	str	r0, [r7, #28]
 800e488:	e016      	b.n	800e4b8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	4619      	mov	r1, r3
 800e490:	2001      	movs	r0, #1
 800e492:	f000 fb18 	bl	800eac6 <xQueueCreateMutexStatic>
 800e496:	61f8      	str	r0, [r7, #28]
 800e498:	e00e      	b.n	800e4b8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10b      	bne.n	800e4b8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d004      	beq.n	800e4b0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e4a6:	2004      	movs	r0, #4
 800e4a8:	f000 faf5 	bl	800ea96 <xQueueCreateMutex>
 800e4ac:	61f8      	str	r0, [r7, #28]
 800e4ae:	e003      	b.n	800e4b8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	f000 faf0 	bl	800ea96 <xQueueCreateMutex>
 800e4b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00c      	beq.n	800e4d8 <osMutexNew+0xee>
        if (attr != NULL) {
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d003      	beq.n	800e4cc <osMutexNew+0xe2>
          name = attr->name;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	60fb      	str	r3, [r7, #12]
 800e4ca:	e001      	b.n	800e4d0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e4d0:	68f9      	ldr	r1, [r7, #12]
 800e4d2:	69f8      	ldr	r0, [r7, #28]
 800e4d4:	f001 f838 	bl	800f548 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d006      	beq.n	800e4ec <osMutexNew+0x102>
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d003      	beq.n	800e4ec <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	f043 0301 	orr.w	r3, r3, #1
 800e4ea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e4ec:	69fb      	ldr	r3, [r7, #28]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3720      	adds	r7, #32
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b086      	sub	sp, #24
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f023 0301 	bic.w	r3, r3, #1
 800e506:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f003 0301 	and.w	r3, r3, #1
 800e50e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e510:	2300      	movs	r3, #0
 800e512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e514:	f3ef 8305 	mrs	r3, IPSR
 800e518:	60bb      	str	r3, [r7, #8]
  return(result);
 800e51a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d003      	beq.n	800e528 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e520:	f06f 0305 	mvn.w	r3, #5
 800e524:	617b      	str	r3, [r7, #20]
 800e526:	e02c      	b.n	800e582 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e52e:	f06f 0303 	mvn.w	r3, #3
 800e532:	617b      	str	r3, [r7, #20]
 800e534:	e025      	b.n	800e582 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d011      	beq.n	800e560 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	6938      	ldr	r0, [r7, #16]
 800e540:	f000 fb11 	bl	800eb66 <xQueueTakeMutexRecursive>
 800e544:	4603      	mov	r3, r0
 800e546:	2b01      	cmp	r3, #1
 800e548:	d01b      	beq.n	800e582 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d003      	beq.n	800e558 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e550:	f06f 0301 	mvn.w	r3, #1
 800e554:	617b      	str	r3, [r7, #20]
 800e556:	e014      	b.n	800e582 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e558:	f06f 0302 	mvn.w	r3, #2
 800e55c:	617b      	str	r3, [r7, #20]
 800e55e:	e010      	b.n	800e582 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	6938      	ldr	r0, [r7, #16]
 800e564:	f000 fdb8 	bl	800f0d8 <xQueueSemaphoreTake>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d009      	beq.n	800e582 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d003      	beq.n	800e57c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e574:	f06f 0301 	mvn.w	r3, #1
 800e578:	617b      	str	r3, [r7, #20]
 800e57a:	e002      	b.n	800e582 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e57c:	f06f 0302 	mvn.w	r3, #2
 800e580:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e582:	697b      	ldr	r3, [r7, #20]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3718      	adds	r7, #24
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f023 0301 	bic.w	r3, r3, #1
 800e59a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5a8:	f3ef 8305 	mrs	r3, IPSR
 800e5ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800e5ae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d003      	beq.n	800e5bc <osMutexRelease+0x30>
    stat = osErrorISR;
 800e5b4:	f06f 0305 	mvn.w	r3, #5
 800e5b8:	617b      	str	r3, [r7, #20]
 800e5ba:	e01f      	b.n	800e5fc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d103      	bne.n	800e5ca <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e5c2:	f06f 0303 	mvn.w	r3, #3
 800e5c6:	617b      	str	r3, [r7, #20]
 800e5c8:	e018      	b.n	800e5fc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d009      	beq.n	800e5e4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e5d0:	6938      	ldr	r0, [r7, #16]
 800e5d2:	f000 fa93 	bl	800eafc <xQueueGiveMutexRecursive>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d00f      	beq.n	800e5fc <osMutexRelease+0x70>
        stat = osErrorResource;
 800e5dc:	f06f 0302 	mvn.w	r3, #2
 800e5e0:	617b      	str	r3, [r7, #20]
 800e5e2:	e00b      	b.n	800e5fc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	6938      	ldr	r0, [r7, #16]
 800e5ec:	f000 faf2 	bl	800ebd4 <xQueueGenericSend>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d002      	beq.n	800e5fc <osMutexRelease+0x70>
        stat = osErrorResource;
 800e5f6:	f06f 0302 	mvn.w	r3, #2
 800e5fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e5fc:	697b      	ldr	r3, [r7, #20]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3718      	adds	r7, #24
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
	...

0800e608 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	4a07      	ldr	r2, [pc, #28]	@ (800e634 <vApplicationGetIdleTaskMemory+0x2c>)
 800e618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	4a06      	ldr	r2, [pc, #24]	@ (800e638 <vApplicationGetIdleTaskMemory+0x30>)
 800e61e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2280      	movs	r2, #128	@ 0x80
 800e624:	601a      	str	r2, [r3, #0]
}
 800e626:	bf00      	nop
 800e628:	3714      	adds	r7, #20
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	24032d58 	.word	0x24032d58
 800e638:	24032e00 	.word	0x24032e00

0800e63c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4a07      	ldr	r2, [pc, #28]	@ (800e668 <vApplicationGetTimerTaskMemory+0x2c>)
 800e64c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	4a06      	ldr	r2, [pc, #24]	@ (800e66c <vApplicationGetTimerTaskMemory+0x30>)
 800e652:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e65a:	601a      	str	r2, [r3, #0]
}
 800e65c:	bf00      	nop
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	24033000 	.word	0x24033000
 800e66c:	240330a8 	.word	0x240330a8

0800e670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f103 0208 	add.w	r2, r3, #8
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f103 0208 	add.w	r2, r3, #8
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f103 0208 	add.w	r2, r3, #8
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6a4:	bf00      	nop
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6be:	bf00      	nop
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b085      	sub	sp, #20
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	689a      	ldr	r2, [r3, #8]
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	683a      	ldr	r2, [r7, #0]
 800e6ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	1c5a      	adds	r2, r3, #1
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	601a      	str	r2, [r3, #0]
}
 800e706:	bf00      	nop
 800e708:	3714      	adds	r7, #20
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e712:	b480      	push	{r7}
 800e714:	b085      	sub	sp, #20
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e728:	d103      	bne.n	800e732 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	691b      	ldr	r3, [r3, #16]
 800e72e:	60fb      	str	r3, [r7, #12]
 800e730:	e00c      	b.n	800e74c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	3308      	adds	r3, #8
 800e736:	60fb      	str	r3, [r7, #12]
 800e738:	e002      	b.n	800e740 <vListInsert+0x2e>
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	60fb      	str	r3, [r7, #12]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d2f6      	bcs.n	800e73a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	685a      	ldr	r2, [r3, #4]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	68fa      	ldr	r2, [r7, #12]
 800e760:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	683a      	ldr	r2, [r7, #0]
 800e766:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	1c5a      	adds	r2, r3, #1
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	601a      	str	r2, [r3, #0]
}
 800e778:	bf00      	nop
 800e77a:	3714      	adds	r7, #20
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e784:	b480      	push	{r7}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	6892      	ldr	r2, [r2, #8]
 800e79a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	6852      	ldr	r2, [r2, #4]
 800e7a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d103      	bne.n	800e7b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	689a      	ldr	r2, [r3, #8]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	1e5a      	subs	r2, r3, #1
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3714      	adds	r7, #20
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10b      	bne.n	800e804 <xQueueGenericReset+0x2c>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	60bb      	str	r3, [r7, #8]
}
 800e7fe:	bf00      	nop
 800e800:	bf00      	nop
 800e802:	e7fd      	b.n	800e800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e804:	f002 fe18 	bl	8011438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e810:	68f9      	ldr	r1, [r7, #12]
 800e812:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e814:	fb01 f303 	mul.w	r3, r1, r3
 800e818:	441a      	add	r2, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e834:	3b01      	subs	r3, #1
 800e836:	68f9      	ldr	r1, [r7, #12]
 800e838:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e83a:	fb01 f303 	mul.w	r3, r1, r3
 800e83e:	441a      	add	r2, r3
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	22ff      	movs	r2, #255	@ 0xff
 800e848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	22ff      	movs	r2, #255	@ 0xff
 800e850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d114      	bne.n	800e884 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d01a      	beq.n	800e898 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3310      	adds	r3, #16
 800e866:	4618      	mov	r0, r3
 800e868:	f001 fb70 	bl	800ff4c <xTaskRemoveFromEventList>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d012      	beq.n	800e898 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e872:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a8 <xQueueGenericReset+0xd0>)
 800e874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	e009      	b.n	800e898 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	3310      	adds	r3, #16
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff fef1 	bl	800e670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	3324      	adds	r3, #36	@ 0x24
 800e892:	4618      	mov	r0, r3
 800e894:	f7ff feec 	bl	800e670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e898:	f002 fe00 	bl	801149c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e89c:	2301      	movs	r3, #1
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	e000ed04 	.word	0xe000ed04

0800e8ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b08e      	sub	sp, #56	@ 0x38
 800e8b0:	af02      	add	r7, sp, #8
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
 800e8b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d10b      	bne.n	800e8d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e8d2:	bf00      	nop
 800e8d4:	bf00      	nop
 800e8d6:	e7fd      	b.n	800e8d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10b      	bne.n	800e8f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e8f0:	bf00      	nop
 800e8f2:	bf00      	nop
 800e8f4:	e7fd      	b.n	800e8f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <xQueueGenericCreateStatic+0x56>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <xQueueGenericCreateStatic+0x5a>
 800e902:	2301      	movs	r3, #1
 800e904:	e000      	b.n	800e908 <xQueueGenericCreateStatic+0x5c>
 800e906:	2300      	movs	r3, #0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d10b      	bne.n	800e924 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	623b      	str	r3, [r7, #32]
}
 800e91e:	bf00      	nop
 800e920:	bf00      	nop
 800e922:	e7fd      	b.n	800e920 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d102      	bne.n	800e930 <xQueueGenericCreateStatic+0x84>
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d101      	bne.n	800e934 <xQueueGenericCreateStatic+0x88>
 800e930:	2301      	movs	r3, #1
 800e932:	e000      	b.n	800e936 <xQueueGenericCreateStatic+0x8a>
 800e934:	2300      	movs	r3, #0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10b      	bne.n	800e952 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	61fb      	str	r3, [r7, #28]
}
 800e94c:	bf00      	nop
 800e94e:	bf00      	nop
 800e950:	e7fd      	b.n	800e94e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e952:	2350      	movs	r3, #80	@ 0x50
 800e954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	2b50      	cmp	r3, #80	@ 0x50
 800e95a:	d00b      	beq.n	800e974 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	61bb      	str	r3, [r7, #24]
}
 800e96e:	bf00      	nop
 800e970:	bf00      	nop
 800e972:	e7fd      	b.n	800e970 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e974:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00d      	beq.n	800e99c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e982:	2201      	movs	r2, #1
 800e984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e988:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	4613      	mov	r3, r2
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f000 f840 	bl	800ea1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3730      	adds	r7, #48	@ 0x30
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b08a      	sub	sp, #40	@ 0x28
 800e9aa:	af02      	add	r7, sp, #8
 800e9ac:	60f8      	str	r0, [r7, #12]
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10b      	bne.n	800e9d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9be:	f383 8811 	msr	BASEPRI, r3
 800e9c2:	f3bf 8f6f 	isb	sy
 800e9c6:	f3bf 8f4f 	dsb	sy
 800e9ca:	613b      	str	r3, [r7, #16]
}
 800e9cc:	bf00      	nop
 800e9ce:	bf00      	nop
 800e9d0:	e7fd      	b.n	800e9ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	fb02 f303 	mul.w	r3, r2, r3
 800e9da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	3350      	adds	r3, #80	@ 0x50
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f002 fe4b 	bl	801167c <pvPortMalloc>
 800e9e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d011      	beq.n	800ea12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	3350      	adds	r3, #80	@ 0x50
 800e9f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea00:	79fa      	ldrb	r2, [r7, #7]
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	4613      	mov	r3, r2
 800ea08:	697a      	ldr	r2, [r7, #20]
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f000 f805 	bl	800ea1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea12:	69bb      	ldr	r3, [r7, #24]
	}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3720      	adds	r7, #32
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
 800ea28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d103      	bne.n	800ea38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	69ba      	ldr	r2, [r7, #24]
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	e002      	b.n	800ea3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	69b8      	ldr	r0, [r7, #24]
 800ea4e:	f7ff fec3 	bl	800e7d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	78fa      	ldrb	r2, [r7, #3]
 800ea56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b082      	sub	sp, #8
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00e      	beq.n	800ea8e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ea82:	2300      	movs	r3, #0
 800ea84:	2200      	movs	r2, #0
 800ea86:	2100      	movs	r1, #0
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 f8a3 	bl	800ebd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ea8e:	bf00      	nop
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b086      	sub	sp, #24
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	617b      	str	r3, [r7, #20]
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800eaa8:	79fb      	ldrb	r3, [r7, #7]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	6939      	ldr	r1, [r7, #16]
 800eaae:	6978      	ldr	r0, [r7, #20]
 800eab0:	f7ff ff79 	bl	800e9a6 <xQueueGenericCreate>
 800eab4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7ff ffd3 	bl	800ea62 <prvInitialiseMutex>

		return xNewQueue;
 800eabc:	68fb      	ldr	r3, [r7, #12]
	}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3718      	adds	r7, #24
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b088      	sub	sp, #32
 800eaca:	af02      	add	r7, sp, #8
 800eacc:	4603      	mov	r3, r0
 800eace:	6039      	str	r1, [r7, #0]
 800ead0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ead2:	2301      	movs	r3, #1
 800ead4:	617b      	str	r3, [r7, #20]
 800ead6:	2300      	movs	r3, #0
 800ead8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800eada:	79fb      	ldrb	r3, [r7, #7]
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	2200      	movs	r2, #0
 800eae2:	6939      	ldr	r1, [r7, #16]
 800eae4:	6978      	ldr	r0, [r7, #20]
 800eae6:	f7ff fee1 	bl	800e8ac <xQueueGenericCreateStatic>
 800eaea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f7ff ffb8 	bl	800ea62 <prvInitialiseMutex>

		return xNewQueue;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
	}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800eafc:	b590      	push	{r4, r7, lr}
 800eafe:	b087      	sub	sp, #28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d10b      	bne.n	800eb26 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	60fb      	str	r3, [r7, #12]
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	e7fd      	b.n	800eb22 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	689c      	ldr	r4, [r3, #8]
 800eb2a:	f001 fbfd 	bl	8010328 <xTaskGetCurrentTaskHandle>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	429c      	cmp	r4, r3
 800eb32:	d111      	bne.n	800eb58 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	1e5a      	subs	r2, r3, #1
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d105      	bne.n	800eb52 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800eb46:	2300      	movs	r3, #0
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	6938      	ldr	r0, [r7, #16]
 800eb4e:	f000 f841 	bl	800ebd4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800eb52:	2301      	movs	r3, #1
 800eb54:	617b      	str	r3, [r7, #20]
 800eb56:	e001      	b.n	800eb5c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800eb5c:	697b      	ldr	r3, [r7, #20]
	}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	371c      	adds	r7, #28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd90      	pop	{r4, r7, pc}

0800eb66 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800eb66:	b590      	push	{r4, r7, lr}
 800eb68:	b087      	sub	sp, #28
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d10b      	bne.n	800eb92 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800eb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	60fb      	str	r3, [r7, #12]
}
 800eb8c:	bf00      	nop
 800eb8e:	bf00      	nop
 800eb90:	e7fd      	b.n	800eb8e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	689c      	ldr	r4, [r3, #8]
 800eb96:	f001 fbc7 	bl	8010328 <xTaskGetCurrentTaskHandle>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	429c      	cmp	r4, r3
 800eb9e:	d107      	bne.n	800ebb0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	1c5a      	adds	r2, r3, #1
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	617b      	str	r3, [r7, #20]
 800ebae:	e00c      	b.n	800ebca <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6938      	ldr	r0, [r7, #16]
 800ebb4:	f000 fa90 	bl	800f0d8 <xQueueSemaphoreTake>
 800ebb8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d004      	beq.n	800ebca <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	1c5a      	adds	r2, r3, #1
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ebca:	697b      	ldr	r3, [r7, #20]
	}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	371c      	adds	r7, #28
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd90      	pop	{r4, r7, pc}

0800ebd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b08e      	sub	sp, #56	@ 0x38
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
 800ebe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ebea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10b      	bne.n	800ec08 <xQueueGenericSend+0x34>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	e7fd      	b.n	800ec04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d103      	bne.n	800ec16 <xQueueGenericSend+0x42>
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d101      	bne.n	800ec1a <xQueueGenericSend+0x46>
 800ec16:	2301      	movs	r3, #1
 800ec18:	e000      	b.n	800ec1c <xQueueGenericSend+0x48>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10b      	bne.n	800ec38 <xQueueGenericSend+0x64>
	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ec32:	bf00      	nop
 800ec34:	bf00      	nop
 800ec36:	e7fd      	b.n	800ec34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d103      	bne.n	800ec46 <xQueueGenericSend+0x72>
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	d101      	bne.n	800ec4a <xQueueGenericSend+0x76>
 800ec46:	2301      	movs	r3, #1
 800ec48:	e000      	b.n	800ec4c <xQueueGenericSend+0x78>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10b      	bne.n	800ec68 <xQueueGenericSend+0x94>
	__asm volatile
 800ec50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	623b      	str	r3, [r7, #32]
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	e7fd      	b.n	800ec64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec68:	f001 fb6e 	bl	8010348 <xTaskGetSchedulerState>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d102      	bne.n	800ec78 <xQueueGenericSend+0xa4>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d101      	bne.n	800ec7c <xQueueGenericSend+0xa8>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e000      	b.n	800ec7e <xQueueGenericSend+0xaa>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d10b      	bne.n	800ec9a <xQueueGenericSend+0xc6>
	__asm volatile
 800ec82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec86:	f383 8811 	msr	BASEPRI, r3
 800ec8a:	f3bf 8f6f 	isb	sy
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	61fb      	str	r3, [r7, #28]
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop
 800ec98:	e7fd      	b.n	800ec96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec9a:	f002 fbcd 	bl	8011438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d302      	bcc.n	800ecb0 <xQueueGenericSend+0xdc>
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d129      	bne.n	800ed04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecb0:	683a      	ldr	r2, [r7, #0]
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ecb6:	f000 fb37 	bl	800f328 <prvCopyDataToQueue>
 800ecba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d010      	beq.n	800ece6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc6:	3324      	adds	r3, #36	@ 0x24
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f001 f93f 	bl	800ff4c <xTaskRemoveFromEventList>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d013      	beq.n	800ecfc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ecd4:	4b3f      	ldr	r3, [pc, #252]	@ (800edd4 <xQueueGenericSend+0x200>)
 800ecd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	f3bf 8f6f 	isb	sy
 800ece4:	e00a      	b.n	800ecfc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ece6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d007      	beq.n	800ecfc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ecec:	4b39      	ldr	r3, [pc, #228]	@ (800edd4 <xQueueGenericSend+0x200>)
 800ecee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ecfc:	f002 fbce 	bl	801149c <vPortExitCritical>
				return pdPASS;
 800ed00:	2301      	movs	r3, #1
 800ed02:	e063      	b.n	800edcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d103      	bne.n	800ed12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed0a:	f002 fbc7 	bl	801149c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	e05c      	b.n	800edcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed18:	f107 0314 	add.w	r3, r7, #20
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f001 f9a1 	bl	8010064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed22:	2301      	movs	r3, #1
 800ed24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed26:	f002 fbb9 	bl	801149c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed2a:	f000 fecf 	bl	800facc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed2e:	f002 fb83 	bl	8011438 <vPortEnterCritical>
 800ed32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed38:	b25b      	sxtb	r3, r3
 800ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed3e:	d103      	bne.n	800ed48 <xQueueGenericSend+0x174>
 800ed40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed4e:	b25b      	sxtb	r3, r3
 800ed50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed54:	d103      	bne.n	800ed5e <xQueueGenericSend+0x18a>
 800ed56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ed5e:	f002 fb9d 	bl	801149c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed62:	1d3a      	adds	r2, r7, #4
 800ed64:	f107 0314 	add.w	r3, r7, #20
 800ed68:	4611      	mov	r1, r2
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f001 f990 	bl	8010090 <xTaskCheckForTimeOut>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d124      	bne.n	800edc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed78:	f000 fbce 	bl	800f518 <prvIsQueueFull>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d018      	beq.n	800edb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed84:	3310      	adds	r3, #16
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	4611      	mov	r1, r2
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f001 f88c 	bl	800fea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed92:	f000 fb59 	bl	800f448 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed96:	f000 fea7 	bl	800fae8 <xTaskResumeAll>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f47f af7c 	bne.w	800ec9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800eda2:	4b0c      	ldr	r3, [pc, #48]	@ (800edd4 <xQueueGenericSend+0x200>)
 800eda4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	f3bf 8f6f 	isb	sy
 800edb2:	e772      	b.n	800ec9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800edb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800edb6:	f000 fb47 	bl	800f448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800edba:	f000 fe95 	bl	800fae8 <xTaskResumeAll>
 800edbe:	e76c      	b.n	800ec9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800edc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800edc2:	f000 fb41 	bl	800f448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800edc6:	f000 fe8f 	bl	800fae8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800edca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3738      	adds	r7, #56	@ 0x38
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	e000ed04 	.word	0xe000ed04

0800edd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b090      	sub	sp, #64	@ 0x40
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800edea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edec:	2b00      	cmp	r3, #0
 800edee:	d10b      	bne.n	800ee08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ee02:	bf00      	nop
 800ee04:	bf00      	nop
 800ee06:	e7fd      	b.n	800ee04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d103      	bne.n	800ee16 <xQueueGenericSendFromISR+0x3e>
 800ee0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <xQueueGenericSendFromISR+0x42>
 800ee16:	2301      	movs	r3, #1
 800ee18:	e000      	b.n	800ee1c <xQueueGenericSendFromISR+0x44>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10b      	bne.n	800ee38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ee32:	bf00      	nop
 800ee34:	bf00      	nop
 800ee36:	e7fd      	b.n	800ee34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	2b02      	cmp	r3, #2
 800ee3c:	d103      	bne.n	800ee46 <xQueueGenericSendFromISR+0x6e>
 800ee3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d101      	bne.n	800ee4a <xQueueGenericSendFromISR+0x72>
 800ee46:	2301      	movs	r3, #1
 800ee48:	e000      	b.n	800ee4c <xQueueGenericSendFromISR+0x74>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d10b      	bne.n	800ee68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ee50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee54:	f383 8811 	msr	BASEPRI, r3
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	f3bf 8f4f 	dsb	sy
 800ee60:	623b      	str	r3, [r7, #32]
}
 800ee62:	bf00      	nop
 800ee64:	bf00      	nop
 800ee66:	e7fd      	b.n	800ee64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee68:	f002 fbc6 	bl	80115f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ee6c:	f3ef 8211 	mrs	r2, BASEPRI
 800ee70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee74:	f383 8811 	msr	BASEPRI, r3
 800ee78:	f3bf 8f6f 	isb	sy
 800ee7c:	f3bf 8f4f 	dsb	sy
 800ee80:	61fa      	str	r2, [r7, #28]
 800ee82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ee84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d302      	bcc.n	800ee9a <xQueueGenericSendFromISR+0xc2>
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	d12f      	bne.n	800eefa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eea0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	68b9      	ldr	r1, [r7, #8]
 800eeae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eeb0:	f000 fa3a 	bl	800f328 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eeb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800eeb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eebc:	d112      	bne.n	800eee4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d016      	beq.n	800eef4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec8:	3324      	adds	r3, #36	@ 0x24
 800eeca:	4618      	mov	r0, r3
 800eecc:	f001 f83e 	bl	800ff4c <xTaskRemoveFromEventList>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00e      	beq.n	800eef4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d00b      	beq.n	800eef4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	e007      	b.n	800eef4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eee4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eee8:	3301      	adds	r3, #1
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	b25a      	sxtb	r2, r3
 800eeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800eef4:	2301      	movs	r3, #1
 800eef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800eef8:	e001      	b.n	800eefe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eefa:	2300      	movs	r3, #0
 800eefc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eefe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ef08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3740      	adds	r7, #64	@ 0x40
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b08c      	sub	sp, #48	@ 0x30
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef20:	2300      	movs	r3, #0
 800ef22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d10b      	bne.n	800ef46 <xQueueReceive+0x32>
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	623b      	str	r3, [r7, #32]
}
 800ef40:	bf00      	nop
 800ef42:	bf00      	nop
 800ef44:	e7fd      	b.n	800ef42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d103      	bne.n	800ef54 <xQueueReceive+0x40>
 800ef4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d101      	bne.n	800ef58 <xQueueReceive+0x44>
 800ef54:	2301      	movs	r3, #1
 800ef56:	e000      	b.n	800ef5a <xQueueReceive+0x46>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10b      	bne.n	800ef76 <xQueueReceive+0x62>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	61fb      	str	r3, [r7, #28]
}
 800ef70:	bf00      	nop
 800ef72:	bf00      	nop
 800ef74:	e7fd      	b.n	800ef72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef76:	f001 f9e7 	bl	8010348 <xTaskGetSchedulerState>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <xQueueReceive+0x72>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d101      	bne.n	800ef8a <xQueueReceive+0x76>
 800ef86:	2301      	movs	r3, #1
 800ef88:	e000      	b.n	800ef8c <xQueueReceive+0x78>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d10b      	bne.n	800efa8 <xQueueReceive+0x94>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	61bb      	str	r3, [r7, #24]
}
 800efa2:	bf00      	nop
 800efa4:	bf00      	nop
 800efa6:	e7fd      	b.n	800efa4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800efa8:	f002 fa46 	bl	8011438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efb0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d01f      	beq.n	800eff8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800efb8:	68b9      	ldr	r1, [r7, #8]
 800efba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efbc:	f000 fa1e 	bl	800f3fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800efc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc2:	1e5a      	subs	r2, r3, #1
 800efc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efca:	691b      	ldr	r3, [r3, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00f      	beq.n	800eff0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd2:	3310      	adds	r3, #16
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 ffb9 	bl	800ff4c <xTaskRemoveFromEventList>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d007      	beq.n	800eff0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efe0:	4b3c      	ldr	r3, [pc, #240]	@ (800f0d4 <xQueueReceive+0x1c0>)
 800efe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eff0:	f002 fa54 	bl	801149c <vPortExitCritical>
				return pdPASS;
 800eff4:	2301      	movs	r3, #1
 800eff6:	e069      	b.n	800f0cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d103      	bne.n	800f006 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800effe:	f002 fa4d 	bl	801149c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f002:	2300      	movs	r3, #0
 800f004:	e062      	b.n	800f0cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d106      	bne.n	800f01a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f00c:	f107 0310 	add.w	r3, r7, #16
 800f010:	4618      	mov	r0, r3
 800f012:	f001 f827 	bl	8010064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f016:	2301      	movs	r3, #1
 800f018:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f01a:	f002 fa3f 	bl	801149c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f01e:	f000 fd55 	bl	800facc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f022:	f002 fa09 	bl	8011438 <vPortEnterCritical>
 800f026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f02c:	b25b      	sxtb	r3, r3
 800f02e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f032:	d103      	bne.n	800f03c <xQueueReceive+0x128>
 800f034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f036:	2200      	movs	r2, #0
 800f038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f042:	b25b      	sxtb	r3, r3
 800f044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f048:	d103      	bne.n	800f052 <xQueueReceive+0x13e>
 800f04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f052:	f002 fa23 	bl	801149c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f056:	1d3a      	adds	r2, r7, #4
 800f058:	f107 0310 	add.w	r3, r7, #16
 800f05c:	4611      	mov	r1, r2
 800f05e:	4618      	mov	r0, r3
 800f060:	f001 f816 	bl	8010090 <xTaskCheckForTimeOut>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d123      	bne.n	800f0b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f06c:	f000 fa3e 	bl	800f4ec <prvIsQueueEmpty>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d017      	beq.n	800f0a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f078:	3324      	adds	r3, #36	@ 0x24
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	4611      	mov	r1, r2
 800f07e:	4618      	mov	r0, r3
 800f080:	f000 ff12 	bl	800fea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f086:	f000 f9df 	bl	800f448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f08a:	f000 fd2d 	bl	800fae8 <xTaskResumeAll>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d189      	bne.n	800efa8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f094:	4b0f      	ldr	r3, [pc, #60]	@ (800f0d4 <xQueueReceive+0x1c0>)
 800f096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f09a:	601a      	str	r2, [r3, #0]
 800f09c:	f3bf 8f4f 	dsb	sy
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	e780      	b.n	800efa8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f0a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0a8:	f000 f9ce 	bl	800f448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0ac:	f000 fd1c 	bl	800fae8 <xTaskResumeAll>
 800f0b0:	e77a      	b.n	800efa8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f0b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0b4:	f000 f9c8 	bl	800f448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0b8:	f000 fd16 	bl	800fae8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0be:	f000 fa15 	bl	800f4ec <prvIsQueueEmpty>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f43f af6f 	beq.w	800efa8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f0ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3730      	adds	r7, #48	@ 0x30
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	e000ed04 	.word	0xe000ed04

0800f0d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08e      	sub	sp, #56	@ 0x38
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d10b      	bne.n	800f10c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f8:	f383 8811 	msr	BASEPRI, r3
 800f0fc:	f3bf 8f6f 	isb	sy
 800f100:	f3bf 8f4f 	dsb	sy
 800f104:	623b      	str	r3, [r7, #32]
}
 800f106:	bf00      	nop
 800f108:	bf00      	nop
 800f10a:	e7fd      	b.n	800f108 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00b      	beq.n	800f12c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f118:	f383 8811 	msr	BASEPRI, r3
 800f11c:	f3bf 8f6f 	isb	sy
 800f120:	f3bf 8f4f 	dsb	sy
 800f124:	61fb      	str	r3, [r7, #28]
}
 800f126:	bf00      	nop
 800f128:	bf00      	nop
 800f12a:	e7fd      	b.n	800f128 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f12c:	f001 f90c 	bl	8010348 <xTaskGetSchedulerState>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d102      	bne.n	800f13c <xQueueSemaphoreTake+0x64>
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d101      	bne.n	800f140 <xQueueSemaphoreTake+0x68>
 800f13c:	2301      	movs	r3, #1
 800f13e:	e000      	b.n	800f142 <xQueueSemaphoreTake+0x6a>
 800f140:	2300      	movs	r3, #0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d10b      	bne.n	800f15e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	61bb      	str	r3, [r7, #24]
}
 800f158:	bf00      	nop
 800f15a:	bf00      	nop
 800f15c:	e7fd      	b.n	800f15a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f15e:	f002 f96b 	bl	8011438 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f166:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d024      	beq.n	800f1b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f170:	1e5a      	subs	r2, r3, #1
 800f172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f174:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d104      	bne.n	800f188 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f17e:	f001 fa5d 	bl	801063c <pvTaskIncrementMutexHeldCount>
 800f182:	4602      	mov	r2, r0
 800f184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f186:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00f      	beq.n	800f1b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f192:	3310      	adds	r3, #16
 800f194:	4618      	mov	r0, r3
 800f196:	f000 fed9 	bl	800ff4c <xTaskRemoveFromEventList>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d007      	beq.n	800f1b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f1a0:	4b54      	ldr	r3, [pc, #336]	@ (800f2f4 <xQueueSemaphoreTake+0x21c>)
 800f1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1a6:	601a      	str	r2, [r3, #0]
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f1b0:	f002 f974 	bl	801149c <vPortExitCritical>
				return pdPASS;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e098      	b.n	800f2ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d112      	bne.n	800f1e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00b      	beq.n	800f1dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c8:	f383 8811 	msr	BASEPRI, r3
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	f3bf 8f4f 	dsb	sy
 800f1d4:	617b      	str	r3, [r7, #20]
}
 800f1d6:	bf00      	nop
 800f1d8:	bf00      	nop
 800f1da:	e7fd      	b.n	800f1d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f1dc:	f002 f95e 	bl	801149c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e082      	b.n	800f2ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d106      	bne.n	800f1f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1ea:	f107 030c 	add.w	r3, r7, #12
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 ff38 	bl	8010064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1f8:	f002 f950 	bl	801149c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1fc:	f000 fc66 	bl	800facc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f200:	f002 f91a 	bl	8011438 <vPortEnterCritical>
 800f204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f206:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f20a:	b25b      	sxtb	r3, r3
 800f20c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f210:	d103      	bne.n	800f21a <xQueueSemaphoreTake+0x142>
 800f212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f214:	2200      	movs	r2, #0
 800f216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f21c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f220:	b25b      	sxtb	r3, r3
 800f222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f226:	d103      	bne.n	800f230 <xQueueSemaphoreTake+0x158>
 800f228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f230:	f002 f934 	bl	801149c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f234:	463a      	mov	r2, r7
 800f236:	f107 030c 	add.w	r3, r7, #12
 800f23a:	4611      	mov	r1, r2
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 ff27 	bl	8010090 <xTaskCheckForTimeOut>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d132      	bne.n	800f2ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f248:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f24a:	f000 f94f 	bl	800f4ec <prvIsQueueEmpty>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d026      	beq.n	800f2a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d109      	bne.n	800f270 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f25c:	f002 f8ec 	bl	8011438 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f262:	689b      	ldr	r3, [r3, #8]
 800f264:	4618      	mov	r0, r3
 800f266:	f001 f88d 	bl	8010384 <xTaskPriorityInherit>
 800f26a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f26c:	f002 f916 	bl	801149c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f272:	3324      	adds	r3, #36	@ 0x24
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	4611      	mov	r1, r2
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fe15 	bl	800fea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f27e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f280:	f000 f8e2 	bl	800f448 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f284:	f000 fc30 	bl	800fae8 <xTaskResumeAll>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f47f af67 	bne.w	800f15e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f290:	4b18      	ldr	r3, [pc, #96]	@ (800f2f4 <xQueueSemaphoreTake+0x21c>)
 800f292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f296:	601a      	str	r2, [r3, #0]
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	e75d      	b.n	800f15e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f2a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2a4:	f000 f8d0 	bl	800f448 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2a8:	f000 fc1e 	bl	800fae8 <xTaskResumeAll>
 800f2ac:	e757      	b.n	800f15e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f2ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2b0:	f000 f8ca 	bl	800f448 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2b4:	f000 fc18 	bl	800fae8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2ba:	f000 f917 	bl	800f4ec <prvIsQueueEmpty>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f43f af4c 	beq.w	800f15e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d00d      	beq.n	800f2e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f2cc:	f002 f8b4 	bl	8011438 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f2d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2d2:	f000 f811 	bl	800f2f8 <prvGetDisinheritPriorityAfterTimeout>
 800f2d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f001 f928 	bl	8010534 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f2e4:	f002 f8da 	bl	801149c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3738      	adds	r7, #56	@ 0x38
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	e000ed04 	.word	0xe000ed04

0800f2f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f304:	2b00      	cmp	r3, #0
 800f306:	d006      	beq.n	800f316 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	e001      	b.n	800f31a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f316:	2300      	movs	r3, #0
 800f318:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f31a:	68fb      	ldr	r3, [r7, #12]
	}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3714      	adds	r7, #20
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f334:	2300      	movs	r3, #0
 800f336:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f33c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10d      	bne.n	800f362 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d14d      	bne.n	800f3ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	4618      	mov	r0, r3
 800f354:	f001 f87e 	bl	8010454 <xTaskPriorityDisinherit>
 800f358:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2200      	movs	r2, #0
 800f35e:	609a      	str	r2, [r3, #8]
 800f360:	e043      	b.n	800f3ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d119      	bne.n	800f39c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6858      	ldr	r0, [r3, #4]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f370:	461a      	mov	r2, r3
 800f372:	68b9      	ldr	r1, [r7, #8]
 800f374:	f013 f8e3 	bl	802253e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	685a      	ldr	r2, [r3, #4]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f380:	441a      	add	r2, r3
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	685a      	ldr	r2, [r3, #4]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d32b      	bcc.n	800f3ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	605a      	str	r2, [r3, #4]
 800f39a:	e026      	b.n	800f3ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	68d8      	ldr	r0, [r3, #12]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	68b9      	ldr	r1, [r7, #8]
 800f3a8:	f013 f8c9 	bl	802253e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	68da      	ldr	r2, [r3, #12]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3b4:	425b      	negs	r3, r3
 800f3b6:	441a      	add	r2, r3
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	68da      	ldr	r2, [r3, #12]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d207      	bcs.n	800f3d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3d0:	425b      	negs	r3, r3
 800f3d2:	441a      	add	r2, r3
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	d105      	bne.n	800f3ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d002      	beq.n	800f3ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	1c5a      	adds	r2, r3, #1
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f3f2:	697b      	ldr	r3, [r7, #20]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3718      	adds	r7, #24
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d018      	beq.n	800f440 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	68da      	ldr	r2, [r3, #12]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f416:	441a      	add	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	68da      	ldr	r2, [r3, #12]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	429a      	cmp	r2, r3
 800f426:	d303      	bcc.n	800f430 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	68d9      	ldr	r1, [r3, #12]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f438:	461a      	mov	r2, r3
 800f43a:	6838      	ldr	r0, [r7, #0]
 800f43c:	f013 f87f 	bl	802253e <memcpy>
	}
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f450:	f001 fff2 	bl	8011438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f45a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f45c:	e011      	b.n	800f482 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f462:	2b00      	cmp	r3, #0
 800f464:	d012      	beq.n	800f48c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	3324      	adds	r3, #36	@ 0x24
 800f46a:	4618      	mov	r0, r3
 800f46c:	f000 fd6e 	bl	800ff4c <xTaskRemoveFromEventList>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f476:	f000 fe6f 	bl	8010158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f47a:	7bfb      	ldrb	r3, [r7, #15]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f486:	2b00      	cmp	r3, #0
 800f488:	dce9      	bgt.n	800f45e <prvUnlockQueue+0x16>
 800f48a:	e000      	b.n	800f48e <prvUnlockQueue+0x46>
					break;
 800f48c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	22ff      	movs	r2, #255	@ 0xff
 800f492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f496:	f002 f801 	bl	801149c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f49a:	f001 ffcd 	bl	8011438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f4a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4a6:	e011      	b.n	800f4cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	691b      	ldr	r3, [r3, #16]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d012      	beq.n	800f4d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3310      	adds	r3, #16
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f000 fd49 	bl	800ff4c <xTaskRemoveFromEventList>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4c0:	f000 fe4a 	bl	8010158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4c4:	7bbb      	ldrb	r3, [r7, #14]
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	dce9      	bgt.n	800f4a8 <prvUnlockQueue+0x60>
 800f4d4:	e000      	b.n	800f4d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	22ff      	movs	r2, #255	@ 0xff
 800f4dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f4e0:	f001 ffdc 	bl	801149c <vPortExitCritical>
}
 800f4e4:	bf00      	nop
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4f4:	f001 ffa0 	bl	8011438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d102      	bne.n	800f506 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f500:	2301      	movs	r3, #1
 800f502:	60fb      	str	r3, [r7, #12]
 800f504:	e001      	b.n	800f50a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f506:	2300      	movs	r3, #0
 800f508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f50a:	f001 ffc7 	bl	801149c <vPortExitCritical>

	return xReturn;
 800f50e:	68fb      	ldr	r3, [r7, #12]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f520:	f001 ff8a 	bl	8011438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d102      	bne.n	800f536 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f530:	2301      	movs	r3, #1
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	e001      	b.n	800f53a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f536:	2300      	movs	r3, #0
 800f538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f53a:	f001 ffaf 	bl	801149c <vPortExitCritical>

	return xReturn;
 800f53e:	68fb      	ldr	r3, [r7, #12]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f552:	2300      	movs	r3, #0
 800f554:	60fb      	str	r3, [r7, #12]
 800f556:	e014      	b.n	800f582 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f558:	4a0f      	ldr	r2, [pc, #60]	@ (800f598 <vQueueAddToRegistry+0x50>)
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10b      	bne.n	800f57c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f564:	490c      	ldr	r1, [pc, #48]	@ (800f598 <vQueueAddToRegistry+0x50>)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	683a      	ldr	r2, [r7, #0]
 800f56a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f56e:	4a0a      	ldr	r2, [pc, #40]	@ (800f598 <vQueueAddToRegistry+0x50>)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	4413      	add	r3, r2
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f57a:	e006      	b.n	800f58a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	3301      	adds	r3, #1
 800f580:	60fb      	str	r3, [r7, #12]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2b07      	cmp	r3, #7
 800f586:	d9e7      	bls.n	800f558 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f588:	bf00      	nop
 800f58a:	bf00      	nop
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	240334a8 	.word	0x240334a8

0800f59c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b086      	sub	sp, #24
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5ac:	f001 ff44 	bl	8011438 <vPortEnterCritical>
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f5b6:	b25b      	sxtb	r3, r3
 800f5b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5bc:	d103      	bne.n	800f5c6 <vQueueWaitForMessageRestricted+0x2a>
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5cc:	b25b      	sxtb	r3, r3
 800f5ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5d2:	d103      	bne.n	800f5dc <vQueueWaitForMessageRestricted+0x40>
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f5dc:	f001 ff5e 	bl	801149c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d106      	bne.n	800f5f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	3324      	adds	r3, #36	@ 0x24
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	68b9      	ldr	r1, [r7, #8]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f000 fc7f 	bl	800fef4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5f6:	6978      	ldr	r0, [r7, #20]
 800f5f8:	f7ff ff26 	bl	800f448 <prvUnlockQueue>
	}
 800f5fc:	bf00      	nop
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f604:	b580      	push	{r7, lr}
 800f606:	b08e      	sub	sp, #56	@ 0x38
 800f608:	af04      	add	r7, sp, #16
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
 800f610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10b      	bne.n	800f630 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	623b      	str	r3, [r7, #32]
}
 800f62a:	bf00      	nop
 800f62c:	bf00      	nop
 800f62e:	e7fd      	b.n	800f62c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10b      	bne.n	800f64e <xTaskCreateStatic+0x4a>
	__asm volatile
 800f636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f63a:	f383 8811 	msr	BASEPRI, r3
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f3bf 8f4f 	dsb	sy
 800f646:	61fb      	str	r3, [r7, #28]
}
 800f648:	bf00      	nop
 800f64a:	bf00      	nop
 800f64c:	e7fd      	b.n	800f64a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f64e:	23a8      	movs	r3, #168	@ 0xa8
 800f650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	2ba8      	cmp	r3, #168	@ 0xa8
 800f656:	d00b      	beq.n	800f670 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65c:	f383 8811 	msr	BASEPRI, r3
 800f660:	f3bf 8f6f 	isb	sy
 800f664:	f3bf 8f4f 	dsb	sy
 800f668:	61bb      	str	r3, [r7, #24]
}
 800f66a:	bf00      	nop
 800f66c:	bf00      	nop
 800f66e:	e7fd      	b.n	800f66c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f670:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f674:	2b00      	cmp	r3, #0
 800f676:	d01e      	beq.n	800f6b6 <xTaskCreateStatic+0xb2>
 800f678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d01b      	beq.n	800f6b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f680:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f686:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68a:	2202      	movs	r2, #2
 800f68c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f690:	2300      	movs	r3, #0
 800f692:	9303      	str	r3, [sp, #12]
 800f694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f696:	9302      	str	r3, [sp, #8]
 800f698:	f107 0314 	add.w	r3, r7, #20
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	68b9      	ldr	r1, [r7, #8]
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f000 f851 	bl	800f750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f6b0:	f000 f8f6 	bl	800f8a0 <prvAddNewTaskToReadyList>
 800f6b4:	e001      	b.n	800f6ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6ba:	697b      	ldr	r3, [r7, #20]
	}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3728      	adds	r7, #40	@ 0x28
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b08c      	sub	sp, #48	@ 0x30
 800f6c8:	af04      	add	r7, sp, #16
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	603b      	str	r3, [r7, #0]
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6d4:	88fb      	ldrh	r3, [r7, #6]
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f001 ffcf 	bl	801167c <pvPortMalloc>
 800f6de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00e      	beq.n	800f704 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f6e6:	20a8      	movs	r0, #168	@ 0xa8
 800f6e8:	f001 ffc8 	bl	801167c <pvPortMalloc>
 800f6ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d003      	beq.n	800f6fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f6fa:	e005      	b.n	800f708 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f6fc:	6978      	ldr	r0, [r7, #20]
 800f6fe:	f002 f88b 	bl	8011818 <vPortFree>
 800f702:	e001      	b.n	800f708 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f704:	2300      	movs	r3, #0
 800f706:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d017      	beq.n	800f73e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	2200      	movs	r2, #0
 800f712:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f716:	88fa      	ldrh	r2, [r7, #6]
 800f718:	2300      	movs	r3, #0
 800f71a:	9303      	str	r3, [sp, #12]
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	9302      	str	r3, [sp, #8]
 800f720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f722:	9301      	str	r3, [sp, #4]
 800f724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	68b9      	ldr	r1, [r7, #8]
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	f000 f80f 	bl	800f750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f732:	69f8      	ldr	r0, [r7, #28]
 800f734:	f000 f8b4 	bl	800f8a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f738:	2301      	movs	r3, #1
 800f73a:	61bb      	str	r3, [r7, #24]
 800f73c:	e002      	b.n	800f744 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f73e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f742:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f744:	69bb      	ldr	r3, [r7, #24]
	}
 800f746:	4618      	mov	r0, r3
 800f748:	3720      	adds	r7, #32
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
	...

0800f750 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
 800f75c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f760:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	461a      	mov	r2, r3
 800f768:	21a5      	movs	r1, #165	@ 0xa5
 800f76a:	f012 fdc9 	bl	8022300 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f772:	6879      	ldr	r1, [r7, #4]
 800f774:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f778:	440b      	add	r3, r1
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	f023 0307 	bic.w	r3, r3, #7
 800f786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	f003 0307 	and.w	r3, r3, #7
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00b      	beq.n	800f7aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	617b      	str	r3, [r7, #20]
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop
 800f7a8:	e7fd      	b.n	800f7a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d01f      	beq.n	800f7f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	61fb      	str	r3, [r7, #28]
 800f7b4:	e012      	b.n	800f7dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	7819      	ldrb	r1, [r3, #0]
 800f7be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	3334      	adds	r3, #52	@ 0x34
 800f7c6:	460a      	mov	r2, r1
 800f7c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d006      	beq.n	800f7e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	61fb      	str	r3, [r7, #28]
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	2b0f      	cmp	r3, #15
 800f7e0:	d9e9      	bls.n	800f7b6 <prvInitialiseNewTask+0x66>
 800f7e2:	e000      	b.n	800f7e6 <prvInitialiseNewTask+0x96>
			{
				break;
 800f7e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7ee:	e003      	b.n	800f7f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7fa:	2b37      	cmp	r3, #55	@ 0x37
 800f7fc:	d901      	bls.n	800f802 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f7fe:	2337      	movs	r3, #55	@ 0x37
 800f800:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f806:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f80c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f810:	2200      	movs	r2, #0
 800f812:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f816:	3304      	adds	r3, #4
 800f818:	4618      	mov	r0, r3
 800f81a:	f7fe ff49 	bl	800e6b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f820:	3318      	adds	r3, #24
 800f822:	4618      	mov	r0, r3
 800f824:	f7fe ff44 	bl	800e6b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f82a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f82c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f830:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f836:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f83c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f840:	2200      	movs	r2, #0
 800f842:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f848:	2200      	movs	r2, #0
 800f84a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f850:	3354      	adds	r3, #84	@ 0x54
 800f852:	224c      	movs	r2, #76	@ 0x4c
 800f854:	2100      	movs	r1, #0
 800f856:	4618      	mov	r0, r3
 800f858:	f012 fd52 	bl	8022300 <memset>
 800f85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85e:	4a0d      	ldr	r2, [pc, #52]	@ (800f894 <prvInitialiseNewTask+0x144>)
 800f860:	659a      	str	r2, [r3, #88]	@ 0x58
 800f862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f864:	4a0c      	ldr	r2, [pc, #48]	@ (800f898 <prvInitialiseNewTask+0x148>)
 800f866:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f86a:	4a0c      	ldr	r2, [pc, #48]	@ (800f89c <prvInitialiseNewTask+0x14c>)
 800f86c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f86e:	683a      	ldr	r2, [r7, #0]
 800f870:	68f9      	ldr	r1, [r7, #12]
 800f872:	69b8      	ldr	r0, [r7, #24]
 800f874:	f001 fcac 	bl	80111d0 <pxPortInitialiseStack>
 800f878:	4602      	mov	r2, r0
 800f87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f88a:	bf00      	nop
 800f88c:	3720      	adds	r7, #32
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	240695ac 	.word	0x240695ac
 800f898:	24069614 	.word	0x24069614
 800f89c:	2406967c 	.word	0x2406967c

0800f8a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8a8:	f001 fdc6 	bl	8011438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8ac:	4b2d      	ldr	r3, [pc, #180]	@ (800f964 <prvAddNewTaskToReadyList+0xc4>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	4a2c      	ldr	r2, [pc, #176]	@ (800f964 <prvAddNewTaskToReadyList+0xc4>)
 800f8b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8b6:	4b2c      	ldr	r3, [pc, #176]	@ (800f968 <prvAddNewTaskToReadyList+0xc8>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d109      	bne.n	800f8d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8be:	4a2a      	ldr	r2, [pc, #168]	@ (800f968 <prvAddNewTaskToReadyList+0xc8>)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8c4:	4b27      	ldr	r3, [pc, #156]	@ (800f964 <prvAddNewTaskToReadyList+0xc4>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d110      	bne.n	800f8ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8cc:	f000 fc68 	bl	80101a0 <prvInitialiseTaskLists>
 800f8d0:	e00d      	b.n	800f8ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8d2:	4b26      	ldr	r3, [pc, #152]	@ (800f96c <prvAddNewTaskToReadyList+0xcc>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d109      	bne.n	800f8ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8da:	4b23      	ldr	r3, [pc, #140]	@ (800f968 <prvAddNewTaskToReadyList+0xc8>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d802      	bhi.n	800f8ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8e8:	4a1f      	ldr	r2, [pc, #124]	@ (800f968 <prvAddNewTaskToReadyList+0xc8>)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8ee:	4b20      	ldr	r3, [pc, #128]	@ (800f970 <prvAddNewTaskToReadyList+0xd0>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	4a1e      	ldr	r2, [pc, #120]	@ (800f970 <prvAddNewTaskToReadyList+0xd0>)
 800f8f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f8f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f970 <prvAddNewTaskToReadyList+0xd0>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f904:	4b1b      	ldr	r3, [pc, #108]	@ (800f974 <prvAddNewTaskToReadyList+0xd4>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d903      	bls.n	800f914 <prvAddNewTaskToReadyList+0x74>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f910:	4a18      	ldr	r2, [pc, #96]	@ (800f974 <prvAddNewTaskToReadyList+0xd4>)
 800f912:	6013      	str	r3, [r2, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f918:	4613      	mov	r3, r2
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	4413      	add	r3, r2
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	4a15      	ldr	r2, [pc, #84]	@ (800f978 <prvAddNewTaskToReadyList+0xd8>)
 800f922:	441a      	add	r2, r3
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	3304      	adds	r3, #4
 800f928:	4619      	mov	r1, r3
 800f92a:	4610      	mov	r0, r2
 800f92c:	f7fe fecd 	bl	800e6ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f930:	f001 fdb4 	bl	801149c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f934:	4b0d      	ldr	r3, [pc, #52]	@ (800f96c <prvAddNewTaskToReadyList+0xcc>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00e      	beq.n	800f95a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f93c:	4b0a      	ldr	r3, [pc, #40]	@ (800f968 <prvAddNewTaskToReadyList+0xc8>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f946:	429a      	cmp	r2, r3
 800f948:	d207      	bcs.n	800f95a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f94a:	4b0c      	ldr	r3, [pc, #48]	@ (800f97c <prvAddNewTaskToReadyList+0xdc>)
 800f94c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f950:	601a      	str	r2, [r3, #0]
 800f952:	f3bf 8f4f 	dsb	sy
 800f956:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f95a:	bf00      	nop
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	240339bc 	.word	0x240339bc
 800f968:	240334e8 	.word	0x240334e8
 800f96c:	240339c8 	.word	0x240339c8
 800f970:	240339d8 	.word	0x240339d8
 800f974:	240339c4 	.word	0x240339c4
 800f978:	240334ec 	.word	0x240334ec
 800f97c:	e000ed04 	.word	0xe000ed04

0800f980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f988:	2300      	movs	r3, #0
 800f98a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d018      	beq.n	800f9c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f992:	4b14      	ldr	r3, [pc, #80]	@ (800f9e4 <vTaskDelay+0x64>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00b      	beq.n	800f9b2 <vTaskDelay+0x32>
	__asm volatile
 800f99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99e:	f383 8811 	msr	BASEPRI, r3
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	60bb      	str	r3, [r7, #8]
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	e7fd      	b.n	800f9ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f9b2:	f000 f88b 	bl	800facc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f001 f85b 	bl	8010a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9be:	f000 f893 	bl	800fae8 <xTaskResumeAll>
 800f9c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d107      	bne.n	800f9da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f9ca:	4b07      	ldr	r3, [pc, #28]	@ (800f9e8 <vTaskDelay+0x68>)
 800f9cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9d0:	601a      	str	r2, [r3, #0]
 800f9d2:	f3bf 8f4f 	dsb	sy
 800f9d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9da:	bf00      	nop
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	240339e4 	.word	0x240339e4
 800f9e8:	e000ed04 	.word	0xe000ed04

0800f9ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b08a      	sub	sp, #40	@ 0x28
 800f9f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9fa:	463a      	mov	r2, r7
 800f9fc:	1d39      	adds	r1, r7, #4
 800f9fe:	f107 0308 	add.w	r3, r7, #8
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fe fe00 	bl	800e608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	9202      	str	r2, [sp, #8]
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	2300      	movs	r3, #0
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	2300      	movs	r3, #0
 800fa18:	460a      	mov	r2, r1
 800fa1a:	4924      	ldr	r1, [pc, #144]	@ (800faac <vTaskStartScheduler+0xc0>)
 800fa1c:	4824      	ldr	r0, [pc, #144]	@ (800fab0 <vTaskStartScheduler+0xc4>)
 800fa1e:	f7ff fdf1 	bl	800f604 <xTaskCreateStatic>
 800fa22:	4603      	mov	r3, r0
 800fa24:	4a23      	ldr	r2, [pc, #140]	@ (800fab4 <vTaskStartScheduler+0xc8>)
 800fa26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa28:	4b22      	ldr	r3, [pc, #136]	@ (800fab4 <vTaskStartScheduler+0xc8>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa30:	2301      	movs	r3, #1
 800fa32:	617b      	str	r3, [r7, #20]
 800fa34:	e001      	b.n	800fa3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa36:	2300      	movs	r3, #0
 800fa38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d102      	bne.n	800fa46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa40:	f001 f86c 	bl	8010b1c <xTimerCreateTimerTask>
 800fa44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d11b      	bne.n	800fa84 <vTaskStartScheduler+0x98>
	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	613b      	str	r3, [r7, #16]
}
 800fa5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa60:	4b15      	ldr	r3, [pc, #84]	@ (800fab8 <vTaskStartScheduler+0xcc>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	3354      	adds	r3, #84	@ 0x54
 800fa66:	4a15      	ldr	r2, [pc, #84]	@ (800fabc <vTaskStartScheduler+0xd0>)
 800fa68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa6a:	4b15      	ldr	r3, [pc, #84]	@ (800fac0 <vTaskStartScheduler+0xd4>)
 800fa6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa72:	4b14      	ldr	r3, [pc, #80]	@ (800fac4 <vTaskStartScheduler+0xd8>)
 800fa74:	2201      	movs	r2, #1
 800fa76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa78:	4b13      	ldr	r3, [pc, #76]	@ (800fac8 <vTaskStartScheduler+0xdc>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa7e:	f001 fc37 	bl	80112f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa82:	e00f      	b.n	800faa4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa8a:	d10b      	bne.n	800faa4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800fa8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa90:	f383 8811 	msr	BASEPRI, r3
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	60fb      	str	r3, [r7, #12]
}
 800fa9e:	bf00      	nop
 800faa0:	bf00      	nop
 800faa2:	e7fd      	b.n	800faa0 <vTaskStartScheduler+0xb4>
}
 800faa4:	bf00      	nop
 800faa6:	3718      	adds	r7, #24
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	08023458 	.word	0x08023458
 800fab0:	08010171 	.word	0x08010171
 800fab4:	240339e0 	.word	0x240339e0
 800fab8:	240334e8 	.word	0x240334e8
 800fabc:	240012bc 	.word	0x240012bc
 800fac0:	240339dc 	.word	0x240339dc
 800fac4:	240339c8 	.word	0x240339c8
 800fac8:	240339c0 	.word	0x240339c0

0800facc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800facc:	b480      	push	{r7}
 800face:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fad0:	4b04      	ldr	r3, [pc, #16]	@ (800fae4 <vTaskSuspendAll+0x18>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3301      	adds	r3, #1
 800fad6:	4a03      	ldr	r2, [pc, #12]	@ (800fae4 <vTaskSuspendAll+0x18>)
 800fad8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fada:	bf00      	nop
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr
 800fae4:	240339e4 	.word	0x240339e4

0800fae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800faee:	2300      	movs	r3, #0
 800faf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800faf2:	2300      	movs	r3, #0
 800faf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800faf6:	4b42      	ldr	r3, [pc, #264]	@ (800fc00 <xTaskResumeAll+0x118>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10b      	bne.n	800fb16 <xTaskResumeAll+0x2e>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	603b      	str	r3, [r7, #0]
}
 800fb10:	bf00      	nop
 800fb12:	bf00      	nop
 800fb14:	e7fd      	b.n	800fb12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb16:	f001 fc8f 	bl	8011438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb1a:	4b39      	ldr	r3, [pc, #228]	@ (800fc00 <xTaskResumeAll+0x118>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	4a37      	ldr	r2, [pc, #220]	@ (800fc00 <xTaskResumeAll+0x118>)
 800fb22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb24:	4b36      	ldr	r3, [pc, #216]	@ (800fc00 <xTaskResumeAll+0x118>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d162      	bne.n	800fbf2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb2c:	4b35      	ldr	r3, [pc, #212]	@ (800fc04 <xTaskResumeAll+0x11c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d05e      	beq.n	800fbf2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb34:	e02f      	b.n	800fb96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb36:	4b34      	ldr	r3, [pc, #208]	@ (800fc08 <xTaskResumeAll+0x120>)
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3318      	adds	r3, #24
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fe fe1e 	bl	800e784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fe fe19 	bl	800e784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb56:	4b2d      	ldr	r3, [pc, #180]	@ (800fc0c <xTaskResumeAll+0x124>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d903      	bls.n	800fb66 <xTaskResumeAll+0x7e>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb62:	4a2a      	ldr	r2, [pc, #168]	@ (800fc0c <xTaskResumeAll+0x124>)
 800fb64:	6013      	str	r3, [r2, #0]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4413      	add	r3, r2
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	4a27      	ldr	r2, [pc, #156]	@ (800fc10 <xTaskResumeAll+0x128>)
 800fb74:	441a      	add	r2, r3
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	3304      	adds	r3, #4
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4610      	mov	r0, r2
 800fb7e:	f7fe fda4 	bl	800e6ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb86:	4b23      	ldr	r3, [pc, #140]	@ (800fc14 <xTaskResumeAll+0x12c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d302      	bcc.n	800fb96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fb90:	4b21      	ldr	r3, [pc, #132]	@ (800fc18 <xTaskResumeAll+0x130>)
 800fb92:	2201      	movs	r2, #1
 800fb94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb96:	4b1c      	ldr	r3, [pc, #112]	@ (800fc08 <xTaskResumeAll+0x120>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1cb      	bne.n	800fb36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fba4:	f000 fba0 	bl	80102e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fba8:	4b1c      	ldr	r3, [pc, #112]	@ (800fc1c <xTaskResumeAll+0x134>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d010      	beq.n	800fbd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbb4:	f000 f858 	bl	800fc68 <xTaskIncrementTick>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d002      	beq.n	800fbc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fbbe:	4b16      	ldr	r3, [pc, #88]	@ (800fc18 <xTaskResumeAll+0x130>)
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1f1      	bne.n	800fbb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fbd0:	4b12      	ldr	r3, [pc, #72]	@ (800fc1c <xTaskResumeAll+0x134>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbd6:	4b10      	ldr	r3, [pc, #64]	@ (800fc18 <xTaskResumeAll+0x130>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d009      	beq.n	800fbf2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbde:	2301      	movs	r3, #1
 800fbe0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbe2:	4b0f      	ldr	r3, [pc, #60]	@ (800fc20 <xTaskResumeAll+0x138>)
 800fbe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbf2:	f001 fc53 	bl	801149c <vPortExitCritical>

	return xAlreadyYielded;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3710      	adds	r7, #16
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	240339e4 	.word	0x240339e4
 800fc04:	240339bc 	.word	0x240339bc
 800fc08:	2403397c 	.word	0x2403397c
 800fc0c:	240339c4 	.word	0x240339c4
 800fc10:	240334ec 	.word	0x240334ec
 800fc14:	240334e8 	.word	0x240334e8
 800fc18:	240339d0 	.word	0x240339d0
 800fc1c:	240339cc 	.word	0x240339cc
 800fc20:	e000ed04 	.word	0xe000ed04

0800fc24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc2a:	4b05      	ldr	r3, [pc, #20]	@ (800fc40 <xTaskGetTickCount+0x1c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc30:	687b      	ldr	r3, [r7, #4]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	370c      	adds	r7, #12
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	240339c0 	.word	0x240339c0

0800fc44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc4a:	f001 fcd5 	bl	80115f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc4e:	2300      	movs	r3, #0
 800fc50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc52:	4b04      	ldr	r3, [pc, #16]	@ (800fc64 <xTaskGetTickCountFromISR+0x20>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc58:	683b      	ldr	r3, [r7, #0]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	240339c0 	.word	0x240339c0

0800fc68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc72:	4b4f      	ldr	r3, [pc, #316]	@ (800fdb0 <xTaskIncrementTick+0x148>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f040 8090 	bne.w	800fd9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc7c:	4b4d      	ldr	r3, [pc, #308]	@ (800fdb4 <xTaskIncrementTick+0x14c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3301      	adds	r3, #1
 800fc82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc84:	4a4b      	ldr	r2, [pc, #300]	@ (800fdb4 <xTaskIncrementTick+0x14c>)
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d121      	bne.n	800fcd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc90:	4b49      	ldr	r3, [pc, #292]	@ (800fdb8 <xTaskIncrementTick+0x150>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00b      	beq.n	800fcb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800fc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9e:	f383 8811 	msr	BASEPRI, r3
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	f3bf 8f4f 	dsb	sy
 800fcaa:	603b      	str	r3, [r7, #0]
}
 800fcac:	bf00      	nop
 800fcae:	bf00      	nop
 800fcb0:	e7fd      	b.n	800fcae <xTaskIncrementTick+0x46>
 800fcb2:	4b41      	ldr	r3, [pc, #260]	@ (800fdb8 <xTaskIncrementTick+0x150>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	60fb      	str	r3, [r7, #12]
 800fcb8:	4b40      	ldr	r3, [pc, #256]	@ (800fdbc <xTaskIncrementTick+0x154>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a3e      	ldr	r2, [pc, #248]	@ (800fdb8 <xTaskIncrementTick+0x150>)
 800fcbe:	6013      	str	r3, [r2, #0]
 800fcc0:	4a3e      	ldr	r2, [pc, #248]	@ (800fdbc <xTaskIncrementTick+0x154>)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6013      	str	r3, [r2, #0]
 800fcc6:	4b3e      	ldr	r3, [pc, #248]	@ (800fdc0 <xTaskIncrementTick+0x158>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	3301      	adds	r3, #1
 800fccc:	4a3c      	ldr	r2, [pc, #240]	@ (800fdc0 <xTaskIncrementTick+0x158>)
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	f000 fb0a 	bl	80102e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcd4:	4b3b      	ldr	r3, [pc, #236]	@ (800fdc4 <xTaskIncrementTick+0x15c>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d349      	bcc.n	800fd72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcde:	4b36      	ldr	r3, [pc, #216]	@ (800fdb8 <xTaskIncrementTick+0x150>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d104      	bne.n	800fcf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fce8:	4b36      	ldr	r3, [pc, #216]	@ (800fdc4 <xTaskIncrementTick+0x15c>)
 800fcea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fcee:	601a      	str	r2, [r3, #0]
					break;
 800fcf0:	e03f      	b.n	800fd72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcf2:	4b31      	ldr	r3, [pc, #196]	@ (800fdb8 <xTaskIncrementTick+0x150>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd02:	693a      	ldr	r2, [r7, #16]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d203      	bcs.n	800fd12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd0a:	4a2e      	ldr	r2, [pc, #184]	@ (800fdc4 <xTaskIncrementTick+0x15c>)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd10:	e02f      	b.n	800fd72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	3304      	adds	r3, #4
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe fd34 	bl	800e784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d004      	beq.n	800fd2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	3318      	adds	r3, #24
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe fd2b 	bl	800e784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd32:	4b25      	ldr	r3, [pc, #148]	@ (800fdc8 <xTaskIncrementTick+0x160>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d903      	bls.n	800fd42 <xTaskIncrementTick+0xda>
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd3e:	4a22      	ldr	r2, [pc, #136]	@ (800fdc8 <xTaskIncrementTick+0x160>)
 800fd40:	6013      	str	r3, [r2, #0]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd46:	4613      	mov	r3, r2
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	4413      	add	r3, r2
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	4a1f      	ldr	r2, [pc, #124]	@ (800fdcc <xTaskIncrementTick+0x164>)
 800fd50:	441a      	add	r2, r3
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	3304      	adds	r3, #4
 800fd56:	4619      	mov	r1, r3
 800fd58:	4610      	mov	r0, r2
 800fd5a:	f7fe fcb6 	bl	800e6ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd62:	4b1b      	ldr	r3, [pc, #108]	@ (800fdd0 <xTaskIncrementTick+0x168>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d3b8      	bcc.n	800fcde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd70:	e7b5      	b.n	800fcde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd72:	4b17      	ldr	r3, [pc, #92]	@ (800fdd0 <xTaskIncrementTick+0x168>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd78:	4914      	ldr	r1, [pc, #80]	@ (800fdcc <xTaskIncrementTick+0x164>)
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4413      	add	r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	440b      	add	r3, r1
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d901      	bls.n	800fd8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd8e:	4b11      	ldr	r3, [pc, #68]	@ (800fdd4 <xTaskIncrementTick+0x16c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d007      	beq.n	800fda6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fd96:	2301      	movs	r3, #1
 800fd98:	617b      	str	r3, [r7, #20]
 800fd9a:	e004      	b.n	800fda6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd9c:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd8 <xTaskIncrementTick+0x170>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3301      	adds	r3, #1
 800fda2:	4a0d      	ldr	r2, [pc, #52]	@ (800fdd8 <xTaskIncrementTick+0x170>)
 800fda4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fda6:	697b      	ldr	r3, [r7, #20]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3718      	adds	r7, #24
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	240339e4 	.word	0x240339e4
 800fdb4:	240339c0 	.word	0x240339c0
 800fdb8:	24033974 	.word	0x24033974
 800fdbc:	24033978 	.word	0x24033978
 800fdc0:	240339d4 	.word	0x240339d4
 800fdc4:	240339dc 	.word	0x240339dc
 800fdc8:	240339c4 	.word	0x240339c4
 800fdcc:	240334ec 	.word	0x240334ec
 800fdd0:	240334e8 	.word	0x240334e8
 800fdd4:	240339d0 	.word	0x240339d0
 800fdd8:	240339cc 	.word	0x240339cc

0800fddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fddc:	b480      	push	{r7}
 800fdde:	b085      	sub	sp, #20
 800fde0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fde2:	4b2b      	ldr	r3, [pc, #172]	@ (800fe90 <vTaskSwitchContext+0xb4>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d003      	beq.n	800fdf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdea:	4b2a      	ldr	r3, [pc, #168]	@ (800fe94 <vTaskSwitchContext+0xb8>)
 800fdec:	2201      	movs	r2, #1
 800fdee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdf0:	e047      	b.n	800fe82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fdf2:	4b28      	ldr	r3, [pc, #160]	@ (800fe94 <vTaskSwitchContext+0xb8>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdf8:	4b27      	ldr	r3, [pc, #156]	@ (800fe98 <vTaskSwitchContext+0xbc>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	60fb      	str	r3, [r7, #12]
 800fdfe:	e011      	b.n	800fe24 <vTaskSwitchContext+0x48>
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10b      	bne.n	800fe1e <vTaskSwitchContext+0x42>
	__asm volatile
 800fe06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	607b      	str	r3, [r7, #4]
}
 800fe18:	bf00      	nop
 800fe1a:	bf00      	nop
 800fe1c:	e7fd      	b.n	800fe1a <vTaskSwitchContext+0x3e>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	60fb      	str	r3, [r7, #12]
 800fe24:	491d      	ldr	r1, [pc, #116]	@ (800fe9c <vTaskSwitchContext+0xc0>)
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	4613      	mov	r3, r2
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	4413      	add	r3, r2
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	440b      	add	r3, r1
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d0e3      	beq.n	800fe00 <vTaskSwitchContext+0x24>
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	4413      	add	r3, r2
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	4a16      	ldr	r2, [pc, #88]	@ (800fe9c <vTaskSwitchContext+0xc0>)
 800fe44:	4413      	add	r3, r2
 800fe46:	60bb      	str	r3, [r7, #8]
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	605a      	str	r2, [r3, #4]
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	3308      	adds	r3, #8
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d104      	bne.n	800fe68 <vTaskSwitchContext+0x8c>
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	605a      	str	r2, [r3, #4]
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	4a0c      	ldr	r2, [pc, #48]	@ (800fea0 <vTaskSwitchContext+0xc4>)
 800fe70:	6013      	str	r3, [r2, #0]
 800fe72:	4a09      	ldr	r2, [pc, #36]	@ (800fe98 <vTaskSwitchContext+0xbc>)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe78:	4b09      	ldr	r3, [pc, #36]	@ (800fea0 <vTaskSwitchContext+0xc4>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3354      	adds	r3, #84	@ 0x54
 800fe7e:	4a09      	ldr	r2, [pc, #36]	@ (800fea4 <vTaskSwitchContext+0xc8>)
 800fe80:	6013      	str	r3, [r2, #0]
}
 800fe82:	bf00      	nop
 800fe84:	3714      	adds	r7, #20
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	240339e4 	.word	0x240339e4
 800fe94:	240339d0 	.word	0x240339d0
 800fe98:	240339c4 	.word	0x240339c4
 800fe9c:	240334ec 	.word	0x240334ec
 800fea0:	240334e8 	.word	0x240334e8
 800fea4:	240012bc 	.word	0x240012bc

0800fea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d10b      	bne.n	800fed0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800feb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800febc:	f383 8811 	msr	BASEPRI, r3
 800fec0:	f3bf 8f6f 	isb	sy
 800fec4:	f3bf 8f4f 	dsb	sy
 800fec8:	60fb      	str	r3, [r7, #12]
}
 800feca:	bf00      	nop
 800fecc:	bf00      	nop
 800fece:	e7fd      	b.n	800fecc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fed0:	4b07      	ldr	r3, [pc, #28]	@ (800fef0 <vTaskPlaceOnEventList+0x48>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	3318      	adds	r3, #24
 800fed6:	4619      	mov	r1, r3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7fe fc1a 	bl	800e712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fede:	2101      	movs	r1, #1
 800fee0:	6838      	ldr	r0, [r7, #0]
 800fee2:	f000 fdc7 	bl	8010a74 <prvAddCurrentTaskToDelayedList>
}
 800fee6:	bf00      	nop
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	240334e8 	.word	0x240334e8

0800fef4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d10b      	bne.n	800ff1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ff06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	617b      	str	r3, [r7, #20]
}
 800ff18:	bf00      	nop
 800ff1a:	bf00      	nop
 800ff1c:	e7fd      	b.n	800ff1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ff48 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3318      	adds	r3, #24
 800ff24:	4619      	mov	r1, r3
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f7fe fbcf 	bl	800e6ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d002      	beq.n	800ff38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ff32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff38:	6879      	ldr	r1, [r7, #4]
 800ff3a:	68b8      	ldr	r0, [r7, #8]
 800ff3c:	f000 fd9a 	bl	8010a74 <prvAddCurrentTaskToDelayedList>
	}
 800ff40:	bf00      	nop
 800ff42:	3718      	adds	r7, #24
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	240334e8 	.word	0x240334e8

0800ff4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	68db      	ldr	r3, [r3, #12]
 800ff5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d10b      	bne.n	800ff7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ff62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	60fb      	str	r3, [r7, #12]
}
 800ff74:	bf00      	nop
 800ff76:	bf00      	nop
 800ff78:	e7fd      	b.n	800ff76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	3318      	adds	r3, #24
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe fc00 	bl	800e784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff84:	4b1d      	ldr	r3, [pc, #116]	@ (800fffc <xTaskRemoveFromEventList+0xb0>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d11d      	bne.n	800ffc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	3304      	adds	r3, #4
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fe fbf7 	bl	800e784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff9a:	4b19      	ldr	r3, [pc, #100]	@ (8010000 <xTaskRemoveFromEventList+0xb4>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d903      	bls.n	800ffaa <xTaskRemoveFromEventList+0x5e>
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa6:	4a16      	ldr	r2, [pc, #88]	@ (8010000 <xTaskRemoveFromEventList+0xb4>)
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffae:	4613      	mov	r3, r2
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	4413      	add	r3, r2
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4a13      	ldr	r2, [pc, #76]	@ (8010004 <xTaskRemoveFromEventList+0xb8>)
 800ffb8:	441a      	add	r2, r3
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	3304      	adds	r3, #4
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	f7fe fb82 	bl	800e6ca <vListInsertEnd>
 800ffc6:	e005      	b.n	800ffd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	3318      	adds	r3, #24
 800ffcc:	4619      	mov	r1, r3
 800ffce:	480e      	ldr	r0, [pc, #56]	@ (8010008 <xTaskRemoveFromEventList+0xbc>)
 800ffd0:	f7fe fb7b 	bl	800e6ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffd8:	4b0c      	ldr	r3, [pc, #48]	@ (801000c <xTaskRemoveFromEventList+0xc0>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d905      	bls.n	800ffee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffe6:	4b0a      	ldr	r3, [pc, #40]	@ (8010010 <xTaskRemoveFromEventList+0xc4>)
 800ffe8:	2201      	movs	r2, #1
 800ffea:	601a      	str	r2, [r3, #0]
 800ffec:	e001      	b.n	800fff2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ffee:	2300      	movs	r3, #0
 800fff0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fff2:	697b      	ldr	r3, [r7, #20]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	240339e4 	.word	0x240339e4
 8010000:	240339c4 	.word	0x240339c4
 8010004:	240334ec 	.word	0x240334ec
 8010008:	2403397c 	.word	0x2403397c
 801000c:	240334e8 	.word	0x240334e8
 8010010:	240339d0 	.word	0x240339d0

08010014 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d10b      	bne.n	801003a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8010022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	60fb      	str	r3, [r7, #12]
}
 8010034:	bf00      	nop
 8010036:	bf00      	nop
 8010038:	e7fd      	b.n	8010036 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 801003a:	f001 f9fd 	bl	8011438 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 801003e:	4b07      	ldr	r3, [pc, #28]	@ (801005c <vTaskSetTimeOutState+0x48>)
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8010046:	4b06      	ldr	r3, [pc, #24]	@ (8010060 <vTaskSetTimeOutState+0x4c>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 801004e:	f001 fa25 	bl	801149c <vPortExitCritical>
}
 8010052:	bf00      	nop
 8010054:	3710      	adds	r7, #16
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	240339d4 	.word	0x240339d4
 8010060:	240339c0 	.word	0x240339c0

08010064 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801006c:	4b06      	ldr	r3, [pc, #24]	@ (8010088 <vTaskInternalSetTimeOutState+0x24>)
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010074:	4b05      	ldr	r3, [pc, #20]	@ (801008c <vTaskInternalSetTimeOutState+0x28>)
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	605a      	str	r2, [r3, #4]
}
 801007c:	bf00      	nop
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr
 8010088:	240339d4 	.word	0x240339d4
 801008c:	240339c0 	.word	0x240339c0

08010090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b088      	sub	sp, #32
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10b      	bne.n	80100b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80100a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100a4:	f383 8811 	msr	BASEPRI, r3
 80100a8:	f3bf 8f6f 	isb	sy
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	613b      	str	r3, [r7, #16]
}
 80100b2:	bf00      	nop
 80100b4:	bf00      	nop
 80100b6:	e7fd      	b.n	80100b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d10b      	bne.n	80100d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80100be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	60fb      	str	r3, [r7, #12]
}
 80100d0:	bf00      	nop
 80100d2:	bf00      	nop
 80100d4:	e7fd      	b.n	80100d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80100d6:	f001 f9af 	bl	8011438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80100da:	4b1d      	ldr	r3, [pc, #116]	@ (8010150 <xTaskCheckForTimeOut+0xc0>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	69ba      	ldr	r2, [r7, #24]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100f2:	d102      	bne.n	80100fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100f4:	2300      	movs	r3, #0
 80100f6:	61fb      	str	r3, [r7, #28]
 80100f8:	e023      	b.n	8010142 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	4b15      	ldr	r3, [pc, #84]	@ (8010154 <xTaskCheckForTimeOut+0xc4>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d007      	beq.n	8010116 <xTaskCheckForTimeOut+0x86>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	69ba      	ldr	r2, [r7, #24]
 801010c:	429a      	cmp	r2, r3
 801010e:	d302      	bcc.n	8010116 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010110:	2301      	movs	r3, #1
 8010112:	61fb      	str	r3, [r7, #28]
 8010114:	e015      	b.n	8010142 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	697a      	ldr	r2, [r7, #20]
 801011c:	429a      	cmp	r2, r3
 801011e:	d20b      	bcs.n	8010138 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7ff ff99 	bl	8010064 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010132:	2300      	movs	r3, #0
 8010134:	61fb      	str	r3, [r7, #28]
 8010136:	e004      	b.n	8010142 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2200      	movs	r2, #0
 801013c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801013e:	2301      	movs	r3, #1
 8010140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010142:	f001 f9ab 	bl	801149c <vPortExitCritical>

	return xReturn;
 8010146:	69fb      	ldr	r3, [r7, #28]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3720      	adds	r7, #32
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	240339c0 	.word	0x240339c0
 8010154:	240339d4 	.word	0x240339d4

08010158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010158:	b480      	push	{r7}
 801015a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801015c:	4b03      	ldr	r3, [pc, #12]	@ (801016c <vTaskMissedYield+0x14>)
 801015e:	2201      	movs	r2, #1
 8010160:	601a      	str	r2, [r3, #0]
}
 8010162:	bf00      	nop
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	240339d0 	.word	0x240339d0

08010170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010178:	f000 f852 	bl	8010220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801017c:	4b06      	ldr	r3, [pc, #24]	@ (8010198 <prvIdleTask+0x28>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d9f9      	bls.n	8010178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010184:	4b05      	ldr	r3, [pc, #20]	@ (801019c <prvIdleTask+0x2c>)
 8010186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801018a:	601a      	str	r2, [r3, #0]
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010194:	e7f0      	b.n	8010178 <prvIdleTask+0x8>
 8010196:	bf00      	nop
 8010198:	240334ec 	.word	0x240334ec
 801019c:	e000ed04 	.word	0xe000ed04

080101a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101a6:	2300      	movs	r3, #0
 80101a8:	607b      	str	r3, [r7, #4]
 80101aa:	e00c      	b.n	80101c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	4613      	mov	r3, r2
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	4413      	add	r3, r2
 80101b4:	009b      	lsls	r3, r3, #2
 80101b6:	4a12      	ldr	r2, [pc, #72]	@ (8010200 <prvInitialiseTaskLists+0x60>)
 80101b8:	4413      	add	r3, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fe fa58 	bl	800e670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3301      	adds	r3, #1
 80101c4:	607b      	str	r3, [r7, #4]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2b37      	cmp	r3, #55	@ 0x37
 80101ca:	d9ef      	bls.n	80101ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101cc:	480d      	ldr	r0, [pc, #52]	@ (8010204 <prvInitialiseTaskLists+0x64>)
 80101ce:	f7fe fa4f 	bl	800e670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101d2:	480d      	ldr	r0, [pc, #52]	@ (8010208 <prvInitialiseTaskLists+0x68>)
 80101d4:	f7fe fa4c 	bl	800e670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101d8:	480c      	ldr	r0, [pc, #48]	@ (801020c <prvInitialiseTaskLists+0x6c>)
 80101da:	f7fe fa49 	bl	800e670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101de:	480c      	ldr	r0, [pc, #48]	@ (8010210 <prvInitialiseTaskLists+0x70>)
 80101e0:	f7fe fa46 	bl	800e670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101e4:	480b      	ldr	r0, [pc, #44]	@ (8010214 <prvInitialiseTaskLists+0x74>)
 80101e6:	f7fe fa43 	bl	800e670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010218 <prvInitialiseTaskLists+0x78>)
 80101ec:	4a05      	ldr	r2, [pc, #20]	@ (8010204 <prvInitialiseTaskLists+0x64>)
 80101ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101f0:	4b0a      	ldr	r3, [pc, #40]	@ (801021c <prvInitialiseTaskLists+0x7c>)
 80101f2:	4a05      	ldr	r2, [pc, #20]	@ (8010208 <prvInitialiseTaskLists+0x68>)
 80101f4:	601a      	str	r2, [r3, #0]
}
 80101f6:	bf00      	nop
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	240334ec 	.word	0x240334ec
 8010204:	2403394c 	.word	0x2403394c
 8010208:	24033960 	.word	0x24033960
 801020c:	2403397c 	.word	0x2403397c
 8010210:	24033990 	.word	0x24033990
 8010214:	240339a8 	.word	0x240339a8
 8010218:	24033974 	.word	0x24033974
 801021c:	24033978 	.word	0x24033978

08010220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010226:	e019      	b.n	801025c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010228:	f001 f906 	bl	8011438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801022c:	4b10      	ldr	r3, [pc, #64]	@ (8010270 <prvCheckTasksWaitingTermination+0x50>)
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3304      	adds	r3, #4
 8010238:	4618      	mov	r0, r3
 801023a:	f7fe faa3 	bl	800e784 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801023e:	4b0d      	ldr	r3, [pc, #52]	@ (8010274 <prvCheckTasksWaitingTermination+0x54>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3b01      	subs	r3, #1
 8010244:	4a0b      	ldr	r2, [pc, #44]	@ (8010274 <prvCheckTasksWaitingTermination+0x54>)
 8010246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010248:	4b0b      	ldr	r3, [pc, #44]	@ (8010278 <prvCheckTasksWaitingTermination+0x58>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3b01      	subs	r3, #1
 801024e:	4a0a      	ldr	r2, [pc, #40]	@ (8010278 <prvCheckTasksWaitingTermination+0x58>)
 8010250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010252:	f001 f923 	bl	801149c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 f810 	bl	801027c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801025c:	4b06      	ldr	r3, [pc, #24]	@ (8010278 <prvCheckTasksWaitingTermination+0x58>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1e1      	bne.n	8010228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010264:	bf00      	nop
 8010266:	bf00      	nop
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	24033990 	.word	0x24033990
 8010274:	240339bc 	.word	0x240339bc
 8010278:	240339a4 	.word	0x240339a4

0801027c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	3354      	adds	r3, #84	@ 0x54
 8010288:	4618      	mov	r0, r3
 801028a:	f012 f887 	bl	802239c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010294:	2b00      	cmp	r3, #0
 8010296:	d108      	bne.n	80102aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801029c:	4618      	mov	r0, r3
 801029e:	f001 fabb 	bl	8011818 <vPortFree>
				vPortFree( pxTCB );
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f001 fab8 	bl	8011818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80102a8:	e019      	b.n	80102de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d103      	bne.n	80102bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f001 faaf 	bl	8011818 <vPortFree>
	}
 80102ba:	e010      	b.n	80102de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	d00b      	beq.n	80102de <prvDeleteTCB+0x62>
	__asm volatile
 80102c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ca:	f383 8811 	msr	BASEPRI, r3
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	60fb      	str	r3, [r7, #12]
}
 80102d8:	bf00      	nop
 80102da:	bf00      	nop
 80102dc:	e7fd      	b.n	80102da <prvDeleteTCB+0x5e>
	}
 80102de:	bf00      	nop
 80102e0:	3710      	adds	r7, #16
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
	...

080102e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102ee:	4b0c      	ldr	r3, [pc, #48]	@ (8010320 <prvResetNextTaskUnblockTime+0x38>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d104      	bne.n	8010302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010324 <prvResetNextTaskUnblockTime+0x3c>)
 80102fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010300:	e008      	b.n	8010314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010302:	4b07      	ldr	r3, [pc, #28]	@ (8010320 <prvResetNextTaskUnblockTime+0x38>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	4a04      	ldr	r2, [pc, #16]	@ (8010324 <prvResetNextTaskUnblockTime+0x3c>)
 8010312:	6013      	str	r3, [r2, #0]
}
 8010314:	bf00      	nop
 8010316:	370c      	adds	r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr
 8010320:	24033974 	.word	0x24033974
 8010324:	240339dc 	.word	0x240339dc

08010328 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801032e:	4b05      	ldr	r3, [pc, #20]	@ (8010344 <xTaskGetCurrentTaskHandle+0x1c>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010334:	687b      	ldr	r3, [r7, #4]
	}
 8010336:	4618      	mov	r0, r3
 8010338:	370c      	adds	r7, #12
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	240334e8 	.word	0x240334e8

08010348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801034e:	4b0b      	ldr	r3, [pc, #44]	@ (801037c <xTaskGetSchedulerState+0x34>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d102      	bne.n	801035c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010356:	2301      	movs	r3, #1
 8010358:	607b      	str	r3, [r7, #4]
 801035a:	e008      	b.n	801036e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801035c:	4b08      	ldr	r3, [pc, #32]	@ (8010380 <xTaskGetSchedulerState+0x38>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d102      	bne.n	801036a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010364:	2302      	movs	r3, #2
 8010366:	607b      	str	r3, [r7, #4]
 8010368:	e001      	b.n	801036e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801036a:	2300      	movs	r3, #0
 801036c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801036e:	687b      	ldr	r3, [r7, #4]
	}
 8010370:	4618      	mov	r0, r3
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	240339c8 	.word	0x240339c8
 8010380:	240339e4 	.word	0x240339e4

08010384 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010390:	2300      	movs	r3, #0
 8010392:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d051      	beq.n	801043e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039e:	4b2a      	ldr	r3, [pc, #168]	@ (8010448 <xTaskPriorityInherit+0xc4>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d241      	bcs.n	801042c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	699b      	ldr	r3, [r3, #24]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	db06      	blt.n	80103be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103b0:	4b25      	ldr	r3, [pc, #148]	@ (8010448 <xTaskPriorityInherit+0xc4>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	6959      	ldr	r1, [r3, #20]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103c6:	4613      	mov	r3, r2
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	4413      	add	r3, r2
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	4a1f      	ldr	r2, [pc, #124]	@ (801044c <xTaskPriorityInherit+0xc8>)
 80103d0:	4413      	add	r3, r2
 80103d2:	4299      	cmp	r1, r3
 80103d4:	d122      	bne.n	801041c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	3304      	adds	r3, #4
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe f9d2 	bl	800e784 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103e0:	4b19      	ldr	r3, [pc, #100]	@ (8010448 <xTaskPriorityInherit+0xc4>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103ee:	4b18      	ldr	r3, [pc, #96]	@ (8010450 <xTaskPriorityInherit+0xcc>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d903      	bls.n	80103fe <xTaskPriorityInherit+0x7a>
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103fa:	4a15      	ldr	r2, [pc, #84]	@ (8010450 <xTaskPriorityInherit+0xcc>)
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010402:	4613      	mov	r3, r2
 8010404:	009b      	lsls	r3, r3, #2
 8010406:	4413      	add	r3, r2
 8010408:	009b      	lsls	r3, r3, #2
 801040a:	4a10      	ldr	r2, [pc, #64]	@ (801044c <xTaskPriorityInherit+0xc8>)
 801040c:	441a      	add	r2, r3
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	3304      	adds	r3, #4
 8010412:	4619      	mov	r1, r3
 8010414:	4610      	mov	r0, r2
 8010416:	f7fe f958 	bl	800e6ca <vListInsertEnd>
 801041a:	e004      	b.n	8010426 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801041c:	4b0a      	ldr	r3, [pc, #40]	@ (8010448 <xTaskPriorityInherit+0xc4>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010426:	2301      	movs	r3, #1
 8010428:	60fb      	str	r3, [r7, #12]
 801042a:	e008      	b.n	801043e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010430:	4b05      	ldr	r3, [pc, #20]	@ (8010448 <xTaskPriorityInherit+0xc4>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010436:	429a      	cmp	r2, r3
 8010438:	d201      	bcs.n	801043e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801043a:	2301      	movs	r3, #1
 801043c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801043e:	68fb      	ldr	r3, [r7, #12]
	}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	240334e8 	.word	0x240334e8
 801044c:	240334ec 	.word	0x240334ec
 8010450:	240339c4 	.word	0x240339c4

08010454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010454:	b580      	push	{r7, lr}
 8010456:	b086      	sub	sp, #24
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010460:	2300      	movs	r3, #0
 8010462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d058      	beq.n	801051c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801046a:	4b2f      	ldr	r3, [pc, #188]	@ (8010528 <xTaskPriorityDisinherit+0xd4>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	693a      	ldr	r2, [r7, #16]
 8010470:	429a      	cmp	r2, r3
 8010472:	d00b      	beq.n	801048c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	60fb      	str	r3, [r7, #12]
}
 8010486:	bf00      	nop
 8010488:	bf00      	nop
 801048a:	e7fd      	b.n	8010488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10b      	bne.n	80104ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	60bb      	str	r3, [r7, #8]
}
 80104a6:	bf00      	nop
 80104a8:	bf00      	nop
 80104aa:	e7fd      	b.n	80104a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104b0:	1e5a      	subs	r2, r3, #1
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104be:	429a      	cmp	r2, r3
 80104c0:	d02c      	beq.n	801051c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d128      	bne.n	801051c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	3304      	adds	r3, #4
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fe f958 	bl	800e784 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104ec:	4b0f      	ldr	r3, [pc, #60]	@ (801052c <xTaskPriorityDisinherit+0xd8>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d903      	bls.n	80104fc <xTaskPriorityDisinherit+0xa8>
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104f8:	4a0c      	ldr	r2, [pc, #48]	@ (801052c <xTaskPriorityDisinherit+0xd8>)
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010500:	4613      	mov	r3, r2
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4a09      	ldr	r2, [pc, #36]	@ (8010530 <xTaskPriorityDisinherit+0xdc>)
 801050a:	441a      	add	r2, r3
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	3304      	adds	r3, #4
 8010510:	4619      	mov	r1, r3
 8010512:	4610      	mov	r0, r2
 8010514:	f7fe f8d9 	bl	800e6ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010518:	2301      	movs	r3, #1
 801051a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801051c:	697b      	ldr	r3, [r7, #20]
	}
 801051e:	4618      	mov	r0, r3
 8010520:	3718      	adds	r7, #24
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	240334e8 	.word	0x240334e8
 801052c:	240339c4 	.word	0x240339c4
 8010530:	240334ec 	.word	0x240334ec

08010534 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010534:	b580      	push	{r7, lr}
 8010536:	b088      	sub	sp, #32
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010542:	2301      	movs	r3, #1
 8010544:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d06c      	beq.n	8010626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010550:	2b00      	cmp	r3, #0
 8010552:	d10b      	bne.n	801056c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010558:	f383 8811 	msr	BASEPRI, r3
 801055c:	f3bf 8f6f 	isb	sy
 8010560:	f3bf 8f4f 	dsb	sy
 8010564:	60fb      	str	r3, [r7, #12]
}
 8010566:	bf00      	nop
 8010568:	bf00      	nop
 801056a:	e7fd      	b.n	8010568 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010570:	683a      	ldr	r2, [r7, #0]
 8010572:	429a      	cmp	r2, r3
 8010574:	d902      	bls.n	801057c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	61fb      	str	r3, [r7, #28]
 801057a:	e002      	b.n	8010582 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010580:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	429a      	cmp	r2, r3
 801058a:	d04c      	beq.n	8010626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	429a      	cmp	r2, r3
 8010594:	d147      	bne.n	8010626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010596:	4b26      	ldr	r3, [pc, #152]	@ (8010630 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	69ba      	ldr	r2, [r7, #24]
 801059c:	429a      	cmp	r2, r3
 801059e:	d10b      	bne.n	80105b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80105a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105a4:	f383 8811 	msr	BASEPRI, r3
 80105a8:	f3bf 8f6f 	isb	sy
 80105ac:	f3bf 8f4f 	dsb	sy
 80105b0:	60bb      	str	r3, [r7, #8]
}
 80105b2:	bf00      	nop
 80105b4:	bf00      	nop
 80105b6:	e7fd      	b.n	80105b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	69fa      	ldr	r2, [r7, #28]
 80105c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	699b      	ldr	r3, [r3, #24]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	db04      	blt.n	80105d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80105d6:	69bb      	ldr	r3, [r7, #24]
 80105d8:	6959      	ldr	r1, [r3, #20]
 80105da:	693a      	ldr	r2, [r7, #16]
 80105dc:	4613      	mov	r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	4413      	add	r3, r2
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4a13      	ldr	r2, [pc, #76]	@ (8010634 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105e6:	4413      	add	r3, r2
 80105e8:	4299      	cmp	r1, r3
 80105ea:	d11c      	bne.n	8010626 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	3304      	adds	r3, #4
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7fe f8c7 	bl	800e784 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105fa:	4b0f      	ldr	r3, [pc, #60]	@ (8010638 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d903      	bls.n	801060a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8010602:	69bb      	ldr	r3, [r7, #24]
 8010604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010606:	4a0c      	ldr	r2, [pc, #48]	@ (8010638 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010608:	6013      	str	r3, [r2, #0]
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801060e:	4613      	mov	r3, r2
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	4413      	add	r3, r2
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	4a07      	ldr	r2, [pc, #28]	@ (8010634 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010618:	441a      	add	r2, r3
 801061a:	69bb      	ldr	r3, [r7, #24]
 801061c:	3304      	adds	r3, #4
 801061e:	4619      	mov	r1, r3
 8010620:	4610      	mov	r0, r2
 8010622:	f7fe f852 	bl	800e6ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010626:	bf00      	nop
 8010628:	3720      	adds	r7, #32
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	240334e8 	.word	0x240334e8
 8010634:	240334ec 	.word	0x240334ec
 8010638:	240339c4 	.word	0x240339c4

0801063c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801063c:	b480      	push	{r7}
 801063e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010640:	4b07      	ldr	r3, [pc, #28]	@ (8010660 <pvTaskIncrementMutexHeldCount+0x24>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d004      	beq.n	8010652 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010648:	4b05      	ldr	r3, [pc, #20]	@ (8010660 <pvTaskIncrementMutexHeldCount+0x24>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801064e:	3201      	adds	r2, #1
 8010650:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010652:	4b03      	ldr	r3, [pc, #12]	@ (8010660 <pvTaskIncrementMutexHeldCount+0x24>)
 8010654:	681b      	ldr	r3, [r3, #0]
	}
 8010656:	4618      	mov	r0, r3
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr
 8010660:	240334e8 	.word	0x240334e8

08010664 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010664:	b580      	push	{r7, lr}
 8010666:	b086      	sub	sp, #24
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	607a      	str	r2, [r7, #4]
 8010670:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010672:	f000 fee1 	bl	8011438 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010676:	4b29      	ldr	r3, [pc, #164]	@ (801071c <xTaskNotifyWait+0xb8>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b02      	cmp	r3, #2
 8010682:	d01c      	beq.n	80106be <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010684:	4b25      	ldr	r3, [pc, #148]	@ (801071c <xTaskNotifyWait+0xb8>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	43d2      	mvns	r2, r2
 8010690:	400a      	ands	r2, r1
 8010692:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010696:	4b21      	ldr	r3, [pc, #132]	@ (801071c <xTaskNotifyWait+0xb8>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2201      	movs	r2, #1
 801069c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00b      	beq.n	80106be <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80106a6:	2101      	movs	r1, #1
 80106a8:	6838      	ldr	r0, [r7, #0]
 80106aa:	f000 f9e3 	bl	8010a74 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80106ae:	4b1c      	ldr	r3, [pc, #112]	@ (8010720 <xTaskNotifyWait+0xbc>)
 80106b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106b4:	601a      	str	r2, [r3, #0]
 80106b6:	f3bf 8f4f 	dsb	sy
 80106ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80106be:	f000 feed 	bl	801149c <vPortExitCritical>

		taskENTER_CRITICAL();
 80106c2:	f000 feb9 	bl	8011438 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d005      	beq.n	80106d8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80106cc:	4b13      	ldr	r3, [pc, #76]	@ (801071c <xTaskNotifyWait+0xb8>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80106d8:	4b10      	ldr	r3, [pc, #64]	@ (801071c <xTaskNotifyWait+0xb8>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b02      	cmp	r3, #2
 80106e4:	d002      	beq.n	80106ec <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80106e6:	2300      	movs	r3, #0
 80106e8:	617b      	str	r3, [r7, #20]
 80106ea:	e00a      	b.n	8010702 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80106ec:	4b0b      	ldr	r3, [pc, #44]	@ (801071c <xTaskNotifyWait+0xb8>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	43d2      	mvns	r2, r2
 80106f8:	400a      	ands	r2, r1
 80106fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80106fe:	2301      	movs	r3, #1
 8010700:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010702:	4b06      	ldr	r3, [pc, #24]	@ (801071c <xTaskNotifyWait+0xb8>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2200      	movs	r2, #0
 8010708:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 801070c:	f000 fec6 	bl	801149c <vPortExitCritical>

		return xReturn;
 8010710:	697b      	ldr	r3, [r7, #20]
	}
 8010712:	4618      	mov	r0, r3
 8010714:	3718      	adds	r7, #24
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	240334e8 	.word	0x240334e8
 8010720:	e000ed04 	.word	0xe000ed04

08010724 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010724:	b580      	push	{r7, lr}
 8010726:	b08a      	sub	sp, #40	@ 0x28
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	603b      	str	r3, [r7, #0]
 8010730:	4613      	mov	r3, r2
 8010732:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010734:	2301      	movs	r3, #1
 8010736:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d10b      	bne.n	8010756 <xTaskGenericNotify+0x32>
	__asm volatile
 801073e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010742:	f383 8811 	msr	BASEPRI, r3
 8010746:	f3bf 8f6f 	isb	sy
 801074a:	f3bf 8f4f 	dsb	sy
 801074e:	61bb      	str	r3, [r7, #24]
}
 8010750:	bf00      	nop
 8010752:	bf00      	nop
 8010754:	e7fd      	b.n	8010752 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801075a:	f000 fe6d 	bl	8011438 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d004      	beq.n	801076e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010764:	6a3b      	ldr	r3, [r7, #32]
 8010766:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010774:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	2202      	movs	r2, #2
 801077a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801077e:	79fb      	ldrb	r3, [r7, #7]
 8010780:	2b04      	cmp	r3, #4
 8010782:	d82e      	bhi.n	80107e2 <xTaskGenericNotify+0xbe>
 8010784:	a201      	add	r2, pc, #4	@ (adr r2, 801078c <xTaskGenericNotify+0x68>)
 8010786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801078a:	bf00      	nop
 801078c:	08010807 	.word	0x08010807
 8010790:	080107a1 	.word	0x080107a1
 8010794:	080107b3 	.word	0x080107b3
 8010798:	080107c3 	.word	0x080107c3
 801079c:	080107cd 	.word	0x080107cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	431a      	orrs	r2, r3
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80107b0:	e02c      	b.n	801080c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80107b2:	6a3b      	ldr	r3, [r7, #32]
 80107b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107b8:	1c5a      	adds	r2, r3, #1
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80107c0:	e024      	b.n	801080c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80107c2:	6a3b      	ldr	r3, [r7, #32]
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80107ca:	e01f      	b.n	801080c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80107cc:	7ffb      	ldrb	r3, [r7, #31]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d004      	beq.n	80107dc <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80107d2:	6a3b      	ldr	r3, [r7, #32]
 80107d4:	68ba      	ldr	r2, [r7, #8]
 80107d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80107da:	e017      	b.n	801080c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80107dc:	2300      	movs	r3, #0
 80107de:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80107e0:	e014      	b.n	801080c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80107e2:	6a3b      	ldr	r3, [r7, #32]
 80107e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107ec:	d00d      	beq.n	801080a <xTaskGenericNotify+0xe6>
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	617b      	str	r3, [r7, #20]
}
 8010800:	bf00      	nop
 8010802:	bf00      	nop
 8010804:	e7fd      	b.n	8010802 <xTaskGenericNotify+0xde>
					break;
 8010806:	bf00      	nop
 8010808:	e000      	b.n	801080c <xTaskGenericNotify+0xe8>

					break;
 801080a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801080c:	7ffb      	ldrb	r3, [r7, #31]
 801080e:	2b01      	cmp	r3, #1
 8010810:	d13b      	bne.n	801088a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010812:	6a3b      	ldr	r3, [r7, #32]
 8010814:	3304      	adds	r3, #4
 8010816:	4618      	mov	r0, r3
 8010818:	f7fd ffb4 	bl	800e784 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010820:	4b1d      	ldr	r3, [pc, #116]	@ (8010898 <xTaskGenericNotify+0x174>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d903      	bls.n	8010830 <xTaskGenericNotify+0x10c>
 8010828:	6a3b      	ldr	r3, [r7, #32]
 801082a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801082c:	4a1a      	ldr	r2, [pc, #104]	@ (8010898 <xTaskGenericNotify+0x174>)
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	6a3b      	ldr	r3, [r7, #32]
 8010832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010834:	4613      	mov	r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	4413      	add	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4a17      	ldr	r2, [pc, #92]	@ (801089c <xTaskGenericNotify+0x178>)
 801083e:	441a      	add	r2, r3
 8010840:	6a3b      	ldr	r3, [r7, #32]
 8010842:	3304      	adds	r3, #4
 8010844:	4619      	mov	r1, r3
 8010846:	4610      	mov	r0, r2
 8010848:	f7fd ff3f 	bl	800e6ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801084c:	6a3b      	ldr	r3, [r7, #32]
 801084e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00b      	beq.n	801086c <xTaskGenericNotify+0x148>
	__asm volatile
 8010854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010858:	f383 8811 	msr	BASEPRI, r3
 801085c:	f3bf 8f6f 	isb	sy
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	613b      	str	r3, [r7, #16]
}
 8010866:	bf00      	nop
 8010868:	bf00      	nop
 801086a:	e7fd      	b.n	8010868 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801086c:	6a3b      	ldr	r3, [r7, #32]
 801086e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010870:	4b0b      	ldr	r3, [pc, #44]	@ (80108a0 <xTaskGenericNotify+0x17c>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010876:	429a      	cmp	r2, r3
 8010878:	d907      	bls.n	801088a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801087a:	4b0a      	ldr	r3, [pc, #40]	@ (80108a4 <xTaskGenericNotify+0x180>)
 801087c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010880:	601a      	str	r2, [r3, #0]
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801088a:	f000 fe07 	bl	801149c <vPortExitCritical>

		return xReturn;
 801088e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010890:	4618      	mov	r0, r3
 8010892:	3728      	adds	r7, #40	@ 0x28
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	240339c4 	.word	0x240339c4
 801089c:	240334ec 	.word	0x240334ec
 80108a0:	240334e8 	.word	0x240334e8
 80108a4:	e000ed04 	.word	0xe000ed04

080108a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b08e      	sub	sp, #56	@ 0x38
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	603b      	str	r3, [r7, #0]
 80108b4:	4613      	mov	r3, r2
 80108b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80108b8:	2301      	movs	r3, #1
 80108ba:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10b      	bne.n	80108da <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80108d4:	bf00      	nop
 80108d6:	bf00      	nop
 80108d8:	e7fd      	b.n	80108d6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108da:	f000 fe8d 	bl	80115f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80108e2:	f3ef 8211 	mrs	r2, BASEPRI
 80108e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	623a      	str	r2, [r7, #32]
 80108f8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80108fa:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d004      	beq.n	801090e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010906:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801090e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010910:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091a:	2202      	movs	r2, #2
 801091c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8010920:	79fb      	ldrb	r3, [r7, #7]
 8010922:	2b04      	cmp	r3, #4
 8010924:	d82e      	bhi.n	8010984 <xTaskGenericNotifyFromISR+0xdc>
 8010926:	a201      	add	r2, pc, #4	@ (adr r2, 801092c <xTaskGenericNotifyFromISR+0x84>)
 8010928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801092c:	080109a9 	.word	0x080109a9
 8010930:	08010941 	.word	0x08010941
 8010934:	08010953 	.word	0x08010953
 8010938:	08010963 	.word	0x08010963
 801093c:	0801096d 	.word	0x0801096d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010942:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	431a      	orrs	r2, r3
 801094a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010950:	e02d      	b.n	80109ae <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010958:	1c5a      	adds	r2, r3, #1
 801095a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801095c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010960:	e025      	b.n	80109ae <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801096a:	e020      	b.n	80109ae <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801096c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010970:	2b02      	cmp	r3, #2
 8010972:	d004      	beq.n	801097e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010976:	68ba      	ldr	r2, [r7, #8]
 8010978:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801097c:	e017      	b.n	80109ae <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801097e:	2300      	movs	r3, #0
 8010980:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8010982:	e014      	b.n	80109ae <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801098a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801098e:	d00d      	beq.n	80109ac <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	61bb      	str	r3, [r7, #24]
}
 80109a2:	bf00      	nop
 80109a4:	bf00      	nop
 80109a6:	e7fd      	b.n	80109a4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80109a8:	bf00      	nop
 80109aa:	e000      	b.n	80109ae <xTaskGenericNotifyFromISR+0x106>
					break;
 80109ac:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80109ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d147      	bne.n	8010a46 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80109b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00b      	beq.n	80109d6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80109be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109c2:	f383 8811 	msr	BASEPRI, r3
 80109c6:	f3bf 8f6f 	isb	sy
 80109ca:	f3bf 8f4f 	dsb	sy
 80109ce:	617b      	str	r3, [r7, #20]
}
 80109d0:	bf00      	nop
 80109d2:	bf00      	nop
 80109d4:	e7fd      	b.n	80109d2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109d6:	4b21      	ldr	r3, [pc, #132]	@ (8010a5c <xTaskGenericNotifyFromISR+0x1b4>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d11d      	bne.n	8010a1a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e0:	3304      	adds	r3, #4
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fd fece 	bl	800e784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80109e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ec:	4b1c      	ldr	r3, [pc, #112]	@ (8010a60 <xTaskGenericNotifyFromISR+0x1b8>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d903      	bls.n	80109fc <xTaskGenericNotifyFromISR+0x154>
 80109f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109f8:	4a19      	ldr	r2, [pc, #100]	@ (8010a60 <xTaskGenericNotifyFromISR+0x1b8>)
 80109fa:	6013      	str	r3, [r2, #0]
 80109fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a00:	4613      	mov	r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	4413      	add	r3, r2
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	4a16      	ldr	r2, [pc, #88]	@ (8010a64 <xTaskGenericNotifyFromISR+0x1bc>)
 8010a0a:	441a      	add	r2, r3
 8010a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a0e:	3304      	adds	r3, #4
 8010a10:	4619      	mov	r1, r3
 8010a12:	4610      	mov	r0, r2
 8010a14:	f7fd fe59 	bl	800e6ca <vListInsertEnd>
 8010a18:	e005      	b.n	8010a26 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a1c:	3318      	adds	r3, #24
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4811      	ldr	r0, [pc, #68]	@ (8010a68 <xTaskGenericNotifyFromISR+0x1c0>)
 8010a22:	f7fd fe52 	bl	800e6ca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a2a:	4b10      	ldr	r3, [pc, #64]	@ (8010a6c <xTaskGenericNotifyFromISR+0x1c4>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d908      	bls.n	8010a46 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d002      	beq.n	8010a40 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010a40:	4b0b      	ldr	r3, [pc, #44]	@ (8010a70 <xTaskGenericNotifyFromISR+0x1c8>)
 8010a42:	2201      	movs	r2, #1
 8010a44:	601a      	str	r2, [r3, #0]
 8010a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	f383 8811 	msr	BASEPRI, r3
}
 8010a50:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3738      	adds	r7, #56	@ 0x38
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	240339e4 	.word	0x240339e4
 8010a60:	240339c4 	.word	0x240339c4
 8010a64:	240334ec 	.word	0x240334ec
 8010a68:	2403397c 	.word	0x2403397c
 8010a6c:	240334e8 	.word	0x240334e8
 8010a70:	240339d0 	.word	0x240339d0

08010a74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a7e:	4b21      	ldr	r3, [pc, #132]	@ (8010b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a84:	4b20      	ldr	r3, [pc, #128]	@ (8010b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	3304      	adds	r3, #4
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fd fe7a 	bl	800e784 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010a96:	d10a      	bne.n	8010aae <prvAddCurrentTaskToDelayedList+0x3a>
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d007      	beq.n	8010aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8010b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3304      	adds	r3, #4
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	4819      	ldr	r0, [pc, #100]	@ (8010b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8010aa8:	f7fd fe0f 	bl	800e6ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010aac:	e026      	b.n	8010afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ab6:	4b14      	ldr	r3, [pc, #80]	@ (8010b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010abe:	68ba      	ldr	r2, [r7, #8]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d209      	bcs.n	8010ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ac6:	4b12      	ldr	r3, [pc, #72]	@ (8010b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	4b0f      	ldr	r3, [pc, #60]	@ (8010b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	3304      	adds	r3, #4
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	4610      	mov	r0, r2
 8010ad4:	f7fd fe1d 	bl	800e712 <vListInsert>
}
 8010ad8:	e010      	b.n	8010afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ada:	4b0e      	ldr	r3, [pc, #56]	@ (8010b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	4b0a      	ldr	r3, [pc, #40]	@ (8010b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	4610      	mov	r0, r2
 8010ae8:	f7fd fe13 	bl	800e712 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010aec:	4b0a      	ldr	r3, [pc, #40]	@ (8010b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	68ba      	ldr	r2, [r7, #8]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d202      	bcs.n	8010afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010af6:	4a08      	ldr	r2, [pc, #32]	@ (8010b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	6013      	str	r3, [r2, #0]
}
 8010afc:	bf00      	nop
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	240339c0 	.word	0x240339c0
 8010b08:	240334e8 	.word	0x240334e8
 8010b0c:	240339a8 	.word	0x240339a8
 8010b10:	24033978 	.word	0x24033978
 8010b14:	24033974 	.word	0x24033974
 8010b18:	240339dc 	.word	0x240339dc

08010b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b08a      	sub	sp, #40	@ 0x28
 8010b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b22:	2300      	movs	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010b26:	f000 fb13 	bl	8011150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8010ba0 <xTimerCreateTimerTask+0x84>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d021      	beq.n	8010b76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b32:	2300      	movs	r3, #0
 8010b34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b3a:	1d3a      	adds	r2, r7, #4
 8010b3c:	f107 0108 	add.w	r1, r7, #8
 8010b40:	f107 030c 	add.w	r3, r7, #12
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7fd fd79 	bl	800e63c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b4a:	6879      	ldr	r1, [r7, #4]
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	9202      	str	r2, [sp, #8]
 8010b52:	9301      	str	r3, [sp, #4]
 8010b54:	2302      	movs	r3, #2
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	2300      	movs	r3, #0
 8010b5a:	460a      	mov	r2, r1
 8010b5c:	4911      	ldr	r1, [pc, #68]	@ (8010ba4 <xTimerCreateTimerTask+0x88>)
 8010b5e:	4812      	ldr	r0, [pc, #72]	@ (8010ba8 <xTimerCreateTimerTask+0x8c>)
 8010b60:	f7fe fd50 	bl	800f604 <xTaskCreateStatic>
 8010b64:	4603      	mov	r3, r0
 8010b66:	4a11      	ldr	r2, [pc, #68]	@ (8010bac <xTimerCreateTimerTask+0x90>)
 8010b68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b6a:	4b10      	ldr	r3, [pc, #64]	@ (8010bac <xTimerCreateTimerTask+0x90>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d001      	beq.n	8010b76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b72:	2301      	movs	r3, #1
 8010b74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d10b      	bne.n	8010b94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b80:	f383 8811 	msr	BASEPRI, r3
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	613b      	str	r3, [r7, #16]
}
 8010b8e:	bf00      	nop
 8010b90:	bf00      	nop
 8010b92:	e7fd      	b.n	8010b90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010b94:	697b      	ldr	r3, [r7, #20]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	24033a18 	.word	0x24033a18
 8010ba4:	08023460 	.word	0x08023460
 8010ba8:	08010ce9 	.word	0x08010ce9
 8010bac:	24033a1c 	.word	0x24033a1c

08010bb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b08a      	sub	sp, #40	@ 0x28
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	607a      	str	r2, [r7, #4]
 8010bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d10b      	bne.n	8010be0 <xTimerGenericCommand+0x30>
	__asm volatile
 8010bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bcc:	f383 8811 	msr	BASEPRI, r3
 8010bd0:	f3bf 8f6f 	isb	sy
 8010bd4:	f3bf 8f4f 	dsb	sy
 8010bd8:	623b      	str	r3, [r7, #32]
}
 8010bda:	bf00      	nop
 8010bdc:	bf00      	nop
 8010bde:	e7fd      	b.n	8010bdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010be0:	4b19      	ldr	r3, [pc, #100]	@ (8010c48 <xTimerGenericCommand+0x98>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d02a      	beq.n	8010c3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	2b05      	cmp	r3, #5
 8010bf8:	dc18      	bgt.n	8010c2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010bfa:	f7ff fba5 	bl	8010348 <xTaskGetSchedulerState>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d109      	bne.n	8010c18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c04:	4b10      	ldr	r3, [pc, #64]	@ (8010c48 <xTimerGenericCommand+0x98>)
 8010c06:	6818      	ldr	r0, [r3, #0]
 8010c08:	f107 0110 	add.w	r1, r7, #16
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c10:	f7fd ffe0 	bl	800ebd4 <xQueueGenericSend>
 8010c14:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c16:	e012      	b.n	8010c3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c18:	4b0b      	ldr	r3, [pc, #44]	@ (8010c48 <xTimerGenericCommand+0x98>)
 8010c1a:	6818      	ldr	r0, [r3, #0]
 8010c1c:	f107 0110 	add.w	r1, r7, #16
 8010c20:	2300      	movs	r3, #0
 8010c22:	2200      	movs	r2, #0
 8010c24:	f7fd ffd6 	bl	800ebd4 <xQueueGenericSend>
 8010c28:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c2a:	e008      	b.n	8010c3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c2c:	4b06      	ldr	r3, [pc, #24]	@ (8010c48 <xTimerGenericCommand+0x98>)
 8010c2e:	6818      	ldr	r0, [r3, #0]
 8010c30:	f107 0110 	add.w	r1, r7, #16
 8010c34:	2300      	movs	r3, #0
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	f7fe f8ce 	bl	800edd8 <xQueueGenericSendFromISR>
 8010c3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3728      	adds	r7, #40	@ 0x28
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	24033a18 	.word	0x24033a18

08010c4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b088      	sub	sp, #32
 8010c50:	af02      	add	r7, sp, #8
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c56:	4b23      	ldr	r3, [pc, #140]	@ (8010ce4 <prvProcessExpiredTimer+0x98>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	3304      	adds	r3, #4
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fd fd8d 	bl	800e784 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c70:	f003 0304 	and.w	r3, r3, #4
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d023      	beq.n	8010cc0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	699a      	ldr	r2, [r3, #24]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	18d1      	adds	r1, r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	6978      	ldr	r0, [r7, #20]
 8010c86:	f000 f8d5 	bl	8010e34 <prvInsertTimerInActiveList>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d020      	beq.n	8010cd2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c90:	2300      	movs	r3, #0
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	2300      	movs	r3, #0
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	2100      	movs	r1, #0
 8010c9a:	6978      	ldr	r0, [r7, #20]
 8010c9c:	f7ff ff88 	bl	8010bb0 <xTimerGenericCommand>
 8010ca0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d114      	bne.n	8010cd2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cac:	f383 8811 	msr	BASEPRI, r3
 8010cb0:	f3bf 8f6f 	isb	sy
 8010cb4:	f3bf 8f4f 	dsb	sy
 8010cb8:	60fb      	str	r3, [r7, #12]
}
 8010cba:	bf00      	nop
 8010cbc:	bf00      	nop
 8010cbe:	e7fd      	b.n	8010cbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010cc6:	f023 0301 	bic.w	r3, r3, #1
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	6a1b      	ldr	r3, [r3, #32]
 8010cd6:	6978      	ldr	r0, [r7, #20]
 8010cd8:	4798      	blx	r3
}
 8010cda:	bf00      	nop
 8010cdc:	3718      	adds	r7, #24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	24033a10 	.word	0x24033a10

08010ce8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010cf0:	f107 0308 	add.w	r3, r7, #8
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f000 f859 	bl	8010dac <prvGetNextExpireTime>
 8010cfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	4619      	mov	r1, r3
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f000 f805 	bl	8010d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010d06:	f000 f8d7 	bl	8010eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d0a:	bf00      	nop
 8010d0c:	e7f0      	b.n	8010cf0 <prvTimerTask+0x8>
	...

08010d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d1a:	f7fe fed7 	bl	800facc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d1e:	f107 0308 	add.w	r3, r7, #8
 8010d22:	4618      	mov	r0, r3
 8010d24:	f000 f866 	bl	8010df4 <prvSampleTimeNow>
 8010d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d130      	bne.n	8010d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10a      	bne.n	8010d4c <prvProcessTimerOrBlockTask+0x3c>
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d806      	bhi.n	8010d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010d3e:	f7fe fed3 	bl	800fae8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d42:	68f9      	ldr	r1, [r7, #12]
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f7ff ff81 	bl	8010c4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d4a:	e024      	b.n	8010d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d008      	beq.n	8010d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d52:	4b13      	ldr	r3, [pc, #76]	@ (8010da0 <prvProcessTimerOrBlockTask+0x90>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d101      	bne.n	8010d60 <prvProcessTimerOrBlockTask+0x50>
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e000      	b.n	8010d62 <prvProcessTimerOrBlockTask+0x52>
 8010d60:	2300      	movs	r3, #0
 8010d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d64:	4b0f      	ldr	r3, [pc, #60]	@ (8010da4 <prvProcessTimerOrBlockTask+0x94>)
 8010d66:	6818      	ldr	r0, [r3, #0]
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	683a      	ldr	r2, [r7, #0]
 8010d70:	4619      	mov	r1, r3
 8010d72:	f7fe fc13 	bl	800f59c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010d76:	f7fe feb7 	bl	800fae8 <xTaskResumeAll>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d10a      	bne.n	8010d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d80:	4b09      	ldr	r3, [pc, #36]	@ (8010da8 <prvProcessTimerOrBlockTask+0x98>)
 8010d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	f3bf 8f6f 	isb	sy
}
 8010d90:	e001      	b.n	8010d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010d92:	f7fe fea9 	bl	800fae8 <xTaskResumeAll>
}
 8010d96:	bf00      	nop
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	24033a14 	.word	0x24033a14
 8010da4:	24033a18 	.word	0x24033a18
 8010da8:	e000ed04 	.word	0xe000ed04

08010dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010dac:	b480      	push	{r7}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010db4:	4b0e      	ldr	r3, [pc, #56]	@ (8010df0 <prvGetNextExpireTime+0x44>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d101      	bne.n	8010dc2 <prvGetNextExpireTime+0x16>
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	e000      	b.n	8010dc4 <prvGetNextExpireTime+0x18>
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d105      	bne.n	8010ddc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010dd0:	4b07      	ldr	r3, [pc, #28]	@ (8010df0 <prvGetNextExpireTime+0x44>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	60fb      	str	r3, [r7, #12]
 8010dda:	e001      	b.n	8010de0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010de0:	68fb      	ldr	r3, [r7, #12]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3714      	adds	r7, #20
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	24033a10 	.word	0x24033a10

08010df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010dfc:	f7fe ff12 	bl	800fc24 <xTaskGetTickCount>
 8010e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010e02:	4b0b      	ldr	r3, [pc, #44]	@ (8010e30 <prvSampleTimeNow+0x3c>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	68fa      	ldr	r2, [r7, #12]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d205      	bcs.n	8010e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010e0c:	f000 f93a 	bl	8011084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2201      	movs	r2, #1
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	e002      	b.n	8010e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e1e:	4a04      	ldr	r2, [pc, #16]	@ (8010e30 <prvSampleTimeNow+0x3c>)
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010e24:	68fb      	ldr	r3, [r7, #12]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	24033a20 	.word	0x24033a20

08010e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	607a      	str	r2, [r7, #4]
 8010e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e42:	2300      	movs	r3, #0
 8010e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e52:	68ba      	ldr	r2, [r7, #8]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d812      	bhi.n	8010e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	1ad2      	subs	r2, r2, r3
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	699b      	ldr	r3, [r3, #24]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d302      	bcc.n	8010e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	617b      	str	r3, [r7, #20]
 8010e6c:	e01b      	b.n	8010ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e6e:	4b10      	ldr	r3, [pc, #64]	@ (8010eb0 <prvInsertTimerInActiveList+0x7c>)
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	3304      	adds	r3, #4
 8010e76:	4619      	mov	r1, r3
 8010e78:	4610      	mov	r0, r2
 8010e7a:	f7fd fc4a 	bl	800e712 <vListInsert>
 8010e7e:	e012      	b.n	8010ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d206      	bcs.n	8010e96 <prvInsertTimerInActiveList+0x62>
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d302      	bcc.n	8010e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010e90:	2301      	movs	r3, #1
 8010e92:	617b      	str	r3, [r7, #20]
 8010e94:	e007      	b.n	8010ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e96:	4b07      	ldr	r3, [pc, #28]	@ (8010eb4 <prvInsertTimerInActiveList+0x80>)
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	f7fd fc36 	bl	800e712 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010ea6:	697b      	ldr	r3, [r7, #20]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3718      	adds	r7, #24
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	24033a14 	.word	0x24033a14
 8010eb4:	24033a10 	.word	0x24033a10

08010eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b08e      	sub	sp, #56	@ 0x38
 8010ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ebe:	e0ce      	b.n	801105e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	da19      	bge.n	8010efa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010ec6:	1d3b      	adds	r3, r7, #4
 8010ec8:	3304      	adds	r3, #4
 8010eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d10b      	bne.n	8010eea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	61fb      	str	r3, [r7, #28]
}
 8010ee4:	bf00      	nop
 8010ee6:	bf00      	nop
 8010ee8:	e7fd      	b.n	8010ee6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ef0:	6850      	ldr	r0, [r2, #4]
 8010ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ef4:	6892      	ldr	r2, [r2, #8]
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f2c0 80ae 	blt.w	801105e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f08:	695b      	ldr	r3, [r3, #20]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d004      	beq.n	8010f18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f10:	3304      	adds	r3, #4
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fd fc36 	bl	800e784 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f18:	463b      	mov	r3, r7
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff ff6a 	bl	8010df4 <prvSampleTimeNow>
 8010f20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2b09      	cmp	r3, #9
 8010f26:	f200 8097 	bhi.w	8011058 <prvProcessReceivedCommands+0x1a0>
 8010f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f30 <prvProcessReceivedCommands+0x78>)
 8010f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f30:	08010f59 	.word	0x08010f59
 8010f34:	08010f59 	.word	0x08010f59
 8010f38:	08010f59 	.word	0x08010f59
 8010f3c:	08010fcf 	.word	0x08010fcf
 8010f40:	08010fe3 	.word	0x08010fe3
 8010f44:	0801102f 	.word	0x0801102f
 8010f48:	08010f59 	.word	0x08010f59
 8010f4c:	08010f59 	.word	0x08010f59
 8010f50:	08010fcf 	.word	0x08010fcf
 8010f54:	08010fe3 	.word	0x08010fe3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f5e:	f043 0301 	orr.w	r3, r3, #1
 8010f62:	b2da      	uxtb	r2, r3
 8010f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f6a:	68ba      	ldr	r2, [r7, #8]
 8010f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f6e:	699b      	ldr	r3, [r3, #24]
 8010f70:	18d1      	adds	r1, r2, r3
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f78:	f7ff ff5c 	bl	8010e34 <prvInsertTimerInActiveList>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d06c      	beq.n	801105c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f84:	6a1b      	ldr	r3, [r3, #32]
 8010f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f90:	f003 0304 	and.w	r3, r3, #4
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d061      	beq.n	801105c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f9c:	699b      	ldr	r3, [r3, #24]
 8010f9e:	441a      	add	r2, r3
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010faa:	f7ff fe01 	bl	8010bb0 <xTimerGenericCommand>
 8010fae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010fb0:	6a3b      	ldr	r3, [r7, #32]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d152      	bne.n	801105c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fba:	f383 8811 	msr	BASEPRI, r3
 8010fbe:	f3bf 8f6f 	isb	sy
 8010fc2:	f3bf 8f4f 	dsb	sy
 8010fc6:	61bb      	str	r3, [r7, #24]
}
 8010fc8:	bf00      	nop
 8010fca:	bf00      	nop
 8010fcc:	e7fd      	b.n	8010fca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fd4:	f023 0301 	bic.w	r3, r3, #1
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010fe0:	e03d      	b.n	801105e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fe8:	f043 0301 	orr.w	r3, r3, #1
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ff0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ff8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ffc:	699b      	ldr	r3, [r3, #24]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d10b      	bne.n	801101a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011006:	f383 8811 	msr	BASEPRI, r3
 801100a:	f3bf 8f6f 	isb	sy
 801100e:	f3bf 8f4f 	dsb	sy
 8011012:	617b      	str	r3, [r7, #20]
}
 8011014:	bf00      	nop
 8011016:	bf00      	nop
 8011018:	e7fd      	b.n	8011016 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801101a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801101c:	699a      	ldr	r2, [r3, #24]
 801101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011020:	18d1      	adds	r1, r2, r3
 8011022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011028:	f7ff ff04 	bl	8010e34 <prvInsertTimerInActiveList>
					break;
 801102c:	e017      	b.n	801105e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801102e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011034:	f003 0302 	and.w	r3, r3, #2
 8011038:	2b00      	cmp	r3, #0
 801103a:	d103      	bne.n	8011044 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801103c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801103e:	f000 fbeb 	bl	8011818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011042:	e00c      	b.n	801105e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801104a:	f023 0301 	bic.w	r3, r3, #1
 801104e:	b2da      	uxtb	r2, r3
 8011050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011056:	e002      	b.n	801105e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011058:	bf00      	nop
 801105a:	e000      	b.n	801105e <prvProcessReceivedCommands+0x1a6>
					break;
 801105c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801105e:	4b08      	ldr	r3, [pc, #32]	@ (8011080 <prvProcessReceivedCommands+0x1c8>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	1d39      	adds	r1, r7, #4
 8011064:	2200      	movs	r2, #0
 8011066:	4618      	mov	r0, r3
 8011068:	f7fd ff54 	bl	800ef14 <xQueueReceive>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	f47f af26 	bne.w	8010ec0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011074:	bf00      	nop
 8011076:	bf00      	nop
 8011078:	3730      	adds	r7, #48	@ 0x30
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	24033a18 	.word	0x24033a18

08011084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b088      	sub	sp, #32
 8011088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801108a:	e049      	b.n	8011120 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801108c:	4b2e      	ldr	r3, [pc, #184]	@ (8011148 <prvSwitchTimerLists+0xc4>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	68db      	ldr	r3, [r3, #12]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011096:	4b2c      	ldr	r3, [pc, #176]	@ (8011148 <prvSwitchTimerLists+0xc4>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	3304      	adds	r3, #4
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fd fb6d 	bl	800e784 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6a1b      	ldr	r3, [r3, #32]
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80110b8:	f003 0304 	and.w	r3, r3, #4
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d02f      	beq.n	8011120 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	699b      	ldr	r3, [r3, #24]
 80110c4:	693a      	ldr	r2, [r7, #16]
 80110c6:	4413      	add	r3, r2
 80110c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d90e      	bls.n	80110f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	68fa      	ldr	r2, [r7, #12]
 80110dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110de:	4b1a      	ldr	r3, [pc, #104]	@ (8011148 <prvSwitchTimerLists+0xc4>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3304      	adds	r3, #4
 80110e6:	4619      	mov	r1, r3
 80110e8:	4610      	mov	r0, r2
 80110ea:	f7fd fb12 	bl	800e712 <vListInsert>
 80110ee:	e017      	b.n	8011120 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110f0:	2300      	movs	r3, #0
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	2300      	movs	r3, #0
 80110f6:	693a      	ldr	r2, [r7, #16]
 80110f8:	2100      	movs	r1, #0
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f7ff fd58 	bl	8010bb0 <xTimerGenericCommand>
 8011100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d10b      	bne.n	8011120 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	603b      	str	r3, [r7, #0]
}
 801111a:	bf00      	nop
 801111c:	bf00      	nop
 801111e:	e7fd      	b.n	801111c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011120:	4b09      	ldr	r3, [pc, #36]	@ (8011148 <prvSwitchTimerLists+0xc4>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1b0      	bne.n	801108c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801112a:	4b07      	ldr	r3, [pc, #28]	@ (8011148 <prvSwitchTimerLists+0xc4>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011130:	4b06      	ldr	r3, [pc, #24]	@ (801114c <prvSwitchTimerLists+0xc8>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a04      	ldr	r2, [pc, #16]	@ (8011148 <prvSwitchTimerLists+0xc4>)
 8011136:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011138:	4a04      	ldr	r2, [pc, #16]	@ (801114c <prvSwitchTimerLists+0xc8>)
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	6013      	str	r3, [r2, #0]
}
 801113e:	bf00      	nop
 8011140:	3718      	adds	r7, #24
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	24033a10 	.word	0x24033a10
 801114c:	24033a14 	.word	0x24033a14

08011150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011156:	f000 f96f 	bl	8011438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801115a:	4b15      	ldr	r3, [pc, #84]	@ (80111b0 <prvCheckForValidListAndQueue+0x60>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d120      	bne.n	80111a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011162:	4814      	ldr	r0, [pc, #80]	@ (80111b4 <prvCheckForValidListAndQueue+0x64>)
 8011164:	f7fd fa84 	bl	800e670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011168:	4813      	ldr	r0, [pc, #76]	@ (80111b8 <prvCheckForValidListAndQueue+0x68>)
 801116a:	f7fd fa81 	bl	800e670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801116e:	4b13      	ldr	r3, [pc, #76]	@ (80111bc <prvCheckForValidListAndQueue+0x6c>)
 8011170:	4a10      	ldr	r2, [pc, #64]	@ (80111b4 <prvCheckForValidListAndQueue+0x64>)
 8011172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011174:	4b12      	ldr	r3, [pc, #72]	@ (80111c0 <prvCheckForValidListAndQueue+0x70>)
 8011176:	4a10      	ldr	r2, [pc, #64]	@ (80111b8 <prvCheckForValidListAndQueue+0x68>)
 8011178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801117a:	2300      	movs	r3, #0
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	4b11      	ldr	r3, [pc, #68]	@ (80111c4 <prvCheckForValidListAndQueue+0x74>)
 8011180:	4a11      	ldr	r2, [pc, #68]	@ (80111c8 <prvCheckForValidListAndQueue+0x78>)
 8011182:	2110      	movs	r1, #16
 8011184:	200a      	movs	r0, #10
 8011186:	f7fd fb91 	bl	800e8ac <xQueueGenericCreateStatic>
 801118a:	4603      	mov	r3, r0
 801118c:	4a08      	ldr	r2, [pc, #32]	@ (80111b0 <prvCheckForValidListAndQueue+0x60>)
 801118e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011190:	4b07      	ldr	r3, [pc, #28]	@ (80111b0 <prvCheckForValidListAndQueue+0x60>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d005      	beq.n	80111a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011198:	4b05      	ldr	r3, [pc, #20]	@ (80111b0 <prvCheckForValidListAndQueue+0x60>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	490b      	ldr	r1, [pc, #44]	@ (80111cc <prvCheckForValidListAndQueue+0x7c>)
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fe f9d2 	bl	800f548 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111a4:	f000 f97a 	bl	801149c <vPortExitCritical>
}
 80111a8:	bf00      	nop
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	24033a18 	.word	0x24033a18
 80111b4:	240339e8 	.word	0x240339e8
 80111b8:	240339fc 	.word	0x240339fc
 80111bc:	24033a10 	.word	0x24033a10
 80111c0:	24033a14 	.word	0x24033a14
 80111c4:	24033ac4 	.word	0x24033ac4
 80111c8:	24033a24 	.word	0x24033a24
 80111cc:	08023468 	.word	0x08023468

080111d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111d0:	b480      	push	{r7}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	3b04      	subs	r3, #4
 80111e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80111e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	3b04      	subs	r3, #4
 80111ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	f023 0201 	bic.w	r2, r3, #1
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	3b04      	subs	r3, #4
 80111fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011200:	4a0c      	ldr	r2, [pc, #48]	@ (8011234 <pxPortInitialiseStack+0x64>)
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	3b14      	subs	r3, #20
 801120a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	3b04      	subs	r3, #4
 8011216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f06f 0202 	mvn.w	r2, #2
 801121e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	3b20      	subs	r3, #32
 8011224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011226:	68fb      	ldr	r3, [r7, #12]
}
 8011228:	4618      	mov	r0, r3
 801122a:	3714      	adds	r7, #20
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	08011239 	.word	0x08011239

08011238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801123e:	2300      	movs	r3, #0
 8011240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011242:	4b13      	ldr	r3, [pc, #76]	@ (8011290 <prvTaskExitError+0x58>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801124a:	d00b      	beq.n	8011264 <prvTaskExitError+0x2c>
	__asm volatile
 801124c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011250:	f383 8811 	msr	BASEPRI, r3
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	60fb      	str	r3, [r7, #12]
}
 801125e:	bf00      	nop
 8011260:	bf00      	nop
 8011262:	e7fd      	b.n	8011260 <prvTaskExitError+0x28>
	__asm volatile
 8011264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011268:	f383 8811 	msr	BASEPRI, r3
 801126c:	f3bf 8f6f 	isb	sy
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	60bb      	str	r3, [r7, #8]
}
 8011276:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011278:	bf00      	nop
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d0fc      	beq.n	801127a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011280:	bf00      	nop
 8011282:	bf00      	nop
 8011284:	3714      	adds	r7, #20
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	24000014 	.word	0x24000014
	...

080112a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80112a0:	4b07      	ldr	r3, [pc, #28]	@ (80112c0 <pxCurrentTCBConst2>)
 80112a2:	6819      	ldr	r1, [r3, #0]
 80112a4:	6808      	ldr	r0, [r1, #0]
 80112a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112aa:	f380 8809 	msr	PSP, r0
 80112ae:	f3bf 8f6f 	isb	sy
 80112b2:	f04f 0000 	mov.w	r0, #0
 80112b6:	f380 8811 	msr	BASEPRI, r0
 80112ba:	4770      	bx	lr
 80112bc:	f3af 8000 	nop.w

080112c0 <pxCurrentTCBConst2>:
 80112c0:	240334e8 	.word	0x240334e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112c4:	bf00      	nop
 80112c6:	bf00      	nop

080112c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112c8:	4808      	ldr	r0, [pc, #32]	@ (80112ec <prvPortStartFirstTask+0x24>)
 80112ca:	6800      	ldr	r0, [r0, #0]
 80112cc:	6800      	ldr	r0, [r0, #0]
 80112ce:	f380 8808 	msr	MSP, r0
 80112d2:	f04f 0000 	mov.w	r0, #0
 80112d6:	f380 8814 	msr	CONTROL, r0
 80112da:	b662      	cpsie	i
 80112dc:	b661      	cpsie	f
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	df00      	svc	0
 80112e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80112ea:	bf00      	nop
 80112ec:	e000ed08 	.word	0xe000ed08

080112f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b086      	sub	sp, #24
 80112f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112f6:	4b47      	ldr	r3, [pc, #284]	@ (8011414 <xPortStartScheduler+0x124>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4a47      	ldr	r2, [pc, #284]	@ (8011418 <xPortStartScheduler+0x128>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d10b      	bne.n	8011318 <xPortStartScheduler+0x28>
	__asm volatile
 8011300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011304:	f383 8811 	msr	BASEPRI, r3
 8011308:	f3bf 8f6f 	isb	sy
 801130c:	f3bf 8f4f 	dsb	sy
 8011310:	613b      	str	r3, [r7, #16]
}
 8011312:	bf00      	nop
 8011314:	bf00      	nop
 8011316:	e7fd      	b.n	8011314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011318:	4b3e      	ldr	r3, [pc, #248]	@ (8011414 <xPortStartScheduler+0x124>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a3f      	ldr	r2, [pc, #252]	@ (801141c <xPortStartScheduler+0x12c>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d10b      	bne.n	801133a <xPortStartScheduler+0x4a>
	__asm volatile
 8011322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011326:	f383 8811 	msr	BASEPRI, r3
 801132a:	f3bf 8f6f 	isb	sy
 801132e:	f3bf 8f4f 	dsb	sy
 8011332:	60fb      	str	r3, [r7, #12]
}
 8011334:	bf00      	nop
 8011336:	bf00      	nop
 8011338:	e7fd      	b.n	8011336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801133a:	4b39      	ldr	r3, [pc, #228]	@ (8011420 <xPortStartScheduler+0x130>)
 801133c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	b2db      	uxtb	r3, r3
 8011344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	22ff      	movs	r2, #255	@ 0xff
 801134a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	b2db      	uxtb	r3, r3
 8011352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011354:	78fb      	ldrb	r3, [r7, #3]
 8011356:	b2db      	uxtb	r3, r3
 8011358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801135c:	b2da      	uxtb	r2, r3
 801135e:	4b31      	ldr	r3, [pc, #196]	@ (8011424 <xPortStartScheduler+0x134>)
 8011360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011362:	4b31      	ldr	r3, [pc, #196]	@ (8011428 <xPortStartScheduler+0x138>)
 8011364:	2207      	movs	r2, #7
 8011366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011368:	e009      	b.n	801137e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801136a:	4b2f      	ldr	r3, [pc, #188]	@ (8011428 <xPortStartScheduler+0x138>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	3b01      	subs	r3, #1
 8011370:	4a2d      	ldr	r2, [pc, #180]	@ (8011428 <xPortStartScheduler+0x138>)
 8011372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011374:	78fb      	ldrb	r3, [r7, #3]
 8011376:	b2db      	uxtb	r3, r3
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	b2db      	uxtb	r3, r3
 801137c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801137e:	78fb      	ldrb	r3, [r7, #3]
 8011380:	b2db      	uxtb	r3, r3
 8011382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011386:	2b80      	cmp	r3, #128	@ 0x80
 8011388:	d0ef      	beq.n	801136a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801138a:	4b27      	ldr	r3, [pc, #156]	@ (8011428 <xPortStartScheduler+0x138>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f1c3 0307 	rsb	r3, r3, #7
 8011392:	2b04      	cmp	r3, #4
 8011394:	d00b      	beq.n	80113ae <xPortStartScheduler+0xbe>
	__asm volatile
 8011396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801139a:	f383 8811 	msr	BASEPRI, r3
 801139e:	f3bf 8f6f 	isb	sy
 80113a2:	f3bf 8f4f 	dsb	sy
 80113a6:	60bb      	str	r3, [r7, #8]
}
 80113a8:	bf00      	nop
 80113aa:	bf00      	nop
 80113ac:	e7fd      	b.n	80113aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80113ae:	4b1e      	ldr	r3, [pc, #120]	@ (8011428 <xPortStartScheduler+0x138>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	021b      	lsls	r3, r3, #8
 80113b4:	4a1c      	ldr	r2, [pc, #112]	@ (8011428 <xPortStartScheduler+0x138>)
 80113b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80113b8:	4b1b      	ldr	r3, [pc, #108]	@ (8011428 <xPortStartScheduler+0x138>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80113c0:	4a19      	ldr	r2, [pc, #100]	@ (8011428 <xPortStartScheduler+0x138>)
 80113c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113cc:	4b17      	ldr	r3, [pc, #92]	@ (801142c <xPortStartScheduler+0x13c>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4a16      	ldr	r2, [pc, #88]	@ (801142c <xPortStartScheduler+0x13c>)
 80113d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80113d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113d8:	4b14      	ldr	r3, [pc, #80]	@ (801142c <xPortStartScheduler+0x13c>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a13      	ldr	r2, [pc, #76]	@ (801142c <xPortStartScheduler+0x13c>)
 80113de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80113e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113e4:	f000 f8da 	bl	801159c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80113e8:	4b11      	ldr	r3, [pc, #68]	@ (8011430 <xPortStartScheduler+0x140>)
 80113ea:	2200      	movs	r2, #0
 80113ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80113ee:	f000 f8f9 	bl	80115e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80113f2:	4b10      	ldr	r3, [pc, #64]	@ (8011434 <xPortStartScheduler+0x144>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	4a0f      	ldr	r2, [pc, #60]	@ (8011434 <xPortStartScheduler+0x144>)
 80113f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80113fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80113fe:	f7ff ff63 	bl	80112c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011402:	f7fe fceb 	bl	800fddc <vTaskSwitchContext>
	prvTaskExitError();
 8011406:	f7ff ff17 	bl	8011238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3718      	adds	r7, #24
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	e000ed00 	.word	0xe000ed00
 8011418:	410fc271 	.word	0x410fc271
 801141c:	410fc270 	.word	0x410fc270
 8011420:	e000e400 	.word	0xe000e400
 8011424:	24033b14 	.word	0x24033b14
 8011428:	24033b18 	.word	0x24033b18
 801142c:	e000ed20 	.word	0xe000ed20
 8011430:	24000014 	.word	0x24000014
 8011434:	e000ef34 	.word	0xe000ef34

08011438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
	__asm volatile
 801143e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011442:	f383 8811 	msr	BASEPRI, r3
 8011446:	f3bf 8f6f 	isb	sy
 801144a:	f3bf 8f4f 	dsb	sy
 801144e:	607b      	str	r3, [r7, #4]
}
 8011450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011452:	4b10      	ldr	r3, [pc, #64]	@ (8011494 <vPortEnterCritical+0x5c>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3301      	adds	r3, #1
 8011458:	4a0e      	ldr	r2, [pc, #56]	@ (8011494 <vPortEnterCritical+0x5c>)
 801145a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801145c:	4b0d      	ldr	r3, [pc, #52]	@ (8011494 <vPortEnterCritical+0x5c>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2b01      	cmp	r3, #1
 8011462:	d110      	bne.n	8011486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011464:	4b0c      	ldr	r3, [pc, #48]	@ (8011498 <vPortEnterCritical+0x60>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	b2db      	uxtb	r3, r3
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00b      	beq.n	8011486 <vPortEnterCritical+0x4e>
	__asm volatile
 801146e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011472:	f383 8811 	msr	BASEPRI, r3
 8011476:	f3bf 8f6f 	isb	sy
 801147a:	f3bf 8f4f 	dsb	sy
 801147e:	603b      	str	r3, [r7, #0]
}
 8011480:	bf00      	nop
 8011482:	bf00      	nop
 8011484:	e7fd      	b.n	8011482 <vPortEnterCritical+0x4a>
	}
}
 8011486:	bf00      	nop
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	24000014 	.word	0x24000014
 8011498:	e000ed04 	.word	0xe000ed04

0801149c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80114a2:	4b12      	ldr	r3, [pc, #72]	@ (80114ec <vPortExitCritical+0x50>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d10b      	bne.n	80114c2 <vPortExitCritical+0x26>
	__asm volatile
 80114aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ae:	f383 8811 	msr	BASEPRI, r3
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	f3bf 8f4f 	dsb	sy
 80114ba:	607b      	str	r3, [r7, #4]
}
 80114bc:	bf00      	nop
 80114be:	bf00      	nop
 80114c0:	e7fd      	b.n	80114be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80114c2:	4b0a      	ldr	r3, [pc, #40]	@ (80114ec <vPortExitCritical+0x50>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	3b01      	subs	r3, #1
 80114c8:	4a08      	ldr	r2, [pc, #32]	@ (80114ec <vPortExitCritical+0x50>)
 80114ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114cc:	4b07      	ldr	r3, [pc, #28]	@ (80114ec <vPortExitCritical+0x50>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d105      	bne.n	80114e0 <vPortExitCritical+0x44>
 80114d4:	2300      	movs	r3, #0
 80114d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	f383 8811 	msr	BASEPRI, r3
}
 80114de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80114e0:	bf00      	nop
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	24000014 	.word	0x24000014

080114f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114f0:	f3ef 8009 	mrs	r0, PSP
 80114f4:	f3bf 8f6f 	isb	sy
 80114f8:	4b15      	ldr	r3, [pc, #84]	@ (8011550 <pxCurrentTCBConst>)
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	f01e 0f10 	tst.w	lr, #16
 8011500:	bf08      	it	eq
 8011502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801150a:	6010      	str	r0, [r2, #0]
 801150c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011514:	f380 8811 	msr	BASEPRI, r0
 8011518:	f3bf 8f4f 	dsb	sy
 801151c:	f3bf 8f6f 	isb	sy
 8011520:	f7fe fc5c 	bl	800fddc <vTaskSwitchContext>
 8011524:	f04f 0000 	mov.w	r0, #0
 8011528:	f380 8811 	msr	BASEPRI, r0
 801152c:	bc09      	pop	{r0, r3}
 801152e:	6819      	ldr	r1, [r3, #0]
 8011530:	6808      	ldr	r0, [r1, #0]
 8011532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011536:	f01e 0f10 	tst.w	lr, #16
 801153a:	bf08      	it	eq
 801153c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011540:	f380 8809 	msr	PSP, r0
 8011544:	f3bf 8f6f 	isb	sy
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	f3af 8000 	nop.w

08011550 <pxCurrentTCBConst>:
 8011550:	240334e8 	.word	0x240334e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011554:	bf00      	nop
 8011556:	bf00      	nop

08011558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
	__asm volatile
 801155e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	607b      	str	r3, [r7, #4]
}
 8011570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011572:	f7fe fb79 	bl	800fc68 <xTaskIncrementTick>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d003      	beq.n	8011584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801157c:	4b06      	ldr	r3, [pc, #24]	@ (8011598 <xPortSysTickHandler+0x40>)
 801157e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	2300      	movs	r3, #0
 8011586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	f383 8811 	msr	BASEPRI, r3
}
 801158e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011590:	bf00      	nop
 8011592:	3708      	adds	r7, #8
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	e000ed04 	.word	0xe000ed04

0801159c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801159c:	b480      	push	{r7}
 801159e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80115a0:	4b0b      	ldr	r3, [pc, #44]	@ (80115d0 <vPortSetupTimerInterrupt+0x34>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80115a6:	4b0b      	ldr	r3, [pc, #44]	@ (80115d4 <vPortSetupTimerInterrupt+0x38>)
 80115a8:	2200      	movs	r2, #0
 80115aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80115ac:	4b0a      	ldr	r3, [pc, #40]	@ (80115d8 <vPortSetupTimerInterrupt+0x3c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	4a0a      	ldr	r2, [pc, #40]	@ (80115dc <vPortSetupTimerInterrupt+0x40>)
 80115b2:	fba2 2303 	umull	r2, r3, r2, r3
 80115b6:	099b      	lsrs	r3, r3, #6
 80115b8:	4a09      	ldr	r2, [pc, #36]	@ (80115e0 <vPortSetupTimerInterrupt+0x44>)
 80115ba:	3b01      	subs	r3, #1
 80115bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80115be:	4b04      	ldr	r3, [pc, #16]	@ (80115d0 <vPortSetupTimerInterrupt+0x34>)
 80115c0:	2207      	movs	r2, #7
 80115c2:	601a      	str	r2, [r3, #0]
}
 80115c4:	bf00      	nop
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	e000e010 	.word	0xe000e010
 80115d4:	e000e018 	.word	0xe000e018
 80115d8:	24000004 	.word	0x24000004
 80115dc:	10624dd3 	.word	0x10624dd3
 80115e0:	e000e014 	.word	0xe000e014

080115e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80115e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80115f4 <vPortEnableVFP+0x10>
 80115e8:	6801      	ldr	r1, [r0, #0]
 80115ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80115ee:	6001      	str	r1, [r0, #0]
 80115f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115f2:	bf00      	nop
 80115f4:	e000ed88 	.word	0xe000ed88

080115f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115fe:	f3ef 8305 	mrs	r3, IPSR
 8011602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2b0f      	cmp	r3, #15
 8011608:	d915      	bls.n	8011636 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801160a:	4a18      	ldr	r2, [pc, #96]	@ (801166c <vPortValidateInterruptPriority+0x74>)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	4413      	add	r3, r2
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011614:	4b16      	ldr	r3, [pc, #88]	@ (8011670 <vPortValidateInterruptPriority+0x78>)
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	7afa      	ldrb	r2, [r7, #11]
 801161a:	429a      	cmp	r2, r3
 801161c:	d20b      	bcs.n	8011636 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801161e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011622:	f383 8811 	msr	BASEPRI, r3
 8011626:	f3bf 8f6f 	isb	sy
 801162a:	f3bf 8f4f 	dsb	sy
 801162e:	607b      	str	r3, [r7, #4]
}
 8011630:	bf00      	nop
 8011632:	bf00      	nop
 8011634:	e7fd      	b.n	8011632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011636:	4b0f      	ldr	r3, [pc, #60]	@ (8011674 <vPortValidateInterruptPriority+0x7c>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801163e:	4b0e      	ldr	r3, [pc, #56]	@ (8011678 <vPortValidateInterruptPriority+0x80>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	429a      	cmp	r2, r3
 8011644:	d90b      	bls.n	801165e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801164a:	f383 8811 	msr	BASEPRI, r3
 801164e:	f3bf 8f6f 	isb	sy
 8011652:	f3bf 8f4f 	dsb	sy
 8011656:	603b      	str	r3, [r7, #0]
}
 8011658:	bf00      	nop
 801165a:	bf00      	nop
 801165c:	e7fd      	b.n	801165a <vPortValidateInterruptPriority+0x62>
	}
 801165e:	bf00      	nop
 8011660:	3714      	adds	r7, #20
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr
 801166a:	bf00      	nop
 801166c:	e000e3f0 	.word	0xe000e3f0
 8011670:	24033b14 	.word	0x24033b14
 8011674:	e000ed0c 	.word	0xe000ed0c
 8011678:	24033b18 	.word	0x24033b18

0801167c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b08a      	sub	sp, #40	@ 0x28
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011684:	2300      	movs	r3, #0
 8011686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011688:	f7fe fa20 	bl	800facc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801168c:	4b5c      	ldr	r3, [pc, #368]	@ (8011800 <pvPortMalloc+0x184>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d101      	bne.n	8011698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011694:	f000 f924 	bl	80118e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011698:	4b5a      	ldr	r3, [pc, #360]	@ (8011804 <pvPortMalloc+0x188>)
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4013      	ands	r3, r2
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f040 8095 	bne.w	80117d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d01e      	beq.n	80116ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80116ac:	2208      	movs	r2, #8
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4413      	add	r3, r2
 80116b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f003 0307 	and.w	r3, r3, #7
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d015      	beq.n	80116ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f023 0307 	bic.w	r3, r3, #7
 80116c4:	3308      	adds	r3, #8
 80116c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f003 0307 	and.w	r3, r3, #7
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00b      	beq.n	80116ea <pvPortMalloc+0x6e>
	__asm volatile
 80116d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116d6:	f383 8811 	msr	BASEPRI, r3
 80116da:	f3bf 8f6f 	isb	sy
 80116de:	f3bf 8f4f 	dsb	sy
 80116e2:	617b      	str	r3, [r7, #20]
}
 80116e4:	bf00      	nop
 80116e6:	bf00      	nop
 80116e8:	e7fd      	b.n	80116e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d06f      	beq.n	80117d0 <pvPortMalloc+0x154>
 80116f0:	4b45      	ldr	r3, [pc, #276]	@ (8011808 <pvPortMalloc+0x18c>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d86a      	bhi.n	80117d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80116fa:	4b44      	ldr	r3, [pc, #272]	@ (801180c <pvPortMalloc+0x190>)
 80116fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80116fe:	4b43      	ldr	r3, [pc, #268]	@ (801180c <pvPortMalloc+0x190>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011704:	e004      	b.n	8011710 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	429a      	cmp	r2, r3
 8011718:	d903      	bls.n	8011722 <pvPortMalloc+0xa6>
 801171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d1f1      	bne.n	8011706 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011722:	4b37      	ldr	r3, [pc, #220]	@ (8011800 <pvPortMalloc+0x184>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011728:	429a      	cmp	r2, r3
 801172a:	d051      	beq.n	80117d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	2208      	movs	r2, #8
 8011732:	4413      	add	r3, r2
 8011734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011740:	685a      	ldr	r2, [r3, #4]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	1ad2      	subs	r2, r2, r3
 8011746:	2308      	movs	r3, #8
 8011748:	005b      	lsls	r3, r3, #1
 801174a:	429a      	cmp	r2, r3
 801174c:	d920      	bls.n	8011790 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801174e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	4413      	add	r3, r2
 8011754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	f003 0307 	and.w	r3, r3, #7
 801175c:	2b00      	cmp	r3, #0
 801175e:	d00b      	beq.n	8011778 <pvPortMalloc+0xfc>
	__asm volatile
 8011760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011764:	f383 8811 	msr	BASEPRI, r3
 8011768:	f3bf 8f6f 	isb	sy
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	613b      	str	r3, [r7, #16]
}
 8011772:	bf00      	nop
 8011774:	bf00      	nop
 8011776:	e7fd      	b.n	8011774 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	1ad2      	subs	r2, r2, r3
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801178a:	69b8      	ldr	r0, [r7, #24]
 801178c:	f000 f90c 	bl	80119a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011790:	4b1d      	ldr	r3, [pc, #116]	@ (8011808 <pvPortMalloc+0x18c>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	1ad3      	subs	r3, r2, r3
 801179a:	4a1b      	ldr	r2, [pc, #108]	@ (8011808 <pvPortMalloc+0x18c>)
 801179c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801179e:	4b1a      	ldr	r3, [pc, #104]	@ (8011808 <pvPortMalloc+0x18c>)
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	4b1b      	ldr	r3, [pc, #108]	@ (8011810 <pvPortMalloc+0x194>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d203      	bcs.n	80117b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80117aa:	4b17      	ldr	r3, [pc, #92]	@ (8011808 <pvPortMalloc+0x18c>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	4a18      	ldr	r2, [pc, #96]	@ (8011810 <pvPortMalloc+0x194>)
 80117b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80117b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	4b13      	ldr	r3, [pc, #76]	@ (8011804 <pvPortMalloc+0x188>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	431a      	orrs	r2, r3
 80117bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80117c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c2:	2200      	movs	r2, #0
 80117c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80117c6:	4b13      	ldr	r3, [pc, #76]	@ (8011814 <pvPortMalloc+0x198>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	3301      	adds	r3, #1
 80117cc:	4a11      	ldr	r2, [pc, #68]	@ (8011814 <pvPortMalloc+0x198>)
 80117ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80117d0:	f7fe f98a 	bl	800fae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	f003 0307 	and.w	r3, r3, #7
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00b      	beq.n	80117f6 <pvPortMalloc+0x17a>
	__asm volatile
 80117de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e2:	f383 8811 	msr	BASEPRI, r3
 80117e6:	f3bf 8f6f 	isb	sy
 80117ea:	f3bf 8f4f 	dsb	sy
 80117ee:	60fb      	str	r3, [r7, #12]
}
 80117f0:	bf00      	nop
 80117f2:	bf00      	nop
 80117f4:	e7fd      	b.n	80117f2 <pvPortMalloc+0x176>
	return pvReturn;
 80117f6:	69fb      	ldr	r3, [r7, #28]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3728      	adds	r7, #40	@ 0x28
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	24064864 	.word	0x24064864
 8011804:	24064878 	.word	0x24064878
 8011808:	24064868 	.word	0x24064868
 801180c:	2406485c 	.word	0x2406485c
 8011810:	2406486c 	.word	0x2406486c
 8011814:	24064870 	.word	0x24064870

08011818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b086      	sub	sp, #24
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d04f      	beq.n	80118ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801182a:	2308      	movs	r3, #8
 801182c:	425b      	negs	r3, r3
 801182e:	697a      	ldr	r2, [r7, #20]
 8011830:	4413      	add	r3, r2
 8011832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	685a      	ldr	r2, [r3, #4]
 801183c:	4b25      	ldr	r3, [pc, #148]	@ (80118d4 <vPortFree+0xbc>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4013      	ands	r3, r2
 8011842:	2b00      	cmp	r3, #0
 8011844:	d10b      	bne.n	801185e <vPortFree+0x46>
	__asm volatile
 8011846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801184a:	f383 8811 	msr	BASEPRI, r3
 801184e:	f3bf 8f6f 	isb	sy
 8011852:	f3bf 8f4f 	dsb	sy
 8011856:	60fb      	str	r3, [r7, #12]
}
 8011858:	bf00      	nop
 801185a:	bf00      	nop
 801185c:	e7fd      	b.n	801185a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00b      	beq.n	801187e <vPortFree+0x66>
	__asm volatile
 8011866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801186a:	f383 8811 	msr	BASEPRI, r3
 801186e:	f3bf 8f6f 	isb	sy
 8011872:	f3bf 8f4f 	dsb	sy
 8011876:	60bb      	str	r3, [r7, #8]
}
 8011878:	bf00      	nop
 801187a:	bf00      	nop
 801187c:	e7fd      	b.n	801187a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	4b14      	ldr	r3, [pc, #80]	@ (80118d4 <vPortFree+0xbc>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	4013      	ands	r3, r2
 8011888:	2b00      	cmp	r3, #0
 801188a:	d01e      	beq.n	80118ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d11a      	bne.n	80118ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	685a      	ldr	r2, [r3, #4]
 8011898:	4b0e      	ldr	r3, [pc, #56]	@ (80118d4 <vPortFree+0xbc>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	43db      	mvns	r3, r3
 801189e:	401a      	ands	r2, r3
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80118a4:	f7fe f912 	bl	800facc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	685a      	ldr	r2, [r3, #4]
 80118ac:	4b0a      	ldr	r3, [pc, #40]	@ (80118d8 <vPortFree+0xc0>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4413      	add	r3, r2
 80118b2:	4a09      	ldr	r2, [pc, #36]	@ (80118d8 <vPortFree+0xc0>)
 80118b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80118b6:	6938      	ldr	r0, [r7, #16]
 80118b8:	f000 f876 	bl	80119a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80118bc:	4b07      	ldr	r3, [pc, #28]	@ (80118dc <vPortFree+0xc4>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	3301      	adds	r3, #1
 80118c2:	4a06      	ldr	r2, [pc, #24]	@ (80118dc <vPortFree+0xc4>)
 80118c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80118c6:	f7fe f90f 	bl	800fae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80118ca:	bf00      	nop
 80118cc:	3718      	adds	r7, #24
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	24064878 	.word	0x24064878
 80118d8:	24064868 	.word	0x24064868
 80118dc:	24064874 	.word	0x24064874

080118e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80118e6:	4b29      	ldr	r3, [pc, #164]	@ (801198c <prvHeapInit+0xac>)
 80118e8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80118ea:	4b29      	ldr	r3, [pc, #164]	@ (8011990 <prvHeapInit+0xb0>)
 80118ec:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	f003 0307 	and.w	r3, r3, #7
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d00c      	beq.n	8011912 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	3307      	adds	r3, #7
 80118fc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f023 0307 	bic.w	r3, r3, #7
 8011904:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011906:	68ba      	ldr	r2, [r7, #8]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	4a20      	ldr	r2, [pc, #128]	@ (8011990 <prvHeapInit+0xb0>)
 801190e:	4413      	add	r3, r2
 8011910:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011916:	4a1f      	ldr	r2, [pc, #124]	@ (8011994 <prvHeapInit+0xb4>)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801191c:	4b1d      	ldr	r3, [pc, #116]	@ (8011994 <prvHeapInit+0xb4>)
 801191e:	2200      	movs	r2, #0
 8011920:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	4413      	add	r3, r2
 8011928:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801192a:	2208      	movs	r2, #8
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	1a9b      	subs	r3, r3, r2
 8011930:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f023 0307 	bic.w	r3, r3, #7
 8011938:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	4a16      	ldr	r2, [pc, #88]	@ (8011998 <prvHeapInit+0xb8>)
 801193e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011940:	4b15      	ldr	r3, [pc, #84]	@ (8011998 <prvHeapInit+0xb8>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2200      	movs	r2, #0
 8011946:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011948:	4b13      	ldr	r3, [pc, #76]	@ (8011998 <prvHeapInit+0xb8>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2200      	movs	r2, #0
 801194e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	1ad2      	subs	r2, r2, r3
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801195e:	4b0e      	ldr	r3, [pc, #56]	@ (8011998 <prvHeapInit+0xb8>)
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	4a0c      	ldr	r2, [pc, #48]	@ (801199c <prvHeapInit+0xbc>)
 801196c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	4a0b      	ldr	r2, [pc, #44]	@ (80119a0 <prvHeapInit+0xc0>)
 8011974:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011976:	4b0b      	ldr	r3, [pc, #44]	@ (80119a4 <prvHeapInit+0xc4>)
 8011978:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801197c:	601a      	str	r2, [r3, #0]
}
 801197e:	bf00      	nop
 8011980:	3714      	adds	r7, #20
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
 801198a:	bf00      	nop
 801198c:	00030d40 	.word	0x00030d40
 8011990:	24033b1c 	.word	0x24033b1c
 8011994:	2406485c 	.word	0x2406485c
 8011998:	24064864 	.word	0x24064864
 801199c:	2406486c 	.word	0x2406486c
 80119a0:	24064868 	.word	0x24064868
 80119a4:	24064878 	.word	0x24064878

080119a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80119b0:	4b28      	ldr	r3, [pc, #160]	@ (8011a54 <prvInsertBlockIntoFreeList+0xac>)
 80119b2:	60fb      	str	r3, [r7, #12]
 80119b4:	e002      	b.n	80119bc <prvInsertBlockIntoFreeList+0x14>
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	60fb      	str	r3, [r7, #12]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d8f7      	bhi.n	80119b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	68ba      	ldr	r2, [r7, #8]
 80119d0:	4413      	add	r3, r2
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d108      	bne.n	80119ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	685a      	ldr	r2, [r3, #4]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	441a      	add	r2, r3
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	68ba      	ldr	r2, [r7, #8]
 80119f4:	441a      	add	r2, r3
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d118      	bne.n	8011a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	4b15      	ldr	r3, [pc, #84]	@ (8011a58 <prvInsertBlockIntoFreeList+0xb0>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d00d      	beq.n	8011a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	685a      	ldr	r2, [r3, #4]
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	441a      	add	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	601a      	str	r2, [r3, #0]
 8011a24:	e008      	b.n	8011a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011a26:	4b0c      	ldr	r3, [pc, #48]	@ (8011a58 <prvInsertBlockIntoFreeList+0xb0>)
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	601a      	str	r2, [r3, #0]
 8011a2e:	e003      	b.n	8011a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d002      	beq.n	8011a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a46:	bf00      	nop
 8011a48:	3714      	adds	r7, #20
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	2406485c 	.word	0x2406485c
 8011a58:	24064864 	.word	0x24064864

08011a5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a5c:	4b04      	ldr	r3, [pc, #16]	@ (8011a70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a5e:	681a      	ldr	r2, [r3, #0]
 8011a60:	b10a      	cbz	r2, 8011a66 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xa>
 8011a62:	4803      	ldr	r0, [pc, #12]	@ (8011a70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a64:	4770      	bx	lr
 8011a66:	4a03      	ldr	r2, [pc, #12]	@ (8011a74 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x18>)
 8011a68:	4801      	ldr	r0, [pc, #4]	@ (8011a70 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a6a:	6812      	ldr	r2, [r2, #0]
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	4770      	bx	lr
 8011a70:	24000020 	.word	0x24000020
 8011a74:	24000d2c 	.word	0x24000d2c

08011a78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a78:	4a02      	ldr	r2, [pc, #8]	@ (8011a84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xc>)
 8011a7a:	4b03      	ldr	r3, [pc, #12]	@ (8011a88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x10>)
 8011a7c:	6812      	ldr	r2, [r2, #0]
 8011a7e:	601a      	str	r2, [r3, #0]
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
 8011a84:	24000d2c 	.word	0x24000d2c
 8011a88:	24000020 	.word	0x24000020

08011a8c <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_init_function>:
 8011a8c:	f004 bffc 	b.w	8016a88 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>

08011a90 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_fini_function>:
 8011a90:	f005 b838 	b.w	8016b04 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>

08011a94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a94:	b510      	push	{r4, lr}
 8011a96:	4c0a      	ldr	r4, [pc, #40]	@ (8011ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>)
 8011a98:	f001 f880 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a9c:	60e0      	str	r0, [r4, #12]
 8011a9e:	f000 f819 	bl	8011ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011aa2:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011aa4:	f000 f830 	bl	8011b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011aa8:	4b06      	ldr	r3, [pc, #24]	@ (8011ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011aaa:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	b10a      	cbz	r2, 8011ab6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x22>
 8011ab2:	4804      	ldr	r0, [pc, #16]	@ (8011ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011ab4:	bd10      	pop	{r4, pc}
 8011ab6:	4a04      	ldr	r2, [pc, #16]	@ (8011ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x34>)
 8011ab8:	4802      	ldr	r0, [pc, #8]	@ (8011ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011aba:	6812      	ldr	r2, [r2, #0]
 8011abc:	601a      	str	r2, [r3, #0]
 8011abe:	bd10      	pop	{r4, pc}
 8011ac0:	2400002c 	.word	0x2400002c
 8011ac4:	240000e0 	.word	0x240000e0
 8011ac8:	24000d30 	.word	0x24000d30

08011acc <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_init_function>:
 8011acc:	f005 b82a 	b.w	8016b24 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>

08011ad0 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_fini_function>:
 8011ad0:	f005 b83c 	b.w	8016b4c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>

08011ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011ad4:	b508      	push	{r3, lr}
 8011ad6:	f001 f861 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ada:	4b06      	ldr	r3, [pc, #24]	@ (8011af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011adc:	4906      	ldr	r1, [pc, #24]	@ (8011af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x24>)
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	60c8      	str	r0, [r1, #12]
 8011ae2:	b10a      	cbz	r2, 8011ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x14>
 8011ae4:	4803      	ldr	r0, [pc, #12]	@ (8011af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011ae6:	bd08      	pop	{r3, pc}
 8011ae8:	4a04      	ldr	r2, [pc, #16]	@ (8011afc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>)
 8011aea:	4802      	ldr	r0, [pc, #8]	@ (8011af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011aec:	6812      	ldr	r2, [r2, #0]
 8011aee:	601a      	str	r2, [r3, #0]
 8011af0:	bd08      	pop	{r3, pc}
 8011af2:	bf00      	nop
 8011af4:	240001a0 	.word	0x240001a0
 8011af8:	240000ec 	.word	0x240000ec
 8011afc:	24000d30 	.word	0x24000d30

08011b00 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_init_function>:
 8011b00:	f005 b828 	b.w	8016b54 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>

08011b04 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_fini_function>:
 8011b04:	f005 b83c 	b.w	8016b80 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>

08011b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011b08:	b508      	push	{r3, lr}
 8011b0a:	f001 f847 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b0e:	4b06      	ldr	r3, [pc, #24]	@ (8011b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011b10:	4906      	ldr	r1, [pc, #24]	@ (8011b2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x24>)
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	60c8      	str	r0, [r1, #12]
 8011b16:	b10a      	cbz	r2, 8011b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x14>
 8011b18:	4803      	ldr	r0, [pc, #12]	@ (8011b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011b1a:	bd08      	pop	{r3, pc}
 8011b1c:	4a04      	ldr	r2, [pc, #16]	@ (8011b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x28>)
 8011b1e:	4802      	ldr	r0, [pc, #8]	@ (8011b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011b20:	6812      	ldr	r2, [r2, #0]
 8011b22:	601a      	str	r2, [r3, #0]
 8011b24:	bd08      	pop	{r3, pc}
 8011b26:	bf00      	nop
 8011b28:	2400029c 	.word	0x2400029c
 8011b2c:	240001ac 	.word	0x240001ac
 8011b30:	24000d30 	.word	0x24000d30

08011b34 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	4604      	mov	r4, r0
 8011b38:	b190      	cbz	r0, 8011b60 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>
 8011b3a:	460e      	mov	r6, r1
 8011b3c:	f001 f83c 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b40:	4605      	mov	r5, r0
 8011b42:	f104 0008 	add.w	r0, r4, #8
 8011b46:	4435      	add	r5, r6
 8011b48:	4629      	mov	r1, r5
 8011b4a:	f000 f885 	bl	8011c58 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b4e:	4601      	mov	r1, r0
 8011b50:	f104 0018 	add.w	r0, r4, #24
 8011b54:	440d      	add	r5, r1
 8011b56:	4629      	mov	r1, r5
 8011b58:	f000 f90e 	bl	8011d78 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b5c:	1b80      	subs	r0, r0, r6
 8011b5e:	4428      	add	r0, r5
 8011b60:	bd70      	pop	{r4, r5, r6, pc}
 8011b62:	bf00      	nop

08011b64 <_AckermannControlCommand__cdr_deserialize>:
 8011b64:	b570      	push	{r4, r5, r6, lr}
 8011b66:	460c      	mov	r4, r1
 8011b68:	b1e1      	cbz	r1, 8011ba4 <_AckermannControlCommand__cdr_deserialize+0x40>
 8011b6a:	4605      	mov	r5, r0
 8011b6c:	f001 f888 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b70:	4603      	mov	r3, r0
 8011b72:	4621      	mov	r1, r4
 8011b74:	4628      	mov	r0, r5
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	68db      	ldr	r3, [r3, #12]
 8011b7a:	4798      	blx	r3
 8011b7c:	f000 f8f8 	bl	8011d70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b80:	4603      	mov	r3, r0
 8011b82:	f104 0108 	add.w	r1, r4, #8
 8011b86:	4628      	mov	r0, r5
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	68db      	ldr	r3, [r3, #12]
 8011b8c:	4798      	blx	r3
 8011b8e:	f000 f9a1 	bl	8011ed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b92:	4603      	mov	r3, r0
 8011b94:	f104 0118 	add.w	r1, r4, #24
 8011b98:	4628      	mov	r0, r5
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ba0:	68db      	ldr	r3, [r3, #12]
 8011ba2:	4718      	bx	r3
 8011ba4:	4608      	mov	r0, r1
 8011ba6:	bd70      	pop	{r4, r5, r6, pc}

08011ba8 <_AckermannControlCommand__cdr_serialize>:
 8011ba8:	b510      	push	{r4, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	9101      	str	r1, [sp, #4]
 8011bae:	b1e8      	cbz	r0, 8011bec <_AckermannControlCommand__cdr_serialize+0x44>
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	f001 f865 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	9901      	ldr	r1, [sp, #4]
 8011bba:	4620      	mov	r0, r4
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	689b      	ldr	r3, [r3, #8]
 8011bc0:	4798      	blx	r3
 8011bc2:	f000 f8d5 	bl	8011d70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	9901      	ldr	r1, [sp, #4]
 8011bca:	f104 0008 	add.w	r0, r4, #8
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	689b      	ldr	r3, [r3, #8]
 8011bd2:	4798      	blx	r3
 8011bd4:	f000 f97e 	bl	8011ed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	9901      	ldr	r1, [sp, #4]
 8011bdc:	f104 0018 	add.w	r0, r4, #24
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	b002      	add	sp, #8
 8011be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bea:	4718      	bx	r3
 8011bec:	b002      	add	sp, #8
 8011bee:	bd10      	pop	{r4, pc}

08011bf0 <_AckermannControlCommand__get_serialized_size>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	b180      	cbz	r0, 8011c18 <_AckermannControlCommand__get_serialized_size+0x28>
 8011bf6:	2100      	movs	r1, #0
 8011bf8:	f000 ffde 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011bfc:	4605      	mov	r5, r0
 8011bfe:	f104 0008 	add.w	r0, r4, #8
 8011c02:	4629      	mov	r1, r5
 8011c04:	f000 f828 	bl	8011c58 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011c08:	4601      	mov	r1, r0
 8011c0a:	f104 0018 	add.w	r0, r4, #24
 8011c0e:	440d      	add	r5, r1
 8011c10:	4629      	mov	r1, r5
 8011c12:	f000 f8b1 	bl	8011d78 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011c16:	4428      	add	r0, r5
 8011c18:	bd38      	pop	{r3, r4, r5, pc}
 8011c1a:	bf00      	nop

08011c1c <_AckermannControlCommand__max_serialized_size>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	2301      	movs	r3, #1
 8011c22:	2100      	movs	r1, #0
 8011c24:	f10d 0007 	add.w	r0, sp, #7
 8011c28:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c2c:	f001 f814 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c30:	4604      	mov	r4, r0
 8011c32:	f10d 0007 	add.w	r0, sp, #7
 8011c36:	4621      	mov	r1, r4
 8011c38:	f000 f884 	bl	8011d44 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011c3c:	4601      	mov	r1, r0
 8011c3e:	f10d 0007 	add.w	r0, sp, #7
 8011c42:	440c      	add	r4, r1
 8011c44:	4621      	mov	r1, r4
 8011c46:	f000 f929 	bl	8011e9c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011c4a:	4420      	add	r0, r4
 8011c4c:	b002      	add	sp, #8
 8011c4e:	bd10      	pop	{r4, pc}

08011c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011c50:	4800      	ldr	r0, [pc, #0]	@ (8011c54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x4>)
 8011c52:	4770      	bx	lr
 8011c54:	240002a8 	.word	0x240002a8

08011c58 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011c58:	b538      	push	{r3, r4, r5, lr}
 8011c5a:	b188      	cbz	r0, 8011c80 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>
 8011c5c:	460d      	mov	r5, r1
 8011c5e:	f000 ffab 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c62:	2104      	movs	r1, #4
 8011c64:	182c      	adds	r4, r5, r0
 8011c66:	f1c5 0504 	rsb	r5, r5, #4
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	f002 faa8 	bl	80141c0 <ucdr_alignment>
 8011c70:	2104      	movs	r1, #4
 8011c72:	4408      	add	r0, r1
 8011c74:	4404      	add	r4, r0
 8011c76:	4620      	mov	r0, r4
 8011c78:	f002 faa2 	bl	80141c0 <ucdr_alignment>
 8011c7c:	4428      	add	r0, r5
 8011c7e:	4420      	add	r0, r4
 8011c80:	bd38      	pop	{r3, r4, r5, pc}
 8011c82:	bf00      	nop

08011c84 <_AckermannLateralCommand__cdr_deserialize>:
 8011c84:	b538      	push	{r3, r4, r5, lr}
 8011c86:	460c      	mov	r4, r1
 8011c88:	b1a1      	cbz	r1, 8011cb4 <_AckermannLateralCommand__cdr_deserialize+0x30>
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	f000 fff8 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c90:	4603      	mov	r3, r0
 8011c92:	4621      	mov	r1, r4
 8011c94:	4628      	mov	r0, r5
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	4798      	blx	r3
 8011c9c:	f104 0108 	add.w	r1, r4, #8
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	f002 f80f 	bl	8013cc4 <ucdr_deserialize_float>
 8011ca6:	f104 010c 	add.w	r1, r4, #12
 8011caa:	4628      	mov	r0, r5
 8011cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cb0:	f002 b808 	b.w	8013cc4 <ucdr_deserialize_float>
 8011cb4:	4608      	mov	r0, r1
 8011cb6:	bd38      	pop	{r3, r4, r5, pc}

08011cb8 <_AckermannLateralCommand__cdr_serialize>:
 8011cb8:	b1b0      	cbz	r0, 8011ce8 <_AckermannLateralCommand__cdr_serialize+0x30>
 8011cba:	b538      	push	{r3, r4, r5, lr}
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	460d      	mov	r5, r1
 8011cc0:	f000 ffde 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	4620      	mov	r0, r4
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	689b      	ldr	r3, [r3, #8]
 8011cce:	4798      	blx	r3
 8011cd0:	ed94 0a02 	vldr	s0, [r4, #8]
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f001 ff5d 	bl	8013b94 <ucdr_serialize_float>
 8011cda:	ed94 0a03 	vldr	s0, [r4, #12]
 8011cde:	4628      	mov	r0, r5
 8011ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ce4:	f001 bf56 	b.w	8013b94 <ucdr_serialize_float>
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop

08011cec <_AckermannLateralCommand__get_serialized_size>:
 8011cec:	b180      	cbz	r0, 8011d10 <_AckermannLateralCommand__get_serialized_size+0x24>
 8011cee:	2100      	movs	r1, #0
 8011cf0:	b510      	push	{r4, lr}
 8011cf2:	f000 ff61 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	2104      	movs	r1, #4
 8011cfa:	f002 fa61 	bl	80141c0 <ucdr_alignment>
 8011cfe:	2104      	movs	r1, #4
 8011d00:	4420      	add	r0, r4
 8011d02:	1844      	adds	r4, r0, r1
 8011d04:	4620      	mov	r0, r4
 8011d06:	f002 fa5b 	bl	80141c0 <ucdr_alignment>
 8011d0a:	3004      	adds	r0, #4
 8011d0c:	4420      	add	r0, r4
 8011d0e:	bd10      	pop	{r4, pc}
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop

08011d14 <_AckermannLateralCommand__max_serialized_size>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	2301      	movs	r3, #1
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	f10d 0007 	add.w	r0, sp, #7
 8011d20:	f88d 3007 	strb.w	r3, [sp, #7]
 8011d24:	f000 ff98 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d28:	4604      	mov	r4, r0
 8011d2a:	2104      	movs	r1, #4
 8011d2c:	f002 fa48 	bl	80141c0 <ucdr_alignment>
 8011d30:	2104      	movs	r1, #4
 8011d32:	4420      	add	r0, r4
 8011d34:	1844      	adds	r4, r0, r1
 8011d36:	4620      	mov	r0, r4
 8011d38:	f002 fa42 	bl	80141c0 <ucdr_alignment>
 8011d3c:	3004      	adds	r0, #4
 8011d3e:	4420      	add	r0, r4
 8011d40:	b002      	add	sp, #8
 8011d42:	bd10      	pop	{r4, pc}

08011d44 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011d44:	2301      	movs	r3, #1
 8011d46:	b570      	push	{r4, r5, r6, lr}
 8011d48:	460c      	mov	r4, r1
 8011d4a:	7003      	strb	r3, [r0, #0]
 8011d4c:	f000 ff84 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d50:	2104      	movs	r1, #4
 8011d52:	1826      	adds	r6, r4, r0
 8011d54:	f1c4 0404 	rsb	r4, r4, #4
 8011d58:	4630      	mov	r0, r6
 8011d5a:	f002 fa31 	bl	80141c0 <ucdr_alignment>
 8011d5e:	2104      	movs	r1, #4
 8011d60:	1845      	adds	r5, r0, r1
 8011d62:	4435      	add	r5, r6
 8011d64:	4628      	mov	r0, r5
 8011d66:	f002 fa2b 	bl	80141c0 <ucdr_alignment>
 8011d6a:	4420      	add	r0, r4
 8011d6c:	4428      	add	r0, r5
 8011d6e:	bd70      	pop	{r4, r5, r6, pc}

08011d70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011d70:	4800      	ldr	r0, [pc, #0]	@ (8011d74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x4>)
 8011d72:	4770      	bx	lr
 8011d74:	240002d0 	.word	0x240002d0

08011d78 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011d78:	b1c8      	cbz	r0, 8011dae <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand+0x36>
 8011d7a:	b570      	push	{r4, r5, r6, lr}
 8011d7c:	460d      	mov	r5, r1
 8011d7e:	f000 ff1b 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d82:	2104      	movs	r1, #4
 8011d84:	182e      	adds	r6, r5, r0
 8011d86:	f1c5 0504 	rsb	r5, r5, #4
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	f002 fa18 	bl	80141c0 <ucdr_alignment>
 8011d90:	2104      	movs	r1, #4
 8011d92:	1844      	adds	r4, r0, r1
 8011d94:	4434      	add	r4, r6
 8011d96:	4620      	mov	r0, r4
 8011d98:	f002 fa12 	bl	80141c0 <ucdr_alignment>
 8011d9c:	2104      	movs	r1, #4
 8011d9e:	4408      	add	r0, r1
 8011da0:	4404      	add	r4, r0
 8011da2:	4620      	mov	r0, r4
 8011da4:	f002 fa0c 	bl	80141c0 <ucdr_alignment>
 8011da8:	4428      	add	r0, r5
 8011daa:	4420      	add	r0, r4
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
 8011dae:	4770      	bx	lr

08011db0 <_LongitudinalCommand__cdr_deserialize>:
 8011db0:	b538      	push	{r3, r4, r5, lr}
 8011db2:	460c      	mov	r4, r1
 8011db4:	b1c9      	cbz	r1, 8011dea <_LongitudinalCommand__cdr_deserialize+0x3a>
 8011db6:	4605      	mov	r5, r0
 8011db8:	f000 ff62 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	4621      	mov	r1, r4
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	4798      	blx	r3
 8011dc8:	f104 0108 	add.w	r1, r4, #8
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f001 ff79 	bl	8013cc4 <ucdr_deserialize_float>
 8011dd2:	f104 010c 	add.w	r1, r4, #12
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	f001 ff74 	bl	8013cc4 <ucdr_deserialize_float>
 8011ddc:	f104 0110 	add.w	r1, r4, #16
 8011de0:	4628      	mov	r0, r5
 8011de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011de6:	f001 bf6d 	b.w	8013cc4 <ucdr_deserialize_float>
 8011dea:	4608      	mov	r0, r1
 8011dec:	bd38      	pop	{r3, r4, r5, pc}
 8011dee:	bf00      	nop

08011df0 <_LongitudinalCommand__cdr_serialize>:
 8011df0:	b1d8      	cbz	r0, 8011e2a <_LongitudinalCommand__cdr_serialize+0x3a>
 8011df2:	b538      	push	{r3, r4, r5, lr}
 8011df4:	4604      	mov	r4, r0
 8011df6:	460d      	mov	r5, r1
 8011df8:	f000 ff42 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	4629      	mov	r1, r5
 8011e00:	4620      	mov	r0, r4
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	689b      	ldr	r3, [r3, #8]
 8011e06:	4798      	blx	r3
 8011e08:	ed94 0a02 	vldr	s0, [r4, #8]
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f001 fec1 	bl	8013b94 <ucdr_serialize_float>
 8011e12:	ed94 0a03 	vldr	s0, [r4, #12]
 8011e16:	4628      	mov	r0, r5
 8011e18:	f001 febc 	bl	8013b94 <ucdr_serialize_float>
 8011e1c:	ed94 0a04 	vldr	s0, [r4, #16]
 8011e20:	4628      	mov	r0, r5
 8011e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e26:	f001 beb5 	b.w	8013b94 <ucdr_serialize_float>
 8011e2a:	4770      	bx	lr

08011e2c <_LongitudinalCommand__get_serialized_size>:
 8011e2c:	b1b0      	cbz	r0, 8011e5c <_LongitudinalCommand__get_serialized_size+0x30>
 8011e2e:	2100      	movs	r1, #0
 8011e30:	b510      	push	{r4, lr}
 8011e32:	f000 fec1 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011e36:	4604      	mov	r4, r0
 8011e38:	2104      	movs	r1, #4
 8011e3a:	f002 f9c1 	bl	80141c0 <ucdr_alignment>
 8011e3e:	2104      	movs	r1, #4
 8011e40:	4420      	add	r0, r4
 8011e42:	1844      	adds	r4, r0, r1
 8011e44:	4620      	mov	r0, r4
 8011e46:	f002 f9bb 	bl	80141c0 <ucdr_alignment>
 8011e4a:	2104      	movs	r1, #4
 8011e4c:	4408      	add	r0, r1
 8011e4e:	4404      	add	r4, r0
 8011e50:	4620      	mov	r0, r4
 8011e52:	f002 f9b5 	bl	80141c0 <ucdr_alignment>
 8011e56:	3004      	adds	r0, #4
 8011e58:	4420      	add	r0, r4
 8011e5a:	bd10      	pop	{r4, pc}
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop

08011e60 <_LongitudinalCommand__max_serialized_size>:
 8011e60:	b510      	push	{r4, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	2301      	movs	r3, #1
 8011e66:	2100      	movs	r1, #0
 8011e68:	f10d 0007 	add.w	r0, sp, #7
 8011e6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011e70:	f000 fef2 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8011e74:	4604      	mov	r4, r0
 8011e76:	2104      	movs	r1, #4
 8011e78:	f002 f9a2 	bl	80141c0 <ucdr_alignment>
 8011e7c:	2104      	movs	r1, #4
 8011e7e:	4420      	add	r0, r4
 8011e80:	1844      	adds	r4, r0, r1
 8011e82:	4620      	mov	r0, r4
 8011e84:	f002 f99c 	bl	80141c0 <ucdr_alignment>
 8011e88:	2104      	movs	r1, #4
 8011e8a:	4408      	add	r0, r1
 8011e8c:	4404      	add	r4, r0
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f002 f996 	bl	80141c0 <ucdr_alignment>
 8011e94:	3004      	adds	r0, #4
 8011e96:	4420      	add	r0, r4
 8011e98:	b002      	add	sp, #8
 8011e9a:	bd10      	pop	{r4, pc}

08011e9c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	b570      	push	{r4, r5, r6, lr}
 8011ea0:	460c      	mov	r4, r1
 8011ea2:	7003      	strb	r3, [r0, #0]
 8011ea4:	f000 fed8 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8011ea8:	2104      	movs	r1, #4
 8011eaa:	1826      	adds	r6, r4, r0
 8011eac:	f1c4 0404 	rsb	r4, r4, #4
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	f002 f985 	bl	80141c0 <ucdr_alignment>
 8011eb6:	2104      	movs	r1, #4
 8011eb8:	1845      	adds	r5, r0, r1
 8011eba:	4435      	add	r5, r6
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	f002 f97f 	bl	80141c0 <ucdr_alignment>
 8011ec2:	2104      	movs	r1, #4
 8011ec4:	4408      	add	r0, r1
 8011ec6:	4405      	add	r5, r0
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f002 f979 	bl	80141c0 <ucdr_alignment>
 8011ece:	4420      	add	r0, r4
 8011ed0:	4428      	add	r0, r5
 8011ed2:	bd70      	pop	{r4, r5, r6, pc}

08011ed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011ed4:	4800      	ldr	r0, [pc, #0]	@ (8011ed8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x4>)
 8011ed6:	4770      	bx	lr
 8011ed8:	240002f8 	.word	0x240002f8

08011edc <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8011edc:	4b04      	ldr	r3, [pc, #16]	@ (8011ef0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	b10a      	cbz	r2, 8011ee6 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xa>
 8011ee2:	4803      	ldr	r0, [pc, #12]	@ (8011ef0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011ee4:	4770      	bx	lr
 8011ee6:	4a03      	ldr	r2, [pc, #12]	@ (8011ef4 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011ee8:	4801      	ldr	r0, [pc, #4]	@ (8011ef0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011eea:	6812      	ldr	r2, [r2, #0]
 8011eec:	601a      	str	r2, [r3, #0]
 8011eee:	4770      	bx	lr
 8011ef0:	24000328 	.word	0x24000328
 8011ef4:	24000d2c 	.word	0x24000d2c

08011ef8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011ef8:	4b04      	ldr	r3, [pc, #16]	@ (8011f0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8011efa:	4805      	ldr	r0, [pc, #20]	@ (8011f10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	4905      	ldr	r1, [pc, #20]	@ (8011f14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8011f00:	4a05      	ldr	r2, [pc, #20]	@ (8011f18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011f02:	6003      	str	r3, [r0, #0]
 8011f04:	600b      	str	r3, [r1, #0]
 8011f06:	6013      	str	r3, [r2, #0]
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop
 8011f0c:	24000d2c 	.word	0x24000d2c
 8011f10:	24000344 	.word	0x24000344
 8011f14:	24000350 	.word	0x24000350
 8011f18:	24000328 	.word	0x24000328

08011f1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011f1c:	4b04      	ldr	r3, [pc, #16]	@ (8011f30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	b10a      	cbz	r2, 8011f26 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xa>
 8011f22:	4803      	ldr	r0, [pc, #12]	@ (8011f30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011f24:	4770      	bx	lr
 8011f26:	4a03      	ldr	r2, [pc, #12]	@ (8011f34 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x18>)
 8011f28:	4801      	ldr	r0, [pc, #4]	@ (8011f30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011f2a:	6812      	ldr	r2, [r2, #0]
 8011f2c:	601a      	str	r2, [r3, #0]
 8011f2e:	4770      	bx	lr
 8011f30:	24000364 	.word	0x24000364
 8011f34:	24000d2c 	.word	0x24000d2c

08011f38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011f38:	4a02      	ldr	r2, [pc, #8]	@ (8011f44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xc>)
 8011f3a:	4b03      	ldr	r3, [pc, #12]	@ (8011f48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x10>)
 8011f3c:	6812      	ldr	r2, [r2, #0]
 8011f3e:	601a      	str	r2, [r3, #0]
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop
 8011f44:	24000d2c 	.word	0x24000d2c
 8011f48:	24000364 	.word	0x24000364

08011f4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011f4c:	4b04      	ldr	r3, [pc, #16]	@ (8011f60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	b10a      	cbz	r2, 8011f56 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xa>
 8011f52:	4803      	ldr	r0, [pc, #12]	@ (8011f60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f54:	4770      	bx	lr
 8011f56:	4a03      	ldr	r2, [pc, #12]	@ (8011f64 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x18>)
 8011f58:	4801      	ldr	r0, [pc, #4]	@ (8011f60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f5a:	6812      	ldr	r2, [r2, #0]
 8011f5c:	601a      	str	r2, [r3, #0]
 8011f5e:	4770      	bx	lr
 8011f60:	24000378 	.word	0x24000378
 8011f64:	24000d2c 	.word	0x24000d2c

08011f68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011f68:	4a02      	ldr	r2, [pc, #8]	@ (8011f74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xc>)
 8011f6a:	4b03      	ldr	r3, [pc, #12]	@ (8011f78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x10>)
 8011f6c:	6812      	ldr	r2, [r2, #0]
 8011f6e:	601a      	str	r2, [r3, #0]
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	24000d2c 	.word	0x24000d2c
 8011f78:	24000378 	.word	0x24000378

08011f7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011f7c:	4b04      	ldr	r3, [pc, #16]	@ (8011f90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	b10a      	cbz	r2, 8011f86 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xa>
 8011f82:	4803      	ldr	r0, [pc, #12]	@ (8011f90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f84:	4770      	bx	lr
 8011f86:	4a03      	ldr	r2, [pc, #12]	@ (8011f94 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x18>)
 8011f88:	4801      	ldr	r0, [pc, #4]	@ (8011f90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f8a:	6812      	ldr	r2, [r2, #0]
 8011f8c:	601a      	str	r2, [r3, #0]
 8011f8e:	4770      	bx	lr
 8011f90:	2400038c 	.word	0x2400038c
 8011f94:	24000d2c 	.word	0x24000d2c

08011f98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011f98:	4a02      	ldr	r2, [pc, #8]	@ (8011fa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xc>)
 8011f9a:	4b03      	ldr	r3, [pc, #12]	@ (8011fa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x10>)
 8011f9c:	6812      	ldr	r2, [r2, #0]
 8011f9e:	601a      	str	r2, [r3, #0]
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	24000d2c 	.word	0x24000d2c
 8011fa8:	2400038c 	.word	0x2400038c

08011fac <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011fac:	4b04      	ldr	r3, [pc, #16]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	b10a      	cbz	r2, 8011fb6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xa>
 8011fb2:	4803      	ldr	r0, [pc, #12]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011fb4:	4770      	bx	lr
 8011fb6:	4a03      	ldr	r2, [pc, #12]	@ (8011fc4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8011fb8:	4801      	ldr	r0, [pc, #4]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011fba:	6812      	ldr	r2, [r2, #0]
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	4770      	bx	lr
 8011fc0:	240003a0 	.word	0x240003a0
 8011fc4:	24000d2c 	.word	0x24000d2c

08011fc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011fc8:	4a02      	ldr	r2, [pc, #8]	@ (8011fd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8011fca:	4b03      	ldr	r3, [pc, #12]	@ (8011fd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8011fcc:	6812      	ldr	r2, [r2, #0]
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	24000d2c 	.word	0x24000d2c
 8011fd8:	240003a0 	.word	0x240003a0

08011fdc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011fdc:	4b04      	ldr	r3, [pc, #16]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	b10a      	cbz	r2, 8011fe6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xa>
 8011fe2:	4803      	ldr	r0, [pc, #12]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fe4:	4770      	bx	lr
 8011fe6:	4a03      	ldr	r2, [pc, #12]	@ (8011ff4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8011fe8:	4801      	ldr	r0, [pc, #4]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fea:	6812      	ldr	r2, [r2, #0]
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	4770      	bx	lr
 8011ff0:	240003b4 	.word	0x240003b4
 8011ff4:	24000d2c 	.word	0x24000d2c

08011ff8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011ff8:	4a02      	ldr	r2, [pc, #8]	@ (8012004 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8011ffa:	4b03      	ldr	r3, [pc, #12]	@ (8012008 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8011ffc:	6812      	ldr	r2, [r2, #0]
 8011ffe:	601a      	str	r2, [r3, #0]
 8012000:	4770      	bx	lr
 8012002:	bf00      	nop
 8012004:	24000d2c 	.word	0x24000d2c
 8012008:	240003b4 	.word	0x240003b4

0801200c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 801200c:	4b04      	ldr	r3, [pc, #16]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	b10a      	cbz	r2, 8012016 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xa>
 8012012:	4803      	ldr	r0, [pc, #12]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8012014:	4770      	bx	lr
 8012016:	4a03      	ldr	r2, [pc, #12]	@ (8012024 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x18>)
 8012018:	4801      	ldr	r0, [pc, #4]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 801201a:	6812      	ldr	r2, [r2, #0]
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	4770      	bx	lr
 8012020:	240003c8 	.word	0x240003c8
 8012024:	24000d2c 	.word	0x24000d2c

08012028 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012028:	4a02      	ldr	r2, [pc, #8]	@ (8012034 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xc>)
 801202a:	4b03      	ldr	r3, [pc, #12]	@ (8012038 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x10>)
 801202c:	6812      	ldr	r2, [r2, #0]
 801202e:	601a      	str	r2, [r3, #0]
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop
 8012034:	24000d2c 	.word	0x24000d2c
 8012038:	240003c8 	.word	0x240003c8

0801203c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 801203c:	4b04      	ldr	r3, [pc, #16]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	b10a      	cbz	r2, 8012046 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 8012042:	4803      	ldr	r0, [pc, #12]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8012044:	4770      	bx	lr
 8012046:	4a03      	ldr	r2, [pc, #12]	@ (8012054 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8012048:	4801      	ldr	r0, [pc, #4]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 801204a:	6812      	ldr	r2, [r2, #0]
 801204c:	601a      	str	r2, [r3, #0]
 801204e:	4770      	bx	lr
 8012050:	240003dc 	.word	0x240003dc
 8012054:	24000d2c 	.word	0x24000d2c

08012058 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012058:	4a02      	ldr	r2, [pc, #8]	@ (8012064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 801205a:	4b03      	ldr	r3, [pc, #12]	@ (8012068 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 801205c:	6812      	ldr	r2, [r2, #0]
 801205e:	601a      	str	r2, [r3, #0]
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	24000d2c 	.word	0x24000d2c
 8012068:	240003dc 	.word	0x240003dc

0801206c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801206c:	4b04      	ldr	r3, [pc, #16]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	b10a      	cbz	r2, 8012076 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 8012072:	4803      	ldr	r0, [pc, #12]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012074:	4770      	bx	lr
 8012076:	4a03      	ldr	r2, [pc, #12]	@ (8012084 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8012078:	4801      	ldr	r0, [pc, #4]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801207a:	6812      	ldr	r2, [r2, #0]
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	4770      	bx	lr
 8012080:	240003f0 	.word	0x240003f0
 8012084:	24000d2c 	.word	0x24000d2c

08012088 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012088:	4a02      	ldr	r2, [pc, #8]	@ (8012094 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 801208a:	4b03      	ldr	r3, [pc, #12]	@ (8012098 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 801208c:	6812      	ldr	r2, [r2, #0]
 801208e:	601a      	str	r2, [r3, #0]
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	24000d2c 	.word	0x24000d2c
 8012098:	240003f0 	.word	0x240003f0

0801209c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 801209c:	4b04      	ldr	r3, [pc, #16]	@ (80120b0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	b10a      	cbz	r2, 80120a6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xa>
 80120a2:	4803      	ldr	r0, [pc, #12]	@ (80120b0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 80120a4:	4770      	bx	lr
 80120a6:	4a03      	ldr	r2, [pc, #12]	@ (80120b4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x18>)
 80120a8:	4801      	ldr	r0, [pc, #4]	@ (80120b0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 80120aa:	6812      	ldr	r2, [r2, #0]
 80120ac:	601a      	str	r2, [r3, #0]
 80120ae:	4770      	bx	lr
 80120b0:	24000404 	.word	0x24000404
 80120b4:	24000d2c 	.word	0x24000d2c

080120b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 80120b8:	4a02      	ldr	r2, [pc, #8]	@ (80120c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xc>)
 80120ba:	4b03      	ldr	r3, [pc, #12]	@ (80120c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x10>)
 80120bc:	6812      	ldr	r2, [r2, #0]
 80120be:	601a      	str	r2, [r3, #0]
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	24000d2c 	.word	0x24000d2c
 80120c8:	24000404 	.word	0x24000404

080120cc <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 80120cc:	f004 bd5c 	b.w	8016b88 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>

080120d0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80120d0:	f004 bd6c 	b.w	8016bac <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>

080120d4 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 80120d4:	f004 bd6e 	b.w	8016bb4 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>

080120d8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 80120d8:	f004 bd70 	b.w	8016bbc <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>

080120dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 80120dc:	b508      	push	{r3, lr}
 80120de:	f000 fd5d 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120e2:	4b06      	ldr	r3, [pc, #24]	@ (80120fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120e4:	4906      	ldr	r1, [pc, #24]	@ (8012100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 80120e6:	681a      	ldr	r2, [r3, #0]
 80120e8:	60c8      	str	r0, [r1, #12]
 80120ea:	b10a      	cbz	r2, 80120f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 80120ec:	4803      	ldr	r0, [pc, #12]	@ (80120fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120ee:	bd08      	pop	{r3, pc}
 80120f0:	4a04      	ldr	r2, [pc, #16]	@ (8012104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 80120f2:	4802      	ldr	r0, [pc, #8]	@ (80120fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120f4:	6812      	ldr	r2, [r2, #0]
 80120f6:	601a      	str	r2, [r3, #0]
 80120f8:	bd08      	pop	{r3, pc}
 80120fa:	bf00      	nop
 80120fc:	24000488 	.word	0x24000488
 8012100:	24000410 	.word	0x24000410
 8012104:	24000d30 	.word	0x24000d30

08012108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012108:	4b04      	ldr	r3, [pc, #16]	@ (801211c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	b10a      	cbz	r2, 8012112 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 801210e:	4803      	ldr	r0, [pc, #12]	@ (801211c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8012110:	4770      	bx	lr
 8012112:	4a03      	ldr	r2, [pc, #12]	@ (8012120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8012114:	4801      	ldr	r0, [pc, #4]	@ (801211c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8012116:	6812      	ldr	r2, [r2, #0]
 8012118:	601a      	str	r2, [r3, #0]
 801211a:	4770      	bx	lr
 801211c:	240004d0 	.word	0x240004d0
 8012120:	24000d30 	.word	0x24000d30

08012124 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8012124:	4b16      	ldr	r3, [pc, #88]	@ (8012180 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	b510      	push	{r4, lr}
 801212a:	b132      	cbz	r2, 801213a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x16>
 801212c:	685c      	ldr	r4, [r3, #4]
 801212e:	68a3      	ldr	r3, [r4, #8]
 8012130:	b153      	cbz	r3, 8012148 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x24>
 8012132:	68e3      	ldr	r3, [r4, #12]
 8012134:	b1a3      	cbz	r3, 8012160 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8012136:	4812      	ldr	r0, [pc, #72]	@ (8012180 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012138:	bd10      	pop	{r4, pc}
 801213a:	4a12      	ldr	r2, [pc, #72]	@ (8012184 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 801213c:	685c      	ldr	r4, [r3, #4]
 801213e:	6812      	ldr	r2, [r2, #0]
 8012140:	601a      	str	r2, [r3, #0]
 8012142:	68a3      	ldr	r3, [r4, #8]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d1f4      	bne.n	8012132 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xe>
 8012148:	f000 fd28 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801214c:	4b0e      	ldr	r3, [pc, #56]	@ (8012188 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x64>)
 801214e:	490f      	ldr	r1, [pc, #60]	@ (801218c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	60c8      	str	r0, [r1, #12]
 8012154:	b17a      	cbz	r2, 8012176 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x52>
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	60a3      	str	r3, [r4, #8]
 801215a:	68e3      	ldr	r3, [r4, #12]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1ea      	bne.n	8012136 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x12>
 8012160:	4b0b      	ldr	r3, [pc, #44]	@ (8012190 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	b11a      	cbz	r2, 801216e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	4805      	ldr	r0, [pc, #20]	@ (8012180 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 801216a:	60e3      	str	r3, [r4, #12]
 801216c:	bd10      	pop	{r4, pc}
 801216e:	4a05      	ldr	r2, [pc, #20]	@ (8012184 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012170:	6812      	ldr	r2, [r2, #0]
 8012172:	601a      	str	r2, [r3, #0]
 8012174:	e7f7      	b.n	8012166 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x42>
 8012176:	4a03      	ldr	r2, [pc, #12]	@ (8012184 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012178:	6812      	ldr	r2, [r2, #0]
 801217a:	601a      	str	r2, [r3, #0]
 801217c:	e7eb      	b.n	8012156 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x32>
 801217e:	bf00      	nop
 8012180:	240004ec 	.word	0x240004ec
 8012184:	24000d30 	.word	0x24000d30
 8012188:	24000488 	.word	0x24000488
 801218c:	24000410 	.word	0x24000410
 8012190:	240004d0 	.word	0x240004d0

08012194 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8012194:	f004 bd14 	b.w	8016bc0 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>

08012198 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8012198:	f004 bd26 	b.w	8016be8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>

0801219c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 801219c:	b508      	push	{r3, lr}
 801219e:	f000 fcfd 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121a2:	4b06      	ldr	r3, [pc, #24]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 80121a4:	4906      	ldr	r1, [pc, #24]	@ (80121c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x24>)
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	60c8      	str	r0, [r1, #12]
 80121aa:	b10a      	cbz	r2, 80121b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>
 80121ac:	4803      	ldr	r0, [pc, #12]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 80121ae:	bd08      	pop	{r3, pc}
 80121b0:	4a04      	ldr	r2, [pc, #16]	@ (80121c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x28>)
 80121b2:	4802      	ldr	r0, [pc, #8]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 80121b4:	6812      	ldr	r2, [r2, #0]
 80121b6:	601a      	str	r2, [r3, #0]
 80121b8:	bd08      	pop	{r3, pc}
 80121ba:	bf00      	nop
 80121bc:	24000570 	.word	0x24000570
 80121c0:	240004f8 	.word	0x240004f8
 80121c4:	24000d30 	.word	0x24000d30

080121c8 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 80121c8:	f004 bd12 	b.w	8016bf0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>

080121cc <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 80121cc:	f004 bd24 	b.w	8016c18 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>

080121d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 80121d0:	b508      	push	{r3, lr}
 80121d2:	f000 fce3 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121d6:	4b06      	ldr	r3, [pc, #24]	@ (80121f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80121d8:	4906      	ldr	r1, [pc, #24]	@ (80121f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x24>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	60c8      	str	r0, [r1, #12]
 80121de:	b10a      	cbz	r2, 80121e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>
 80121e0:	4803      	ldr	r0, [pc, #12]	@ (80121f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80121e2:	bd08      	pop	{r3, pc}
 80121e4:	4a04      	ldr	r2, [pc, #16]	@ (80121f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x28>)
 80121e6:	4802      	ldr	r0, [pc, #8]	@ (80121f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80121e8:	6812      	ldr	r2, [r2, #0]
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	bd08      	pop	{r3, pc}
 80121ee:	bf00      	nop
 80121f0:	240005f4 	.word	0x240005f4
 80121f4:	2400057c 	.word	0x2400057c
 80121f8:	24000d30 	.word	0x24000d30

080121fc <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 80121fc:	f004 bd10 	b.w	8016c20 <autoware_auto_vehicle_msgs__msg__GearReport__init>

08012200 <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8012200:	f004 bd22 	b.w	8016c48 <autoware_auto_vehicle_msgs__msg__GearReport__fini>

08012204 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8012204:	b508      	push	{r3, lr}
 8012206:	f000 fcc9 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801220a:	4b06      	ldr	r3, [pc, #24]	@ (8012224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 801220c:	4906      	ldr	r1, [pc, #24]	@ (8012228 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x24>)
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	60c8      	str	r0, [r1, #12]
 8012212:	b10a      	cbz	r2, 8012218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>
 8012214:	4803      	ldr	r0, [pc, #12]	@ (8012224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 8012216:	bd08      	pop	{r3, pc}
 8012218:	4a04      	ldr	r2, [pc, #16]	@ (801222c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x28>)
 801221a:	4802      	ldr	r0, [pc, #8]	@ (8012224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 801221c:	6812      	ldr	r2, [r2, #0]
 801221e:	601a      	str	r2, [r3, #0]
 8012220:	bd08      	pop	{r3, pc}
 8012222:	bf00      	nop
 8012224:	24000678 	.word	0x24000678
 8012228:	24000600 	.word	0x24000600
 801222c:	24000d30 	.word	0x24000d30

08012230 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8012230:	f004 bd0e 	b.w	8016c50 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>

08012234 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8012234:	f004 bd20 	b.w	8016c78 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>

08012238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8012238:	b508      	push	{r3, lr}
 801223a:	f000 fcaf 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801223e:	4b06      	ldr	r3, [pc, #24]	@ (8012258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012240:	4906      	ldr	r1, [pc, #24]	@ (801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	60c8      	str	r0, [r1, #12]
 8012246:	b10a      	cbz	r2, 801224c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8012248:	4803      	ldr	r0, [pc, #12]	@ (8012258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801224a:	bd08      	pop	{r3, pc}
 801224c:	4a04      	ldr	r2, [pc, #16]	@ (8012260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 801224e:	4802      	ldr	r0, [pc, #8]	@ (8012258 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012250:	6812      	ldr	r2, [r2, #0]
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	bd08      	pop	{r3, pc}
 8012256:	bf00      	nop
 8012258:	240006fc 	.word	0x240006fc
 801225c:	24000684 	.word	0x24000684
 8012260:	24000d30 	.word	0x24000d30

08012264 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8012264:	f004 bd0c 	b.w	8016c80 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>

08012268 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8012268:	f004 bd1e 	b.w	8016ca8 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>

0801226c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 801226c:	b508      	push	{r3, lr}
 801226e:	f000 fc95 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012272:	4b06      	ldr	r3, [pc, #24]	@ (801228c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012274:	4906      	ldr	r1, [pc, #24]	@ (8012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	60c8      	str	r0, [r1, #12]
 801227a:	b10a      	cbz	r2, 8012280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>
 801227c:	4803      	ldr	r0, [pc, #12]	@ (801228c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801227e:	bd08      	pop	{r3, pc}
 8012280:	4a04      	ldr	r2, [pc, #16]	@ (8012294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8012282:	4802      	ldr	r0, [pc, #8]	@ (801228c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012284:	6812      	ldr	r2, [r2, #0]
 8012286:	601a      	str	r2, [r3, #0]
 8012288:	bd08      	pop	{r3, pc}
 801228a:	bf00      	nop
 801228c:	24000780 	.word	0x24000780
 8012290:	24000708 	.word	0x24000708
 8012294:	24000d30 	.word	0x24000d30

08012298 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8012298:	f004 bd0a 	b.w	8016cb0 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>

0801229c <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 801229c:	f004 bd1c 	b.w	8016cd8 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>

080122a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 80122a0:	b508      	push	{r3, lr}
 80122a2:	f000 fc7b 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122a6:	4b06      	ldr	r3, [pc, #24]	@ (80122c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 80122a8:	4906      	ldr	r1, [pc, #24]	@ (80122c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x24>)
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	60c8      	str	r0, [r1, #12]
 80122ae:	b10a      	cbz	r2, 80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>
 80122b0:	4803      	ldr	r0, [pc, #12]	@ (80122c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 80122b2:	bd08      	pop	{r3, pc}
 80122b4:	4a04      	ldr	r2, [pc, #16]	@ (80122c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x28>)
 80122b6:	4802      	ldr	r0, [pc, #8]	@ (80122c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 80122b8:	6812      	ldr	r2, [r2, #0]
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	bd08      	pop	{r3, pc}
 80122be:	bf00      	nop
 80122c0:	24000804 	.word	0x24000804
 80122c4:	2400078c 	.word	0x2400078c
 80122c8:	24000d30 	.word	0x24000d30

080122cc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 80122cc:	f004 bd08 	b.w	8016ce0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>

080122d0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 80122d0:	f004 bd1a 	b.w	8016d08 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

080122d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80122d4:	b508      	push	{r3, lr}
 80122d6:	f000 fc61 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122da:	4b06      	ldr	r3, [pc, #24]	@ (80122f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122dc:	4906      	ldr	r1, [pc, #24]	@ (80122f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	60c8      	str	r0, [r1, #12]
 80122e2:	b10a      	cbz	r2, 80122e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 80122e4:	4803      	ldr	r0, [pc, #12]	@ (80122f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122e6:	bd08      	pop	{r3, pc}
 80122e8:	4a04      	ldr	r2, [pc, #16]	@ (80122fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 80122ea:	4802      	ldr	r0, [pc, #8]	@ (80122f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122ec:	6812      	ldr	r2, [r2, #0]
 80122ee:	601a      	str	r2, [r3, #0]
 80122f0:	bd08      	pop	{r3, pc}
 80122f2:	bf00      	nop
 80122f4:	24000888 	.word	0x24000888
 80122f8:	24000810 	.word	0x24000810
 80122fc:	24000d30 	.word	0x24000d30

08012300 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8012300:	f004 bd06 	b.w	8016d10 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>

08012304 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8012304:	f004 bd18 	b.w	8016d38 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08012308 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012308:	b508      	push	{r3, lr}
 801230a:	f000 fc47 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801230e:	4b06      	ldr	r3, [pc, #24]	@ (8012328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8012310:	4906      	ldr	r1, [pc, #24]	@ (801232c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	60c8      	str	r0, [r1, #12]
 8012316:	b10a      	cbz	r2, 801231c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8012318:	4803      	ldr	r0, [pc, #12]	@ (8012328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 801231a:	bd08      	pop	{r3, pc}
 801231c:	4a04      	ldr	r2, [pc, #16]	@ (8012330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 801231e:	4802      	ldr	r0, [pc, #8]	@ (8012328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8012320:	6812      	ldr	r2, [r2, #0]
 8012322:	601a      	str	r2, [r3, #0]
 8012324:	bd08      	pop	{r3, pc}
 8012326:	bf00      	nop
 8012328:	2400090c 	.word	0x2400090c
 801232c:	24000894 	.word	0x24000894
 8012330:	24000d30 	.word	0x24000d30

08012334 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8012334:	f004 bd04 	b.w	8016d40 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>

08012338 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8012338:	f004 bd18 	b.w	8016d6c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>

0801233c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 801233c:	b508      	push	{r3, lr}
 801233e:	f004 f897 	bl	8016470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012342:	4b06      	ldr	r3, [pc, #24]	@ (801235c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8012344:	4906      	ldr	r1, [pc, #24]	@ (8012360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x24>)
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	60c8      	str	r0, [r1, #12]
 801234a:	b10a      	cbz	r2, 8012350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>
 801234c:	4803      	ldr	r0, [pc, #12]	@ (801235c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 801234e:	bd08      	pop	{r3, pc}
 8012350:	4a04      	ldr	r2, [pc, #16]	@ (8012364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x28>)
 8012352:	4802      	ldr	r0, [pc, #8]	@ (801235c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8012354:	6812      	ldr	r2, [r2, #0]
 8012356:	601a      	str	r2, [r3, #0]
 8012358:	bd08      	pop	{r3, pc}
 801235a:	bf00      	nop
 801235c:	24000a08 	.word	0x24000a08
 8012360:	24000918 	.word	0x24000918
 8012364:	24000d30 	.word	0x24000d30

08012368 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012368:	4800      	ldr	r0, [pc, #0]	@ (801236c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 801236a:	4770      	bx	lr
 801236c:	24000a30 	.word	0x24000a30

08012370 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012370:	4800      	ldr	r0, [pc, #0]	@ (8012374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8012372:	4770      	bx	lr
 8012374:	24000a3c 	.word	0x24000a3c

08012378 <_ControlModeCommand_Response__max_serialized_size>:
 8012378:	2101      	movs	r1, #1
 801237a:	2000      	movs	r0, #0
 801237c:	b508      	push	{r3, lr}
 801237e:	f001 ff1f 	bl	80141c0 <ucdr_alignment>
 8012382:	3001      	adds	r0, #1
 8012384:	bd08      	pop	{r3, pc}
 8012386:	bf00      	nop

08012388 <_ControlModeCommand_Response__cdr_deserialize>:
 8012388:	b109      	cbz	r1, 801238e <_ControlModeCommand_Response__cdr_deserialize+0x6>
 801238a:	f000 bc93 	b.w	8012cb4 <ucdr_deserialize_bool>
 801238e:	4608      	mov	r0, r1
 8012390:	4770      	bx	lr
 8012392:	bf00      	nop

08012394 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012394:	b538      	push	{r3, r4, r5, lr}
 8012396:	b158      	cbz	r0, 80123b0 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8012398:	460d      	mov	r5, r1
 801239a:	f000 fc0d 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801239e:	2101      	movs	r1, #1
 80123a0:	182c      	adds	r4, r5, r0
 80123a2:	f1c5 0501 	rsb	r5, r5, #1
 80123a6:	4620      	mov	r0, r4
 80123a8:	f001 ff0a 	bl	80141c0 <ucdr_alignment>
 80123ac:	4428      	add	r0, r5
 80123ae:	4420      	add	r0, r4
 80123b0:	bd38      	pop	{r3, r4, r5, pc}
 80123b2:	bf00      	nop

080123b4 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 80123b4:	b138      	cbz	r0, 80123c6 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 80123b6:	b508      	push	{r3, lr}
 80123b8:	460b      	mov	r3, r1
 80123ba:	2101      	movs	r1, #1
 80123bc:	4618      	mov	r0, r3
 80123be:	f001 feff 	bl	80141c0 <ucdr_alignment>
 80123c2:	3001      	adds	r0, #1
 80123c4:	bd08      	pop	{r3, pc}
 80123c6:	4770      	bx	lr

080123c8 <_ControlModeCommand_Request__cdr_deserialize>:
 80123c8:	b538      	push	{r3, r4, r5, lr}
 80123ca:	460c      	mov	r4, r1
 80123cc:	b179      	cbz	r1, 80123ee <_ControlModeCommand_Request__cdr_deserialize+0x26>
 80123ce:	4605      	mov	r5, r0
 80123d0:	f000 fc56 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123d4:	4603      	mov	r3, r0
 80123d6:	4621      	mov	r1, r4
 80123d8:	4628      	mov	r0, r5
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	4798      	blx	r3
 80123e0:	f104 0108 	add.w	r1, r4, #8
 80123e4:	4628      	mov	r0, r5
 80123e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123ea:	f000 bc91 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 80123ee:	4608      	mov	r0, r1
 80123f0:	bd38      	pop	{r3, r4, r5, pc}
 80123f2:	bf00      	nop

080123f4 <_ControlModeCommand_Request__cdr_serialize>:
 80123f4:	b180      	cbz	r0, 8012418 <_ControlModeCommand_Request__cdr_serialize+0x24>
 80123f6:	b538      	push	{r3, r4, r5, lr}
 80123f8:	4604      	mov	r4, r0
 80123fa:	460d      	mov	r5, r1
 80123fc:	f000 fc40 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012400:	4603      	mov	r3, r0
 8012402:	4629      	mov	r1, r5
 8012404:	4620      	mov	r0, r4
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	689b      	ldr	r3, [r3, #8]
 801240a:	4798      	blx	r3
 801240c:	7a21      	ldrb	r1, [r4, #8]
 801240e:	4628      	mov	r0, r5
 8012410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012414:	f000 bc66 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 8012418:	4770      	bx	lr
 801241a:	bf00      	nop

0801241c <_ControlModeCommand_Response__cdr_serialize>:
 801241c:	460a      	mov	r2, r1
 801241e:	b118      	cbz	r0, 8012428 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8012420:	7801      	ldrb	r1, [r0, #0]
 8012422:	4610      	mov	r0, r2
 8012424:	f000 bc30 	b.w	8012c88 <ucdr_serialize_bool>
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop

0801242c <_ControlModeCommand_Response__get_serialized_size>:
 801242c:	b130      	cbz	r0, 801243c <_ControlModeCommand_Response__get_serialized_size+0x10>
 801242e:	2101      	movs	r1, #1
 8012430:	2000      	movs	r0, #0
 8012432:	b508      	push	{r3, lr}
 8012434:	f001 fec4 	bl	80141c0 <ucdr_alignment>
 8012438:	3001      	adds	r0, #1
 801243a:	bd08      	pop	{r3, pc}
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop

08012440 <_ControlModeCommand_Request__get_serialized_size>:
 8012440:	b150      	cbz	r0, 8012458 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8012442:	2100      	movs	r1, #0
 8012444:	b510      	push	{r4, lr}
 8012446:	f000 fbb7 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801244a:	4604      	mov	r4, r0
 801244c:	2101      	movs	r1, #1
 801244e:	f001 feb7 	bl	80141c0 <ucdr_alignment>
 8012452:	4420      	add	r0, r4
 8012454:	3001      	adds	r0, #1
 8012456:	bd10      	pop	{r4, pc}
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop

0801245c <_ControlModeCommand_Request__max_serialized_size>:
 801245c:	b510      	push	{r4, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	2401      	movs	r4, #1
 8012462:	2100      	movs	r1, #0
 8012464:	f10d 0007 	add.w	r0, sp, #7
 8012468:	f88d 4007 	strb.w	r4, [sp, #7]
 801246c:	f000 fbf4 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8012470:	4621      	mov	r1, r4
 8012472:	4604      	mov	r4, r0
 8012474:	f001 fea4 	bl	80141c0 <ucdr_alignment>
 8012478:	4420      	add	r0, r4
 801247a:	3001      	adds	r0, #1
 801247c:	b002      	add	sp, #8
 801247e:	bd10      	pop	{r4, pc}

08012480 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8012480:	4800      	ldr	r0, [pc, #0]	@ (8012484 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8012482:	4770      	bx	lr
 8012484:	24000a24 	.word	0x24000a24

08012488 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	b158      	cbz	r0, 80124a4 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport+0x1c>
 801248c:	460d      	mov	r5, r1
 801248e:	f000 fb93 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8012492:	2101      	movs	r1, #1
 8012494:	182c      	adds	r4, r5, r0
 8012496:	f1c5 0501 	rsb	r5, r5, #1
 801249a:	4620      	mov	r0, r4
 801249c:	f001 fe90 	bl	80141c0 <ucdr_alignment>
 80124a0:	4428      	add	r0, r5
 80124a2:	4420      	add	r0, r4
 80124a4:	bd38      	pop	{r3, r4, r5, pc}
 80124a6:	bf00      	nop

080124a8 <_ControlModeReport__cdr_deserialize>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	460c      	mov	r4, r1
 80124ac:	b179      	cbz	r1, 80124ce <_ControlModeReport__cdr_deserialize+0x26>
 80124ae:	4605      	mov	r5, r0
 80124b0:	f000 fbe6 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124b4:	4603      	mov	r3, r0
 80124b6:	4621      	mov	r1, r4
 80124b8:	4628      	mov	r0, r5
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	4798      	blx	r3
 80124c0:	f104 0108 	add.w	r1, r4, #8
 80124c4:	4628      	mov	r0, r5
 80124c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124ca:	f000 bc21 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 80124ce:	4608      	mov	r0, r1
 80124d0:	bd38      	pop	{r3, r4, r5, pc}
 80124d2:	bf00      	nop

080124d4 <_ControlModeReport__cdr_serialize>:
 80124d4:	b180      	cbz	r0, 80124f8 <_ControlModeReport__cdr_serialize+0x24>
 80124d6:	b538      	push	{r3, r4, r5, lr}
 80124d8:	4604      	mov	r4, r0
 80124da:	460d      	mov	r5, r1
 80124dc:	f000 fbd0 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124e0:	4603      	mov	r3, r0
 80124e2:	4629      	mov	r1, r5
 80124e4:	4620      	mov	r0, r4
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	4798      	blx	r3
 80124ec:	7a21      	ldrb	r1, [r4, #8]
 80124ee:	4628      	mov	r0, r5
 80124f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124f4:	f000 bbf6 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop

080124fc <_ControlModeReport__get_serialized_size>:
 80124fc:	b150      	cbz	r0, 8012514 <_ControlModeReport__get_serialized_size+0x18>
 80124fe:	2100      	movs	r1, #0
 8012500:	b510      	push	{r4, lr}
 8012502:	f000 fb59 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8012506:	4604      	mov	r4, r0
 8012508:	2101      	movs	r1, #1
 801250a:	f001 fe59 	bl	80141c0 <ucdr_alignment>
 801250e:	4420      	add	r0, r4
 8012510:	3001      	adds	r0, #1
 8012512:	bd10      	pop	{r4, pc}
 8012514:	4770      	bx	lr
 8012516:	bf00      	nop

08012518 <_ControlModeReport__max_serialized_size>:
 8012518:	b510      	push	{r4, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	2401      	movs	r4, #1
 801251e:	2100      	movs	r1, #0
 8012520:	f10d 0007 	add.w	r0, sp, #7
 8012524:	f88d 4007 	strb.w	r4, [sp, #7]
 8012528:	f000 fb96 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 801252c:	4621      	mov	r1, r4
 801252e:	4604      	mov	r4, r0
 8012530:	f001 fe46 	bl	80141c0 <ucdr_alignment>
 8012534:	4420      	add	r0, r4
 8012536:	3001      	adds	r0, #1
 8012538:	b002      	add	sp, #8
 801253a:	bd10      	pop	{r4, pc}

0801253c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 801253c:	4800      	ldr	r0, [pc, #0]	@ (8012540 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x4>)
 801253e:	4770      	bx	lr
 8012540:	24000a80 	.word	0x24000a80

08012544 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand>:
 8012544:	b538      	push	{r3, r4, r5, lr}
 8012546:	b158      	cbz	r0, 8012560 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand+0x1c>
 8012548:	460d      	mov	r5, r1
 801254a:	f000 fb35 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801254e:	2101      	movs	r1, #1
 8012550:	182c      	adds	r4, r5, r0
 8012552:	f1c5 0501 	rsb	r5, r5, #1
 8012556:	4620      	mov	r0, r4
 8012558:	f001 fe32 	bl	80141c0 <ucdr_alignment>
 801255c:	4428      	add	r0, r5
 801255e:	4420      	add	r0, r4
 8012560:	bd38      	pop	{r3, r4, r5, pc}
 8012562:	bf00      	nop

08012564 <_GearCommand__cdr_deserialize>:
 8012564:	b538      	push	{r3, r4, r5, lr}
 8012566:	460c      	mov	r4, r1
 8012568:	b179      	cbz	r1, 801258a <_GearCommand__cdr_deserialize+0x26>
 801256a:	4605      	mov	r5, r0
 801256c:	f000 fb88 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012570:	4603      	mov	r3, r0
 8012572:	4621      	mov	r1, r4
 8012574:	4628      	mov	r0, r5
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	4798      	blx	r3
 801257c:	f104 0108 	add.w	r1, r4, #8
 8012580:	4628      	mov	r0, r5
 8012582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012586:	f000 bbc3 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 801258a:	4608      	mov	r0, r1
 801258c:	bd38      	pop	{r3, r4, r5, pc}
 801258e:	bf00      	nop

08012590 <_GearCommand__cdr_serialize>:
 8012590:	b180      	cbz	r0, 80125b4 <_GearCommand__cdr_serialize+0x24>
 8012592:	b538      	push	{r3, r4, r5, lr}
 8012594:	4604      	mov	r4, r0
 8012596:	460d      	mov	r5, r1
 8012598:	f000 fb72 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801259c:	4603      	mov	r3, r0
 801259e:	4629      	mov	r1, r5
 80125a0:	4620      	mov	r0, r4
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	689b      	ldr	r3, [r3, #8]
 80125a6:	4798      	blx	r3
 80125a8:	7a21      	ldrb	r1, [r4, #8]
 80125aa:	4628      	mov	r0, r5
 80125ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125b0:	f000 bb98 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop

080125b8 <_GearCommand__get_serialized_size>:
 80125b8:	b150      	cbz	r0, 80125d0 <_GearCommand__get_serialized_size+0x18>
 80125ba:	2100      	movs	r1, #0
 80125bc:	b510      	push	{r4, lr}
 80125be:	f000 fafb 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80125c2:	4604      	mov	r4, r0
 80125c4:	2101      	movs	r1, #1
 80125c6:	f001 fdfb 	bl	80141c0 <ucdr_alignment>
 80125ca:	4420      	add	r0, r4
 80125cc:	3001      	adds	r0, #1
 80125ce:	bd10      	pop	{r4, pc}
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop

080125d4 <_GearCommand__max_serialized_size>:
 80125d4:	b510      	push	{r4, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	2401      	movs	r4, #1
 80125da:	2100      	movs	r1, #0
 80125dc:	f10d 0007 	add.w	r0, sp, #7
 80125e0:	f88d 4007 	strb.w	r4, [sp, #7]
 80125e4:	f000 fb38 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 80125e8:	4621      	mov	r1, r4
 80125ea:	4604      	mov	r4, r0
 80125ec:	f001 fde8 	bl	80141c0 <ucdr_alignment>
 80125f0:	4420      	add	r0, r4
 80125f2:	3001      	adds	r0, #1
 80125f4:	b002      	add	sp, #8
 80125f6:	bd10      	pop	{r4, pc}

080125f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 80125f8:	4800      	ldr	r0, [pc, #0]	@ (80125fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x4>)
 80125fa:	4770      	bx	lr
 80125fc:	24000aa8 	.word	0x24000aa8

08012600 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport>:
 8012600:	b538      	push	{r3, r4, r5, lr}
 8012602:	b158      	cbz	r0, 801261c <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport+0x1c>
 8012604:	460d      	mov	r5, r1
 8012606:	f000 fad7 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801260a:	2101      	movs	r1, #1
 801260c:	182c      	adds	r4, r5, r0
 801260e:	f1c5 0501 	rsb	r5, r5, #1
 8012612:	4620      	mov	r0, r4
 8012614:	f001 fdd4 	bl	80141c0 <ucdr_alignment>
 8012618:	4428      	add	r0, r5
 801261a:	4420      	add	r0, r4
 801261c:	bd38      	pop	{r3, r4, r5, pc}
 801261e:	bf00      	nop

08012620 <_GearReport__cdr_deserialize>:
 8012620:	b538      	push	{r3, r4, r5, lr}
 8012622:	460c      	mov	r4, r1
 8012624:	b179      	cbz	r1, 8012646 <_GearReport__cdr_deserialize+0x26>
 8012626:	4605      	mov	r5, r0
 8012628:	f000 fb2a 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801262c:	4603      	mov	r3, r0
 801262e:	4621      	mov	r1, r4
 8012630:	4628      	mov	r0, r5
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	68db      	ldr	r3, [r3, #12]
 8012636:	4798      	blx	r3
 8012638:	f104 0108 	add.w	r1, r4, #8
 801263c:	4628      	mov	r0, r5
 801263e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012642:	f000 bb65 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 8012646:	4608      	mov	r0, r1
 8012648:	bd38      	pop	{r3, r4, r5, pc}
 801264a:	bf00      	nop

0801264c <_GearReport__cdr_serialize>:
 801264c:	b180      	cbz	r0, 8012670 <_GearReport__cdr_serialize+0x24>
 801264e:	b538      	push	{r3, r4, r5, lr}
 8012650:	4604      	mov	r4, r0
 8012652:	460d      	mov	r5, r1
 8012654:	f000 fb14 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012658:	4603      	mov	r3, r0
 801265a:	4629      	mov	r1, r5
 801265c:	4620      	mov	r0, r4
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	4798      	blx	r3
 8012664:	7a21      	ldrb	r1, [r4, #8]
 8012666:	4628      	mov	r0, r5
 8012668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801266c:	f000 bb3a 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop

08012674 <_GearReport__get_serialized_size>:
 8012674:	b150      	cbz	r0, 801268c <_GearReport__get_serialized_size+0x18>
 8012676:	2100      	movs	r1, #0
 8012678:	b510      	push	{r4, lr}
 801267a:	f000 fa9d 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801267e:	4604      	mov	r4, r0
 8012680:	2101      	movs	r1, #1
 8012682:	f001 fd9d 	bl	80141c0 <ucdr_alignment>
 8012686:	4420      	add	r0, r4
 8012688:	3001      	adds	r0, #1
 801268a:	bd10      	pop	{r4, pc}
 801268c:	4770      	bx	lr
 801268e:	bf00      	nop

08012690 <_GearReport__max_serialized_size>:
 8012690:	b510      	push	{r4, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	2401      	movs	r4, #1
 8012696:	2100      	movs	r1, #0
 8012698:	f10d 0007 	add.w	r0, sp, #7
 801269c:	f88d 4007 	strb.w	r4, [sp, #7]
 80126a0:	f000 fada 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 80126a4:	4621      	mov	r1, r4
 80126a6:	4604      	mov	r4, r0
 80126a8:	f001 fd8a 	bl	80141c0 <ucdr_alignment>
 80126ac:	4420      	add	r0, r4
 80126ae:	3001      	adds	r0, #1
 80126b0:	b002      	add	sp, #8
 80126b2:	bd10      	pop	{r4, pc}

080126b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 80126b4:	4800      	ldr	r0, [pc, #0]	@ (80126b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x4>)
 80126b6:	4770      	bx	lr
 80126b8:	24000ad0 	.word	0x24000ad0

080126bc <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 80126bc:	b538      	push	{r3, r4, r5, lr}
 80126be:	b158      	cbz	r0, 80126d8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 80126c0:	460d      	mov	r5, r1
 80126c2:	f000 fa79 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80126c6:	2101      	movs	r1, #1
 80126c8:	182c      	adds	r4, r5, r0
 80126ca:	f1c5 0501 	rsb	r5, r5, #1
 80126ce:	4620      	mov	r0, r4
 80126d0:	f001 fd76 	bl	80141c0 <ucdr_alignment>
 80126d4:	4428      	add	r0, r5
 80126d6:	4420      	add	r0, r4
 80126d8:	bd38      	pop	{r3, r4, r5, pc}
 80126da:	bf00      	nop

080126dc <_HazardLightsCommand__cdr_deserialize>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	460c      	mov	r4, r1
 80126e0:	b179      	cbz	r1, 8012702 <_HazardLightsCommand__cdr_deserialize+0x26>
 80126e2:	4605      	mov	r5, r0
 80126e4:	f000 facc 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126e8:	4603      	mov	r3, r0
 80126ea:	4621      	mov	r1, r4
 80126ec:	4628      	mov	r0, r5
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	4798      	blx	r3
 80126f4:	f104 0108 	add.w	r1, r4, #8
 80126f8:	4628      	mov	r0, r5
 80126fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126fe:	f000 bb07 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 8012702:	4608      	mov	r0, r1
 8012704:	bd38      	pop	{r3, r4, r5, pc}
 8012706:	bf00      	nop

08012708 <_HazardLightsCommand__cdr_serialize>:
 8012708:	b180      	cbz	r0, 801272c <_HazardLightsCommand__cdr_serialize+0x24>
 801270a:	b538      	push	{r3, r4, r5, lr}
 801270c:	4604      	mov	r4, r0
 801270e:	460d      	mov	r5, r1
 8012710:	f000 fab6 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012714:	4603      	mov	r3, r0
 8012716:	4629      	mov	r1, r5
 8012718:	4620      	mov	r0, r4
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	689b      	ldr	r3, [r3, #8]
 801271e:	4798      	blx	r3
 8012720:	7a21      	ldrb	r1, [r4, #8]
 8012722:	4628      	mov	r0, r5
 8012724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012728:	f000 badc 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop

08012730 <_HazardLightsCommand__get_serialized_size>:
 8012730:	b150      	cbz	r0, 8012748 <_HazardLightsCommand__get_serialized_size+0x18>
 8012732:	2100      	movs	r1, #0
 8012734:	b510      	push	{r4, lr}
 8012736:	f000 fa3f 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801273a:	4604      	mov	r4, r0
 801273c:	2101      	movs	r1, #1
 801273e:	f001 fd3f 	bl	80141c0 <ucdr_alignment>
 8012742:	4420      	add	r0, r4
 8012744:	3001      	adds	r0, #1
 8012746:	bd10      	pop	{r4, pc}
 8012748:	4770      	bx	lr
 801274a:	bf00      	nop

0801274c <_HazardLightsCommand__max_serialized_size>:
 801274c:	b510      	push	{r4, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	2401      	movs	r4, #1
 8012752:	2100      	movs	r1, #0
 8012754:	f10d 0007 	add.w	r0, sp, #7
 8012758:	f88d 4007 	strb.w	r4, [sp, #7]
 801275c:	f000 fa7c 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8012760:	4621      	mov	r1, r4
 8012762:	4604      	mov	r4, r0
 8012764:	f001 fd2c 	bl	80141c0 <ucdr_alignment>
 8012768:	4420      	add	r0, r4
 801276a:	3001      	adds	r0, #1
 801276c:	b002      	add	sp, #8
 801276e:	bd10      	pop	{r4, pc}

08012770 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8012770:	4800      	ldr	r0, [pc, #0]	@ (8012774 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8012772:	4770      	bx	lr
 8012774:	24000af8 	.word	0x24000af8

08012778 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8012778:	b538      	push	{r3, r4, r5, lr}
 801277a:	b158      	cbz	r0, 8012794 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x1c>
 801277c:	460d      	mov	r5, r1
 801277e:	f000 fa1b 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8012782:	2101      	movs	r1, #1
 8012784:	182c      	adds	r4, r5, r0
 8012786:	f1c5 0501 	rsb	r5, r5, #1
 801278a:	4620      	mov	r0, r4
 801278c:	f001 fd18 	bl	80141c0 <ucdr_alignment>
 8012790:	4428      	add	r0, r5
 8012792:	4420      	add	r0, r4
 8012794:	bd38      	pop	{r3, r4, r5, pc}
 8012796:	bf00      	nop

08012798 <_HazardLightsReport__cdr_deserialize>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	460c      	mov	r4, r1
 801279c:	b179      	cbz	r1, 80127be <_HazardLightsReport__cdr_deserialize+0x26>
 801279e:	4605      	mov	r5, r0
 80127a0:	f000 fa6e 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127a4:	4603      	mov	r3, r0
 80127a6:	4621      	mov	r1, r4
 80127a8:	4628      	mov	r0, r5
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	4798      	blx	r3
 80127b0:	f104 0108 	add.w	r1, r4, #8
 80127b4:	4628      	mov	r0, r5
 80127b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ba:	f000 baa9 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 80127be:	4608      	mov	r0, r1
 80127c0:	bd38      	pop	{r3, r4, r5, pc}
 80127c2:	bf00      	nop

080127c4 <_HazardLightsReport__cdr_serialize>:
 80127c4:	b180      	cbz	r0, 80127e8 <_HazardLightsReport__cdr_serialize+0x24>
 80127c6:	b538      	push	{r3, r4, r5, lr}
 80127c8:	4604      	mov	r4, r0
 80127ca:	460d      	mov	r5, r1
 80127cc:	f000 fa58 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127d0:	4603      	mov	r3, r0
 80127d2:	4629      	mov	r1, r5
 80127d4:	4620      	mov	r0, r4
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	4798      	blx	r3
 80127dc:	7a21      	ldrb	r1, [r4, #8]
 80127de:	4628      	mov	r0, r5
 80127e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127e4:	f000 ba7e 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop

080127ec <_HazardLightsReport__get_serialized_size>:
 80127ec:	b150      	cbz	r0, 8012804 <_HazardLightsReport__get_serialized_size+0x18>
 80127ee:	2100      	movs	r1, #0
 80127f0:	b510      	push	{r4, lr}
 80127f2:	f000 f9e1 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80127f6:	4604      	mov	r4, r0
 80127f8:	2101      	movs	r1, #1
 80127fa:	f001 fce1 	bl	80141c0 <ucdr_alignment>
 80127fe:	4420      	add	r0, r4
 8012800:	3001      	adds	r0, #1
 8012802:	bd10      	pop	{r4, pc}
 8012804:	4770      	bx	lr
 8012806:	bf00      	nop

08012808 <_HazardLightsReport__max_serialized_size>:
 8012808:	b510      	push	{r4, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	2401      	movs	r4, #1
 801280e:	2100      	movs	r1, #0
 8012810:	f10d 0007 	add.w	r0, sp, #7
 8012814:	f88d 4007 	strb.w	r4, [sp, #7]
 8012818:	f000 fa1e 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 801281c:	4621      	mov	r1, r4
 801281e:	4604      	mov	r4, r0
 8012820:	f001 fcce 	bl	80141c0 <ucdr_alignment>
 8012824:	4420      	add	r0, r4
 8012826:	3001      	adds	r0, #1
 8012828:	b002      	add	sp, #8
 801282a:	bd10      	pop	{r4, pc}

0801282c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 801282c:	4800      	ldr	r0, [pc, #0]	@ (8012830 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x4>)
 801282e:	4770      	bx	lr
 8012830:	24000b20 	.word	0x24000b20

08012834 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012834:	b538      	push	{r3, r4, r5, lr}
 8012836:	b158      	cbz	r0, 8012850 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport+0x1c>
 8012838:	460d      	mov	r5, r1
 801283a:	f000 f9bd 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801283e:	2104      	movs	r1, #4
 8012840:	182c      	adds	r4, r5, r0
 8012842:	f1c5 0504 	rsb	r5, r5, #4
 8012846:	4620      	mov	r0, r4
 8012848:	f001 fcba 	bl	80141c0 <ucdr_alignment>
 801284c:	4428      	add	r0, r5
 801284e:	4420      	add	r0, r4
 8012850:	bd38      	pop	{r3, r4, r5, pc}
 8012852:	bf00      	nop

08012854 <_SteeringReport__cdr_deserialize>:
 8012854:	b538      	push	{r3, r4, r5, lr}
 8012856:	460c      	mov	r4, r1
 8012858:	b179      	cbz	r1, 801287a <_SteeringReport__cdr_deserialize+0x26>
 801285a:	4605      	mov	r5, r0
 801285c:	f000 fa10 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012860:	4603      	mov	r3, r0
 8012862:	4621      	mov	r1, r4
 8012864:	4628      	mov	r0, r5
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	4798      	blx	r3
 801286c:	f104 0108 	add.w	r1, r4, #8
 8012870:	4628      	mov	r0, r5
 8012872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012876:	f001 ba25 	b.w	8013cc4 <ucdr_deserialize_float>
 801287a:	4608      	mov	r0, r1
 801287c:	bd38      	pop	{r3, r4, r5, pc}
 801287e:	bf00      	nop

08012880 <_SteeringReport__cdr_serialize>:
 8012880:	b188      	cbz	r0, 80128a6 <_SteeringReport__cdr_serialize+0x26>
 8012882:	b538      	push	{r3, r4, r5, lr}
 8012884:	4604      	mov	r4, r0
 8012886:	460d      	mov	r5, r1
 8012888:	f000 f9fa 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801288c:	4603      	mov	r3, r0
 801288e:	4629      	mov	r1, r5
 8012890:	4620      	mov	r0, r4
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	4798      	blx	r3
 8012898:	ed94 0a02 	vldr	s0, [r4, #8]
 801289c:	4628      	mov	r0, r5
 801289e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128a2:	f001 b977 	b.w	8013b94 <ucdr_serialize_float>
 80128a6:	4770      	bx	lr

080128a8 <_SteeringReport__get_serialized_size>:
 80128a8:	b150      	cbz	r0, 80128c0 <_SteeringReport__get_serialized_size+0x18>
 80128aa:	2100      	movs	r1, #0
 80128ac:	b510      	push	{r4, lr}
 80128ae:	f000 f983 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80128b2:	4604      	mov	r4, r0
 80128b4:	2104      	movs	r1, #4
 80128b6:	f001 fc83 	bl	80141c0 <ucdr_alignment>
 80128ba:	4420      	add	r0, r4
 80128bc:	3004      	adds	r0, #4
 80128be:	bd10      	pop	{r4, pc}
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop

080128c4 <_SteeringReport__max_serialized_size>:
 80128c4:	b510      	push	{r4, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	2301      	movs	r3, #1
 80128ca:	2100      	movs	r1, #0
 80128cc:	f10d 0007 	add.w	r0, sp, #7
 80128d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80128d4:	f000 f9c0 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 80128d8:	4604      	mov	r4, r0
 80128da:	2104      	movs	r1, #4
 80128dc:	f001 fc70 	bl	80141c0 <ucdr_alignment>
 80128e0:	4420      	add	r0, r4
 80128e2:	3004      	adds	r0, #4
 80128e4:	b002      	add	sp, #8
 80128e6:	bd10      	pop	{r4, pc}

080128e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 80128e8:	4800      	ldr	r0, [pc, #0]	@ (80128ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x4>)
 80128ea:	4770      	bx	lr
 80128ec:	24000b48 	.word	0x24000b48

080128f0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	b158      	cbz	r0, 801290c <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 80128f4:	460d      	mov	r5, r1
 80128f6:	f000 f95f 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80128fa:	2101      	movs	r1, #1
 80128fc:	182c      	adds	r4, r5, r0
 80128fe:	f1c5 0501 	rsb	r5, r5, #1
 8012902:	4620      	mov	r0, r4
 8012904:	f001 fc5c 	bl	80141c0 <ucdr_alignment>
 8012908:	4428      	add	r0, r5
 801290a:	4420      	add	r0, r4
 801290c:	bd38      	pop	{r3, r4, r5, pc}
 801290e:	bf00      	nop

08012910 <_TurnIndicatorsCommand__cdr_deserialize>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	460c      	mov	r4, r1
 8012914:	b179      	cbz	r1, 8012936 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 8012916:	4605      	mov	r5, r0
 8012918:	f000 f9b2 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801291c:	4603      	mov	r3, r0
 801291e:	4621      	mov	r1, r4
 8012920:	4628      	mov	r0, r5
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	4798      	blx	r3
 8012928:	f104 0108 	add.w	r1, r4, #8
 801292c:	4628      	mov	r0, r5
 801292e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012932:	f000 b9ed 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 8012936:	4608      	mov	r0, r1
 8012938:	bd38      	pop	{r3, r4, r5, pc}
 801293a:	bf00      	nop

0801293c <_TurnIndicatorsCommand__cdr_serialize>:
 801293c:	b180      	cbz	r0, 8012960 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 801293e:	b538      	push	{r3, r4, r5, lr}
 8012940:	4604      	mov	r4, r0
 8012942:	460d      	mov	r5, r1
 8012944:	f000 f99c 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012948:	4603      	mov	r3, r0
 801294a:	4629      	mov	r1, r5
 801294c:	4620      	mov	r0, r4
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	689b      	ldr	r3, [r3, #8]
 8012952:	4798      	blx	r3
 8012954:	7a21      	ldrb	r1, [r4, #8]
 8012956:	4628      	mov	r0, r5
 8012958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801295c:	f000 b9c2 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 8012960:	4770      	bx	lr
 8012962:	bf00      	nop

08012964 <_TurnIndicatorsCommand__get_serialized_size>:
 8012964:	b150      	cbz	r0, 801297c <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8012966:	2100      	movs	r1, #0
 8012968:	b510      	push	{r4, lr}
 801296a:	f000 f925 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801296e:	4604      	mov	r4, r0
 8012970:	2101      	movs	r1, #1
 8012972:	f001 fc25 	bl	80141c0 <ucdr_alignment>
 8012976:	4420      	add	r0, r4
 8012978:	3001      	adds	r0, #1
 801297a:	bd10      	pop	{r4, pc}
 801297c:	4770      	bx	lr
 801297e:	bf00      	nop

08012980 <_TurnIndicatorsCommand__max_serialized_size>:
 8012980:	b510      	push	{r4, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	2401      	movs	r4, #1
 8012986:	2100      	movs	r1, #0
 8012988:	f10d 0007 	add.w	r0, sp, #7
 801298c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012990:	f000 f962 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8012994:	4621      	mov	r1, r4
 8012996:	4604      	mov	r4, r0
 8012998:	f001 fc12 	bl	80141c0 <ucdr_alignment>
 801299c:	4420      	add	r0, r4
 801299e:	3001      	adds	r0, #1
 80129a0:	b002      	add	sp, #8
 80129a2:	bd10      	pop	{r4, pc}

080129a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80129a4:	4800      	ldr	r0, [pc, #0]	@ (80129a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 80129a6:	4770      	bx	lr
 80129a8:	24000b70 	.word	0x24000b70

080129ac <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80129ac:	b538      	push	{r3, r4, r5, lr}
 80129ae:	b158      	cbz	r0, 80129c8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 80129b0:	460d      	mov	r5, r1
 80129b2:	f000 f901 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80129b6:	2101      	movs	r1, #1
 80129b8:	182c      	adds	r4, r5, r0
 80129ba:	f1c5 0501 	rsb	r5, r5, #1
 80129be:	4620      	mov	r0, r4
 80129c0:	f001 fbfe 	bl	80141c0 <ucdr_alignment>
 80129c4:	4428      	add	r0, r5
 80129c6:	4420      	add	r0, r4
 80129c8:	bd38      	pop	{r3, r4, r5, pc}
 80129ca:	bf00      	nop

080129cc <_TurnIndicatorsReport__cdr_deserialize>:
 80129cc:	b538      	push	{r3, r4, r5, lr}
 80129ce:	460c      	mov	r4, r1
 80129d0:	b179      	cbz	r1, 80129f2 <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80129d2:	4605      	mov	r5, r0
 80129d4:	f000 f954 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129d8:	4603      	mov	r3, r0
 80129da:	4621      	mov	r1, r4
 80129dc:	4628      	mov	r0, r5
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	4798      	blx	r3
 80129e4:	f104 0108 	add.w	r1, r4, #8
 80129e8:	4628      	mov	r0, r5
 80129ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129ee:	f000 b98f 	b.w	8012d10 <ucdr_deserialize_uint8_t>
 80129f2:	4608      	mov	r0, r1
 80129f4:	bd38      	pop	{r3, r4, r5, pc}
 80129f6:	bf00      	nop

080129f8 <_TurnIndicatorsReport__cdr_serialize>:
 80129f8:	b180      	cbz	r0, 8012a1c <_TurnIndicatorsReport__cdr_serialize+0x24>
 80129fa:	b538      	push	{r3, r4, r5, lr}
 80129fc:	4604      	mov	r4, r0
 80129fe:	460d      	mov	r5, r1
 8012a00:	f000 f93e 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a04:	4603      	mov	r3, r0
 8012a06:	4629      	mov	r1, r5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	689b      	ldr	r3, [r3, #8]
 8012a0e:	4798      	blx	r3
 8012a10:	7a21      	ldrb	r1, [r4, #8]
 8012a12:	4628      	mov	r0, r5
 8012a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a18:	f000 b964 	b.w	8012ce4 <ucdr_serialize_uint8_t>
 8012a1c:	4770      	bx	lr
 8012a1e:	bf00      	nop

08012a20 <_TurnIndicatorsReport__get_serialized_size>:
 8012a20:	b150      	cbz	r0, 8012a38 <_TurnIndicatorsReport__get_serialized_size+0x18>
 8012a22:	2100      	movs	r1, #0
 8012a24:	b510      	push	{r4, lr}
 8012a26:	f000 f8c7 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	2101      	movs	r1, #1
 8012a2e:	f001 fbc7 	bl	80141c0 <ucdr_alignment>
 8012a32:	4420      	add	r0, r4
 8012a34:	3001      	adds	r0, #1
 8012a36:	bd10      	pop	{r4, pc}
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop

08012a3c <_TurnIndicatorsReport__max_serialized_size>:
 8012a3c:	b510      	push	{r4, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	2401      	movs	r4, #1
 8012a42:	2100      	movs	r1, #0
 8012a44:	f10d 0007 	add.w	r0, sp, #7
 8012a48:	f88d 4007 	strb.w	r4, [sp, #7]
 8012a4c:	f000 f904 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a50:	4621      	mov	r1, r4
 8012a52:	4604      	mov	r4, r0
 8012a54:	f001 fbb4 	bl	80141c0 <ucdr_alignment>
 8012a58:	4420      	add	r0, r4
 8012a5a:	3001      	adds	r0, #1
 8012a5c:	b002      	add	sp, #8
 8012a5e:	bd10      	pop	{r4, pc}

08012a60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012a60:	4800      	ldr	r0, [pc, #0]	@ (8012a64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8012a62:	4770      	bx	lr
 8012a64:	24000b98 	.word	0x24000b98

08012a68 <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012a68:	b1c8      	cbz	r0, 8012a9e <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport+0x36>
 8012a6a:	b570      	push	{r4, r5, r6, lr}
 8012a6c:	460d      	mov	r5, r1
 8012a6e:	f003 fd23 	bl	80164b8 <get_serialized_size_std_msgs__msg__Header>
 8012a72:	2104      	movs	r1, #4
 8012a74:	182e      	adds	r6, r5, r0
 8012a76:	f1c5 0504 	rsb	r5, r5, #4
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f001 fba0 	bl	80141c0 <ucdr_alignment>
 8012a80:	2104      	movs	r1, #4
 8012a82:	1844      	adds	r4, r0, r1
 8012a84:	4434      	add	r4, r6
 8012a86:	4620      	mov	r0, r4
 8012a88:	f001 fb9a 	bl	80141c0 <ucdr_alignment>
 8012a8c:	2104      	movs	r1, #4
 8012a8e:	4408      	add	r0, r1
 8012a90:	4404      	add	r4, r0
 8012a92:	4620      	mov	r0, r4
 8012a94:	f001 fb94 	bl	80141c0 <ucdr_alignment>
 8012a98:	4428      	add	r0, r5
 8012a9a:	4420      	add	r0, r4
 8012a9c:	bd70      	pop	{r4, r5, r6, pc}
 8012a9e:	4770      	bx	lr

08012aa0 <_VelocityReport__cdr_deserialize>:
 8012aa0:	b538      	push	{r3, r4, r5, lr}
 8012aa2:	460c      	mov	r4, r1
 8012aa4:	b1c9      	cbz	r1, 8012ada <_VelocityReport__cdr_deserialize+0x3a>
 8012aa6:	4605      	mov	r5, r0
 8012aa8:	f003 fd8a 	bl	80165c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012aac:	4603      	mov	r3, r0
 8012aae:	4621      	mov	r1, r4
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	68db      	ldr	r3, [r3, #12]
 8012ab6:	4798      	blx	r3
 8012ab8:	f104 0114 	add.w	r1, r4, #20
 8012abc:	4628      	mov	r0, r5
 8012abe:	f001 f901 	bl	8013cc4 <ucdr_deserialize_float>
 8012ac2:	f104 0118 	add.w	r1, r4, #24
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	f001 f8fc 	bl	8013cc4 <ucdr_deserialize_float>
 8012acc:	f104 011c 	add.w	r1, r4, #28
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ad6:	f001 b8f5 	b.w	8013cc4 <ucdr_deserialize_float>
 8012ada:	4608      	mov	r0, r1
 8012adc:	bd38      	pop	{r3, r4, r5, pc}
 8012ade:	bf00      	nop

08012ae0 <_VelocityReport__cdr_serialize>:
 8012ae0:	b1d8      	cbz	r0, 8012b1a <_VelocityReport__cdr_serialize+0x3a>
 8012ae2:	b538      	push	{r3, r4, r5, lr}
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	460d      	mov	r5, r1
 8012ae8:	f003 fd6a 	bl	80165c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012aec:	4603      	mov	r3, r0
 8012aee:	4629      	mov	r1, r5
 8012af0:	4620      	mov	r0, r4
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	4798      	blx	r3
 8012af8:	ed94 0a05 	vldr	s0, [r4, #20]
 8012afc:	4628      	mov	r0, r5
 8012afe:	f001 f849 	bl	8013b94 <ucdr_serialize_float>
 8012b02:	ed94 0a06 	vldr	s0, [r4, #24]
 8012b06:	4628      	mov	r0, r5
 8012b08:	f001 f844 	bl	8013b94 <ucdr_serialize_float>
 8012b0c:	ed94 0a07 	vldr	s0, [r4, #28]
 8012b10:	4628      	mov	r0, r5
 8012b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b16:	f001 b83d 	b.w	8013b94 <ucdr_serialize_float>
 8012b1a:	4770      	bx	lr

08012b1c <_VelocityReport__get_serialized_size>:
 8012b1c:	b1b0      	cbz	r0, 8012b4c <_VelocityReport__get_serialized_size+0x30>
 8012b1e:	2100      	movs	r1, #0
 8012b20:	b510      	push	{r4, lr}
 8012b22:	f003 fcc9 	bl	80164b8 <get_serialized_size_std_msgs__msg__Header>
 8012b26:	4604      	mov	r4, r0
 8012b28:	2104      	movs	r1, #4
 8012b2a:	f001 fb49 	bl	80141c0 <ucdr_alignment>
 8012b2e:	2104      	movs	r1, #4
 8012b30:	4420      	add	r0, r4
 8012b32:	1844      	adds	r4, r0, r1
 8012b34:	4620      	mov	r0, r4
 8012b36:	f001 fb43 	bl	80141c0 <ucdr_alignment>
 8012b3a:	2104      	movs	r1, #4
 8012b3c:	4408      	add	r0, r1
 8012b3e:	4404      	add	r4, r0
 8012b40:	4620      	mov	r0, r4
 8012b42:	f001 fb3d 	bl	80141c0 <ucdr_alignment>
 8012b46:	3004      	adds	r0, #4
 8012b48:	4420      	add	r0, r4
 8012b4a:	bd10      	pop	{r4, pc}
 8012b4c:	4770      	bx	lr
 8012b4e:	bf00      	nop

08012b50 <_VelocityReport__max_serialized_size>:
 8012b50:	b510      	push	{r4, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	2301      	movs	r3, #1
 8012b56:	2100      	movs	r1, #0
 8012b58:	f10d 0007 	add.w	r0, sp, #7
 8012b5c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b60:	f003 fd24 	bl	80165ac <max_serialized_size_std_msgs__msg__Header>
 8012b64:	4604      	mov	r4, r0
 8012b66:	2104      	movs	r1, #4
 8012b68:	f001 fb2a 	bl	80141c0 <ucdr_alignment>
 8012b6c:	2104      	movs	r1, #4
 8012b6e:	4420      	add	r0, r4
 8012b70:	1844      	adds	r4, r0, r1
 8012b72:	4620      	mov	r0, r4
 8012b74:	f001 fb24 	bl	80141c0 <ucdr_alignment>
 8012b78:	2104      	movs	r1, #4
 8012b7a:	4408      	add	r0, r1
 8012b7c:	4404      	add	r4, r0
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f001 fb1e 	bl	80141c0 <ucdr_alignment>
 8012b84:	3004      	adds	r0, #4
 8012b86:	4420      	add	r0, r4
 8012b88:	b002      	add	sp, #8
 8012b8a:	bd10      	pop	{r4, pc}

08012b8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012b8c:	4800      	ldr	r0, [pc, #0]	@ (8012b90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x4>)
 8012b8e:	4770      	bx	lr
 8012b90:	24000bc0 	.word	0x24000bc0

08012b94 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012b94:	f004 b8ee 	b.w	8016d74 <builtin_interfaces__msg__Time__init>

08012b98 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012b98:	f004 b8f0 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>

08012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012b9c:	4b04      	ldr	r3, [pc, #16]	@ (8012bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	b10a      	cbz	r2, 8012ba6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012ba2:	4803      	ldr	r0, [pc, #12]	@ (8012bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012ba4:	4770      	bx	lr
 8012ba6:	4a03      	ldr	r2, [pc, #12]	@ (8012bb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012ba8:	4801      	ldr	r0, [pc, #4]	@ (8012bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012baa:	6812      	ldr	r2, [r2, #0]
 8012bac:	601a      	str	r2, [r3, #0]
 8012bae:	4770      	bx	lr
 8012bb0:	24000c60 	.word	0x24000c60
 8012bb4:	24000d30 	.word	0x24000d30

08012bb8 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012bb8:	b180      	cbz	r0, 8012bdc <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012bba:	b538      	push	{r3, r4, r5, lr}
 8012bbc:	460d      	mov	r5, r1
 8012bbe:	2104      	movs	r1, #4
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	f001 fafd 	bl	80141c0 <ucdr_alignment>
 8012bc6:	1d2b      	adds	r3, r5, #4
 8012bc8:	f1c5 0504 	rsb	r5, r5, #4
 8012bcc:	2104      	movs	r1, #4
 8012bce:	181c      	adds	r4, r3, r0
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	f001 faf5 	bl	80141c0 <ucdr_alignment>
 8012bd6:	4428      	add	r0, r5
 8012bd8:	4420      	add	r0, r4
 8012bda:	bd38      	pop	{r3, r4, r5, pc}
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop

08012be0 <_Time__cdr_deserialize>:
 8012be0:	b538      	push	{r3, r4, r5, lr}
 8012be2:	460c      	mov	r4, r1
 8012be4:	b141      	cbz	r1, 8012bf8 <_Time__cdr_deserialize+0x18>
 8012be6:	4605      	mov	r5, r0
 8012be8:	f000 ff44 	bl	8013a74 <ucdr_deserialize_int32_t>
 8012bec:	1d21      	adds	r1, r4, #4
 8012bee:	4628      	mov	r0, r5
 8012bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bf4:	f000 bbbc 	b.w	8013370 <ucdr_deserialize_uint32_t>
 8012bf8:	4608      	mov	r0, r1
 8012bfa:	bd38      	pop	{r3, r4, r5, pc}

08012bfc <_Time__cdr_serialize>:
 8012bfc:	b160      	cbz	r0, 8012c18 <_Time__cdr_serialize+0x1c>
 8012bfe:	b538      	push	{r3, r4, r5, lr}
 8012c00:	460d      	mov	r5, r1
 8012c02:	4604      	mov	r4, r0
 8012c04:	6801      	ldr	r1, [r0, #0]
 8012c06:	4628      	mov	r0, r5
 8012c08:	f000 fe9c 	bl	8013944 <ucdr_serialize_int32_t>
 8012c0c:	6861      	ldr	r1, [r4, #4]
 8012c0e:	4628      	mov	r0, r5
 8012c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c14:	f000 ba7c 	b.w	8013110 <ucdr_serialize_uint32_t>
 8012c18:	4770      	bx	lr
 8012c1a:	bf00      	nop

08012c1c <_Time__get_serialized_size>:
 8012c1c:	b160      	cbz	r0, 8012c38 <_Time__get_serialized_size+0x1c>
 8012c1e:	2104      	movs	r1, #4
 8012c20:	2000      	movs	r0, #0
 8012c22:	b510      	push	{r4, lr}
 8012c24:	f001 facc 	bl	80141c0 <ucdr_alignment>
 8012c28:	2104      	movs	r1, #4
 8012c2a:	1844      	adds	r4, r0, r1
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f001 fac7 	bl	80141c0 <ucdr_alignment>
 8012c32:	3004      	adds	r0, #4
 8012c34:	4420      	add	r0, r4
 8012c36:	bd10      	pop	{r4, pc}
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop

08012c3c <_Time__max_serialized_size>:
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	2104      	movs	r1, #4
 8012c40:	2000      	movs	r0, #0
 8012c42:	f001 fabd 	bl	80141c0 <ucdr_alignment>
 8012c46:	2104      	movs	r1, #4
 8012c48:	1844      	adds	r4, r0, r1
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f001 fab8 	bl	80141c0 <ucdr_alignment>
 8012c50:	3004      	adds	r0, #4
 8012c52:	4420      	add	r0, r4
 8012c54:	bd10      	pop	{r4, pc}
 8012c56:	bf00      	nop

08012c58 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012c58:	b538      	push	{r3, r4, r5, lr}
 8012c5a:	460c      	mov	r4, r1
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	2104      	movs	r1, #4
 8012c60:	1d25      	adds	r5, r4, #4
 8012c62:	7003      	strb	r3, [r0, #0]
 8012c64:	4620      	mov	r0, r4
 8012c66:	f1c4 0404 	rsb	r4, r4, #4
 8012c6a:	f001 faa9 	bl	80141c0 <ucdr_alignment>
 8012c6e:	4405      	add	r5, r0
 8012c70:	2104      	movs	r1, #4
 8012c72:	4628      	mov	r0, r5
 8012c74:	f001 faa4 	bl	80141c0 <ucdr_alignment>
 8012c78:	4420      	add	r0, r4
 8012c7a:	4428      	add	r0, r5
 8012c7c:	bd38      	pop	{r3, r4, r5, pc}
 8012c7e:	bf00      	nop

08012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012c80:	4800      	ldr	r0, [pc, #0]	@ (8012c84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012c82:	4770      	bx	lr
 8012c84:	24000c6c 	.word	0x24000c6c

08012c88 <ucdr_serialize_bool>:
 8012c88:	b538      	push	{r3, r4, r5, lr}
 8012c8a:	460d      	mov	r5, r1
 8012c8c:	2101      	movs	r1, #1
 8012c8e:	4604      	mov	r4, r0
 8012c90:	f001 fa4a 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012c94:	b148      	cbz	r0, 8012caa <ucdr_serialize_bool+0x22>
 8012c96:	68a3      	ldr	r3, [r4, #8]
 8012c98:	2101      	movs	r1, #1
 8012c9a:	701d      	strb	r5, [r3, #0]
 8012c9c:	68a2      	ldr	r2, [r4, #8]
 8012c9e:	6923      	ldr	r3, [r4, #16]
 8012ca0:	440a      	add	r2, r1
 8012ca2:	7561      	strb	r1, [r4, #21]
 8012ca4:	440b      	add	r3, r1
 8012ca6:	60a2      	str	r2, [r4, #8]
 8012ca8:	6123      	str	r3, [r4, #16]
 8012caa:	7da0      	ldrb	r0, [r4, #22]
 8012cac:	f080 0001 	eor.w	r0, r0, #1
 8012cb0:	bd38      	pop	{r3, r4, r5, pc}
 8012cb2:	bf00      	nop

08012cb4 <ucdr_deserialize_bool>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	460d      	mov	r5, r1
 8012cb8:	2101      	movs	r1, #1
 8012cba:	4604      	mov	r4, r0
 8012cbc:	f001 fa34 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012cc0:	b160      	cbz	r0, 8012cdc <ucdr_deserialize_bool+0x28>
 8012cc2:	68a2      	ldr	r2, [r4, #8]
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	6923      	ldr	r3, [r4, #16]
 8012cc8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012ccc:	440b      	add	r3, r1
 8012cce:	3800      	subs	r0, #0
 8012cd0:	bf18      	it	ne
 8012cd2:	2001      	movne	r0, #1
 8012cd4:	7028      	strb	r0, [r5, #0]
 8012cd6:	60a2      	str	r2, [r4, #8]
 8012cd8:	6123      	str	r3, [r4, #16]
 8012cda:	7561      	strb	r1, [r4, #21]
 8012cdc:	7da0      	ldrb	r0, [r4, #22]
 8012cde:	f080 0001 	eor.w	r0, r0, #1
 8012ce2:	bd38      	pop	{r3, r4, r5, pc}

08012ce4 <ucdr_serialize_uint8_t>:
 8012ce4:	b538      	push	{r3, r4, r5, lr}
 8012ce6:	460d      	mov	r5, r1
 8012ce8:	2101      	movs	r1, #1
 8012cea:	4604      	mov	r4, r0
 8012cec:	f001 fa1c 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012cf0:	b148      	cbz	r0, 8012d06 <ucdr_serialize_uint8_t+0x22>
 8012cf2:	68a3      	ldr	r3, [r4, #8]
 8012cf4:	2101      	movs	r1, #1
 8012cf6:	701d      	strb	r5, [r3, #0]
 8012cf8:	68a2      	ldr	r2, [r4, #8]
 8012cfa:	6923      	ldr	r3, [r4, #16]
 8012cfc:	440a      	add	r2, r1
 8012cfe:	7561      	strb	r1, [r4, #21]
 8012d00:	440b      	add	r3, r1
 8012d02:	60a2      	str	r2, [r4, #8]
 8012d04:	6123      	str	r3, [r4, #16]
 8012d06:	7da0      	ldrb	r0, [r4, #22]
 8012d08:	f080 0001 	eor.w	r0, r0, #1
 8012d0c:	bd38      	pop	{r3, r4, r5, pc}
 8012d0e:	bf00      	nop

08012d10 <ucdr_deserialize_uint8_t>:
 8012d10:	b538      	push	{r3, r4, r5, lr}
 8012d12:	460d      	mov	r5, r1
 8012d14:	2101      	movs	r1, #1
 8012d16:	4604      	mov	r4, r0
 8012d18:	f001 fa06 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012d1c:	b150      	cbz	r0, 8012d34 <ucdr_deserialize_uint8_t+0x24>
 8012d1e:	68a3      	ldr	r3, [r4, #8]
 8012d20:	2101      	movs	r1, #1
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	702b      	strb	r3, [r5, #0]
 8012d26:	68a2      	ldr	r2, [r4, #8]
 8012d28:	6923      	ldr	r3, [r4, #16]
 8012d2a:	440a      	add	r2, r1
 8012d2c:	7561      	strb	r1, [r4, #21]
 8012d2e:	440b      	add	r3, r1
 8012d30:	60a2      	str	r2, [r4, #8]
 8012d32:	6123      	str	r3, [r4, #16]
 8012d34:	7da0      	ldrb	r0, [r4, #22]
 8012d36:	f080 0001 	eor.w	r0, r0, #1
 8012d3a:	bd38      	pop	{r3, r4, r5, pc}

08012d3c <ucdr_serialize_uint16_t>:
 8012d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d40:	460b      	mov	r3, r1
 8012d42:	b082      	sub	sp, #8
 8012d44:	4604      	mov	r4, r0
 8012d46:	2102      	movs	r1, #2
 8012d48:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012d4c:	f001 fa40 	bl	80141d0 <ucdr_buffer_alignment>
 8012d50:	4601      	mov	r1, r0
 8012d52:	4620      	mov	r0, r4
 8012d54:	7d67      	ldrb	r7, [r4, #21]
 8012d56:	f001 fa83 	bl	8014260 <ucdr_advance_buffer>
 8012d5a:	2102      	movs	r1, #2
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f001 f9d7 	bl	8014110 <ucdr_check_buffer_available_for>
 8012d62:	bb78      	cbnz	r0, 8012dc4 <ucdr_serialize_uint16_t+0x88>
 8012d64:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012d68:	42ab      	cmp	r3, r5
 8012d6a:	d926      	bls.n	8012dba <ucdr_serialize_uint16_t+0x7e>
 8012d6c:	1b5e      	subs	r6, r3, r5
 8012d6e:	60a3      	str	r3, [r4, #8]
 8012d70:	6923      	ldr	r3, [r4, #16]
 8012d72:	4620      	mov	r0, r4
 8012d74:	f1c6 0802 	rsb	r8, r6, #2
 8012d78:	4433      	add	r3, r6
 8012d7a:	4641      	mov	r1, r8
 8012d7c:	6123      	str	r3, [r4, #16]
 8012d7e:	f001 f9d3 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012d82:	2800      	cmp	r0, #0
 8012d84:	d03b      	beq.n	8012dfe <ucdr_serialize_uint16_t+0xc2>
 8012d86:	7d23      	ldrb	r3, [r4, #20]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d04a      	beq.n	8012e22 <ucdr_serialize_uint16_t+0xe6>
 8012d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d90:	702b      	strb	r3, [r5, #0]
 8012d92:	2e00      	cmp	r6, #0
 8012d94:	d040      	beq.n	8012e18 <ucdr_serialize_uint16_t+0xdc>
 8012d96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d9a:	706b      	strb	r3, [r5, #1]
 8012d9c:	6923      	ldr	r3, [r4, #16]
 8012d9e:	2102      	movs	r1, #2
 8012da0:	68a2      	ldr	r2, [r4, #8]
 8012da2:	3302      	adds	r3, #2
 8012da4:	7da0      	ldrb	r0, [r4, #22]
 8012da6:	4442      	add	r2, r8
 8012da8:	7561      	strb	r1, [r4, #21]
 8012daa:	1b9e      	subs	r6, r3, r6
 8012dac:	f080 0001 	eor.w	r0, r0, #1
 8012db0:	60a2      	str	r2, [r4, #8]
 8012db2:	6126      	str	r6, [r4, #16]
 8012db4:	b002      	add	sp, #8
 8012db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dba:	2102      	movs	r1, #2
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f001 f9b3 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012dc2:	b190      	cbz	r0, 8012dea <ucdr_serialize_uint16_t+0xae>
 8012dc4:	7d23      	ldrb	r3, [r4, #20]
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	68a3      	ldr	r3, [r4, #8]
 8012dca:	d014      	beq.n	8012df6 <ucdr_serialize_uint16_t+0xba>
 8012dcc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012dd0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dd4:	7019      	strb	r1, [r3, #0]
 8012dd6:	68a3      	ldr	r3, [r4, #8]
 8012dd8:	705a      	strb	r2, [r3, #1]
 8012dda:	2102      	movs	r1, #2
 8012ddc:	68a2      	ldr	r2, [r4, #8]
 8012dde:	6923      	ldr	r3, [r4, #16]
 8012de0:	440a      	add	r2, r1
 8012de2:	7561      	strb	r1, [r4, #21]
 8012de4:	440b      	add	r3, r1
 8012de6:	60a2      	str	r2, [r4, #8]
 8012de8:	6123      	str	r3, [r4, #16]
 8012dea:	7da0      	ldrb	r0, [r4, #22]
 8012dec:	f080 0001 	eor.w	r0, r0, #1
 8012df0:	b002      	add	sp, #8
 8012df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012dfa:	801a      	strh	r2, [r3, #0]
 8012dfc:	e7ed      	b.n	8012dda <ucdr_serialize_uint16_t+0x9e>
 8012dfe:	68a2      	ldr	r2, [r4, #8]
 8012e00:	6923      	ldr	r3, [r4, #16]
 8012e02:	7da0      	ldrb	r0, [r4, #22]
 8012e04:	1b92      	subs	r2, r2, r6
 8012e06:	1b9b      	subs	r3, r3, r6
 8012e08:	7567      	strb	r7, [r4, #21]
 8012e0a:	f080 0001 	eor.w	r0, r0, #1
 8012e0e:	60a2      	str	r2, [r4, #8]
 8012e10:	6123      	str	r3, [r4, #16]
 8012e12:	b002      	add	sp, #8
 8012e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e18:	68a3      	ldr	r3, [r4, #8]
 8012e1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e1e:	701a      	strb	r2, [r3, #0]
 8012e20:	e7bc      	b.n	8012d9c <ucdr_serialize_uint16_t+0x60>
 8012e22:	4628      	mov	r0, r5
 8012e24:	f10d 0506 	add.w	r5, sp, #6
 8012e28:	4632      	mov	r2, r6
 8012e2a:	4629      	mov	r1, r5
 8012e2c:	f00f fb87 	bl	802253e <memcpy>
 8012e30:	4642      	mov	r2, r8
 8012e32:	19a9      	adds	r1, r5, r6
 8012e34:	68a0      	ldr	r0, [r4, #8]
 8012e36:	f00f fb82 	bl	802253e <memcpy>
 8012e3a:	e7af      	b.n	8012d9c <ucdr_serialize_uint16_t+0x60>

08012e3c <ucdr_serialize_endian_uint16_t>:
 8012e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e40:	4604      	mov	r4, r0
 8012e42:	b083      	sub	sp, #12
 8012e44:	460d      	mov	r5, r1
 8012e46:	2102      	movs	r1, #2
 8012e48:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012e4c:	f001 f9c0 	bl	80141d0 <ucdr_buffer_alignment>
 8012e50:	4601      	mov	r1, r0
 8012e52:	4620      	mov	r0, r4
 8012e54:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e58:	f001 fa02 	bl	8014260 <ucdr_advance_buffer>
 8012e5c:	2102      	movs	r1, #2
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f001 f956 	bl	8014110 <ucdr_check_buffer_available_for>
 8012e64:	bb70      	cbnz	r0, 8012ec4 <ucdr_serialize_endian_uint16_t+0x88>
 8012e66:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e6a:	42be      	cmp	r6, r7
 8012e6c:	d925      	bls.n	8012eba <ucdr_serialize_endian_uint16_t+0x7e>
 8012e6e:	6923      	ldr	r3, [r4, #16]
 8012e70:	4620      	mov	r0, r4
 8012e72:	60a6      	str	r6, [r4, #8]
 8012e74:	1bf6      	subs	r6, r6, r7
 8012e76:	4433      	add	r3, r6
 8012e78:	f1c6 0902 	rsb	r9, r6, #2
 8012e7c:	6123      	str	r3, [r4, #16]
 8012e7e:	4649      	mov	r1, r9
 8012e80:	f001 f952 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d039      	beq.n	8012efc <ucdr_serialize_endian_uint16_t+0xc0>
 8012e88:	2d01      	cmp	r5, #1
 8012e8a:	d04a      	beq.n	8012f22 <ucdr_serialize_endian_uint16_t+0xe6>
 8012e8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e90:	703b      	strb	r3, [r7, #0]
 8012e92:	2e00      	cmp	r6, #0
 8012e94:	d040      	beq.n	8012f18 <ucdr_serialize_endian_uint16_t+0xdc>
 8012e96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e9a:	707b      	strb	r3, [r7, #1]
 8012e9c:	6923      	ldr	r3, [r4, #16]
 8012e9e:	2102      	movs	r1, #2
 8012ea0:	68a2      	ldr	r2, [r4, #8]
 8012ea2:	7da0      	ldrb	r0, [r4, #22]
 8012ea4:	3302      	adds	r3, #2
 8012ea6:	444a      	add	r2, r9
 8012ea8:	7561      	strb	r1, [r4, #21]
 8012eaa:	1b9b      	subs	r3, r3, r6
 8012eac:	f080 0001 	eor.w	r0, r0, #1
 8012eb0:	60a2      	str	r2, [r4, #8]
 8012eb2:	6123      	str	r3, [r4, #16]
 8012eb4:	b003      	add	sp, #12
 8012eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eba:	2102      	movs	r1, #2
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	f001 f933 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012ec2:	b188      	cbz	r0, 8012ee8 <ucdr_serialize_endian_uint16_t+0xac>
 8012ec4:	2d01      	cmp	r5, #1
 8012ec6:	68a3      	ldr	r3, [r4, #8]
 8012ec8:	d014      	beq.n	8012ef4 <ucdr_serialize_endian_uint16_t+0xb8>
 8012eca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012ece:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ed2:	7019      	strb	r1, [r3, #0]
 8012ed4:	68a3      	ldr	r3, [r4, #8]
 8012ed6:	705a      	strb	r2, [r3, #1]
 8012ed8:	2102      	movs	r1, #2
 8012eda:	68a2      	ldr	r2, [r4, #8]
 8012edc:	6923      	ldr	r3, [r4, #16]
 8012ede:	440a      	add	r2, r1
 8012ee0:	7561      	strb	r1, [r4, #21]
 8012ee2:	440b      	add	r3, r1
 8012ee4:	60a2      	str	r2, [r4, #8]
 8012ee6:	6123      	str	r3, [r4, #16]
 8012ee8:	7da0      	ldrb	r0, [r4, #22]
 8012eea:	f080 0001 	eor.w	r0, r0, #1
 8012eee:	b003      	add	sp, #12
 8012ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ef4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012ef8:	801a      	strh	r2, [r3, #0]
 8012efa:	e7ed      	b.n	8012ed8 <ucdr_serialize_endian_uint16_t+0x9c>
 8012efc:	68a2      	ldr	r2, [r4, #8]
 8012efe:	6923      	ldr	r3, [r4, #16]
 8012f00:	7da0      	ldrb	r0, [r4, #22]
 8012f02:	1b92      	subs	r2, r2, r6
 8012f04:	1b9b      	subs	r3, r3, r6
 8012f06:	f884 8015 	strb.w	r8, [r4, #21]
 8012f0a:	f080 0001 	eor.w	r0, r0, #1
 8012f0e:	60a2      	str	r2, [r4, #8]
 8012f10:	6123      	str	r3, [r4, #16]
 8012f12:	b003      	add	sp, #12
 8012f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f18:	68a3      	ldr	r3, [r4, #8]
 8012f1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f1e:	701a      	strb	r2, [r3, #0]
 8012f20:	e7bc      	b.n	8012e9c <ucdr_serialize_endian_uint16_t+0x60>
 8012f22:	f10d 0506 	add.w	r5, sp, #6
 8012f26:	4632      	mov	r2, r6
 8012f28:	4638      	mov	r0, r7
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	f00f fb07 	bl	802253e <memcpy>
 8012f30:	464a      	mov	r2, r9
 8012f32:	19a9      	adds	r1, r5, r6
 8012f34:	68a0      	ldr	r0, [r4, #8]
 8012f36:	f00f fb02 	bl	802253e <memcpy>
 8012f3a:	e7af      	b.n	8012e9c <ucdr_serialize_endian_uint16_t+0x60>

08012f3c <ucdr_deserialize_uint16_t>:
 8012f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f40:	4604      	mov	r4, r0
 8012f42:	460d      	mov	r5, r1
 8012f44:	2102      	movs	r1, #2
 8012f46:	f001 f943 	bl	80141d0 <ucdr_buffer_alignment>
 8012f4a:	4601      	mov	r1, r0
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012f52:	f001 f985 	bl	8014260 <ucdr_advance_buffer>
 8012f56:	2102      	movs	r1, #2
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f001 f8d9 	bl	8014110 <ucdr_check_buffer_available_for>
 8012f5e:	bb60      	cbnz	r0, 8012fba <ucdr_deserialize_uint16_t+0x7e>
 8012f60:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012f64:	42be      	cmp	r6, r7
 8012f66:	d923      	bls.n	8012fb0 <ucdr_deserialize_uint16_t+0x74>
 8012f68:	6923      	ldr	r3, [r4, #16]
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	60a6      	str	r6, [r4, #8]
 8012f6e:	1bf6      	subs	r6, r6, r7
 8012f70:	4433      	add	r3, r6
 8012f72:	f1c6 0902 	rsb	r9, r6, #2
 8012f76:	6123      	str	r3, [r4, #16]
 8012f78:	4649      	mov	r1, r9
 8012f7a:	f001 f8d5 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d034      	beq.n	8012fec <ucdr_deserialize_uint16_t+0xb0>
 8012f82:	7d23      	ldrb	r3, [r4, #20]
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d042      	beq.n	801300e <ucdr_deserialize_uint16_t+0xd2>
 8012f88:	787b      	ldrb	r3, [r7, #1]
 8012f8a:	702b      	strb	r3, [r5, #0]
 8012f8c:	2e00      	cmp	r6, #0
 8012f8e:	d03a      	beq.n	8013006 <ucdr_deserialize_uint16_t+0xca>
 8012f90:	783b      	ldrb	r3, [r7, #0]
 8012f92:	706b      	strb	r3, [r5, #1]
 8012f94:	6923      	ldr	r3, [r4, #16]
 8012f96:	2102      	movs	r1, #2
 8012f98:	68a2      	ldr	r2, [r4, #8]
 8012f9a:	3302      	adds	r3, #2
 8012f9c:	7da0      	ldrb	r0, [r4, #22]
 8012f9e:	444a      	add	r2, r9
 8012fa0:	7561      	strb	r1, [r4, #21]
 8012fa2:	1b9b      	subs	r3, r3, r6
 8012fa4:	f080 0001 	eor.w	r0, r0, #1
 8012fa8:	60a2      	str	r2, [r4, #8]
 8012faa:	6123      	str	r3, [r4, #16]
 8012fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fb0:	2102      	movs	r1, #2
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f001 f8b8 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8012fb8:	b180      	cbz	r0, 8012fdc <ucdr_deserialize_uint16_t+0xa0>
 8012fba:	7d23      	ldrb	r3, [r4, #20]
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	68a3      	ldr	r3, [r4, #8]
 8012fc0:	d011      	beq.n	8012fe6 <ucdr_deserialize_uint16_t+0xaa>
 8012fc2:	785b      	ldrb	r3, [r3, #1]
 8012fc4:	702b      	strb	r3, [r5, #0]
 8012fc6:	68a3      	ldr	r3, [r4, #8]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	706b      	strb	r3, [r5, #1]
 8012fcc:	2102      	movs	r1, #2
 8012fce:	68a2      	ldr	r2, [r4, #8]
 8012fd0:	6923      	ldr	r3, [r4, #16]
 8012fd2:	440a      	add	r2, r1
 8012fd4:	7561      	strb	r1, [r4, #21]
 8012fd6:	440b      	add	r3, r1
 8012fd8:	60a2      	str	r2, [r4, #8]
 8012fda:	6123      	str	r3, [r4, #16]
 8012fdc:	7da0      	ldrb	r0, [r4, #22]
 8012fde:	f080 0001 	eor.w	r0, r0, #1
 8012fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fe6:	881b      	ldrh	r3, [r3, #0]
 8012fe8:	802b      	strh	r3, [r5, #0]
 8012fea:	e7ef      	b.n	8012fcc <ucdr_deserialize_uint16_t+0x90>
 8012fec:	68a2      	ldr	r2, [r4, #8]
 8012fee:	6923      	ldr	r3, [r4, #16]
 8012ff0:	1b92      	subs	r2, r2, r6
 8012ff2:	7da0      	ldrb	r0, [r4, #22]
 8012ff4:	1b9b      	subs	r3, r3, r6
 8012ff6:	f884 8015 	strb.w	r8, [r4, #21]
 8012ffa:	f080 0001 	eor.w	r0, r0, #1
 8012ffe:	60a2      	str	r2, [r4, #8]
 8013000:	6123      	str	r3, [r4, #16]
 8013002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013006:	68a3      	ldr	r3, [r4, #8]
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	706b      	strb	r3, [r5, #1]
 801300c:	e7c2      	b.n	8012f94 <ucdr_deserialize_uint16_t+0x58>
 801300e:	4639      	mov	r1, r7
 8013010:	4632      	mov	r2, r6
 8013012:	4628      	mov	r0, r5
 8013014:	f00f fa93 	bl	802253e <memcpy>
 8013018:	464a      	mov	r2, r9
 801301a:	19a8      	adds	r0, r5, r6
 801301c:	68a1      	ldr	r1, [r4, #8]
 801301e:	f00f fa8e 	bl	802253e <memcpy>
 8013022:	e7b7      	b.n	8012f94 <ucdr_deserialize_uint16_t+0x58>

08013024 <ucdr_deserialize_endian_uint16_t>:
 8013024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013028:	4604      	mov	r4, r0
 801302a:	460e      	mov	r6, r1
 801302c:	2102      	movs	r1, #2
 801302e:	4615      	mov	r5, r2
 8013030:	f001 f8ce 	bl	80141d0 <ucdr_buffer_alignment>
 8013034:	4601      	mov	r1, r0
 8013036:	4620      	mov	r0, r4
 8013038:	f894 8015 	ldrb.w	r8, [r4, #21]
 801303c:	f001 f910 	bl	8014260 <ucdr_advance_buffer>
 8013040:	2102      	movs	r1, #2
 8013042:	4620      	mov	r0, r4
 8013044:	f001 f864 	bl	8014110 <ucdr_check_buffer_available_for>
 8013048:	bb70      	cbnz	r0, 80130a8 <ucdr_deserialize_endian_uint16_t+0x84>
 801304a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801304e:	454f      	cmp	r7, r9
 8013050:	d925      	bls.n	801309e <ucdr_deserialize_endian_uint16_t+0x7a>
 8013052:	6923      	ldr	r3, [r4, #16]
 8013054:	4620      	mov	r0, r4
 8013056:	60a7      	str	r7, [r4, #8]
 8013058:	eba7 0709 	sub.w	r7, r7, r9
 801305c:	443b      	add	r3, r7
 801305e:	f1c7 0a02 	rsb	sl, r7, #2
 8013062:	6123      	str	r3, [r4, #16]
 8013064:	4651      	mov	r1, sl
 8013066:	f001 f85f 	bl	8014128 <ucdr_check_final_buffer_behavior>
 801306a:	2800      	cmp	r0, #0
 801306c:	d034      	beq.n	80130d8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801306e:	2e01      	cmp	r6, #1
 8013070:	d043      	beq.n	80130fa <ucdr_deserialize_endian_uint16_t+0xd6>
 8013072:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013076:	702b      	strb	r3, [r5, #0]
 8013078:	2f00      	cmp	r7, #0
 801307a:	d03a      	beq.n	80130f2 <ucdr_deserialize_endian_uint16_t+0xce>
 801307c:	f899 3000 	ldrb.w	r3, [r9]
 8013080:	706b      	strb	r3, [r5, #1]
 8013082:	6923      	ldr	r3, [r4, #16]
 8013084:	2102      	movs	r1, #2
 8013086:	68a2      	ldr	r2, [r4, #8]
 8013088:	3302      	adds	r3, #2
 801308a:	7da0      	ldrb	r0, [r4, #22]
 801308c:	4452      	add	r2, sl
 801308e:	7561      	strb	r1, [r4, #21]
 8013090:	1bdb      	subs	r3, r3, r7
 8013092:	f080 0001 	eor.w	r0, r0, #1
 8013096:	60a2      	str	r2, [r4, #8]
 8013098:	6123      	str	r3, [r4, #16]
 801309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801309e:	2102      	movs	r1, #2
 80130a0:	4620      	mov	r0, r4
 80130a2:	f001 f841 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80130a6:	b178      	cbz	r0, 80130c8 <ucdr_deserialize_endian_uint16_t+0xa4>
 80130a8:	2e01      	cmp	r6, #1
 80130aa:	68a3      	ldr	r3, [r4, #8]
 80130ac:	d011      	beq.n	80130d2 <ucdr_deserialize_endian_uint16_t+0xae>
 80130ae:	785b      	ldrb	r3, [r3, #1]
 80130b0:	702b      	strb	r3, [r5, #0]
 80130b2:	68a3      	ldr	r3, [r4, #8]
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	706b      	strb	r3, [r5, #1]
 80130b8:	2102      	movs	r1, #2
 80130ba:	68a2      	ldr	r2, [r4, #8]
 80130bc:	6923      	ldr	r3, [r4, #16]
 80130be:	440a      	add	r2, r1
 80130c0:	7561      	strb	r1, [r4, #21]
 80130c2:	440b      	add	r3, r1
 80130c4:	60a2      	str	r2, [r4, #8]
 80130c6:	6123      	str	r3, [r4, #16]
 80130c8:	7da0      	ldrb	r0, [r4, #22]
 80130ca:	f080 0001 	eor.w	r0, r0, #1
 80130ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	802b      	strh	r3, [r5, #0]
 80130d6:	e7ef      	b.n	80130b8 <ucdr_deserialize_endian_uint16_t+0x94>
 80130d8:	68a2      	ldr	r2, [r4, #8]
 80130da:	6923      	ldr	r3, [r4, #16]
 80130dc:	1bd2      	subs	r2, r2, r7
 80130de:	7da0      	ldrb	r0, [r4, #22]
 80130e0:	1bdb      	subs	r3, r3, r7
 80130e2:	f884 8015 	strb.w	r8, [r4, #21]
 80130e6:	f080 0001 	eor.w	r0, r0, #1
 80130ea:	60a2      	str	r2, [r4, #8]
 80130ec:	6123      	str	r3, [r4, #16]
 80130ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130f2:	68a3      	ldr	r3, [r4, #8]
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	706b      	strb	r3, [r5, #1]
 80130f8:	e7c3      	b.n	8013082 <ucdr_deserialize_endian_uint16_t+0x5e>
 80130fa:	4649      	mov	r1, r9
 80130fc:	463a      	mov	r2, r7
 80130fe:	4628      	mov	r0, r5
 8013100:	f00f fa1d 	bl	802253e <memcpy>
 8013104:	4652      	mov	r2, sl
 8013106:	19e8      	adds	r0, r5, r7
 8013108:	68a1      	ldr	r1, [r4, #8]
 801310a:	f00f fa18 	bl	802253e <memcpy>
 801310e:	e7b8      	b.n	8013082 <ucdr_deserialize_endian_uint16_t+0x5e>

08013110 <ucdr_serialize_uint32_t>:
 8013110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013114:	b082      	sub	sp, #8
 8013116:	4604      	mov	r4, r0
 8013118:	9101      	str	r1, [sp, #4]
 801311a:	2104      	movs	r1, #4
 801311c:	f001 f858 	bl	80141d0 <ucdr_buffer_alignment>
 8013120:	4601      	mov	r1, r0
 8013122:	4620      	mov	r0, r4
 8013124:	7d67      	ldrb	r7, [r4, #21]
 8013126:	f001 f89b 	bl	8014260 <ucdr_advance_buffer>
 801312a:	2104      	movs	r1, #4
 801312c:	4620      	mov	r0, r4
 801312e:	f000 ffef 	bl	8014110 <ucdr_check_buffer_available_for>
 8013132:	2800      	cmp	r0, #0
 8013134:	d139      	bne.n	80131aa <ucdr_serialize_uint32_t+0x9a>
 8013136:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801313a:	42ab      	cmp	r3, r5
 801313c:	d930      	bls.n	80131a0 <ucdr_serialize_uint32_t+0x90>
 801313e:	1b5e      	subs	r6, r3, r5
 8013140:	60a3      	str	r3, [r4, #8]
 8013142:	6923      	ldr	r3, [r4, #16]
 8013144:	4620      	mov	r0, r4
 8013146:	f1c6 0804 	rsb	r8, r6, #4
 801314a:	4433      	add	r3, r6
 801314c:	4641      	mov	r1, r8
 801314e:	6123      	str	r3, [r4, #16]
 8013150:	f000 ffea 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013154:	2800      	cmp	r0, #0
 8013156:	d04c      	beq.n	80131f2 <ucdr_serialize_uint32_t+0xe2>
 8013158:	7d23      	ldrb	r3, [r4, #20]
 801315a:	2b01      	cmp	r3, #1
 801315c:	d063      	beq.n	8013226 <ucdr_serialize_uint32_t+0x116>
 801315e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013162:	702b      	strb	r3, [r5, #0]
 8013164:	2e00      	cmp	r6, #0
 8013166:	d051      	beq.n	801320c <ucdr_serialize_uint32_t+0xfc>
 8013168:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801316c:	2e01      	cmp	r6, #1
 801316e:	706b      	strb	r3, [r5, #1]
 8013170:	d050      	beq.n	8013214 <ucdr_serialize_uint32_t+0x104>
 8013172:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013176:	2e02      	cmp	r6, #2
 8013178:	70ab      	strb	r3, [r5, #2]
 801317a:	d04f      	beq.n	801321c <ucdr_serialize_uint32_t+0x10c>
 801317c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013180:	70eb      	strb	r3, [r5, #3]
 8013182:	6923      	ldr	r3, [r4, #16]
 8013184:	2104      	movs	r1, #4
 8013186:	68a2      	ldr	r2, [r4, #8]
 8013188:	3304      	adds	r3, #4
 801318a:	7da0      	ldrb	r0, [r4, #22]
 801318c:	4442      	add	r2, r8
 801318e:	7561      	strb	r1, [r4, #21]
 8013190:	1b9e      	subs	r6, r3, r6
 8013192:	f080 0001 	eor.w	r0, r0, #1
 8013196:	60a2      	str	r2, [r4, #8]
 8013198:	6126      	str	r6, [r4, #16]
 801319a:	b002      	add	sp, #8
 801319c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a0:	2104      	movs	r1, #4
 80131a2:	4620      	mov	r0, r4
 80131a4:	f000 ffc0 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80131a8:	b1d0      	cbz	r0, 80131e0 <ucdr_serialize_uint32_t+0xd0>
 80131aa:	7d23      	ldrb	r3, [r4, #20]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	68a3      	ldr	r3, [r4, #8]
 80131b0:	d01c      	beq.n	80131ec <ucdr_serialize_uint32_t+0xdc>
 80131b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80131b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80131be:	7018      	strb	r0, [r3, #0]
 80131c0:	68a3      	ldr	r3, [r4, #8]
 80131c2:	705a      	strb	r2, [r3, #1]
 80131c4:	68a3      	ldr	r3, [r4, #8]
 80131c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131ca:	7099      	strb	r1, [r3, #2]
 80131cc:	68a3      	ldr	r3, [r4, #8]
 80131ce:	70da      	strb	r2, [r3, #3]
 80131d0:	2104      	movs	r1, #4
 80131d2:	68a2      	ldr	r2, [r4, #8]
 80131d4:	6923      	ldr	r3, [r4, #16]
 80131d6:	440a      	add	r2, r1
 80131d8:	7561      	strb	r1, [r4, #21]
 80131da:	440b      	add	r3, r1
 80131dc:	60a2      	str	r2, [r4, #8]
 80131de:	6123      	str	r3, [r4, #16]
 80131e0:	7da0      	ldrb	r0, [r4, #22]
 80131e2:	f080 0001 	eor.w	r0, r0, #1
 80131e6:	b002      	add	sp, #8
 80131e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ec:	9a01      	ldr	r2, [sp, #4]
 80131ee:	601a      	str	r2, [r3, #0]
 80131f0:	e7ee      	b.n	80131d0 <ucdr_serialize_uint32_t+0xc0>
 80131f2:	68a2      	ldr	r2, [r4, #8]
 80131f4:	6923      	ldr	r3, [r4, #16]
 80131f6:	7da0      	ldrb	r0, [r4, #22]
 80131f8:	1b92      	subs	r2, r2, r6
 80131fa:	1b9b      	subs	r3, r3, r6
 80131fc:	7567      	strb	r7, [r4, #21]
 80131fe:	f080 0001 	eor.w	r0, r0, #1
 8013202:	60a2      	str	r2, [r4, #8]
 8013204:	6123      	str	r3, [r4, #16]
 8013206:	b002      	add	sp, #8
 8013208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801320c:	68a3      	ldr	r3, [r4, #8]
 801320e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013212:	701a      	strb	r2, [r3, #0]
 8013214:	68a3      	ldr	r3, [r4, #8]
 8013216:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801321a:	701a      	strb	r2, [r3, #0]
 801321c:	68a3      	ldr	r3, [r4, #8]
 801321e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013222:	701a      	strb	r2, [r3, #0]
 8013224:	e7ad      	b.n	8013182 <ucdr_serialize_uint32_t+0x72>
 8013226:	4628      	mov	r0, r5
 8013228:	ad01      	add	r5, sp, #4
 801322a:	4632      	mov	r2, r6
 801322c:	4629      	mov	r1, r5
 801322e:	f00f f986 	bl	802253e <memcpy>
 8013232:	4642      	mov	r2, r8
 8013234:	19a9      	adds	r1, r5, r6
 8013236:	68a0      	ldr	r0, [r4, #8]
 8013238:	f00f f981 	bl	802253e <memcpy>
 801323c:	e7a1      	b.n	8013182 <ucdr_serialize_uint32_t+0x72>
 801323e:	bf00      	nop

08013240 <ucdr_serialize_endian_uint32_t>:
 8013240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	b083      	sub	sp, #12
 8013248:	460d      	mov	r5, r1
 801324a:	2104      	movs	r1, #4
 801324c:	9201      	str	r2, [sp, #4]
 801324e:	f000 ffbf 	bl	80141d0 <ucdr_buffer_alignment>
 8013252:	4601      	mov	r1, r0
 8013254:	4620      	mov	r0, r4
 8013256:	f894 8015 	ldrb.w	r8, [r4, #21]
 801325a:	f001 f801 	bl	8014260 <ucdr_advance_buffer>
 801325e:	2104      	movs	r1, #4
 8013260:	4620      	mov	r0, r4
 8013262:	f000 ff55 	bl	8014110 <ucdr_check_buffer_available_for>
 8013266:	2800      	cmp	r0, #0
 8013268:	d138      	bne.n	80132dc <ucdr_serialize_endian_uint32_t+0x9c>
 801326a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801326e:	42b7      	cmp	r7, r6
 8013270:	d92f      	bls.n	80132d2 <ucdr_serialize_endian_uint32_t+0x92>
 8013272:	6923      	ldr	r3, [r4, #16]
 8013274:	4620      	mov	r0, r4
 8013276:	60a7      	str	r7, [r4, #8]
 8013278:	1bbf      	subs	r7, r7, r6
 801327a:	443b      	add	r3, r7
 801327c:	f1c7 0904 	rsb	r9, r7, #4
 8013280:	6123      	str	r3, [r4, #16]
 8013282:	4649      	mov	r1, r9
 8013284:	f000 ff50 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013288:	2800      	cmp	r0, #0
 801328a:	d04a      	beq.n	8013322 <ucdr_serialize_endian_uint32_t+0xe2>
 801328c:	2d01      	cmp	r5, #1
 801328e:	d063      	beq.n	8013358 <ucdr_serialize_endian_uint32_t+0x118>
 8013290:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013294:	7033      	strb	r3, [r6, #0]
 8013296:	2f00      	cmp	r7, #0
 8013298:	d051      	beq.n	801333e <ucdr_serialize_endian_uint32_t+0xfe>
 801329a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801329e:	2f01      	cmp	r7, #1
 80132a0:	7073      	strb	r3, [r6, #1]
 80132a2:	d050      	beq.n	8013346 <ucdr_serialize_endian_uint32_t+0x106>
 80132a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80132a8:	2f02      	cmp	r7, #2
 80132aa:	70b3      	strb	r3, [r6, #2]
 80132ac:	d04f      	beq.n	801334e <ucdr_serialize_endian_uint32_t+0x10e>
 80132ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80132b2:	70f3      	strb	r3, [r6, #3]
 80132b4:	6923      	ldr	r3, [r4, #16]
 80132b6:	2104      	movs	r1, #4
 80132b8:	68a2      	ldr	r2, [r4, #8]
 80132ba:	7da0      	ldrb	r0, [r4, #22]
 80132bc:	3304      	adds	r3, #4
 80132be:	444a      	add	r2, r9
 80132c0:	7561      	strb	r1, [r4, #21]
 80132c2:	1bdb      	subs	r3, r3, r7
 80132c4:	f080 0001 	eor.w	r0, r0, #1
 80132c8:	60a2      	str	r2, [r4, #8]
 80132ca:	6123      	str	r3, [r4, #16]
 80132cc:	b003      	add	sp, #12
 80132ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132d2:	2104      	movs	r1, #4
 80132d4:	4620      	mov	r0, r4
 80132d6:	f000 ff27 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80132da:	b1c8      	cbz	r0, 8013310 <ucdr_serialize_endian_uint32_t+0xd0>
 80132dc:	2d01      	cmp	r5, #1
 80132de:	68a3      	ldr	r3, [r4, #8]
 80132e0:	d01c      	beq.n	801331c <ucdr_serialize_endian_uint32_t+0xdc>
 80132e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80132e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80132ee:	7018      	strb	r0, [r3, #0]
 80132f0:	68a3      	ldr	r3, [r4, #8]
 80132f2:	705a      	strb	r2, [r3, #1]
 80132f4:	68a3      	ldr	r3, [r4, #8]
 80132f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80132fa:	7099      	strb	r1, [r3, #2]
 80132fc:	68a3      	ldr	r3, [r4, #8]
 80132fe:	70da      	strb	r2, [r3, #3]
 8013300:	2104      	movs	r1, #4
 8013302:	68a2      	ldr	r2, [r4, #8]
 8013304:	6923      	ldr	r3, [r4, #16]
 8013306:	440a      	add	r2, r1
 8013308:	7561      	strb	r1, [r4, #21]
 801330a:	440b      	add	r3, r1
 801330c:	60a2      	str	r2, [r4, #8]
 801330e:	6123      	str	r3, [r4, #16]
 8013310:	7da0      	ldrb	r0, [r4, #22]
 8013312:	f080 0001 	eor.w	r0, r0, #1
 8013316:	b003      	add	sp, #12
 8013318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801331c:	9a01      	ldr	r2, [sp, #4]
 801331e:	601a      	str	r2, [r3, #0]
 8013320:	e7ee      	b.n	8013300 <ucdr_serialize_endian_uint32_t+0xc0>
 8013322:	68a2      	ldr	r2, [r4, #8]
 8013324:	6923      	ldr	r3, [r4, #16]
 8013326:	7da0      	ldrb	r0, [r4, #22]
 8013328:	1bd2      	subs	r2, r2, r7
 801332a:	1bdb      	subs	r3, r3, r7
 801332c:	f884 8015 	strb.w	r8, [r4, #21]
 8013330:	f080 0001 	eor.w	r0, r0, #1
 8013334:	60a2      	str	r2, [r4, #8]
 8013336:	6123      	str	r3, [r4, #16]
 8013338:	b003      	add	sp, #12
 801333a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801333e:	68a3      	ldr	r3, [r4, #8]
 8013340:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013344:	701a      	strb	r2, [r3, #0]
 8013346:	68a3      	ldr	r3, [r4, #8]
 8013348:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801334c:	701a      	strb	r2, [r3, #0]
 801334e:	68a3      	ldr	r3, [r4, #8]
 8013350:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013354:	701a      	strb	r2, [r3, #0]
 8013356:	e7ad      	b.n	80132b4 <ucdr_serialize_endian_uint32_t+0x74>
 8013358:	ad01      	add	r5, sp, #4
 801335a:	463a      	mov	r2, r7
 801335c:	4630      	mov	r0, r6
 801335e:	4629      	mov	r1, r5
 8013360:	f00f f8ed 	bl	802253e <memcpy>
 8013364:	464a      	mov	r2, r9
 8013366:	19e9      	adds	r1, r5, r7
 8013368:	68a0      	ldr	r0, [r4, #8]
 801336a:	f00f f8e8 	bl	802253e <memcpy>
 801336e:	e7a1      	b.n	80132b4 <ucdr_serialize_endian_uint32_t+0x74>

08013370 <ucdr_deserialize_uint32_t>:
 8013370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013374:	4604      	mov	r4, r0
 8013376:	460d      	mov	r5, r1
 8013378:	2104      	movs	r1, #4
 801337a:	f000 ff29 	bl	80141d0 <ucdr_buffer_alignment>
 801337e:	4601      	mov	r1, r0
 8013380:	4620      	mov	r0, r4
 8013382:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013386:	f000 ff6b 	bl	8014260 <ucdr_advance_buffer>
 801338a:	2104      	movs	r1, #4
 801338c:	4620      	mov	r0, r4
 801338e:	f000 febf 	bl	8014110 <ucdr_check_buffer_available_for>
 8013392:	2800      	cmp	r0, #0
 8013394:	d138      	bne.n	8013408 <ucdr_deserialize_uint32_t+0x98>
 8013396:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801339a:	42b7      	cmp	r7, r6
 801339c:	d92f      	bls.n	80133fe <ucdr_deserialize_uint32_t+0x8e>
 801339e:	6923      	ldr	r3, [r4, #16]
 80133a0:	4620      	mov	r0, r4
 80133a2:	60a7      	str	r7, [r4, #8]
 80133a4:	1bbf      	subs	r7, r7, r6
 80133a6:	443b      	add	r3, r7
 80133a8:	f1c7 0904 	rsb	r9, r7, #4
 80133ac:	6123      	str	r3, [r4, #16]
 80133ae:	4649      	mov	r1, r9
 80133b0:	f000 feba 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80133b4:	2800      	cmp	r0, #0
 80133b6:	d046      	beq.n	8013446 <ucdr_deserialize_uint32_t+0xd6>
 80133b8:	7d23      	ldrb	r3, [r4, #20]
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d05c      	beq.n	8013478 <ucdr_deserialize_uint32_t+0x108>
 80133be:	78f3      	ldrb	r3, [r6, #3]
 80133c0:	702b      	strb	r3, [r5, #0]
 80133c2:	2f00      	cmp	r7, #0
 80133c4:	d04c      	beq.n	8013460 <ucdr_deserialize_uint32_t+0xf0>
 80133c6:	78b3      	ldrb	r3, [r6, #2]
 80133c8:	2f01      	cmp	r7, #1
 80133ca:	706b      	strb	r3, [r5, #1]
 80133cc:	f105 0302 	add.w	r3, r5, #2
 80133d0:	d04a      	beq.n	8013468 <ucdr_deserialize_uint32_t+0xf8>
 80133d2:	7873      	ldrb	r3, [r6, #1]
 80133d4:	2f02      	cmp	r7, #2
 80133d6:	70ab      	strb	r3, [r5, #2]
 80133d8:	f105 0303 	add.w	r3, r5, #3
 80133dc:	d048      	beq.n	8013470 <ucdr_deserialize_uint32_t+0x100>
 80133de:	7833      	ldrb	r3, [r6, #0]
 80133e0:	70eb      	strb	r3, [r5, #3]
 80133e2:	6923      	ldr	r3, [r4, #16]
 80133e4:	2104      	movs	r1, #4
 80133e6:	68a2      	ldr	r2, [r4, #8]
 80133e8:	3304      	adds	r3, #4
 80133ea:	7da0      	ldrb	r0, [r4, #22]
 80133ec:	444a      	add	r2, r9
 80133ee:	7561      	strb	r1, [r4, #21]
 80133f0:	1bdb      	subs	r3, r3, r7
 80133f2:	f080 0001 	eor.w	r0, r0, #1
 80133f6:	60a2      	str	r2, [r4, #8]
 80133f8:	6123      	str	r3, [r4, #16]
 80133fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133fe:	2104      	movs	r1, #4
 8013400:	4620      	mov	r0, r4
 8013402:	f000 fe91 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013406:	b1b0      	cbz	r0, 8013436 <ucdr_deserialize_uint32_t+0xc6>
 8013408:	7d23      	ldrb	r3, [r4, #20]
 801340a:	2b01      	cmp	r3, #1
 801340c:	68a3      	ldr	r3, [r4, #8]
 801340e:	d017      	beq.n	8013440 <ucdr_deserialize_uint32_t+0xd0>
 8013410:	78db      	ldrb	r3, [r3, #3]
 8013412:	702b      	strb	r3, [r5, #0]
 8013414:	68a3      	ldr	r3, [r4, #8]
 8013416:	789b      	ldrb	r3, [r3, #2]
 8013418:	706b      	strb	r3, [r5, #1]
 801341a:	68a3      	ldr	r3, [r4, #8]
 801341c:	785b      	ldrb	r3, [r3, #1]
 801341e:	70ab      	strb	r3, [r5, #2]
 8013420:	68a3      	ldr	r3, [r4, #8]
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	70eb      	strb	r3, [r5, #3]
 8013426:	2104      	movs	r1, #4
 8013428:	68a2      	ldr	r2, [r4, #8]
 801342a:	6923      	ldr	r3, [r4, #16]
 801342c:	440a      	add	r2, r1
 801342e:	7561      	strb	r1, [r4, #21]
 8013430:	440b      	add	r3, r1
 8013432:	60a2      	str	r2, [r4, #8]
 8013434:	6123      	str	r3, [r4, #16]
 8013436:	7da0      	ldrb	r0, [r4, #22]
 8013438:	f080 0001 	eor.w	r0, r0, #1
 801343c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	602b      	str	r3, [r5, #0]
 8013444:	e7ef      	b.n	8013426 <ucdr_deserialize_uint32_t+0xb6>
 8013446:	68a2      	ldr	r2, [r4, #8]
 8013448:	6923      	ldr	r3, [r4, #16]
 801344a:	1bd2      	subs	r2, r2, r7
 801344c:	7da0      	ldrb	r0, [r4, #22]
 801344e:	1bdb      	subs	r3, r3, r7
 8013450:	f884 8015 	strb.w	r8, [r4, #21]
 8013454:	f080 0001 	eor.w	r0, r0, #1
 8013458:	60a2      	str	r2, [r4, #8]
 801345a:	6123      	str	r3, [r4, #16]
 801345c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013460:	68a3      	ldr	r3, [r4, #8]
 8013462:	789b      	ldrb	r3, [r3, #2]
 8013464:	706b      	strb	r3, [r5, #1]
 8013466:	1cab      	adds	r3, r5, #2
 8013468:	68a2      	ldr	r2, [r4, #8]
 801346a:	7852      	ldrb	r2, [r2, #1]
 801346c:	f803 2b01 	strb.w	r2, [r3], #1
 8013470:	68a2      	ldr	r2, [r4, #8]
 8013472:	7812      	ldrb	r2, [r2, #0]
 8013474:	701a      	strb	r2, [r3, #0]
 8013476:	e7b4      	b.n	80133e2 <ucdr_deserialize_uint32_t+0x72>
 8013478:	4631      	mov	r1, r6
 801347a:	463a      	mov	r2, r7
 801347c:	4628      	mov	r0, r5
 801347e:	f00f f85e 	bl	802253e <memcpy>
 8013482:	464a      	mov	r2, r9
 8013484:	19e8      	adds	r0, r5, r7
 8013486:	68a1      	ldr	r1, [r4, #8]
 8013488:	f00f f859 	bl	802253e <memcpy>
 801348c:	e7a9      	b.n	80133e2 <ucdr_deserialize_uint32_t+0x72>
 801348e:	bf00      	nop

08013490 <ucdr_deserialize_endian_uint32_t>:
 8013490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013494:	4604      	mov	r4, r0
 8013496:	460e      	mov	r6, r1
 8013498:	2104      	movs	r1, #4
 801349a:	4615      	mov	r5, r2
 801349c:	f000 fe98 	bl	80141d0 <ucdr_buffer_alignment>
 80134a0:	4601      	mov	r1, r0
 80134a2:	4620      	mov	r0, r4
 80134a4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80134a8:	f000 feda 	bl	8014260 <ucdr_advance_buffer>
 80134ac:	2104      	movs	r1, #4
 80134ae:	4620      	mov	r0, r4
 80134b0:	f000 fe2e 	bl	8014110 <ucdr_check_buffer_available_for>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d13c      	bne.n	8013532 <ucdr_deserialize_endian_uint32_t+0xa2>
 80134b8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80134bc:	42bb      	cmp	r3, r7
 80134be:	d933      	bls.n	8013528 <ucdr_deserialize_endian_uint32_t+0x98>
 80134c0:	eba3 0907 	sub.w	r9, r3, r7
 80134c4:	60a3      	str	r3, [r4, #8]
 80134c6:	6923      	ldr	r3, [r4, #16]
 80134c8:	4620      	mov	r0, r4
 80134ca:	f1c9 0a04 	rsb	sl, r9, #4
 80134ce:	444b      	add	r3, r9
 80134d0:	4651      	mov	r1, sl
 80134d2:	6123      	str	r3, [r4, #16]
 80134d4:	f000 fe28 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80134d8:	2800      	cmp	r0, #0
 80134da:	d048      	beq.n	801356e <ucdr_deserialize_endian_uint32_t+0xde>
 80134dc:	2e01      	cmp	r6, #1
 80134de:	d061      	beq.n	80135a4 <ucdr_deserialize_endian_uint32_t+0x114>
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	702b      	strb	r3, [r5, #0]
 80134e4:	f1b9 0f00 	cmp.w	r9, #0
 80134e8:	d050      	beq.n	801358c <ucdr_deserialize_endian_uint32_t+0xfc>
 80134ea:	78bb      	ldrb	r3, [r7, #2]
 80134ec:	f1b9 0f01 	cmp.w	r9, #1
 80134f0:	706b      	strb	r3, [r5, #1]
 80134f2:	f105 0302 	add.w	r3, r5, #2
 80134f6:	d04d      	beq.n	8013594 <ucdr_deserialize_endian_uint32_t+0x104>
 80134f8:	787b      	ldrb	r3, [r7, #1]
 80134fa:	f1b9 0f02 	cmp.w	r9, #2
 80134fe:	70ab      	strb	r3, [r5, #2]
 8013500:	f105 0303 	add.w	r3, r5, #3
 8013504:	d04a      	beq.n	801359c <ucdr_deserialize_endian_uint32_t+0x10c>
 8013506:	783b      	ldrb	r3, [r7, #0]
 8013508:	70eb      	strb	r3, [r5, #3]
 801350a:	6923      	ldr	r3, [r4, #16]
 801350c:	2104      	movs	r1, #4
 801350e:	68a2      	ldr	r2, [r4, #8]
 8013510:	3304      	adds	r3, #4
 8013512:	7da0      	ldrb	r0, [r4, #22]
 8013514:	4452      	add	r2, sl
 8013516:	7561      	strb	r1, [r4, #21]
 8013518:	eba3 0309 	sub.w	r3, r3, r9
 801351c:	f080 0001 	eor.w	r0, r0, #1
 8013520:	60a2      	str	r2, [r4, #8]
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013528:	2104      	movs	r1, #4
 801352a:	4620      	mov	r0, r4
 801352c:	f000 fdfc 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013530:	b1a8      	cbz	r0, 801355e <ucdr_deserialize_endian_uint32_t+0xce>
 8013532:	2e01      	cmp	r6, #1
 8013534:	68a3      	ldr	r3, [r4, #8]
 8013536:	d017      	beq.n	8013568 <ucdr_deserialize_endian_uint32_t+0xd8>
 8013538:	78db      	ldrb	r3, [r3, #3]
 801353a:	702b      	strb	r3, [r5, #0]
 801353c:	68a3      	ldr	r3, [r4, #8]
 801353e:	789b      	ldrb	r3, [r3, #2]
 8013540:	706b      	strb	r3, [r5, #1]
 8013542:	68a3      	ldr	r3, [r4, #8]
 8013544:	785b      	ldrb	r3, [r3, #1]
 8013546:	70ab      	strb	r3, [r5, #2]
 8013548:	68a3      	ldr	r3, [r4, #8]
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	70eb      	strb	r3, [r5, #3]
 801354e:	2104      	movs	r1, #4
 8013550:	68a2      	ldr	r2, [r4, #8]
 8013552:	6923      	ldr	r3, [r4, #16]
 8013554:	440a      	add	r2, r1
 8013556:	7561      	strb	r1, [r4, #21]
 8013558:	440b      	add	r3, r1
 801355a:	60a2      	str	r2, [r4, #8]
 801355c:	6123      	str	r3, [r4, #16]
 801355e:	7da0      	ldrb	r0, [r4, #22]
 8013560:	f080 0001 	eor.w	r0, r0, #1
 8013564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	602b      	str	r3, [r5, #0]
 801356c:	e7ef      	b.n	801354e <ucdr_deserialize_endian_uint32_t+0xbe>
 801356e:	68a2      	ldr	r2, [r4, #8]
 8013570:	6923      	ldr	r3, [r4, #16]
 8013572:	eba2 0209 	sub.w	r2, r2, r9
 8013576:	7da0      	ldrb	r0, [r4, #22]
 8013578:	eba3 0309 	sub.w	r3, r3, r9
 801357c:	f884 8015 	strb.w	r8, [r4, #21]
 8013580:	f080 0001 	eor.w	r0, r0, #1
 8013584:	60a2      	str	r2, [r4, #8]
 8013586:	6123      	str	r3, [r4, #16]
 8013588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801358c:	68a3      	ldr	r3, [r4, #8]
 801358e:	789b      	ldrb	r3, [r3, #2]
 8013590:	706b      	strb	r3, [r5, #1]
 8013592:	1cab      	adds	r3, r5, #2
 8013594:	68a2      	ldr	r2, [r4, #8]
 8013596:	7852      	ldrb	r2, [r2, #1]
 8013598:	f803 2b01 	strb.w	r2, [r3], #1
 801359c:	68a2      	ldr	r2, [r4, #8]
 801359e:	7812      	ldrb	r2, [r2, #0]
 80135a0:	701a      	strb	r2, [r3, #0]
 80135a2:	e7b2      	b.n	801350a <ucdr_deserialize_endian_uint32_t+0x7a>
 80135a4:	4639      	mov	r1, r7
 80135a6:	464a      	mov	r2, r9
 80135a8:	4628      	mov	r0, r5
 80135aa:	f00e ffc8 	bl	802253e <memcpy>
 80135ae:	4652      	mov	r2, sl
 80135b0:	eb05 0009 	add.w	r0, r5, r9
 80135b4:	68a1      	ldr	r1, [r4, #8]
 80135b6:	f00e ffc2 	bl	802253e <memcpy>
 80135ba:	e7a6      	b.n	801350a <ucdr_deserialize_endian_uint32_t+0x7a>

080135bc <ucdr_serialize_uint64_t>:
 80135bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135c0:	4604      	mov	r4, r0
 80135c2:	b082      	sub	sp, #8
 80135c4:	2108      	movs	r1, #8
 80135c6:	e9cd 2300 	strd	r2, r3, [sp]
 80135ca:	f000 fe01 	bl	80141d0 <ucdr_buffer_alignment>
 80135ce:	4601      	mov	r1, r0
 80135d0:	4620      	mov	r0, r4
 80135d2:	7d67      	ldrb	r7, [r4, #21]
 80135d4:	f000 fe44 	bl	8014260 <ucdr_advance_buffer>
 80135d8:	2108      	movs	r1, #8
 80135da:	4620      	mov	r0, r4
 80135dc:	f000 fd98 	bl	8014110 <ucdr_check_buffer_available_for>
 80135e0:	2800      	cmp	r0, #0
 80135e2:	d14e      	bne.n	8013682 <ucdr_serialize_uint64_t+0xc6>
 80135e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80135e8:	42ab      	cmp	r3, r5
 80135ea:	d945      	bls.n	8013678 <ucdr_serialize_uint64_t+0xbc>
 80135ec:	1b5e      	subs	r6, r3, r5
 80135ee:	60a3      	str	r3, [r4, #8]
 80135f0:	6923      	ldr	r3, [r4, #16]
 80135f2:	4620      	mov	r0, r4
 80135f4:	f1c6 0808 	rsb	r8, r6, #8
 80135f8:	4433      	add	r3, r6
 80135fa:	4641      	mov	r1, r8
 80135fc:	6123      	str	r3, [r4, #16]
 80135fe:	f000 fd93 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013602:	2800      	cmp	r0, #0
 8013604:	d074      	beq.n	80136f0 <ucdr_serialize_uint64_t+0x134>
 8013606:	7d23      	ldrb	r3, [r4, #20]
 8013608:	2b01      	cmp	r3, #1
 801360a:	f000 809b 	beq.w	8013744 <ucdr_serialize_uint64_t+0x188>
 801360e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013612:	702b      	strb	r3, [r5, #0]
 8013614:	2e00      	cmp	r6, #0
 8013616:	d078      	beq.n	801370a <ucdr_serialize_uint64_t+0x14e>
 8013618:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801361c:	2e01      	cmp	r6, #1
 801361e:	706b      	strb	r3, [r5, #1]
 8013620:	d077      	beq.n	8013712 <ucdr_serialize_uint64_t+0x156>
 8013622:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013626:	2e02      	cmp	r6, #2
 8013628:	70ab      	strb	r3, [r5, #2]
 801362a:	d076      	beq.n	801371a <ucdr_serialize_uint64_t+0x15e>
 801362c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013630:	2e03      	cmp	r6, #3
 8013632:	70eb      	strb	r3, [r5, #3]
 8013634:	d075      	beq.n	8013722 <ucdr_serialize_uint64_t+0x166>
 8013636:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801363a:	2e04      	cmp	r6, #4
 801363c:	712b      	strb	r3, [r5, #4]
 801363e:	d074      	beq.n	801372a <ucdr_serialize_uint64_t+0x16e>
 8013640:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013644:	2e05      	cmp	r6, #5
 8013646:	716b      	strb	r3, [r5, #5]
 8013648:	d073      	beq.n	8013732 <ucdr_serialize_uint64_t+0x176>
 801364a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801364e:	2e06      	cmp	r6, #6
 8013650:	71ab      	strb	r3, [r5, #6]
 8013652:	d072      	beq.n	801373a <ucdr_serialize_uint64_t+0x17e>
 8013654:	f89d 3000 	ldrb.w	r3, [sp]
 8013658:	71eb      	strb	r3, [r5, #7]
 801365a:	6923      	ldr	r3, [r4, #16]
 801365c:	2108      	movs	r1, #8
 801365e:	68a2      	ldr	r2, [r4, #8]
 8013660:	3308      	adds	r3, #8
 8013662:	7da0      	ldrb	r0, [r4, #22]
 8013664:	4442      	add	r2, r8
 8013666:	7561      	strb	r1, [r4, #21]
 8013668:	1b9e      	subs	r6, r3, r6
 801366a:	f080 0001 	eor.w	r0, r0, #1
 801366e:	60a2      	str	r2, [r4, #8]
 8013670:	6126      	str	r6, [r4, #16]
 8013672:	b002      	add	sp, #8
 8013674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013678:	2108      	movs	r1, #8
 801367a:	4620      	mov	r0, r4
 801367c:	f000 fd54 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013680:	b350      	cbz	r0, 80136d8 <ucdr_serialize_uint64_t+0x11c>
 8013682:	7d23      	ldrb	r3, [r4, #20]
 8013684:	2b01      	cmp	r3, #1
 8013686:	d02d      	beq.n	80136e4 <ucdr_serialize_uint64_t+0x128>
 8013688:	68a3      	ldr	r3, [r4, #8]
 801368a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801368e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013692:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013696:	7018      	strb	r0, [r3, #0]
 8013698:	68a3      	ldr	r3, [r4, #8]
 801369a:	705a      	strb	r2, [r3, #1]
 801369c:	68a3      	ldr	r3, [r4, #8]
 801369e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80136a6:	7099      	strb	r1, [r3, #2]
 80136a8:	68a3      	ldr	r3, [r4, #8]
 80136aa:	70da      	strb	r2, [r3, #3]
 80136ac:	68a3      	ldr	r3, [r4, #8]
 80136ae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80136b2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80136b6:	7118      	strb	r0, [r3, #4]
 80136b8:	68a3      	ldr	r3, [r4, #8]
 80136ba:	715a      	strb	r2, [r3, #5]
 80136bc:	68a3      	ldr	r3, [r4, #8]
 80136be:	f89d 2000 	ldrb.w	r2, [sp]
 80136c2:	7199      	strb	r1, [r3, #6]
 80136c4:	68a3      	ldr	r3, [r4, #8]
 80136c6:	71da      	strb	r2, [r3, #7]
 80136c8:	2108      	movs	r1, #8
 80136ca:	68a2      	ldr	r2, [r4, #8]
 80136cc:	6923      	ldr	r3, [r4, #16]
 80136ce:	440a      	add	r2, r1
 80136d0:	7561      	strb	r1, [r4, #21]
 80136d2:	440b      	add	r3, r1
 80136d4:	60a2      	str	r2, [r4, #8]
 80136d6:	6123      	str	r3, [r4, #16]
 80136d8:	7da0      	ldrb	r0, [r4, #22]
 80136da:	f080 0001 	eor.w	r0, r0, #1
 80136de:	b002      	add	sp, #8
 80136e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e4:	466b      	mov	r3, sp
 80136e6:	68a2      	ldr	r2, [r4, #8]
 80136e8:	cb03      	ldmia	r3!, {r0, r1}
 80136ea:	6010      	str	r0, [r2, #0]
 80136ec:	6051      	str	r1, [r2, #4]
 80136ee:	e7eb      	b.n	80136c8 <ucdr_serialize_uint64_t+0x10c>
 80136f0:	68a2      	ldr	r2, [r4, #8]
 80136f2:	6923      	ldr	r3, [r4, #16]
 80136f4:	7da0      	ldrb	r0, [r4, #22]
 80136f6:	1b92      	subs	r2, r2, r6
 80136f8:	1b9b      	subs	r3, r3, r6
 80136fa:	7567      	strb	r7, [r4, #21]
 80136fc:	f080 0001 	eor.w	r0, r0, #1
 8013700:	60a2      	str	r2, [r4, #8]
 8013702:	6123      	str	r3, [r4, #16]
 8013704:	b002      	add	sp, #8
 8013706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801370a:	68a3      	ldr	r3, [r4, #8]
 801370c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013710:	701a      	strb	r2, [r3, #0]
 8013712:	68a3      	ldr	r3, [r4, #8]
 8013714:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013718:	701a      	strb	r2, [r3, #0]
 801371a:	68a3      	ldr	r3, [r4, #8]
 801371c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013720:	701a      	strb	r2, [r3, #0]
 8013722:	68a3      	ldr	r3, [r4, #8]
 8013724:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013728:	701a      	strb	r2, [r3, #0]
 801372a:	68a3      	ldr	r3, [r4, #8]
 801372c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013730:	701a      	strb	r2, [r3, #0]
 8013732:	68a3      	ldr	r3, [r4, #8]
 8013734:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013738:	701a      	strb	r2, [r3, #0]
 801373a:	68a3      	ldr	r3, [r4, #8]
 801373c:	f89d 2000 	ldrb.w	r2, [sp]
 8013740:	701a      	strb	r2, [r3, #0]
 8013742:	e78a      	b.n	801365a <ucdr_serialize_uint64_t+0x9e>
 8013744:	4628      	mov	r0, r5
 8013746:	466d      	mov	r5, sp
 8013748:	4632      	mov	r2, r6
 801374a:	4629      	mov	r1, r5
 801374c:	f00e fef7 	bl	802253e <memcpy>
 8013750:	4642      	mov	r2, r8
 8013752:	19a9      	adds	r1, r5, r6
 8013754:	68a0      	ldr	r0, [r4, #8]
 8013756:	f00e fef2 	bl	802253e <memcpy>
 801375a:	e77e      	b.n	801365a <ucdr_serialize_uint64_t+0x9e>

0801375c <ucdr_serialize_int16_t>:
 801375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013760:	460b      	mov	r3, r1
 8013762:	b082      	sub	sp, #8
 8013764:	4604      	mov	r4, r0
 8013766:	2102      	movs	r1, #2
 8013768:	f8ad 3006 	strh.w	r3, [sp, #6]
 801376c:	f000 fd30 	bl	80141d0 <ucdr_buffer_alignment>
 8013770:	4601      	mov	r1, r0
 8013772:	4620      	mov	r0, r4
 8013774:	7d67      	ldrb	r7, [r4, #21]
 8013776:	f000 fd73 	bl	8014260 <ucdr_advance_buffer>
 801377a:	2102      	movs	r1, #2
 801377c:	4620      	mov	r0, r4
 801377e:	f000 fcc7 	bl	8014110 <ucdr_check_buffer_available_for>
 8013782:	bb78      	cbnz	r0, 80137e4 <ucdr_serialize_int16_t+0x88>
 8013784:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013788:	42ab      	cmp	r3, r5
 801378a:	d926      	bls.n	80137da <ucdr_serialize_int16_t+0x7e>
 801378c:	1b5e      	subs	r6, r3, r5
 801378e:	60a3      	str	r3, [r4, #8]
 8013790:	6923      	ldr	r3, [r4, #16]
 8013792:	4620      	mov	r0, r4
 8013794:	f1c6 0802 	rsb	r8, r6, #2
 8013798:	4433      	add	r3, r6
 801379a:	4641      	mov	r1, r8
 801379c:	6123      	str	r3, [r4, #16]
 801379e:	f000 fcc3 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d03b      	beq.n	801381e <ucdr_serialize_int16_t+0xc2>
 80137a6:	7d23      	ldrb	r3, [r4, #20]
 80137a8:	2b01      	cmp	r3, #1
 80137aa:	d04a      	beq.n	8013842 <ucdr_serialize_int16_t+0xe6>
 80137ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80137b0:	702b      	strb	r3, [r5, #0]
 80137b2:	2e00      	cmp	r6, #0
 80137b4:	d040      	beq.n	8013838 <ucdr_serialize_int16_t+0xdc>
 80137b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80137ba:	706b      	strb	r3, [r5, #1]
 80137bc:	6923      	ldr	r3, [r4, #16]
 80137be:	2102      	movs	r1, #2
 80137c0:	68a2      	ldr	r2, [r4, #8]
 80137c2:	3302      	adds	r3, #2
 80137c4:	7da0      	ldrb	r0, [r4, #22]
 80137c6:	4442      	add	r2, r8
 80137c8:	7561      	strb	r1, [r4, #21]
 80137ca:	1b9e      	subs	r6, r3, r6
 80137cc:	f080 0001 	eor.w	r0, r0, #1
 80137d0:	60a2      	str	r2, [r4, #8]
 80137d2:	6126      	str	r6, [r4, #16]
 80137d4:	b002      	add	sp, #8
 80137d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137da:	2102      	movs	r1, #2
 80137dc:	4620      	mov	r0, r4
 80137de:	f000 fca3 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80137e2:	b190      	cbz	r0, 801380a <ucdr_serialize_int16_t+0xae>
 80137e4:	7d23      	ldrb	r3, [r4, #20]
 80137e6:	2b01      	cmp	r3, #1
 80137e8:	68a3      	ldr	r3, [r4, #8]
 80137ea:	d014      	beq.n	8013816 <ucdr_serialize_int16_t+0xba>
 80137ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80137f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137f4:	7019      	strb	r1, [r3, #0]
 80137f6:	68a3      	ldr	r3, [r4, #8]
 80137f8:	705a      	strb	r2, [r3, #1]
 80137fa:	2102      	movs	r1, #2
 80137fc:	68a2      	ldr	r2, [r4, #8]
 80137fe:	6923      	ldr	r3, [r4, #16]
 8013800:	440a      	add	r2, r1
 8013802:	7561      	strb	r1, [r4, #21]
 8013804:	440b      	add	r3, r1
 8013806:	60a2      	str	r2, [r4, #8]
 8013808:	6123      	str	r3, [r4, #16]
 801380a:	7da0      	ldrb	r0, [r4, #22]
 801380c:	f080 0001 	eor.w	r0, r0, #1
 8013810:	b002      	add	sp, #8
 8013812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013816:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801381a:	801a      	strh	r2, [r3, #0]
 801381c:	e7ed      	b.n	80137fa <ucdr_serialize_int16_t+0x9e>
 801381e:	68a2      	ldr	r2, [r4, #8]
 8013820:	6923      	ldr	r3, [r4, #16]
 8013822:	7da0      	ldrb	r0, [r4, #22]
 8013824:	1b92      	subs	r2, r2, r6
 8013826:	1b9b      	subs	r3, r3, r6
 8013828:	7567      	strb	r7, [r4, #21]
 801382a:	f080 0001 	eor.w	r0, r0, #1
 801382e:	60a2      	str	r2, [r4, #8]
 8013830:	6123      	str	r3, [r4, #16]
 8013832:	b002      	add	sp, #8
 8013834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013838:	68a3      	ldr	r3, [r4, #8]
 801383a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801383e:	701a      	strb	r2, [r3, #0]
 8013840:	e7bc      	b.n	80137bc <ucdr_serialize_int16_t+0x60>
 8013842:	4628      	mov	r0, r5
 8013844:	f10d 0506 	add.w	r5, sp, #6
 8013848:	4632      	mov	r2, r6
 801384a:	4629      	mov	r1, r5
 801384c:	f00e fe77 	bl	802253e <memcpy>
 8013850:	4642      	mov	r2, r8
 8013852:	19a9      	adds	r1, r5, r6
 8013854:	68a0      	ldr	r0, [r4, #8]
 8013856:	f00e fe72 	bl	802253e <memcpy>
 801385a:	e7af      	b.n	80137bc <ucdr_serialize_int16_t+0x60>

0801385c <ucdr_deserialize_int16_t>:
 801385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013860:	4604      	mov	r4, r0
 8013862:	460d      	mov	r5, r1
 8013864:	2102      	movs	r1, #2
 8013866:	f000 fcb3 	bl	80141d0 <ucdr_buffer_alignment>
 801386a:	4601      	mov	r1, r0
 801386c:	4620      	mov	r0, r4
 801386e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013872:	f000 fcf5 	bl	8014260 <ucdr_advance_buffer>
 8013876:	2102      	movs	r1, #2
 8013878:	4620      	mov	r0, r4
 801387a:	f000 fc49 	bl	8014110 <ucdr_check_buffer_available_for>
 801387e:	bb60      	cbnz	r0, 80138da <ucdr_deserialize_int16_t+0x7e>
 8013880:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013884:	42be      	cmp	r6, r7
 8013886:	d923      	bls.n	80138d0 <ucdr_deserialize_int16_t+0x74>
 8013888:	6923      	ldr	r3, [r4, #16]
 801388a:	4620      	mov	r0, r4
 801388c:	60a6      	str	r6, [r4, #8]
 801388e:	1bf6      	subs	r6, r6, r7
 8013890:	4433      	add	r3, r6
 8013892:	f1c6 0902 	rsb	r9, r6, #2
 8013896:	6123      	str	r3, [r4, #16]
 8013898:	4649      	mov	r1, r9
 801389a:	f000 fc45 	bl	8014128 <ucdr_check_final_buffer_behavior>
 801389e:	2800      	cmp	r0, #0
 80138a0:	d034      	beq.n	801390c <ucdr_deserialize_int16_t+0xb0>
 80138a2:	7d23      	ldrb	r3, [r4, #20]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d042      	beq.n	801392e <ucdr_deserialize_int16_t+0xd2>
 80138a8:	787b      	ldrb	r3, [r7, #1]
 80138aa:	702b      	strb	r3, [r5, #0]
 80138ac:	2e00      	cmp	r6, #0
 80138ae:	d03a      	beq.n	8013926 <ucdr_deserialize_int16_t+0xca>
 80138b0:	783b      	ldrb	r3, [r7, #0]
 80138b2:	706b      	strb	r3, [r5, #1]
 80138b4:	6923      	ldr	r3, [r4, #16]
 80138b6:	2102      	movs	r1, #2
 80138b8:	68a2      	ldr	r2, [r4, #8]
 80138ba:	3302      	adds	r3, #2
 80138bc:	7da0      	ldrb	r0, [r4, #22]
 80138be:	444a      	add	r2, r9
 80138c0:	7561      	strb	r1, [r4, #21]
 80138c2:	1b9b      	subs	r3, r3, r6
 80138c4:	f080 0001 	eor.w	r0, r0, #1
 80138c8:	60a2      	str	r2, [r4, #8]
 80138ca:	6123      	str	r3, [r4, #16]
 80138cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d0:	2102      	movs	r1, #2
 80138d2:	4620      	mov	r0, r4
 80138d4:	f000 fc28 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80138d8:	b180      	cbz	r0, 80138fc <ucdr_deserialize_int16_t+0xa0>
 80138da:	7d23      	ldrb	r3, [r4, #20]
 80138dc:	2b01      	cmp	r3, #1
 80138de:	68a3      	ldr	r3, [r4, #8]
 80138e0:	d011      	beq.n	8013906 <ucdr_deserialize_int16_t+0xaa>
 80138e2:	785b      	ldrb	r3, [r3, #1]
 80138e4:	702b      	strb	r3, [r5, #0]
 80138e6:	68a3      	ldr	r3, [r4, #8]
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	706b      	strb	r3, [r5, #1]
 80138ec:	2102      	movs	r1, #2
 80138ee:	68a2      	ldr	r2, [r4, #8]
 80138f0:	6923      	ldr	r3, [r4, #16]
 80138f2:	440a      	add	r2, r1
 80138f4:	7561      	strb	r1, [r4, #21]
 80138f6:	440b      	add	r3, r1
 80138f8:	60a2      	str	r2, [r4, #8]
 80138fa:	6123      	str	r3, [r4, #16]
 80138fc:	7da0      	ldrb	r0, [r4, #22]
 80138fe:	f080 0001 	eor.w	r0, r0, #1
 8013902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013906:	881b      	ldrh	r3, [r3, #0]
 8013908:	802b      	strh	r3, [r5, #0]
 801390a:	e7ef      	b.n	80138ec <ucdr_deserialize_int16_t+0x90>
 801390c:	68a2      	ldr	r2, [r4, #8]
 801390e:	6923      	ldr	r3, [r4, #16]
 8013910:	1b92      	subs	r2, r2, r6
 8013912:	7da0      	ldrb	r0, [r4, #22]
 8013914:	1b9b      	subs	r3, r3, r6
 8013916:	f884 8015 	strb.w	r8, [r4, #21]
 801391a:	f080 0001 	eor.w	r0, r0, #1
 801391e:	60a2      	str	r2, [r4, #8]
 8013920:	6123      	str	r3, [r4, #16]
 8013922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013926:	68a3      	ldr	r3, [r4, #8]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	706b      	strb	r3, [r5, #1]
 801392c:	e7c2      	b.n	80138b4 <ucdr_deserialize_int16_t+0x58>
 801392e:	4639      	mov	r1, r7
 8013930:	4632      	mov	r2, r6
 8013932:	4628      	mov	r0, r5
 8013934:	f00e fe03 	bl	802253e <memcpy>
 8013938:	464a      	mov	r2, r9
 801393a:	19a8      	adds	r0, r5, r6
 801393c:	68a1      	ldr	r1, [r4, #8]
 801393e:	f00e fdfe 	bl	802253e <memcpy>
 8013942:	e7b7      	b.n	80138b4 <ucdr_deserialize_int16_t+0x58>

08013944 <ucdr_serialize_int32_t>:
 8013944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013948:	b082      	sub	sp, #8
 801394a:	4604      	mov	r4, r0
 801394c:	9101      	str	r1, [sp, #4]
 801394e:	2104      	movs	r1, #4
 8013950:	f000 fc3e 	bl	80141d0 <ucdr_buffer_alignment>
 8013954:	4601      	mov	r1, r0
 8013956:	4620      	mov	r0, r4
 8013958:	7d67      	ldrb	r7, [r4, #21]
 801395a:	f000 fc81 	bl	8014260 <ucdr_advance_buffer>
 801395e:	2104      	movs	r1, #4
 8013960:	4620      	mov	r0, r4
 8013962:	f000 fbd5 	bl	8014110 <ucdr_check_buffer_available_for>
 8013966:	2800      	cmp	r0, #0
 8013968:	d139      	bne.n	80139de <ucdr_serialize_int32_t+0x9a>
 801396a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801396e:	42ab      	cmp	r3, r5
 8013970:	d930      	bls.n	80139d4 <ucdr_serialize_int32_t+0x90>
 8013972:	1b5e      	subs	r6, r3, r5
 8013974:	60a3      	str	r3, [r4, #8]
 8013976:	6923      	ldr	r3, [r4, #16]
 8013978:	4620      	mov	r0, r4
 801397a:	f1c6 0804 	rsb	r8, r6, #4
 801397e:	4433      	add	r3, r6
 8013980:	4641      	mov	r1, r8
 8013982:	6123      	str	r3, [r4, #16]
 8013984:	f000 fbd0 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013988:	2800      	cmp	r0, #0
 801398a:	d04c      	beq.n	8013a26 <ucdr_serialize_int32_t+0xe2>
 801398c:	7d23      	ldrb	r3, [r4, #20]
 801398e:	2b01      	cmp	r3, #1
 8013990:	d063      	beq.n	8013a5a <ucdr_serialize_int32_t+0x116>
 8013992:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013996:	702b      	strb	r3, [r5, #0]
 8013998:	2e00      	cmp	r6, #0
 801399a:	d051      	beq.n	8013a40 <ucdr_serialize_int32_t+0xfc>
 801399c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80139a0:	2e01      	cmp	r6, #1
 80139a2:	706b      	strb	r3, [r5, #1]
 80139a4:	d050      	beq.n	8013a48 <ucdr_serialize_int32_t+0x104>
 80139a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80139aa:	2e02      	cmp	r6, #2
 80139ac:	70ab      	strb	r3, [r5, #2]
 80139ae:	d04f      	beq.n	8013a50 <ucdr_serialize_int32_t+0x10c>
 80139b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80139b4:	70eb      	strb	r3, [r5, #3]
 80139b6:	6923      	ldr	r3, [r4, #16]
 80139b8:	2104      	movs	r1, #4
 80139ba:	68a2      	ldr	r2, [r4, #8]
 80139bc:	3304      	adds	r3, #4
 80139be:	7da0      	ldrb	r0, [r4, #22]
 80139c0:	4442      	add	r2, r8
 80139c2:	7561      	strb	r1, [r4, #21]
 80139c4:	1b9e      	subs	r6, r3, r6
 80139c6:	f080 0001 	eor.w	r0, r0, #1
 80139ca:	60a2      	str	r2, [r4, #8]
 80139cc:	6126      	str	r6, [r4, #16]
 80139ce:	b002      	add	sp, #8
 80139d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d4:	2104      	movs	r1, #4
 80139d6:	4620      	mov	r0, r4
 80139d8:	f000 fba6 	bl	8014128 <ucdr_check_final_buffer_behavior>
 80139dc:	b1d0      	cbz	r0, 8013a14 <ucdr_serialize_int32_t+0xd0>
 80139de:	7d23      	ldrb	r3, [r4, #20]
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	68a3      	ldr	r3, [r4, #8]
 80139e4:	d01c      	beq.n	8013a20 <ucdr_serialize_int32_t+0xdc>
 80139e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80139ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80139ee:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80139f2:	7018      	strb	r0, [r3, #0]
 80139f4:	68a3      	ldr	r3, [r4, #8]
 80139f6:	705a      	strb	r2, [r3, #1]
 80139f8:	68a3      	ldr	r3, [r4, #8]
 80139fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80139fe:	7099      	strb	r1, [r3, #2]
 8013a00:	68a3      	ldr	r3, [r4, #8]
 8013a02:	70da      	strb	r2, [r3, #3]
 8013a04:	2104      	movs	r1, #4
 8013a06:	68a2      	ldr	r2, [r4, #8]
 8013a08:	6923      	ldr	r3, [r4, #16]
 8013a0a:	440a      	add	r2, r1
 8013a0c:	7561      	strb	r1, [r4, #21]
 8013a0e:	440b      	add	r3, r1
 8013a10:	60a2      	str	r2, [r4, #8]
 8013a12:	6123      	str	r3, [r4, #16]
 8013a14:	7da0      	ldrb	r0, [r4, #22]
 8013a16:	f080 0001 	eor.w	r0, r0, #1
 8013a1a:	b002      	add	sp, #8
 8013a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a20:	9a01      	ldr	r2, [sp, #4]
 8013a22:	601a      	str	r2, [r3, #0]
 8013a24:	e7ee      	b.n	8013a04 <ucdr_serialize_int32_t+0xc0>
 8013a26:	68a2      	ldr	r2, [r4, #8]
 8013a28:	6923      	ldr	r3, [r4, #16]
 8013a2a:	7da0      	ldrb	r0, [r4, #22]
 8013a2c:	1b92      	subs	r2, r2, r6
 8013a2e:	1b9b      	subs	r3, r3, r6
 8013a30:	7567      	strb	r7, [r4, #21]
 8013a32:	f080 0001 	eor.w	r0, r0, #1
 8013a36:	60a2      	str	r2, [r4, #8]
 8013a38:	6123      	str	r3, [r4, #16]
 8013a3a:	b002      	add	sp, #8
 8013a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a40:	68a3      	ldr	r3, [r4, #8]
 8013a42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a46:	701a      	strb	r2, [r3, #0]
 8013a48:	68a3      	ldr	r3, [r4, #8]
 8013a4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013a4e:	701a      	strb	r2, [r3, #0]
 8013a50:	68a3      	ldr	r3, [r4, #8]
 8013a52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a56:	701a      	strb	r2, [r3, #0]
 8013a58:	e7ad      	b.n	80139b6 <ucdr_serialize_int32_t+0x72>
 8013a5a:	4628      	mov	r0, r5
 8013a5c:	ad01      	add	r5, sp, #4
 8013a5e:	4632      	mov	r2, r6
 8013a60:	4629      	mov	r1, r5
 8013a62:	f00e fd6c 	bl	802253e <memcpy>
 8013a66:	4642      	mov	r2, r8
 8013a68:	19a9      	adds	r1, r5, r6
 8013a6a:	68a0      	ldr	r0, [r4, #8]
 8013a6c:	f00e fd67 	bl	802253e <memcpy>
 8013a70:	e7a1      	b.n	80139b6 <ucdr_serialize_int32_t+0x72>
 8013a72:	bf00      	nop

08013a74 <ucdr_deserialize_int32_t>:
 8013a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a78:	4604      	mov	r4, r0
 8013a7a:	460d      	mov	r5, r1
 8013a7c:	2104      	movs	r1, #4
 8013a7e:	f000 fba7 	bl	80141d0 <ucdr_buffer_alignment>
 8013a82:	4601      	mov	r1, r0
 8013a84:	4620      	mov	r0, r4
 8013a86:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013a8a:	f000 fbe9 	bl	8014260 <ucdr_advance_buffer>
 8013a8e:	2104      	movs	r1, #4
 8013a90:	4620      	mov	r0, r4
 8013a92:	f000 fb3d 	bl	8014110 <ucdr_check_buffer_available_for>
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d138      	bne.n	8013b0c <ucdr_deserialize_int32_t+0x98>
 8013a9a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013a9e:	42b7      	cmp	r7, r6
 8013aa0:	d92f      	bls.n	8013b02 <ucdr_deserialize_int32_t+0x8e>
 8013aa2:	6923      	ldr	r3, [r4, #16]
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	60a7      	str	r7, [r4, #8]
 8013aa8:	1bbf      	subs	r7, r7, r6
 8013aaa:	443b      	add	r3, r7
 8013aac:	f1c7 0904 	rsb	r9, r7, #4
 8013ab0:	6123      	str	r3, [r4, #16]
 8013ab2:	4649      	mov	r1, r9
 8013ab4:	f000 fb38 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d046      	beq.n	8013b4a <ucdr_deserialize_int32_t+0xd6>
 8013abc:	7d23      	ldrb	r3, [r4, #20]
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d05c      	beq.n	8013b7c <ucdr_deserialize_int32_t+0x108>
 8013ac2:	78f3      	ldrb	r3, [r6, #3]
 8013ac4:	702b      	strb	r3, [r5, #0]
 8013ac6:	2f00      	cmp	r7, #0
 8013ac8:	d04c      	beq.n	8013b64 <ucdr_deserialize_int32_t+0xf0>
 8013aca:	78b3      	ldrb	r3, [r6, #2]
 8013acc:	2f01      	cmp	r7, #1
 8013ace:	706b      	strb	r3, [r5, #1]
 8013ad0:	f105 0302 	add.w	r3, r5, #2
 8013ad4:	d04a      	beq.n	8013b6c <ucdr_deserialize_int32_t+0xf8>
 8013ad6:	7873      	ldrb	r3, [r6, #1]
 8013ad8:	2f02      	cmp	r7, #2
 8013ada:	70ab      	strb	r3, [r5, #2]
 8013adc:	f105 0303 	add.w	r3, r5, #3
 8013ae0:	d048      	beq.n	8013b74 <ucdr_deserialize_int32_t+0x100>
 8013ae2:	7833      	ldrb	r3, [r6, #0]
 8013ae4:	70eb      	strb	r3, [r5, #3]
 8013ae6:	6923      	ldr	r3, [r4, #16]
 8013ae8:	2104      	movs	r1, #4
 8013aea:	68a2      	ldr	r2, [r4, #8]
 8013aec:	3304      	adds	r3, #4
 8013aee:	7da0      	ldrb	r0, [r4, #22]
 8013af0:	444a      	add	r2, r9
 8013af2:	7561      	strb	r1, [r4, #21]
 8013af4:	1bdb      	subs	r3, r3, r7
 8013af6:	f080 0001 	eor.w	r0, r0, #1
 8013afa:	60a2      	str	r2, [r4, #8]
 8013afc:	6123      	str	r3, [r4, #16]
 8013afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b02:	2104      	movs	r1, #4
 8013b04:	4620      	mov	r0, r4
 8013b06:	f000 fb0f 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013b0a:	b1b0      	cbz	r0, 8013b3a <ucdr_deserialize_int32_t+0xc6>
 8013b0c:	7d23      	ldrb	r3, [r4, #20]
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	68a3      	ldr	r3, [r4, #8]
 8013b12:	d017      	beq.n	8013b44 <ucdr_deserialize_int32_t+0xd0>
 8013b14:	78db      	ldrb	r3, [r3, #3]
 8013b16:	702b      	strb	r3, [r5, #0]
 8013b18:	68a3      	ldr	r3, [r4, #8]
 8013b1a:	789b      	ldrb	r3, [r3, #2]
 8013b1c:	706b      	strb	r3, [r5, #1]
 8013b1e:	68a3      	ldr	r3, [r4, #8]
 8013b20:	785b      	ldrb	r3, [r3, #1]
 8013b22:	70ab      	strb	r3, [r5, #2]
 8013b24:	68a3      	ldr	r3, [r4, #8]
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	70eb      	strb	r3, [r5, #3]
 8013b2a:	2104      	movs	r1, #4
 8013b2c:	68a2      	ldr	r2, [r4, #8]
 8013b2e:	6923      	ldr	r3, [r4, #16]
 8013b30:	440a      	add	r2, r1
 8013b32:	7561      	strb	r1, [r4, #21]
 8013b34:	440b      	add	r3, r1
 8013b36:	60a2      	str	r2, [r4, #8]
 8013b38:	6123      	str	r3, [r4, #16]
 8013b3a:	7da0      	ldrb	r0, [r4, #22]
 8013b3c:	f080 0001 	eor.w	r0, r0, #1
 8013b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	602b      	str	r3, [r5, #0]
 8013b48:	e7ef      	b.n	8013b2a <ucdr_deserialize_int32_t+0xb6>
 8013b4a:	68a2      	ldr	r2, [r4, #8]
 8013b4c:	6923      	ldr	r3, [r4, #16]
 8013b4e:	1bd2      	subs	r2, r2, r7
 8013b50:	7da0      	ldrb	r0, [r4, #22]
 8013b52:	1bdb      	subs	r3, r3, r7
 8013b54:	f884 8015 	strb.w	r8, [r4, #21]
 8013b58:	f080 0001 	eor.w	r0, r0, #1
 8013b5c:	60a2      	str	r2, [r4, #8]
 8013b5e:	6123      	str	r3, [r4, #16]
 8013b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b64:	68a3      	ldr	r3, [r4, #8]
 8013b66:	789b      	ldrb	r3, [r3, #2]
 8013b68:	706b      	strb	r3, [r5, #1]
 8013b6a:	1cab      	adds	r3, r5, #2
 8013b6c:	68a2      	ldr	r2, [r4, #8]
 8013b6e:	7852      	ldrb	r2, [r2, #1]
 8013b70:	f803 2b01 	strb.w	r2, [r3], #1
 8013b74:	68a2      	ldr	r2, [r4, #8]
 8013b76:	7812      	ldrb	r2, [r2, #0]
 8013b78:	701a      	strb	r2, [r3, #0]
 8013b7a:	e7b4      	b.n	8013ae6 <ucdr_deserialize_int32_t+0x72>
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	463a      	mov	r2, r7
 8013b80:	4628      	mov	r0, r5
 8013b82:	f00e fcdc 	bl	802253e <memcpy>
 8013b86:	464a      	mov	r2, r9
 8013b88:	19e8      	adds	r0, r5, r7
 8013b8a:	68a1      	ldr	r1, [r4, #8]
 8013b8c:	f00e fcd7 	bl	802253e <memcpy>
 8013b90:	e7a9      	b.n	8013ae6 <ucdr_deserialize_int32_t+0x72>
 8013b92:	bf00      	nop

08013b94 <ucdr_serialize_float>:
 8013b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b98:	4604      	mov	r4, r0
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	2104      	movs	r1, #4
 8013b9e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013ba2:	f000 fb15 	bl	80141d0 <ucdr_buffer_alignment>
 8013ba6:	4601      	mov	r1, r0
 8013ba8:	4620      	mov	r0, r4
 8013baa:	7d67      	ldrb	r7, [r4, #21]
 8013bac:	f000 fb58 	bl	8014260 <ucdr_advance_buffer>
 8013bb0:	2104      	movs	r1, #4
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	f000 faac 	bl	8014110 <ucdr_check_buffer_available_for>
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d139      	bne.n	8013c30 <ucdr_serialize_float+0x9c>
 8013bbc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013bc0:	42ab      	cmp	r3, r5
 8013bc2:	d930      	bls.n	8013c26 <ucdr_serialize_float+0x92>
 8013bc4:	1b5e      	subs	r6, r3, r5
 8013bc6:	60a3      	str	r3, [r4, #8]
 8013bc8:	6923      	ldr	r3, [r4, #16]
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f1c6 0804 	rsb	r8, r6, #4
 8013bd0:	4433      	add	r3, r6
 8013bd2:	4641      	mov	r1, r8
 8013bd4:	6123      	str	r3, [r4, #16]
 8013bd6:	f000 faa7 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	d04c      	beq.n	8013c78 <ucdr_serialize_float+0xe4>
 8013bde:	7d23      	ldrb	r3, [r4, #20]
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d063      	beq.n	8013cac <ucdr_serialize_float+0x118>
 8013be4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013be8:	702b      	strb	r3, [r5, #0]
 8013bea:	2e00      	cmp	r6, #0
 8013bec:	d051      	beq.n	8013c92 <ucdr_serialize_float+0xfe>
 8013bee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013bf2:	2e01      	cmp	r6, #1
 8013bf4:	706b      	strb	r3, [r5, #1]
 8013bf6:	d050      	beq.n	8013c9a <ucdr_serialize_float+0x106>
 8013bf8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013bfc:	2e02      	cmp	r6, #2
 8013bfe:	70ab      	strb	r3, [r5, #2]
 8013c00:	d04f      	beq.n	8013ca2 <ucdr_serialize_float+0x10e>
 8013c02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c06:	70eb      	strb	r3, [r5, #3]
 8013c08:	6923      	ldr	r3, [r4, #16]
 8013c0a:	2104      	movs	r1, #4
 8013c0c:	68a2      	ldr	r2, [r4, #8]
 8013c0e:	3304      	adds	r3, #4
 8013c10:	7da0      	ldrb	r0, [r4, #22]
 8013c12:	4442      	add	r2, r8
 8013c14:	7561      	strb	r1, [r4, #21]
 8013c16:	1b9e      	subs	r6, r3, r6
 8013c18:	f080 0001 	eor.w	r0, r0, #1
 8013c1c:	60a2      	str	r2, [r4, #8]
 8013c1e:	6126      	str	r6, [r4, #16]
 8013c20:	b002      	add	sp, #8
 8013c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c26:	2104      	movs	r1, #4
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f000 fa7d 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013c2e:	b1d0      	cbz	r0, 8013c66 <ucdr_serialize_float+0xd2>
 8013c30:	7d23      	ldrb	r3, [r4, #20]
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	68a3      	ldr	r3, [r4, #8]
 8013c36:	d01c      	beq.n	8013c72 <ucdr_serialize_float+0xde>
 8013c38:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013c3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c40:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013c44:	7018      	strb	r0, [r3, #0]
 8013c46:	68a3      	ldr	r3, [r4, #8]
 8013c48:	705a      	strb	r2, [r3, #1]
 8013c4a:	68a3      	ldr	r3, [r4, #8]
 8013c4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c50:	7099      	strb	r1, [r3, #2]
 8013c52:	68a3      	ldr	r3, [r4, #8]
 8013c54:	70da      	strb	r2, [r3, #3]
 8013c56:	2104      	movs	r1, #4
 8013c58:	68a2      	ldr	r2, [r4, #8]
 8013c5a:	6923      	ldr	r3, [r4, #16]
 8013c5c:	440a      	add	r2, r1
 8013c5e:	7561      	strb	r1, [r4, #21]
 8013c60:	440b      	add	r3, r1
 8013c62:	60a2      	str	r2, [r4, #8]
 8013c64:	6123      	str	r3, [r4, #16]
 8013c66:	7da0      	ldrb	r0, [r4, #22]
 8013c68:	f080 0001 	eor.w	r0, r0, #1
 8013c6c:	b002      	add	sp, #8
 8013c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c72:	9a01      	ldr	r2, [sp, #4]
 8013c74:	601a      	str	r2, [r3, #0]
 8013c76:	e7ee      	b.n	8013c56 <ucdr_serialize_float+0xc2>
 8013c78:	68a2      	ldr	r2, [r4, #8]
 8013c7a:	6923      	ldr	r3, [r4, #16]
 8013c7c:	7da0      	ldrb	r0, [r4, #22]
 8013c7e:	1b92      	subs	r2, r2, r6
 8013c80:	1b9b      	subs	r3, r3, r6
 8013c82:	7567      	strb	r7, [r4, #21]
 8013c84:	f080 0001 	eor.w	r0, r0, #1
 8013c88:	60a2      	str	r2, [r4, #8]
 8013c8a:	6123      	str	r3, [r4, #16]
 8013c8c:	b002      	add	sp, #8
 8013c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c92:	68a3      	ldr	r3, [r4, #8]
 8013c94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c98:	701a      	strb	r2, [r3, #0]
 8013c9a:	68a3      	ldr	r3, [r4, #8]
 8013c9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013ca0:	701a      	strb	r2, [r3, #0]
 8013ca2:	68a3      	ldr	r3, [r4, #8]
 8013ca4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013ca8:	701a      	strb	r2, [r3, #0]
 8013caa:	e7ad      	b.n	8013c08 <ucdr_serialize_float+0x74>
 8013cac:	4628      	mov	r0, r5
 8013cae:	ad01      	add	r5, sp, #4
 8013cb0:	4632      	mov	r2, r6
 8013cb2:	4629      	mov	r1, r5
 8013cb4:	f00e fc43 	bl	802253e <memcpy>
 8013cb8:	4642      	mov	r2, r8
 8013cba:	19a9      	adds	r1, r5, r6
 8013cbc:	68a0      	ldr	r0, [r4, #8]
 8013cbe:	f00e fc3e 	bl	802253e <memcpy>
 8013cc2:	e7a1      	b.n	8013c08 <ucdr_serialize_float+0x74>

08013cc4 <ucdr_deserialize_float>:
 8013cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cc8:	4604      	mov	r4, r0
 8013cca:	460d      	mov	r5, r1
 8013ccc:	2104      	movs	r1, #4
 8013cce:	f000 fa7f 	bl	80141d0 <ucdr_buffer_alignment>
 8013cd2:	4601      	mov	r1, r0
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013cda:	f000 fac1 	bl	8014260 <ucdr_advance_buffer>
 8013cde:	2104      	movs	r1, #4
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	f000 fa15 	bl	8014110 <ucdr_check_buffer_available_for>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d138      	bne.n	8013d5c <ucdr_deserialize_float+0x98>
 8013cea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013cee:	42b7      	cmp	r7, r6
 8013cf0:	d92f      	bls.n	8013d52 <ucdr_deserialize_float+0x8e>
 8013cf2:	6923      	ldr	r3, [r4, #16]
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	60a7      	str	r7, [r4, #8]
 8013cf8:	1bbf      	subs	r7, r7, r6
 8013cfa:	443b      	add	r3, r7
 8013cfc:	f1c7 0904 	rsb	r9, r7, #4
 8013d00:	6123      	str	r3, [r4, #16]
 8013d02:	4649      	mov	r1, r9
 8013d04:	f000 fa10 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d046      	beq.n	8013d9a <ucdr_deserialize_float+0xd6>
 8013d0c:	7d23      	ldrb	r3, [r4, #20]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d05c      	beq.n	8013dcc <ucdr_deserialize_float+0x108>
 8013d12:	78f3      	ldrb	r3, [r6, #3]
 8013d14:	702b      	strb	r3, [r5, #0]
 8013d16:	2f00      	cmp	r7, #0
 8013d18:	d04c      	beq.n	8013db4 <ucdr_deserialize_float+0xf0>
 8013d1a:	78b3      	ldrb	r3, [r6, #2]
 8013d1c:	2f01      	cmp	r7, #1
 8013d1e:	706b      	strb	r3, [r5, #1]
 8013d20:	f105 0302 	add.w	r3, r5, #2
 8013d24:	d04a      	beq.n	8013dbc <ucdr_deserialize_float+0xf8>
 8013d26:	7873      	ldrb	r3, [r6, #1]
 8013d28:	2f02      	cmp	r7, #2
 8013d2a:	70ab      	strb	r3, [r5, #2]
 8013d2c:	f105 0303 	add.w	r3, r5, #3
 8013d30:	d048      	beq.n	8013dc4 <ucdr_deserialize_float+0x100>
 8013d32:	7833      	ldrb	r3, [r6, #0]
 8013d34:	70eb      	strb	r3, [r5, #3]
 8013d36:	6923      	ldr	r3, [r4, #16]
 8013d38:	2104      	movs	r1, #4
 8013d3a:	68a2      	ldr	r2, [r4, #8]
 8013d3c:	3304      	adds	r3, #4
 8013d3e:	7da0      	ldrb	r0, [r4, #22]
 8013d40:	444a      	add	r2, r9
 8013d42:	7561      	strb	r1, [r4, #21]
 8013d44:	1bdb      	subs	r3, r3, r7
 8013d46:	f080 0001 	eor.w	r0, r0, #1
 8013d4a:	60a2      	str	r2, [r4, #8]
 8013d4c:	6123      	str	r3, [r4, #16]
 8013d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d52:	2104      	movs	r1, #4
 8013d54:	4620      	mov	r0, r4
 8013d56:	f000 f9e7 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013d5a:	b1b0      	cbz	r0, 8013d8a <ucdr_deserialize_float+0xc6>
 8013d5c:	7d23      	ldrb	r3, [r4, #20]
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	68a3      	ldr	r3, [r4, #8]
 8013d62:	d017      	beq.n	8013d94 <ucdr_deserialize_float+0xd0>
 8013d64:	78db      	ldrb	r3, [r3, #3]
 8013d66:	702b      	strb	r3, [r5, #0]
 8013d68:	68a3      	ldr	r3, [r4, #8]
 8013d6a:	789b      	ldrb	r3, [r3, #2]
 8013d6c:	706b      	strb	r3, [r5, #1]
 8013d6e:	68a3      	ldr	r3, [r4, #8]
 8013d70:	785b      	ldrb	r3, [r3, #1]
 8013d72:	70ab      	strb	r3, [r5, #2]
 8013d74:	68a3      	ldr	r3, [r4, #8]
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	70eb      	strb	r3, [r5, #3]
 8013d7a:	2104      	movs	r1, #4
 8013d7c:	68a2      	ldr	r2, [r4, #8]
 8013d7e:	6923      	ldr	r3, [r4, #16]
 8013d80:	440a      	add	r2, r1
 8013d82:	7561      	strb	r1, [r4, #21]
 8013d84:	440b      	add	r3, r1
 8013d86:	60a2      	str	r2, [r4, #8]
 8013d88:	6123      	str	r3, [r4, #16]
 8013d8a:	7da0      	ldrb	r0, [r4, #22]
 8013d8c:	f080 0001 	eor.w	r0, r0, #1
 8013d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	602b      	str	r3, [r5, #0]
 8013d98:	e7ef      	b.n	8013d7a <ucdr_deserialize_float+0xb6>
 8013d9a:	68a2      	ldr	r2, [r4, #8]
 8013d9c:	6923      	ldr	r3, [r4, #16]
 8013d9e:	1bd2      	subs	r2, r2, r7
 8013da0:	7da0      	ldrb	r0, [r4, #22]
 8013da2:	1bdb      	subs	r3, r3, r7
 8013da4:	f884 8015 	strb.w	r8, [r4, #21]
 8013da8:	f080 0001 	eor.w	r0, r0, #1
 8013dac:	60a2      	str	r2, [r4, #8]
 8013dae:	6123      	str	r3, [r4, #16]
 8013db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013db4:	68a3      	ldr	r3, [r4, #8]
 8013db6:	789b      	ldrb	r3, [r3, #2]
 8013db8:	706b      	strb	r3, [r5, #1]
 8013dba:	1cab      	adds	r3, r5, #2
 8013dbc:	68a2      	ldr	r2, [r4, #8]
 8013dbe:	7852      	ldrb	r2, [r2, #1]
 8013dc0:	f803 2b01 	strb.w	r2, [r3], #1
 8013dc4:	68a2      	ldr	r2, [r4, #8]
 8013dc6:	7812      	ldrb	r2, [r2, #0]
 8013dc8:	701a      	strb	r2, [r3, #0]
 8013dca:	e7b4      	b.n	8013d36 <ucdr_deserialize_float+0x72>
 8013dcc:	4631      	mov	r1, r6
 8013dce:	463a      	mov	r2, r7
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	f00e fbb4 	bl	802253e <memcpy>
 8013dd6:	464a      	mov	r2, r9
 8013dd8:	19e8      	adds	r0, r5, r7
 8013dda:	68a1      	ldr	r1, [r4, #8]
 8013ddc:	f00e fbaf 	bl	802253e <memcpy>
 8013de0:	e7a9      	b.n	8013d36 <ucdr_deserialize_float+0x72>
 8013de2:	bf00      	nop

08013de4 <ucdr_serialize_double>:
 8013de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de8:	4604      	mov	r4, r0
 8013dea:	b082      	sub	sp, #8
 8013dec:	2108      	movs	r1, #8
 8013dee:	ed8d 0b00 	vstr	d0, [sp]
 8013df2:	f000 f9ed 	bl	80141d0 <ucdr_buffer_alignment>
 8013df6:	4601      	mov	r1, r0
 8013df8:	4620      	mov	r0, r4
 8013dfa:	7d67      	ldrb	r7, [r4, #21]
 8013dfc:	f000 fa30 	bl	8014260 <ucdr_advance_buffer>
 8013e00:	2108      	movs	r1, #8
 8013e02:	4620      	mov	r0, r4
 8013e04:	f000 f984 	bl	8014110 <ucdr_check_buffer_available_for>
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	d14e      	bne.n	8013eaa <ucdr_serialize_double+0xc6>
 8013e0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013e10:	42ab      	cmp	r3, r5
 8013e12:	d945      	bls.n	8013ea0 <ucdr_serialize_double+0xbc>
 8013e14:	1b5e      	subs	r6, r3, r5
 8013e16:	60a3      	str	r3, [r4, #8]
 8013e18:	6923      	ldr	r3, [r4, #16]
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	f1c6 0808 	rsb	r8, r6, #8
 8013e20:	4433      	add	r3, r6
 8013e22:	4641      	mov	r1, r8
 8013e24:	6123      	str	r3, [r4, #16]
 8013e26:	f000 f97f 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	d074      	beq.n	8013f18 <ucdr_serialize_double+0x134>
 8013e2e:	7d23      	ldrb	r3, [r4, #20]
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	f000 809b 	beq.w	8013f6c <ucdr_serialize_double+0x188>
 8013e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e3a:	702b      	strb	r3, [r5, #0]
 8013e3c:	2e00      	cmp	r6, #0
 8013e3e:	d078      	beq.n	8013f32 <ucdr_serialize_double+0x14e>
 8013e40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013e44:	2e01      	cmp	r6, #1
 8013e46:	706b      	strb	r3, [r5, #1]
 8013e48:	d077      	beq.n	8013f3a <ucdr_serialize_double+0x156>
 8013e4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013e4e:	2e02      	cmp	r6, #2
 8013e50:	70ab      	strb	r3, [r5, #2]
 8013e52:	d076      	beq.n	8013f42 <ucdr_serialize_double+0x15e>
 8013e54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e58:	2e03      	cmp	r6, #3
 8013e5a:	70eb      	strb	r3, [r5, #3]
 8013e5c:	d075      	beq.n	8013f4a <ucdr_serialize_double+0x166>
 8013e5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013e62:	2e04      	cmp	r6, #4
 8013e64:	712b      	strb	r3, [r5, #4]
 8013e66:	d074      	beq.n	8013f52 <ucdr_serialize_double+0x16e>
 8013e68:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013e6c:	2e05      	cmp	r6, #5
 8013e6e:	716b      	strb	r3, [r5, #5]
 8013e70:	d073      	beq.n	8013f5a <ucdr_serialize_double+0x176>
 8013e72:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013e76:	2e06      	cmp	r6, #6
 8013e78:	71ab      	strb	r3, [r5, #6]
 8013e7a:	d072      	beq.n	8013f62 <ucdr_serialize_double+0x17e>
 8013e7c:	f89d 3000 	ldrb.w	r3, [sp]
 8013e80:	71eb      	strb	r3, [r5, #7]
 8013e82:	6923      	ldr	r3, [r4, #16]
 8013e84:	2108      	movs	r1, #8
 8013e86:	68a2      	ldr	r2, [r4, #8]
 8013e88:	3308      	adds	r3, #8
 8013e8a:	7da0      	ldrb	r0, [r4, #22]
 8013e8c:	4442      	add	r2, r8
 8013e8e:	7561      	strb	r1, [r4, #21]
 8013e90:	1b9e      	subs	r6, r3, r6
 8013e92:	f080 0001 	eor.w	r0, r0, #1
 8013e96:	60a2      	str	r2, [r4, #8]
 8013e98:	6126      	str	r6, [r4, #16]
 8013e9a:	b002      	add	sp, #8
 8013e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea0:	2108      	movs	r1, #8
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	f000 f940 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013ea8:	b350      	cbz	r0, 8013f00 <ucdr_serialize_double+0x11c>
 8013eaa:	7d23      	ldrb	r3, [r4, #20]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d02d      	beq.n	8013f0c <ucdr_serialize_double+0x128>
 8013eb0:	68a3      	ldr	r3, [r4, #8]
 8013eb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013eb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013eba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013ebe:	7018      	strb	r0, [r3, #0]
 8013ec0:	68a3      	ldr	r3, [r4, #8]
 8013ec2:	705a      	strb	r2, [r3, #1]
 8013ec4:	68a3      	ldr	r3, [r4, #8]
 8013ec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013eca:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013ece:	7099      	strb	r1, [r3, #2]
 8013ed0:	68a3      	ldr	r3, [r4, #8]
 8013ed2:	70da      	strb	r2, [r3, #3]
 8013ed4:	68a3      	ldr	r3, [r4, #8]
 8013ed6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013eda:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013ede:	7118      	strb	r0, [r3, #4]
 8013ee0:	68a3      	ldr	r3, [r4, #8]
 8013ee2:	715a      	strb	r2, [r3, #5]
 8013ee4:	68a3      	ldr	r3, [r4, #8]
 8013ee6:	f89d 2000 	ldrb.w	r2, [sp]
 8013eea:	7199      	strb	r1, [r3, #6]
 8013eec:	68a3      	ldr	r3, [r4, #8]
 8013eee:	71da      	strb	r2, [r3, #7]
 8013ef0:	2108      	movs	r1, #8
 8013ef2:	68a2      	ldr	r2, [r4, #8]
 8013ef4:	6923      	ldr	r3, [r4, #16]
 8013ef6:	440a      	add	r2, r1
 8013ef8:	7561      	strb	r1, [r4, #21]
 8013efa:	440b      	add	r3, r1
 8013efc:	60a2      	str	r2, [r4, #8]
 8013efe:	6123      	str	r3, [r4, #16]
 8013f00:	7da0      	ldrb	r0, [r4, #22]
 8013f02:	f080 0001 	eor.w	r0, r0, #1
 8013f06:	b002      	add	sp, #8
 8013f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0c:	466b      	mov	r3, sp
 8013f0e:	68a2      	ldr	r2, [r4, #8]
 8013f10:	cb03      	ldmia	r3!, {r0, r1}
 8013f12:	6010      	str	r0, [r2, #0]
 8013f14:	6051      	str	r1, [r2, #4]
 8013f16:	e7eb      	b.n	8013ef0 <ucdr_serialize_double+0x10c>
 8013f18:	68a2      	ldr	r2, [r4, #8]
 8013f1a:	6923      	ldr	r3, [r4, #16]
 8013f1c:	7da0      	ldrb	r0, [r4, #22]
 8013f1e:	1b92      	subs	r2, r2, r6
 8013f20:	1b9b      	subs	r3, r3, r6
 8013f22:	7567      	strb	r7, [r4, #21]
 8013f24:	f080 0001 	eor.w	r0, r0, #1
 8013f28:	60a2      	str	r2, [r4, #8]
 8013f2a:	6123      	str	r3, [r4, #16]
 8013f2c:	b002      	add	sp, #8
 8013f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f32:	68a3      	ldr	r3, [r4, #8]
 8013f34:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f38:	701a      	strb	r2, [r3, #0]
 8013f3a:	68a3      	ldr	r3, [r4, #8]
 8013f3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f40:	701a      	strb	r2, [r3, #0]
 8013f42:	68a3      	ldr	r3, [r4, #8]
 8013f44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f48:	701a      	strb	r2, [r3, #0]
 8013f4a:	68a3      	ldr	r3, [r4, #8]
 8013f4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013f50:	701a      	strb	r2, [r3, #0]
 8013f52:	68a3      	ldr	r3, [r4, #8]
 8013f54:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013f58:	701a      	strb	r2, [r3, #0]
 8013f5a:	68a3      	ldr	r3, [r4, #8]
 8013f5c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013f60:	701a      	strb	r2, [r3, #0]
 8013f62:	68a3      	ldr	r3, [r4, #8]
 8013f64:	f89d 2000 	ldrb.w	r2, [sp]
 8013f68:	701a      	strb	r2, [r3, #0]
 8013f6a:	e78a      	b.n	8013e82 <ucdr_serialize_double+0x9e>
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	466d      	mov	r5, sp
 8013f70:	4632      	mov	r2, r6
 8013f72:	4629      	mov	r1, r5
 8013f74:	f00e fae3 	bl	802253e <memcpy>
 8013f78:	4642      	mov	r2, r8
 8013f7a:	19a9      	adds	r1, r5, r6
 8013f7c:	68a0      	ldr	r0, [r4, #8]
 8013f7e:	f00e fade 	bl	802253e <memcpy>
 8013f82:	e77e      	b.n	8013e82 <ucdr_serialize_double+0x9e>

08013f84 <ucdr_deserialize_double>:
 8013f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f88:	4604      	mov	r4, r0
 8013f8a:	460d      	mov	r5, r1
 8013f8c:	2108      	movs	r1, #8
 8013f8e:	f000 f91f 	bl	80141d0 <ucdr_buffer_alignment>
 8013f92:	4601      	mov	r1, r0
 8013f94:	4620      	mov	r0, r4
 8013f96:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f9a:	f000 f961 	bl	8014260 <ucdr_advance_buffer>
 8013f9e:	2108      	movs	r1, #8
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f000 f8b5 	bl	8014110 <ucdr_check_buffer_available_for>
 8013fa6:	2800      	cmp	r0, #0
 8013fa8:	d151      	bne.n	801404e <ucdr_deserialize_double+0xca>
 8013faa:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013fae:	42be      	cmp	r6, r7
 8013fb0:	d948      	bls.n	8014044 <ucdr_deserialize_double+0xc0>
 8013fb2:	6923      	ldr	r3, [r4, #16]
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	60a6      	str	r6, [r4, #8]
 8013fb8:	1bf6      	subs	r6, r6, r7
 8013fba:	4433      	add	r3, r6
 8013fbc:	f1c6 0908 	rsb	r9, r6, #8
 8013fc0:	6123      	str	r3, [r4, #16]
 8013fc2:	4649      	mov	r1, r9
 8013fc4:	f000 f8b0 	bl	8014128 <ucdr_check_final_buffer_behavior>
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	d06d      	beq.n	80140a8 <ucdr_deserialize_double+0x124>
 8013fcc:	7d23      	ldrb	r3, [r4, #20]
 8013fce:	2b01      	cmp	r3, #1
 8013fd0:	f000 8093 	beq.w	80140fa <ucdr_deserialize_double+0x176>
 8013fd4:	79fb      	ldrb	r3, [r7, #7]
 8013fd6:	702b      	strb	r3, [r5, #0]
 8013fd8:	2e00      	cmp	r6, #0
 8013fda:	d072      	beq.n	80140c2 <ucdr_deserialize_double+0x13e>
 8013fdc:	79bb      	ldrb	r3, [r7, #6]
 8013fde:	2e01      	cmp	r6, #1
 8013fe0:	706b      	strb	r3, [r5, #1]
 8013fe2:	f105 0302 	add.w	r3, r5, #2
 8013fe6:	d070      	beq.n	80140ca <ucdr_deserialize_double+0x146>
 8013fe8:	797b      	ldrb	r3, [r7, #5]
 8013fea:	2e02      	cmp	r6, #2
 8013fec:	70ab      	strb	r3, [r5, #2]
 8013fee:	f105 0303 	add.w	r3, r5, #3
 8013ff2:	d06e      	beq.n	80140d2 <ucdr_deserialize_double+0x14e>
 8013ff4:	793b      	ldrb	r3, [r7, #4]
 8013ff6:	2e03      	cmp	r6, #3
 8013ff8:	70eb      	strb	r3, [r5, #3]
 8013ffa:	f105 0304 	add.w	r3, r5, #4
 8013ffe:	d06c      	beq.n	80140da <ucdr_deserialize_double+0x156>
 8014000:	78fb      	ldrb	r3, [r7, #3]
 8014002:	2e04      	cmp	r6, #4
 8014004:	712b      	strb	r3, [r5, #4]
 8014006:	f105 0305 	add.w	r3, r5, #5
 801400a:	d06a      	beq.n	80140e2 <ucdr_deserialize_double+0x15e>
 801400c:	78bb      	ldrb	r3, [r7, #2]
 801400e:	2e05      	cmp	r6, #5
 8014010:	716b      	strb	r3, [r5, #5]
 8014012:	f105 0306 	add.w	r3, r5, #6
 8014016:	d068      	beq.n	80140ea <ucdr_deserialize_double+0x166>
 8014018:	787b      	ldrb	r3, [r7, #1]
 801401a:	2e06      	cmp	r6, #6
 801401c:	71ab      	strb	r3, [r5, #6]
 801401e:	f105 0307 	add.w	r3, r5, #7
 8014022:	d066      	beq.n	80140f2 <ucdr_deserialize_double+0x16e>
 8014024:	783b      	ldrb	r3, [r7, #0]
 8014026:	71eb      	strb	r3, [r5, #7]
 8014028:	6923      	ldr	r3, [r4, #16]
 801402a:	2108      	movs	r1, #8
 801402c:	68a2      	ldr	r2, [r4, #8]
 801402e:	3308      	adds	r3, #8
 8014030:	7da0      	ldrb	r0, [r4, #22]
 8014032:	444a      	add	r2, r9
 8014034:	7561      	strb	r1, [r4, #21]
 8014036:	1b9e      	subs	r6, r3, r6
 8014038:	f080 0001 	eor.w	r0, r0, #1
 801403c:	60a2      	str	r2, [r4, #8]
 801403e:	6126      	str	r6, [r4, #16]
 8014040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014044:	2108      	movs	r1, #8
 8014046:	4620      	mov	r0, r4
 8014048:	f000 f86e 	bl	8014128 <ucdr_check_final_buffer_behavior>
 801404c:	b310      	cbz	r0, 8014094 <ucdr_deserialize_double+0x110>
 801404e:	7d23      	ldrb	r3, [r4, #20]
 8014050:	2b01      	cmp	r3, #1
 8014052:	68a3      	ldr	r3, [r4, #8]
 8014054:	d023      	beq.n	801409e <ucdr_deserialize_double+0x11a>
 8014056:	79db      	ldrb	r3, [r3, #7]
 8014058:	702b      	strb	r3, [r5, #0]
 801405a:	68a3      	ldr	r3, [r4, #8]
 801405c:	799b      	ldrb	r3, [r3, #6]
 801405e:	706b      	strb	r3, [r5, #1]
 8014060:	68a3      	ldr	r3, [r4, #8]
 8014062:	795b      	ldrb	r3, [r3, #5]
 8014064:	70ab      	strb	r3, [r5, #2]
 8014066:	68a3      	ldr	r3, [r4, #8]
 8014068:	791b      	ldrb	r3, [r3, #4]
 801406a:	70eb      	strb	r3, [r5, #3]
 801406c:	68a3      	ldr	r3, [r4, #8]
 801406e:	78db      	ldrb	r3, [r3, #3]
 8014070:	712b      	strb	r3, [r5, #4]
 8014072:	68a3      	ldr	r3, [r4, #8]
 8014074:	789b      	ldrb	r3, [r3, #2]
 8014076:	716b      	strb	r3, [r5, #5]
 8014078:	68a3      	ldr	r3, [r4, #8]
 801407a:	785b      	ldrb	r3, [r3, #1]
 801407c:	71ab      	strb	r3, [r5, #6]
 801407e:	68a3      	ldr	r3, [r4, #8]
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	71eb      	strb	r3, [r5, #7]
 8014084:	2108      	movs	r1, #8
 8014086:	68a2      	ldr	r2, [r4, #8]
 8014088:	6923      	ldr	r3, [r4, #16]
 801408a:	440a      	add	r2, r1
 801408c:	7561      	strb	r1, [r4, #21]
 801408e:	440b      	add	r3, r1
 8014090:	60a2      	str	r2, [r4, #8]
 8014092:	6123      	str	r3, [r4, #16]
 8014094:	7da0      	ldrb	r0, [r4, #22]
 8014096:	f080 0001 	eor.w	r0, r0, #1
 801409a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	602a      	str	r2, [r5, #0]
 80140a4:	606b      	str	r3, [r5, #4]
 80140a6:	e7ed      	b.n	8014084 <ucdr_deserialize_double+0x100>
 80140a8:	68a2      	ldr	r2, [r4, #8]
 80140aa:	6923      	ldr	r3, [r4, #16]
 80140ac:	1b92      	subs	r2, r2, r6
 80140ae:	7da0      	ldrb	r0, [r4, #22]
 80140b0:	1b9b      	subs	r3, r3, r6
 80140b2:	f884 8015 	strb.w	r8, [r4, #21]
 80140b6:	f080 0001 	eor.w	r0, r0, #1
 80140ba:	60a2      	str	r2, [r4, #8]
 80140bc:	6123      	str	r3, [r4, #16]
 80140be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140c2:	68a3      	ldr	r3, [r4, #8]
 80140c4:	799b      	ldrb	r3, [r3, #6]
 80140c6:	706b      	strb	r3, [r5, #1]
 80140c8:	1cab      	adds	r3, r5, #2
 80140ca:	68a2      	ldr	r2, [r4, #8]
 80140cc:	7952      	ldrb	r2, [r2, #5]
 80140ce:	f803 2b01 	strb.w	r2, [r3], #1
 80140d2:	68a2      	ldr	r2, [r4, #8]
 80140d4:	7912      	ldrb	r2, [r2, #4]
 80140d6:	f803 2b01 	strb.w	r2, [r3], #1
 80140da:	68a2      	ldr	r2, [r4, #8]
 80140dc:	78d2      	ldrb	r2, [r2, #3]
 80140de:	f803 2b01 	strb.w	r2, [r3], #1
 80140e2:	68a2      	ldr	r2, [r4, #8]
 80140e4:	7892      	ldrb	r2, [r2, #2]
 80140e6:	f803 2b01 	strb.w	r2, [r3], #1
 80140ea:	68a2      	ldr	r2, [r4, #8]
 80140ec:	7852      	ldrb	r2, [r2, #1]
 80140ee:	f803 2b01 	strb.w	r2, [r3], #1
 80140f2:	68a2      	ldr	r2, [r4, #8]
 80140f4:	7812      	ldrb	r2, [r2, #0]
 80140f6:	701a      	strb	r2, [r3, #0]
 80140f8:	e796      	b.n	8014028 <ucdr_deserialize_double+0xa4>
 80140fa:	4639      	mov	r1, r7
 80140fc:	4632      	mov	r2, r6
 80140fe:	4628      	mov	r0, r5
 8014100:	f00e fa1d 	bl	802253e <memcpy>
 8014104:	464a      	mov	r2, r9
 8014106:	19a8      	adds	r0, r5, r6
 8014108:	68a1      	ldr	r1, [r4, #8]
 801410a:	f00e fa18 	bl	802253e <memcpy>
 801410e:	e78b      	b.n	8014028 <ucdr_deserialize_double+0xa4>

08014110 <ucdr_check_buffer_available_for>:
 8014110:	7d83      	ldrb	r3, [r0, #22]
 8014112:	b93b      	cbnz	r3, 8014124 <ucdr_check_buffer_available_for+0x14>
 8014114:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8014118:	4419      	add	r1, r3
 801411a:	4288      	cmp	r0, r1
 801411c:	bf34      	ite	cc
 801411e:	2000      	movcc	r0, #0
 8014120:	2001      	movcs	r0, #1
 8014122:	4770      	bx	lr
 8014124:	2000      	movs	r0, #0
 8014126:	4770      	bx	lr

08014128 <ucdr_check_final_buffer_behavior>:
 8014128:	7d83      	ldrb	r3, [r0, #22]
 801412a:	b943      	cbnz	r3, 801413e <ucdr_check_final_buffer_behavior+0x16>
 801412c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8014130:	b510      	push	{r4, lr}
 8014132:	4291      	cmp	r1, r2
 8014134:	4604      	mov	r4, r0
 8014136:	d205      	bcs.n	8014144 <ucdr_check_final_buffer_behavior+0x1c>
 8014138:	2301      	movs	r3, #1
 801413a:	4618      	mov	r0, r3
 801413c:	bd10      	pop	{r4, pc}
 801413e:	2300      	movs	r3, #0
 8014140:	4618      	mov	r0, r3
 8014142:	4770      	bx	lr
 8014144:	6982      	ldr	r2, [r0, #24]
 8014146:	b13a      	cbz	r2, 8014158 <ucdr_check_final_buffer_behavior+0x30>
 8014148:	69c1      	ldr	r1, [r0, #28]
 801414a:	4790      	blx	r2
 801414c:	f080 0301 	eor.w	r3, r0, #1
 8014150:	75a0      	strb	r0, [r4, #22]
 8014152:	b2db      	uxtb	r3, r3
 8014154:	4618      	mov	r0, r3
 8014156:	bd10      	pop	{r4, pc}
 8014158:	2001      	movs	r0, #1
 801415a:	75a0      	strb	r0, [r4, #22]
 801415c:	e7fa      	b.n	8014154 <ucdr_check_final_buffer_behavior+0x2c>
 801415e:	bf00      	nop

08014160 <ucdr_set_on_full_buffer_callback>:
 8014160:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8014164:	4770      	bx	lr
 8014166:	bf00      	nop

08014168 <ucdr_init_buffer_origin_offset_endian>:
 8014168:	b410      	push	{r4}
 801416a:	9c01      	ldr	r4, [sp, #4]
 801416c:	440a      	add	r2, r1
 801416e:	6001      	str	r1, [r0, #0]
 8014170:	6042      	str	r2, [r0, #4]
 8014172:	190a      	adds	r2, r1, r4
 8014174:	441c      	add	r4, r3
 8014176:	6082      	str	r2, [r0, #8]
 8014178:	2200      	movs	r2, #0
 801417a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801417e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014182:	7542      	strb	r2, [r0, #21]
 8014184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014188:	7582      	strb	r2, [r0, #22]
 801418a:	7503      	strb	r3, [r0, #20]
 801418c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014190:	4770      	bx	lr
 8014192:	bf00      	nop

08014194 <ucdr_init_buffer_origin_offset>:
 8014194:	b510      	push	{r4, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	9c04      	ldr	r4, [sp, #16]
 801419a:	9400      	str	r4, [sp, #0]
 801419c:	2401      	movs	r4, #1
 801419e:	9401      	str	r4, [sp, #4]
 80141a0:	f7ff ffe2 	bl	8014168 <ucdr_init_buffer_origin_offset_endian>
 80141a4:	b002      	add	sp, #8
 80141a6:	bd10      	pop	{r4, pc}

080141a8 <ucdr_init_buffer_origin>:
 80141a8:	b510      	push	{r4, lr}
 80141aa:	2400      	movs	r4, #0
 80141ac:	b082      	sub	sp, #8
 80141ae:	9400      	str	r4, [sp, #0]
 80141b0:	f7ff fff0 	bl	8014194 <ucdr_init_buffer_origin_offset>
 80141b4:	b002      	add	sp, #8
 80141b6:	bd10      	pop	{r4, pc}

080141b8 <ucdr_init_buffer>:
 80141b8:	2300      	movs	r3, #0
 80141ba:	f7ff bff5 	b.w	80141a8 <ucdr_init_buffer_origin>
 80141be:	bf00      	nop

080141c0 <ucdr_alignment>:
 80141c0:	fbb0 f2f1 	udiv	r2, r0, r1
 80141c4:	fb02 0011 	mls	r0, r2, r1, r0
 80141c8:	1e4b      	subs	r3, r1, #1
 80141ca:	1a08      	subs	r0, r1, r0
 80141cc:	4018      	ands	r0, r3
 80141ce:	4770      	bx	lr

080141d0 <ucdr_buffer_alignment>:
 80141d0:	7d43      	ldrb	r3, [r0, #21]
 80141d2:	428b      	cmp	r3, r1
 80141d4:	d209      	bcs.n	80141ea <ucdr_buffer_alignment+0x1a>
 80141d6:	6903      	ldr	r3, [r0, #16]
 80141d8:	1e4a      	subs	r2, r1, #1
 80141da:	fbb3 f0f1 	udiv	r0, r3, r1
 80141de:	fb01 3010 	mls	r0, r1, r0, r3
 80141e2:	1a09      	subs	r1, r1, r0
 80141e4:	ea01 0002 	and.w	r0, r1, r2
 80141e8:	4770      	bx	lr
 80141ea:	2000      	movs	r0, #0
 80141ec:	4770      	bx	lr
 80141ee:	bf00      	nop

080141f0 <ucdr_align_to>:
 80141f0:	b538      	push	{r3, r4, r5, lr}
 80141f2:	4604      	mov	r4, r0
 80141f4:	460d      	mov	r5, r1
 80141f6:	f7ff ffeb 	bl	80141d0 <ucdr_buffer_alignment>
 80141fa:	68a3      	ldr	r3, [r4, #8]
 80141fc:	7565      	strb	r5, [r4, #21]
 80141fe:	181a      	adds	r2, r3, r0
 8014200:	6923      	ldr	r3, [r4, #16]
 8014202:	4418      	add	r0, r3
 8014204:	6863      	ldr	r3, [r4, #4]
 8014206:	4293      	cmp	r3, r2
 8014208:	6120      	str	r0, [r4, #16]
 801420a:	bf28      	it	cs
 801420c:	4613      	movcs	r3, r2
 801420e:	60a3      	str	r3, [r4, #8]
 8014210:	bd38      	pop	{r3, r4, r5, pc}
 8014212:	bf00      	nop

08014214 <ucdr_buffer_length>:
 8014214:	6882      	ldr	r2, [r0, #8]
 8014216:	6800      	ldr	r0, [r0, #0]
 8014218:	1a10      	subs	r0, r2, r0
 801421a:	4770      	bx	lr

0801421c <ucdr_buffer_remaining>:
 801421c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8014220:	1a10      	subs	r0, r2, r0
 8014222:	4770      	bx	lr

08014224 <ucdr_check_final_buffer_behavior_array>:
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	7d83      	ldrb	r3, [r0, #22]
 8014228:	b9a3      	cbnz	r3, 8014254 <ucdr_check_final_buffer_behavior_array+0x30>
 801422a:	4604      	mov	r4, r0
 801422c:	460d      	mov	r5, r1
 801422e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014232:	429a      	cmp	r2, r3
 8014234:	d300      	bcc.n	8014238 <ucdr_check_final_buffer_behavior_array+0x14>
 8014236:	b931      	cbnz	r1, 8014246 <ucdr_check_final_buffer_behavior_array+0x22>
 8014238:	4620      	mov	r0, r4
 801423a:	f7ff ffef 	bl	801421c <ucdr_buffer_remaining>
 801423e:	42a8      	cmp	r0, r5
 8014240:	bf28      	it	cs
 8014242:	4628      	movcs	r0, r5
 8014244:	bd38      	pop	{r3, r4, r5, pc}
 8014246:	6983      	ldr	r3, [r0, #24]
 8014248:	b133      	cbz	r3, 8014258 <ucdr_check_final_buffer_behavior_array+0x34>
 801424a:	69c1      	ldr	r1, [r0, #28]
 801424c:	4798      	blx	r3
 801424e:	75a0      	strb	r0, [r4, #22]
 8014250:	2800      	cmp	r0, #0
 8014252:	d0f1      	beq.n	8014238 <ucdr_check_final_buffer_behavior_array+0x14>
 8014254:	2000      	movs	r0, #0
 8014256:	bd38      	pop	{r3, r4, r5, pc}
 8014258:	2301      	movs	r3, #1
 801425a:	7583      	strb	r3, [r0, #22]
 801425c:	e7fa      	b.n	8014254 <ucdr_check_final_buffer_behavior_array+0x30>
 801425e:	bf00      	nop

08014260 <ucdr_advance_buffer>:
 8014260:	b538      	push	{r3, r4, r5, lr}
 8014262:	4604      	mov	r4, r0
 8014264:	460d      	mov	r5, r1
 8014266:	f7ff ff53 	bl	8014110 <ucdr_check_buffer_available_for>
 801426a:	b178      	cbz	r0, 801428c <ucdr_advance_buffer+0x2c>
 801426c:	6923      	ldr	r3, [r4, #16]
 801426e:	68a2      	ldr	r2, [r4, #8]
 8014270:	442b      	add	r3, r5
 8014272:	442a      	add	r2, r5
 8014274:	6123      	str	r3, [r4, #16]
 8014276:	2301      	movs	r3, #1
 8014278:	60a2      	str	r2, [r4, #8]
 801427a:	7563      	strb	r3, [r4, #21]
 801427c:	bd38      	pop	{r3, r4, r5, pc}
 801427e:	68a2      	ldr	r2, [r4, #8]
 8014280:	1a2d      	subs	r5, r5, r0
 8014282:	6923      	ldr	r3, [r4, #16]
 8014284:	4402      	add	r2, r0
 8014286:	4418      	add	r0, r3
 8014288:	60a2      	str	r2, [r4, #8]
 801428a:	6120      	str	r0, [r4, #16]
 801428c:	4629      	mov	r1, r5
 801428e:	2201      	movs	r2, #1
 8014290:	4620      	mov	r0, r4
 8014292:	f7ff ffc7 	bl	8014224 <ucdr_check_final_buffer_behavior_array>
 8014296:	2800      	cmp	r0, #0
 8014298:	d1f1      	bne.n	801427e <ucdr_advance_buffer+0x1e>
 801429a:	2301      	movs	r3, #1
 801429c:	7563      	strb	r3, [r4, #21]
 801429e:	bd38      	pop	{r3, r4, r5, pc}

080142a0 <rcl_get_zero_initialized_publisher>:
 80142a0:	4b01      	ldr	r3, [pc, #4]	@ (80142a8 <rcl_get_zero_initialized_publisher+0x8>)
 80142a2:	6818      	ldr	r0, [r3, #0]
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	080248f8 	.word	0x080248f8

080142ac <rcl_publisher_init>:
 80142ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142b0:	b088      	sub	sp, #32
 80142b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80142b4:	2e00      	cmp	r6, #0
 80142b6:	d06b      	beq.n	8014390 <rcl_publisher_init+0xe4>
 80142b8:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 80142bc:	4605      	mov	r5, r0
 80142be:	460f      	mov	r7, r1
 80142c0:	4690      	mov	r8, r2
 80142c2:	4650      	mov	r0, sl
 80142c4:	4699      	mov	r9, r3
 80142c6:	f001 f917 	bl	80154f8 <rcutils_allocator_is_valid>
 80142ca:	f080 0401 	eor.w	r4, r0, #1
 80142ce:	b2e4      	uxtb	r4, r4
 80142d0:	2c00      	cmp	r4, #0
 80142d2:	d15d      	bne.n	8014390 <rcl_publisher_init+0xe4>
 80142d4:	2d00      	cmp	r5, #0
 80142d6:	d05b      	beq.n	8014390 <rcl_publisher_init+0xe4>
 80142d8:	682b      	ldr	r3, [r5, #0]
 80142da:	b123      	cbz	r3, 80142e6 <rcl_publisher_init+0x3a>
 80142dc:	2464      	movs	r4, #100	@ 0x64
 80142de:	4620      	mov	r0, r4
 80142e0:	b008      	add	sp, #32
 80142e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e6:	4638      	mov	r0, r7
 80142e8:	f007 f812 	bl	801b310 <rcl_node_is_valid>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d054      	beq.n	801439a <rcl_publisher_init+0xee>
 80142f0:	f1b8 0f00 	cmp.w	r8, #0
 80142f4:	d04c      	beq.n	8014390 <rcl_publisher_init+0xe4>
 80142f6:	fab9 f389 	clz	r3, r9
 80142fa:	095b      	lsrs	r3, r3, #5
 80142fc:	f1b9 0f00 	cmp.w	r9, #0
 8014300:	d046      	beq.n	8014390 <rcl_publisher_init+0xe4>
 8014302:	aa07      	add	r2, sp, #28
 8014304:	9307      	str	r3, [sp, #28]
 8014306:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801430a:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801430e:	9205      	str	r2, [sp, #20]
 8014310:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014314:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014318:	4649      	mov	r1, r9
 801431a:	4638      	mov	r0, r7
 801431c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8014320:	f007 f84e 	bl	801b3c0 <rcl_node_resolve_name>
 8014324:	2800      	cmp	r0, #0
 8014326:	d14f      	bne.n	80143c8 <rcl_publisher_init+0x11c>
 8014328:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 801432a:	20c8      	movs	r0, #200	@ 0xc8
 801432c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801432e:	4798      	blx	r3
 8014330:	6028      	str	r0, [r5, #0]
 8014332:	2800      	cmp	r0, #0
 8014334:	d050      	beq.n	80143d8 <rcl_publisher_init+0x12c>
 8014336:	4638      	mov	r0, r7
 8014338:	f007 f80c 	bl	801b354 <rcl_node_get_rmw_handle>
 801433c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8014340:	4641      	mov	r1, r8
 8014342:	9a07      	ldr	r2, [sp, #28]
 8014344:	9300      	str	r3, [sp, #0]
 8014346:	4633      	mov	r3, r6
 8014348:	682c      	ldr	r4, [r5, #0]
 801434a:	f001 fa23 	bl	8015794 <rmw_create_publisher>
 801434e:	682b      	ldr	r3, [r5, #0]
 8014350:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8014354:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014358:	b370      	cbz	r0, 80143b8 <rcl_publisher_init+0x10c>
 801435a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801435e:	f001 fafd 	bl	801595c <rmw_publisher_get_actual_qos>
 8014362:	682b      	ldr	r3, [r5, #0]
 8014364:	4604      	mov	r4, r0
 8014366:	b9d0      	cbnz	r0, 801439e <rcl_publisher_init+0xf2>
 8014368:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801436c:	4631      	mov	r1, r6
 801436e:	4618      	mov	r0, r3
 8014370:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8014374:	2270      	movs	r2, #112	@ 0x70
 8014376:	f00e f8e2 	bl	802253e <memcpy>
 801437a:	683a      	ldr	r2, [r7, #0]
 801437c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8014380:	9807      	ldr	r0, [sp, #28]
 8014382:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014384:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014386:	4798      	blx	r3
 8014388:	4620      	mov	r0, r4
 801438a:	b008      	add	sp, #32
 801438c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014390:	240b      	movs	r4, #11
 8014392:	4620      	mov	r0, r4
 8014394:	b008      	add	sp, #32
 8014396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801439a:	24c8      	movs	r4, #200	@ 0xc8
 801439c:	e79f      	b.n	80142de <rcl_publisher_init+0x32>
 801439e:	b1cb      	cbz	r3, 80143d4 <rcl_publisher_init+0x128>
 80143a0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80143a4:	b142      	cbz	r2, 80143b8 <rcl_publisher_init+0x10c>
 80143a6:	4638      	mov	r0, r7
 80143a8:	f006 ffd4 	bl	801b354 <rcl_node_get_rmw_handle>
 80143ac:	682b      	ldr	r3, [r5, #0]
 80143ae:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80143b2:	f001 fae7 	bl	8015984 <rmw_destroy_publisher>
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	4618      	mov	r0, r3
 80143ba:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 80143bc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80143be:	2401      	movs	r4, #1
 80143c0:	4790      	blx	r2
 80143c2:	2300      	movs	r3, #0
 80143c4:	602b      	str	r3, [r5, #0]
 80143c6:	e7db      	b.n	8014380 <rcl_publisher_init+0xd4>
 80143c8:	2867      	cmp	r0, #103	@ 0x67
 80143ca:	d007      	beq.n	80143dc <rcl_publisher_init+0x130>
 80143cc:	2869      	cmp	r0, #105	@ 0x69
 80143ce:	d005      	beq.n	80143dc <rcl_publisher_init+0x130>
 80143d0:	280a      	cmp	r0, #10
 80143d2:	d001      	beq.n	80143d8 <rcl_publisher_init+0x12c>
 80143d4:	2401      	movs	r4, #1
 80143d6:	e7d3      	b.n	8014380 <rcl_publisher_init+0xd4>
 80143d8:	240a      	movs	r4, #10
 80143da:	e7d1      	b.n	8014380 <rcl_publisher_init+0xd4>
 80143dc:	2467      	movs	r4, #103	@ 0x67
 80143de:	e7cf      	b.n	8014380 <rcl_publisher_init+0xd4>

080143e0 <rcl_publisher_get_default_options>:
 80143e0:	b570      	push	{r4, r5, r6, lr}
 80143e2:	4d14      	ldr	r5, [pc, #80]	@ (8014434 <rcl_publisher_get_default_options+0x54>)
 80143e4:	b088      	sub	sp, #32
 80143e6:	4604      	mov	r4, r0
 80143e8:	2250      	movs	r2, #80	@ 0x50
 80143ea:	4913      	ldr	r1, [pc, #76]	@ (8014438 <rcl_publisher_get_default_options+0x58>)
 80143ec:	4628      	mov	r0, r5
 80143ee:	f00e f8a6 	bl	802253e <memcpy>
 80143f2:	a802      	add	r0, sp, #8
 80143f4:	f001 f872 	bl	80154dc <rcutils_get_default_allocator>
 80143f8:	f10d 0c08 	add.w	ip, sp, #8
 80143fc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014400:	466e      	mov	r6, sp
 8014402:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014406:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801440a:	f8dc 3000 	ldr.w	r3, [ip]
 801440e:	4630      	mov	r0, r6
 8014410:	f8ce 3000 	str.w	r3, [lr]
 8014414:	f001 f8fc 	bl	8015610 <rmw_get_default_publisher_options>
 8014418:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801441c:	2270      	movs	r2, #112	@ 0x70
 801441e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014422:	e883 0003 	stmia.w	r3, {r0, r1}
 8014426:	4629      	mov	r1, r5
 8014428:	4620      	mov	r0, r4
 801442a:	f00e f888 	bl	802253e <memcpy>
 801442e:	4620      	mov	r0, r4
 8014430:	b008      	add	sp, #32
 8014432:	bd70      	pop	{r4, r5, r6, pc}
 8014434:	24064880 	.word	0x24064880
 8014438:	08024900 	.word	0x08024900

0801443c <rcl_publish>:
 801443c:	b1f8      	cbz	r0, 801447e <rcl_publish+0x42>
 801443e:	6803      	ldr	r3, [r0, #0]
 8014440:	b570      	push	{r4, r5, r6, lr}
 8014442:	4604      	mov	r4, r0
 8014444:	b1b3      	cbz	r3, 8014474 <rcl_publish+0x38>
 8014446:	4616      	mov	r6, r2
 8014448:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801444c:	b192      	cbz	r2, 8014474 <rcl_publish+0x38>
 801444e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014452:	460d      	mov	r5, r1
 8014454:	f006 fb7c 	bl	801ab50 <rcl_context_is_valid>
 8014458:	b160      	cbz	r0, 8014474 <rcl_publish+0x38>
 801445a:	6823      	ldr	r3, [r4, #0]
 801445c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014460:	b140      	cbz	r0, 8014474 <rcl_publish+0x38>
 8014462:	b155      	cbz	r5, 801447a <rcl_publish+0x3e>
 8014464:	4632      	mov	r2, r6
 8014466:	4629      	mov	r1, r5
 8014468:	f001 f934 	bl	80156d4 <rmw_publish>
 801446c:	3800      	subs	r0, #0
 801446e:	bf18      	it	ne
 8014470:	2001      	movne	r0, #1
 8014472:	bd70      	pop	{r4, r5, r6, pc}
 8014474:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014478:	bd70      	pop	{r4, r5, r6, pc}
 801447a:	200b      	movs	r0, #11
 801447c:	bd70      	pop	{r4, r5, r6, pc}
 801447e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014482:	4770      	bx	lr

08014484 <rcl_publisher_is_valid>:
 8014484:	b1a0      	cbz	r0, 80144b0 <rcl_publisher_is_valid+0x2c>
 8014486:	6803      	ldr	r3, [r0, #0]
 8014488:	b510      	push	{r4, lr}
 801448a:	4604      	mov	r4, r0
 801448c:	b173      	cbz	r3, 80144ac <rcl_publisher_is_valid+0x28>
 801448e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014492:	b15a      	cbz	r2, 80144ac <rcl_publisher_is_valid+0x28>
 8014494:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014498:	f006 fb5a 	bl	801ab50 <rcl_context_is_valid>
 801449c:	b130      	cbz	r0, 80144ac <rcl_publisher_is_valid+0x28>
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80144a4:	3800      	subs	r0, #0
 80144a6:	bf18      	it	ne
 80144a8:	2001      	movne	r0, #1
 80144aa:	bd10      	pop	{r4, pc}
 80144ac:	2000      	movs	r0, #0
 80144ae:	bd10      	pop	{r4, pc}
 80144b0:	2000      	movs	r0, #0
 80144b2:	4770      	bx	lr

080144b4 <rcl_publisher_is_valid_except_context>:
 80144b4:	b130      	cbz	r0, 80144c4 <rcl_publisher_is_valid_except_context+0x10>
 80144b6:	6800      	ldr	r0, [r0, #0]
 80144b8:	b120      	cbz	r0, 80144c4 <rcl_publisher_is_valid_except_context+0x10>
 80144ba:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80144be:	3800      	subs	r0, #0
 80144c0:	bf18      	it	ne
 80144c2:	2001      	movne	r0, #1
 80144c4:	4770      	bx	lr
 80144c6:	bf00      	nop

080144c8 <_rclc_check_for_new_data>:
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d046      	beq.n	801455a <_rclc_check_for_new_data+0x92>
 80144cc:	4603      	mov	r3, r0
 80144ce:	b530      	push	{r4, r5, lr}
 80144d0:	7802      	ldrb	r2, [r0, #0]
 80144d2:	b085      	sub	sp, #20
 80144d4:	2a0a      	cmp	r2, #10
 80144d6:	d842      	bhi.n	801455e <_rclc_check_for_new_data+0x96>
 80144d8:	e8df f002 	tbb	[pc, r2]
 80144dc:	14181212 	.word	0x14181212
 80144e0:	06060614 	.word	0x06060614
 80144e4:	2e1a      	.short	0x2e1a
 80144e6:	16          	.byte	0x16
 80144e7:	00          	.byte	0x00
 80144e8:	6a0a      	ldr	r2, [r1, #32]
 80144ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80144ec:	2000      	movs	r0, #0
 80144ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80144f2:	1a12      	subs	r2, r2, r0
 80144f4:	bf18      	it	ne
 80144f6:	2201      	movne	r2, #1
 80144f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80144fc:	b005      	add	sp, #20
 80144fe:	bd30      	pop	{r4, r5, pc}
 8014500:	680a      	ldr	r2, [r1, #0]
 8014502:	e7f2      	b.n	80144ea <_rclc_check_for_new_data+0x22>
 8014504:	698a      	ldr	r2, [r1, #24]
 8014506:	e7f0      	b.n	80144ea <_rclc_check_for_new_data+0x22>
 8014508:	688a      	ldr	r2, [r1, #8]
 801450a:	e7ee      	b.n	80144ea <_rclc_check_for_new_data+0x22>
 801450c:	690a      	ldr	r2, [r1, #16]
 801450e:	e7ec      	b.n	80144ea <_rclc_check_for_new_data+0x22>
 8014510:	685c      	ldr	r4, [r3, #4]
 8014512:	4608      	mov	r0, r1
 8014514:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801451c:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 8014520:	f104 0110 	add.w	r1, r4, #16
 8014524:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014528:	9500      	str	r5, [sp, #0]
 801452a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 801452e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8014532:	f008 ff3d 	bl	801d3b0 <rcl_action_client_wait_set_get_entities_ready>
 8014536:	e7e1      	b.n	80144fc <_rclc_check_for_new_data+0x34>
 8014538:	685c      	ldr	r4, [r3, #4]
 801453a:	4608      	mov	r0, r1
 801453c:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8014540:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8014544:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014548:	e9cd 2100 	strd	r2, r1, [sp]
 801454c:	f104 0220 	add.w	r2, r4, #32
 8014550:	f104 0110 	add.w	r1, r4, #16
 8014554:	f009 f946 	bl	801d7e4 <rcl_action_server_wait_set_get_entities_ready>
 8014558:	e7d0      	b.n	80144fc <_rclc_check_for_new_data+0x34>
 801455a:	200b      	movs	r0, #11
 801455c:	4770      	bx	lr
 801455e:	2001      	movs	r0, #1
 8014560:	e7cc      	b.n	80144fc <_rclc_check_for_new_data+0x34>
 8014562:	bf00      	nop

08014564 <_rclc_take_new_data>:
 8014564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014566:	b09b      	sub	sp, #108	@ 0x6c
 8014568:	2800      	cmp	r0, #0
 801456a:	f000 8088 	beq.w	801467e <_rclc_take_new_data+0x11a>
 801456e:	7803      	ldrb	r3, [r0, #0]
 8014570:	4604      	mov	r4, r0
 8014572:	2b0a      	cmp	r3, #10
 8014574:	f200 8167 	bhi.w	8014846 <_rclc_take_new_data+0x2e2>
 8014578:	e8df f003 	tbb	[pc, r3]
 801457c:	44152d2d 	.word	0x44152d2d
 8014580:	19191944 	.word	0x19191944
 8014584:	065a      	.short	0x065a
 8014586:	15          	.byte	0x15
 8014587:	00          	.byte	0x00
 8014588:	6840      	ldr	r0, [r0, #4]
 801458a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801458e:	2b00      	cmp	r3, #0
 8014590:	f040 80b2 	bne.w	80146f8 <_rclc_take_new_data+0x194>
 8014594:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8014598:	2b00      	cmp	r3, #0
 801459a:	f040 80e4 	bne.w	8014766 <_rclc_take_new_data+0x202>
 801459e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d16f      	bne.n	8014686 <_rclc_take_new_data+0x122>
 80145a6:	2500      	movs	r5, #0
 80145a8:	4628      	mov	r0, r5
 80145aa:	b01b      	add	sp, #108	@ 0x6c
 80145ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ae:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80145b0:	6a0b      	ldr	r3, [r1, #32]
 80145b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d0f5      	beq.n	80145a6 <_rclc_take_new_data+0x42>
 80145ba:	6882      	ldr	r2, [r0, #8]
 80145bc:	f100 0110 	add.w	r1, r0, #16
 80145c0:	6840      	ldr	r0, [r0, #4]
 80145c2:	f007 f993 	bl	801b8ec <rcl_take_request>
 80145c6:	4605      	mov	r5, r0
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d0ec      	beq.n	80145a6 <_rclc_take_new_data+0x42>
 80145cc:	f240 2359 	movw	r3, #601	@ 0x259
 80145d0:	4298      	cmp	r0, r3
 80145d2:	d013      	beq.n	80145fc <_rclc_take_new_data+0x98>
 80145d4:	e029      	b.n	801462a <_rclc_take_new_data+0xc6>
 80145d6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80145d8:	680b      	ldr	r3, [r1, #0]
 80145da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d0e1      	beq.n	80145a6 <_rclc_take_new_data+0x42>
 80145e2:	2300      	movs	r3, #0
 80145e4:	aa0a      	add	r2, sp, #40	@ 0x28
 80145e6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80145ea:	f007 fac3 	bl	801bb74 <rcl_take>
 80145ee:	4605      	mov	r5, r0
 80145f0:	2800      	cmp	r0, #0
 80145f2:	d0d9      	beq.n	80145a8 <_rclc_take_new_data+0x44>
 80145f4:	f240 1391 	movw	r3, #401	@ 0x191
 80145f8:	4298      	cmp	r0, r3
 80145fa:	d116      	bne.n	801462a <_rclc_take_new_data+0xc6>
 80145fc:	2300      	movs	r3, #0
 80145fe:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8014602:	e7d1      	b.n	80145a8 <_rclc_take_new_data+0x44>
 8014604:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014606:	698b      	ldr	r3, [r1, #24]
 8014608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d0ca      	beq.n	80145a6 <_rclc_take_new_data+0x42>
 8014610:	6882      	ldr	r2, [r0, #8]
 8014612:	f100 0110 	add.w	r1, r0, #16
 8014616:	6840      	ldr	r0, [r0, #4]
 8014618:	f006 fa2a 	bl	801aa70 <rcl_take_response>
 801461c:	4605      	mov	r5, r0
 801461e:	2800      	cmp	r0, #0
 8014620:	d0c1      	beq.n	80145a6 <_rclc_take_new_data+0x42>
 8014622:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8014626:	4298      	cmp	r0, r3
 8014628:	d0be      	beq.n	80145a8 <_rclc_take_new_data+0x44>
 801462a:	f000 ff89 	bl	8015540 <rcutils_reset_error>
 801462e:	e7bb      	b.n	80145a8 <_rclc_take_new_data+0x44>
 8014630:	6840      	ldr	r0, [r0, #4]
 8014632:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8014636:	2b00      	cmp	r3, #0
 8014638:	d17d      	bne.n	8014736 <_rclc_take_new_data+0x1d2>
 801463a:	69c3      	ldr	r3, [r0, #28]
 801463c:	b11b      	cbz	r3, 8014646 <_rclc_take_new_data+0xe2>
 801463e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014642:	2b00      	cmp	r3, #0
 8014644:	d144      	bne.n	80146d0 <_rclc_take_new_data+0x16c>
 8014646:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801464a:	2b00      	cmp	r3, #0
 801464c:	f040 80ac 	bne.w	80147a8 <_rclc_take_new_data+0x244>
 8014650:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014654:	2b00      	cmp	r3, #0
 8014656:	d0a6      	beq.n	80145a6 <_rclc_take_new_data+0x42>
 8014658:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801465a:	a90a      	add	r1, sp, #40	@ 0x28
 801465c:	3010      	adds	r0, #16
 801465e:	f008 fd7f 	bl	801d160 <rcl_action_take_result_response>
 8014662:	4605      	mov	r5, r0
 8014664:	2800      	cmp	r0, #0
 8014666:	d1e0      	bne.n	801462a <_rclc_take_new_data+0xc6>
 8014668:	6860      	ldr	r0, [r4, #4]
 801466a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801466e:	f009 f9e9 	bl	801da44 <rclc_action_find_handle_by_result_request_sequence_number>
 8014672:	2800      	cmp	r0, #0
 8014674:	d098      	beq.n	80145a8 <_rclc_take_new_data+0x44>
 8014676:	2301      	movs	r3, #1
 8014678:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 801467c:	e794      	b.n	80145a8 <_rclc_take_new_data+0x44>
 801467e:	250b      	movs	r5, #11
 8014680:	4628      	mov	r0, r5
 8014682:	b01b      	add	sp, #108	@ 0x6c
 8014684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014686:	ae04      	add	r6, sp, #16
 8014688:	3010      	adds	r0, #16
 801468a:	aa0a      	add	r2, sp, #40	@ 0x28
 801468c:	4631      	mov	r1, r6
 801468e:	f008 ffdd 	bl	801d64c <rcl_action_take_cancel_request>
 8014692:	4605      	mov	r5, r0
 8014694:	2800      	cmp	r0, #0
 8014696:	d1c8      	bne.n	801462a <_rclc_take_new_data+0xc6>
 8014698:	a90a      	add	r1, sp, #40	@ 0x28
 801469a:	6860      	ldr	r0, [r4, #4]
 801469c:	f009 f992 	bl	801d9c4 <rclc_action_find_goal_handle_by_uuid>
 80146a0:	4607      	mov	r7, r0
 80146a2:	2800      	cmp	r0, #0
 80146a4:	f000 80bb 	beq.w	801481e <_rclc_take_new_data+0x2ba>
 80146a8:	2101      	movs	r1, #1
 80146aa:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80146ae:	f009 f913 	bl	801d8d8 <rcl_action_transition_goal_state>
 80146b2:	2803      	cmp	r0, #3
 80146b4:	4684      	mov	ip, r0
 80146b6:	f040 80a7 	bne.w	8014808 <_rclc_take_new_data+0x2a4>
 80146ba:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80146be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80146c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80146c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80146ca:	f887 c008 	strb.w	ip, [r7, #8]
 80146ce:	e76b      	b.n	80145a8 <_rclc_take_new_data+0x44>
 80146d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80146d2:	3010      	adds	r0, #16
 80146d4:	f008 fdc4 	bl	801d260 <rcl_action_take_feedback>
 80146d8:	4605      	mov	r5, r0
 80146da:	2800      	cmp	r0, #0
 80146dc:	d1a5      	bne.n	801462a <_rclc_take_new_data+0xc6>
 80146de:	6860      	ldr	r0, [r4, #4]
 80146e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80146e2:	f009 f96f 	bl	801d9c4 <rclc_action_find_goal_handle_by_uuid>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2800      	cmp	r0, #0
 80146ea:	f000 80a3 	beq.w	8014834 <_rclc_take_new_data+0x2d0>
 80146ee:	2201      	movs	r2, #1
 80146f0:	6860      	ldr	r0, [r4, #4]
 80146f2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80146f6:	e7a6      	b.n	8014646 <_rclc_take_new_data+0xe2>
 80146f8:	f009 f93e 	bl	801d978 <rclc_action_take_goal_handle>
 80146fc:	4606      	mov	r6, r0
 80146fe:	6860      	ldr	r0, [r4, #4]
 8014700:	2e00      	cmp	r6, #0
 8014702:	f43f af47 	beq.w	8014594 <_rclc_take_new_data+0x30>
 8014706:	6070      	str	r0, [r6, #4]
 8014708:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 801470c:	69f2      	ldr	r2, [r6, #28]
 801470e:	3010      	adds	r0, #16
 8014710:	f008 fee4 	bl	801d4dc <rcl_action_take_goal_request>
 8014714:	4605      	mov	r5, r0
 8014716:	2800      	cmp	r0, #0
 8014718:	f040 808e 	bne.w	8014838 <_rclc_take_new_data+0x2d4>
 801471c:	69f7      	ldr	r7, [r6, #28]
 801471e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014720:	7235      	strb	r5, [r6, #8]
 8014722:	f8c6 0009 	str.w	r0, [r6, #9]
 8014726:	f8c6 100d 	str.w	r1, [r6, #13]
 801472a:	6860      	ldr	r0, [r4, #4]
 801472c:	f8c6 2011 	str.w	r2, [r6, #17]
 8014730:	f8c6 3015 	str.w	r3, [r6, #21]
 8014734:	e72e      	b.n	8014594 <_rclc_take_new_data+0x30>
 8014736:	aa04      	add	r2, sp, #16
 8014738:	a90a      	add	r1, sp, #40	@ 0x28
 801473a:	3010      	adds	r0, #16
 801473c:	f008 fc98 	bl	801d070 <rcl_action_take_goal_response>
 8014740:	4605      	mov	r5, r0
 8014742:	2800      	cmp	r0, #0
 8014744:	f47f af71 	bne.w	801462a <_rclc_take_new_data+0xc6>
 8014748:	6860      	ldr	r0, [r4, #4]
 801474a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801474e:	f009 f967 	bl	801da20 <rclc_action_find_handle_by_goal_request_sequence_number>
 8014752:	b130      	cbz	r0, 8014762 <_rclc_take_new_data+0x1fe>
 8014754:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014758:	2201      	movs	r2, #1
 801475a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801475e:	f880 2020 	strb.w	r2, [r0, #32]
 8014762:	6860      	ldr	r0, [r4, #4]
 8014764:	e769      	b.n	801463a <_rclc_take_new_data+0xd6>
 8014766:	3010      	adds	r0, #16
 8014768:	aa04      	add	r2, sp, #16
 801476a:	a90a      	add	r1, sp, #40	@ 0x28
 801476c:	f008 ff2e 	bl	801d5cc <rcl_action_take_result_request>
 8014770:	4605      	mov	r5, r0
 8014772:	2800      	cmp	r0, #0
 8014774:	f47f af59 	bne.w	801462a <_rclc_take_new_data+0xc6>
 8014778:	a904      	add	r1, sp, #16
 801477a:	6860      	ldr	r0, [r4, #4]
 801477c:	f009 f922 	bl	801d9c4 <rclc_action_find_goal_handle_by_uuid>
 8014780:	4607      	mov	r7, r0
 8014782:	b160      	cbz	r0, 801479e <_rclc_take_new_data+0x23a>
 8014784:	ad0a      	add	r5, sp, #40	@ 0x28
 8014786:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801478a:	f04f 0c02 	mov.w	ip, #2
 801478e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014790:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014796:	e886 0003 	stmia.w	r6, {r0, r1}
 801479a:	f887 c008 	strb.w	ip, [r7, #8]
 801479e:	6860      	ldr	r0, [r4, #4]
 80147a0:	2300      	movs	r3, #0
 80147a2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80147a6:	e6fa      	b.n	801459e <_rclc_take_new_data+0x3a>
 80147a8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80147ac:	a90a      	add	r1, sp, #40	@ 0x28
 80147ae:	3010      	adds	r0, #16
 80147b0:	f008 fd16 	bl	801d1e0 <rcl_action_take_cancel_response>
 80147b4:	4605      	mov	r5, r0
 80147b6:	2800      	cmp	r0, #0
 80147b8:	f47f af37 	bne.w	801462a <_rclc_take_new_data+0xc6>
 80147bc:	6860      	ldr	r0, [r4, #4]
 80147be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80147c2:	f009 f951 	bl	801da68 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80147c6:	4606      	mov	r6, r0
 80147c8:	6860      	ldr	r0, [r4, #4]
 80147ca:	2e00      	cmp	r6, #0
 80147cc:	f43f af40 	beq.w	8014650 <_rclc_take_new_data+0xec>
 80147d0:	2701      	movs	r7, #1
 80147d2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147d4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	f43f af3a 	beq.w	8014650 <_rclc_take_new_data+0xec>
 80147dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80147de:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80147e2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80147e6:	f009 f8ed 	bl	801d9c4 <rclc_action_find_goal_handle_by_uuid>
 80147ea:	b138      	cbz	r0, 80147fc <_rclc_take_new_data+0x298>
 80147ec:	6860      	ldr	r0, [r4, #4]
 80147ee:	3501      	adds	r5, #1
 80147f0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80147f4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147f6:	42ab      	cmp	r3, r5
 80147f8:	d8f0      	bhi.n	80147dc <_rclc_take_new_data+0x278>
 80147fa:	e729      	b.n	8014650 <_rclc_take_new_data+0xec>
 80147fc:	6860      	ldr	r0, [r4, #4]
 80147fe:	3501      	adds	r5, #1
 8014800:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014802:	42ab      	cmp	r3, r5
 8014804:	d8ea      	bhi.n	80147dc <_rclc_take_new_data+0x278>
 8014806:	e723      	b.n	8014650 <_rclc_take_new_data+0xec>
 8014808:	ab06      	add	r3, sp, #24
 801480a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801480c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014810:	2103      	movs	r1, #3
 8014812:	6860      	ldr	r0, [r4, #4]
 8014814:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014818:	f009 f99a 	bl	801db50 <rclc_action_server_goal_cancel_reject>
 801481c:	e6c4      	b.n	80145a8 <_rclc_take_new_data+0x44>
 801481e:	ab06      	add	r3, sp, #24
 8014820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014822:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014826:	2102      	movs	r1, #2
 8014828:	6860      	ldr	r0, [r4, #4]
 801482a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801482e:	f009 f98f 	bl	801db50 <rclc_action_server_goal_cancel_reject>
 8014832:	e6b9      	b.n	80145a8 <_rclc_take_new_data+0x44>
 8014834:	6860      	ldr	r0, [r4, #4]
 8014836:	e706      	b.n	8014646 <_rclc_take_new_data+0xe2>
 8014838:	4631      	mov	r1, r6
 801483a:	6860      	ldr	r0, [r4, #4]
 801483c:	f009 f8ac 	bl	801d998 <rclc_action_remove_used_goal_handle>
 8014840:	f000 fe7e 	bl	8015540 <rcutils_reset_error>
 8014844:	e6b0      	b.n	80145a8 <_rclc_take_new_data+0x44>
 8014846:	2501      	movs	r5, #1
 8014848:	e6ae      	b.n	80145a8 <_rclc_take_new_data+0x44>
 801484a:	bf00      	nop

0801484c <_rclc_execute.part.0>:
 801484c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801484e:	7803      	ldrb	r3, [r0, #0]
 8014850:	b085      	sub	sp, #20
 8014852:	4604      	mov	r4, r0
 8014854:	2b0a      	cmp	r3, #10
 8014856:	f200 8139 	bhi.w	8014acc <_rclc_execute.part.0+0x280>
 801485a:	e8df f003 	tbb	[pc, r3]
 801485e:	4268      	.short	0x4268
 8014860:	06a75b4d 	.word	0x06a75b4d
 8014864:	721d0606 	.word	0x721d0606
 8014868:	62          	.byte	0x62
 8014869:	00          	.byte	0x00
 801486a:	2b06      	cmp	r3, #6
 801486c:	f000 8126 	beq.w	8014abc <_rclc_execute.part.0+0x270>
 8014870:	2b07      	cmp	r3, #7
 8014872:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014874:	f040 811c 	bne.w	8014ab0 <_rclc_execute.part.0+0x264>
 8014878:	f104 0510 	add.w	r5, r4, #16
 801487c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8014880:	6880      	ldr	r0, [r0, #8]
 8014882:	4798      	blx	r3
 8014884:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014886:	4629      	mov	r1, r5
 8014888:	6860      	ldr	r0, [r4, #4]
 801488a:	f007 f86f 	bl	801b96c <rcl_send_response>
 801488e:	4604      	mov	r4, r0
 8014890:	b378      	cbz	r0, 80148f2 <_rclc_execute.part.0+0xa6>
 8014892:	f000 fe55 	bl	8015540 <rcutils_reset_error>
 8014896:	e02c      	b.n	80148f2 <_rclc_execute.part.0+0xa6>
 8014898:	6840      	ldr	r0, [r0, #4]
 801489a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801489e:	2b00      	cmp	r3, #0
 80148a0:	f000 808e 	beq.w	80149c0 <_rclc_execute.part.0+0x174>
 80148a4:	2600      	movs	r6, #0
 80148a6:	2701      	movs	r7, #1
 80148a8:	e004      	b.n	80148b4 <_rclc_execute.part.0+0x68>
 80148aa:	f009 f83f 	bl	801d92c <rclc_action_send_result_request>
 80148ae:	b998      	cbnz	r0, 80148d8 <_rclc_execute.part.0+0x8c>
 80148b0:	722f      	strb	r7, [r5, #8]
 80148b2:	6860      	ldr	r0, [r4, #4]
 80148b4:	f009 f8ea 	bl	801da8c <rclc_action_find_first_handle_with_goal_response>
 80148b8:	4605      	mov	r5, r0
 80148ba:	2800      	cmp	r0, #0
 80148bc:	d07f      	beq.n	80149be <_rclc_execute.part.0+0x172>
 80148be:	6863      	ldr	r3, [r4, #4]
 80148c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80148c2:	699b      	ldr	r3, [r3, #24]
 80148c4:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80148c8:	f885 6020 	strb.w	r6, [r5, #32]
 80148cc:	4798      	blx	r3
 80148ce:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80148d2:	4628      	mov	r0, r5
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d1e8      	bne.n	80148aa <_rclc_execute.part.0+0x5e>
 80148d8:	6860      	ldr	r0, [r4, #4]
 80148da:	4629      	mov	r1, r5
 80148dc:	f009 f85c 	bl	801d998 <rclc_action_remove_used_goal_handle>
 80148e0:	e7e7      	b.n	80148b2 <_rclc_execute.part.0+0x66>
 80148e2:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80148e6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 80148ea:	b100      	cbz	r0, 80148ee <_rclc_execute.part.0+0xa2>
 80148ec:	68a0      	ldr	r0, [r4, #8]
 80148ee:	2400      	movs	r4, #0
 80148f0:	4798      	blx	r3
 80148f2:	4620      	mov	r0, r4
 80148f4:	b005      	add	sp, #20
 80148f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f8:	6840      	ldr	r0, [r0, #4]
 80148fa:	f007 fc6f 	bl	801c1dc <rcl_timer_call>
 80148fe:	f240 3321 	movw	r3, #801	@ 0x321
 8014902:	4604      	mov	r4, r0
 8014904:	4298      	cmp	r0, r3
 8014906:	d001      	beq.n	801490c <_rclc_execute.part.0+0xc0>
 8014908:	2800      	cmp	r0, #0
 801490a:	d1c2      	bne.n	8014892 <_rclc_execute.part.0+0x46>
 801490c:	2400      	movs	r4, #0
 801490e:	4620      	mov	r0, r4
 8014910:	b005      	add	sp, #20
 8014912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014914:	2400      	movs	r4, #0
 8014916:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014918:	6880      	ldr	r0, [r0, #8]
 801491a:	4798      	blx	r3
 801491c:	4620      	mov	r0, r4
 801491e:	b005      	add	sp, #20
 8014920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014922:	2400      	movs	r4, #0
 8014924:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014926:	4798      	blx	r3
 8014928:	4620      	mov	r0, r4
 801492a:	b005      	add	sp, #20
 801492c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801492e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8014932:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014934:	b100      	cbz	r0, 8014938 <_rclc_execute.part.0+0xec>
 8014936:	68a0      	ldr	r0, [r4, #8]
 8014938:	2400      	movs	r4, #0
 801493a:	4798      	blx	r3
 801493c:	4620      	mov	r0, r4
 801493e:	b005      	add	sp, #20
 8014940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014942:	6840      	ldr	r0, [r0, #4]
 8014944:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8014948:	bb3b      	cbnz	r3, 801499a <_rclc_execute.part.0+0x14e>
 801494a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d07d      	beq.n	8014a4e <_rclc_execute.part.0+0x202>
 8014952:	f640 0634 	movw	r6, #2100	@ 0x834
 8014956:	2701      	movs	r7, #1
 8014958:	e007      	b.n	801496a <_rclc_execute.part.0+0x11e>
 801495a:	4628      	mov	r0, r5
 801495c:	f009 f8ae 	bl	801dabc <rclc_action_server_response_goal_request>
 8014960:	4629      	mov	r1, r5
 8014962:	6860      	ldr	r0, [r4, #4]
 8014964:	f009 f818 	bl	801d998 <rclc_action_remove_used_goal_handle>
 8014968:	6860      	ldr	r0, [r4, #4]
 801496a:	2100      	movs	r1, #0
 801496c:	f009 f840 	bl	801d9f0 <rclc_action_find_first_handle_by_status>
 8014970:	4605      	mov	r5, r0
 8014972:	2800      	cmp	r0, #0
 8014974:	d068      	beq.n	8014a48 <_rclc_execute.part.0+0x1fc>
 8014976:	6863      	ldr	r3, [r4, #4]
 8014978:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801497a:	699b      	ldr	r3, [r3, #24]
 801497c:	4798      	blx	r3
 801497e:	42b0      	cmp	r0, r6
 8014980:	f04f 0100 	mov.w	r1, #0
 8014984:	d1e9      	bne.n	801495a <_rclc_execute.part.0+0x10e>
 8014986:	2101      	movs	r1, #1
 8014988:	4628      	mov	r0, r5
 801498a:	f009 f897 	bl	801dabc <rclc_action_server_response_goal_request>
 801498e:	722f      	strb	r7, [r5, #8]
 8014990:	e7ea      	b.n	8014968 <_rclc_execute.part.0+0x11c>
 8014992:	6848      	ldr	r0, [r1, #4]
 8014994:	f009 f800 	bl	801d998 <rclc_action_remove_used_goal_handle>
 8014998:	6860      	ldr	r0, [r4, #4]
 801499a:	f009 f835 	bl	801da08 <rclc_action_find_first_terminated_handle>
 801499e:	4601      	mov	r1, r0
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d1f6      	bne.n	8014992 <_rclc_execute.part.0+0x146>
 80149a4:	6860      	ldr	r0, [r4, #4]
 80149a6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80149aa:	e7ce      	b.n	801494a <_rclc_execute.part.0+0xfe>
 80149ac:	2400      	movs	r4, #0
 80149ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80149b0:	f100 0110 	add.w	r1, r0, #16
 80149b4:	6880      	ldr	r0, [r0, #8]
 80149b6:	4798      	blx	r3
 80149b8:	4620      	mov	r0, r4
 80149ba:	b005      	add	sp, #20
 80149bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149be:	6860      	ldr	r0, [r4, #4]
 80149c0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80149c4:	b18b      	cbz	r3, 80149ea <_rclc_execute.part.0+0x19e>
 80149c6:	68c5      	ldr	r5, [r0, #12]
 80149c8:	b32d      	cbz	r5, 8014a16 <_rclc_execute.part.0+0x1ca>
 80149ca:	2600      	movs	r6, #0
 80149cc:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80149d0:	b143      	cbz	r3, 80149e4 <_rclc_execute.part.0+0x198>
 80149d2:	69c3      	ldr	r3, [r0, #28]
 80149d4:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80149d8:	b123      	cbz	r3, 80149e4 <_rclc_execute.part.0+0x198>
 80149da:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80149dc:	4628      	mov	r0, r5
 80149de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149e0:	4798      	blx	r3
 80149e2:	6860      	ldr	r0, [r4, #4]
 80149e4:	682d      	ldr	r5, [r5, #0]
 80149e6:	2d00      	cmp	r5, #0
 80149e8:	d1f0      	bne.n	80149cc <_rclc_execute.part.0+0x180>
 80149ea:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80149ee:	b193      	cbz	r3, 8014a16 <_rclc_execute.part.0+0x1ca>
 80149f0:	68c5      	ldr	r5, [r0, #12]
 80149f2:	b185      	cbz	r5, 8014a16 <_rclc_execute.part.0+0x1ca>
 80149f4:	2600      	movs	r6, #0
 80149f6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80149fa:	b14b      	cbz	r3, 8014a10 <_rclc_execute.part.0+0x1c4>
 80149fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80149fe:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8014a02:	b12b      	cbz	r3, 8014a10 <_rclc_execute.part.0+0x1c4>
 8014a04:	4628      	mov	r0, r5
 8014a06:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8014a0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014a0c:	4798      	blx	r3
 8014a0e:	6860      	ldr	r0, [r4, #4]
 8014a10:	682d      	ldr	r5, [r5, #0]
 8014a12:	2d00      	cmp	r5, #0
 8014a14:	d1ef      	bne.n	80149f6 <_rclc_execute.part.0+0x1aa>
 8014a16:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	f43f af76 	beq.w	801490c <_rclc_execute.part.0+0xc0>
 8014a20:	2700      	movs	r7, #0
 8014a22:	e00b      	b.n	8014a3c <_rclc_execute.part.0+0x1f0>
 8014a24:	6863      	ldr	r3, [r4, #4]
 8014a26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014a2a:	6a1e      	ldr	r6, [r3, #32]
 8014a2c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8014a30:	47b0      	blx	r6
 8014a32:	6860      	ldr	r0, [r4, #4]
 8014a34:	4629      	mov	r1, r5
 8014a36:	f008 ffaf 	bl	801d998 <rclc_action_remove_used_goal_handle>
 8014a3a:	6860      	ldr	r0, [r4, #4]
 8014a3c:	f009 f832 	bl	801daa4 <rclc_action_find_first_handle_with_result_response>
 8014a40:	4605      	mov	r5, r0
 8014a42:	2800      	cmp	r0, #0
 8014a44:	d1ee      	bne.n	8014a24 <_rclc_execute.part.0+0x1d8>
 8014a46:	e761      	b.n	801490c <_rclc_execute.part.0+0xc0>
 8014a48:	6860      	ldr	r0, [r4, #4]
 8014a4a:	f880 5020 	strb.w	r5, [r0, #32]
 8014a4e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	f43f af5a 	beq.w	801490c <_rclc_execute.part.0+0xc0>
 8014a58:	68c5      	ldr	r5, [r0, #12]
 8014a5a:	b1b5      	cbz	r5, 8014a8a <_rclc_execute.part.0+0x23e>
 8014a5c:	2602      	movs	r6, #2
 8014a5e:	e001      	b.n	8014a64 <_rclc_execute.part.0+0x218>
 8014a60:	682d      	ldr	r5, [r5, #0]
 8014a62:	b195      	cbz	r5, 8014a8a <_rclc_execute.part.0+0x23e>
 8014a64:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014a68:	2b03      	cmp	r3, #3
 8014a6a:	d1f9      	bne.n	8014a60 <_rclc_execute.part.0+0x214>
 8014a6c:	69c3      	ldr	r3, [r0, #28]
 8014a6e:	4628      	mov	r0, r5
 8014a70:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014a72:	4798      	blx	r3
 8014a74:	4603      	mov	r3, r0
 8014a76:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014a80:	b143      	cbz	r3, 8014a94 <_rclc_execute.part.0+0x248>
 8014a82:	f009 f839 	bl	801daf8 <rclc_action_server_goal_cancel_accept>
 8014a86:	6860      	ldr	r0, [r4, #4]
 8014a88:	e7ea      	b.n	8014a60 <_rclc_execute.part.0+0x214>
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	461c      	mov	r4, r3
 8014a8e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014a92:	e72e      	b.n	80148f2 <_rclc_execute.part.0+0xa6>
 8014a94:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014a96:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8014a9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a9e:	2101      	movs	r1, #1
 8014aa0:	6860      	ldr	r0, [r4, #4]
 8014aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014aa6:	f009 f853 	bl	801db50 <rclc_action_server_goal_cancel_reject>
 8014aaa:	722e      	strb	r6, [r5, #8]
 8014aac:	6860      	ldr	r0, [r4, #4]
 8014aae:	e7d7      	b.n	8014a60 <_rclc_execute.part.0+0x214>
 8014ab0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014ab2:	f104 0510 	add.w	r5, r4, #16
 8014ab6:	6880      	ldr	r0, [r0, #8]
 8014ab8:	4798      	blx	r3
 8014aba:	e6e3      	b.n	8014884 <_rclc_execute.part.0+0x38>
 8014abc:	f100 0510 	add.w	r5, r0, #16
 8014ac0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014ac2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014ac4:	4629      	mov	r1, r5
 8014ac6:	6880      	ldr	r0, [r0, #8]
 8014ac8:	4798      	blx	r3
 8014aca:	e6db      	b.n	8014884 <_rclc_execute.part.0+0x38>
 8014acc:	2401      	movs	r4, #1
 8014ace:	e710      	b.n	80148f2 <_rclc_execute.part.0+0xa6>

08014ad0 <rclc_executor_trigger_any>:
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	d03d      	beq.n	8014b50 <rclc_executor_trigger_any+0x80>
 8014ad4:	2900      	cmp	r1, #0
 8014ad6:	d03c      	beq.n	8014b52 <rclc_executor_trigger_any+0x82>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8014ade:	2200      	movs	r2, #0
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	d035      	beq.n	8014b50 <rclc_executor_trigger_any+0x80>
 8014ae4:	b430      	push	{r4, r5}
 8014ae6:	f893 c000 	ldrb.w	ip, [r3]
 8014aea:	f1bc 0f08 	cmp.w	ip, #8
 8014aee:	d11d      	bne.n	8014b2c <rclc_executor_trigger_any+0x5c>
 8014af0:	685c      	ldr	r4, [r3, #4]
 8014af2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8014af4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8014af8:	d105      	bne.n	8014b06 <rclc_executor_trigger_any+0x36>
 8014afa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8014afe:	b910      	cbnz	r0, 8014b06 <rclc_executor_trigger_any+0x36>
 8014b00:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8014b04:	b128      	cbz	r0, 8014b12 <rclc_executor_trigger_any+0x42>
 8014b06:	bc30      	pop	{r4, r5}
 8014b08:	4770      	bx	lr
 8014b0a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	d1f9      	bne.n	8014b06 <rclc_executor_trigger_any+0x36>
 8014b12:	3201      	adds	r2, #1
 8014b14:	3340      	adds	r3, #64	@ 0x40
 8014b16:	4291      	cmp	r1, r2
 8014b18:	d017      	beq.n	8014b4a <rclc_executor_trigger_any+0x7a>
 8014b1a:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	d0f1      	beq.n	8014b06 <rclc_executor_trigger_any+0x36>
 8014b22:	f893 c000 	ldrb.w	ip, [r3]
 8014b26:	f1bc 0f08 	cmp.w	ip, #8
 8014b2a:	d0e1      	beq.n	8014af0 <rclc_executor_trigger_any+0x20>
 8014b2c:	f1bc 0f09 	cmp.w	ip, #9
 8014b30:	d1eb      	bne.n	8014b0a <rclc_executor_trigger_any+0x3a>
 8014b32:	685c      	ldr	r4, [r3, #4]
 8014b34:	6a25      	ldr	r5, [r4, #32]
 8014b36:	2d00      	cmp	r5, #0
 8014b38:	d1e5      	bne.n	8014b06 <rclc_executor_trigger_any+0x36>
 8014b3a:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	d1e1      	bne.n	8014b06 <rclc_executor_trigger_any+0x36>
 8014b42:	3201      	adds	r2, #1
 8014b44:	3340      	adds	r3, #64	@ 0x40
 8014b46:	4291      	cmp	r1, r2
 8014b48:	d1e7      	bne.n	8014b1a <rclc_executor_trigger_any+0x4a>
 8014b4a:	2000      	movs	r0, #0
 8014b4c:	bc30      	pop	{r4, r5}
 8014b4e:	4770      	bx	lr
 8014b50:	4770      	bx	lr
 8014b52:	4608      	mov	r0, r1
 8014b54:	4770      	bx	lr
 8014b56:	bf00      	nop

08014b58 <rclc_executor_get_zero_initialized_executor>:
 8014b58:	b510      	push	{r4, lr}
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	2288      	movs	r2, #136	@ 0x88
 8014b5e:	4902      	ldr	r1, [pc, #8]	@ (8014b68 <rclc_executor_get_zero_initialized_executor+0x10>)
 8014b60:	f00d fced 	bl	802253e <memcpy>
 8014b64:	4620      	mov	r0, r4
 8014b66:	bd10      	pop	{r4, pc}
 8014b68:	08024950 	.word	0x08024950
 8014b6c:	00000000 	.word	0x00000000

08014b70 <rclc_executor_init>:
 8014b70:	2900      	cmp	r1, #0
 8014b72:	d06a      	beq.n	8014c4a <rclc_executor_init+0xda>
 8014b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b78:	4605      	mov	r5, r0
 8014b7a:	b0b0      	sub	sp, #192	@ 0xc0
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	d05c      	beq.n	8014c3a <rclc_executor_init+0xca>
 8014b80:	4616      	mov	r6, r2
 8014b82:	4618      	mov	r0, r3
 8014b84:	4688      	mov	r8, r1
 8014b86:	461f      	mov	r7, r3
 8014b88:	f000 fcb6 	bl	80154f8 <rcutils_allocator_is_valid>
 8014b8c:	2e00      	cmp	r6, #0
 8014b8e:	d054      	beq.n	8014c3a <rclc_executor_init+0xca>
 8014b90:	f080 0401 	eor.w	r4, r0, #1
 8014b94:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014b98:	d14f      	bne.n	8014c3a <rclc_executor_init+0xca>
 8014b9a:	2288      	movs	r2, #136	@ 0x88
 8014b9c:	4930      	ldr	r1, [pc, #192]	@ (8014c60 <rclc_executor_init+0xf0>)
 8014b9e:	a80e      	add	r0, sp, #56	@ 0x38
 8014ba0:	f00d fccd 	bl	802253e <memcpy>
 8014ba4:	a90e      	add	r1, sp, #56	@ 0x38
 8014ba6:	2288      	movs	r2, #136	@ 0x88
 8014ba8:	4628      	mov	r0, r5
 8014baa:	f00d fcc8 	bl	802253e <memcpy>
 8014bae:	4668      	mov	r0, sp
 8014bb0:	f8c5 8000 	str.w	r8, [r5]
 8014bb4:	60ae      	str	r6, [r5, #8]
 8014bb6:	f007 fc87 	bl	801c4c8 <rcl_get_zero_initialized_wait_set>
 8014bba:	46ec      	mov	ip, sp
 8014bbc:	f105 0e14 	add.w	lr, r5, #20
 8014bc0:	f8d7 8000 	ldr.w	r8, [r7]
 8014bc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bd0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bd8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8014c58 <rclc_executor_init+0xe8>
 8014bdc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014be0:	f8dc 3000 	ldr.w	r3, [ip]
 8014be4:	01b0      	lsls	r0, r6, #6
 8014be6:	6939      	ldr	r1, [r7, #16]
 8014be8:	f8ce 3000 	str.w	r3, [lr]
 8014bec:	612f      	str	r7, [r5, #16]
 8014bee:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014bf2:	47c0      	blx	r8
 8014bf4:	6068      	str	r0, [r5, #4]
 8014bf6:	b908      	cbnz	r0, 8014bfc <rclc_executor_init+0x8c>
 8014bf8:	e029      	b.n	8014c4e <rclc_executor_init+0xde>
 8014bfa:	6868      	ldr	r0, [r5, #4]
 8014bfc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014c00:	3401      	adds	r4, #1
 8014c02:	4631      	mov	r1, r6
 8014c04:	f000 fac0 	bl	8015188 <rclc_executor_handle_init>
 8014c08:	42a6      	cmp	r6, r4
 8014c0a:	d8f6      	bhi.n	8014bfa <rclc_executor_init+0x8a>
 8014c0c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014c10:	f000 faae 	bl	8015170 <rclc_executor_handle_counters_zero_init>
 8014c14:	4a13      	ldr	r2, [pc, #76]	@ (8014c64 <rclc_executor_init+0xf4>)
 8014c16:	2300      	movs	r3, #0
 8014c18:	6868      	ldr	r0, [r5, #4]
 8014c1a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8014c1e:	b168      	cbz	r0, 8014c3c <rclc_executor_init+0xcc>
 8014c20:	68ab      	ldr	r3, [r5, #8]
 8014c22:	b173      	cbz	r3, 8014c42 <rclc_executor_init+0xd2>
 8014c24:	692a      	ldr	r2, [r5, #16]
 8014c26:	fab2 f382 	clz	r3, r2
 8014c2a:	095b      	lsrs	r3, r3, #5
 8014c2c:	b14a      	cbz	r2, 8014c42 <rclc_executor_init+0xd2>
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8014c34:	b030      	add	sp, #192	@ 0xc0
 8014c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c3a:	200b      	movs	r0, #11
 8014c3c:	b030      	add	sp, #192	@ 0xc0
 8014c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c42:	2000      	movs	r0, #0
 8014c44:	b030      	add	sp, #192	@ 0xc0
 8014c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c4a:	200b      	movs	r0, #11
 8014c4c:	4770      	bx	lr
 8014c4e:	200a      	movs	r0, #10
 8014c50:	e7f4      	b.n	8014c3c <rclc_executor_init+0xcc>
 8014c52:	bf00      	nop
 8014c54:	f3af 8000 	nop.w
 8014c58:	3b9aca00 	.word	0x3b9aca00
 8014c5c:	00000000 	.word	0x00000000
 8014c60:	08024950 	.word	0x08024950
 8014c64:	08014ad1 	.word	0x08014ad1

08014c68 <rclc_executor_add_subscription>:
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	bf18      	it	ne
 8014c6c:	2a00      	cmpne	r2, #0
 8014c6e:	b570      	push	{r4, r5, r6, lr}
 8014c70:	4604      	mov	r4, r0
 8014c72:	bf0c      	ite	eq
 8014c74:	2001      	moveq	r0, #1
 8014c76:	2000      	movne	r0, #0
 8014c78:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014c7c:	2900      	cmp	r1, #0
 8014c7e:	bf08      	it	eq
 8014c80:	f040 0001 	orreq.w	r0, r0, #1
 8014c84:	bb28      	cbnz	r0, 8014cd2 <rclc_executor_add_subscription+0x6a>
 8014c86:	fab4 f584 	clz	r5, r4
 8014c8a:	096d      	lsrs	r5, r5, #5
 8014c8c:	b30c      	cbz	r4, 8014cd2 <rclc_executor_add_subscription+0x6a>
 8014c8e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014c92:	4286      	cmp	r6, r0
 8014c94:	d301      	bcc.n	8014c9a <rclc_executor_add_subscription+0x32>
 8014c96:	2001      	movs	r0, #1
 8014c98:	bd70      	pop	{r4, r5, r6, pc}
 8014c9a:	6860      	ldr	r0, [r4, #4]
 8014c9c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014ca0:	f800 500e 	strb.w	r5, [r0, lr]
 8014ca4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014ca8:	3601      	adds	r6, #1
 8014caa:	6303      	str	r3, [r0, #48]	@ 0x30
 8014cac:	2301      	movs	r3, #1
 8014cae:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8014cb0:	f104 0514 	add.w	r5, r4, #20
 8014cb4:	f880 c001 	strb.w	ip, [r0, #1]
 8014cb8:	8703      	strh	r3, [r0, #56]	@ 0x38
 8014cba:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	60e6      	str	r6, [r4, #12]
 8014cc2:	f007 fc15 	bl	801c4f0 <rcl_wait_set_is_valid>
 8014cc6:	b930      	cbnz	r0, 8014cd6 <rclc_executor_add_subscription+0x6e>
 8014cc8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8014cca:	2000      	movs	r0, #0
 8014ccc:	3301      	adds	r3, #1
 8014cce:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014cd0:	bd70      	pop	{r4, r5, r6, pc}
 8014cd2:	200b      	movs	r0, #11
 8014cd4:	bd70      	pop	{r4, r5, r6, pc}
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	f007 fc10 	bl	801c4fc <rcl_wait_set_fini>
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d0f3      	beq.n	8014cc8 <rclc_executor_add_subscription+0x60>
 8014ce0:	bd70      	pop	{r4, r5, r6, pc}
 8014ce2:	bf00      	nop

08014ce4 <rclc_executor_add_service>:
 8014ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ce6:	9d06      	ldr	r5, [sp, #24]
 8014ce8:	4604      	mov	r4, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	bf18      	it	ne
 8014cee:	2d00      	cmpne	r5, #0
 8014cf0:	bf0c      	ite	eq
 8014cf2:	2001      	moveq	r0, #1
 8014cf4:	2000      	movne	r0, #0
 8014cf6:	2a00      	cmp	r2, #0
 8014cf8:	bf08      	it	eq
 8014cfa:	f040 0001 	orreq.w	r0, r0, #1
 8014cfe:	2900      	cmp	r1, #0
 8014d00:	bf08      	it	eq
 8014d02:	f040 0001 	orreq.w	r0, r0, #1
 8014d06:	bb40      	cbnz	r0, 8014d5a <rclc_executor_add_service+0x76>
 8014d08:	fab4 f684 	clz	r6, r4
 8014d0c:	0976      	lsrs	r6, r6, #5
 8014d0e:	b324      	cbz	r4, 8014d5a <rclc_executor_add_service+0x76>
 8014d10:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014d14:	42b8      	cmp	r0, r7
 8014d16:	d301      	bcc.n	8014d1c <rclc_executor_add_service+0x38>
 8014d18:	2001      	movs	r0, #1
 8014d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d1c:	6867      	ldr	r7, [r4, #4]
 8014d1e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014d22:	f100 0c01 	add.w	ip, r0, #1
 8014d26:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014d2a:	6283      	str	r3, [r0, #40]	@ 0x28
 8014d2c:	2305      	movs	r3, #5
 8014d2e:	6305      	str	r5, [r0, #48]	@ 0x30
 8014d30:	f104 0514 	add.w	r5, r4, #20
 8014d34:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014d38:	f827 300e 	strh.w	r3, [r7, lr]
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8014d40:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014d44:	4628      	mov	r0, r5
 8014d46:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014d4a:	f007 fbd1 	bl	801c4f0 <rcl_wait_set_is_valid>
 8014d4e:	b930      	cbnz	r0, 8014d5e <rclc_executor_add_service+0x7a>
 8014d50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014d52:	2000      	movs	r0, #0
 8014d54:	3301      	adds	r3, #1
 8014d56:	6563      	str	r3, [r4, #84]	@ 0x54
 8014d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d5a:	200b      	movs	r0, #11
 8014d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f007 fbcc 	bl	801c4fc <rcl_wait_set_fini>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d0f3      	beq.n	8014d50 <rclc_executor_add_service+0x6c>
 8014d68:	e7d7      	b.n	8014d1a <rclc_executor_add_service+0x36>
 8014d6a:	bf00      	nop

08014d6c <rclc_executor_prepare>:
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	d044      	beq.n	8014dfa <rclc_executor_prepare+0x8e>
 8014d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d72:	f100 0514 	add.w	r5, r0, #20
 8014d76:	b09b      	sub	sp, #108	@ 0x6c
 8014d78:	4604      	mov	r4, r0
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	f007 fbb8 	bl	801c4f0 <rcl_wait_set_is_valid>
 8014d80:	b110      	cbz	r0, 8014d88 <rclc_executor_prepare+0x1c>
 8014d82:	2000      	movs	r0, #0
 8014d84:	b01b      	add	sp, #108	@ 0x6c
 8014d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d88:	4628      	mov	r0, r5
 8014d8a:	f007 fbb7 	bl	801c4fc <rcl_wait_set_fini>
 8014d8e:	2800      	cmp	r0, #0
 8014d90:	d130      	bne.n	8014df4 <rclc_executor_prepare+0x88>
 8014d92:	a80c      	add	r0, sp, #48	@ 0x30
 8014d94:	ae04      	add	r6, sp, #16
 8014d96:	f007 fb97 	bl	801c4c8 <rcl_get_zero_initialized_wait_set>
 8014d9a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014d9e:	46ae      	mov	lr, r5
 8014da0:	6927      	ldr	r7, [r4, #16]
 8014da2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014da6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014daa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014dae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014db2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014db6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014dba:	f8dc 3000 	ldr.w	r3, [ip]
 8014dbe:	f8ce 3000 	str.w	r3, [lr]
 8014dc2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014dc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	4628      	mov	r0, r5
 8014dca:	6822      	ldr	r2, [r4, #0]
 8014dcc:	6033      	str	r3, [r6, #0]
 8014dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014dd0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8014dd2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014dd6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8014dda:	e9cd 2100 	strd	r2, r1, [sp]
 8014dde:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014de0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014de2:	f007 fe8b 	bl	801cafc <rcl_wait_set_init>
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d0cc      	beq.n	8014d84 <rclc_executor_prepare+0x18>
 8014dea:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014dec:	f000 fba8 	bl	8015540 <rcutils_reset_error>
 8014df0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014df2:	e7c7      	b.n	8014d84 <rclc_executor_prepare+0x18>
 8014df4:	f000 fba4 	bl	8015540 <rcutils_reset_error>
 8014df8:	e7cb      	b.n	8014d92 <rclc_executor_prepare+0x26>
 8014dfa:	200b      	movs	r0, #11
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop

08014e00 <rclc_executor_spin_some.part.0>:
 8014e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	4605      	mov	r5, r0
 8014e06:	4691      	mov	r9, r2
 8014e08:	4698      	mov	r8, r3
 8014e0a:	f7ff ffaf 	bl	8014d6c <rclc_executor_prepare>
 8014e0e:	f105 0614 	add.w	r6, r5, #20
 8014e12:	4630      	mov	r0, r6
 8014e14:	f007 fc3e 	bl	801c694 <rcl_wait_set_clear>
 8014e18:	4607      	mov	r7, r0
 8014e1a:	2800      	cmp	r0, #0
 8014e1c:	f040 80a8 	bne.w	8014f70 <rclc_executor_spin_some.part.0+0x170>
 8014e20:	68ab      	ldr	r3, [r5, #8]
 8014e22:	b30b      	cbz	r3, 8014e68 <rclc_executor_spin_some.part.0+0x68>
 8014e24:	4604      	mov	r4, r0
 8014e26:	6869      	ldr	r1, [r5, #4]
 8014e28:	01a2      	lsls	r2, r4, #6
 8014e2a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014e2e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8014e32:	b1cb      	cbz	r3, 8014e68 <rclc_executor_spin_some.part.0+0x68>
 8014e34:	5c8b      	ldrb	r3, [r1, r2]
 8014e36:	2b0a      	cmp	r3, #10
 8014e38:	f200 80de 	bhi.w	8014ff8 <rclc_executor_spin_some.part.0+0x1f8>
 8014e3c:	e8df f003 	tbb	[pc, r3]
 8014e40:	8da99d9d 	.word	0x8da99d9d
 8014e44:	0606068d 	.word	0x0606068d
 8014e48:	c1ce      	.short	0xc1ce
 8014e4a:	b5          	.byte	0xb5
 8014e4b:	00          	.byte	0x00
 8014e4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e50:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e54:	4630      	mov	r0, r6
 8014e56:	f007 ff6d 	bl	801cd34 <rcl_wait_set_add_service>
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	f040 8087 	bne.w	8014f6e <rclc_executor_spin_some.part.0+0x16e>
 8014e60:	3401      	adds	r4, #1
 8014e62:	68ab      	ldr	r3, [r5, #8]
 8014e64:	429c      	cmp	r4, r3
 8014e66:	d3de      	bcc.n	8014e26 <rclc_executor_spin_some.part.0+0x26>
 8014e68:	4643      	mov	r3, r8
 8014e6a:	464a      	mov	r2, r9
 8014e6c:	4630      	mov	r0, r6
 8014e6e:	f007 ff8f 	bl	801cd90 <rcl_wait>
 8014e72:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f000 80c6 	beq.w	8015008 <rclc_executor_spin_some.part.0+0x208>
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	f040 80bb 	bne.w	8014ff8 <rclc_executor_spin_some.part.0+0x1f8>
 8014e82:	68ab      	ldr	r3, [r5, #8]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f000 8159 	beq.w	801513c <rclc_executor_spin_some.part.0+0x33c>
 8014e8a:	2400      	movs	r4, #0
 8014e8c:	f240 1991 	movw	r9, #401	@ 0x191
 8014e90:	46a0      	mov	r8, r4
 8014e92:	e00a      	b.n	8014eaa <rclc_executor_spin_some.part.0+0xaa>
 8014e94:	f7ff fb18 	bl	80144c8 <_rclc_check_for_new_data>
 8014e98:	4604      	mov	r4, r0
 8014e9a:	b110      	cbz	r0, 8014ea2 <rclc_executor_spin_some.part.0+0xa2>
 8014e9c:	4548      	cmp	r0, r9
 8014e9e:	f040 80b1 	bne.w	8015004 <rclc_executor_spin_some.part.0+0x204>
 8014ea2:	68ab      	ldr	r3, [r5, #8]
 8014ea4:	4598      	cmp	r8, r3
 8014ea6:	f080 8126 	bcs.w	80150f6 <rclc_executor_spin_some.part.0+0x2f6>
 8014eaa:	686a      	ldr	r2, [r5, #4]
 8014eac:	4631      	mov	r1, r6
 8014eae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014eb2:	f108 0801 	add.w	r8, r8, #1
 8014eb6:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014eba:	f1bc 0f00 	cmp.w	ip, #0
 8014ebe:	d1e9      	bne.n	8014e94 <rclc_executor_spin_some.part.0+0x94>
 8014ec0:	4619      	mov	r1, r3
 8014ec2:	4610      	mov	r0, r2
 8014ec4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014ec8:	4798      	blx	r3
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	f000 809a 	beq.w	8015004 <rclc_executor_spin_some.part.0+0x204>
 8014ed0:	68ab      	ldr	r3, [r5, #8]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f000 8096 	beq.w	8015004 <rclc_executor_spin_some.part.0+0x204>
 8014ed8:	f04f 0800 	mov.w	r8, #0
 8014edc:	f240 1991 	movw	r9, #401	@ 0x191
 8014ee0:	e009      	b.n	8014ef6 <rclc_executor_spin_some.part.0+0xf6>
 8014ee2:	f7ff fb3f 	bl	8014564 <_rclc_take_new_data>
 8014ee6:	4604      	mov	r4, r0
 8014ee8:	b110      	cbz	r0, 8014ef0 <rclc_executor_spin_some.part.0+0xf0>
 8014eea:	4548      	cmp	r0, r9
 8014eec:	f040 808a 	bne.w	8015004 <rclc_executor_spin_some.part.0+0x204>
 8014ef0:	68ab      	ldr	r3, [r5, #8]
 8014ef2:	4598      	cmp	r8, r3
 8014ef4:	d209      	bcs.n	8014f0a <rclc_executor_spin_some.part.0+0x10a>
 8014ef6:	6868      	ldr	r0, [r5, #4]
 8014ef8:	4631      	mov	r1, r6
 8014efa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014efe:	f108 0801 	add.w	r8, r8, #1
 8014f02:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014f06:	2a00      	cmp	r2, #0
 8014f08:	d1eb      	bne.n	8014ee2 <rclc_executor_spin_some.part.0+0xe2>
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d07a      	beq.n	8015004 <rclc_executor_spin_some.part.0+0x204>
 8014f0e:	2600      	movs	r6, #0
 8014f10:	e00e      	b.n	8014f30 <rclc_executor_spin_some.part.0+0x130>
 8014f12:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014f16:	2a08      	cmp	r2, #8
 8014f18:	f000 80fc 	beq.w	8015114 <rclc_executor_spin_some.part.0+0x314>
 8014f1c:	2a09      	cmp	r2, #9
 8014f1e:	f000 80ee 	beq.w	80150fe <rclc_executor_spin_some.part.0+0x2fe>
 8014f22:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8014f26:	b98a      	cbnz	r2, 8014f4c <rclc_executor_spin_some.part.0+0x14c>
 8014f28:	3601      	adds	r6, #1
 8014f2a:	429e      	cmp	r6, r3
 8014f2c:	d267      	bcs.n	8014ffe <rclc_executor_spin_some.part.0+0x1fe>
 8014f2e:	2400      	movs	r4, #0
 8014f30:	686a      	ldr	r2, [r5, #4]
 8014f32:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014f36:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014f3a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8014f3e:	2900      	cmp	r1, #0
 8014f40:	d060      	beq.n	8015004 <rclc_executor_spin_some.part.0+0x204>
 8014f42:	7841      	ldrb	r1, [r0, #1]
 8014f44:	2900      	cmp	r1, #0
 8014f46:	d0e4      	beq.n	8014f12 <rclc_executor_spin_some.part.0+0x112>
 8014f48:	2901      	cmp	r1, #1
 8014f4a:	d1ed      	bne.n	8014f28 <rclc_executor_spin_some.part.0+0x128>
 8014f4c:	f7ff fc7e 	bl	801484c <_rclc_execute.part.0>
 8014f50:	2800      	cmp	r0, #0
 8014f52:	f040 80b5 	bne.w	80150c0 <rclc_executor_spin_some.part.0+0x2c0>
 8014f56:	68ab      	ldr	r3, [r5, #8]
 8014f58:	e7e6      	b.n	8014f28 <rclc_executor_spin_some.part.0+0x128>
 8014f5a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f62:	4630      	mov	r0, r6
 8014f64:	f007 feba 	bl	801ccdc <rcl_wait_set_add_client>
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	f43f af79 	beq.w	8014e60 <rclc_executor_spin_some.part.0+0x60>
 8014f6e:	4607      	mov	r7, r0
 8014f70:	f000 fae6 	bl	8015540 <rcutils_reset_error>
 8014f74:	4638      	mov	r0, r7
 8014f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f7a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f7e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f82:	4630      	mov	r0, r6
 8014f84:	f007 fb5a 	bl	801c63c <rcl_wait_set_add_subscription>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	f43f af69 	beq.w	8014e60 <rclc_executor_spin_some.part.0+0x60>
 8014f8e:	4607      	mov	r7, r0
 8014f90:	e7ee      	b.n	8014f70 <rclc_executor_spin_some.part.0+0x170>
 8014f92:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	f007 fe6e 	bl	801cc7c <rcl_wait_set_add_timer>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	f43f af5d 	beq.w	8014e60 <rclc_executor_spin_some.part.0+0x60>
 8014fa6:	4607      	mov	r7, r0
 8014fa8:	e7e2      	b.n	8014f70 <rclc_executor_spin_some.part.0+0x170>
 8014faa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014fae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014fb2:	4630      	mov	r0, r6
 8014fb4:	f007 fe36 	bl	801cc24 <rcl_wait_set_add_guard_condition>
 8014fb8:	2800      	cmp	r0, #0
 8014fba:	f43f af51 	beq.w	8014e60 <rclc_executor_spin_some.part.0+0x60>
 8014fbe:	4607      	mov	r7, r0
 8014fc0:	e7d6      	b.n	8014f70 <rclc_executor_spin_some.part.0+0x170>
 8014fc2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014fc6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014fca:	4630      	mov	r0, r6
 8014fcc:	3110      	adds	r1, #16
 8014fce:	f008 fbb5 	bl	801d73c <rcl_action_wait_set_add_action_server>
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	f43f af44 	beq.w	8014e60 <rclc_executor_spin_some.part.0+0x60>
 8014fd8:	4607      	mov	r7, r0
 8014fda:	e7c9      	b.n	8014f70 <rclc_executor_spin_some.part.0+0x170>
 8014fdc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014fe6:	4630      	mov	r0, r6
 8014fe8:	3110      	adds	r1, #16
 8014fea:	f008 f97d 	bl	801d2e8 <rcl_action_wait_set_add_action_client>
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	f43f af36 	beq.w	8014e60 <rclc_executor_spin_some.part.0+0x60>
 8014ff4:	4607      	mov	r7, r0
 8014ff6:	e7bb      	b.n	8014f70 <rclc_executor_spin_some.part.0+0x170>
 8014ff8:	2701      	movs	r7, #1
 8014ffa:	f000 faa1 	bl	8015540 <rcutils_reset_error>
 8014ffe:	4638      	mov	r0, r7
 8015000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015004:	4627      	mov	r7, r4
 8015006:	e7fa      	b.n	8014ffe <rclc_executor_spin_some.part.0+0x1fe>
 8015008:	68ab      	ldr	r3, [r5, #8]
 801500a:	2b00      	cmp	r3, #0
 801500c:	f000 8093 	beq.w	8015136 <rclc_executor_spin_some.part.0+0x336>
 8015010:	2400      	movs	r4, #0
 8015012:	f240 1991 	movw	r9, #401	@ 0x191
 8015016:	46a0      	mov	r8, r4
 8015018:	e008      	b.n	801502c <rclc_executor_spin_some.part.0+0x22c>
 801501a:	f7ff fa55 	bl	80144c8 <_rclc_check_for_new_data>
 801501e:	4604      	mov	r4, r0
 8015020:	b108      	cbz	r0, 8015026 <rclc_executor_spin_some.part.0+0x226>
 8015022:	4548      	cmp	r0, r9
 8015024:	d1ee      	bne.n	8015004 <rclc_executor_spin_some.part.0+0x204>
 8015026:	68ab      	ldr	r3, [r5, #8]
 8015028:	4598      	cmp	r8, r3
 801502a:	d266      	bcs.n	80150fa <rclc_executor_spin_some.part.0+0x2fa>
 801502c:	686a      	ldr	r2, [r5, #4]
 801502e:	4631      	mov	r1, r6
 8015030:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8015034:	f108 0801 	add.w	r8, r8, #1
 8015038:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801503c:	f1bc 0f00 	cmp.w	ip, #0
 8015040:	d1eb      	bne.n	801501a <rclc_executor_spin_some.part.0+0x21a>
 8015042:	4619      	mov	r1, r3
 8015044:	4610      	mov	r0, r2
 8015046:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801504a:	4798      	blx	r3
 801504c:	2800      	cmp	r0, #0
 801504e:	d0d9      	beq.n	8015004 <rclc_executor_spin_some.part.0+0x204>
 8015050:	68ab      	ldr	r3, [r5, #8]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d0d6      	beq.n	8015004 <rclc_executor_spin_some.part.0+0x204>
 8015056:	f04f 0a00 	mov.w	sl, #0
 801505a:	f240 1891 	movw	r8, #401	@ 0x191
 801505e:	f240 2959 	movw	r9, #601	@ 0x259
 8015062:	e00e      	b.n	8015082 <rclc_executor_spin_some.part.0+0x282>
 8015064:	f813 300b 	ldrb.w	r3, [r3, fp]
 8015068:	2b08      	cmp	r3, #8
 801506a:	d034      	beq.n	80150d6 <rclc_executor_spin_some.part.0+0x2d6>
 801506c:	2b09      	cmp	r3, #9
 801506e:	d029      	beq.n	80150c4 <rclc_executor_spin_some.part.0+0x2c4>
 8015070:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8015074:	bb03      	cbnz	r3, 80150b8 <rclc_executor_spin_some.part.0+0x2b8>
 8015076:	f10a 0a01 	add.w	sl, sl, #1
 801507a:	68ab      	ldr	r3, [r5, #8]
 801507c:	459a      	cmp	sl, r3
 801507e:	d2be      	bcs.n	8014ffe <rclc_executor_spin_some.part.0+0x1fe>
 8015080:	2400      	movs	r4, #0
 8015082:	6868      	ldr	r0, [r5, #4]
 8015084:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015088:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801508c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8015090:	2b00      	cmp	r3, #0
 8015092:	d0b7      	beq.n	8015004 <rclc_executor_spin_some.part.0+0x204>
 8015094:	4631      	mov	r1, r6
 8015096:	f7ff fa65 	bl	8014564 <_rclc_take_new_data>
 801509a:	2800      	cmp	r0, #0
 801509c:	bf18      	it	ne
 801509e:	4540      	cmpne	r0, r8
 80150a0:	d001      	beq.n	80150a6 <rclc_executor_spin_some.part.0+0x2a6>
 80150a2:	4548      	cmp	r0, r9
 80150a4:	d10c      	bne.n	80150c0 <rclc_executor_spin_some.part.0+0x2c0>
 80150a6:	686b      	ldr	r3, [r5, #4]
 80150a8:	eb13 000b 	adds.w	r0, r3, fp
 80150ac:	d021      	beq.n	80150f2 <rclc_executor_spin_some.part.0+0x2f2>
 80150ae:	7842      	ldrb	r2, [r0, #1]
 80150b0:	2a00      	cmp	r2, #0
 80150b2:	d0d7      	beq.n	8015064 <rclc_executor_spin_some.part.0+0x264>
 80150b4:	2a01      	cmp	r2, #1
 80150b6:	d1de      	bne.n	8015076 <rclc_executor_spin_some.part.0+0x276>
 80150b8:	f7ff fbc8 	bl	801484c <_rclc_execute.part.0>
 80150bc:	2800      	cmp	r0, #0
 80150be:	d0da      	beq.n	8015076 <rclc_executor_spin_some.part.0+0x276>
 80150c0:	4607      	mov	r7, r0
 80150c2:	e79c      	b.n	8014ffe <rclc_executor_spin_some.part.0+0x1fe>
 80150c4:	6843      	ldr	r3, [r0, #4]
 80150c6:	6a1a      	ldr	r2, [r3, #32]
 80150c8:	2a00      	cmp	r2, #0
 80150ca:	d1f5      	bne.n	80150b8 <rclc_executor_spin_some.part.0+0x2b8>
 80150cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d0d0      	beq.n	8015076 <rclc_executor_spin_some.part.0+0x276>
 80150d4:	e7f0      	b.n	80150b8 <rclc_executor_spin_some.part.0+0x2b8>
 80150d6:	6843      	ldr	r3, [r0, #4]
 80150d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80150da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80150de:	d1eb      	bne.n	80150b8 <rclc_executor_spin_some.part.0+0x2b8>
 80150e0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80150e4:	2a00      	cmp	r2, #0
 80150e6:	d1e7      	bne.n	80150b8 <rclc_executor_spin_some.part.0+0x2b8>
 80150e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d0c2      	beq.n	8015076 <rclc_executor_spin_some.part.0+0x276>
 80150f0:	e7e2      	b.n	80150b8 <rclc_executor_spin_some.part.0+0x2b8>
 80150f2:	270b      	movs	r7, #11
 80150f4:	e783      	b.n	8014ffe <rclc_executor_spin_some.part.0+0x1fe>
 80150f6:	686a      	ldr	r2, [r5, #4]
 80150f8:	e6e2      	b.n	8014ec0 <rclc_executor_spin_some.part.0+0xc0>
 80150fa:	686a      	ldr	r2, [r5, #4]
 80150fc:	e7a1      	b.n	8015042 <rclc_executor_spin_some.part.0+0x242>
 80150fe:	6842      	ldr	r2, [r0, #4]
 8015100:	6a11      	ldr	r1, [r2, #32]
 8015102:	2900      	cmp	r1, #0
 8015104:	f47f af22 	bne.w	8014f4c <rclc_executor_spin_some.part.0+0x14c>
 8015108:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801510c:	2a00      	cmp	r2, #0
 801510e:	f43f af0b 	beq.w	8014f28 <rclc_executor_spin_some.part.0+0x128>
 8015112:	e71b      	b.n	8014f4c <rclc_executor_spin_some.part.0+0x14c>
 8015114:	6842      	ldr	r2, [r0, #4]
 8015116:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8015118:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 801511c:	f47f af16 	bne.w	8014f4c <rclc_executor_spin_some.part.0+0x14c>
 8015120:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8015124:	2900      	cmp	r1, #0
 8015126:	f47f af11 	bne.w	8014f4c <rclc_executor_spin_some.part.0+0x14c>
 801512a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 801512e:	2a00      	cmp	r2, #0
 8015130:	f43f aefa 	beq.w	8014f28 <rclc_executor_spin_some.part.0+0x128>
 8015134:	e70a      	b.n	8014f4c <rclc_executor_spin_some.part.0+0x14c>
 8015136:	686a      	ldr	r2, [r5, #4]
 8015138:	461c      	mov	r4, r3
 801513a:	e782      	b.n	8015042 <rclc_executor_spin_some.part.0+0x242>
 801513c:	686a      	ldr	r2, [r5, #4]
 801513e:	461c      	mov	r4, r3
 8015140:	e6be      	b.n	8014ec0 <rclc_executor_spin_some.part.0+0xc0>
 8015142:	bf00      	nop

08015144 <rclc_executor_spin_some>:
 8015144:	b190      	cbz	r0, 801516c <rclc_executor_spin_some+0x28>
 8015146:	b570      	push	{r4, r5, r6, lr}
 8015148:	4604      	mov	r4, r0
 801514a:	6800      	ldr	r0, [r0, #0]
 801514c:	4616      	mov	r6, r2
 801514e:	461d      	mov	r5, r3
 8015150:	f005 fcfe 	bl	801ab50 <rcl_context_is_valid>
 8015154:	b130      	cbz	r0, 8015164 <rclc_executor_spin_some+0x20>
 8015156:	4632      	mov	r2, r6
 8015158:	462b      	mov	r3, r5
 801515a:	4620      	mov	r0, r4
 801515c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015160:	f7ff be4e 	b.w	8014e00 <rclc_executor_spin_some.part.0>
 8015164:	f000 f9ec 	bl	8015540 <rcutils_reset_error>
 8015168:	2001      	movs	r0, #1
 801516a:	bd70      	pop	{r4, r5, r6, pc}
 801516c:	200b      	movs	r0, #11
 801516e:	4770      	bx	lr

08015170 <rclc_executor_handle_counters_zero_init>:
 8015170:	b130      	cbz	r0, 8015180 <rclc_executor_handle_counters_zero_init+0x10>
 8015172:	2220      	movs	r2, #32
 8015174:	2100      	movs	r1, #0
 8015176:	b508      	push	{r3, lr}
 8015178:	f00d f8c2 	bl	8022300 <memset>
 801517c:	2000      	movs	r0, #0
 801517e:	bd08      	pop	{r3, pc}
 8015180:	200b      	movs	r0, #11
 8015182:	4770      	bx	lr
 8015184:	0000      	movs	r0, r0
	...

08015188 <rclc_executor_handle_init>:
 8015188:	4603      	mov	r3, r0
 801518a:	b178      	cbz	r0, 80151ac <rclc_executor_handle_init+0x24>
 801518c:	2200      	movs	r2, #0
 801518e:	f04f 0c0b 	mov.w	ip, #11
 8015192:	6341      	str	r1, [r0, #52]	@ 0x34
 8015194:	4610      	mov	r0, r2
 8015196:	f8a3 c000 	strh.w	ip, [r3]
 801519a:	631a      	str	r2, [r3, #48]	@ 0x30
 801519c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801519e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 80151b0 <rclc_executor_handle_init+0x28>
 80151a2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80151a6:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 80151aa:	4770      	bx	lr
 80151ac:	200b      	movs	r0, #11
 80151ae:	4770      	bx	lr
	...

080151b8 <rclc_support_init>:
 80151b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151bc:	b086      	sub	sp, #24
 80151be:	b3bb      	cbz	r3, 8015230 <rclc_support_init+0x78>
 80151c0:	4606      	mov	r6, r0
 80151c2:	b3a8      	cbz	r0, 8015230 <rclc_support_init+0x78>
 80151c4:	461c      	mov	r4, r3
 80151c6:	460f      	mov	r7, r1
 80151c8:	4690      	mov	r8, r2
 80151ca:	f005 fe2d 	bl	801ae28 <rcl_get_zero_initialized_init_options>
 80151ce:	f104 050c 	add.w	r5, r4, #12
 80151d2:	9005      	str	r0, [sp, #20]
 80151d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151d8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80151dc:	a805      	add	r0, sp, #20
 80151de:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80151e2:	f005 fe23 	bl	801ae2c <rcl_init_options_init>
 80151e6:	4605      	mov	r5, r0
 80151e8:	b9e0      	cbnz	r0, 8015224 <rclc_support_init+0x6c>
 80151ea:	ad02      	add	r5, sp, #8
 80151ec:	4628      	mov	r0, r5
 80151ee:	f005 fca5 	bl	801ab3c <rcl_get_zero_initialized_context>
 80151f2:	4633      	mov	r3, r6
 80151f4:	aa05      	add	r2, sp, #20
 80151f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80151fe:	4641      	mov	r1, r8
 8015200:	4638      	mov	r0, r7
 8015202:	f005 fd0b 	bl	801ac1c <rcl_init>
 8015206:	4605      	mov	r5, r0
 8015208:	b9b8      	cbnz	r0, 801523a <rclc_support_init+0x82>
 801520a:	4622      	mov	r2, r4
 801520c:	f106 010c 	add.w	r1, r6, #12
 8015210:	2003      	movs	r0, #3
 8015212:	60b4      	str	r4, [r6, #8]
 8015214:	f006 fd2e 	bl	801bc74 <rcl_clock_init>
 8015218:	4605      	mov	r5, r0
 801521a:	b970      	cbnz	r0, 801523a <rclc_support_init+0x82>
 801521c:	a805      	add	r0, sp, #20
 801521e:	f005 fe6b 	bl	801aef8 <rcl_init_options_fini>
 8015222:	b108      	cbz	r0, 8015228 <rclc_support_init+0x70>
 8015224:	f000 f98c 	bl	8015540 <rcutils_reset_error>
 8015228:	4628      	mov	r0, r5
 801522a:	b006      	add	sp, #24
 801522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015230:	250b      	movs	r5, #11
 8015232:	4628      	mov	r0, r5
 8015234:	b006      	add	sp, #24
 8015236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801523a:	f000 f981 	bl	8015540 <rcutils_reset_error>
 801523e:	a805      	add	r0, sp, #20
 8015240:	f005 fe5a 	bl	801aef8 <rcl_init_options_fini>
 8015244:	2800      	cmp	r0, #0
 8015246:	d0ef      	beq.n	8015228 <rclc_support_init+0x70>
 8015248:	e7ec      	b.n	8015224 <rclc_support_init+0x6c>
 801524a:	bf00      	nop

0801524c <rclc_node_init_default>:
 801524c:	2b00      	cmp	r3, #0
 801524e:	bf18      	it	ne
 8015250:	2a00      	cmpne	r2, #0
 8015252:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015256:	4616      	mov	r6, r2
 8015258:	bf0c      	ite	eq
 801525a:	2201      	moveq	r2, #1
 801525c:	2200      	movne	r2, #0
 801525e:	b0a1      	sub	sp, #132	@ 0x84
 8015260:	2900      	cmp	r1, #0
 8015262:	bf08      	it	eq
 8015264:	f042 0201 	orreq.w	r2, r2, #1
 8015268:	bb22      	cbnz	r2, 80152b4 <rclc_node_init_default+0x68>
 801526a:	4604      	mov	r4, r0
 801526c:	b310      	cbz	r0, 80152b4 <rclc_node_init_default+0x68>
 801526e:	f10d 0810 	add.w	r8, sp, #16
 8015272:	461f      	mov	r7, r3
 8015274:	460d      	mov	r5, r1
 8015276:	f10d 0918 	add.w	r9, sp, #24
 801527a:	4640      	mov	r0, r8
 801527c:	f005 fef6 	bl	801b06c <rcl_get_zero_initialized_node>
 8015280:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015284:	e884 0003 	stmia.w	r4, {r0, r1}
 8015288:	4648      	mov	r0, r9
 801528a:	f006 f869 	bl	801b360 <rcl_node_get_default_options>
 801528e:	4640      	mov	r0, r8
 8015290:	f005 feec 	bl	801b06c <rcl_get_zero_initialized_node>
 8015294:	f8cd 9000 	str.w	r9, [sp]
 8015298:	463b      	mov	r3, r7
 801529a:	4632      	mov	r2, r6
 801529c:	e898 0003 	ldmia.w	r8, {r0, r1}
 80152a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80152a4:	4629      	mov	r1, r5
 80152a6:	4620      	mov	r0, r4
 80152a8:	f005 feea 	bl	801b080 <rcl_node_init>
 80152ac:	b930      	cbnz	r0, 80152bc <rclc_node_init_default+0x70>
 80152ae:	b021      	add	sp, #132	@ 0x84
 80152b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152b4:	200b      	movs	r0, #11
 80152b6:	b021      	add	sp, #132	@ 0x84
 80152b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152bc:	9003      	str	r0, [sp, #12]
 80152be:	f000 f93f 	bl	8015540 <rcutils_reset_error>
 80152c2:	f000 f93d 	bl	8015540 <rcutils_reset_error>
 80152c6:	9803      	ldr	r0, [sp, #12]
 80152c8:	b021      	add	sp, #132	@ 0x84
 80152ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152ce:	bf00      	nop

080152d0 <rclc_publisher_init>:
 80152d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152d4:	b0a1      	sub	sp, #132	@ 0x84
 80152d6:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80152d8:	2e00      	cmp	r6, #0
 80152da:	bf18      	it	ne
 80152dc:	2b00      	cmpne	r3, #0
 80152de:	bf0c      	ite	eq
 80152e0:	f04f 0c01 	moveq.w	ip, #1
 80152e4:	f04f 0c00 	movne.w	ip, #0
 80152e8:	2a00      	cmp	r2, #0
 80152ea:	bf08      	it	eq
 80152ec:	f04c 0c01 	orreq.w	ip, ip, #1
 80152f0:	2900      	cmp	r1, #0
 80152f2:	bf08      	it	eq
 80152f4:	f04c 0c01 	orreq.w	ip, ip, #1
 80152f8:	f1bc 0f00 	cmp.w	ip, #0
 80152fc:	d11d      	bne.n	801533a <rclc_publisher_init+0x6a>
 80152fe:	4604      	mov	r4, r0
 8015300:	b1d8      	cbz	r0, 801533a <rclc_publisher_init+0x6a>
 8015302:	f10d 0910 	add.w	r9, sp, #16
 8015306:	461f      	mov	r7, r3
 8015308:	4690      	mov	r8, r2
 801530a:	460d      	mov	r5, r1
 801530c:	f7fe ffc8 	bl	80142a0 <rcl_get_zero_initialized_publisher>
 8015310:	6020      	str	r0, [r4, #0]
 8015312:	4648      	mov	r0, r9
 8015314:	f7ff f864 	bl	80143e0 <rcl_publisher_get_default_options>
 8015318:	4631      	mov	r1, r6
 801531a:	2250      	movs	r2, #80	@ 0x50
 801531c:	4648      	mov	r0, r9
 801531e:	f00d f90e 	bl	802253e <memcpy>
 8015322:	463b      	mov	r3, r7
 8015324:	4642      	mov	r2, r8
 8015326:	4629      	mov	r1, r5
 8015328:	4620      	mov	r0, r4
 801532a:	f8cd 9000 	str.w	r9, [sp]
 801532e:	f7fe ffbd 	bl	80142ac <rcl_publisher_init>
 8015332:	b930      	cbnz	r0, 8015342 <rclc_publisher_init+0x72>
 8015334:	b021      	add	sp, #132	@ 0x84
 8015336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801533a:	200b      	movs	r0, #11
 801533c:	b021      	add	sp, #132	@ 0x84
 801533e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015342:	9003      	str	r0, [sp, #12]
 8015344:	f000 f8fc 	bl	8015540 <rcutils_reset_error>
 8015348:	9803      	ldr	r0, [sp, #12]
 801534a:	b021      	add	sp, #132	@ 0x84
 801534c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015350 <rclc_service_init>:
 8015350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015354:	b09f      	sub	sp, #124	@ 0x7c
 8015356:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8015358:	2e00      	cmp	r6, #0
 801535a:	bf18      	it	ne
 801535c:	2b00      	cmpne	r3, #0
 801535e:	bf0c      	ite	eq
 8015360:	f04f 0c01 	moveq.w	ip, #1
 8015364:	f04f 0c00 	movne.w	ip, #0
 8015368:	2a00      	cmp	r2, #0
 801536a:	bf08      	it	eq
 801536c:	f04c 0c01 	orreq.w	ip, ip, #1
 8015370:	2900      	cmp	r1, #0
 8015372:	bf08      	it	eq
 8015374:	f04c 0c01 	orreq.w	ip, ip, #1
 8015378:	f1bc 0f00 	cmp.w	ip, #0
 801537c:	d11d      	bne.n	80153ba <rclc_service_init+0x6a>
 801537e:	4604      	mov	r4, r0
 8015380:	b1d8      	cbz	r0, 80153ba <rclc_service_init+0x6a>
 8015382:	f10d 0910 	add.w	r9, sp, #16
 8015386:	461f      	mov	r7, r3
 8015388:	4690      	mov	r8, r2
 801538a:	460d      	mov	r5, r1
 801538c:	f006 f9ec 	bl	801b768 <rcl_get_zero_initialized_service>
 8015390:	6020      	str	r0, [r4, #0]
 8015392:	4648      	mov	r0, r9
 8015394:	f006 fa80 	bl	801b898 <rcl_service_get_default_options>
 8015398:	4631      	mov	r1, r6
 801539a:	2250      	movs	r2, #80	@ 0x50
 801539c:	4648      	mov	r0, r9
 801539e:	f00d f8ce 	bl	802253e <memcpy>
 80153a2:	463b      	mov	r3, r7
 80153a4:	4642      	mov	r2, r8
 80153a6:	4629      	mov	r1, r5
 80153a8:	4620      	mov	r0, r4
 80153aa:	f8cd 9000 	str.w	r9, [sp]
 80153ae:	f006 f9e1 	bl	801b774 <rcl_service_init>
 80153b2:	b930      	cbnz	r0, 80153c2 <rclc_service_init+0x72>
 80153b4:	b01f      	add	sp, #124	@ 0x7c
 80153b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153ba:	200b      	movs	r0, #11
 80153bc:	b01f      	add	sp, #124	@ 0x7c
 80153be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153c2:	9003      	str	r0, [sp, #12]
 80153c4:	f000 f8bc 	bl	8015540 <rcutils_reset_error>
 80153c8:	9803      	ldr	r0, [sp, #12]
 80153ca:	b01f      	add	sp, #124	@ 0x7c
 80153cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080153d0 <rclc_subscription_init>:
 80153d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153d4:	b0a1      	sub	sp, #132	@ 0x84
 80153d6:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80153d8:	2e00      	cmp	r6, #0
 80153da:	bf18      	it	ne
 80153dc:	2b00      	cmpne	r3, #0
 80153de:	bf0c      	ite	eq
 80153e0:	f04f 0c01 	moveq.w	ip, #1
 80153e4:	f04f 0c00 	movne.w	ip, #0
 80153e8:	2a00      	cmp	r2, #0
 80153ea:	bf08      	it	eq
 80153ec:	f04c 0c01 	orreq.w	ip, ip, #1
 80153f0:	2900      	cmp	r1, #0
 80153f2:	bf08      	it	eq
 80153f4:	f04c 0c01 	orreq.w	ip, ip, #1
 80153f8:	f1bc 0f00 	cmp.w	ip, #0
 80153fc:	d11d      	bne.n	801543a <rclc_subscription_init+0x6a>
 80153fe:	4604      	mov	r4, r0
 8015400:	b1d8      	cbz	r0, 801543a <rclc_subscription_init+0x6a>
 8015402:	f10d 0910 	add.w	r9, sp, #16
 8015406:	461f      	mov	r7, r3
 8015408:	4690      	mov	r8, r2
 801540a:	460d      	mov	r5, r1
 801540c:	f006 fad0 	bl	801b9b0 <rcl_get_zero_initialized_subscription>
 8015410:	6020      	str	r0, [r4, #0]
 8015412:	4648      	mov	r0, r9
 8015414:	f006 fb80 	bl	801bb18 <rcl_subscription_get_default_options>
 8015418:	4631      	mov	r1, r6
 801541a:	2250      	movs	r2, #80	@ 0x50
 801541c:	4648      	mov	r0, r9
 801541e:	f00d f88e 	bl	802253e <memcpy>
 8015422:	463b      	mov	r3, r7
 8015424:	4642      	mov	r2, r8
 8015426:	4629      	mov	r1, r5
 8015428:	4620      	mov	r0, r4
 801542a:	f8cd 9000 	str.w	r9, [sp]
 801542e:	f006 fac5 	bl	801b9bc <rcl_subscription_init>
 8015432:	b930      	cbnz	r0, 8015442 <rclc_subscription_init+0x72>
 8015434:	b021      	add	sp, #132	@ 0x84
 8015436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801543a:	200b      	movs	r0, #11
 801543c:	b021      	add	sp, #132	@ 0x84
 801543e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015442:	9003      	str	r0, [sp, #12]
 8015444:	f000 f87c 	bl	8015540 <rcutils_reset_error>
 8015448:	9803      	ldr	r0, [sp, #12]
 801544a:	b021      	add	sp, #132	@ 0x84
 801544c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015450 <rclc_timer_init_default>:
 8015450:	b361      	cbz	r1, 80154ac <rclc_timer_init_default+0x5c>
 8015452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015456:	4606      	mov	r6, r0
 8015458:	b08a      	sub	sp, #40	@ 0x28
 801545a:	b318      	cbz	r0, 80154a4 <rclc_timer_init_default+0x54>
 801545c:	460d      	mov	r5, r1
 801545e:	4690      	mov	r8, r2
 8015460:	461f      	mov	r7, r3
 8015462:	f006 fdff 	bl	801c064 <rcl_get_zero_initialized_timer>
 8015466:	68ac      	ldr	r4, [r5, #8]
 8015468:	f10d 0c0c 	add.w	ip, sp, #12
 801546c:	6030      	str	r0, [r6, #0]
 801546e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015474:	6823      	ldr	r3, [r4, #0]
 8015476:	462a      	mov	r2, r5
 8015478:	f105 010c 	add.w	r1, r5, #12
 801547c:	4630      	mov	r0, r6
 801547e:	f8cc 3000 	str.w	r3, [ip]
 8015482:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015484:	e9cd 8700 	strd	r8, r7, [sp]
 8015488:	9302      	str	r3, [sp, #8]
 801548a:	f006 fdf1 	bl	801c070 <rcl_timer_init>
 801548e:	b910      	cbnz	r0, 8015496 <rclc_timer_init_default+0x46>
 8015490:	b00a      	add	sp, #40	@ 0x28
 8015492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015496:	9009      	str	r0, [sp, #36]	@ 0x24
 8015498:	f000 f852 	bl	8015540 <rcutils_reset_error>
 801549c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801549e:	b00a      	add	sp, #40	@ 0x28
 80154a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154a4:	200b      	movs	r0, #11
 80154a6:	b00a      	add	sp, #40	@ 0x28
 80154a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ac:	200b      	movs	r0, #11
 80154ae:	4770      	bx	lr

080154b0 <__default_zero_allocate>:
 80154b0:	f00c ba4e 	b.w	8021950 <calloc>

080154b4 <__default_reallocate>:
 80154b4:	f00c bbec 	b.w	8021c90 <realloc>

080154b8 <__default_deallocate>:
 80154b8:	f00c bac8 	b.w	8021a4c <free>

080154bc <__default_allocate>:
 80154bc:	f00c babe 	b.w	8021a3c <malloc>

080154c0 <rcutils_get_zero_initialized_allocator>:
 80154c0:	b510      	push	{r4, lr}
 80154c2:	4c05      	ldr	r4, [pc, #20]	@ (80154d8 <rcutils_get_zero_initialized_allocator+0x18>)
 80154c4:	4686      	mov	lr, r0
 80154c6:	4684      	mov	ip, r0
 80154c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	4670      	mov	r0, lr
 80154d2:	f8cc 3000 	str.w	r3, [ip]
 80154d6:	bd10      	pop	{r4, pc}
 80154d8:	080249d8 	.word	0x080249d8

080154dc <rcutils_get_default_allocator>:
 80154dc:	b510      	push	{r4, lr}
 80154de:	4c05      	ldr	r4, [pc, #20]	@ (80154f4 <rcutils_get_default_allocator+0x18>)
 80154e0:	4686      	mov	lr, r0
 80154e2:	4684      	mov	ip, r0
 80154e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ea:	6823      	ldr	r3, [r4, #0]
 80154ec:	4670      	mov	r0, lr
 80154ee:	f8cc 3000 	str.w	r3, [ip]
 80154f2:	bd10      	pop	{r4, pc}
 80154f4:	24000c94 	.word	0x24000c94

080154f8 <rcutils_allocator_is_valid>:
 80154f8:	b158      	cbz	r0, 8015512 <rcutils_allocator_is_valid+0x1a>
 80154fa:	6803      	ldr	r3, [r0, #0]
 80154fc:	b143      	cbz	r3, 8015510 <rcutils_allocator_is_valid+0x18>
 80154fe:	6843      	ldr	r3, [r0, #4]
 8015500:	b133      	cbz	r3, 8015510 <rcutils_allocator_is_valid+0x18>
 8015502:	68c3      	ldr	r3, [r0, #12]
 8015504:	b123      	cbz	r3, 8015510 <rcutils_allocator_is_valid+0x18>
 8015506:	6880      	ldr	r0, [r0, #8]
 8015508:	3800      	subs	r0, #0
 801550a:	bf18      	it	ne
 801550c:	2001      	movne	r0, #1
 801550e:	4770      	bx	lr
 8015510:	4618      	mov	r0, r3
 8015512:	4770      	bx	lr

08015514 <rcutils_get_error_string>:
 8015514:	4b06      	ldr	r3, [pc, #24]	@ (8015530 <rcutils_get_error_string+0x1c>)
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	b13b      	cbz	r3, 801552a <rcutils_get_error_string+0x16>
 801551a:	4b06      	ldr	r3, [pc, #24]	@ (8015534 <rcutils_get_error_string+0x20>)
 801551c:	781a      	ldrb	r2, [r3, #0]
 801551e:	b90a      	cbnz	r2, 8015524 <rcutils_get_error_string+0x10>
 8015520:	2201      	movs	r2, #1
 8015522:	701a      	strb	r2, [r3, #0]
 8015524:	4b04      	ldr	r3, [pc, #16]	@ (8015538 <rcutils_get_error_string+0x24>)
 8015526:	7818      	ldrb	r0, [r3, #0]
 8015528:	4770      	bx	lr
 801552a:	4b04      	ldr	r3, [pc, #16]	@ (801553c <rcutils_get_error_string+0x28>)
 801552c:	7818      	ldrb	r0, [r3, #0]
 801552e:	4770      	bx	lr
 8015530:	240648f0 	.word	0x240648f0
 8015534:	24064909 	.word	0x24064909
 8015538:	24064908 	.word	0x24064908
 801553c:	080239e8 	.word	0x080239e8

08015540 <rcutils_reset_error>:
 8015540:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8015560 <rcutils_reset_error+0x20>
 8015544:	2300      	movs	r3, #0
 8015546:	4a08      	ldr	r2, [pc, #32]	@ (8015568 <rcutils_reset_error+0x28>)
 8015548:	4808      	ldr	r0, [pc, #32]	@ (801556c <rcutils_reset_error+0x2c>)
 801554a:	8013      	strh	r3, [r2, #0]
 801554c:	4908      	ldr	r1, [pc, #32]	@ (8015570 <rcutils_reset_error+0x30>)
 801554e:	7003      	strb	r3, [r0, #0]
 8015550:	700b      	strb	r3, [r1, #0]
 8015552:	ed82 7b02 	vstr	d7, [r2, #8]
 8015556:	4a07      	ldr	r2, [pc, #28]	@ (8015574 <rcutils_reset_error+0x34>)
 8015558:	7013      	strb	r3, [r2, #0]
 801555a:	4770      	bx	lr
 801555c:	f3af 8000 	nop.w
	...
 8015568:	240648f8 	.word	0x240648f8
 801556c:	24064909 	.word	0x24064909
 8015570:	24064908 	.word	0x24064908
 8015574:	240648f0 	.word	0x240648f0

08015578 <rcutils_system_time_now>:
 8015578:	b300      	cbz	r0, 80155bc <rcutils_system_time_now+0x44>
 801557a:	b570      	push	{r4, r5, r6, lr}
 801557c:	b084      	sub	sp, #16
 801557e:	4604      	mov	r4, r0
 8015580:	2001      	movs	r0, #1
 8015582:	4669      	mov	r1, sp
 8015584:	f7ec fea0 	bl	80022c8 <clock_gettime>
 8015588:	e9dd 3100 	ldrd	r3, r1, [sp]
 801558c:	2900      	cmp	r1, #0
 801558e:	db12      	blt.n	80155b6 <rcutils_system_time_now+0x3e>
 8015590:	ea53 0201 	orrs.w	r2, r3, r1
 8015594:	9d02      	ldr	r5, [sp, #8]
 8015596:	d101      	bne.n	801559c <rcutils_system_time_now+0x24>
 8015598:	2d00      	cmp	r5, #0
 801559a:	db0c      	blt.n	80155b6 <rcutils_system_time_now+0x3e>
 801559c:	4e08      	ldr	r6, [pc, #32]	@ (80155c0 <rcutils_system_time_now+0x48>)
 801559e:	2000      	movs	r0, #0
 80155a0:	fba3 3206 	umull	r3, r2, r3, r6
 80155a4:	195b      	adds	r3, r3, r5
 80155a6:	fb06 2201 	mla	r2, r6, r1, r2
 80155aa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80155ae:	e9c4 3200 	strd	r3, r2, [r4]
 80155b2:	b004      	add	sp, #16
 80155b4:	bd70      	pop	{r4, r5, r6, pc}
 80155b6:	2002      	movs	r0, #2
 80155b8:	b004      	add	sp, #16
 80155ba:	bd70      	pop	{r4, r5, r6, pc}
 80155bc:	200b      	movs	r0, #11
 80155be:	4770      	bx	lr
 80155c0:	3b9aca00 	.word	0x3b9aca00

080155c4 <rcutils_steady_time_now>:
 80155c4:	b300      	cbz	r0, 8015608 <rcutils_steady_time_now+0x44>
 80155c6:	b570      	push	{r4, r5, r6, lr}
 80155c8:	b084      	sub	sp, #16
 80155ca:	4604      	mov	r4, r0
 80155cc:	2000      	movs	r0, #0
 80155ce:	4669      	mov	r1, sp
 80155d0:	f7ec fe7a 	bl	80022c8 <clock_gettime>
 80155d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80155d8:	2900      	cmp	r1, #0
 80155da:	db12      	blt.n	8015602 <rcutils_steady_time_now+0x3e>
 80155dc:	ea53 0201 	orrs.w	r2, r3, r1
 80155e0:	9d02      	ldr	r5, [sp, #8]
 80155e2:	d101      	bne.n	80155e8 <rcutils_steady_time_now+0x24>
 80155e4:	2d00      	cmp	r5, #0
 80155e6:	db0c      	blt.n	8015602 <rcutils_steady_time_now+0x3e>
 80155e8:	4e08      	ldr	r6, [pc, #32]	@ (801560c <rcutils_steady_time_now+0x48>)
 80155ea:	2000      	movs	r0, #0
 80155ec:	fba3 3206 	umull	r3, r2, r3, r6
 80155f0:	195b      	adds	r3, r3, r5
 80155f2:	fb06 2201 	mla	r2, r6, r1, r2
 80155f6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80155fa:	e9c4 3200 	strd	r3, r2, [r4]
 80155fe:	b004      	add	sp, #16
 8015600:	bd70      	pop	{r4, r5, r6, pc}
 8015602:	2002      	movs	r0, #2
 8015604:	b004      	add	sp, #16
 8015606:	bd70      	pop	{r4, r5, r6, pc}
 8015608:	200b      	movs	r0, #11
 801560a:	4770      	bx	lr
 801560c:	3b9aca00 	.word	0x3b9aca00

08015610 <rmw_get_default_publisher_options>:
 8015610:	2200      	movs	r2, #0
 8015612:	6002      	str	r2, [r0, #0]
 8015614:	7102      	strb	r2, [r0, #4]
 8015616:	4770      	bx	lr

08015618 <rmw_uros_set_custom_transport>:
 8015618:	b470      	push	{r4, r5, r6}
 801561a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801561e:	b162      	cbz	r2, 801563a <rmw_uros_set_custom_transport+0x22>
 8015620:	b15b      	cbz	r3, 801563a <rmw_uros_set_custom_transport+0x22>
 8015622:	b155      	cbz	r5, 801563a <rmw_uros_set_custom_transport+0x22>
 8015624:	b14e      	cbz	r6, 801563a <rmw_uros_set_custom_transport+0x22>
 8015626:	4c06      	ldr	r4, [pc, #24]	@ (8015640 <rmw_uros_set_custom_transport+0x28>)
 8015628:	7020      	strb	r0, [r4, #0]
 801562a:	2000      	movs	r0, #0
 801562c:	6166      	str	r6, [r4, #20]
 801562e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015632:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015636:	bc70      	pop	{r4, r5, r6}
 8015638:	4770      	bx	lr
 801563a:	200b      	movs	r0, #11
 801563c:	bc70      	pop	{r4, r5, r6}
 801563e:	4770      	bx	lr
 8015640:	2406490c 	.word	0x2406490c

08015644 <rmw_uros_ping_agent>:
 8015644:	4b1f      	ldr	r3, [pc, #124]	@ (80156c4 <rmw_uros_ping_agent+0x80>)
 8015646:	7b1a      	ldrb	r2, [r3, #12]
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	4605      	mov	r5, r0
 801564c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8015650:	460e      	mov	r6, r1
 8015652:	b192      	cbz	r2, 801567a <rmw_uros_ping_agent+0x36>
 8015654:	681c      	ldr	r4, [r3, #0]
 8015656:	b184      	cbz	r4, 801567a <rmw_uros_ping_agent+0x36>
 8015658:	68a0      	ldr	r0, [r4, #8]
 801565a:	4632      	mov	r2, r6
 801565c:	4629      	mov	r1, r5
 801565e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015662:	f001 ff0f 	bl	8017484 <uxr_ping_agent_session>
 8015666:	6864      	ldr	r4, [r4, #4]
 8015668:	f080 0301 	eor.w	r3, r0, #1
 801566c:	b2d8      	uxtb	r0, r3
 801566e:	b10c      	cbz	r4, 8015674 <rmw_uros_ping_agent+0x30>
 8015670:	2800      	cmp	r0, #0
 8015672:	d1f1      	bne.n	8015658 <rmw_uros_ping_agent+0x14>
 8015674:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015678:	bd70      	pop	{r4, r5, r6, pc}
 801567a:	4b13      	ldr	r3, [pc, #76]	@ (80156c8 <rmw_uros_ping_agent+0x84>)
 801567c:	2100      	movs	r1, #0
 801567e:	781a      	ldrb	r2, [r3, #0]
 8015680:	6918      	ldr	r0, [r3, #16]
 8015682:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8015686:	685a      	ldr	r2, [r3, #4]
 8015688:	909c      	str	r0, [sp, #624]	@ 0x270
 801568a:	92a3      	str	r2, [sp, #652]	@ 0x28c
 801568c:	6958      	ldr	r0, [r3, #20]
 801568e:	68da      	ldr	r2, [r3, #12]
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	929b      	str	r2, [sp, #620]	@ 0x26c
 8015694:	466a      	mov	r2, sp
 8015696:	909d      	str	r0, [sp, #628]	@ 0x274
 8015698:	4608      	mov	r0, r1
 801569a:	939a      	str	r3, [sp, #616]	@ 0x268
 801569c:	f000 f9c6 	bl	8015a2c <rmw_uxrce_transport_init>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d1e7      	bne.n	8015674 <rmw_uros_ping_agent+0x30>
 80156a4:	4632      	mov	r2, r6
 80156a6:	4629      	mov	r1, r5
 80156a8:	a89e      	add	r0, sp, #632	@ 0x278
 80156aa:	f001 ff37 	bl	801751c <uxr_ping_agent_attempts>
 80156ae:	4604      	mov	r4, r0
 80156b0:	4668      	mov	r0, sp
 80156b2:	f001 feb3 	bl	801741c <uxr_close_custom_transport>
 80156b6:	f084 0301 	eor.w	r3, r4, #1
 80156ba:	b2d8      	uxtb	r0, r3
 80156bc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80156c0:	bd70      	pop	{r4, r5, r6, pc}
 80156c2:	bf00      	nop
 80156c4:	24069224 	.word	0x24069224
 80156c8:	2406490c 	.word	0x2406490c

080156cc <flush_session>:
 80156cc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80156ce:	f002 bcb7 	b.w	8018040 <uxr_run_session_until_confirm_delivery>
 80156d2:	bf00      	nop

080156d4 <rmw_publish>:
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d053      	beq.n	8015780 <rmw_publish+0xac>
 80156d8:	b570      	push	{r4, r5, r6, lr}
 80156da:	460d      	mov	r5, r1
 80156dc:	b08e      	sub	sp, #56	@ 0x38
 80156de:	2900      	cmp	r1, #0
 80156e0:	d04b      	beq.n	801577a <rmw_publish+0xa6>
 80156e2:	4604      	mov	r4, r0
 80156e4:	6800      	ldr	r0, [r0, #0]
 80156e6:	f000 fdcf 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d045      	beq.n	801577a <rmw_publish+0xa6>
 80156ee:	6866      	ldr	r6, [r4, #4]
 80156f0:	2e00      	cmp	r6, #0
 80156f2:	d042      	beq.n	801577a <rmw_publish+0xa6>
 80156f4:	69b4      	ldr	r4, [r6, #24]
 80156f6:	4628      	mov	r0, r5
 80156f8:	6923      	ldr	r3, [r4, #16]
 80156fa:	4798      	blx	r3
 80156fc:	69f3      	ldr	r3, [r6, #28]
 80156fe:	9005      	str	r0, [sp, #20]
 8015700:	b113      	cbz	r3, 8015708 <rmw_publish+0x34>
 8015702:	a805      	add	r0, sp, #20
 8015704:	4798      	blx	r3
 8015706:	9805      	ldr	r0, [sp, #20]
 8015708:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801570c:	691b      	ldr	r3, [r3, #16]
 801570e:	9000      	str	r0, [sp, #0]
 8015710:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015714:	6972      	ldr	r2, [r6, #20]
 8015716:	ab06      	add	r3, sp, #24
 8015718:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801571a:	f003 ff8b 	bl	8019634 <uxr_prepare_output_stream>
 801571e:	b1d8      	cbz	r0, 8015758 <rmw_publish+0x84>
 8015720:	68a3      	ldr	r3, [r4, #8]
 8015722:	a906      	add	r1, sp, #24
 8015724:	4628      	mov	r0, r5
 8015726:	4798      	blx	r3
 8015728:	6a33      	ldr	r3, [r6, #32]
 801572a:	4604      	mov	r4, r0
 801572c:	b10b      	cbz	r3, 8015732 <rmw_publish+0x5e>
 801572e:	a806      	add	r0, sp, #24
 8015730:	4798      	blx	r3
 8015732:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8015736:	2b01      	cmp	r3, #1
 8015738:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801573c:	d022      	beq.n	8015784 <rmw_publish+0xb0>
 801573e:	6918      	ldr	r0, [r3, #16]
 8015740:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8015742:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015746:	f002 fc7b 	bl	8018040 <uxr_run_session_until_confirm_delivery>
 801574a:	4020      	ands	r0, r4
 801574c:	b2c4      	uxtb	r4, r0
 801574e:	f084 0001 	eor.w	r0, r4, #1
 8015752:	b2c0      	uxtb	r0, r0
 8015754:	b00e      	add	sp, #56	@ 0x38
 8015756:	bd70      	pop	{r4, r5, r6, pc}
 8015758:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801575c:	6918      	ldr	r0, [r3, #16]
 801575e:	9b05      	ldr	r3, [sp, #20]
 8015760:	9602      	str	r6, [sp, #8]
 8015762:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	4b09      	ldr	r3, [pc, #36]	@ (8015790 <rmw_publish+0xbc>)
 801576a:	9301      	str	r3, [sp, #4]
 801576c:	ab06      	add	r3, sp, #24
 801576e:	6972      	ldr	r2, [r6, #20]
 8015770:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8015772:	f003 ff8f 	bl	8019694 <uxr_prepare_output_stream_fragmented>
 8015776:	2800      	cmp	r0, #0
 8015778:	d1d2      	bne.n	8015720 <rmw_publish+0x4c>
 801577a:	2001      	movs	r0, #1
 801577c:	b00e      	add	sp, #56	@ 0x38
 801577e:	bd70      	pop	{r4, r5, r6, pc}
 8015780:	2001      	movs	r0, #1
 8015782:	4770      	bx	lr
 8015784:	6918      	ldr	r0, [r3, #16]
 8015786:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801578a:	f002 f89f 	bl	80178cc <uxr_flash_output_streams>
 801578e:	e7de      	b.n	801574e <rmw_publish+0x7a>
 8015790:	080156cd 	.word	0x080156cd

08015794 <rmw_create_publisher>:
 8015794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015798:	b087      	sub	sp, #28
 801579a:	2800      	cmp	r0, #0
 801579c:	f000 80d2 	beq.w	8015944 <rmw_create_publisher+0x1b0>
 80157a0:	460e      	mov	r6, r1
 80157a2:	2900      	cmp	r1, #0
 80157a4:	f000 80ce 	beq.w	8015944 <rmw_create_publisher+0x1b0>
 80157a8:	4604      	mov	r4, r0
 80157aa:	6800      	ldr	r0, [r0, #0]
 80157ac:	4615      	mov	r5, r2
 80157ae:	461f      	mov	r7, r3
 80157b0:	f000 fd6a 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 80157b4:	f080 0001 	eor.w	r0, r0, #1
 80157b8:	b2c0      	uxtb	r0, r0
 80157ba:	2800      	cmp	r0, #0
 80157bc:	f040 80c2 	bne.w	8015944 <rmw_create_publisher+0x1b0>
 80157c0:	2d00      	cmp	r5, #0
 80157c2:	f000 80bf 	beq.w	8015944 <rmw_create_publisher+0x1b0>
 80157c6:	782b      	ldrb	r3, [r5, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	f000 80bb 	beq.w	8015944 <rmw_create_publisher+0x1b0>
 80157ce:	2f00      	cmp	r7, #0
 80157d0:	f000 80b8 	beq.w	8015944 <rmw_create_publisher+0x1b0>
 80157d4:	485e      	ldr	r0, [pc, #376]	@ (8015950 <rmw_create_publisher+0x1bc>)
 80157d6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80157da:	f008 ff73 	bl	801e6c4 <get_memory>
 80157de:	2800      	cmp	r0, #0
 80157e0:	f000 80b0 	beq.w	8015944 <rmw_create_publisher+0x1b0>
 80157e4:	6884      	ldr	r4, [r0, #8]
 80157e6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80157ea:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80157ee:	f008 ffd1 	bl	801e794 <rmw_get_implementation_identifier>
 80157f2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80157f6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80157fa:	4628      	mov	r0, r5
 80157fc:	f7ea fd7a 	bl	80002f4 <strlen>
 8015800:	3001      	adds	r0, #1
 8015802:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8015806:	283c      	cmp	r0, #60	@ 0x3c
 8015808:	f200 808f 	bhi.w	801592a <rmw_create_publisher+0x196>
 801580c:	462b      	mov	r3, r5
 801580e:	4a51      	ldr	r2, [pc, #324]	@ (8015954 <rmw_create_publisher+0x1c0>)
 8015810:	213c      	movs	r1, #60	@ 0x3c
 8015812:	4650      	mov	r0, sl
 8015814:	f00c fc06 	bl	8022024 <sniprintf>
 8015818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801581c:	4639      	mov	r1, r7
 801581e:	2250      	movs	r2, #80	@ 0x50
 8015820:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8015822:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015826:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801582a:	f00c fe88 	bl	802253e <memcpy>
 801582e:	7a3b      	ldrb	r3, [r7, #8]
 8015830:	4630      	mov	r0, r6
 8015832:	4949      	ldr	r1, [pc, #292]	@ (8015958 <rmw_create_publisher+0x1c4>)
 8015834:	2b02      	cmp	r3, #2
 8015836:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801583a:	bf0c      	ite	eq
 801583c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8015840:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8015844:	67a3      	str	r3, [r4, #120]	@ 0x78
 8015846:	2300      	movs	r3, #0
 8015848:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801584c:	f000 fd98 	bl	8016380 <get_message_typesupport_handle>
 8015850:	2800      	cmp	r0, #0
 8015852:	d06a      	beq.n	801592a <rmw_create_publisher+0x196>
 8015854:	6842      	ldr	r2, [r0, #4]
 8015856:	61a2      	str	r2, [r4, #24]
 8015858:	2a00      	cmp	r2, #0
 801585a:	d066      	beq.n	801592a <rmw_create_publisher+0x196>
 801585c:	4629      	mov	r1, r5
 801585e:	463b      	mov	r3, r7
 8015860:	4648      	mov	r0, r9
 8015862:	f009 fa03 	bl	801ec6c <create_topic>
 8015866:	6260      	str	r0, [r4, #36]	@ 0x24
 8015868:	2800      	cmp	r0, #0
 801586a:	d062      	beq.n	8015932 <rmw_create_publisher+0x19e>
 801586c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015870:	2103      	movs	r1, #3
 8015872:	2506      	movs	r5, #6
 8015874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015878:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 801587c:	1c42      	adds	r2, r0, #1
 801587e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8015882:	f001 fdcf 	bl	8017424 <uxr_object_id>
 8015886:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801588a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801588e:	6120      	str	r0, [r4, #16]
 8015890:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8015894:	6910      	ldr	r0, [r2, #16]
 8015896:	9500      	str	r5, [sp, #0]
 8015898:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801589c:	6819      	ldr	r1, [r3, #0]
 801589e:	6922      	ldr	r2, [r4, #16]
 80158a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80158a4:	f001 fb78 	bl	8016f98 <uxr_buffer_create_publisher_bin>
 80158a8:	4602      	mov	r2, r0
 80158aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80158ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80158b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80158b6:	f000 fbd5 	bl	8016064 <run_xrce_session>
 80158ba:	b3b0      	cbz	r0, 801592a <rmw_create_publisher+0x196>
 80158bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158c0:	2105      	movs	r1, #5
 80158c2:	f10d 0a10 	add.w	sl, sp, #16
 80158c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80158ca:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80158ce:	1c42      	adds	r2, r0, #1
 80158d0:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80158d4:	f001 fda6 	bl	8017424 <uxr_object_id>
 80158d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80158dc:	4639      	mov	r1, r7
 80158de:	6160      	str	r0, [r4, #20]
 80158e0:	691e      	ldr	r6, [r3, #16]
 80158e2:	4650      	mov	r0, sl
 80158e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158e8:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80158ec:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80158f0:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 80158f4:	f000 fbd2 	bl	801609c <convert_qos_profile>
 80158f8:	9503      	str	r5, [sp, #12]
 80158fa:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80158fe:	9001      	str	r0, [sp, #4]
 8015900:	4630      	mov	r0, r6
 8015902:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015906:	f8db 3010 	ldr.w	r3, [fp, #16]
 801590a:	9300      	str	r3, [sp, #0]
 801590c:	6839      	ldr	r1, [r7, #0]
 801590e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015912:	f001 fba1 	bl	8017058 <uxr_buffer_create_datawriter_bin>
 8015916:	4602      	mov	r2, r0
 8015918:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801591c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015920:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015924:	f000 fb9e 	bl	8016064 <run_xrce_session>
 8015928:	b970      	cbnz	r0, 8015948 <rmw_create_publisher+0x1b4>
 801592a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801592c:	b108      	cbz	r0, 8015932 <rmw_create_publisher+0x19e>
 801592e:	f000 fa8b 	bl	8015e48 <rmw_uxrce_fini_topic_memory>
 8015932:	4640      	mov	r0, r8
 8015934:	f04f 0800 	mov.w	r8, #0
 8015938:	f000 fa2e 	bl	8015d98 <rmw_uxrce_fini_publisher_memory>
 801593c:	4640      	mov	r0, r8
 801593e:	b007      	add	sp, #28
 8015940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015944:	f04f 0800 	mov.w	r8, #0
 8015948:	4640      	mov	r0, r8
 801594a:	b007      	add	sp, #28
 801594c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015950:	24069204 	.word	0x24069204
 8015954:	080249fc 	.word	0x080249fc
 8015958:	080236c8 	.word	0x080236c8

0801595c <rmw_publisher_get_actual_qos>:
 801595c:	b178      	cbz	r0, 801597e <rmw_publisher_get_actual_qos+0x22>
 801595e:	b510      	push	{r4, lr}
 8015960:	fab1 f481 	clz	r4, r1
 8015964:	0964      	lsrs	r4, r4, #5
 8015966:	b141      	cbz	r1, 801597a <rmw_publisher_get_actual_qos+0x1e>
 8015968:	6843      	ldr	r3, [r0, #4]
 801596a:	2250      	movs	r2, #80	@ 0x50
 801596c:	4608      	mov	r0, r1
 801596e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8015972:	f00c fde4 	bl	802253e <memcpy>
 8015976:	4620      	mov	r0, r4
 8015978:	bd10      	pop	{r4, pc}
 801597a:	200b      	movs	r0, #11
 801597c:	bd10      	pop	{r4, pc}
 801597e:	200b      	movs	r0, #11
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop

08015984 <rmw_destroy_publisher>:
 8015984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015988:	b128      	cbz	r0, 8015996 <rmw_destroy_publisher+0x12>
 801598a:	4604      	mov	r4, r0
 801598c:	6800      	ldr	r0, [r0, #0]
 801598e:	460d      	mov	r5, r1
 8015990:	f000 fc7a 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 8015994:	b918      	cbnz	r0, 801599e <rmw_destroy_publisher+0x1a>
 8015996:	2401      	movs	r4, #1
 8015998:	4620      	mov	r0, r4
 801599a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801599e:	6863      	ldr	r3, [r4, #4]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d0f8      	beq.n	8015996 <rmw_destroy_publisher+0x12>
 80159a4:	fab5 f485 	clz	r4, r5
 80159a8:	0964      	lsrs	r4, r4, #5
 80159aa:	2d00      	cmp	r5, #0
 80159ac:	d0f3      	beq.n	8015996 <rmw_destroy_publisher+0x12>
 80159ae:	6828      	ldr	r0, [r5, #0]
 80159b0:	f000 fc6a 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	d0ee      	beq.n	8015996 <rmw_destroy_publisher+0x12>
 80159b8:	686e      	ldr	r6, [r5, #4]
 80159ba:	2e00      	cmp	r6, #0
 80159bc:	d0eb      	beq.n	8015996 <rmw_destroy_publisher+0x12>
 80159be:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80159c0:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 80159c4:	f009 f9a2 	bl	801ed0c <destroy_topic>
 80159c8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80159cc:	6972      	ldr	r2, [r6, #20]
 80159ce:	6918      	ldr	r0, [r3, #16]
 80159d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80159d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159d8:	6819      	ldr	r1, [r3, #0]
 80159da:	f001 fa29 	bl	8016e30 <uxr_buffer_delete_entity>
 80159de:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80159e2:	4680      	mov	r8, r0
 80159e4:	6932      	ldr	r2, [r6, #16]
 80159e6:	6918      	ldr	r0, [r3, #16]
 80159e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80159ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159f0:	6819      	ldr	r1, [r3, #0]
 80159f2:	f001 fa1d 	bl	8016e30 <uxr_buffer_delete_entity>
 80159f6:	4606      	mov	r6, r0
 80159f8:	6938      	ldr	r0, [r7, #16]
 80159fa:	4642      	mov	r2, r8
 80159fc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015a00:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015a04:	f000 fb2e 	bl	8016064 <run_xrce_session>
 8015a08:	693f      	ldr	r7, [r7, #16]
 8015a0a:	4632      	mov	r2, r6
 8015a0c:	4606      	mov	r6, r0
 8015a0e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015a12:	4638      	mov	r0, r7
 8015a14:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8015a18:	f000 fb24 	bl	8016064 <run_xrce_session>
 8015a1c:	b126      	cbz	r6, 8015a28 <rmw_destroy_publisher+0xa4>
 8015a1e:	b118      	cbz	r0, 8015a28 <rmw_destroy_publisher+0xa4>
 8015a20:	4628      	mov	r0, r5
 8015a22:	f000 f9b9 	bl	8015d98 <rmw_uxrce_fini_publisher_memory>
 8015a26:	e7b7      	b.n	8015998 <rmw_destroy_publisher+0x14>
 8015a28:	2402      	movs	r4, #2
 8015a2a:	e7f9      	b.n	8015a20 <rmw_destroy_publisher+0x9c>

08015a2c <rmw_uxrce_transport_init>:
 8015a2c:	b508      	push	{r3, lr}
 8015a2e:	b108      	cbz	r0, 8015a34 <rmw_uxrce_transport_init+0x8>
 8015a30:	f100 0210 	add.w	r2, r0, #16
 8015a34:	b139      	cbz	r1, 8015a46 <rmw_uxrce_transport_init+0x1a>
 8015a36:	6949      	ldr	r1, [r1, #20]
 8015a38:	4610      	mov	r0, r2
 8015a3a:	f001 fcbb 	bl	80173b4 <uxr_init_custom_transport>
 8015a3e:	f080 0001 	eor.w	r0, r0, #1
 8015a42:	b2c0      	uxtb	r0, r0
 8015a44:	bd08      	pop	{r3, pc}
 8015a46:	4b04      	ldr	r3, [pc, #16]	@ (8015a58 <rmw_uxrce_transport_init+0x2c>)
 8015a48:	4610      	mov	r0, r2
 8015a4a:	6859      	ldr	r1, [r3, #4]
 8015a4c:	f001 fcb2 	bl	80173b4 <uxr_init_custom_transport>
 8015a50:	f080 0001 	eor.w	r0, r0, #1
 8015a54:	b2c0      	uxtb	r0, r0
 8015a56:	bd08      	pop	{r3, pc}
 8015a58:	2406490c 	.word	0x2406490c

08015a5c <rmw_uros_epoch_nanos>:
 8015a5c:	4b05      	ldr	r3, [pc, #20]	@ (8015a74 <rmw_uros_epoch_nanos+0x18>)
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	b123      	cbz	r3, 8015a6c <rmw_uros_epoch_nanos+0x10>
 8015a62:	6898      	ldr	r0, [r3, #8]
 8015a64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a68:	f001 bf26 	b.w	80178b8 <uxr_epoch_nanos>
 8015a6c:	2000      	movs	r0, #0
 8015a6e:	2100      	movs	r1, #0
 8015a70:	4770      	bx	lr
 8015a72:	bf00      	nop
 8015a74:	24069224 	.word	0x24069224

08015a78 <rmw_uros_sync_session>:
 8015a78:	b508      	push	{r3, lr}
 8015a7a:	4b07      	ldr	r3, [pc, #28]	@ (8015a98 <rmw_uros_sync_session+0x20>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	b14b      	cbz	r3, 8015a94 <rmw_uros_sync_session+0x1c>
 8015a80:	4601      	mov	r1, r0
 8015a82:	6898      	ldr	r0, [r3, #8]
 8015a84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a88:	f002 fb56 	bl	8018138 <uxr_sync_session>
 8015a8c:	f080 0001 	eor.w	r0, r0, #1
 8015a90:	b2c0      	uxtb	r0, r0
 8015a92:	bd08      	pop	{r3, pc}
 8015a94:	2001      	movs	r0, #1
 8015a96:	bd08      	pop	{r3, pc}
 8015a98:	24069224 	.word	0x24069224

08015a9c <rmw_uxrce_init_service_memory>:
 8015a9c:	b1e2      	cbz	r2, 8015ad8 <rmw_uxrce_init_service_memory+0x3c>
 8015a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aa2:	7b05      	ldrb	r5, [r0, #12]
 8015aa4:	4606      	mov	r6, r0
 8015aa6:	b9ad      	cbnz	r5, 8015ad4 <rmw_uxrce_init_service_memory+0x38>
 8015aa8:	23c8      	movs	r3, #200	@ 0xc8
 8015aaa:	4617      	mov	r7, r2
 8015aac:	460c      	mov	r4, r1
 8015aae:	46a8      	mov	r8, r5
 8015ab0:	6083      	str	r3, [r0, #8]
 8015ab2:	f240 1301 	movw	r3, #257	@ 0x101
 8015ab6:	e9c0 5500 	strd	r5, r5, [r0]
 8015aba:	8183      	strh	r3, [r0, #12]
 8015abc:	3501      	adds	r5, #1
 8015abe:	4621      	mov	r1, r4
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	f008 fe0f 	bl	801e6e4 <put_memory>
 8015ac6:	42af      	cmp	r7, r5
 8015ac8:	60a4      	str	r4, [r4, #8]
 8015aca:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015ace:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015ad2:	d1f3      	bne.n	8015abc <rmw_uxrce_init_service_memory+0x20>
 8015ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad8:	4770      	bx	lr
 8015ada:	bf00      	nop

08015adc <rmw_uxrce_init_client_memory>:
 8015adc:	b1e2      	cbz	r2, 8015b18 <rmw_uxrce_init_client_memory+0x3c>
 8015ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae2:	7b05      	ldrb	r5, [r0, #12]
 8015ae4:	4606      	mov	r6, r0
 8015ae6:	b9ad      	cbnz	r5, 8015b14 <rmw_uxrce_init_client_memory+0x38>
 8015ae8:	23c8      	movs	r3, #200	@ 0xc8
 8015aea:	4617      	mov	r7, r2
 8015aec:	460c      	mov	r4, r1
 8015aee:	46a8      	mov	r8, r5
 8015af0:	6083      	str	r3, [r0, #8]
 8015af2:	f240 1301 	movw	r3, #257	@ 0x101
 8015af6:	e9c0 5500 	strd	r5, r5, [r0]
 8015afa:	8183      	strh	r3, [r0, #12]
 8015afc:	3501      	adds	r5, #1
 8015afe:	4621      	mov	r1, r4
 8015b00:	4630      	mov	r0, r6
 8015b02:	f008 fdef 	bl	801e6e4 <put_memory>
 8015b06:	42af      	cmp	r7, r5
 8015b08:	60a4      	str	r4, [r4, #8]
 8015b0a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015b0e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015b12:	d1f3      	bne.n	8015afc <rmw_uxrce_init_client_memory+0x20>
 8015b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop

08015b1c <rmw_uxrce_init_publisher_memory>:
 8015b1c:	b1e2      	cbz	r2, 8015b58 <rmw_uxrce_init_publisher_memory+0x3c>
 8015b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b22:	7b05      	ldrb	r5, [r0, #12]
 8015b24:	4606      	mov	r6, r0
 8015b26:	b9ad      	cbnz	r5, 8015b54 <rmw_uxrce_init_publisher_memory+0x38>
 8015b28:	23d8      	movs	r3, #216	@ 0xd8
 8015b2a:	4617      	mov	r7, r2
 8015b2c:	460c      	mov	r4, r1
 8015b2e:	46a8      	mov	r8, r5
 8015b30:	6083      	str	r3, [r0, #8]
 8015b32:	f240 1301 	movw	r3, #257	@ 0x101
 8015b36:	e9c0 5500 	strd	r5, r5, [r0]
 8015b3a:	8183      	strh	r3, [r0, #12]
 8015b3c:	3501      	adds	r5, #1
 8015b3e:	4621      	mov	r1, r4
 8015b40:	4630      	mov	r0, r6
 8015b42:	f008 fdcf 	bl	801e6e4 <put_memory>
 8015b46:	42af      	cmp	r7, r5
 8015b48:	60a4      	str	r4, [r4, #8]
 8015b4a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015b4e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b52:	d1f3      	bne.n	8015b3c <rmw_uxrce_init_publisher_memory+0x20>
 8015b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b58:	4770      	bx	lr
 8015b5a:	bf00      	nop

08015b5c <rmw_uxrce_init_subscription_memory>:
 8015b5c:	b1e2      	cbz	r2, 8015b98 <rmw_uxrce_init_subscription_memory+0x3c>
 8015b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b62:	7b05      	ldrb	r5, [r0, #12]
 8015b64:	4606      	mov	r6, r0
 8015b66:	b9ad      	cbnz	r5, 8015b94 <rmw_uxrce_init_subscription_memory+0x38>
 8015b68:	23d8      	movs	r3, #216	@ 0xd8
 8015b6a:	4617      	mov	r7, r2
 8015b6c:	460c      	mov	r4, r1
 8015b6e:	46a8      	mov	r8, r5
 8015b70:	6083      	str	r3, [r0, #8]
 8015b72:	f240 1301 	movw	r3, #257	@ 0x101
 8015b76:	e9c0 5500 	strd	r5, r5, [r0]
 8015b7a:	8183      	strh	r3, [r0, #12]
 8015b7c:	3501      	adds	r5, #1
 8015b7e:	4621      	mov	r1, r4
 8015b80:	4630      	mov	r0, r6
 8015b82:	f008 fdaf 	bl	801e6e4 <put_memory>
 8015b86:	42af      	cmp	r7, r5
 8015b88:	60a4      	str	r4, [r4, #8]
 8015b8a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015b8e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b92:	d1f3      	bne.n	8015b7c <rmw_uxrce_init_subscription_memory+0x20>
 8015b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b98:	4770      	bx	lr
 8015b9a:	bf00      	nop

08015b9c <rmw_uxrce_init_node_memory>:
 8015b9c:	b1e2      	cbz	r2, 8015bd8 <rmw_uxrce_init_node_memory+0x3c>
 8015b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba2:	7b05      	ldrb	r5, [r0, #12]
 8015ba4:	4606      	mov	r6, r0
 8015ba6:	b9ad      	cbnz	r5, 8015bd4 <rmw_uxrce_init_node_memory+0x38>
 8015ba8:	23a4      	movs	r3, #164	@ 0xa4
 8015baa:	4617      	mov	r7, r2
 8015bac:	460c      	mov	r4, r1
 8015bae:	46a8      	mov	r8, r5
 8015bb0:	6083      	str	r3, [r0, #8]
 8015bb2:	f240 1301 	movw	r3, #257	@ 0x101
 8015bb6:	e9c0 5500 	strd	r5, r5, [r0]
 8015bba:	8183      	strh	r3, [r0, #12]
 8015bbc:	3501      	adds	r5, #1
 8015bbe:	4621      	mov	r1, r4
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	f008 fd8f 	bl	801e6e4 <put_memory>
 8015bc6:	42af      	cmp	r7, r5
 8015bc8:	60a4      	str	r4, [r4, #8]
 8015bca:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8015bce:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015bd2:	d1f3      	bne.n	8015bbc <rmw_uxrce_init_node_memory+0x20>
 8015bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bd8:	4770      	bx	lr
 8015bda:	bf00      	nop

08015bdc <rmw_uxrce_init_session_memory>:
 8015bdc:	b1ea      	cbz	r2, 8015c1a <rmw_uxrce_init_session_memory+0x3e>
 8015bde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015be2:	7b05      	ldrb	r5, [r0, #12]
 8015be4:	4606      	mov	r6, r0
 8015be6:	b9b5      	cbnz	r5, 8015c16 <rmw_uxrce_init_session_memory+0x3a>
 8015be8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8015bec:	f240 1301 	movw	r3, #257	@ 0x101
 8015bf0:	4617      	mov	r7, r2
 8015bf2:	460c      	mov	r4, r1
 8015bf4:	46a9      	mov	r9, r5
 8015bf6:	f8c0 8008 	str.w	r8, [r0, #8]
 8015bfa:	8183      	strh	r3, [r0, #12]
 8015bfc:	e9c0 5500 	strd	r5, r5, [r0]
 8015c00:	3501      	adds	r5, #1
 8015c02:	4621      	mov	r1, r4
 8015c04:	4630      	mov	r0, r6
 8015c06:	f008 fd6d 	bl	801e6e4 <put_memory>
 8015c0a:	42af      	cmp	r7, r5
 8015c0c:	60a4      	str	r4, [r4, #8]
 8015c0e:	f884 900c 	strb.w	r9, [r4, #12]
 8015c12:	4444      	add	r4, r8
 8015c14:	d1f4      	bne.n	8015c00 <rmw_uxrce_init_session_memory+0x24>
 8015c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c1a:	4770      	bx	lr

08015c1c <rmw_uxrce_init_topic_memory>:
 8015c1c:	b1e2      	cbz	r2, 8015c58 <rmw_uxrce_init_topic_memory+0x3c>
 8015c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c22:	7b05      	ldrb	r5, [r0, #12]
 8015c24:	4606      	mov	r6, r0
 8015c26:	b9ad      	cbnz	r5, 8015c54 <rmw_uxrce_init_topic_memory+0x38>
 8015c28:	231c      	movs	r3, #28
 8015c2a:	4617      	mov	r7, r2
 8015c2c:	460c      	mov	r4, r1
 8015c2e:	46a8      	mov	r8, r5
 8015c30:	6083      	str	r3, [r0, #8]
 8015c32:	f240 1301 	movw	r3, #257	@ 0x101
 8015c36:	e9c0 5500 	strd	r5, r5, [r0]
 8015c3a:	8183      	strh	r3, [r0, #12]
 8015c3c:	3501      	adds	r5, #1
 8015c3e:	4621      	mov	r1, r4
 8015c40:	4630      	mov	r0, r6
 8015c42:	f008 fd4f 	bl	801e6e4 <put_memory>
 8015c46:	42af      	cmp	r7, r5
 8015c48:	60a4      	str	r4, [r4, #8]
 8015c4a:	f104 041c 	add.w	r4, r4, #28
 8015c4e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015c52:	d1f3      	bne.n	8015c3c <rmw_uxrce_init_topic_memory+0x20>
 8015c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c58:	4770      	bx	lr
 8015c5a:	bf00      	nop

08015c5c <rmw_uxrce_init_static_input_buffer_memory>:
 8015c5c:	b1ea      	cbz	r2, 8015c9a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8015c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c62:	7b05      	ldrb	r5, [r0, #12]
 8015c64:	4606      	mov	r6, r0
 8015c66:	b9b5      	cbnz	r5, 8015c96 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015c68:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8015c6c:	4617      	mov	r7, r2
 8015c6e:	460c      	mov	r4, r1
 8015c70:	46a8      	mov	r8, r5
 8015c72:	6083      	str	r3, [r0, #8]
 8015c74:	f240 1301 	movw	r3, #257	@ 0x101
 8015c78:	e9c0 5500 	strd	r5, r5, [r0]
 8015c7c:	8183      	strh	r3, [r0, #12]
 8015c7e:	3501      	adds	r5, #1
 8015c80:	4621      	mov	r1, r4
 8015c82:	4630      	mov	r0, r6
 8015c84:	f008 fd2e 	bl	801e6e4 <put_memory>
 8015c88:	42af      	cmp	r7, r5
 8015c8a:	60a4      	str	r4, [r4, #8]
 8015c8c:	f884 800c 	strb.w	r8, [r4, #12]
 8015c90:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8015c94:	d1f3      	bne.n	8015c7e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c9a:	4770      	bx	lr

08015c9c <rmw_uxrce_init_init_options_impl_memory>:
 8015c9c:	b1e2      	cbz	r2, 8015cd8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ca2:	7b05      	ldrb	r5, [r0, #12]
 8015ca4:	4606      	mov	r6, r0
 8015ca6:	b9ad      	cbnz	r5, 8015cd4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015ca8:	232c      	movs	r3, #44	@ 0x2c
 8015caa:	4617      	mov	r7, r2
 8015cac:	460c      	mov	r4, r1
 8015cae:	46a8      	mov	r8, r5
 8015cb0:	6083      	str	r3, [r0, #8]
 8015cb2:	f240 1301 	movw	r3, #257	@ 0x101
 8015cb6:	e9c0 5500 	strd	r5, r5, [r0]
 8015cba:	8183      	strh	r3, [r0, #12]
 8015cbc:	3501      	adds	r5, #1
 8015cbe:	4621      	mov	r1, r4
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	f008 fd0f 	bl	801e6e4 <put_memory>
 8015cc6:	42af      	cmp	r7, r5
 8015cc8:	60a4      	str	r4, [r4, #8]
 8015cca:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8015cce:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015cd2:	d1f3      	bne.n	8015cbc <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop

08015cdc <rmw_uxrce_init_wait_set_memory>:
 8015cdc:	b1e2      	cbz	r2, 8015d18 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ce2:	7b05      	ldrb	r5, [r0, #12]
 8015ce4:	4606      	mov	r6, r0
 8015ce6:	b9ad      	cbnz	r5, 8015d14 <rmw_uxrce_init_wait_set_memory+0x38>
 8015ce8:	231c      	movs	r3, #28
 8015cea:	4617      	mov	r7, r2
 8015cec:	460c      	mov	r4, r1
 8015cee:	46a8      	mov	r8, r5
 8015cf0:	6083      	str	r3, [r0, #8]
 8015cf2:	f240 1301 	movw	r3, #257	@ 0x101
 8015cf6:	e9c0 5500 	strd	r5, r5, [r0]
 8015cfa:	8183      	strh	r3, [r0, #12]
 8015cfc:	3501      	adds	r5, #1
 8015cfe:	4621      	mov	r1, r4
 8015d00:	4630      	mov	r0, r6
 8015d02:	f008 fcef 	bl	801e6e4 <put_memory>
 8015d06:	42af      	cmp	r7, r5
 8015d08:	60a4      	str	r4, [r4, #8]
 8015d0a:	f104 041c 	add.w	r4, r4, #28
 8015d0e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015d12:	d1f3      	bne.n	8015cfc <rmw_uxrce_init_wait_set_memory+0x20>
 8015d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop

08015d1c <rmw_uxrce_init_guard_condition_memory>:
 8015d1c:	b1e2      	cbz	r2, 8015d58 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d22:	7b05      	ldrb	r5, [r0, #12]
 8015d24:	4606      	mov	r6, r0
 8015d26:	b9ad      	cbnz	r5, 8015d54 <rmw_uxrce_init_guard_condition_memory+0x38>
 8015d28:	2320      	movs	r3, #32
 8015d2a:	4617      	mov	r7, r2
 8015d2c:	460c      	mov	r4, r1
 8015d2e:	46a8      	mov	r8, r5
 8015d30:	6083      	str	r3, [r0, #8]
 8015d32:	f240 1301 	movw	r3, #257	@ 0x101
 8015d36:	e9c0 5500 	strd	r5, r5, [r0]
 8015d3a:	8183      	strh	r3, [r0, #12]
 8015d3c:	3501      	adds	r5, #1
 8015d3e:	4621      	mov	r1, r4
 8015d40:	4630      	mov	r0, r6
 8015d42:	f008 fccf 	bl	801e6e4 <put_memory>
 8015d46:	42af      	cmp	r7, r5
 8015d48:	60a4      	str	r4, [r4, #8]
 8015d4a:	f104 0420 	add.w	r4, r4, #32
 8015d4e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015d52:	d1f3      	bne.n	8015d3c <rmw_uxrce_init_guard_condition_memory+0x20>
 8015d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d58:	4770      	bx	lr
 8015d5a:	bf00      	nop

08015d5c <rmw_uxrce_fini_session_memory>:
 8015d5c:	4601      	mov	r1, r0
 8015d5e:	4801      	ldr	r0, [pc, #4]	@ (8015d64 <rmw_uxrce_fini_session_memory+0x8>)
 8015d60:	f008 bcc0 	b.w	801e6e4 <put_memory>
 8015d64:	24069224 	.word	0x24069224

08015d68 <rmw_uxrce_fini_node_memory>:
 8015d68:	b538      	push	{r3, r4, r5, lr}
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	6800      	ldr	r0, [r0, #0]
 8015d6e:	b128      	cbz	r0, 8015d7c <rmw_uxrce_fini_node_memory+0x14>
 8015d70:	4b07      	ldr	r3, [pc, #28]	@ (8015d90 <rmw_uxrce_fini_node_memory+0x28>)
 8015d72:	6819      	ldr	r1, [r3, #0]
 8015d74:	f7ea fab4 	bl	80002e0 <strcmp>
 8015d78:	b940      	cbnz	r0, 8015d8c <rmw_uxrce_fini_node_memory+0x24>
 8015d7a:	6020      	str	r0, [r4, #0]
 8015d7c:	6861      	ldr	r1, [r4, #4]
 8015d7e:	b129      	cbz	r1, 8015d8c <rmw_uxrce_fini_node_memory+0x24>
 8015d80:	2500      	movs	r5, #0
 8015d82:	4804      	ldr	r0, [pc, #16]	@ (8015d94 <rmw_uxrce_fini_node_memory+0x2c>)
 8015d84:	610d      	str	r5, [r1, #16]
 8015d86:	f008 fcad 	bl	801e6e4 <put_memory>
 8015d8a:	6065      	str	r5, [r4, #4]
 8015d8c:	bd38      	pop	{r3, r4, r5, pc}
 8015d8e:	bf00      	nop
 8015d90:	08025978 	.word	0x08025978
 8015d94:	240691f4 	.word	0x240691f4

08015d98 <rmw_uxrce_fini_publisher_memory>:
 8015d98:	b510      	push	{r4, lr}
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	6800      	ldr	r0, [r0, #0]
 8015d9e:	b128      	cbz	r0, 8015dac <rmw_uxrce_fini_publisher_memory+0x14>
 8015da0:	4b06      	ldr	r3, [pc, #24]	@ (8015dbc <rmw_uxrce_fini_publisher_memory+0x24>)
 8015da2:	6819      	ldr	r1, [r3, #0]
 8015da4:	f7ea fa9c 	bl	80002e0 <strcmp>
 8015da8:	b938      	cbnz	r0, 8015dba <rmw_uxrce_fini_publisher_memory+0x22>
 8015daa:	6020      	str	r0, [r4, #0]
 8015dac:	6861      	ldr	r1, [r4, #4]
 8015dae:	b121      	cbz	r1, 8015dba <rmw_uxrce_fini_publisher_memory+0x22>
 8015db0:	4803      	ldr	r0, [pc, #12]	@ (8015dc0 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015db2:	f008 fc97 	bl	801e6e4 <put_memory>
 8015db6:	2300      	movs	r3, #0
 8015db8:	6063      	str	r3, [r4, #4]
 8015dba:	bd10      	pop	{r4, pc}
 8015dbc:	08025978 	.word	0x08025978
 8015dc0:	24069204 	.word	0x24069204

08015dc4 <rmw_uxrce_fini_subscription_memory>:
 8015dc4:	b510      	push	{r4, lr}
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	6800      	ldr	r0, [r0, #0]
 8015dca:	b128      	cbz	r0, 8015dd8 <rmw_uxrce_fini_subscription_memory+0x14>
 8015dcc:	4b06      	ldr	r3, [pc, #24]	@ (8015de8 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015dce:	6819      	ldr	r1, [r3, #0]
 8015dd0:	f7ea fa86 	bl	80002e0 <strcmp>
 8015dd4:	b938      	cbnz	r0, 8015de6 <rmw_uxrce_fini_subscription_memory+0x22>
 8015dd6:	6020      	str	r0, [r4, #0]
 8015dd8:	6861      	ldr	r1, [r4, #4]
 8015dda:	b121      	cbz	r1, 8015de6 <rmw_uxrce_fini_subscription_memory+0x22>
 8015ddc:	4803      	ldr	r0, [pc, #12]	@ (8015dec <rmw_uxrce_fini_subscription_memory+0x28>)
 8015dde:	f008 fc81 	bl	801e6e4 <put_memory>
 8015de2:	2300      	movs	r3, #0
 8015de4:	6063      	str	r3, [r4, #4]
 8015de6:	bd10      	pop	{r4, pc}
 8015de8:	08025978 	.word	0x08025978
 8015dec:	24069244 	.word	0x24069244

08015df0 <rmw_uxrce_fini_service_memory>:
 8015df0:	b510      	push	{r4, lr}
 8015df2:	4604      	mov	r4, r0
 8015df4:	6800      	ldr	r0, [r0, #0]
 8015df6:	b128      	cbz	r0, 8015e04 <rmw_uxrce_fini_service_memory+0x14>
 8015df8:	4b06      	ldr	r3, [pc, #24]	@ (8015e14 <rmw_uxrce_fini_service_memory+0x24>)
 8015dfa:	6819      	ldr	r1, [r3, #0]
 8015dfc:	f7ea fa70 	bl	80002e0 <strcmp>
 8015e00:	b938      	cbnz	r0, 8015e12 <rmw_uxrce_fini_service_memory+0x22>
 8015e02:	6020      	str	r0, [r4, #0]
 8015e04:	6861      	ldr	r1, [r4, #4]
 8015e06:	b121      	cbz	r1, 8015e12 <rmw_uxrce_fini_service_memory+0x22>
 8015e08:	4803      	ldr	r0, [pc, #12]	@ (8015e18 <rmw_uxrce_fini_service_memory+0x28>)
 8015e0a:	f008 fc6b 	bl	801e6e4 <put_memory>
 8015e0e:	2300      	movs	r3, #0
 8015e10:	6063      	str	r3, [r4, #4]
 8015e12:	bd10      	pop	{r4, pc}
 8015e14:	08025978 	.word	0x08025978
 8015e18:	24069214 	.word	0x24069214

08015e1c <rmw_uxrce_fini_client_memory>:
 8015e1c:	b510      	push	{r4, lr}
 8015e1e:	4604      	mov	r4, r0
 8015e20:	6800      	ldr	r0, [r0, #0]
 8015e22:	b128      	cbz	r0, 8015e30 <rmw_uxrce_fini_client_memory+0x14>
 8015e24:	4b06      	ldr	r3, [pc, #24]	@ (8015e40 <rmw_uxrce_fini_client_memory+0x24>)
 8015e26:	6819      	ldr	r1, [r3, #0]
 8015e28:	f7ea fa5a 	bl	80002e0 <strcmp>
 8015e2c:	b938      	cbnz	r0, 8015e3e <rmw_uxrce_fini_client_memory+0x22>
 8015e2e:	6020      	str	r0, [r4, #0]
 8015e30:	6861      	ldr	r1, [r4, #4]
 8015e32:	b121      	cbz	r1, 8015e3e <rmw_uxrce_fini_client_memory+0x22>
 8015e34:	4803      	ldr	r0, [pc, #12]	@ (8015e44 <rmw_uxrce_fini_client_memory+0x28>)
 8015e36:	f008 fc55 	bl	801e6e4 <put_memory>
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	6063      	str	r3, [r4, #4]
 8015e3e:	bd10      	pop	{r4, pc}
 8015e40:	08025978 	.word	0x08025978
 8015e44:	24064928 	.word	0x24064928

08015e48 <rmw_uxrce_fini_topic_memory>:
 8015e48:	b510      	push	{r4, lr}
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	4803      	ldr	r0, [pc, #12]	@ (8015e5c <rmw_uxrce_fini_topic_memory+0x14>)
 8015e4e:	4621      	mov	r1, r4
 8015e50:	f008 fc48 	bl	801e6e4 <put_memory>
 8015e54:	2300      	movs	r3, #0
 8015e56:	61a3      	str	r3, [r4, #24]
 8015e58:	bd10      	pop	{r4, pc}
 8015e5a:	bf00      	nop
 8015e5c:	24069254 	.word	0x24069254

08015e60 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015e60:	b082      	sub	sp, #8
 8015e62:	492b      	ldr	r1, [pc, #172]	@ (8015f10 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015e64:	b530      	push	{r4, r5, lr}
 8015e66:	680d      	ldr	r5, [r1, #0]
 8015e68:	ac03      	add	r4, sp, #12
 8015e6a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015e6e:	461c      	mov	r4, r3
 8015e70:	2d00      	cmp	r5, #0
 8015e72:	d04b      	beq.n	8015f0c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015e74:	462b      	mov	r3, r5
 8015e76:	2100      	movs	r1, #0
 8015e78:	689a      	ldr	r2, [r3, #8]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8015e80:	4290      	cmp	r0, r2
 8015e82:	bf08      	it	eq
 8015e84:	3101      	addeq	r1, #1
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d1f6      	bne.n	8015e78 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015e8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015e8e:	2b02      	cmp	r3, #2
 8015e90:	d029      	beq.n	8015ee6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015e92:	d820      	bhi.n	8015ed6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015e94:	428c      	cmp	r4, r1
 8015e96:	d828      	bhi.n	8015eea <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e98:	fab4 f284 	clz	r2, r4
 8015e9c:	0952      	lsrs	r2, r2, #5
 8015e9e:	b324      	cbz	r4, 8015eea <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015ea0:	b1dd      	cbz	r5, 8015eda <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015ea2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015ea6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8015eaa:	e001      	b.n	8015eb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015eac:	686d      	ldr	r5, [r5, #4]
 8015eae:	b1ad      	cbz	r5, 8015edc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015eb0:	68ab      	ldr	r3, [r5, #8]
 8015eb2:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8015eb6:	4288      	cmp	r0, r1
 8015eb8:	d1f8      	bne.n	8015eac <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015eba:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8015ebe:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8015ec2:	4561      	cmp	r1, ip
 8015ec4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015ec8:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015ecc:	daee      	bge.n	8015eac <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015ece:	468c      	mov	ip, r1
 8015ed0:	461c      	mov	r4, r3
 8015ed2:	462a      	mov	r2, r5
 8015ed4:	e7ea      	b.n	8015eac <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015ed6:	2b03      	cmp	r3, #3
 8015ed8:	d0dc      	beq.n	8015e94 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015eda:	2200      	movs	r2, #0
 8015edc:	4610      	mov	r0, r2
 8015ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ee2:	b002      	add	sp, #8
 8015ee4:	4770      	bx	lr
 8015ee6:	428c      	cmp	r4, r1
 8015ee8:	d905      	bls.n	8015ef6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015eea:	4809      	ldr	r0, [pc, #36]	@ (8015f10 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ef0:	b002      	add	sp, #8
 8015ef2:	f008 bbe7 	b.w	801e6c4 <get_memory>
 8015ef6:	fab4 f284 	clz	r2, r4
 8015efa:	0952      	lsrs	r2, r2, #5
 8015efc:	2c00      	cmp	r4, #0
 8015efe:	d1ed      	bne.n	8015edc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015f00:	4803      	ldr	r0, [pc, #12]	@ (8015f10 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f06:	b002      	add	sp, #8
 8015f08:	f008 bbdc 	b.w	801e6c4 <get_memory>
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	e7bc      	b.n	8015e8a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015f10:	24069234 	.word	0x24069234

08015f14 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015f14:	4b12      	ldr	r3, [pc, #72]	@ (8015f60 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	b530      	push	{r4, r5, lr}
 8015f1a:	b1f3      	cbz	r3, 8015f5a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015f1c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015f20:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015f24:	2400      	movs	r4, #0
 8015f26:	e001      	b.n	8015f2c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	b1a3      	cbz	r3, 8015f56 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015f2c:	689a      	ldr	r2, [r3, #8]
 8015f2e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8015f32:	4288      	cmp	r0, r1
 8015f34:	d1f8      	bne.n	8015f28 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015f36:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8015f3a:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8015f3e:	4571      	cmp	r1, lr
 8015f40:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015f44:	eb72 050c 	sbcs.w	r5, r2, ip
 8015f48:	daee      	bge.n	8015f28 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015f4a:	461c      	mov	r4, r3
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	468e      	mov	lr, r1
 8015f50:	4694      	mov	ip, r2
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d1ea      	bne.n	8015f2c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015f56:	4620      	mov	r0, r4
 8015f58:	bd30      	pop	{r4, r5, pc}
 8015f5a:	461c      	mov	r4, r3
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	bd30      	pop	{r4, r5, pc}
 8015f60:	24069234 	.word	0x24069234
 8015f64:	00000000 	.word	0x00000000

08015f68 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015f68:	4b3d      	ldr	r3, [pc, #244]	@ (8016060 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f6e:	681f      	ldr	r7, [r3, #0]
 8015f70:	ed2d 8b06 	vpush	{d8-d10}
 8015f74:	b08d      	sub	sp, #52	@ 0x34
 8015f76:	f7ff fd71 	bl	8015a5c <rmw_uros_epoch_nanos>
 8015f7a:	2f00      	cmp	r7, #0
 8015f7c:	d05d      	beq.n	801603a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015f7e:	46b8      	mov	r8, r7
 8015f80:	4681      	mov	r9, r0
 8015f82:	468a      	mov	sl, r1
 8015f84:	ac04      	add	r4, sp, #16
 8015f86:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015f8a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015f8e:	2b04      	cmp	r3, #4
 8015f90:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8016048 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015f94:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8016050 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015f98:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8016058 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8015f9c:	d03f      	beq.n	801601e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f9e:	2b05      	cmp	r3, #5
 8015fa0:	d044      	beq.n	801602c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015fa2:	2b03      	cmp	r3, #3
 8015fa4:	d03b      	beq.n	801601e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015fa6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015faa:	ed8d ab06 	vstr	d10, [sp, #24]
 8015fae:	ab08      	add	r3, sp, #32
 8015fb0:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015fb4:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8015fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015fbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015fc2:	f008 f9a1 	bl	801e308 <rmw_time_equal>
 8015fc6:	b118      	cbz	r0, 8015fd0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015fc8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8015fcc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015fd0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8015fd4:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8015fd8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8015fdc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015fe0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015fe4:	f008 f9e6 	bl	801e3b4 <rmw_time_total_nsec>
 8015fe8:	1830      	adds	r0, r6, r0
 8015fea:	eb47 0101 	adc.w	r1, r7, r1
 8015fee:	4548      	cmp	r0, r9
 8015ff0:	eb71 030a 	sbcs.w	r3, r1, sl
 8015ff4:	db05      	blt.n	8016002 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015ff6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8015ffa:	4591      	cmp	r9, r2
 8015ffc:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016000:	da03      	bge.n	801600a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016002:	4641      	mov	r1, r8
 8016004:	4816      	ldr	r0, [pc, #88]	@ (8016060 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016006:	f008 fb6d 	bl	801e6e4 <put_memory>
 801600a:	f1bb 0f00 	cmp.w	fp, #0
 801600e:	d014      	beq.n	801603a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016010:	46d8      	mov	r8, fp
 8016012:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016016:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801601a:	2b04      	cmp	r3, #4
 801601c:	d1bf      	bne.n	8015f9e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801601e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8016022:	3340      	adds	r3, #64	@ 0x40
 8016024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016026:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801602a:	e7c0      	b.n	8015fae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801602c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8016030:	3348      	adds	r3, #72	@ 0x48
 8016032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016038:	e7b9      	b.n	8015fae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801603a:	b00d      	add	sp, #52	@ 0x34
 801603c:	ecbd 8b06 	vpop	{d8-d10}
 8016040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016044:	f3af 8000 	nop.w
	...
 8016050:	00000001 	.word	0x00000001
 8016054:	00000000 	.word	0x00000000
 8016058:	0000001e 	.word	0x0000001e
 801605c:	00000000 	.word	0x00000000
 8016060:	24069234 	.word	0x24069234

08016064 <run_xrce_session>:
 8016064:	b510      	push	{r4, lr}
 8016066:	788c      	ldrb	r4, [r1, #2]
 8016068:	b086      	sub	sp, #24
 801606a:	2c01      	cmp	r4, #1
 801606c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016070:	d00c      	beq.n	801608c <run_xrce_session+0x28>
 8016072:	2401      	movs	r4, #1
 8016074:	4619      	mov	r1, r3
 8016076:	f10d 020e 	add.w	r2, sp, #14
 801607a:	f10d 0317 	add.w	r3, sp, #23
 801607e:	9400      	str	r4, [sp, #0]
 8016080:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016084:	f002 f800 	bl	8018088 <uxr_run_session_until_all_status>
 8016088:	b006      	add	sp, #24
 801608a:	bd10      	pop	{r4, pc}
 801608c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016090:	f001 fc1c 	bl	80178cc <uxr_flash_output_streams>
 8016094:	4620      	mov	r0, r4
 8016096:	b006      	add	sp, #24
 8016098:	bd10      	pop	{r4, pc}
 801609a:	bf00      	nop

0801609c <convert_qos_profile>:
 801609c:	7a4a      	ldrb	r2, [r1, #9]
 801609e:	f891 c008 	ldrb.w	ip, [r1, #8]
 80160a2:	2a02      	cmp	r2, #2
 80160a4:	bf18      	it	ne
 80160a6:	2200      	movne	r2, #0
 80160a8:	7002      	strb	r2, [r0, #0]
 80160aa:	f1ac 0202 	sub.w	r2, ip, #2
 80160ae:	fab2 f282 	clz	r2, r2
 80160b2:	0952      	lsrs	r2, r2, #5
 80160b4:	7042      	strb	r2, [r0, #1]
 80160b6:	780a      	ldrb	r2, [r1, #0]
 80160b8:	8889      	ldrh	r1, [r1, #4]
 80160ba:	f1a2 0202 	sub.w	r2, r2, #2
 80160be:	8081      	strh	r1, [r0, #4]
 80160c0:	fab2 f282 	clz	r2, r2
 80160c4:	0952      	lsrs	r2, r2, #5
 80160c6:	7082      	strb	r2, [r0, #2]
 80160c8:	4770      	bx	lr
 80160ca:	bf00      	nop

080160cc <generate_service_topics>:
 80160cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160ce:	461d      	mov	r5, r3
 80160d0:	b083      	sub	sp, #12
 80160d2:	4606      	mov	r6, r0
 80160d4:	4c11      	ldr	r4, [pc, #68]	@ (801611c <generate_service_topics+0x50>)
 80160d6:	4608      	mov	r0, r1
 80160d8:	4b11      	ldr	r3, [pc, #68]	@ (8016120 <generate_service_topics+0x54>)
 80160da:	4617      	mov	r7, r2
 80160dc:	4629      	mov	r1, r5
 80160de:	4a11      	ldr	r2, [pc, #68]	@ (8016124 <generate_service_topics+0x58>)
 80160e0:	9401      	str	r4, [sp, #4]
 80160e2:	9600      	str	r6, [sp, #0]
 80160e4:	f00b ff9e 	bl	8022024 <sniprintf>
 80160e8:	4a0f      	ldr	r2, [pc, #60]	@ (8016128 <generate_service_topics+0x5c>)
 80160ea:	4604      	mov	r4, r0
 80160ec:	4b0f      	ldr	r3, [pc, #60]	@ (801612c <generate_service_topics+0x60>)
 80160ee:	9201      	str	r2, [sp, #4]
 80160f0:	4638      	mov	r0, r7
 80160f2:	4a0c      	ldr	r2, [pc, #48]	@ (8016124 <generate_service_topics+0x58>)
 80160f4:	4629      	mov	r1, r5
 80160f6:	9600      	str	r6, [sp, #0]
 80160f8:	f00b ff94 	bl	8022024 <sniprintf>
 80160fc:	2c00      	cmp	r4, #0
 80160fe:	bfa8      	it	ge
 8016100:	42a5      	cmpge	r5, r4
 8016102:	bfcc      	ite	gt
 8016104:	2401      	movgt	r4, #1
 8016106:	2400      	movle	r4, #0
 8016108:	dd05      	ble.n	8016116 <generate_service_topics+0x4a>
 801610a:	2800      	cmp	r0, #0
 801610c:	bfa8      	it	ge
 801610e:	4285      	cmpge	r5, r0
 8016110:	bfcc      	ite	gt
 8016112:	2401      	movgt	r4, #1
 8016114:	2400      	movle	r4, #0
 8016116:	4620      	mov	r0, r4
 8016118:	b003      	add	sp, #12
 801611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801611c:	08024a20 	.word	0x08024a20
 8016120:	08024a1c 	.word	0x08024a1c
 8016124:	080249f8 	.word	0x080249f8
 8016128:	08024a14 	.word	0x08024a14
 801612c:	08024a10 	.word	0x08024a10

08016130 <generate_service_types>:
 8016130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016134:	4606      	mov	r6, r0
 8016136:	b087      	sub	sp, #28
 8016138:	461c      	mov	r4, r3
 801613a:	6883      	ldr	r3, [r0, #8]
 801613c:	460d      	mov	r5, r1
 801613e:	4617      	mov	r7, r2
 8016140:	4798      	blx	r3
 8016142:	68f3      	ldr	r3, [r6, #12]
 8016144:	4606      	mov	r6, r0
 8016146:	4798      	blx	r3
 8016148:	2300      	movs	r3, #0
 801614a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801614e:	6872      	ldr	r2, [r6, #4]
 8016150:	702b      	strb	r3, [r5, #0]
 8016152:	6813      	ldr	r3, [r2, #0]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d03f      	beq.n	80161d8 <generate_service_types+0xa8>
 8016158:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80161ec <generate_service_types+0xbc>
 801615c:	4649      	mov	r1, r9
 801615e:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80161f4 <generate_service_types+0xc4>
 8016162:	4628      	mov	r0, r5
 8016164:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80161f8 <generate_service_types+0xc8>
 8016168:	f8cd 8014 	str.w	r8, [sp, #20]
 801616c:	6852      	ldr	r2, [r2, #4]
 801616e:	9100      	str	r1, [sp, #0]
 8016170:	4621      	mov	r1, r4
 8016172:	f8cd 8008 	str.w	r8, [sp, #8]
 8016176:	f8cd a004 	str.w	sl, [sp, #4]
 801617a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801617e:	4a1a      	ldr	r2, [pc, #104]	@ (80161e8 <generate_service_types+0xb8>)
 8016180:	f00b ff50 	bl	8022024 <sniprintf>
 8016184:	2300      	movs	r3, #0
 8016186:	42a0      	cmp	r0, r4
 8016188:	ea6f 0600 	mvn.w	r6, r0
 801618c:	703b      	strb	r3, [r7, #0]
 801618e:	f8db 3000 	ldr.w	r3, [fp]
 8016192:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8016196:	bfac      	ite	ge
 8016198:	2500      	movge	r5, #0
 801619a:	2501      	movlt	r5, #1
 801619c:	b30b      	cbz	r3, 80161e2 <generate_service_types+0xb2>
 801619e:	4a13      	ldr	r2, [pc, #76]	@ (80161ec <generate_service_types+0xbc>)
 80161a0:	f8cd 8014 	str.w	r8, [sp, #20]
 80161a4:	402e      	ands	r6, r5
 80161a6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80161aa:	4638      	mov	r0, r7
 80161ac:	9104      	str	r1, [sp, #16]
 80161ae:	4621      	mov	r1, r4
 80161b0:	e9cd 2a00 	strd	r2, sl, [sp]
 80161b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80161b8:	4a0b      	ldr	r2, [pc, #44]	@ (80161e8 <generate_service_types+0xb8>)
 80161ba:	f00b ff33 	bl	8022024 <sniprintf>
 80161be:	2800      	cmp	r0, #0
 80161c0:	bfb4      	ite	lt
 80161c2:	2600      	movlt	r6, #0
 80161c4:	f006 0601 	andge.w	r6, r6, #1
 80161c8:	42a0      	cmp	r0, r4
 80161ca:	bfac      	ite	ge
 80161cc:	2000      	movge	r0, #0
 80161ce:	f006 0001 	andlt.w	r0, r6, #1
 80161d2:	b007      	add	sp, #28
 80161d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d8:	4b05      	ldr	r3, [pc, #20]	@ (80161f0 <generate_service_types+0xc0>)
 80161da:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 80161ec <generate_service_types+0xbc>
 80161de:	4619      	mov	r1, r3
 80161e0:	e7bd      	b.n	801615e <generate_service_types+0x2e>
 80161e2:	4b03      	ldr	r3, [pc, #12]	@ (80161f0 <generate_service_types+0xc0>)
 80161e4:	461a      	mov	r2, r3
 80161e6:	e7db      	b.n	80161a0 <generate_service_types+0x70>
 80161e8:	080249f0 	.word	0x080249f0
 80161ec:	080249ec 	.word	0x080249ec
 80161f0:	08025ab4 	.word	0x08025ab4
 80161f4:	08024a00 	.word	0x08024a00
 80161f8:	08024a04 	.word	0x08024a04

080161fc <generate_type_name>:
 80161fc:	2300      	movs	r3, #0
 80161fe:	b530      	push	{r4, r5, lr}
 8016200:	700b      	strb	r3, [r1, #0]
 8016202:	b087      	sub	sp, #28
 8016204:	6803      	ldr	r3, [r0, #0]
 8016206:	4614      	mov	r4, r2
 8016208:	b1bb      	cbz	r3, 801623a <generate_type_name+0x3e>
 801620a:	4a0e      	ldr	r2, [pc, #56]	@ (8016244 <generate_type_name+0x48>)
 801620c:	4615      	mov	r5, r2
 801620e:	9500      	str	r5, [sp, #0]
 8016210:	9203      	str	r2, [sp, #12]
 8016212:	4d0d      	ldr	r5, [pc, #52]	@ (8016248 <generate_type_name+0x4c>)
 8016214:	6842      	ldr	r2, [r0, #4]
 8016216:	4608      	mov	r0, r1
 8016218:	490c      	ldr	r1, [pc, #48]	@ (801624c <generate_type_name+0x50>)
 801621a:	9204      	str	r2, [sp, #16]
 801621c:	9105      	str	r1, [sp, #20]
 801621e:	9102      	str	r1, [sp, #8]
 8016220:	4621      	mov	r1, r4
 8016222:	4a0b      	ldr	r2, [pc, #44]	@ (8016250 <generate_type_name+0x54>)
 8016224:	9501      	str	r5, [sp, #4]
 8016226:	f00b fefd 	bl	8022024 <sniprintf>
 801622a:	2800      	cmp	r0, #0
 801622c:	bfa8      	it	ge
 801622e:	4284      	cmpge	r4, r0
 8016230:	bfcc      	ite	gt
 8016232:	2001      	movgt	r0, #1
 8016234:	2000      	movle	r0, #0
 8016236:	b007      	add	sp, #28
 8016238:	bd30      	pop	{r4, r5, pc}
 801623a:	4b06      	ldr	r3, [pc, #24]	@ (8016254 <generate_type_name+0x58>)
 801623c:	4a01      	ldr	r2, [pc, #4]	@ (8016244 <generate_type_name+0x48>)
 801623e:	461d      	mov	r5, r3
 8016240:	e7e5      	b.n	801620e <generate_type_name+0x12>
 8016242:	bf00      	nop
 8016244:	080249ec 	.word	0x080249ec
 8016248:	08024a04 	.word	0x08024a04
 801624c:	08024a00 	.word	0x08024a00
 8016250:	080249f0 	.word	0x080249f0
 8016254:	08025ab4 	.word	0x08025ab4

08016258 <generate_topic_name>:
 8016258:	b530      	push	{r4, r5, lr}
 801625a:	4614      	mov	r4, r2
 801625c:	b083      	sub	sp, #12
 801625e:	4605      	mov	r5, r0
 8016260:	4b07      	ldr	r3, [pc, #28]	@ (8016280 <generate_topic_name+0x28>)
 8016262:	4a08      	ldr	r2, [pc, #32]	@ (8016284 <generate_topic_name+0x2c>)
 8016264:	4608      	mov	r0, r1
 8016266:	9500      	str	r5, [sp, #0]
 8016268:	4621      	mov	r1, r4
 801626a:	f00b fedb 	bl	8022024 <sniprintf>
 801626e:	2800      	cmp	r0, #0
 8016270:	bfa8      	it	ge
 8016272:	4284      	cmpge	r4, r0
 8016274:	bfcc      	ite	gt
 8016276:	2001      	movgt	r0, #1
 8016278:	2000      	movle	r0, #0
 801627a:	b003      	add	sp, #12
 801627c:	bd30      	pop	{r4, r5, pc}
 801627e:	bf00      	nop
 8016280:	08024a28 	.word	0x08024a28
 8016284:	08024a08 	.word	0x08024a08

08016288 <is_uxrce_rmw_identifier_valid>:
 8016288:	b510      	push	{r4, lr}
 801628a:	4604      	mov	r4, r0
 801628c:	b140      	cbz	r0, 80162a0 <is_uxrce_rmw_identifier_valid+0x18>
 801628e:	f008 fa81 	bl	801e794 <rmw_get_implementation_identifier>
 8016292:	4601      	mov	r1, r0
 8016294:	4620      	mov	r0, r4
 8016296:	f7ea f823 	bl	80002e0 <strcmp>
 801629a:	fab0 f080 	clz	r0, r0
 801629e:	0940      	lsrs	r0, r0, #5
 80162a0:	bd10      	pop	{r4, pc}
 80162a2:	bf00      	nop

080162a4 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80162a4:	4b04      	ldr	r3, [pc, #16]	@ (80162b8 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 80162a6:	681a      	ldr	r2, [r3, #0]
 80162a8:	b10a      	cbz	r2, 80162ae <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xa>
 80162aa:	4803      	ldr	r0, [pc, #12]	@ (80162b8 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 80162ac:	4770      	bx	lr
 80162ae:	4a03      	ldr	r2, [pc, #12]	@ (80162bc <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x18>)
 80162b0:	4801      	ldr	r0, [pc, #4]	@ (80162b8 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 80162b2:	6812      	ldr	r2, [r2, #0]
 80162b4:	601a      	str	r2, [r3, #0]
 80162b6:	4770      	bx	lr
 80162b8:	24000cb0 	.word	0x24000cb0
 80162bc:	24000d2c 	.word	0x24000d2c

080162c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80162c0:	4a02      	ldr	r2, [pc, #8]	@ (80162cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 80162c2:	4b03      	ldr	r3, [pc, #12]	@ (80162d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 80162c4:	6812      	ldr	r2, [r2, #0]
 80162c6:	601a      	str	r2, [r3, #0]
 80162c8:	4770      	bx	lr
 80162ca:	bf00      	nop
 80162cc:	24000d2c 	.word	0x24000d2c
 80162d0:	24000cb0 	.word	0x24000cb0

080162d4 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 80162d4:	f009 bc2a 	b.w	801fb2c <rosgraph_msgs__msg__Clock__init>

080162d8 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 80162d8:	f009 bc3a 	b.w	801fb50 <rosgraph_msgs__msg__Clock__fini>

080162dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80162dc:	b508      	push	{r3, lr}
 80162de:	f7fc fc5d 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80162e2:	4b06      	ldr	r3, [pc, #24]	@ (80162fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162e4:	4906      	ldr	r1, [pc, #24]	@ (8016300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 80162e6:	681a      	ldr	r2, [r3, #0]
 80162e8:	60c8      	str	r0, [r1, #12]
 80162ea:	b10a      	cbz	r2, 80162f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 80162ec:	4803      	ldr	r0, [pc, #12]	@ (80162fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162ee:	bd08      	pop	{r3, pc}
 80162f0:	4a04      	ldr	r2, [pc, #16]	@ (8016304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 80162f2:	4802      	ldr	r0, [pc, #8]	@ (80162fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162f4:	6812      	ldr	r2, [r2, #0]
 80162f6:	601a      	str	r2, [r3, #0]
 80162f8:	bd08      	pop	{r3, pc}
 80162fa:	bf00      	nop
 80162fc:	24000cf8 	.word	0x24000cf8
 8016300:	24000cbc 	.word	0x24000cbc
 8016304:	24000d30 	.word	0x24000d30

08016308 <get_serialized_size_rosgraph_msgs__msg__Clock>:
 8016308:	b108      	cbz	r0, 801630e <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 801630a:	f7fc bc55 	b.w	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801630e:	4770      	bx	lr

08016310 <_Clock__max_serialized_size>:
 8016310:	b500      	push	{lr}
 8016312:	b083      	sub	sp, #12
 8016314:	2301      	movs	r3, #1
 8016316:	2100      	movs	r1, #0
 8016318:	f10d 0007 	add.w	r0, sp, #7
 801631c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016320:	f7fc fc9a 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8016324:	b003      	add	sp, #12
 8016326:	f85d fb04 	ldr.w	pc, [sp], #4
 801632a:	bf00      	nop

0801632c <_Clock__get_serialized_size>:
 801632c:	b110      	cbz	r0, 8016334 <_Clock__get_serialized_size+0x8>
 801632e:	2100      	movs	r1, #0
 8016330:	f7fc bc42 	b.w	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8016334:	4770      	bx	lr
 8016336:	bf00      	nop

08016338 <_Clock__cdr_deserialize>:
 8016338:	b570      	push	{r4, r5, r6, lr}
 801633a:	460c      	mov	r4, r1
 801633c:	b151      	cbz	r1, 8016354 <_Clock__cdr_deserialize+0x1c>
 801633e:	4605      	mov	r5, r0
 8016340:	f7fc fc9e 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016344:	4603      	mov	r3, r0
 8016346:	4621      	mov	r1, r4
 8016348:	4628      	mov	r0, r5
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	4718      	bx	r3
 8016354:	4608      	mov	r0, r1
 8016356:	bd70      	pop	{r4, r5, r6, pc}

08016358 <_Clock__cdr_serialize>:
 8016358:	b160      	cbz	r0, 8016374 <_Clock__cdr_serialize+0x1c>
 801635a:	b570      	push	{r4, r5, r6, lr}
 801635c:	4604      	mov	r4, r0
 801635e:	460d      	mov	r5, r1
 8016360:	f7fc fc8e 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016364:	4603      	mov	r3, r0
 8016366:	4629      	mov	r1, r5
 8016368:	4620      	mov	r0, r4
 801636a:	685b      	ldr	r3, [r3, #4]
 801636c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016370:	689b      	ldr	r3, [r3, #8]
 8016372:	4718      	bx	r3
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop

08016378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016378:	4800      	ldr	r0, [pc, #0]	@ (801637c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 801637a:	4770      	bx	lr
 801637c:	24000d04 	.word	0x24000d04

08016380 <get_message_typesupport_handle>:
 8016380:	6883      	ldr	r3, [r0, #8]
 8016382:	4718      	bx	r3

08016384 <get_message_typesupport_handle_function>:
 8016384:	b510      	push	{r4, lr}
 8016386:	4604      	mov	r4, r0
 8016388:	6800      	ldr	r0, [r0, #0]
 801638a:	f7e9 ffa9 	bl	80002e0 <strcmp>
 801638e:	2800      	cmp	r0, #0
 8016390:	bf0c      	ite	eq
 8016392:	4620      	moveq	r0, r4
 8016394:	2000      	movne	r0, #0
 8016396:	bd10      	pop	{r4, pc}

08016398 <get_service_typesupport_handle>:
 8016398:	6883      	ldr	r3, [r0, #8]
 801639a:	4718      	bx	r3

0801639c <get_service_typesupport_handle_function>:
 801639c:	b510      	push	{r4, lr}
 801639e:	4604      	mov	r4, r0
 80163a0:	6800      	ldr	r0, [r0, #0]
 80163a2:	f7e9 ff9d 	bl	80002e0 <strcmp>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	bf0c      	ite	eq
 80163aa:	4620      	moveq	r0, r4
 80163ac:	2000      	movne	r0, #0
 80163ae:	bd10      	pop	{r4, pc}

080163b0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80163b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163b4:	6805      	ldr	r5, [r0, #0]
 80163b6:	4604      	mov	r4, r0
 80163b8:	460e      	mov	r6, r1
 80163ba:	4628      	mov	r0, r5
 80163bc:	f7e9 ff90 	bl	80002e0 <strcmp>
 80163c0:	b1c8      	cbz	r0, 80163f6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80163c2:	4b11      	ldr	r3, [pc, #68]	@ (8016408 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	429d      	cmp	r5, r3
 80163c8:	d112      	bne.n	80163f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80163ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80163ce:	f8d8 4000 	ldr.w	r4, [r8]
 80163d2:	b16c      	cbz	r4, 80163f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80163d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80163d8:	2700      	movs	r7, #0
 80163da:	3d04      	subs	r5, #4
 80163dc:	4631      	mov	r1, r6
 80163de:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80163e2:	f7e9 ff7d 	bl	80002e0 <strcmp>
 80163e6:	00bb      	lsls	r3, r7, #2
 80163e8:	b140      	cbz	r0, 80163fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80163ea:	3701      	adds	r7, #1
 80163ec:	42bc      	cmp	r4, r7
 80163ee:	d1f5      	bne.n	80163dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80163f0:	2000      	movs	r0, #0
 80163f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163f6:	4620      	mov	r0, r4
 80163f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016404:	58d3      	ldr	r3, [r2, r3]
 8016406:	4718      	bx	r3
 8016408:	24000d2c 	.word	0x24000d2c

0801640c <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 801640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016410:	6805      	ldr	r5, [r0, #0]
 8016412:	4604      	mov	r4, r0
 8016414:	460e      	mov	r6, r1
 8016416:	4628      	mov	r0, r5
 8016418:	f7e9 ff62 	bl	80002e0 <strcmp>
 801641c:	b1c8      	cbz	r0, 8016452 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801641e:	4b11      	ldr	r3, [pc, #68]	@ (8016464 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	429d      	cmp	r5, r3
 8016424:	d112      	bne.n	801644c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8016426:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801642a:	f8d8 4000 	ldr.w	r4, [r8]
 801642e:	b16c      	cbz	r4, 801644c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8016430:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016434:	2700      	movs	r7, #0
 8016436:	3d04      	subs	r5, #4
 8016438:	4631      	mov	r1, r6
 801643a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801643e:	f7e9 ff4f 	bl	80002e0 <strcmp>
 8016442:	00bb      	lsls	r3, r7, #2
 8016444:	b140      	cbz	r0, 8016458 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8016446:	3701      	adds	r7, #1
 8016448:	42bc      	cmp	r4, r7
 801644a:	d1f5      	bne.n	8016438 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 801644c:	2000      	movs	r0, #0
 801644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016452:	4620      	mov	r0, r4
 8016454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016458:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801645c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016460:	58d3      	ldr	r3, [r2, r3]
 8016462:	4718      	bx	r3
 8016464:	24000d2c 	.word	0x24000d2c

08016468 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8016468:	f009 bb76 	b.w	801fb58 <std_msgs__msg__Header__init>

0801646c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 801646c:	f009 bb98 	b.w	801fba0 <std_msgs__msg__Header__fini>

08016470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016470:	b508      	push	{r3, lr}
 8016472:	f7fc fb93 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016476:	4b06      	ldr	r3, [pc, #24]	@ (8016490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016478:	4906      	ldr	r1, [pc, #24]	@ (8016494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	60c8      	str	r0, [r1, #12]
 801647e:	b10a      	cbz	r2, 8016484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8016480:	4803      	ldr	r0, [pc, #12]	@ (8016490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016482:	bd08      	pop	{r3, pc}
 8016484:	4a04      	ldr	r2, [pc, #16]	@ (8016498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8016486:	4802      	ldr	r0, [pc, #8]	@ (8016490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016488:	6812      	ldr	r2, [r2, #0]
 801648a:	601a      	str	r2, [r3, #0]
 801648c:	bd08      	pop	{r3, pc}
 801648e:	bf00      	nop
 8016490:	24000dac 	.word	0x24000dac
 8016494:	24000d34 	.word	0x24000d34
 8016498:	24000d30 	.word	0x24000d30

0801649c <_Header__max_serialized_size>:
 801649c:	b500      	push	{lr}
 801649e:	b083      	sub	sp, #12
 80164a0:	2301      	movs	r3, #1
 80164a2:	2100      	movs	r1, #0
 80164a4:	f10d 0007 	add.w	r0, sp, #7
 80164a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80164ac:	f7fc fbd4 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 80164b0:	b003      	add	sp, #12
 80164b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80164b6:	bf00      	nop

080164b8 <get_serialized_size_std_msgs__msg__Header>:
 80164b8:	b570      	push	{r4, r5, r6, lr}
 80164ba:	4605      	mov	r5, r0
 80164bc:	b168      	cbz	r0, 80164da <get_serialized_size_std_msgs__msg__Header+0x22>
 80164be:	460c      	mov	r4, r1
 80164c0:	f7fc fb7a 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80164c4:	2104      	movs	r1, #4
 80164c6:	1826      	adds	r6, r4, r0
 80164c8:	f1c4 0405 	rsb	r4, r4, #5
 80164cc:	4630      	mov	r0, r6
 80164ce:	f7fd fe77 	bl	80141c0 <ucdr_alignment>
 80164d2:	68e9      	ldr	r1, [r5, #12]
 80164d4:	440c      	add	r4, r1
 80164d6:	4404      	add	r4, r0
 80164d8:	19a0      	adds	r0, r4, r6
 80164da:	bd70      	pop	{r4, r5, r6, pc}

080164dc <_Header__cdr_deserialize>:
 80164dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164de:	460c      	mov	r4, r1
 80164e0:	b083      	sub	sp, #12
 80164e2:	b1e9      	cbz	r1, 8016520 <_Header__cdr_deserialize+0x44>
 80164e4:	4606      	mov	r6, r0
 80164e6:	f7fc fbcb 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80164ea:	4603      	mov	r3, r0
 80164ec:	4621      	mov	r1, r4
 80164ee:	4630      	mov	r0, r6
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	68db      	ldr	r3, [r3, #12]
 80164f4:	4798      	blx	r3
 80164f6:	6927      	ldr	r7, [r4, #16]
 80164f8:	ab01      	add	r3, sp, #4
 80164fa:	68a1      	ldr	r1, [r4, #8]
 80164fc:	463a      	mov	r2, r7
 80164fe:	4630      	mov	r0, r6
 8016500:	f000 fc50 	bl	8016da4 <ucdr_deserialize_sequence_char>
 8016504:	9b01      	ldr	r3, [sp, #4]
 8016506:	4605      	mov	r5, r0
 8016508:	b920      	cbnz	r0, 8016514 <_Header__cdr_deserialize+0x38>
 801650a:	429f      	cmp	r7, r3
 801650c:	d30c      	bcc.n	8016528 <_Header__cdr_deserialize+0x4c>
 801650e:	4628      	mov	r0, r5
 8016510:	b003      	add	sp, #12
 8016512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016514:	b103      	cbz	r3, 8016518 <_Header__cdr_deserialize+0x3c>
 8016516:	3b01      	subs	r3, #1
 8016518:	4628      	mov	r0, r5
 801651a:	60e3      	str	r3, [r4, #12]
 801651c:	b003      	add	sp, #12
 801651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016520:	460d      	mov	r5, r1
 8016522:	4628      	mov	r0, r5
 8016524:	b003      	add	sp, #12
 8016526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016528:	2101      	movs	r1, #1
 801652a:	4630      	mov	r0, r6
 801652c:	75b5      	strb	r5, [r6, #22]
 801652e:	7571      	strb	r1, [r6, #21]
 8016530:	60e5      	str	r5, [r4, #12]
 8016532:	f7fd fe5d 	bl	80141f0 <ucdr_align_to>
 8016536:	4630      	mov	r0, r6
 8016538:	9901      	ldr	r1, [sp, #4]
 801653a:	f7fd fe91 	bl	8014260 <ucdr_advance_buffer>
 801653e:	4628      	mov	r0, r5
 8016540:	b003      	add	sp, #12
 8016542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016544 <_Header__cdr_serialize>:
 8016544:	b308      	cbz	r0, 801658a <_Header__cdr_serialize+0x46>
 8016546:	b570      	push	{r4, r5, r6, lr}
 8016548:	4604      	mov	r4, r0
 801654a:	460d      	mov	r5, r1
 801654c:	f7fc fb98 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016550:	4603      	mov	r3, r0
 8016552:	4629      	mov	r1, r5
 8016554:	4620      	mov	r0, r4
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	689b      	ldr	r3, [r3, #8]
 801655a:	4798      	blx	r3
 801655c:	68a6      	ldr	r6, [r4, #8]
 801655e:	b15e      	cbz	r6, 8016578 <_Header__cdr_serialize+0x34>
 8016560:	4630      	mov	r0, r6
 8016562:	f7e9 fec7 	bl	80002f4 <strlen>
 8016566:	4603      	mov	r3, r0
 8016568:	1c42      	adds	r2, r0, #1
 801656a:	4631      	mov	r1, r6
 801656c:	4628      	mov	r0, r5
 801656e:	60e3      	str	r3, [r4, #12]
 8016570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016574:	f000 bc04 	b.w	8016d80 <ucdr_serialize_sequence_char>
 8016578:	4633      	mov	r3, r6
 801657a:	4632      	mov	r2, r6
 801657c:	4631      	mov	r1, r6
 801657e:	4628      	mov	r0, r5
 8016580:	60e3      	str	r3, [r4, #12]
 8016582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016586:	f000 bbfb 	b.w	8016d80 <ucdr_serialize_sequence_char>
 801658a:	4770      	bx	lr

0801658c <_Header__get_serialized_size>:
 801658c:	b538      	push	{r3, r4, r5, lr}
 801658e:	4604      	mov	r4, r0
 8016590:	b150      	cbz	r0, 80165a8 <_Header__get_serialized_size+0x1c>
 8016592:	2100      	movs	r1, #0
 8016594:	f7fc fb10 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8016598:	2104      	movs	r1, #4
 801659a:	4605      	mov	r5, r0
 801659c:	f7fd fe10 	bl	80141c0 <ucdr_alignment>
 80165a0:	68e2      	ldr	r2, [r4, #12]
 80165a2:	3205      	adds	r2, #5
 80165a4:	1953      	adds	r3, r2, r5
 80165a6:	4418      	add	r0, r3
 80165a8:	bd38      	pop	{r3, r4, r5, pc}
 80165aa:	bf00      	nop

080165ac <max_serialized_size_std_msgs__msg__Header>:
 80165ac:	2301      	movs	r3, #1
 80165ae:	b510      	push	{r4, lr}
 80165b0:	7003      	strb	r3, [r0, #0]
 80165b2:	4604      	mov	r4, r0
 80165b4:	f7fc fb50 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 80165b8:	2300      	movs	r3, #0
 80165ba:	7023      	strb	r3, [r4, #0]
 80165bc:	bd10      	pop	{r4, pc}
 80165be:	bf00      	nop

080165c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80165c0:	4800      	ldr	r0, [pc, #0]	@ (80165c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80165c2:	4770      	bx	lr
 80165c4:	24000db8 	.word	0x24000db8

080165c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80165c8:	4b04      	ldr	r3, [pc, #16]	@ (80165dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	b10a      	cbz	r2, 80165d2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 80165ce:	4803      	ldr	r0, [pc, #12]	@ (80165dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80165d0:	4770      	bx	lr
 80165d2:	4a03      	ldr	r2, [pc, #12]	@ (80165e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 80165d4:	4801      	ldr	r0, [pc, #4]	@ (80165dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80165d6:	6812      	ldr	r2, [r2, #0]
 80165d8:	601a      	str	r2, [r3, #0]
 80165da:	4770      	bx	lr
 80165dc:	24000de8 	.word	0x24000de8
 80165e0:	24000d2c 	.word	0x24000d2c

080165e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80165e4:	4a02      	ldr	r2, [pc, #8]	@ (80165f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80165e6:	4b03      	ldr	r3, [pc, #12]	@ (80165f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80165e8:	6812      	ldr	r2, [r2, #0]
 80165ea:	601a      	str	r2, [r3, #0]
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop
 80165f0:	24000d2c 	.word	0x24000d2c
 80165f4:	24000de8 	.word	0x24000de8

080165f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80165f8:	4b04      	ldr	r3, [pc, #16]	@ (801660c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	b10a      	cbz	r2, 8016602 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80165fe:	4803      	ldr	r0, [pc, #12]	@ (801660c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8016600:	4770      	bx	lr
 8016602:	4a03      	ldr	r2, [pc, #12]	@ (8016610 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 8016604:	4801      	ldr	r0, [pc, #4]	@ (801660c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8016606:	6812      	ldr	r2, [r2, #0]
 8016608:	601a      	str	r2, [r3, #0]
 801660a:	4770      	bx	lr
 801660c:	24000dfc 	.word	0x24000dfc
 8016610:	24000d2c 	.word	0x24000d2c

08016614 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016614:	4a02      	ldr	r2, [pc, #8]	@ (8016620 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8016616:	4b03      	ldr	r3, [pc, #12]	@ (8016624 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8016618:	6812      	ldr	r2, [r2, #0]
 801661a:	601a      	str	r2, [r3, #0]
 801661c:	4770      	bx	lr
 801661e:	bf00      	nop
 8016620:	24000d2c 	.word	0x24000d2c
 8016624:	24000dfc 	.word	0x24000dfc

08016628 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016628:	4b04      	ldr	r3, [pc, #16]	@ (801663c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 801662a:	681a      	ldr	r2, [r3, #0]
 801662c:	b10a      	cbz	r2, 8016632 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 801662e:	4803      	ldr	r0, [pc, #12]	@ (801663c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8016630:	4770      	bx	lr
 8016632:	4a03      	ldr	r2, [pc, #12]	@ (8016640 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8016634:	4801      	ldr	r0, [pc, #4]	@ (801663c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8016636:	6812      	ldr	r2, [r2, #0]
 8016638:	601a      	str	r2, [r3, #0]
 801663a:	4770      	bx	lr
 801663c:	24000e10 	.word	0x24000e10
 8016640:	24000d2c 	.word	0x24000d2c

08016644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016644:	4a02      	ldr	r2, [pc, #8]	@ (8016650 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8016646:	4b03      	ldr	r3, [pc, #12]	@ (8016654 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8016648:	6812      	ldr	r2, [r2, #0]
 801664a:	601a      	str	r2, [r3, #0]
 801664c:	4770      	bx	lr
 801664e:	bf00      	nop
 8016650:	24000d2c 	.word	0x24000d2c
 8016654:	24000e10 	.word	0x24000e10

08016658 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016658:	4b04      	ldr	r3, [pc, #16]	@ (801666c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	b10a      	cbz	r2, 8016662 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 801665e:	4803      	ldr	r0, [pc, #12]	@ (801666c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016660:	4770      	bx	lr
 8016662:	4a03      	ldr	r2, [pc, #12]	@ (8016670 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8016664:	4801      	ldr	r0, [pc, #4]	@ (801666c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016666:	6812      	ldr	r2, [r2, #0]
 8016668:	601a      	str	r2, [r3, #0]
 801666a:	4770      	bx	lr
 801666c:	24000e24 	.word	0x24000e24
 8016670:	24000d2c 	.word	0x24000d2c

08016674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016674:	4a02      	ldr	r2, [pc, #8]	@ (8016680 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8016676:	4b03      	ldr	r3, [pc, #12]	@ (8016684 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8016678:	6812      	ldr	r2, [r2, #0]
 801667a:	601a      	str	r2, [r3, #0]
 801667c:	4770      	bx	lr
 801667e:	bf00      	nop
 8016680:	24000d2c 	.word	0x24000d2c
 8016684:	24000e24 	.word	0x24000e24

08016688 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8016688:	f009 ba96 	b.w	801fbb8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

0801668c <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 801668c:	f009 bab8 	b.w	801fc00 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08016690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016690:	b510      	push	{r4, lr}
 8016692:	4c08      	ldr	r4, [pc, #32]	@ (80166b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8016694:	f7ff feec 	bl	8016470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016698:	60e0      	str	r0, [r4, #12]
 801669a:	f009 fb1d 	bl	801fcd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801669e:	4b06      	ldr	r3, [pc, #24]	@ (80166b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80166a0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80166a2:	681a      	ldr	r2, [r3, #0]
 80166a4:	b10a      	cbz	r2, 80166aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 80166a6:	4804      	ldr	r0, [pc, #16]	@ (80166b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80166a8:	bd10      	pop	{r4, pc}
 80166aa:	4a04      	ldr	r2, [pc, #16]	@ (80166bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80166ac:	4802      	ldr	r0, [pc, #8]	@ (80166b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80166ae:	6812      	ldr	r2, [r2, #0]
 80166b0:	601a      	str	r2, [r3, #0]
 80166b2:	bd10      	pop	{r4, pc}
 80166b4:	24000e30 	.word	0x24000e30
 80166b8:	24000ea8 	.word	0x24000ea8
 80166bc:	24000d30 	.word	0x24000d30

080166c0 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80166c0:	f009 baaa 	b.w	801fc18 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080166c4 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80166c4:	f009 bacc 	b.w	801fc60 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

080166c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80166c8:	b510      	push	{r4, lr}
 80166ca:	4c08      	ldr	r4, [pc, #32]	@ (80166ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 80166cc:	f7ff fed0 	bl	8016470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80166d0:	60e0      	str	r0, [r4, #12]
 80166d2:	f009 fb13 	bl	801fcfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80166d6:	4b06      	ldr	r3, [pc, #24]	@ (80166f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166d8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	b10a      	cbz	r2, 80166e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80166de:	4804      	ldr	r0, [pc, #16]	@ (80166f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166e0:	bd10      	pop	{r4, pc}
 80166e2:	4a04      	ldr	r2, [pc, #16]	@ (80166f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80166e4:	4802      	ldr	r0, [pc, #8]	@ (80166f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166e6:	6812      	ldr	r2, [r2, #0]
 80166e8:	601a      	str	r2, [r3, #0]
 80166ea:	bd10      	pop	{r4, pc}
 80166ec:	24000eb4 	.word	0x24000eb4
 80166f0:	24000f2c 	.word	0x24000f2c
 80166f4:	24000d30 	.word	0x24000d30

080166f8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80166f8:	f009 babe 	b.w	801fc78 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080166fc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80166fc:	f009 bace 	b.w	801fc9c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08016700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016700:	b508      	push	{r3, lr}
 8016702:	f7fc fa4b 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016706:	4b06      	ldr	r3, [pc, #24]	@ (8016720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8016708:	4906      	ldr	r1, [pc, #24]	@ (8016724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	60c8      	str	r0, [r1, #12]
 801670e:	b10a      	cbz	r2, 8016714 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8016710:	4803      	ldr	r0, [pc, #12]	@ (8016720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8016712:	bd08      	pop	{r3, pc}
 8016714:	4a04      	ldr	r2, [pc, #16]	@ (8016728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8016716:	4802      	ldr	r0, [pc, #8]	@ (8016720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8016718:	6812      	ldr	r2, [r2, #0]
 801671a:	601a      	str	r2, [r3, #0]
 801671c:	bd08      	pop	{r3, pc}
 801671e:	bf00      	nop
 8016720:	24000fb0 	.word	0x24000fb0
 8016724:	24000f38 	.word	0x24000f38
 8016728:	24000d30 	.word	0x24000d30

0801672c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 801672c:	f009 baba 	b.w	801fca4 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08016730 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8016730:	f009 baca 	b.w	801fcc8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08016734 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016734:	b508      	push	{r3, lr}
 8016736:	f7fc fa31 	bl	8012b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801673a:	4b06      	ldr	r3, [pc, #24]	@ (8016754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801673c:	4906      	ldr	r1, [pc, #24]	@ (8016758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 801673e:	681a      	ldr	r2, [r3, #0]
 8016740:	60c8      	str	r0, [r1, #12]
 8016742:	b10a      	cbz	r2, 8016748 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8016744:	4803      	ldr	r0, [pc, #12]	@ (8016754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8016746:	bd08      	pop	{r3, pc}
 8016748:	4a04      	ldr	r2, [pc, #16]	@ (801675c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 801674a:	4802      	ldr	r0, [pc, #8]	@ (8016754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801674c:	6812      	ldr	r2, [r2, #0]
 801674e:	601a      	str	r2, [r3, #0]
 8016750:	bd08      	pop	{r3, pc}
 8016752:	bf00      	nop
 8016754:	24001034 	.word	0x24001034
 8016758:	24000fbc 	.word	0x24000fbc
 801675c:	24000d30 	.word	0x24000d30

08016760 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016760:	b538      	push	{r3, r4, r5, lr}
 8016762:	4604      	mov	r4, r0
 8016764:	b150      	cbz	r0, 801677c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8016766:	460d      	mov	r5, r1
 8016768:	f7ff fea6 	bl	80164b8 <get_serialized_size_std_msgs__msg__Header>
 801676c:	4603      	mov	r3, r0
 801676e:	f104 0018 	add.w	r0, r4, #24
 8016772:	461c      	mov	r4, r3
 8016774:	18e9      	adds	r1, r5, r3
 8016776:	f009 facf 	bl	801fd18 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801677a:	4420      	add	r0, r4
 801677c:	bd38      	pop	{r3, r4, r5, pc}
 801677e:	bf00      	nop

08016780 <_ActuationCommandStamped__cdr_deserialize>:
 8016780:	b570      	push	{r4, r5, r6, lr}
 8016782:	460c      	mov	r4, r1
 8016784:	b199      	cbz	r1, 80167ae <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8016786:	4605      	mov	r5, r0
 8016788:	f7ff ff1a 	bl	80165c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801678c:	4603      	mov	r3, r0
 801678e:	4621      	mov	r1, r4
 8016790:	4628      	mov	r0, r5
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	68db      	ldr	r3, [r3, #12]
 8016796:	4798      	blx	r3
 8016798:	f009 fb46 	bl	801fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801679c:	4603      	mov	r3, r0
 801679e:	f104 0118 	add.w	r1, r4, #24
 80167a2:	4628      	mov	r0, r5
 80167a4:	685b      	ldr	r3, [r3, #4]
 80167a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167aa:	68db      	ldr	r3, [r3, #12]
 80167ac:	4718      	bx	r3
 80167ae:	4608      	mov	r0, r1
 80167b0:	bd70      	pop	{r4, r5, r6, pc}
 80167b2:	bf00      	nop

080167b4 <_ActuationCommandStamped__cdr_serialize>:
 80167b4:	b510      	push	{r4, lr}
 80167b6:	b082      	sub	sp, #8
 80167b8:	9101      	str	r1, [sp, #4]
 80167ba:	b1a0      	cbz	r0, 80167e6 <_ActuationCommandStamped__cdr_serialize+0x32>
 80167bc:	4604      	mov	r4, r0
 80167be:	f7ff feff 	bl	80165c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80167c2:	4603      	mov	r3, r0
 80167c4:	9901      	ldr	r1, [sp, #4]
 80167c6:	4620      	mov	r0, r4
 80167c8:	685b      	ldr	r3, [r3, #4]
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	4798      	blx	r3
 80167ce:	f009 fb2b 	bl	801fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80167d2:	4603      	mov	r3, r0
 80167d4:	9901      	ldr	r1, [sp, #4]
 80167d6:	f104 0018 	add.w	r0, r4, #24
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	689b      	ldr	r3, [r3, #8]
 80167de:	b002      	add	sp, #8
 80167e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167e4:	4718      	bx	r3
 80167e6:	b002      	add	sp, #8
 80167e8:	bd10      	pop	{r4, pc}
 80167ea:	bf00      	nop

080167ec <_ActuationCommandStamped__get_serialized_size>:
 80167ec:	b510      	push	{r4, lr}
 80167ee:	4604      	mov	r4, r0
 80167f0:	b148      	cbz	r0, 8016806 <_ActuationCommandStamped__get_serialized_size+0x1a>
 80167f2:	2100      	movs	r1, #0
 80167f4:	f7ff fe60 	bl	80164b8 <get_serialized_size_std_msgs__msg__Header>
 80167f8:	4601      	mov	r1, r0
 80167fa:	f104 0018 	add.w	r0, r4, #24
 80167fe:	460c      	mov	r4, r1
 8016800:	f009 fa8a 	bl	801fd18 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8016804:	4420      	add	r0, r4
 8016806:	bd10      	pop	{r4, pc}

08016808 <_ActuationCommandStamped__max_serialized_size>:
 8016808:	b510      	push	{r4, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	2301      	movs	r3, #1
 801680e:	2100      	movs	r1, #0
 8016810:	f10d 0007 	add.w	r0, sp, #7
 8016814:	f88d 3007 	strb.w	r3, [sp, #7]
 8016818:	f7ff fec8 	bl	80165ac <max_serialized_size_std_msgs__msg__Header>
 801681c:	4604      	mov	r4, r0
 801681e:	f10d 0007 	add.w	r0, sp, #7
 8016822:	4621      	mov	r1, r4
 8016824:	f009 fae6 	bl	801fdf4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8016828:	4420      	add	r0, r4
 801682a:	b002      	add	sp, #8
 801682c:	bd10      	pop	{r4, pc}
 801682e:	bf00      	nop

08016830 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016830:	4800      	ldr	r0, [pc, #0]	@ (8016834 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8016832:	4770      	bx	lr
 8016834:	24001040 	.word	0x24001040

08016838 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016838:	b538      	push	{r3, r4, r5, lr}
 801683a:	4604      	mov	r4, r0
 801683c:	b150      	cbz	r0, 8016854 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 801683e:	460d      	mov	r5, r1
 8016840:	f7ff fe3a 	bl	80164b8 <get_serialized_size_std_msgs__msg__Header>
 8016844:	4603      	mov	r3, r0
 8016846:	f104 0018 	add.w	r0, r4, #24
 801684a:	461c      	mov	r4, r3
 801684c:	18e9      	adds	r1, r5, r3
 801684e:	f009 faef 	bl	801fe30 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8016852:	4420      	add	r0, r4
 8016854:	bd38      	pop	{r3, r4, r5, pc}
 8016856:	bf00      	nop

08016858 <_ActuationStatusStamped__cdr_deserialize>:
 8016858:	b570      	push	{r4, r5, r6, lr}
 801685a:	460c      	mov	r4, r1
 801685c:	b199      	cbz	r1, 8016886 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801685e:	4605      	mov	r5, r0
 8016860:	f7ff feae 	bl	80165c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016864:	4603      	mov	r3, r0
 8016866:	4621      	mov	r1, r4
 8016868:	4628      	mov	r0, r5
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	68db      	ldr	r3, [r3, #12]
 801686e:	4798      	blx	r3
 8016870:	f009 fb66 	bl	801ff40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8016874:	4603      	mov	r3, r0
 8016876:	f104 0118 	add.w	r1, r4, #24
 801687a:	4628      	mov	r0, r5
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016882:	68db      	ldr	r3, [r3, #12]
 8016884:	4718      	bx	r3
 8016886:	4608      	mov	r0, r1
 8016888:	bd70      	pop	{r4, r5, r6, pc}
 801688a:	bf00      	nop

0801688c <_ActuationStatusStamped__cdr_serialize>:
 801688c:	b510      	push	{r4, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	9101      	str	r1, [sp, #4]
 8016892:	b1a0      	cbz	r0, 80168be <_ActuationStatusStamped__cdr_serialize+0x32>
 8016894:	4604      	mov	r4, r0
 8016896:	f7ff fe93 	bl	80165c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801689a:	4603      	mov	r3, r0
 801689c:	9901      	ldr	r1, [sp, #4]
 801689e:	4620      	mov	r0, r4
 80168a0:	685b      	ldr	r3, [r3, #4]
 80168a2:	689b      	ldr	r3, [r3, #8]
 80168a4:	4798      	blx	r3
 80168a6:	f009 fb4b 	bl	801ff40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80168aa:	4603      	mov	r3, r0
 80168ac:	9901      	ldr	r1, [sp, #4]
 80168ae:	f104 0018 	add.w	r0, r4, #24
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	689b      	ldr	r3, [r3, #8]
 80168b6:	b002      	add	sp, #8
 80168b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168bc:	4718      	bx	r3
 80168be:	b002      	add	sp, #8
 80168c0:	bd10      	pop	{r4, pc}
 80168c2:	bf00      	nop

080168c4 <_ActuationStatusStamped__get_serialized_size>:
 80168c4:	b510      	push	{r4, lr}
 80168c6:	4604      	mov	r4, r0
 80168c8:	b148      	cbz	r0, 80168de <_ActuationStatusStamped__get_serialized_size+0x1a>
 80168ca:	2100      	movs	r1, #0
 80168cc:	f7ff fdf4 	bl	80164b8 <get_serialized_size_std_msgs__msg__Header>
 80168d0:	4601      	mov	r1, r0
 80168d2:	f104 0018 	add.w	r0, r4, #24
 80168d6:	460c      	mov	r4, r1
 80168d8:	f009 faaa 	bl	801fe30 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80168dc:	4420      	add	r0, r4
 80168de:	bd10      	pop	{r4, pc}

080168e0 <_ActuationStatusStamped__max_serialized_size>:
 80168e0:	b510      	push	{r4, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	2301      	movs	r3, #1
 80168e6:	2100      	movs	r1, #0
 80168e8:	f10d 0007 	add.w	r0, sp, #7
 80168ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80168f0:	f7ff fe5c 	bl	80165ac <max_serialized_size_std_msgs__msg__Header>
 80168f4:	4604      	mov	r4, r0
 80168f6:	f10d 0007 	add.w	r0, sp, #7
 80168fa:	4621      	mov	r1, r4
 80168fc:	f009 fb06 	bl	801ff0c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8016900:	4420      	add	r0, r4
 8016902:	b002      	add	sp, #8
 8016904:	bd10      	pop	{r4, pc}
 8016906:	bf00      	nop

08016908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016908:	4800      	ldr	r0, [pc, #0]	@ (801690c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 801690a:	4770      	bx	lr
 801690c:	24001068 	.word	0x24001068

08016910 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016910:	b538      	push	{r3, r4, r5, lr}
 8016912:	b158      	cbz	r0, 801692c <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8016914:	460d      	mov	r5, r1
 8016916:	f7fc f94f 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801691a:	2104      	movs	r1, #4
 801691c:	182c      	adds	r4, r5, r0
 801691e:	f1c5 0504 	rsb	r5, r5, #4
 8016922:	4620      	mov	r0, r4
 8016924:	f7fd fc4c 	bl	80141c0 <ucdr_alignment>
 8016928:	4428      	add	r0, r5
 801692a:	4420      	add	r0, r4
 801692c:	bd38      	pop	{r3, r4, r5, pc}
 801692e:	bf00      	nop

08016930 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8016930:	b538      	push	{r3, r4, r5, lr}
 8016932:	460c      	mov	r4, r1
 8016934:	b179      	cbz	r1, 8016956 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8016936:	4605      	mov	r5, r0
 8016938:	f7fc f9a2 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801693c:	4603      	mov	r3, r0
 801693e:	4621      	mov	r1, r4
 8016940:	4628      	mov	r0, r5
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	68db      	ldr	r3, [r3, #12]
 8016946:	4798      	blx	r3
 8016948:	f104 0108 	add.w	r1, r4, #8
 801694c:	4628      	mov	r0, r5
 801694e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016952:	f7fd b9b7 	b.w	8013cc4 <ucdr_deserialize_float>
 8016956:	4608      	mov	r0, r1
 8016958:	bd38      	pop	{r3, r4, r5, pc}
 801695a:	bf00      	nop

0801695c <_SteeringWheelStatusStamped__cdr_serialize>:
 801695c:	b188      	cbz	r0, 8016982 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 801695e:	b538      	push	{r3, r4, r5, lr}
 8016960:	4604      	mov	r4, r0
 8016962:	460d      	mov	r5, r1
 8016964:	f7fc f98c 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016968:	4603      	mov	r3, r0
 801696a:	4629      	mov	r1, r5
 801696c:	4620      	mov	r0, r4
 801696e:	685b      	ldr	r3, [r3, #4]
 8016970:	689b      	ldr	r3, [r3, #8]
 8016972:	4798      	blx	r3
 8016974:	ed94 0a02 	vldr	s0, [r4, #8]
 8016978:	4628      	mov	r0, r5
 801697a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801697e:	f7fd b909 	b.w	8013b94 <ucdr_serialize_float>
 8016982:	4770      	bx	lr

08016984 <_SteeringWheelStatusStamped__get_serialized_size>:
 8016984:	b150      	cbz	r0, 801699c <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8016986:	2100      	movs	r1, #0
 8016988:	b510      	push	{r4, lr}
 801698a:	f7fc f915 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 801698e:	4604      	mov	r4, r0
 8016990:	2104      	movs	r1, #4
 8016992:	f7fd fc15 	bl	80141c0 <ucdr_alignment>
 8016996:	4420      	add	r0, r4
 8016998:	3004      	adds	r0, #4
 801699a:	bd10      	pop	{r4, pc}
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop

080169a0 <_SteeringWheelStatusStamped__max_serialized_size>:
 80169a0:	b510      	push	{r4, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	2301      	movs	r3, #1
 80169a6:	2100      	movs	r1, #0
 80169a8:	f10d 0007 	add.w	r0, sp, #7
 80169ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80169b0:	f7fc f952 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 80169b4:	4604      	mov	r4, r0
 80169b6:	2104      	movs	r1, #4
 80169b8:	f7fd fc02 	bl	80141c0 <ucdr_alignment>
 80169bc:	4420      	add	r0, r4
 80169be:	3004      	adds	r0, #4
 80169c0:	b002      	add	sp, #8
 80169c2:	bd10      	pop	{r4, pc}

080169c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80169c4:	4800      	ldr	r0, [pc, #0]	@ (80169c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 80169c6:	4770      	bx	lr
 80169c8:	24001090 	.word	0x24001090

080169cc <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80169cc:	b538      	push	{r3, r4, r5, lr}
 80169ce:	b158      	cbz	r0, 80169e8 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 80169d0:	460d      	mov	r5, r1
 80169d2:	f7fc f8f1 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 80169d6:	2101      	movs	r1, #1
 80169d8:	182c      	adds	r4, r5, r0
 80169da:	f1c5 0501 	rsb	r5, r5, #1
 80169de:	4620      	mov	r0, r4
 80169e0:	f7fd fbee 	bl	80141c0 <ucdr_alignment>
 80169e4:	4428      	add	r0, r5
 80169e6:	4420      	add	r0, r4
 80169e8:	bd38      	pop	{r3, r4, r5, pc}
 80169ea:	bf00      	nop

080169ec <_VehicleEmergencyStamped__cdr_deserialize>:
 80169ec:	b538      	push	{r3, r4, r5, lr}
 80169ee:	460c      	mov	r4, r1
 80169f0:	b179      	cbz	r1, 8016a12 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80169f2:	4605      	mov	r5, r0
 80169f4:	f7fc f944 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169f8:	4603      	mov	r3, r0
 80169fa:	4621      	mov	r1, r4
 80169fc:	4628      	mov	r0, r5
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	68db      	ldr	r3, [r3, #12]
 8016a02:	4798      	blx	r3
 8016a04:	f104 0108 	add.w	r1, r4, #8
 8016a08:	4628      	mov	r0, r5
 8016a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a0e:	f7fc b951 	b.w	8012cb4 <ucdr_deserialize_bool>
 8016a12:	4608      	mov	r0, r1
 8016a14:	bd38      	pop	{r3, r4, r5, pc}
 8016a16:	bf00      	nop

08016a18 <_VehicleEmergencyStamped__cdr_serialize>:
 8016a18:	b180      	cbz	r0, 8016a3c <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8016a1a:	b538      	push	{r3, r4, r5, lr}
 8016a1c:	4604      	mov	r4, r0
 8016a1e:	460d      	mov	r5, r1
 8016a20:	f7fc f92e 	bl	8012c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016a24:	4603      	mov	r3, r0
 8016a26:	4629      	mov	r1, r5
 8016a28:	4620      	mov	r0, r4
 8016a2a:	685b      	ldr	r3, [r3, #4]
 8016a2c:	689b      	ldr	r3, [r3, #8]
 8016a2e:	4798      	blx	r3
 8016a30:	7a21      	ldrb	r1, [r4, #8]
 8016a32:	4628      	mov	r0, r5
 8016a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a38:	f7fc b926 	b.w	8012c88 <ucdr_serialize_bool>
 8016a3c:	4770      	bx	lr
 8016a3e:	bf00      	nop

08016a40 <_VehicleEmergencyStamped__get_serialized_size>:
 8016a40:	b150      	cbz	r0, 8016a58 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8016a42:	2100      	movs	r1, #0
 8016a44:	b510      	push	{r4, lr}
 8016a46:	f7fc f8b7 	bl	8012bb8 <get_serialized_size_builtin_interfaces__msg__Time>
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	2101      	movs	r1, #1
 8016a4e:	f7fd fbb7 	bl	80141c0 <ucdr_alignment>
 8016a52:	4420      	add	r0, r4
 8016a54:	3001      	adds	r0, #1
 8016a56:	bd10      	pop	{r4, pc}
 8016a58:	4770      	bx	lr
 8016a5a:	bf00      	nop

08016a5c <_VehicleEmergencyStamped__max_serialized_size>:
 8016a5c:	b510      	push	{r4, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	2401      	movs	r4, #1
 8016a62:	2100      	movs	r1, #0
 8016a64:	f10d 0007 	add.w	r0, sp, #7
 8016a68:	f88d 4007 	strb.w	r4, [sp, #7]
 8016a6c:	f7fc f8f4 	bl	8012c58 <max_serialized_size_builtin_interfaces__msg__Time>
 8016a70:	4621      	mov	r1, r4
 8016a72:	4604      	mov	r4, r0
 8016a74:	f7fd fba4 	bl	80141c0 <ucdr_alignment>
 8016a78:	4420      	add	r0, r4
 8016a7a:	3001      	adds	r0, #1
 8016a7c:	b002      	add	sp, #8
 8016a7e:	bd10      	pop	{r4, pc}

08016a80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016a80:	4800      	ldr	r0, [pc, #0]	@ (8016a84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8016a82:	4770      	bx	lr
 8016a84:	240010b8 	.word	0x240010b8

08016a88 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>:
 8016a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a8a:	4605      	mov	r5, r0
 8016a8c:	b300      	cbz	r0, 8016ad0 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x48>
 8016a8e:	f000 f971 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016a92:	4604      	mov	r4, r0
 8016a94:	b178      	cbz	r0, 8016ab6 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2e>
 8016a96:	f105 0608 	add.w	r6, r5, #8
 8016a9a:	4630      	mov	r0, r6
 8016a9c:	f000 f842 	bl	8016b24 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	b1c0      	cbz	r0, 8016ad6 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x4e>
 8016aa4:	f105 0718 	add.w	r7, r5, #24
 8016aa8:	4638      	mov	r0, r7
 8016aaa:	f000 f853 	bl	8016b54 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>
 8016aae:	4604      	mov	r4, r0
 8016ab0:	b1e8      	cbz	r0, 8016aee <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x66>
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	f000 f960 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016abc:	f105 0008 	add.w	r0, r5, #8
 8016ac0:	f000 f844 	bl	8016b4c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016ac4:	f105 0018 	add.w	r0, r5, #24
 8016ac8:	f000 f85a 	bl	8016b80 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016acc:	4620      	mov	r0, r4
 8016ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f000 f950 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016adc:	4630      	mov	r0, r6
 8016ade:	f000 f835 	bl	8016b4c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016ae2:	f105 0018 	add.w	r0, r5, #24
 8016ae6:	f000 f84b 	bl	8016b80 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016aea:	4620      	mov	r0, r4
 8016aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aee:	4628      	mov	r0, r5
 8016af0:	f000 f944 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016af4:	4630      	mov	r0, r6
 8016af6:	f000 f829 	bl	8016b4c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016afa:	4638      	mov	r0, r7
 8016afc:	f000 f840 	bl	8016b80 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016b00:	e7d7      	b.n	8016ab2 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2a>
 8016b02:	bf00      	nop

08016b04 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>:
 8016b04:	b168      	cbz	r0, 8016b22 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini+0x1e>
 8016b06:	b510      	push	{r4, lr}
 8016b08:	4604      	mov	r4, r0
 8016b0a:	f000 f937 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016b0e:	f104 0008 	add.w	r0, r4, #8
 8016b12:	f000 f81b 	bl	8016b4c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016b16:	f104 0018 	add.w	r0, r4, #24
 8016b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b1e:	f000 b82f 	b.w	8016b80 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016b22:	4770      	bx	lr

08016b24 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>:
 8016b24:	b538      	push	{r3, r4, r5, lr}
 8016b26:	4604      	mov	r4, r0
 8016b28:	b140      	cbz	r0, 8016b3c <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x18>
 8016b2a:	f000 f923 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016b2e:	4605      	mov	r5, r0
 8016b30:	b138      	cbz	r0, 8016b42 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x1e>
 8016b32:	2300      	movs	r3, #0
 8016b34:	4628      	mov	r0, r5
 8016b36:	60a3      	str	r3, [r4, #8]
 8016b38:	60e3      	str	r3, [r4, #12]
 8016b3a:	bd38      	pop	{r3, r4, r5, pc}
 8016b3c:	4605      	mov	r5, r0
 8016b3e:	4628      	mov	r0, r5
 8016b40:	bd38      	pop	{r3, r4, r5, pc}
 8016b42:	4620      	mov	r0, r4
 8016b44:	f000 f91a 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016b48:	4628      	mov	r0, r5
 8016b4a:	bd38      	pop	{r3, r4, r5, pc}

08016b4c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>:
 8016b4c:	b108      	cbz	r0, 8016b52 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini+0x6>
 8016b4e:	f000 b915 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016b52:	4770      	bx	lr

08016b54 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>:
 8016b54:	b538      	push	{r3, r4, r5, lr}
 8016b56:	4604      	mov	r4, r0
 8016b58:	b148      	cbz	r0, 8016b6e <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x1a>
 8016b5a:	f000 f90b 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016b5e:	4605      	mov	r5, r0
 8016b60:	b140      	cbz	r0, 8016b74 <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x20>
 8016b62:	2300      	movs	r3, #0
 8016b64:	4628      	mov	r0, r5
 8016b66:	60a3      	str	r3, [r4, #8]
 8016b68:	60e3      	str	r3, [r4, #12]
 8016b6a:	6123      	str	r3, [r4, #16]
 8016b6c:	bd38      	pop	{r3, r4, r5, pc}
 8016b6e:	4605      	mov	r5, r0
 8016b70:	4628      	mov	r0, r5
 8016b72:	bd38      	pop	{r3, r4, r5, pc}
 8016b74:	4620      	mov	r0, r4
 8016b76:	f000 f901 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016b7a:	4628      	mov	r0, r5
 8016b7c:	bd38      	pop	{r3, r4, r5, pc}
 8016b7e:	bf00      	nop

08016b80 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>:
 8016b80:	b108      	cbz	r0, 8016b86 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini+0x6>
 8016b82:	f000 b8fb 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016b86:	4770      	bx	lr

08016b88 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8016b88:	b538      	push	{r3, r4, r5, lr}
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	b128      	cbz	r0, 8016b9a <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8016b8e:	f000 f8f1 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016b92:	4605      	mov	r5, r0
 8016b94:	b120      	cbz	r0, 8016ba0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8016b96:	4628      	mov	r0, r5
 8016b98:	bd38      	pop	{r3, r4, r5, pc}
 8016b9a:	4605      	mov	r5, r0
 8016b9c:	4628      	mov	r0, r5
 8016b9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f000 f8eb 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016ba6:	4628      	mov	r0, r5
 8016ba8:	bd38      	pop	{r3, r4, r5, pc}
 8016baa:	bf00      	nop

08016bac <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8016bac:	b108      	cbz	r0, 8016bb2 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8016bae:	f000 b8e5 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016bb2:	4770      	bx	lr

08016bb4 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8016bb4:	3800      	subs	r0, #0
 8016bb6:	bf18      	it	ne
 8016bb8:	2001      	movne	r0, #1
 8016bba:	4770      	bx	lr

08016bbc <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8016bbc:	4770      	bx	lr
 8016bbe:	bf00      	nop

08016bc0 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>:
 8016bc0:	b538      	push	{r3, r4, r5, lr}
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	b138      	cbz	r0, 8016bd6 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x16>
 8016bc6:	f000 f8d5 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016bca:	4605      	mov	r5, r0
 8016bcc:	b130      	cbz	r0, 8016bdc <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x1c>
 8016bce:	2300      	movs	r3, #0
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	7223      	strb	r3, [r4, #8]
 8016bd4:	bd38      	pop	{r3, r4, r5, pc}
 8016bd6:	4605      	mov	r5, r0
 8016bd8:	4628      	mov	r0, r5
 8016bda:	bd38      	pop	{r3, r4, r5, pc}
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f000 f8cd 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016be2:	4628      	mov	r0, r5
 8016be4:	bd38      	pop	{r3, r4, r5, pc}
 8016be6:	bf00      	nop

08016be8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>:
 8016be8:	b108      	cbz	r0, 8016bee <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8016bea:	f000 b8c7 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016bee:	4770      	bx	lr

08016bf0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>:
 8016bf0:	b538      	push	{r3, r4, r5, lr}
 8016bf2:	4604      	mov	r4, r0
 8016bf4:	b138      	cbz	r0, 8016c06 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x16>
 8016bf6:	f000 f8bd 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016bfa:	4605      	mov	r5, r0
 8016bfc:	b130      	cbz	r0, 8016c0c <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x1c>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	4628      	mov	r0, r5
 8016c02:	7223      	strb	r3, [r4, #8]
 8016c04:	bd38      	pop	{r3, r4, r5, pc}
 8016c06:	4605      	mov	r5, r0
 8016c08:	4628      	mov	r0, r5
 8016c0a:	bd38      	pop	{r3, r4, r5, pc}
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	f000 f8b5 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016c12:	4628      	mov	r0, r5
 8016c14:	bd38      	pop	{r3, r4, r5, pc}
 8016c16:	bf00      	nop

08016c18 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>:
 8016c18:	b108      	cbz	r0, 8016c1e <autoware_auto_vehicle_msgs__msg__GearCommand__fini+0x6>
 8016c1a:	f000 b8af 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016c1e:	4770      	bx	lr

08016c20 <autoware_auto_vehicle_msgs__msg__GearReport__init>:
 8016c20:	b538      	push	{r3, r4, r5, lr}
 8016c22:	4604      	mov	r4, r0
 8016c24:	b138      	cbz	r0, 8016c36 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x16>
 8016c26:	f000 f8a5 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016c2a:	4605      	mov	r5, r0
 8016c2c:	b130      	cbz	r0, 8016c3c <autoware_auto_vehicle_msgs__msg__GearReport__init+0x1c>
 8016c2e:	2300      	movs	r3, #0
 8016c30:	4628      	mov	r0, r5
 8016c32:	7223      	strb	r3, [r4, #8]
 8016c34:	bd38      	pop	{r3, r4, r5, pc}
 8016c36:	4605      	mov	r5, r0
 8016c38:	4628      	mov	r0, r5
 8016c3a:	bd38      	pop	{r3, r4, r5, pc}
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	f000 f89d 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016c42:	4628      	mov	r0, r5
 8016c44:	bd38      	pop	{r3, r4, r5, pc}
 8016c46:	bf00      	nop

08016c48 <autoware_auto_vehicle_msgs__msg__GearReport__fini>:
 8016c48:	b108      	cbz	r0, 8016c4e <autoware_auto_vehicle_msgs__msg__GearReport__fini+0x6>
 8016c4a:	f000 b897 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016c4e:	4770      	bx	lr

08016c50 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>:
 8016c50:	b538      	push	{r3, r4, r5, lr}
 8016c52:	4604      	mov	r4, r0
 8016c54:	b138      	cbz	r0, 8016c66 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x16>
 8016c56:	f000 f88d 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	b130      	cbz	r0, 8016c6c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x1c>
 8016c5e:	2300      	movs	r3, #0
 8016c60:	4628      	mov	r0, r5
 8016c62:	7223      	strb	r3, [r4, #8]
 8016c64:	bd38      	pop	{r3, r4, r5, pc}
 8016c66:	4605      	mov	r5, r0
 8016c68:	4628      	mov	r0, r5
 8016c6a:	bd38      	pop	{r3, r4, r5, pc}
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f000 f885 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016c72:	4628      	mov	r0, r5
 8016c74:	bd38      	pop	{r3, r4, r5, pc}
 8016c76:	bf00      	nop

08016c78 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8016c78:	b108      	cbz	r0, 8016c7e <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8016c7a:	f000 b87f 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016c7e:	4770      	bx	lr

08016c80 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>:
 8016c80:	b538      	push	{r3, r4, r5, lr}
 8016c82:	4604      	mov	r4, r0
 8016c84:	b138      	cbz	r0, 8016c96 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x16>
 8016c86:	f000 f875 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016c8a:	4605      	mov	r5, r0
 8016c8c:	b130      	cbz	r0, 8016c9c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x1c>
 8016c8e:	2300      	movs	r3, #0
 8016c90:	4628      	mov	r0, r5
 8016c92:	7223      	strb	r3, [r4, #8]
 8016c94:	bd38      	pop	{r3, r4, r5, pc}
 8016c96:	4605      	mov	r5, r0
 8016c98:	4628      	mov	r0, r5
 8016c9a:	bd38      	pop	{r3, r4, r5, pc}
 8016c9c:	4620      	mov	r0, r4
 8016c9e:	f000 f86d 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	bd38      	pop	{r3, r4, r5, pc}
 8016ca6:	bf00      	nop

08016ca8 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>:
 8016ca8:	b108      	cbz	r0, 8016cae <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8016caa:	f000 b867 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016cae:	4770      	bx	lr

08016cb0 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>:
 8016cb0:	b538      	push	{r3, r4, r5, lr}
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	b138      	cbz	r0, 8016cc6 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x16>
 8016cb6:	f000 f85d 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016cba:	4605      	mov	r5, r0
 8016cbc:	b130      	cbz	r0, 8016ccc <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x1c>
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	60a3      	str	r3, [r4, #8]
 8016cc4:	bd38      	pop	{r3, r4, r5, pc}
 8016cc6:	4605      	mov	r5, r0
 8016cc8:	4628      	mov	r0, r5
 8016cca:	bd38      	pop	{r3, r4, r5, pc}
 8016ccc:	4620      	mov	r0, r4
 8016cce:	f000 f855 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	bd38      	pop	{r3, r4, r5, pc}
 8016cd6:	bf00      	nop

08016cd8 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>:
 8016cd8:	b108      	cbz	r0, 8016cde <autoware_auto_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8016cda:	f000 b84f 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016cde:	4770      	bx	lr

08016ce0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	b138      	cbz	r0, 8016cf6 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x16>
 8016ce6:	f000 f845 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016cea:	4605      	mov	r5, r0
 8016cec:	b130      	cbz	r0, 8016cfc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x1c>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	7223      	strb	r3, [r4, #8]
 8016cf4:	bd38      	pop	{r3, r4, r5, pc}
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	bd38      	pop	{r3, r4, r5, pc}
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f000 f83d 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016d02:	4628      	mov	r0, r5
 8016d04:	bd38      	pop	{r3, r4, r5, pc}
 8016d06:	bf00      	nop

08016d08 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8016d08:	b108      	cbz	r0, 8016d0e <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8016d0a:	f000 b837 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016d0e:	4770      	bx	lr

08016d10 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8016d10:	b538      	push	{r3, r4, r5, lr}
 8016d12:	4604      	mov	r4, r0
 8016d14:	b138      	cbz	r0, 8016d26 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x16>
 8016d16:	f000 f82d 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 8016d1a:	4605      	mov	r5, r0
 8016d1c:	b130      	cbz	r0, 8016d2c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x1c>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	4628      	mov	r0, r5
 8016d22:	7223      	strb	r3, [r4, #8]
 8016d24:	bd38      	pop	{r3, r4, r5, pc}
 8016d26:	4605      	mov	r5, r0
 8016d28:	4628      	mov	r0, r5
 8016d2a:	bd38      	pop	{r3, r4, r5, pc}
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	f000 f825 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 8016d32:	4628      	mov	r0, r5
 8016d34:	bd38      	pop	{r3, r4, r5, pc}
 8016d36:	bf00      	nop

08016d38 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8016d38:	b108      	cbz	r0, 8016d3e <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8016d3a:	f000 b81f 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 8016d3e:	4770      	bx	lr

08016d40 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>:
 8016d40:	b538      	push	{r3, r4, r5, lr}
 8016d42:	4604      	mov	r4, r0
 8016d44:	b148      	cbz	r0, 8016d5a <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x1a>
 8016d46:	f008 ff07 	bl	801fb58 <std_msgs__msg__Header__init>
 8016d4a:	4605      	mov	r5, r0
 8016d4c:	b140      	cbz	r0, 8016d60 <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x20>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	4628      	mov	r0, r5
 8016d52:	6163      	str	r3, [r4, #20]
 8016d54:	61a3      	str	r3, [r4, #24]
 8016d56:	61e3      	str	r3, [r4, #28]
 8016d58:	bd38      	pop	{r3, r4, r5, pc}
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	bd38      	pop	{r3, r4, r5, pc}
 8016d60:	4620      	mov	r0, r4
 8016d62:	f008 ff1d 	bl	801fba0 <std_msgs__msg__Header__fini>
 8016d66:	4628      	mov	r0, r5
 8016d68:	bd38      	pop	{r3, r4, r5, pc}
 8016d6a:	bf00      	nop

08016d6c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>:
 8016d6c:	b108      	cbz	r0, 8016d72 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8016d6e:	f008 bf17 	b.w	801fba0 <std_msgs__msg__Header__fini>
 8016d72:	4770      	bx	lr

08016d74 <builtin_interfaces__msg__Time__init>:
 8016d74:	3800      	subs	r0, #0
 8016d76:	bf18      	it	ne
 8016d78:	2001      	movne	r0, #1
 8016d7a:	4770      	bx	lr

08016d7c <builtin_interfaces__msg__Time__fini>:
 8016d7c:	4770      	bx	lr
 8016d7e:	bf00      	nop

08016d80 <ucdr_serialize_sequence_char>:
 8016d80:	b570      	push	{r4, r5, r6, lr}
 8016d82:	4615      	mov	r5, r2
 8016d84:	460e      	mov	r6, r1
 8016d86:	7d01      	ldrb	r1, [r0, #20]
 8016d88:	4604      	mov	r4, r0
 8016d8a:	f7fc fa59 	bl	8013240 <ucdr_serialize_endian_uint32_t>
 8016d8e:	b90d      	cbnz	r5, 8016d94 <ucdr_serialize_sequence_char+0x14>
 8016d90:	2001      	movs	r0, #1
 8016d92:	bd70      	pop	{r4, r5, r6, pc}
 8016d94:	462b      	mov	r3, r5
 8016d96:	4632      	mov	r2, r6
 8016d98:	7d21      	ldrb	r1, [r4, #20]
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016da0:	f009 b8d2 	b.w	801ff48 <ucdr_serialize_endian_array_char>

08016da4 <ucdr_deserialize_sequence_char>:
 8016da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016da8:	461d      	mov	r5, r3
 8016daa:	4616      	mov	r6, r2
 8016dac:	460f      	mov	r7, r1
 8016dae:	461a      	mov	r2, r3
 8016db0:	7d01      	ldrb	r1, [r0, #20]
 8016db2:	4604      	mov	r4, r0
 8016db4:	f7fc fb6c 	bl	8013490 <ucdr_deserialize_endian_uint32_t>
 8016db8:	682b      	ldr	r3, [r5, #0]
 8016dba:	429e      	cmp	r6, r3
 8016dbc:	d201      	bcs.n	8016dc2 <ucdr_deserialize_sequence_char+0x1e>
 8016dbe:	2201      	movs	r2, #1
 8016dc0:	75a2      	strb	r2, [r4, #22]
 8016dc2:	b913      	cbnz	r3, 8016dca <ucdr_deserialize_sequence_char+0x26>
 8016dc4:	2001      	movs	r0, #1
 8016dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dca:	463a      	mov	r2, r7
 8016dcc:	7d21      	ldrb	r1, [r4, #20]
 8016dce:	4620      	mov	r0, r4
 8016dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd4:	f009 b8ea 	b.w	801ffac <ucdr_deserialize_endian_array_char>

08016dd8 <ucdr_serialize_sequence_uint8_t>:
 8016dd8:	b570      	push	{r4, r5, r6, lr}
 8016dda:	4615      	mov	r5, r2
 8016ddc:	460e      	mov	r6, r1
 8016dde:	7d01      	ldrb	r1, [r0, #20]
 8016de0:	4604      	mov	r4, r0
 8016de2:	f7fc fa2d 	bl	8013240 <ucdr_serialize_endian_uint32_t>
 8016de6:	b90d      	cbnz	r5, 8016dec <ucdr_serialize_sequence_uint8_t+0x14>
 8016de8:	2001      	movs	r0, #1
 8016dea:	bd70      	pop	{r4, r5, r6, pc}
 8016dec:	462b      	mov	r3, r5
 8016dee:	4632      	mov	r2, r6
 8016df0:	7d21      	ldrb	r1, [r4, #20]
 8016df2:	4620      	mov	r0, r4
 8016df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016df8:	f009 b93e 	b.w	8020078 <ucdr_serialize_endian_array_uint8_t>

08016dfc <ucdr_deserialize_sequence_uint8_t>:
 8016dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e00:	461d      	mov	r5, r3
 8016e02:	4616      	mov	r6, r2
 8016e04:	460f      	mov	r7, r1
 8016e06:	461a      	mov	r2, r3
 8016e08:	7d01      	ldrb	r1, [r0, #20]
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	f7fc fb40 	bl	8013490 <ucdr_deserialize_endian_uint32_t>
 8016e10:	682b      	ldr	r3, [r5, #0]
 8016e12:	429e      	cmp	r6, r3
 8016e14:	d201      	bcs.n	8016e1a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8016e16:	2201      	movs	r2, #1
 8016e18:	75a2      	strb	r2, [r4, #22]
 8016e1a:	b913      	cbnz	r3, 8016e22 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016e1c:	2001      	movs	r0, #1
 8016e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e22:	463a      	mov	r2, r7
 8016e24:	7d21      	ldrb	r1, [r4, #20]
 8016e26:	4620      	mov	r0, r4
 8016e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e2c:	f009 b98a 	b.w	8020144 <ucdr_deserialize_endian_array_uint8_t>

08016e30 <uxr_buffer_delete_entity>:
 8016e30:	b510      	push	{r4, lr}
 8016e32:	2300      	movs	r3, #0
 8016e34:	b08e      	sub	sp, #56	@ 0x38
 8016e36:	4604      	mov	r4, r0
 8016e38:	9103      	str	r1, [sp, #12]
 8016e3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016e3e:	2303      	movs	r3, #3
 8016e40:	2204      	movs	r2, #4
 8016e42:	9300      	str	r3, [sp, #0]
 8016e44:	ab06      	add	r3, sp, #24
 8016e46:	f001 fbcb 	bl	80185e0 <uxr_prepare_stream_to_write_submessage>
 8016e4a:	b918      	cbnz	r0, 8016e54 <uxr_buffer_delete_entity+0x24>
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	4620      	mov	r0, r4
 8016e50:	b00e      	add	sp, #56	@ 0x38
 8016e52:	bd10      	pop	{r4, pc}
 8016e54:	9902      	ldr	r1, [sp, #8]
 8016e56:	aa05      	add	r2, sp, #20
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f001 fcfd 	bl	8018858 <uxr_init_base_object_request>
 8016e5e:	4604      	mov	r4, r0
 8016e60:	a905      	add	r1, sp, #20
 8016e62:	a806      	add	r0, sp, #24
 8016e64:	f003 fc18 	bl	801a698 <uxr_serialize_DELETE_Payload>
 8016e68:	4620      	mov	r0, r4
 8016e6a:	b00e      	add	sp, #56	@ 0x38
 8016e6c:	bd10      	pop	{r4, pc}
 8016e6e:	bf00      	nop

08016e70 <uxr_common_create_entity>:
 8016e70:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016e74:	b510      	push	{r4, lr}
 8016e76:	f1bc 0f01 	cmp.w	ip, #1
 8016e7a:	b08c      	sub	sp, #48	@ 0x30
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	9202      	str	r2, [sp, #8]
 8016e80:	bf0c      	ite	eq
 8016e82:	f003 0201 	andeq.w	r2, r3, #1
 8016e86:	2200      	movne	r2, #0
 8016e88:	330e      	adds	r3, #14
 8016e8a:	9103      	str	r1, [sp, #12]
 8016e8c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8016e90:	441a      	add	r2, r3
 8016e92:	ab04      	add	r3, sp, #16
 8016e94:	9101      	str	r1, [sp, #4]
 8016e96:	2101      	movs	r1, #1
 8016e98:	b292      	uxth	r2, r2
 8016e9a:	9100      	str	r1, [sp, #0]
 8016e9c:	9903      	ldr	r1, [sp, #12]
 8016e9e:	f001 fb9f 	bl	80185e0 <uxr_prepare_stream_to_write_submessage>
 8016ea2:	b918      	cbnz	r0, 8016eac <uxr_common_create_entity+0x3c>
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	b00c      	add	sp, #48	@ 0x30
 8016eaa:	bd10      	pop	{r4, pc}
 8016eac:	9902      	ldr	r1, [sp, #8]
 8016eae:	4620      	mov	r0, r4
 8016eb0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016eb2:	f001 fcd1 	bl	8018858 <uxr_init_base_object_request>
 8016eb6:	4604      	mov	r4, r0
 8016eb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016eba:	a804      	add	r0, sp, #16
 8016ebc:	f003 fb30 	bl	801a520 <uxr_serialize_CREATE_Payload>
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	b00c      	add	sp, #48	@ 0x30
 8016ec4:	bd10      	pop	{r4, pc}
 8016ec6:	bf00      	nop

08016ec8 <uxr_buffer_create_participant_bin>:
 8016ec8:	b570      	push	{r4, r5, r6, lr}
 8016eca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8016ece:	4605      	mov	r5, r0
 8016ed0:	ac11      	add	r4, sp, #68	@ 0x44
 8016ed2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8016ed6:	2303      	movs	r3, #3
 8016ed8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8016edc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016ee0:	7223      	strb	r3, [r4, #8]
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	2201      	movs	r2, #1
 8016ee6:	f88d 3014 	strb.w	r3, [sp, #20]
 8016eea:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8016eec:	7122      	strb	r2, [r4, #4]
 8016eee:	b1cb      	cbz	r3, 8016f24 <uxr_buffer_create_participant_bin+0x5c>
 8016ef0:	f88d 201c 	strb.w	r2, [sp, #28]
 8016ef4:	9308      	str	r3, [sp, #32]
 8016ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016efa:	a915      	add	r1, sp, #84	@ 0x54
 8016efc:	a809      	add	r0, sp, #36	@ 0x24
 8016efe:	f7fd f95b 	bl	80141b8 <ucdr_init_buffer>
 8016f02:	a905      	add	r1, sp, #20
 8016f04:	a809      	add	r0, sp, #36	@ 0x24
 8016f06:	f002 fec1 	bl	8019c8c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8016f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016f0c:	9600      	str	r6, [sp, #0]
 8016f0e:	4628      	mov	r0, r5
 8016f10:	9401      	str	r4, [sp, #4]
 8016f12:	60e3      	str	r3, [r4, #12]
 8016f14:	b29b      	uxth	r3, r3
 8016f16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016f1a:	f7ff ffa9 	bl	8016e70 <uxr_common_create_entity>
 8016f1e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8016f22:	bd70      	pop	{r4, r5, r6, pc}
 8016f24:	f88d 301c 	strb.w	r3, [sp, #28]
 8016f28:	e7e5      	b.n	8016ef6 <uxr_buffer_create_participant_bin+0x2e>
 8016f2a:	bf00      	nop

08016f2c <uxr_buffer_create_topic_bin>:
 8016f2c:	b570      	push	{r4, r5, r6, lr}
 8016f2e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8016f32:	4605      	mov	r5, r0
 8016f34:	4618      	mov	r0, r3
 8016f36:	9105      	str	r1, [sp, #20]
 8016f38:	a997      	add	r1, sp, #604	@ 0x25c
 8016f3a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8016f3e:	ac13      	add	r4, sp, #76	@ 0x4c
 8016f40:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016f44:	2302      	movs	r3, #2
 8016f46:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8016f4a:	f000 fa8d 	bl	8017468 <uxr_object_id_to_raw>
 8016f4e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8016f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f54:	a917      	add	r1, sp, #92	@ 0x5c
 8016f56:	a80b      	add	r0, sp, #44	@ 0x2c
 8016f58:	9306      	str	r3, [sp, #24]
 8016f5a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8016f5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f5e:	2303      	movs	r3, #3
 8016f60:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8016f64:	2301      	movs	r3, #1
 8016f66:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016f70:	f7fd f922 	bl	80141b8 <ucdr_init_buffer>
 8016f74:	a906      	add	r1, sp, #24
 8016f76:	a80b      	add	r0, sp, #44	@ 0x2c
 8016f78:	f002 feaa 	bl	8019cd0 <uxr_serialize_OBJK_Topic_Binary>
 8016f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f7e:	4628      	mov	r0, r5
 8016f80:	9600      	str	r6, [sp, #0]
 8016f82:	9316      	str	r3, [sp, #88]	@ 0x58
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	9401      	str	r4, [sp, #4]
 8016f88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016f8c:	f7ff ff70 	bl	8016e70 <uxr_common_create_entity>
 8016f90:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8016f94:	bd70      	pop	{r4, r5, r6, pc}
 8016f96:	bf00      	nop

08016f98 <uxr_buffer_create_publisher_bin>:
 8016f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f9a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8016f9e:	2603      	movs	r6, #3
 8016fa0:	4605      	mov	r5, r0
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	9105      	str	r1, [sp, #20]
 8016fa6:	a992      	add	r1, sp, #584	@ 0x248
 8016fa8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8016fac:	ac0e      	add	r4, sp, #56	@ 0x38
 8016fae:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8016fb2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016fb6:	f000 fa57 	bl	8017468 <uxr_object_id_to_raw>
 8016fba:	2300      	movs	r3, #0
 8016fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016fc0:	a912      	add	r1, sp, #72	@ 0x48
 8016fc2:	a806      	add	r0, sp, #24
 8016fc4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016fc8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016fcc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8016fd0:	f7fd f8f2 	bl	80141b8 <ucdr_init_buffer>
 8016fd4:	a993      	add	r1, sp, #588	@ 0x24c
 8016fd6:	a806      	add	r0, sp, #24
 8016fd8:	f002 ff2e 	bl	8019e38 <uxr_serialize_OBJK_Publisher_Binary>
 8016fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fde:	4628      	mov	r0, r5
 8016fe0:	9700      	str	r7, [sp, #0]
 8016fe2:	9311      	str	r3, [sp, #68]	@ 0x44
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	9401      	str	r4, [sp, #4]
 8016fe8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016fec:	f7ff ff40 	bl	8016e70 <uxr_common_create_entity>
 8016ff0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8016ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ff6:	bf00      	nop

08016ff8 <uxr_buffer_create_subscriber_bin>:
 8016ff8:	b570      	push	{r4, r5, r6, lr}
 8016ffa:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8016ffe:	4605      	mov	r5, r0
 8017000:	4618      	mov	r0, r3
 8017002:	9105      	str	r1, [sp, #20]
 8017004:	a992      	add	r1, sp, #584	@ 0x248
 8017006:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801700a:	ac0e      	add	r4, sp, #56	@ 0x38
 801700c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017010:	2304      	movs	r3, #4
 8017012:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8017016:	f000 fa27 	bl	8017468 <uxr_object_id_to_raw>
 801701a:	2300      	movs	r3, #0
 801701c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017020:	a912      	add	r1, sp, #72	@ 0x48
 8017022:	a806      	add	r0, sp, #24
 8017024:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8017028:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801702c:	2303      	movs	r3, #3
 801702e:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017032:	f7fd f8c1 	bl	80141b8 <ucdr_init_buffer>
 8017036:	a993      	add	r1, sp, #588	@ 0x24c
 8017038:	a806      	add	r0, sp, #24
 801703a:	f002 ffad 	bl	8019f98 <uxr_serialize_OBJK_Subscriber_Binary>
 801703e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017040:	4628      	mov	r0, r5
 8017042:	9600      	str	r6, [sp, #0]
 8017044:	9311      	str	r3, [sp, #68]	@ 0x44
 8017046:	b29b      	uxth	r3, r3
 8017048:	9401      	str	r4, [sp, #4]
 801704a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801704e:	f7ff ff0f 	bl	8016e70 <uxr_common_create_entity>
 8017052:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8017056:	bd70      	pop	{r4, r5, r6, pc}

08017058 <uxr_buffer_create_datawriter_bin>:
 8017058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801705c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017060:	4606      	mov	r6, r0
 8017062:	4618      	mov	r0, r3
 8017064:	2703      	movs	r7, #3
 8017066:	ac1d      	add	r4, sp, #116	@ 0x74
 8017068:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801706c:	9105      	str	r1, [sp, #20]
 801706e:	a9a1      	add	r1, sp, #644	@ 0x284
 8017070:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8017074:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017078:	2305      	movs	r3, #5
 801707a:	7123      	strb	r3, [r4, #4]
 801707c:	f000 f9f4 	bl	8017468 <uxr_object_id_to_raw>
 8017080:	a90e      	add	r1, sp, #56	@ 0x38
 8017082:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8017084:	7227      	strb	r7, [r4, #8]
 8017086:	f000 f9ef 	bl	8017468 <uxr_object_id_to_raw>
 801708a:	2300      	movs	r3, #0
 801708c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017090:	3d00      	subs	r5, #0
 8017092:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8017096:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801709a:	bf18      	it	ne
 801709c:	2501      	movne	r5, #1
 801709e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80170a2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80170a6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80170aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80170ae:	2301      	movs	r3, #1
 80170b0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80170b4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80170b8:	bb8a      	cbnz	r2, 801711e <uxr_buffer_create_datawriter_bin+0xc6>
 80170ba:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80170be:	f04f 0c13 	mov.w	ip, #19
 80170c2:	250b      	movs	r5, #11
 80170c4:	2221      	movs	r2, #33	@ 0x21
 80170c6:	2111      	movs	r1, #17
 80170c8:	2009      	movs	r0, #9
 80170ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80170ce:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80170d2:	b923      	cbnz	r3, 80170de <uxr_buffer_create_datawriter_bin+0x86>
 80170d4:	4672      	mov	r2, lr
 80170d6:	4661      	mov	r1, ip
 80170d8:	4628      	mov	r0, r5
 80170da:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80170de:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d025      	beq.n	8017132 <uxr_buffer_create_datawriter_bin+0xda>
 80170e6:	2b03      	cmp	r3, #3
 80170e8:	d029      	beq.n	801713e <uxr_buffer_create_datawriter_bin+0xe6>
 80170ea:	b32b      	cbz	r3, 8017138 <uxr_buffer_create_datawriter_bin+0xe0>
 80170ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170f0:	a921      	add	r1, sp, #132	@ 0x84
 80170f2:	a806      	add	r0, sp, #24
 80170f4:	f7fd f860 	bl	80141b8 <ucdr_init_buffer>
 80170f8:	a90e      	add	r1, sp, #56	@ 0x38
 80170fa:	a806      	add	r0, sp, #24
 80170fc:	f002 fffe 	bl	801a0fc <uxr_serialize_OBJK_DataWriter_Binary>
 8017100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017102:	f8cd 8000 	str.w	r8, [sp]
 8017106:	4630      	mov	r0, r6
 8017108:	9401      	str	r4, [sp, #4]
 801710a:	60e3      	str	r3, [r4, #12]
 801710c:	b29b      	uxth	r3, r3
 801710e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017112:	f7ff fead 	bl	8016e70 <uxr_common_create_entity>
 8017116:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801711a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801711e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017122:	f04f 0c12 	mov.w	ip, #18
 8017126:	250a      	movs	r5, #10
 8017128:	2220      	movs	r2, #32
 801712a:	2110      	movs	r1, #16
 801712c:	2008      	movs	r0, #8
 801712e:	2702      	movs	r7, #2
 8017130:	e7cd      	b.n	80170ce <uxr_buffer_create_datawriter_bin+0x76>
 8017132:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017136:	e7d9      	b.n	80170ec <uxr_buffer_create_datawriter_bin+0x94>
 8017138:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801713c:	e7d6      	b.n	80170ec <uxr_buffer_create_datawriter_bin+0x94>
 801713e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017142:	e7d3      	b.n	80170ec <uxr_buffer_create_datawriter_bin+0x94>

08017144 <uxr_buffer_create_datareader_bin>:
 8017144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017148:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801714c:	4606      	mov	r6, r0
 801714e:	4618      	mov	r0, r3
 8017150:	2703      	movs	r7, #3
 8017152:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017154:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8017158:	9105      	str	r1, [sp, #20]
 801715a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801715c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017160:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017164:	2306      	movs	r3, #6
 8017166:	7123      	strb	r3, [r4, #4]
 8017168:	f000 f97e 	bl	8017468 <uxr_object_id_to_raw>
 801716c:	a90e      	add	r1, sp, #56	@ 0x38
 801716e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8017170:	7227      	strb	r7, [r4, #8]
 8017172:	f000 f979 	bl	8017468 <uxr_object_id_to_raw>
 8017176:	2300      	movs	r3, #0
 8017178:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801717c:	3d00      	subs	r5, #0
 801717e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8017182:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8017186:	bf18      	it	ne
 8017188:	2501      	movne	r5, #1
 801718a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801718e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017192:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017196:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801719a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801719e:	2301      	movs	r3, #1
 80171a0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80171a4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80171a8:	bb8a      	cbnz	r2, 801720e <uxr_buffer_create_datareader_bin+0xca>
 80171aa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80171ae:	f04f 0c13 	mov.w	ip, #19
 80171b2:	250b      	movs	r5, #11
 80171b4:	2221      	movs	r2, #33	@ 0x21
 80171b6:	2111      	movs	r1, #17
 80171b8:	2009      	movs	r0, #9
 80171ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80171be:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80171c2:	b923      	cbnz	r3, 80171ce <uxr_buffer_create_datareader_bin+0x8a>
 80171c4:	4672      	mov	r2, lr
 80171c6:	4661      	mov	r1, ip
 80171c8:	4628      	mov	r0, r5
 80171ca:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80171ce:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80171d2:	2b01      	cmp	r3, #1
 80171d4:	d025      	beq.n	8017222 <uxr_buffer_create_datareader_bin+0xde>
 80171d6:	2b03      	cmp	r3, #3
 80171d8:	d029      	beq.n	801722e <uxr_buffer_create_datareader_bin+0xea>
 80171da:	b32b      	cbz	r3, 8017228 <uxr_buffer_create_datareader_bin+0xe4>
 80171dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80171e0:	a923      	add	r1, sp, #140	@ 0x8c
 80171e2:	a806      	add	r0, sp, #24
 80171e4:	f7fc ffe8 	bl	80141b8 <ucdr_init_buffer>
 80171e8:	a90e      	add	r1, sp, #56	@ 0x38
 80171ea:	a806      	add	r0, sp, #24
 80171ec:	f002 ff4a 	bl	801a084 <uxr_serialize_OBJK_DataReader_Binary>
 80171f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171f2:	f8cd 8000 	str.w	r8, [sp]
 80171f6:	4630      	mov	r0, r6
 80171f8:	9401      	str	r4, [sp, #4]
 80171fa:	60e3      	str	r3, [r4, #12]
 80171fc:	b29b      	uxth	r3, r3
 80171fe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017202:	f7ff fe35 	bl	8016e70 <uxr_common_create_entity>
 8017206:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801720a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801720e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017212:	f04f 0c12 	mov.w	ip, #18
 8017216:	250a      	movs	r5, #10
 8017218:	2220      	movs	r2, #32
 801721a:	2110      	movs	r1, #16
 801721c:	2008      	movs	r0, #8
 801721e:	2702      	movs	r7, #2
 8017220:	e7cd      	b.n	80171be <uxr_buffer_create_datareader_bin+0x7a>
 8017222:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017226:	e7d9      	b.n	80171dc <uxr_buffer_create_datareader_bin+0x98>
 8017228:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801722c:	e7d6      	b.n	80171dc <uxr_buffer_create_datareader_bin+0x98>
 801722e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017232:	e7d3      	b.n	80171dc <uxr_buffer_create_datareader_bin+0x98>

08017234 <uxr_buffer_create_replier_bin>:
 8017234:	b570      	push	{r4, r5, r6, lr}
 8017236:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801723a:	4605      	mov	r5, r0
 801723c:	4618      	mov	r0, r3
 801723e:	9105      	str	r1, [sp, #20]
 8017240:	a999      	add	r1, sp, #612	@ 0x264
 8017242:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8017246:	ac15      	add	r4, sp, #84	@ 0x54
 8017248:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801724c:	2308      	movs	r3, #8
 801724e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017252:	f000 f909 	bl	8017468 <uxr_object_id_to_raw>
 8017256:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8017258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801725c:	a919      	add	r1, sp, #100	@ 0x64
 801725e:	a80d      	add	r0, sp, #52	@ 0x34
 8017260:	9306      	str	r3, [sp, #24]
 8017262:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017264:	9307      	str	r3, [sp, #28]
 8017266:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8017268:	9308      	str	r3, [sp, #32]
 801726a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801726c:	930c      	str	r3, [sp, #48]	@ 0x30
 801726e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017270:	930a      	str	r3, [sp, #40]	@ 0x28
 8017272:	2301      	movs	r3, #1
 8017274:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017278:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801727c:	2303      	movs	r3, #3
 801727e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8017282:	f7fc ff99 	bl	80141b8 <ucdr_init_buffer>
 8017286:	a906      	add	r1, sp, #24
 8017288:	a80d      	add	r0, sp, #52	@ 0x34
 801728a:	f002 ff63 	bl	801a154 <uxr_serialize_OBJK_Replier_Binary>
 801728e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017290:	4628      	mov	r0, r5
 8017292:	9600      	str	r6, [sp, #0]
 8017294:	9318      	str	r3, [sp, #96]	@ 0x60
 8017296:	b29b      	uxth	r3, r3
 8017298:	9401      	str	r4, [sp, #4]
 801729a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801729e:	f7ff fde7 	bl	8016e70 <uxr_common_create_entity>
 80172a2:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 80172a6:	bd70      	pop	{r4, r5, r6, pc}

080172a8 <get_custom_error>:
 80172a8:	4b01      	ldr	r3, [pc, #4]	@ (80172b0 <get_custom_error+0x8>)
 80172aa:	7818      	ldrb	r0, [r3, #0]
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	24069274 	.word	0x24069274

080172b4 <recv_custom_msg>:
 80172b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b8:	4693      	mov	fp, r2
 80172ba:	b089      	sub	sp, #36	@ 0x24
 80172bc:	2200      	movs	r2, #0
 80172be:	4604      	mov	r4, r0
 80172c0:	468a      	mov	sl, r1
 80172c2:	9305      	str	r3, [sp, #20]
 80172c4:	f88d 201e 	strb.w	r2, [sp, #30]
 80172c8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80172cc:	b322      	cbz	r2, 8017318 <recv_custom_msg+0x64>
 80172ce:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80172d2:	f10d 081f 	add.w	r8, sp, #31
 80172d6:	af05      	add	r7, sp, #20
 80172d8:	f10d 061e 	add.w	r6, sp, #30
 80172dc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80172e0:	e002      	b.n	80172e8 <recv_custom_msg+0x34>
 80172e2:	9b05      	ldr	r3, [sp, #20]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	dd0f      	ble.n	8017308 <recv_custom_msg+0x54>
 80172e8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80172ec:	4623      	mov	r3, r4
 80172ee:	4622      	mov	r2, r4
 80172f0:	4648      	mov	r0, r9
 80172f2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80172f6:	e9cd 5600 	strd	r5, r6, [sp]
 80172fa:	f001 fcc3 	bl	8018c84 <uxr_read_framed_msg>
 80172fe:	2800      	cmp	r0, #0
 8017300:	d0ef      	beq.n	80172e2 <recv_custom_msg+0x2e>
 8017302:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017306:	b1b3      	cbz	r3, 8017336 <recv_custom_msg+0x82>
 8017308:	4b0f      	ldr	r3, [pc, #60]	@ (8017348 <recv_custom_msg+0x94>)
 801730a:	2000      	movs	r0, #0
 801730c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017310:	701a      	strb	r2, [r3, #0]
 8017312:	b009      	add	sp, #36	@ 0x24
 8017314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017318:	f10d 021f 	add.w	r2, sp, #31
 801731c:	4601      	mov	r1, r0
 801731e:	9200      	str	r2, [sp, #0]
 8017320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017324:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8017328:	47a8      	blx	r5
 801732a:	2800      	cmp	r0, #0
 801732c:	d0ec      	beq.n	8017308 <recv_custom_msg+0x54>
 801732e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d1e8      	bne.n	8017308 <recv_custom_msg+0x54>
 8017336:	f8cb 0000 	str.w	r0, [fp]
 801733a:	2001      	movs	r0, #1
 801733c:	f8ca 4000 	str.w	r4, [sl]
 8017340:	b009      	add	sp, #36	@ 0x24
 8017342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017346:	bf00      	nop
 8017348:	24069274 	.word	0x24069274

0801734c <send_custom_msg>:
 801734c:	b530      	push	{r4, r5, lr}
 801734e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017352:	b087      	sub	sp, #28
 8017354:	4614      	mov	r4, r2
 8017356:	b995      	cbnz	r5, 801737e <send_custom_msg+0x32>
 8017358:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801735c:	f10d 0317 	add.w	r3, sp, #23
 8017360:	47a8      	blx	r5
 8017362:	1e03      	subs	r3, r0, #0
 8017364:	bf18      	it	ne
 8017366:	2301      	movne	r3, #1
 8017368:	42a0      	cmp	r0, r4
 801736a:	bf18      	it	ne
 801736c:	2300      	movne	r3, #0
 801736e:	b91b      	cbnz	r3, 8017378 <send_custom_msg+0x2c>
 8017370:	4a0a      	ldr	r2, [pc, #40]	@ (801739c <send_custom_msg+0x50>)
 8017372:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017376:	7011      	strb	r1, [r2, #0]
 8017378:	4618      	mov	r0, r3
 801737a:	b007      	add	sp, #28
 801737c:	bd30      	pop	{r4, r5, pc}
 801737e:	460b      	mov	r3, r1
 8017380:	2200      	movs	r2, #0
 8017382:	f10d 0117 	add.w	r1, sp, #23
 8017386:	9400      	str	r4, [sp, #0]
 8017388:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801738c:	4602      	mov	r2, r0
 801738e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017392:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017396:	f001 fa97 	bl	80188c8 <uxr_write_framed_msg>
 801739a:	e7e2      	b.n	8017362 <send_custom_msg+0x16>
 801739c:	24069274 	.word	0x24069274

080173a0 <uxr_set_custom_transport_callbacks>:
 80173a0:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80173a4:	9901      	ldr	r1, [sp, #4]
 80173a6:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80173aa:	9b00      	ldr	r3, [sp, #0]
 80173ac:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop

080173b4 <uxr_init_custom_transport>:
 80173b4:	b538      	push	{r3, r4, r5, lr}
 80173b6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80173ba:	b303      	cbz	r3, 80173fe <uxr_init_custom_transport+0x4a>
 80173bc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80173c0:	4604      	mov	r4, r0
 80173c2:	b1e2      	cbz	r2, 80173fe <uxr_init_custom_transport+0x4a>
 80173c4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80173c8:	b1ca      	cbz	r2, 80173fe <uxr_init_custom_transport+0x4a>
 80173ca:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80173ce:	b1b2      	cbz	r2, 80173fe <uxr_init_custom_transport+0x4a>
 80173d0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80173d4:	4798      	blx	r3
 80173d6:	4605      	mov	r5, r0
 80173d8:	b188      	cbz	r0, 80173fe <uxr_init_custom_transport+0x4a>
 80173da:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80173de:	b98b      	cbnz	r3, 8017404 <uxr_init_custom_transport+0x50>
 80173e0:	4b0b      	ldr	r3, [pc, #44]	@ (8017410 <uxr_init_custom_transport+0x5c>)
 80173e2:	4628      	mov	r0, r5
 80173e4:	490b      	ldr	r1, [pc, #44]	@ (8017414 <uxr_init_custom_transport+0x60>)
 80173e6:	4a0c      	ldr	r2, [pc, #48]	@ (8017418 <uxr_init_custom_transport+0x64>)
 80173e8:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80173ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80173f0:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80173f4:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80173f8:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80173fc:	bd38      	pop	{r3, r4, r5, pc}
 80173fe:	2500      	movs	r5, #0
 8017400:	4628      	mov	r0, r5
 8017402:	bd38      	pop	{r3, r4, r5, pc}
 8017404:	2100      	movs	r1, #0
 8017406:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801740a:	f001 fa57 	bl	80188bc <uxr_init_framing_io>
 801740e:	e7e7      	b.n	80173e0 <uxr_init_custom_transport+0x2c>
 8017410:	080172b5 	.word	0x080172b5
 8017414:	0801734d 	.word	0x0801734d
 8017418:	080172a9 	.word	0x080172a9

0801741c <uxr_close_custom_transport>:
 801741c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8017420:	4718      	bx	r3
 8017422:	bf00      	nop

08017424 <uxr_object_id>:
 8017424:	b082      	sub	sp, #8
 8017426:	2300      	movs	r3, #0
 8017428:	f88d 1006 	strb.w	r1, [sp, #6]
 801742c:	f360 030f 	bfi	r3, r0, #0, #16
 8017430:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017434:	f362 431f 	bfi	r3, r2, #16, #16
 8017438:	4618      	mov	r0, r3
 801743a:	b002      	add	sp, #8
 801743c:	4770      	bx	lr
 801743e:	bf00      	nop

08017440 <uxr_object_id_from_raw>:
 8017440:	7843      	ldrb	r3, [r0, #1]
 8017442:	b082      	sub	sp, #8
 8017444:	7801      	ldrb	r1, [r0, #0]
 8017446:	2000      	movs	r0, #0
 8017448:	091a      	lsrs	r2, r3, #4
 801744a:	f003 030f 	and.w	r3, r3, #15
 801744e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017452:	f88d 3006 	strb.w	r3, [sp, #6]
 8017456:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801745a:	f362 000f 	bfi	r0, r2, #0, #16
 801745e:	f363 401f 	bfi	r0, r3, #16, #16
 8017462:	b002      	add	sp, #8
 8017464:	4770      	bx	lr
 8017466:	bf00      	nop

08017468 <uxr_object_id_to_raw>:
 8017468:	4602      	mov	r2, r0
 801746a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801746e:	b082      	sub	sp, #8
 8017470:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017474:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017478:	f881 c000 	strb.w	ip, [r1]
 801747c:	7048      	strb	r0, [r1, #1]
 801747e:	b002      	add	sp, #8
 8017480:	4770      	bx	lr
 8017482:	bf00      	nop

08017484 <uxr_ping_agent_session>:
 8017484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017488:	4617      	mov	r7, r2
 801748a:	b091      	sub	sp, #68	@ 0x44
 801748c:	2210      	movs	r2, #16
 801748e:	4606      	mov	r6, r0
 8017490:	4688      	mov	r8, r1
 8017492:	a808      	add	r0, sp, #32
 8017494:	eb0d 0102 	add.w	r1, sp, r2
 8017498:	2500      	movs	r5, #0
 801749a:	f7fc fe8d 	bl	80141b8 <ucdr_init_buffer>
 801749e:	4b1e      	ldr	r3, [pc, #120]	@ (8017518 <uxr_ping_agent_session+0x94>)
 80174a0:	2402      	movs	r4, #2
 80174a2:	462a      	mov	r2, r5
 80174a4:	881b      	ldrh	r3, [r3, #0]
 80174a6:	a808      	add	r0, sp, #32
 80174a8:	9500      	str	r5, [sp, #0]
 80174aa:	f8ad 300a 	strh.w	r3, [sp, #10]
 80174ae:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80174b2:	7831      	ldrb	r1, [r6, #0]
 80174b4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80174b8:	462b      	mov	r3, r5
 80174ba:	9403      	str	r4, [sp, #12]
 80174bc:	f002 f9b4 	bl	8019828 <uxr_serialize_message_header>
 80174c0:	4621      	mov	r1, r4
 80174c2:	462b      	mov	r3, r5
 80174c4:	2208      	movs	r2, #8
 80174c6:	a808      	add	r0, sp, #32
 80174c8:	f001 ffb2 	bl	8019430 <uxr_buffer_submessage_header>
 80174cc:	4604      	mov	r4, r0
 80174ce:	a902      	add	r1, sp, #8
 80174d0:	a808      	add	r0, sp, #32
 80174d2:	f003 f8b5 	bl	801a640 <uxr_serialize_GET_INFO_Payload>
 80174d6:	b104      	cbz	r4, 80174da <uxr_ping_agent_session+0x56>
 80174d8:	b918      	cbnz	r0, 80174e2 <uxr_ping_agent_session+0x5e>
 80174da:	2000      	movs	r0, #0
 80174dc:	b011      	add	sp, #68	@ 0x44
 80174de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174e2:	a808      	add	r0, sp, #32
 80174e4:	f7fc fe96 	bl	8014214 <ucdr_buffer_length>
 80174e8:	4681      	mov	r9, r0
 80174ea:	e00d      	b.n	8017508 <uxr_ping_agent_session+0x84>
 80174ec:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80174ee:	e9d3 0400 	ldrd	r0, r4, [r3]
 80174f2:	47a0      	blx	r4
 80174f4:	4604      	mov	r4, r0
 80174f6:	4641      	mov	r1, r8
 80174f8:	4630      	mov	r0, r6
 80174fa:	f000 fe71 	bl	80181e0 <uxr_run_session_until_pong>
 80174fe:	ea04 0c00 	and.w	ip, r4, r0
 8017502:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 8017506:	d1e9      	bne.n	80174dc <uxr_ping_agent_session+0x58>
 8017508:	42af      	cmp	r7, r5
 801750a:	464a      	mov	r2, r9
 801750c:	a904      	add	r1, sp, #16
 801750e:	f105 0501 	add.w	r5, r5, #1
 8017512:	d1eb      	bne.n	80174ec <uxr_ping_agent_session+0x68>
 8017514:	e7e1      	b.n	80174da <uxr_ping_agent_session+0x56>
 8017516:	bf00      	nop
 8017518:	08023470 	.word	0x08023470

0801751c <uxr_ping_agent_attempts>:
 801751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017520:	ed2d 8b02 	vpush	{d8}
 8017524:	b0d3      	sub	sp, #332	@ 0x14c
 8017526:	4606      	mov	r6, r0
 8017528:	468a      	mov	sl, r1
 801752a:	2400      	movs	r4, #0
 801752c:	a90c      	add	r1, sp, #48	@ 0x30
 801752e:	a810      	add	r0, sp, #64	@ 0x40
 8017530:	9205      	str	r2, [sp, #20]
 8017532:	2210      	movs	r2, #16
 8017534:	f7fc fe40 	bl	80141b8 <ucdr_init_buffer>
 8017538:	4b53      	ldr	r3, [pc, #332]	@ (8017688 <uxr_ping_agent_attempts+0x16c>)
 801753a:	2502      	movs	r5, #2
 801753c:	4622      	mov	r2, r4
 801753e:	881b      	ldrh	r3, [r3, #0]
 8017540:	2180      	movs	r1, #128	@ 0x80
 8017542:	a810      	add	r0, sp, #64	@ 0x40
 8017544:	9400      	str	r4, [sp, #0]
 8017546:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 801754a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801754e:	9521      	str	r5, [sp, #132]	@ 0x84
 8017550:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8017554:	4623      	mov	r3, r4
 8017556:	f002 f967 	bl	8019828 <uxr_serialize_message_header>
 801755a:	4623      	mov	r3, r4
 801755c:	4629      	mov	r1, r5
 801755e:	2208      	movs	r2, #8
 8017560:	a810      	add	r0, sp, #64	@ 0x40
 8017562:	f001 ff65 	bl	8019430 <uxr_buffer_submessage_header>
 8017566:	4681      	mov	r9, r0
 8017568:	a920      	add	r1, sp, #128	@ 0x80
 801756a:	a810      	add	r0, sp, #64	@ 0x40
 801756c:	f003 f868 	bl	801a640 <uxr_serialize_GET_INFO_Payload>
 8017570:	ea09 0000 	and.w	r0, r9, r0
 8017574:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
 8017578:	d107      	bne.n	801758a <uxr_ping_agent_attempts+0x6e>
 801757a:	f04f 0b00 	mov.w	fp, #0
 801757e:	4658      	mov	r0, fp
 8017580:	b053      	add	sp, #332	@ 0x14c
 8017582:	ecbd 8b02 	vpop	{d8}
 8017586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801758a:	a810      	add	r0, sp, #64	@ 0x40
 801758c:	9404      	str	r4, [sp, #16]
 801758e:	f7fc fe41 	bl	8014214 <ucdr_buffer_length>
 8017592:	ee08 0a10 	vmov	s16, r0
 8017596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801759a:	4293      	cmp	r3, r2
 801759c:	d0ed      	beq.n	801757a <uxr_ping_agent_attempts+0x5e>
 801759e:	ee18 2a10 	vmov	r2, s16
 80175a2:	a90c      	add	r1, sp, #48	@ 0x30
 80175a4:	4655      	mov	r5, sl
 80175a6:	f04f 0800 	mov.w	r8, #0
 80175aa:	e9d6 0300 	ldrd	r0, r3, [r6]
 80175ae:	4798      	blx	r3
 80175b0:	f001 ff84 	bl	80194bc <uxr_millis>
 80175b4:	9003      	str	r0, [sp, #12]
 80175b6:	e00b      	b.n	80175d0 <uxr_ping_agent_attempts+0xb4>
 80175b8:	f001 ff80 	bl	80194bc <uxr_millis>
 80175bc:	9b03      	ldr	r3, [sp, #12]
 80175be:	1ac0      	subs	r0, r0, r3
 80175c0:	1a2d      	subs	r5, r5, r0
 80175c2:	f001 ff7b 	bl	80194bc <uxr_millis>
 80175c6:	9003      	str	r0, [sp, #12]
 80175c8:	2d00      	cmp	r5, #0
 80175ca:	dd30      	ble.n	801762e <uxr_ping_agent_attempts+0x112>
 80175cc:	2f00      	cmp	r7, #0
 80175ce:	d02e      	beq.n	801762e <uxr_ping_agent_attempts+0x112>
 80175d0:	4653      	mov	r3, sl
 80175d2:	aa09      	add	r2, sp, #36	@ 0x24
 80175d4:	a908      	add	r1, sp, #32
 80175d6:	6830      	ldr	r0, [r6, #0]
 80175d8:	68b4      	ldr	r4, [r6, #8]
 80175da:	464f      	mov	r7, r9
 80175dc:	f8cd 8020 	str.w	r8, [sp, #32]
 80175e0:	47a0      	blx	r4
 80175e2:	4683      	mov	fp, r0
 80175e4:	2800      	cmp	r0, #0
 80175e6:	d0e7      	beq.n	80175b8 <uxr_ping_agent_attempts+0x9c>
 80175e8:	a818      	add	r0, sp, #96	@ 0x60
 80175ea:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80175ee:	f7fc fde3 	bl	80141b8 <ucdr_init_buffer>
 80175f2:	ab07      	add	r3, sp, #28
 80175f4:	f10d 0219 	add.w	r2, sp, #25
 80175f8:	a918      	add	r1, sp, #96	@ 0x60
 80175fa:	a80a      	add	r0, sp, #40	@ 0x28
 80175fc:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 8017600:	f001 f8e2 	bl	80187c8 <uxr_read_session_header>
 8017604:	22c8      	movs	r2, #200	@ 0xc8
 8017606:	2100      	movs	r1, #0
 8017608:	a820      	add	r0, sp, #128	@ 0x80
 801760a:	f00a fe79 	bl	8022300 <memset>
 801760e:	a818      	add	r0, sp, #96	@ 0x60
 8017610:	f7fc fe04 	bl	801421c <ucdr_buffer_remaining>
 8017614:	2804      	cmp	r0, #4
 8017616:	d816      	bhi.n	8017646 <uxr_ping_agent_attempts+0x12a>
 8017618:	f89d 3135 	ldrb.w	r3, [sp, #309]	@ 0x135
 801761c:	2b00      	cmp	r3, #0
 801761e:	bf13      	iteet	ne
 8017620:	f04f 0b01 	movne.w	fp, #1
 8017624:	f04f 0b00 	moveq.w	fp, #0
 8017628:	2701      	moveq	r7, #1
 801762a:	2700      	movne	r7, #0
 801762c:	e7c4      	b.n	80175b8 <uxr_ping_agent_attempts+0x9c>
 801762e:	9b04      	ldr	r3, [sp, #16]
 8017630:	3301      	adds	r3, #1
 8017632:	9304      	str	r3, [sp, #16]
 8017634:	f1bb 0f00 	cmp.w	fp, #0
 8017638:	d0ad      	beq.n	8017596 <uxr_ping_agent_attempts+0x7a>
 801763a:	4658      	mov	r0, fp
 801763c:	b053      	add	sp, #332	@ 0x14c
 801763e:	ecbd 8b02 	vpop	{d8}
 8017642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017646:	f10d 031e 	add.w	r3, sp, #30
 801764a:	f10d 021b 	add.w	r2, sp, #27
 801764e:	f10d 011a 	add.w	r1, sp, #26
 8017652:	a818      	add	r0, sp, #96	@ 0x60
 8017654:	f88d 801a 	strb.w	r8, [sp, #26]
 8017658:	f8ad 801e 	strh.w	r8, [sp, #30]
 801765c:	f88d 801b 	strb.w	r8, [sp, #27]
 8017660:	f002 f934 	bl	80198cc <uxr_deserialize_submessage_header>
 8017664:	a818      	add	r0, sp, #96	@ 0x60
 8017666:	f7fc fdd9 	bl	801421c <ucdr_buffer_remaining>
 801766a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801766e:	4298      	cmp	r0, r3
 8017670:	d3d2      	bcc.n	8017618 <uxr_ping_agent_attempts+0xfc>
 8017672:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8017676:	2b06      	cmp	r3, #6
 8017678:	d1ce      	bne.n	8017618 <uxr_ping_agent_attempts+0xfc>
 801767a:	a918      	add	r1, sp, #96	@ 0x60
 801767c:	a820      	add	r0, sp, #128	@ 0x80
 801767e:	f88d 8135 	strb.w	r8, [sp, #309]	@ 0x135
 8017682:	f000 f997 	bl	80179b4 <read_submessage_info>
 8017686:	e7c7      	b.n	8017618 <uxr_ping_agent_attempts+0xfc>
 8017688:	08023470 	.word	0x08023470

0801768c <on_get_fragmentation_info>:
 801768c:	b500      	push	{lr}
 801768e:	b08b      	sub	sp, #44	@ 0x2c
 8017690:	4601      	mov	r1, r0
 8017692:	2204      	movs	r2, #4
 8017694:	a802      	add	r0, sp, #8
 8017696:	f7fc fd8f 	bl	80141b8 <ucdr_init_buffer>
 801769a:	f10d 0305 	add.w	r3, sp, #5
 801769e:	f10d 0206 	add.w	r2, sp, #6
 80176a2:	a901      	add	r1, sp, #4
 80176a4:	a802      	add	r0, sp, #8
 80176a6:	f001 fedd 	bl	8019464 <uxr_read_submessage_header>
 80176aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80176ae:	2b0d      	cmp	r3, #13
 80176b0:	d003      	beq.n	80176ba <on_get_fragmentation_info+0x2e>
 80176b2:	2000      	movs	r0, #0
 80176b4:	b00b      	add	sp, #44	@ 0x2c
 80176b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80176ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80176be:	f013 0f02 	tst.w	r3, #2
 80176c2:	bf14      	ite	ne
 80176c4:	2002      	movne	r0, #2
 80176c6:	2001      	moveq	r0, #1
 80176c8:	b00b      	add	sp, #44	@ 0x2c
 80176ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80176ce:	bf00      	nop

080176d0 <read_submessage_get_info>:
 80176d0:	b570      	push	{r4, r5, r6, lr}
 80176d2:	2500      	movs	r5, #0
 80176d4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80176d8:	460e      	mov	r6, r1
 80176da:	4604      	mov	r4, r0
 80176dc:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80176e0:	4629      	mov	r1, r5
 80176e2:	a810      	add	r0, sp, #64	@ 0x40
 80176e4:	9503      	str	r5, [sp, #12]
 80176e6:	9504      	str	r5, [sp, #16]
 80176e8:	f00a fe0a 	bl	8022300 <memset>
 80176ec:	a903      	add	r1, sp, #12
 80176ee:	4630      	mov	r0, r6
 80176f0:	f002 ffbc 	bl	801a66c <uxr_deserialize_GET_INFO_Payload>
 80176f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80176f8:	4620      	mov	r0, r4
 80176fa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80176fe:	f001 f8a3 	bl	8018848 <uxr_session_header_offset>
 8017702:	462b      	mov	r3, r5
 8017704:	220c      	movs	r2, #12
 8017706:	a905      	add	r1, sp, #20
 8017708:	9000      	str	r0, [sp, #0]
 801770a:	a808      	add	r0, sp, #32
 801770c:	f7fc fd42 	bl	8014194 <ucdr_init_buffer_origin_offset>
 8017710:	a910      	add	r1, sp, #64	@ 0x40
 8017712:	a808      	add	r0, sp, #32
 8017714:	f003 f81e 	bl	801a754 <uxr_serialize_INFO_Payload>
 8017718:	9b08      	ldr	r3, [sp, #32]
 801771a:	462a      	mov	r2, r5
 801771c:	4629      	mov	r1, r5
 801771e:	4620      	mov	r0, r4
 8017720:	f001 f83e 	bl	80187a0 <uxr_stamp_session_header>
 8017724:	a808      	add	r0, sp, #32
 8017726:	f7fc fd75 	bl	8014214 <ucdr_buffer_length>
 801772a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801772c:	4602      	mov	r2, r0
 801772e:	a905      	add	r1, sp, #20
 8017730:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017734:	47a0      	blx	r4
 8017736:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801773a:	bd70      	pop	{r4, r5, r6, pc}

0801773c <write_submessage_acknack.isra.0>:
 801773c:	b570      	push	{r4, r5, r6, lr}
 801773e:	b092      	sub	sp, #72	@ 0x48
 8017740:	4605      	mov	r5, r0
 8017742:	460e      	mov	r6, r1
 8017744:	4614      	mov	r4, r2
 8017746:	f001 f87f 	bl	8018848 <uxr_session_header_offset>
 801774a:	a905      	add	r1, sp, #20
 801774c:	9000      	str	r0, [sp, #0]
 801774e:	2300      	movs	r3, #0
 8017750:	a80a      	add	r0, sp, #40	@ 0x28
 8017752:	2211      	movs	r2, #17
 8017754:	f7fc fd1e 	bl	8014194 <ucdr_init_buffer_origin_offset>
 8017758:	2218      	movs	r2, #24
 801775a:	2300      	movs	r3, #0
 801775c:	210a      	movs	r1, #10
 801775e:	fb02 5404 	mla	r4, r2, r4, r5
 8017762:	a80a      	add	r0, sp, #40	@ 0x28
 8017764:	2205      	movs	r2, #5
 8017766:	3450      	adds	r4, #80	@ 0x50
 8017768:	f001 fe62 	bl	8019430 <uxr_buffer_submessage_header>
 801776c:	a903      	add	r1, sp, #12
 801776e:	4620      	mov	r0, r4
 8017770:	f008 fece 	bl	8020510 <uxr_compute_acknack>
 8017774:	ba40      	rev16	r0, r0
 8017776:	a903      	add	r1, sp, #12
 8017778:	f88d 6010 	strb.w	r6, [sp, #16]
 801777c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017780:	a80a      	add	r0, sp, #40	@ 0x28
 8017782:	f003 f859 	bl	801a838 <uxr_serialize_ACKNACK_Payload>
 8017786:	2200      	movs	r2, #0
 8017788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801778a:	4628      	mov	r0, r5
 801778c:	4611      	mov	r1, r2
 801778e:	f001 f807 	bl	80187a0 <uxr_stamp_session_header>
 8017792:	a80a      	add	r0, sp, #40	@ 0x28
 8017794:	f7fc fd3e 	bl	8014214 <ucdr_buffer_length>
 8017798:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801779a:	4602      	mov	r2, r0
 801779c:	a905      	add	r1, sp, #20
 801779e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80177a2:	47a0      	blx	r4
 80177a4:	b012      	add	sp, #72	@ 0x48
 80177a6:	bd70      	pop	{r4, r5, r6, pc}

080177a8 <uxr_init_session>:
 80177a8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80177e0 <uxr_init_session+0x38>
 80177ac:	2300      	movs	r3, #0
 80177ae:	b510      	push	{r4, lr}
 80177b0:	4604      	mov	r4, r0
 80177b2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80177b6:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80177ba:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80177be:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80177c2:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80177c6:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80177ca:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80177ce:	2181      	movs	r1, #129	@ 0x81
 80177d0:	f000 ff4a 	bl	8018668 <uxr_init_session_info>
 80177d4:	f104 0008 	add.w	r0, r4, #8
 80177d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177dc:	f001 bd44 	b.w	8019268 <uxr_init_stream_storage>
	...

080177e8 <uxr_set_status_callback>:
 80177e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop

080177f0 <uxr_set_topic_callback>:
 80177f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80177f4:	4770      	bx	lr
 80177f6:	bf00      	nop

080177f8 <uxr_set_request_callback>:
 80177f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80177fc:	4770      	bx	lr
 80177fe:	bf00      	nop

08017800 <uxr_set_reply_callback>:
 8017800:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop

08017808 <uxr_create_output_best_effort_stream>:
 8017808:	b510      	push	{r4, lr}
 801780a:	4604      	mov	r4, r0
 801780c:	b084      	sub	sp, #16
 801780e:	e9cd 2100 	strd	r2, r1, [sp]
 8017812:	f001 f819 	bl	8018848 <uxr_session_header_offset>
 8017816:	4603      	mov	r3, r0
 8017818:	f104 0008 	add.w	r0, r4, #8
 801781c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8017820:	b004      	add	sp, #16
 8017822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017826:	f001 bd65 	b.w	80192f4 <uxr_add_output_best_effort_buffer>
 801782a:	bf00      	nop

0801782c <uxr_create_output_reliable_stream>:
 801782c:	b530      	push	{r4, r5, lr}
 801782e:	b089      	sub	sp, #36	@ 0x24
 8017830:	4604      	mov	r4, r0
 8017832:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017836:	9303      	str	r3, [sp, #12]
 8017838:	f001 f806 	bl	8018848 <uxr_session_header_offset>
 801783c:	4605      	mov	r5, r0
 801783e:	9905      	ldr	r1, [sp, #20]
 8017840:	f104 0008 	add.w	r0, r4, #8
 8017844:	9500      	str	r5, [sp, #0]
 8017846:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801784a:	f001 fd67 	bl	801931c <uxr_add_output_reliable_buffer>
 801784e:	2200      	movs	r2, #0
 8017850:	fa5f fc80 	uxtb.w	ip, r0
 8017854:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017858:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801785c:	0e03      	lsrs	r3, r0, #24
 801785e:	f36c 0207 	bfi	r2, ip, #0, #8
 8017862:	f364 220f 	bfi	r2, r4, #8, #8
 8017866:	f361 4217 	bfi	r2, r1, #16, #8
 801786a:	f363 621f 	bfi	r2, r3, #24, #8
 801786e:	4610      	mov	r0, r2
 8017870:	b009      	add	sp, #36	@ 0x24
 8017872:	bd30      	pop	{r4, r5, pc}

08017874 <uxr_create_input_best_effort_stream>:
 8017874:	b082      	sub	sp, #8
 8017876:	3008      	adds	r0, #8
 8017878:	b002      	add	sp, #8
 801787a:	f001 bd69 	b.w	8019350 <uxr_add_input_best_effort_buffer>
 801787e:	bf00      	nop

08017880 <uxr_create_input_reliable_stream>:
 8017880:	b510      	push	{r4, lr}
 8017882:	4c0c      	ldr	r4, [pc, #48]	@ (80178b4 <uxr_create_input_reliable_stream+0x34>)
 8017884:	b084      	sub	sp, #16
 8017886:	3008      	adds	r0, #8
 8017888:	9400      	str	r4, [sp, #0]
 801788a:	f001 fd77 	bl	801937c <uxr_add_input_reliable_buffer>
 801788e:	2200      	movs	r2, #0
 8017890:	fa5f fe80 	uxtb.w	lr, r0
 8017894:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8017898:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801789c:	0e03      	lsrs	r3, r0, #24
 801789e:	f36e 0207 	bfi	r2, lr, #0, #8
 80178a2:	f36c 220f 	bfi	r2, ip, #8, #8
 80178a6:	f361 4217 	bfi	r2, r1, #16, #8
 80178aa:	f363 621f 	bfi	r2, r3, #24, #8
 80178ae:	4610      	mov	r0, r2
 80178b0:	b004      	add	sp, #16
 80178b2:	bd10      	pop	{r4, pc}
 80178b4:	0801768d 	.word	0x0801768d

080178b8 <uxr_epoch_nanos>:
 80178b8:	b510      	push	{r4, lr}
 80178ba:	4604      	mov	r4, r0
 80178bc:	f001 fe1a 	bl	80194f4 <uxr_nanos>
 80178c0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80178c4:	1ac0      	subs	r0, r0, r3
 80178c6:	eb61 0102 	sbc.w	r1, r1, r2
 80178ca:	bd10      	pop	{r4, pc}

080178cc <uxr_flash_output_streams>:
 80178cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178d0:	7e03      	ldrb	r3, [r0, #24]
 80178d2:	b084      	sub	sp, #16
 80178d4:	4604      	mov	r4, r0
 80178d6:	b1fb      	cbz	r3, 8017918 <uxr_flash_output_streams+0x4c>
 80178d8:	f04f 0900 	mov.w	r9, #0
 80178dc:	f10d 0802 	add.w	r8, sp, #2
 80178e0:	af03      	add	r7, sp, #12
 80178e2:	ae02      	add	r6, sp, #8
 80178e4:	4648      	mov	r0, r9
 80178e6:	2201      	movs	r2, #1
 80178e8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80178ec:	4611      	mov	r1, r2
 80178ee:	3508      	adds	r5, #8
 80178f0:	f001 fc60 	bl	80191b4 <uxr_stream_id>
 80178f4:	4684      	mov	ip, r0
 80178f6:	4643      	mov	r3, r8
 80178f8:	463a      	mov	r2, r7
 80178fa:	4631      	mov	r1, r6
 80178fc:	4628      	mov	r0, r5
 80178fe:	f8cd c004 	str.w	ip, [sp, #4]
 8017902:	f008 fe8f 	bl	8020624 <uxr_prepare_best_effort_buffer_to_send>
 8017906:	2800      	cmp	r0, #0
 8017908:	d13d      	bne.n	8017986 <uxr_flash_output_streams+0xba>
 801790a:	f109 0901 	add.w	r9, r9, #1
 801790e:	7e23      	ldrb	r3, [r4, #24]
 8017910:	fa5f f089 	uxtb.w	r0, r9
 8017914:	4283      	cmp	r3, r0
 8017916:	d8e6      	bhi.n	80178e6 <uxr_flash_output_streams+0x1a>
 8017918:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801791c:	b383      	cbz	r3, 8017980 <uxr_flash_output_streams+0xb4>
 801791e:	f04f 0900 	mov.w	r9, #0
 8017922:	f10d 0802 	add.w	r8, sp, #2
 8017926:	af03      	add	r7, sp, #12
 8017928:	ae02      	add	r6, sp, #8
 801792a:	4648      	mov	r0, r9
 801792c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8017930:	2201      	movs	r2, #1
 8017932:	2102      	movs	r1, #2
 8017934:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017938:	f001 fc3c 	bl	80191b4 <uxr_stream_id>
 801793c:	9001      	str	r0, [sp, #4]
 801793e:	3520      	adds	r5, #32
 8017940:	e00c      	b.n	801795c <uxr_flash_output_streams+0x90>
 8017942:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017946:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801794a:	9b02      	ldr	r3, [sp, #8]
 801794c:	f000 ff28 	bl	80187a0 <uxr_stamp_session_header>
 8017950:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017952:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017956:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801795a:	47d0      	blx	sl
 801795c:	4643      	mov	r3, r8
 801795e:	463a      	mov	r2, r7
 8017960:	4631      	mov	r1, r6
 8017962:	4628      	mov	r0, r5
 8017964:	f009 f880 	bl	8020a68 <uxr_prepare_next_reliable_buffer_to_send>
 8017968:	4603      	mov	r3, r0
 801796a:	4620      	mov	r0, r4
 801796c:	2b00      	cmp	r3, #0
 801796e:	d1e8      	bne.n	8017942 <uxr_flash_output_streams+0x76>
 8017970:	f109 0901 	add.w	r9, r9, #1
 8017974:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8017978:	fa5f f089 	uxtb.w	r0, r9
 801797c:	4283      	cmp	r3, r0
 801797e:	d8d5      	bhi.n	801792c <uxr_flash_output_streams+0x60>
 8017980:	b004      	add	sp, #16
 8017982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017986:	9b02      	ldr	r3, [sp, #8]
 8017988:	4620      	mov	r0, r4
 801798a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801798e:	f109 0901 	add.w	r9, r9, #1
 8017992:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017996:	f000 ff03 	bl	80187a0 <uxr_stamp_session_header>
 801799a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801799c:	9a03      	ldr	r2, [sp, #12]
 801799e:	685d      	ldr	r5, [r3, #4]
 80179a0:	6818      	ldr	r0, [r3, #0]
 80179a2:	9902      	ldr	r1, [sp, #8]
 80179a4:	47a8      	blx	r5
 80179a6:	7e23      	ldrb	r3, [r4, #24]
 80179a8:	fa5f f089 	uxtb.w	r0, r9
 80179ac:	4283      	cmp	r3, r0
 80179ae:	d89a      	bhi.n	80178e6 <uxr_flash_output_streams+0x1a>
 80179b0:	e7b2      	b.n	8017918 <uxr_flash_output_streams+0x4c>
 80179b2:	bf00      	nop

080179b4 <read_submessage_info>:
 80179b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b8:	460d      	mov	r5, r1
 80179ba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80179be:	4606      	mov	r6, r0
 80179c0:	4669      	mov	r1, sp
 80179c2:	4628      	mov	r0, r5
 80179c4:	f002 fd4e 	bl	801a464 <uxr_deserialize_BaseObjectReply>
 80179c8:	4604      	mov	r4, r0
 80179ca:	a902      	add	r1, sp, #8
 80179cc:	4628      	mov	r0, r5
 80179ce:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80179d2:	f7fb f96f 	bl	8012cb4 <ucdr_deserialize_bool>
 80179d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80179da:	4004      	ands	r4, r0
 80179dc:	b2e4      	uxtb	r4, r4
 80179de:	b95b      	cbnz	r3, 80179f8 <read_submessage_info+0x44>
 80179e0:	a987      	add	r1, sp, #540	@ 0x21c
 80179e2:	4628      	mov	r0, r5
 80179e4:	f7fb f966 	bl	8012cb4 <ucdr_deserialize_bool>
 80179e8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80179ec:	4680      	mov	r8, r0
 80179ee:	b94b      	cbnz	r3, 8017a04 <read_submessage_info+0x50>
 80179f0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80179f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f8:	a903      	add	r1, sp, #12
 80179fa:	4628      	mov	r0, r5
 80179fc:	f002 fbde 	bl	801a1bc <uxr_deserialize_ObjectVariant>
 8017a00:	4004      	ands	r4, r0
 8017a02:	e7ed      	b.n	80179e0 <read_submessage_info+0x2c>
 8017a04:	a988      	add	r1, sp, #544	@ 0x220
 8017a06:	4628      	mov	r0, r5
 8017a08:	f7fb f982 	bl	8012d10 <ucdr_deserialize_uint8_t>
 8017a0c:	ea14 0f08 	tst.w	r4, r8
 8017a10:	d0ee      	beq.n	80179f0 <read_submessage_info+0x3c>
 8017a12:	2800      	cmp	r0, #0
 8017a14:	d0ec      	beq.n	80179f0 <read_submessage_info+0x3c>
 8017a16:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8017a1a:	2b0d      	cmp	r3, #13
 8017a1c:	d1e8      	bne.n	80179f0 <read_submessage_info+0x3c>
 8017a1e:	a98a      	add	r1, sp, #552	@ 0x228
 8017a20:	4628      	mov	r0, r5
 8017a22:	f7fb ff1b 	bl	801385c <ucdr_deserialize_int16_t>
 8017a26:	b138      	cbz	r0, 8017a38 <read_submessage_info+0x84>
 8017a28:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	dd06      	ble.n	8017a3e <read_submessage_info+0x8a>
 8017a30:	2f00      	cmp	r7, #0
 8017a32:	bf14      	ite	ne
 8017a34:	2001      	movne	r0, #1
 8017a36:	2002      	moveq	r0, #2
 8017a38:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8017a3c:	e7d8      	b.n	80179f0 <read_submessage_info+0x3c>
 8017a3e:	2000      	movs	r0, #0
 8017a40:	e7fa      	b.n	8017a38 <read_submessage_info+0x84>
 8017a42:	bf00      	nop

08017a44 <read_submessage_list>:
 8017a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a48:	4604      	mov	r4, r0
 8017a4a:	b097      	sub	sp, #92	@ 0x5c
 8017a4c:	460d      	mov	r5, r1
 8017a4e:	4ec1      	ldr	r6, [pc, #772]	@ (8017d54 <read_submessage_list+0x310>)
 8017a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a52:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017a56:	aa0c      	add	r2, sp, #48	@ 0x30
 8017a58:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	f001 fd01 	bl	8019464 <uxr_read_submessage_header>
 8017a62:	2800      	cmp	r0, #0
 8017a64:	f000 8142 	beq.w	8017cec <read_submessage_list+0x2a8>
 8017a68:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8017a6c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8017a70:	3b02      	subs	r3, #2
 8017a72:	2b0d      	cmp	r3, #13
 8017a74:	d8ed      	bhi.n	8017a52 <read_submessage_list+0xe>
 8017a76:	a101      	add	r1, pc, #4	@ (adr r1, 8017a7c <read_submessage_list+0x38>)
 8017a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a7c:	08017ce3 	.word	0x08017ce3
 8017a80:	08017a53 	.word	0x08017a53
 8017a84:	08017cd3 	.word	0x08017cd3
 8017a88:	08017c71 	.word	0x08017c71
 8017a8c:	08017c67 	.word	0x08017c67
 8017a90:	08017a53 	.word	0x08017a53
 8017a94:	08017a53 	.word	0x08017a53
 8017a98:	08017bbd 	.word	0x08017bbd
 8017a9c:	08017b4f 	.word	0x08017b4f
 8017aa0:	08017b0f 	.word	0x08017b0f
 8017aa4:	08017a53 	.word	0x08017a53
 8017aa8:	08017a53 	.word	0x08017a53
 8017aac:	08017a53 	.word	0x08017a53
 8017ab0:	08017ab5 	.word	0x08017ab5
 8017ab4:	a910      	add	r1, sp, #64	@ 0x40
 8017ab6:	4628      	mov	r0, r5
 8017ab8:	f002 ff20 	bl	801a8fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8017abc:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8017ac0:	f1b8 0f00 	cmp.w	r8, #0
 8017ac4:	f000 811a 	beq.w	8017cfc <read_submessage_list+0x2b8>
 8017ac8:	f001 fd14 	bl	80194f4 <uxr_nanos>
 8017acc:	4602      	mov	r2, r0
 8017ace:	460b      	mov	r3, r1
 8017ad0:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8017ad4:	2100      	movs	r1, #0
 8017ad6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017ad8:	9006      	str	r0, [sp, #24]
 8017ada:	468c      	mov	ip, r1
 8017adc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017ade:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017ae2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017ae4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017ae8:	468c      	mov	ip, r1
 8017aea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017aec:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017af0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8017af4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8017af8:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017afc:	e9cd 0100 	strd	r0, r1, [sp]
 8017b00:	4620      	mov	r0, r4
 8017b02:	47c0      	blx	r8
 8017b04:	f04f 0301 	mov.w	r3, #1
 8017b08:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8017b0c:	e7a1      	b.n	8017a52 <read_submessage_list+0xe>
 8017b0e:	a910      	add	r1, sp, #64	@ 0x40
 8017b10:	4628      	mov	r0, r5
 8017b12:	f002 fed1 	bl	801a8b8 <uxr_deserialize_HEARTBEAT_Payload>
 8017b16:	2100      	movs	r1, #0
 8017b18:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017b1c:	f001 fb78 	bl	8019210 <uxr_stream_id_from_raw>
 8017b20:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017b24:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017b26:	f104 0008 	add.w	r0, r4, #8
 8017b2a:	4641      	mov	r1, r8
 8017b2c:	f001 fc5e 	bl	80193ec <uxr_get_input_reliable_stream>
 8017b30:	2800      	cmp	r0, #0
 8017b32:	d08e      	beq.n	8017a52 <read_submessage_list+0xe>
 8017b34:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8017b38:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017b3c:	f008 fcdc 	bl	80204f8 <uxr_process_heartbeat>
 8017b40:	4642      	mov	r2, r8
 8017b42:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8017b46:	4620      	mov	r0, r4
 8017b48:	f7ff fdf8 	bl	801773c <write_submessage_acknack.isra.0>
 8017b4c:	e781      	b.n	8017a52 <read_submessage_list+0xe>
 8017b4e:	a910      	add	r1, sp, #64	@ 0x40
 8017b50:	4628      	mov	r0, r5
 8017b52:	f002 fe89 	bl	801a868 <uxr_deserialize_ACKNACK_Payload>
 8017b56:	2100      	movs	r1, #0
 8017b58:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017b5c:	f001 fb58 	bl	8019210 <uxr_stream_id_from_raw>
 8017b60:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8017b64:	900d      	str	r0, [sp, #52]	@ 0x34
 8017b66:	f104 0008 	add.w	r0, r4, #8
 8017b6a:	f001 fc29 	bl	80193c0 <uxr_get_output_reliable_stream>
 8017b6e:	4680      	mov	r8, r0
 8017b70:	2800      	cmp	r0, #0
 8017b72:	f43f af6e 	beq.w	8017a52 <read_submessage_list+0xe>
 8017b76:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8017b7a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017b7e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8017b82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8017b86:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017b8a:	b289      	uxth	r1, r1
 8017b8c:	f009 f814 	bl	8020bb8 <uxr_process_acknack>
 8017b90:	4640      	mov	r0, r8
 8017b92:	f008 ffd5 	bl	8020b40 <uxr_begin_output_nack_buffer_it>
 8017b96:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017b9a:	e005      	b.n	8017ba8 <read_submessage_list+0x164>
 8017b9c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017b9e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8017ba2:	e9d3 0900 	ldrd	r0, r9, [r3]
 8017ba6:	47c8      	blx	r9
 8017ba8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8017bac:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017bae:	4651      	mov	r1, sl
 8017bb0:	4640      	mov	r0, r8
 8017bb2:	f008 ffc7 	bl	8020b44 <uxr_next_reliable_nack_buffer_to_send>
 8017bb6:	2800      	cmp	r0, #0
 8017bb8:	d1f0      	bne.n	8017b9c <read_submessage_list+0x158>
 8017bba:	e74a      	b.n	8017a52 <read_submessage_list+0xe>
 8017bbc:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8017bc0:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017bc4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8017bc8:	4628      	mov	r0, r5
 8017bca:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8017bce:	4651      	mov	r1, sl
 8017bd0:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8017bd4:	f1a8 0804 	sub.w	r8, r8, #4
 8017bd8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8017bdc:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8017be0:	fa1f f888 	uxth.w	r8, r8
 8017be4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017be8:	f009 090e 	and.w	r9, r9, #14
 8017bec:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8017bf0:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8017bf4:	f002 fb84 	bl	801a300 <uxr_deserialize_BaseObjectRequest>
 8017bf8:	4650      	mov	r0, sl
 8017bfa:	a90f      	add	r1, sp, #60	@ 0x3c
 8017bfc:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017c00:	f000 fe4a 	bl	8018898 <uxr_parse_base_object_request>
 8017c04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017c06:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8017c0a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8017c0e:	9110      	str	r1, [sp, #64]	@ 0x40
 8017c10:	f1bb 0f00 	cmp.w	fp, #0
 8017c14:	d006      	beq.n	8017c24 <read_submessage_list+0x1e0>
 8017c16:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017c1a:	4652      	mov	r2, sl
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	9300      	str	r3, [sp, #0]
 8017c20:	2300      	movs	r3, #0
 8017c22:	47d8      	blx	fp
 8017c24:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017c26:	b182      	cbz	r2, 8017c4a <read_submessage_list+0x206>
 8017c28:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017c2a:	f04f 0c00 	mov.w	ip, #0
 8017c2e:	3902      	subs	r1, #2
 8017c30:	e003      	b.n	8017c3a <read_submessage_list+0x1f6>
 8017c32:	f10c 0c01 	add.w	ip, ip, #1
 8017c36:	4594      	cmp	ip, r2
 8017c38:	d007      	beq.n	8017c4a <read_submessage_list+0x206>
 8017c3a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017c3e:	4553      	cmp	r3, sl
 8017c40:	d1f7      	bne.n	8017c32 <read_submessage_list+0x1ee>
 8017c42:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017c44:	2200      	movs	r2, #0
 8017c46:	f803 200c 	strb.w	r2, [r3, ip]
 8017c4a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017c4e:	464b      	mov	r3, r9
 8017c50:	4642      	mov	r2, r8
 8017c52:	4620      	mov	r0, r4
 8017c54:	9102      	str	r1, [sp, #8]
 8017c56:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017c58:	9101      	str	r1, [sp, #4]
 8017c5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017c5c:	9100      	str	r1, [sp, #0]
 8017c5e:	4629      	mov	r1, r5
 8017c60:	f009 f86c 	bl	8020d3c <read_submessage_format>
 8017c64:	e6f5      	b.n	8017a52 <read_submessage_list+0xe>
 8017c66:	4629      	mov	r1, r5
 8017c68:	4620      	mov	r0, r4
 8017c6a:	f7ff fea3 	bl	80179b4 <read_submessage_info>
 8017c6e:	e6f0      	b.n	8017a52 <read_submessage_list+0xe>
 8017c70:	2a00      	cmp	r2, #0
 8017c72:	d03e      	beq.n	8017cf2 <read_submessage_list+0x2ae>
 8017c74:	a910      	add	r1, sp, #64	@ 0x40
 8017c76:	4628      	mov	r0, r5
 8017c78:	f002 fd4e 	bl	801a718 <uxr_deserialize_STATUS_Payload>
 8017c7c:	a90e      	add	r1, sp, #56	@ 0x38
 8017c7e:	aa0d      	add	r2, sp, #52	@ 0x34
 8017c80:	a810      	add	r0, sp, #64	@ 0x40
 8017c82:	f000 fe09 	bl	8018898 <uxr_parse_base_object_request>
 8017c86:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017c88:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8017c8c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8017c90:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8017c94:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017c96:	f1ba 0f00 	cmp.w	sl, #0
 8017c9a:	d006      	beq.n	8017caa <read_submessage_list+0x266>
 8017c9c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017ca0:	4642      	mov	r2, r8
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	9300      	str	r3, [sp, #0]
 8017ca6:	464b      	mov	r3, r9
 8017ca8:	47d0      	blx	sl
 8017caa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017cac:	2a00      	cmp	r2, #0
 8017cae:	f43f aed0 	beq.w	8017a52 <read_submessage_list+0xe>
 8017cb2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8017cb4:	2100      	movs	r1, #0
 8017cb6:	3802      	subs	r0, #2
 8017cb8:	e003      	b.n	8017cc2 <read_submessage_list+0x27e>
 8017cba:	3101      	adds	r1, #1
 8017cbc:	4291      	cmp	r1, r2
 8017cbe:	f43f aec8 	beq.w	8017a52 <read_submessage_list+0xe>
 8017cc2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8017cc6:	4543      	cmp	r3, r8
 8017cc8:	d1f7      	bne.n	8017cba <read_submessage_list+0x276>
 8017cca:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017ccc:	f803 9001 	strb.w	r9, [r3, r1]
 8017cd0:	e6bf      	b.n	8017a52 <read_submessage_list+0xe>
 8017cd2:	2a00      	cmp	r2, #0
 8017cd4:	f47f aebd 	bne.w	8017a52 <read_submessage_list+0xe>
 8017cd8:	4629      	mov	r1, r5
 8017cda:	4620      	mov	r0, r4
 8017cdc:	f000 fd20 	bl	8018720 <uxr_read_create_session_status>
 8017ce0:	e6b7      	b.n	8017a52 <read_submessage_list+0xe>
 8017ce2:	4629      	mov	r1, r5
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f7ff fcf3 	bl	80176d0 <read_submessage_get_info>
 8017cea:	e6b2      	b.n	8017a52 <read_submessage_list+0xe>
 8017cec:	b017      	add	sp, #92	@ 0x5c
 8017cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf2:	4629      	mov	r1, r5
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	f000 fd21 	bl	801873c <uxr_read_delete_session_status>
 8017cfa:	e6aa      	b.n	8017a52 <read_submessage_list+0xe>
 8017cfc:	f001 fbfa 	bl	80194f4 <uxr_nanos>
 8017d00:	4642      	mov	r2, r8
 8017d02:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017d04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017d06:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017d0a:	1818      	adds	r0, r3, r0
 8017d0c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017d0e:	eb42 0101 	adc.w	r1, r2, r1
 8017d12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d14:	4642      	mov	r2, r8
 8017d16:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017d1a:	469c      	mov	ip, r3
 8017d1c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8017d20:	fbc3 7806 	smlal	r7, r8, r3, r6
 8017d24:	4643      	mov	r3, r8
 8017d26:	eb1c 0c07 	adds.w	ip, ip, r7
 8017d2a:	eb42 0203 	adc.w	r2, r2, r3
 8017d2e:	ebb0 030c 	subs.w	r3, r0, ip
 8017d32:	eb61 0202 	sbc.w	r2, r1, r2
 8017d36:	2a00      	cmp	r2, #0
 8017d38:	db08      	blt.n	8017d4c <read_submessage_list+0x308>
 8017d3a:	085b      	lsrs	r3, r3, #1
 8017d3c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8017d40:	1052      	asrs	r2, r2, #1
 8017d42:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8017d46:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8017d4a:	e6db      	b.n	8017b04 <read_submessage_list+0xc0>
 8017d4c:	3301      	adds	r3, #1
 8017d4e:	f142 0200 	adc.w	r2, r2, #0
 8017d52:	e7f2      	b.n	8017d3a <read_submessage_list+0x2f6>
 8017d54:	3b9aca00 	.word	0x3b9aca00

08017d58 <listen_message_reliably>:
 8017d58:	1e0b      	subs	r3, r1, #0
 8017d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d5e:	bfb8      	it	lt
 8017d60:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8017d64:	b09d      	sub	sp, #116	@ 0x74
 8017d66:	4680      	mov	r8, r0
 8017d68:	9305      	str	r3, [sp, #20]
 8017d6a:	f001 fba7 	bl	80194bc <uxr_millis>
 8017d6e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8017d72:	4681      	mov	r9, r0
 8017d74:	2a00      	cmp	r2, #0
 8017d76:	f000 809a 	beq.w	8017eae <listen_message_reliably+0x156>
 8017d7a:	2600      	movs	r6, #0
 8017d7c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d80:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8017d84:	460f      	mov	r7, r1
 8017d86:	4630      	mov	r0, r6
 8017d88:	9303      	str	r3, [sp, #12]
 8017d8a:	e00e      	b.n	8017daa <listen_message_reliably+0x52>
 8017d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017d8e:	3601      	adds	r6, #1
 8017d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d92:	455a      	cmp	r2, fp
 8017d94:	9903      	ldr	r1, [sp, #12]
 8017d96:	b2f0      	uxtb	r0, r6
 8017d98:	eb73 0101 	sbcs.w	r1, r3, r1
 8017d9c:	da01      	bge.n	8017da2 <listen_message_reliably+0x4a>
 8017d9e:	4693      	mov	fp, r2
 8017da0:	9303      	str	r3, [sp, #12]
 8017da2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017da6:	4283      	cmp	r3, r0
 8017da8:	d95f      	bls.n	8017e6a <listen_message_reliably+0x112>
 8017daa:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8017dae:	2102      	movs	r1, #2
 8017db0:	2201      	movs	r2, #1
 8017db2:	00e4      	lsls	r4, r4, #3
 8017db4:	f001 f9fe 	bl	80191b4 <uxr_stream_id>
 8017db8:	4601      	mov	r1, r0
 8017dba:	f104 0520 	add.w	r5, r4, #32
 8017dbe:	463b      	mov	r3, r7
 8017dc0:	464a      	mov	r2, r9
 8017dc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8017dc4:	4445      	add	r5, r8
 8017dc6:	4628      	mov	r0, r5
 8017dc8:	f008 fe8e 	bl	8020ae8 <uxr_update_output_stream_heartbeat_timestamp>
 8017dcc:	eb08 0304 	add.w	r3, r8, r4
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	d0db      	beq.n	8017d8c <listen_message_reliably+0x34>
 8017dd4:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8017dd8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8017ddc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017de0:	4640      	mov	r0, r8
 8017de2:	3501      	adds	r5, #1
 8017de4:	4444      	add	r4, r8
 8017de6:	9304      	str	r3, [sp, #16]
 8017de8:	f000 fd2e 	bl	8018848 <uxr_session_header_offset>
 8017dec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017df0:	2300      	movs	r3, #0
 8017df2:	2211      	movs	r2, #17
 8017df4:	a90c      	add	r1, sp, #48	@ 0x30
 8017df6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017dfa:	9000      	str	r0, [sp, #0]
 8017dfc:	4650      	mov	r0, sl
 8017dfe:	3601      	adds	r6, #1
 8017e00:	f7fc f9c8 	bl	8014194 <ucdr_init_buffer_origin_offset>
 8017e04:	2300      	movs	r3, #0
 8017e06:	2205      	movs	r2, #5
 8017e08:	210b      	movs	r1, #11
 8017e0a:	4650      	mov	r0, sl
 8017e0c:	f001 fb10 	bl	8019430 <uxr_buffer_submessage_header>
 8017e10:	2101      	movs	r1, #1
 8017e12:	8968      	ldrh	r0, [r5, #10]
 8017e14:	f009 f85c 	bl	8020ed0 <uxr_seq_num_add>
 8017e18:	892b      	ldrh	r3, [r5, #8]
 8017e1a:	4602      	mov	r2, r0
 8017e1c:	a90a      	add	r1, sp, #40	@ 0x28
 8017e1e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017e22:	4650      	mov	r0, sl
 8017e24:	9b04      	ldr	r3, [sp, #16]
 8017e26:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017e2a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017e2e:	f002 fd2f 	bl	801a890 <uxr_serialize_HEARTBEAT_Payload>
 8017e32:	2200      	movs	r2, #0
 8017e34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017e36:	4640      	mov	r0, r8
 8017e38:	4611      	mov	r1, r2
 8017e3a:	f000 fcb1 	bl	80187a0 <uxr_stamp_session_header>
 8017e3e:	4650      	mov	r0, sl
 8017e40:	f7fc f9e8 	bl	8014214 <ucdr_buffer_length>
 8017e44:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8017e48:	4602      	mov	r2, r0
 8017e4a:	a90c      	add	r1, sp, #48	@ 0x30
 8017e4c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017e50:	47a8      	blx	r5
 8017e52:	9903      	ldr	r1, [sp, #12]
 8017e54:	b2f0      	uxtb	r0, r6
 8017e56:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8017e5a:	455a      	cmp	r2, fp
 8017e5c:	eb73 0101 	sbcs.w	r1, r3, r1
 8017e60:	db9d      	blt.n	8017d9e <listen_message_reliably+0x46>
 8017e62:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017e66:	4283      	cmp	r3, r0
 8017e68:	d89f      	bhi.n	8017daa <listen_message_reliably+0x52>
 8017e6a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e6e:	9a03      	ldr	r2, [sp, #12]
 8017e70:	429a      	cmp	r2, r3
 8017e72:	bf08      	it	eq
 8017e74:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8017e78:	d019      	beq.n	8017eae <listen_message_reliably+0x156>
 8017e7a:	ebab 0309 	sub.w	r3, fp, r9
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	9d05      	ldr	r5, [sp, #20]
 8017e82:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8017e86:	aa08      	add	r2, sp, #32
 8017e88:	bf08      	it	eq
 8017e8a:	2301      	moveq	r3, #1
 8017e8c:	a907      	add	r1, sp, #28
 8017e8e:	6884      	ldr	r4, [r0, #8]
 8017e90:	429d      	cmp	r5, r3
 8017e92:	6800      	ldr	r0, [r0, #0]
 8017e94:	bfa8      	it	ge
 8017e96:	461d      	movge	r5, r3
 8017e98:	462b      	mov	r3, r5
 8017e9a:	47a0      	blx	r4
 8017e9c:	b948      	cbnz	r0, 8017eb2 <listen_message_reliably+0x15a>
 8017e9e:	9b05      	ldr	r3, [sp, #20]
 8017ea0:	1b5b      	subs	r3, r3, r5
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	9305      	str	r3, [sp, #20]
 8017ea6:	f73f af60 	bgt.w	8017d6a <listen_message_reliably+0x12>
 8017eaa:	4604      	mov	r4, r0
 8017eac:	e012      	b.n	8017ed4 <listen_message_reliably+0x17c>
 8017eae:	9b05      	ldr	r3, [sp, #20]
 8017eb0:	e7e5      	b.n	8017e7e <listen_message_reliably+0x126>
 8017eb2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017eb6:	4604      	mov	r4, r0
 8017eb8:	2500      	movs	r5, #0
 8017eba:	a80c      	add	r0, sp, #48	@ 0x30
 8017ebc:	f7fc f97c 	bl	80141b8 <ucdr_init_buffer>
 8017ec0:	f10d 031a 	add.w	r3, sp, #26
 8017ec4:	aa06      	add	r2, sp, #24
 8017ec6:	a90c      	add	r1, sp, #48	@ 0x30
 8017ec8:	4640      	mov	r0, r8
 8017eca:	f88d 5018 	strb.w	r5, [sp, #24]
 8017ece:	f000 fc7b 	bl	80187c8 <uxr_read_session_header>
 8017ed2:	b918      	cbnz	r0, 8017edc <listen_message_reliably+0x184>
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	b01d      	add	sp, #116	@ 0x74
 8017ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017edc:	4629      	mov	r1, r5
 8017ede:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017ee2:	f001 f995 	bl	8019210 <uxr_stream_id_from_raw>
 8017ee6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017eea:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017eee:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8017ef2:	2e01      	cmp	r6, #1
 8017ef4:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8017ef8:	d04b      	beq.n	8017f92 <listen_message_reliably+0x23a>
 8017efa:	2e02      	cmp	r6, #2
 8017efc:	d00f      	beq.n	8017f1e <listen_message_reliably+0x1c6>
 8017efe:	2e00      	cmp	r6, #0
 8017f00:	d1e8      	bne.n	8017ed4 <listen_message_reliably+0x17c>
 8017f02:	4631      	mov	r1, r6
 8017f04:	4630      	mov	r0, r6
 8017f06:	f001 f983 	bl	8019210 <uxr_stream_id_from_raw>
 8017f0a:	4602      	mov	r2, r0
 8017f0c:	a90c      	add	r1, sp, #48	@ 0x30
 8017f0e:	4640      	mov	r0, r8
 8017f10:	920a      	str	r2, [sp, #40]	@ 0x28
 8017f12:	f7ff fd97 	bl	8017a44 <read_submessage_list>
 8017f16:	4620      	mov	r0, r4
 8017f18:	b01d      	add	sp, #116	@ 0x74
 8017f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f1e:	4629      	mov	r1, r5
 8017f20:	f108 0008 	add.w	r0, r8, #8
 8017f24:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8017f28:	f001 fa60 	bl	80193ec <uxr_get_input_reliable_stream>
 8017f2c:	4607      	mov	r7, r0
 8017f2e:	b338      	cbz	r0, 8017f80 <listen_message_reliably+0x228>
 8017f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f32:	a80c      	add	r0, sp, #48	@ 0x30
 8017f34:	9203      	str	r2, [sp, #12]
 8017f36:	f7fc f971 	bl	801421c <ucdr_buffer_remaining>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	f10d 0019 	add.w	r0, sp, #25
 8017f40:	9a03      	ldr	r2, [sp, #12]
 8017f42:	4651      	mov	r1, sl
 8017f44:	9000      	str	r0, [sp, #0]
 8017f46:	4638      	mov	r0, r7
 8017f48:	f008 f9da 	bl	8020300 <uxr_receive_reliable_message>
 8017f4c:	b1c0      	cbz	r0, 8017f80 <listen_message_reliably+0x228>
 8017f4e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017f52:	b393      	cbz	r3, 8017fba <listen_message_reliably+0x262>
 8017f54:	ae14      	add	r6, sp, #80	@ 0x50
 8017f56:	f04f 0a02 	mov.w	sl, #2
 8017f5a:	e00a      	b.n	8017f72 <listen_message_reliably+0x21a>
 8017f5c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8017f60:	4631      	mov	r1, r6
 8017f62:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8017f66:	4640      	mov	r0, r8
 8017f68:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8017f6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f6e:	f7ff fd69 	bl	8017a44 <read_submessage_list>
 8017f72:	2204      	movs	r2, #4
 8017f74:	4631      	mov	r1, r6
 8017f76:	4638      	mov	r0, r7
 8017f78:	f008 fa44 	bl	8020404 <uxr_next_input_reliable_buffer_available>
 8017f7c:	2800      	cmp	r0, #0
 8017f7e:	d1ed      	bne.n	8017f5c <listen_message_reliably+0x204>
 8017f80:	4640      	mov	r0, r8
 8017f82:	462a      	mov	r2, r5
 8017f84:	4649      	mov	r1, r9
 8017f86:	f7ff fbd9 	bl	801773c <write_submessage_acknack.isra.0>
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	b01d      	add	sp, #116	@ 0x74
 8017f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f92:	4629      	mov	r1, r5
 8017f94:	f108 0008 	add.w	r0, r8, #8
 8017f98:	f001 fa1e 	bl	80193d8 <uxr_get_input_best_effort_stream>
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	d099      	beq.n	8017ed4 <listen_message_reliably+0x17c>
 8017fa0:	4651      	mov	r1, sl
 8017fa2:	f008 f923 	bl	80201ec <uxr_receive_best_effort_message>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	d094      	beq.n	8017ed4 <listen_message_reliably+0x17c>
 8017faa:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017fae:	a90c      	add	r1, sp, #48	@ 0x30
 8017fb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017fb2:	4640      	mov	r0, r8
 8017fb4:	f7ff fd46 	bl	8017a44 <read_submessage_list>
 8017fb8:	e78c      	b.n	8017ed4 <listen_message_reliably+0x17c>
 8017fba:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017fbe:	a90c      	add	r1, sp, #48	@ 0x30
 8017fc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017fc2:	4640      	mov	r0, r8
 8017fc4:	f7ff fd3e 	bl	8017a44 <read_submessage_list>
 8017fc8:	e7c4      	b.n	8017f54 <listen_message_reliably+0x1fc>
 8017fca:	bf00      	nop

08017fcc <uxr_run_session_timeout>:
 8017fcc:	b570      	push	{r4, r5, r6, lr}
 8017fce:	4604      	mov	r4, r0
 8017fd0:	460d      	mov	r5, r1
 8017fd2:	f001 fa73 	bl	80194bc <uxr_millis>
 8017fd6:	4606      	mov	r6, r0
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f7ff fc77 	bl	80178cc <uxr_flash_output_streams>
 8017fde:	4629      	mov	r1, r5
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	f7ff feb9 	bl	8017d58 <listen_message_reliably>
 8017fe6:	f001 fa69 	bl	80194bc <uxr_millis>
 8017fea:	1b83      	subs	r3, r0, r6
 8017fec:	1ae9      	subs	r1, r5, r3
 8017fee:	2900      	cmp	r1, #0
 8017ff0:	dcf6      	bgt.n	8017fe0 <uxr_run_session_timeout+0x14>
 8017ff2:	f104 0008 	add.w	r0, r4, #8
 8017ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ffa:	f001 ba03 	b.w	8019404 <uxr_output_streams_confirmed>
 8017ffe:	bf00      	nop

08018000 <uxr_run_session_until_data>:
 8018000:	b570      	push	{r4, r5, r6, lr}
 8018002:	4604      	mov	r4, r0
 8018004:	460d      	mov	r5, r1
 8018006:	f001 fa59 	bl	80194bc <uxr_millis>
 801800a:	4606      	mov	r6, r0
 801800c:	4620      	mov	r0, r4
 801800e:	f7ff fc5d 	bl	80178cc <uxr_flash_output_streams>
 8018012:	2300      	movs	r3, #0
 8018014:	4629      	mov	r1, r5
 8018016:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801801a:	e005      	b.n	8018028 <uxr_run_session_until_data+0x28>
 801801c:	f001 fa4e 	bl	80194bc <uxr_millis>
 8018020:	1b83      	subs	r3, r0, r6
 8018022:	1ae9      	subs	r1, r5, r3
 8018024:	2900      	cmp	r1, #0
 8018026:	dd07      	ble.n	8018038 <uxr_run_session_until_data+0x38>
 8018028:	4620      	mov	r0, r4
 801802a:	f7ff fe95 	bl	8017d58 <listen_message_reliably>
 801802e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018032:	2800      	cmp	r0, #0
 8018034:	d0f2      	beq.n	801801c <uxr_run_session_until_data+0x1c>
 8018036:	bd70      	pop	{r4, r5, r6, pc}
 8018038:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801803c:	bd70      	pop	{r4, r5, r6, pc}
 801803e:	bf00      	nop

08018040 <uxr_run_session_until_confirm_delivery>:
 8018040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018044:	4606      	mov	r6, r0
 8018046:	460d      	mov	r5, r1
 8018048:	f001 fa38 	bl	80194bc <uxr_millis>
 801804c:	4607      	mov	r7, r0
 801804e:	4630      	mov	r0, r6
 8018050:	f106 0808 	add.w	r8, r6, #8
 8018054:	f7ff fc3a 	bl	80178cc <uxr_flash_output_streams>
 8018058:	2d00      	cmp	r5, #0
 801805a:	db10      	blt.n	801807e <uxr_run_session_until_confirm_delivery+0x3e>
 801805c:	462c      	mov	r4, r5
 801805e:	e006      	b.n	801806e <uxr_run_session_until_confirm_delivery+0x2e>
 8018060:	f7ff fe7a 	bl	8017d58 <listen_message_reliably>
 8018064:	f001 fa2a 	bl	80194bc <uxr_millis>
 8018068:	1bc3      	subs	r3, r0, r7
 801806a:	1aec      	subs	r4, r5, r3
 801806c:	d407      	bmi.n	801807e <uxr_run_session_until_confirm_delivery+0x3e>
 801806e:	4640      	mov	r0, r8
 8018070:	f001 f9c8 	bl	8019404 <uxr_output_streams_confirmed>
 8018074:	4603      	mov	r3, r0
 8018076:	4621      	mov	r1, r4
 8018078:	4630      	mov	r0, r6
 801807a:	2b00      	cmp	r3, #0
 801807c:	d0f0      	beq.n	8018060 <uxr_run_session_until_confirm_delivery+0x20>
 801807e:	4640      	mov	r0, r8
 8018080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018084:	f001 b9be 	b.w	8019404 <uxr_output_streams_confirmed>

08018088 <uxr_run_session_until_all_status>:
 8018088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801808c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8018090:	4606      	mov	r6, r0
 8018092:	4688      	mov	r8, r1
 8018094:	4692      	mov	sl, r2
 8018096:	461f      	mov	r7, r3
 8018098:	f7ff fc18 	bl	80178cc <uxr_flash_output_streams>
 801809c:	f1bb 0f00 	cmp.w	fp, #0
 80180a0:	d004      	beq.n	80180ac <uxr_run_session_until_all_status+0x24>
 80180a2:	465a      	mov	r2, fp
 80180a4:	21ff      	movs	r1, #255	@ 0xff
 80180a6:	4638      	mov	r0, r7
 80180a8:	f00a f92a 	bl	8022300 <memset>
 80180ac:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80180b0:	1e7d      	subs	r5, r7, #1
 80180b2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80180b6:	f001 fa01 	bl	80194bc <uxr_millis>
 80180ba:	4641      	mov	r1, r8
 80180bc:	4681      	mov	r9, r0
 80180be:	4630      	mov	r0, r6
 80180c0:	f7ff fe4a 	bl	8017d58 <listen_message_reliably>
 80180c4:	f001 f9fa 	bl	80194bc <uxr_millis>
 80180c8:	eba0 0009 	sub.w	r0, r0, r9
 80180cc:	eba8 0100 	sub.w	r1, r8, r0
 80180d0:	f1bb 0f00 	cmp.w	fp, #0
 80180d4:	d029      	beq.n	801812a <uxr_run_session_until_all_status+0xa2>
 80180d6:	46ae      	mov	lr, r5
 80180d8:	f04f 0c00 	mov.w	ip, #0
 80180dc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80180e0:	2cff      	cmp	r4, #255	@ 0xff
 80180e2:	d015      	beq.n	8018110 <uxr_run_session_until_all_status+0x88>
 80180e4:	f10c 0c01 	add.w	ip, ip, #1
 80180e8:	45e3      	cmp	fp, ip
 80180ea:	d8f7      	bhi.n	80180dc <uxr_run_session_until_all_status+0x54>
 80180ec:	2300      	movs	r3, #0
 80180ee:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80180f0:	e000      	b.n	80180f4 <uxr_run_session_until_all_status+0x6c>
 80180f2:	b158      	cbz	r0, 801810c <uxr_run_session_until_all_status+0x84>
 80180f4:	462b      	mov	r3, r5
 80180f6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80180fa:	3302      	adds	r3, #2
 80180fc:	2801      	cmp	r0, #1
 80180fe:	eba3 0307 	sub.w	r3, r3, r7
 8018102:	bf8c      	ite	hi
 8018104:	2000      	movhi	r0, #0
 8018106:	2001      	movls	r0, #1
 8018108:	459b      	cmp	fp, r3
 801810a:	d8f2      	bhi.n	80180f2 <uxr_run_session_until_all_status+0x6a>
 801810c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018110:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018114:	f10c 0c01 	add.w	ip, ip, #1
 8018118:	45dc      	cmp	ip, fp
 801811a:	d201      	bcs.n	8018120 <uxr_run_session_until_all_status+0x98>
 801811c:	2b00      	cmp	r3, #0
 801811e:	d0dd      	beq.n	80180dc <uxr_run_session_until_all_status+0x54>
 8018120:	2900      	cmp	r1, #0
 8018122:	dde3      	ble.n	80180ec <uxr_run_session_until_all_status+0x64>
 8018124:	2b00      	cmp	r3, #0
 8018126:	d1ca      	bne.n	80180be <uxr_run_session_until_all_status+0x36>
 8018128:	e7e0      	b.n	80180ec <uxr_run_session_until_all_status+0x64>
 801812a:	2001      	movs	r0, #1
 801812c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018134:	0000      	movs	r0, r0
	...

08018138 <uxr_sync_session>:
 8018138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801813a:	b093      	sub	sp, #76	@ 0x4c
 801813c:	4604      	mov	r4, r0
 801813e:	460d      	mov	r5, r1
 8018140:	f000 fb82 	bl	8018848 <uxr_session_header_offset>
 8018144:	2214      	movs	r2, #20
 8018146:	2300      	movs	r3, #0
 8018148:	9000      	str	r0, [sp, #0]
 801814a:	a80a      	add	r0, sp, #40	@ 0x28
 801814c:	eb0d 0102 	add.w	r1, sp, r2
 8018150:	f7fc f820 	bl	8014194 <ucdr_init_buffer_origin_offset>
 8018154:	2300      	movs	r3, #0
 8018156:	2208      	movs	r2, #8
 8018158:	210e      	movs	r1, #14
 801815a:	a80a      	add	r0, sp, #40	@ 0x28
 801815c:	f001 f968 	bl	8019430 <uxr_buffer_submessage_header>
 8018160:	f001 f9c8 	bl	80194f4 <uxr_nanos>
 8018164:	460e      	mov	r6, r1
 8018166:	4607      	mov	r7, r0
 8018168:	a31b      	add	r3, pc, #108	@ (adr r3, 80181d8 <uxr_sync_session+0xa0>)
 801816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801816e:	f7e8 f91f 	bl	80003b0 <__aeabi_ldivmod>
 8018172:	4631      	mov	r1, r6
 8018174:	9003      	str	r0, [sp, #12]
 8018176:	4638      	mov	r0, r7
 8018178:	a317      	add	r3, pc, #92	@ (adr r3, 80181d8 <uxr_sync_session+0xa0>)
 801817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801817e:	f7e8 f917 	bl	80003b0 <__aeabi_ldivmod>
 8018182:	a903      	add	r1, sp, #12
 8018184:	a80a      	add	r0, sp, #40	@ 0x28
 8018186:	9204      	str	r2, [sp, #16]
 8018188:	f002 fbaa 	bl	801a8e0 <uxr_serialize_TIMESTAMP_Payload>
 801818c:	2200      	movs	r2, #0
 801818e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018190:	4620      	mov	r0, r4
 8018192:	4611      	mov	r1, r2
 8018194:	f000 fb04 	bl	80187a0 <uxr_stamp_session_header>
 8018198:	a80a      	add	r0, sp, #40	@ 0x28
 801819a:	f7fc f83b 	bl	8014214 <ucdr_buffer_length>
 801819e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80181a0:	4602      	mov	r2, r0
 80181a2:	a905      	add	r1, sp, #20
 80181a4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80181a8:	47b0      	blx	r6
 80181aa:	f001 f987 	bl	80194bc <uxr_millis>
 80181ae:	2300      	movs	r3, #0
 80181b0:	4606      	mov	r6, r0
 80181b2:	4629      	mov	r1, r5
 80181b4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80181b8:	e000      	b.n	80181bc <uxr_sync_session+0x84>
 80181ba:	b950      	cbnz	r0, 80181d2 <uxr_sync_session+0x9a>
 80181bc:	4620      	mov	r0, r4
 80181be:	f7ff fdcb 	bl	8017d58 <listen_message_reliably>
 80181c2:	f001 f97b 	bl	80194bc <uxr_millis>
 80181c6:	1b83      	subs	r3, r0, r6
 80181c8:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80181cc:	1ae9      	subs	r1, r5, r3
 80181ce:	2900      	cmp	r1, #0
 80181d0:	dcf3      	bgt.n	80181ba <uxr_sync_session+0x82>
 80181d2:	b013      	add	sp, #76	@ 0x4c
 80181d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181d6:	bf00      	nop
 80181d8:	3b9aca00 	.word	0x3b9aca00
 80181dc:	00000000 	.word	0x00000000

080181e0 <uxr_run_session_until_pong>:
 80181e0:	b570      	push	{r4, r5, r6, lr}
 80181e2:	4604      	mov	r4, r0
 80181e4:	460d      	mov	r5, r1
 80181e6:	f001 f969 	bl	80194bc <uxr_millis>
 80181ea:	4606      	mov	r6, r0
 80181ec:	4620      	mov	r0, r4
 80181ee:	f7ff fb6d 	bl	80178cc <uxr_flash_output_streams>
 80181f2:	2300      	movs	r3, #0
 80181f4:	4629      	mov	r1, r5
 80181f6:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80181fa:	e005      	b.n	8018208 <uxr_run_session_until_pong+0x28>
 80181fc:	f001 f95e 	bl	80194bc <uxr_millis>
 8018200:	1b83      	subs	r3, r0, r6
 8018202:	1ae9      	subs	r1, r5, r3
 8018204:	2900      	cmp	r1, #0
 8018206:	dd0c      	ble.n	8018222 <uxr_run_session_until_pong+0x42>
 8018208:	4620      	mov	r0, r4
 801820a:	f7ff fda5 	bl	8017d58 <listen_message_reliably>
 801820e:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8018212:	2800      	cmp	r0, #0
 8018214:	d0f2      	beq.n	80181fc <uxr_run_session_until_pong+0x1c>
 8018216:	f1a0 0001 	sub.w	r0, r0, #1
 801821a:	fab0 f080 	clz	r0, r0
 801821e:	0940      	lsrs	r0, r0, #5
 8018220:	bd70      	pop	{r4, r5, r6, pc}
 8018222:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8018226:	f1a0 0001 	sub.w	r0, r0, #1
 801822a:	fab0 f080 	clz	r0, r0
 801822e:	0940      	lsrs	r0, r0, #5
 8018230:	bd70      	pop	{r4, r5, r6, pc}
 8018232:	bf00      	nop

08018234 <wait_session_status>:
 8018234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018238:	4604      	mov	r4, r0
 801823a:	b09d      	sub	sp, #116	@ 0x74
 801823c:	20ff      	movs	r0, #255	@ 0xff
 801823e:	9303      	str	r3, [sp, #12]
 8018240:	7160      	strb	r0, [r4, #5]
 8018242:	2b00      	cmp	r3, #0
 8018244:	f000 80b6 	beq.w	80183b4 <wait_session_status+0x180>
 8018248:	4689      	mov	r9, r1
 801824a:	4692      	mov	sl, r2
 801824c:	f04f 0b00 	mov.w	fp, #0
 8018250:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018252:	4652      	mov	r2, sl
 8018254:	4649      	mov	r1, r9
 8018256:	e9d3 0500 	ldrd	r0, r5, [r3]
 801825a:	47a8      	blx	r5
 801825c:	f001 f92e 	bl	80194bc <uxr_millis>
 8018260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018264:	4605      	mov	r5, r0
 8018266:	e009      	b.n	801827c <wait_session_status+0x48>
 8018268:	f001 f928 	bl	80194bc <uxr_millis>
 801826c:	1b40      	subs	r0, r0, r5
 801826e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018272:	2b00      	cmp	r3, #0
 8018274:	dd40      	ble.n	80182f8 <wait_session_status+0xc4>
 8018276:	7960      	ldrb	r0, [r4, #5]
 8018278:	28ff      	cmp	r0, #255	@ 0xff
 801827a:	d145      	bne.n	8018308 <wait_session_status+0xd4>
 801827c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801827e:	a908      	add	r1, sp, #32
 8018280:	6896      	ldr	r6, [r2, #8]
 8018282:	6810      	ldr	r0, [r2, #0]
 8018284:	aa09      	add	r2, sp, #36	@ 0x24
 8018286:	47b0      	blx	r6
 8018288:	2800      	cmp	r0, #0
 801828a:	d0ed      	beq.n	8018268 <wait_session_status+0x34>
 801828c:	a80c      	add	r0, sp, #48	@ 0x30
 801828e:	2600      	movs	r6, #0
 8018290:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018294:	f7fb ff90 	bl	80141b8 <ucdr_init_buffer>
 8018298:	f10d 031e 	add.w	r3, sp, #30
 801829c:	aa07      	add	r2, sp, #28
 801829e:	a90c      	add	r1, sp, #48	@ 0x30
 80182a0:	4620      	mov	r0, r4
 80182a2:	f88d 601c 	strb.w	r6, [sp, #28]
 80182a6:	f000 fa8f 	bl	80187c8 <uxr_read_session_header>
 80182aa:	2800      	cmp	r0, #0
 80182ac:	d0dc      	beq.n	8018268 <wait_session_status+0x34>
 80182ae:	4631      	mov	r1, r6
 80182b0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80182b4:	f000 ffac 	bl	8019210 <uxr_stream_id_from_raw>
 80182b8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80182bc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80182c0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80182c4:	2f01      	cmp	r7, #1
 80182c6:	9302      	str	r3, [sp, #8]
 80182c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80182cc:	d05c      	beq.n	8018388 <wait_session_status+0x154>
 80182ce:	2f02      	cmp	r7, #2
 80182d0:	d020      	beq.n	8018314 <wait_session_status+0xe0>
 80182d2:	2f00      	cmp	r7, #0
 80182d4:	d1c8      	bne.n	8018268 <wait_session_status+0x34>
 80182d6:	4639      	mov	r1, r7
 80182d8:	4638      	mov	r0, r7
 80182da:	f000 ff99 	bl	8019210 <uxr_stream_id_from_raw>
 80182de:	a90c      	add	r1, sp, #48	@ 0x30
 80182e0:	4602      	mov	r2, r0
 80182e2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80182e4:	4620      	mov	r0, r4
 80182e6:	f7ff fbad 	bl	8017a44 <read_submessage_list>
 80182ea:	f001 f8e7 	bl	80194bc <uxr_millis>
 80182ee:	1b40      	subs	r0, r0, r5
 80182f0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	dcbe      	bgt.n	8018276 <wait_session_status+0x42>
 80182f8:	f10b 0b01 	add.w	fp, fp, #1
 80182fc:	9b03      	ldr	r3, [sp, #12]
 80182fe:	7960      	ldrb	r0, [r4, #5]
 8018300:	455b      	cmp	r3, fp
 8018302:	d001      	beq.n	8018308 <wait_session_status+0xd4>
 8018304:	28ff      	cmp	r0, #255	@ 0xff
 8018306:	d0a3      	beq.n	8018250 <wait_session_status+0x1c>
 8018308:	38ff      	subs	r0, #255	@ 0xff
 801830a:	bf18      	it	ne
 801830c:	2001      	movne	r0, #1
 801830e:	b01d      	add	sp, #116	@ 0x74
 8018310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018314:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8018318:	4631      	mov	r1, r6
 801831a:	f104 0008 	add.w	r0, r4, #8
 801831e:	9304      	str	r3, [sp, #16]
 8018320:	f001 f864 	bl	80193ec <uxr_get_input_reliable_stream>
 8018324:	4680      	mov	r8, r0
 8018326:	b348      	cbz	r0, 801837c <wait_session_status+0x148>
 8018328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801832a:	a80c      	add	r0, sp, #48	@ 0x30
 801832c:	9205      	str	r2, [sp, #20]
 801832e:	f7fb ff75 	bl	801421c <ucdr_buffer_remaining>
 8018332:	4603      	mov	r3, r0
 8018334:	f10d 001d 	add.w	r0, sp, #29
 8018338:	9a05      	ldr	r2, [sp, #20]
 801833a:	9000      	str	r0, [sp, #0]
 801833c:	4640      	mov	r0, r8
 801833e:	9902      	ldr	r1, [sp, #8]
 8018340:	f007 ffde 	bl	8020300 <uxr_receive_reliable_message>
 8018344:	b1d0      	cbz	r0, 801837c <wait_session_status+0x148>
 8018346:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d03a      	beq.n	80183c4 <wait_session_status+0x190>
 801834e:	9f04      	ldr	r7, [sp, #16]
 8018350:	e00a      	b.n	8018368 <wait_session_status+0x134>
 8018352:	f04f 0302 	mov.w	r3, #2
 8018356:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801835a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801835e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8018362:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018364:	f7ff fb6e 	bl	8017a44 <read_submessage_list>
 8018368:	a914      	add	r1, sp, #80	@ 0x50
 801836a:	2204      	movs	r2, #4
 801836c:	4640      	mov	r0, r8
 801836e:	f008 f849 	bl	8020404 <uxr_next_input_reliable_buffer_available>
 8018372:	4603      	mov	r3, r0
 8018374:	a914      	add	r1, sp, #80	@ 0x50
 8018376:	4620      	mov	r0, r4
 8018378:	2b00      	cmp	r3, #0
 801837a:	d1ea      	bne.n	8018352 <wait_session_status+0x11e>
 801837c:	4632      	mov	r2, r6
 801837e:	9904      	ldr	r1, [sp, #16]
 8018380:	4620      	mov	r0, r4
 8018382:	f7ff f9db 	bl	801773c <write_submessage_acknack.isra.0>
 8018386:	e76f      	b.n	8018268 <wait_session_status+0x34>
 8018388:	4631      	mov	r1, r6
 801838a:	f104 0008 	add.w	r0, r4, #8
 801838e:	f001 f823 	bl	80193d8 <uxr_get_input_best_effort_stream>
 8018392:	2800      	cmp	r0, #0
 8018394:	f43f af68 	beq.w	8018268 <wait_session_status+0x34>
 8018398:	9902      	ldr	r1, [sp, #8]
 801839a:	f007 ff27 	bl	80201ec <uxr_receive_best_effort_message>
 801839e:	2800      	cmp	r0, #0
 80183a0:	f43f af62 	beq.w	8018268 <wait_session_status+0x34>
 80183a4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80183a8:	a90c      	add	r1, sp, #48	@ 0x30
 80183aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80183ac:	4620      	mov	r0, r4
 80183ae:	f7ff fb49 	bl	8017a44 <read_submessage_list>
 80183b2:	e759      	b.n	8018268 <wait_session_status+0x34>
 80183b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80183b6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80183ba:	47a0      	blx	r4
 80183bc:	2001      	movs	r0, #1
 80183be:	b01d      	add	sp, #116	@ 0x74
 80183c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183c4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80183c8:	a90c      	add	r1, sp, #48	@ 0x30
 80183ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80183cc:	4620      	mov	r0, r4
 80183ce:	f7ff fb39 	bl	8017a44 <read_submessage_list>
 80183d2:	e7bc      	b.n	801834e <wait_session_status+0x11a>

080183d4 <uxr_delete_session_retries>:
 80183d4:	b530      	push	{r4, r5, lr}
 80183d6:	b08f      	sub	sp, #60	@ 0x3c
 80183d8:	4604      	mov	r4, r0
 80183da:	460d      	mov	r5, r1
 80183dc:	f000 fa34 	bl	8018848 <uxr_session_header_offset>
 80183e0:	2300      	movs	r3, #0
 80183e2:	2210      	movs	r2, #16
 80183e4:	a902      	add	r1, sp, #8
 80183e6:	9000      	str	r0, [sp, #0]
 80183e8:	a806      	add	r0, sp, #24
 80183ea:	f7fb fed3 	bl	8014194 <ucdr_init_buffer_origin_offset>
 80183ee:	a906      	add	r1, sp, #24
 80183f0:	4620      	mov	r0, r4
 80183f2:	f000 f979 	bl	80186e8 <uxr_buffer_delete_session>
 80183f6:	2200      	movs	r2, #0
 80183f8:	9b06      	ldr	r3, [sp, #24]
 80183fa:	4620      	mov	r0, r4
 80183fc:	4611      	mov	r1, r2
 80183fe:	f000 f9cf 	bl	80187a0 <uxr_stamp_session_header>
 8018402:	a806      	add	r0, sp, #24
 8018404:	f7fb ff06 	bl	8014214 <ucdr_buffer_length>
 8018408:	462b      	mov	r3, r5
 801840a:	4602      	mov	r2, r0
 801840c:	a902      	add	r1, sp, #8
 801840e:	4620      	mov	r0, r4
 8018410:	f7ff ff10 	bl	8018234 <wait_session_status>
 8018414:	b118      	cbz	r0, 801841e <uxr_delete_session_retries+0x4a>
 8018416:	7960      	ldrb	r0, [r4, #5]
 8018418:	fab0 f080 	clz	r0, r0
 801841c:	0940      	lsrs	r0, r0, #5
 801841e:	b00f      	add	sp, #60	@ 0x3c
 8018420:	bd30      	pop	{r4, r5, pc}
 8018422:	bf00      	nop

08018424 <uxr_create_session>:
 8018424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018428:	f100 0b08 	add.w	fp, r0, #8
 801842c:	4604      	mov	r4, r0
 801842e:	b0ab      	sub	sp, #172	@ 0xac
 8018430:	4658      	mov	r0, fp
 8018432:	465e      	mov	r6, fp
 8018434:	f000 ff22 	bl	801927c <uxr_reset_stream_storage>
 8018438:	4620      	mov	r0, r4
 801843a:	f000 fa05 	bl	8018848 <uxr_session_header_offset>
 801843e:	2300      	movs	r3, #0
 8018440:	221c      	movs	r2, #28
 8018442:	a90b      	add	r1, sp, #44	@ 0x2c
 8018444:	9000      	str	r0, [sp, #0]
 8018446:	a812      	add	r0, sp, #72	@ 0x48
 8018448:	f7fb fea4 	bl	8014194 <ucdr_init_buffer_origin_offset>
 801844c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801844e:	a912      	add	r1, sp, #72	@ 0x48
 8018450:	4620      	mov	r0, r4
 8018452:	8a1a      	ldrh	r2, [r3, #16]
 8018454:	3a04      	subs	r2, #4
 8018456:	b292      	uxth	r2, r2
 8018458:	f000 f91c 	bl	8018694 <uxr_buffer_create_session>
 801845c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801845e:	4620      	mov	r0, r4
 8018460:	f000 f98a 	bl	8018778 <uxr_stamp_create_session_header>
 8018464:	a812      	add	r0, sp, #72	@ 0x48
 8018466:	f7fb fed5 	bl	8014214 <ucdr_buffer_length>
 801846a:	23ff      	movs	r3, #255	@ 0xff
 801846c:	4681      	mov	r9, r0
 801846e:	7163      	strb	r3, [r4, #5]
 8018470:	230a      	movs	r3, #10
 8018472:	9303      	str	r3, [sp, #12]
 8018474:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018476:	464a      	mov	r2, r9
 8018478:	a90b      	add	r1, sp, #44	@ 0x2c
 801847a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801847e:	47a8      	blx	r5
 8018480:	f001 f81c 	bl	80194bc <uxr_millis>
 8018484:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018488:	4605      	mov	r5, r0
 801848a:	e009      	b.n	80184a0 <uxr_create_session+0x7c>
 801848c:	f001 f816 	bl	80194bc <uxr_millis>
 8018490:	1b40      	subs	r0, r0, r5
 8018492:	7962      	ldrb	r2, [r4, #5]
 8018494:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018498:	2b00      	cmp	r3, #0
 801849a:	dd38      	ble.n	801850e <uxr_create_session+0xea>
 801849c:	2aff      	cmp	r2, #255	@ 0xff
 801849e:	d13c      	bne.n	801851a <uxr_create_session+0xf6>
 80184a0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80184a2:	a907      	add	r1, sp, #28
 80184a4:	6897      	ldr	r7, [r2, #8]
 80184a6:	6810      	ldr	r0, [r2, #0]
 80184a8:	aa08      	add	r2, sp, #32
 80184aa:	47b8      	blx	r7
 80184ac:	2800      	cmp	r0, #0
 80184ae:	d0ed      	beq.n	801848c <uxr_create_session+0x68>
 80184b0:	a81a      	add	r0, sp, #104	@ 0x68
 80184b2:	2700      	movs	r7, #0
 80184b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80184b8:	f7fb fe7e 	bl	80141b8 <ucdr_init_buffer>
 80184bc:	f10d 031a 	add.w	r3, sp, #26
 80184c0:	aa06      	add	r2, sp, #24
 80184c2:	a91a      	add	r1, sp, #104	@ 0x68
 80184c4:	4620      	mov	r0, r4
 80184c6:	f88d 7018 	strb.w	r7, [sp, #24]
 80184ca:	f000 f97d 	bl	80187c8 <uxr_read_session_header>
 80184ce:	2800      	cmp	r0, #0
 80184d0:	d0dc      	beq.n	801848c <uxr_create_session+0x68>
 80184d2:	4639      	mov	r1, r7
 80184d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80184d8:	f000 fe9a 	bl	8019210 <uxr_stream_id_from_raw>
 80184dc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80184e0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80184e4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80184e8:	2f01      	cmp	r7, #1
 80184ea:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80184ee:	d053      	beq.n	8018598 <uxr_create_session+0x174>
 80184f0:	2f02      	cmp	r7, #2
 80184f2:	d018      	beq.n	8018526 <uxr_create_session+0x102>
 80184f4:	2f00      	cmp	r7, #0
 80184f6:	d1c9      	bne.n	801848c <uxr_create_session+0x68>
 80184f8:	4639      	mov	r1, r7
 80184fa:	4638      	mov	r0, r7
 80184fc:	f000 fe88 	bl	8019210 <uxr_stream_id_from_raw>
 8018500:	a91a      	add	r1, sp, #104	@ 0x68
 8018502:	4602      	mov	r2, r0
 8018504:	900a      	str	r0, [sp, #40]	@ 0x28
 8018506:	4620      	mov	r0, r4
 8018508:	f7ff fa9c 	bl	8017a44 <read_submessage_list>
 801850c:	e7be      	b.n	801848c <uxr_create_session+0x68>
 801850e:	9b03      	ldr	r3, [sp, #12]
 8018510:	3b01      	subs	r3, #1
 8018512:	9303      	str	r3, [sp, #12]
 8018514:	d001      	beq.n	801851a <uxr_create_session+0xf6>
 8018516:	2aff      	cmp	r2, #255	@ 0xff
 8018518:	d0ac      	beq.n	8018474 <uxr_create_session+0x50>
 801851a:	2a00      	cmp	r2, #0
 801851c:	d051      	beq.n	80185c2 <uxr_create_session+0x19e>
 801851e:	2000      	movs	r0, #0
 8018520:	b02b      	add	sp, #172	@ 0xac
 8018522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018526:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801852a:	4641      	mov	r1, r8
 801852c:	4630      	mov	r0, r6
 801852e:	9304      	str	r3, [sp, #16]
 8018530:	f000 ff5c 	bl	80193ec <uxr_get_input_reliable_stream>
 8018534:	4682      	mov	sl, r0
 8018536:	b348      	cbz	r0, 801858c <uxr_create_session+0x168>
 8018538:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801853a:	a81a      	add	r0, sp, #104	@ 0x68
 801853c:	9205      	str	r2, [sp, #20]
 801853e:	f7fb fe6d 	bl	801421c <ucdr_buffer_remaining>
 8018542:	4603      	mov	r3, r0
 8018544:	f10d 0019 	add.w	r0, sp, #25
 8018548:	9a05      	ldr	r2, [sp, #20]
 801854a:	4659      	mov	r1, fp
 801854c:	9000      	str	r0, [sp, #0]
 801854e:	4650      	mov	r0, sl
 8018550:	f007 fed6 	bl	8020300 <uxr_receive_reliable_message>
 8018554:	b1d0      	cbz	r0, 801858c <uxr_create_session+0x168>
 8018556:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d038      	beq.n	80185d0 <uxr_create_session+0x1ac>
 801855e:	9f04      	ldr	r7, [sp, #16]
 8018560:	e00a      	b.n	8018578 <uxr_create_session+0x154>
 8018562:	f04f 0302 	mov.w	r3, #2
 8018566:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801856a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801856e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018572:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018574:	f7ff fa66 	bl	8017a44 <read_submessage_list>
 8018578:	a922      	add	r1, sp, #136	@ 0x88
 801857a:	2204      	movs	r2, #4
 801857c:	4650      	mov	r0, sl
 801857e:	f007 ff41 	bl	8020404 <uxr_next_input_reliable_buffer_available>
 8018582:	4603      	mov	r3, r0
 8018584:	a922      	add	r1, sp, #136	@ 0x88
 8018586:	4620      	mov	r0, r4
 8018588:	2b00      	cmp	r3, #0
 801858a:	d1ea      	bne.n	8018562 <uxr_create_session+0x13e>
 801858c:	4642      	mov	r2, r8
 801858e:	9904      	ldr	r1, [sp, #16]
 8018590:	4620      	mov	r0, r4
 8018592:	f7ff f8d3 	bl	801773c <write_submessage_acknack.isra.0>
 8018596:	e779      	b.n	801848c <uxr_create_session+0x68>
 8018598:	4641      	mov	r1, r8
 801859a:	4630      	mov	r0, r6
 801859c:	f000 ff1c 	bl	80193d8 <uxr_get_input_best_effort_stream>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	f43f af73 	beq.w	801848c <uxr_create_session+0x68>
 80185a6:	4659      	mov	r1, fp
 80185a8:	f007 fe20 	bl	80201ec <uxr_receive_best_effort_message>
 80185ac:	2800      	cmp	r0, #0
 80185ae:	f43f af6d 	beq.w	801848c <uxr_create_session+0x68>
 80185b2:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80185b6:	a91a      	add	r1, sp, #104	@ 0x68
 80185b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185ba:	4620      	mov	r0, r4
 80185bc:	f7ff fa42 	bl	8017a44 <read_submessage_list>
 80185c0:	e764      	b.n	801848c <uxr_create_session+0x68>
 80185c2:	4630      	mov	r0, r6
 80185c4:	f000 fe5a 	bl	801927c <uxr_reset_stream_storage>
 80185c8:	2001      	movs	r0, #1
 80185ca:	b02b      	add	sp, #172	@ 0xac
 80185cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d0:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80185d4:	a91a      	add	r1, sp, #104	@ 0x68
 80185d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185d8:	4620      	mov	r0, r4
 80185da:	f7ff fa33 	bl	8017a44 <read_submessage_list>
 80185de:	e7be      	b.n	801855e <uxr_create_session+0x13a>

080185e0 <uxr_prepare_stream_to_write_submessage>:
 80185e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185e4:	b082      	sub	sp, #8
 80185e6:	4604      	mov	r4, r0
 80185e8:	4610      	mov	r0, r2
 80185ea:	4615      	mov	r5, r2
 80185ec:	461e      	mov	r6, r3
 80185ee:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80185f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80185f6:	f105 0904 	add.w	r9, r5, #4
 80185fa:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80185fe:	9101      	str	r1, [sp, #4]
 8018600:	f000 ff56 	bl	80194b0 <uxr_submessage_padding>
 8018604:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018608:	4481      	add	r9, r0
 801860a:	2b01      	cmp	r3, #1
 801860c:	d01d      	beq.n	801864a <uxr_prepare_stream_to_write_submessage+0x6a>
 801860e:	2b02      	cmp	r3, #2
 8018610:	d116      	bne.n	8018640 <uxr_prepare_stream_to_write_submessage+0x60>
 8018612:	f104 0008 	add.w	r0, r4, #8
 8018616:	4651      	mov	r1, sl
 8018618:	f000 fed2 	bl	80193c0 <uxr_get_output_reliable_stream>
 801861c:	4604      	mov	r4, r0
 801861e:	b158      	cbz	r0, 8018638 <uxr_prepare_stream_to_write_submessage+0x58>
 8018620:	4649      	mov	r1, r9
 8018622:	4632      	mov	r2, r6
 8018624:	f008 f8b2 	bl	802078c <uxr_prepare_reliable_buffer_to_write>
 8018628:	4604      	mov	r4, r0
 801862a:	b12c      	cbz	r4, 8018638 <uxr_prepare_stream_to_write_submessage+0x58>
 801862c:	4643      	mov	r3, r8
 801862e:	b2aa      	uxth	r2, r5
 8018630:	4639      	mov	r1, r7
 8018632:	4630      	mov	r0, r6
 8018634:	f000 fefc 	bl	8019430 <uxr_buffer_submessage_header>
 8018638:	4620      	mov	r0, r4
 801863a:	b002      	add	sp, #8
 801863c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018640:	2400      	movs	r4, #0
 8018642:	4620      	mov	r0, r4
 8018644:	b002      	add	sp, #8
 8018646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801864a:	f104 0008 	add.w	r0, r4, #8
 801864e:	4651      	mov	r1, sl
 8018650:	f000 feae 	bl	80193b0 <uxr_get_output_best_effort_stream>
 8018654:	4604      	mov	r4, r0
 8018656:	2800      	cmp	r0, #0
 8018658:	d0ee      	beq.n	8018638 <uxr_prepare_stream_to_write_submessage+0x58>
 801865a:	4649      	mov	r1, r9
 801865c:	4632      	mov	r2, r6
 801865e:	f007 ffc1 	bl	80205e4 <uxr_prepare_best_effort_buffer_to_write>
 8018662:	4604      	mov	r4, r0
 8018664:	e7e1      	b.n	801862a <uxr_prepare_stream_to_write_submessage+0x4a>
 8018666:	bf00      	nop

08018668 <uxr_init_session_info>:
 8018668:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801866c:	23ff      	movs	r3, #255	@ 0xff
 801866e:	7102      	strb	r2, [r0, #4]
 8018670:	f880 c001 	strb.w	ip, [r0, #1]
 8018674:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018678:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801867c:	7001      	strb	r1, [r0, #0]
 801867e:	f880 c002 	strb.w	ip, [r0, #2]
 8018682:	7143      	strb	r3, [r0, #5]
 8018684:	70c2      	strb	r2, [r0, #3]
 8018686:	b500      	push	{lr}
 8018688:	f04f 0e09 	mov.w	lr, #9
 801868c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018690:	f85d fb04 	ldr.w	pc, [sp], #4

08018694 <uxr_buffer_create_session>:
 8018694:	b530      	push	{r4, r5, lr}
 8018696:	2300      	movs	r3, #0
 8018698:	b089      	sub	sp, #36	@ 0x24
 801869a:	4d12      	ldr	r5, [pc, #72]	@ (80186e4 <uxr_buffer_create_session+0x50>)
 801869c:	460c      	mov	r4, r1
 801869e:	9307      	str	r3, [sp, #28]
 80186a0:	4619      	mov	r1, r3
 80186a2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80186a6:	2201      	movs	r2, #1
 80186a8:	9301      	str	r3, [sp, #4]
 80186aa:	80c2      	strh	r2, [r0, #6]
 80186ac:	f88d 2004 	strb.w	r2, [sp, #4]
 80186b0:	682a      	ldr	r2, [r5, #0]
 80186b2:	9303      	str	r3, [sp, #12]
 80186b4:	9200      	str	r2, [sp, #0]
 80186b6:	88aa      	ldrh	r2, [r5, #4]
 80186b8:	9306      	str	r3, [sp, #24]
 80186ba:	f8ad 2006 	strh.w	r2, [sp, #6]
 80186be:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80186c2:	9202      	str	r2, [sp, #8]
 80186c4:	7802      	ldrb	r2, [r0, #0]
 80186c6:	4620      	mov	r0, r4
 80186c8:	f88d 200c 	strb.w	r2, [sp, #12]
 80186cc:	2210      	movs	r2, #16
 80186ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80186d2:	f000 fead 	bl	8019430 <uxr_buffer_submessage_header>
 80186d6:	4669      	mov	r1, sp
 80186d8:	4620      	mov	r0, r4
 80186da:	f001 ff1f 	bl	801a51c <uxr_serialize_CREATE_CLIENT_Payload>
 80186de:	b009      	add	sp, #36	@ 0x24
 80186e0:	bd30      	pop	{r4, r5, pc}
 80186e2:	bf00      	nop
 80186e4:	08023474 	.word	0x08023474

080186e8 <uxr_buffer_delete_session>:
 80186e8:	4a0c      	ldr	r2, [pc, #48]	@ (801871c <uxr_buffer_delete_session+0x34>)
 80186ea:	2302      	movs	r3, #2
 80186ec:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80186f0:	b510      	push	{r4, lr}
 80186f2:	460c      	mov	r4, r1
 80186f4:	b082      	sub	sp, #8
 80186f6:	8911      	ldrh	r1, [r2, #8]
 80186f8:	2204      	movs	r2, #4
 80186fa:	80c3      	strh	r3, [r0, #6]
 80186fc:	2300      	movs	r3, #0
 80186fe:	f8ad 1006 	strh.w	r1, [sp, #6]
 8018702:	4620      	mov	r0, r4
 8018704:	2103      	movs	r1, #3
 8018706:	f8ad c004 	strh.w	ip, [sp, #4]
 801870a:	f000 fe91 	bl	8019430 <uxr_buffer_submessage_header>
 801870e:	a901      	add	r1, sp, #4
 8018710:	4620      	mov	r0, r4
 8018712:	f001 ffc1 	bl	801a698 <uxr_serialize_DELETE_Payload>
 8018716:	b002      	add	sp, #8
 8018718:	bd10      	pop	{r4, pc}
 801871a:	bf00      	nop
 801871c:	08023474 	.word	0x08023474

08018720 <uxr_read_create_session_status>:
 8018720:	b510      	push	{r4, lr}
 8018722:	460b      	mov	r3, r1
 8018724:	b088      	sub	sp, #32
 8018726:	4604      	mov	r4, r0
 8018728:	a901      	add	r1, sp, #4
 801872a:	4618      	mov	r0, r3
 801872c:	f001 ffc4 	bl	801a6b8 <uxr_deserialize_STATUS_AGENT_Payload>
 8018730:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018734:	7163      	strb	r3, [r4, #5]
 8018736:	b008      	add	sp, #32
 8018738:	bd10      	pop	{r4, pc}
 801873a:	bf00      	nop

0801873c <uxr_read_delete_session_status>:
 801873c:	b510      	push	{r4, lr}
 801873e:	b084      	sub	sp, #16
 8018740:	4604      	mov	r4, r0
 8018742:	4608      	mov	r0, r1
 8018744:	a902      	add	r1, sp, #8
 8018746:	f001 ffe7 	bl	801a718 <uxr_deserialize_STATUS_Payload>
 801874a:	88e3      	ldrh	r3, [r4, #6]
 801874c:	2b02      	cmp	r3, #2
 801874e:	d001      	beq.n	8018754 <uxr_read_delete_session_status+0x18>
 8018750:	b004      	add	sp, #16
 8018752:	bd10      	pop	{r4, pc}
 8018754:	f10d 000a 	add.w	r0, sp, #10
 8018758:	f7fe fe72 	bl	8017440 <uxr_object_id_from_raw>
 801875c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018760:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8018764:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018768:	b29b      	uxth	r3, r3
 801876a:	2b02      	cmp	r3, #2
 801876c:	d1f0      	bne.n	8018750 <uxr_read_delete_session_status+0x14>
 801876e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018772:	7163      	strb	r3, [r4, #5]
 8018774:	e7ec      	b.n	8018750 <uxr_read_delete_session_status+0x14>
 8018776:	bf00      	nop

08018778 <uxr_stamp_create_session_header>:
 8018778:	b510      	push	{r4, lr}
 801877a:	2208      	movs	r2, #8
 801877c:	b08a      	sub	sp, #40	@ 0x28
 801877e:	4604      	mov	r4, r0
 8018780:	eb0d 0002 	add.w	r0, sp, r2
 8018784:	f7fb fd18 	bl	80141b8 <ucdr_init_buffer>
 8018788:	f814 1b01 	ldrb.w	r1, [r4], #1
 801878c:	2300      	movs	r3, #0
 801878e:	a802      	add	r0, sp, #8
 8018790:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8018794:	9400      	str	r4, [sp, #0]
 8018796:	461a      	mov	r2, r3
 8018798:	f001 f846 	bl	8019828 <uxr_serialize_message_header>
 801879c:	b00a      	add	sp, #40	@ 0x28
 801879e:	bd10      	pop	{r4, pc}

080187a0 <uxr_stamp_session_header>:
 80187a0:	b530      	push	{r4, r5, lr}
 80187a2:	b08d      	sub	sp, #52	@ 0x34
 80187a4:	4604      	mov	r4, r0
 80187a6:	460d      	mov	r5, r1
 80187a8:	4619      	mov	r1, r3
 80187aa:	a804      	add	r0, sp, #16
 80187ac:	9203      	str	r2, [sp, #12]
 80187ae:	2208      	movs	r2, #8
 80187b0:	f7fb fd02 	bl	80141b8 <ucdr_init_buffer>
 80187b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187b8:	9b03      	ldr	r3, [sp, #12]
 80187ba:	462a      	mov	r2, r5
 80187bc:	a804      	add	r0, sp, #16
 80187be:	9400      	str	r4, [sp, #0]
 80187c0:	f001 f832 	bl	8019828 <uxr_serialize_message_header>
 80187c4:	b00d      	add	sp, #52	@ 0x34
 80187c6:	bd30      	pop	{r4, r5, pc}

080187c8 <uxr_read_session_header>:
 80187c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187cc:	4607      	mov	r7, r0
 80187ce:	b084      	sub	sp, #16
 80187d0:	4608      	mov	r0, r1
 80187d2:	460c      	mov	r4, r1
 80187d4:	4615      	mov	r5, r2
 80187d6:	461e      	mov	r6, r3
 80187d8:	f7fb fd20 	bl	801421c <ucdr_buffer_remaining>
 80187dc:	2808      	cmp	r0, #8
 80187de:	d803      	bhi.n	80187e8 <uxr_read_session_header+0x20>
 80187e0:	2000      	movs	r0, #0
 80187e2:	b004      	add	sp, #16
 80187e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187e8:	f10d 080c 	add.w	r8, sp, #12
 80187ec:	4633      	mov	r3, r6
 80187ee:	462a      	mov	r2, r5
 80187f0:	4620      	mov	r0, r4
 80187f2:	f10d 010b 	add.w	r1, sp, #11
 80187f6:	f8cd 8000 	str.w	r8, [sp]
 80187fa:	f001 f833 	bl	8019864 <uxr_deserialize_message_header>
 80187fe:	783a      	ldrb	r2, [r7, #0]
 8018800:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8018804:	4293      	cmp	r3, r2
 8018806:	d1eb      	bne.n	80187e0 <uxr_read_session_header+0x18>
 8018808:	061b      	lsls	r3, r3, #24
 801880a:	d41b      	bmi.n	8018844 <uxr_read_session_header+0x7c>
 801880c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018810:	787b      	ldrb	r3, [r7, #1]
 8018812:	429a      	cmp	r2, r3
 8018814:	d003      	beq.n	801881e <uxr_read_session_header+0x56>
 8018816:	2001      	movs	r0, #1
 8018818:	f080 0001 	eor.w	r0, r0, #1
 801881c:	e7e1      	b.n	80187e2 <uxr_read_session_header+0x1a>
 801881e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8018822:	1cb8      	adds	r0, r7, #2
 8018824:	78bb      	ldrb	r3, [r7, #2]
 8018826:	429a      	cmp	r2, r3
 8018828:	d1f5      	bne.n	8018816 <uxr_read_session_header+0x4e>
 801882a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801882e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8018832:	429a      	cmp	r2, r3
 8018834:	d1ef      	bne.n	8018816 <uxr_read_session_header+0x4e>
 8018836:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801883a:	7843      	ldrb	r3, [r0, #1]
 801883c:	429a      	cmp	r2, r3
 801883e:	d1ea      	bne.n	8018816 <uxr_read_session_header+0x4e>
 8018840:	2000      	movs	r0, #0
 8018842:	e7e9      	b.n	8018818 <uxr_read_session_header+0x50>
 8018844:	2001      	movs	r0, #1
 8018846:	e7cc      	b.n	80187e2 <uxr_read_session_header+0x1a>

08018848 <uxr_session_header_offset>:
 8018848:	f990 3000 	ldrsb.w	r3, [r0]
 801884c:	2b00      	cmp	r3, #0
 801884e:	bfac      	ite	ge
 8018850:	2008      	movge	r0, #8
 8018852:	2004      	movlt	r0, #4
 8018854:	4770      	bx	lr
 8018856:	bf00      	nop

08018858 <uxr_init_base_object_request>:
 8018858:	b510      	push	{r4, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8018860:	9101      	str	r1, [sp, #4]
 8018862:	88c3      	ldrh	r3, [r0, #6]
 8018864:	f1a3 010a 	sub.w	r1, r3, #10
 8018868:	b289      	uxth	r1, r1
 801886a:	42a1      	cmp	r1, r4
 801886c:	d80f      	bhi.n	801888e <uxr_init_base_object_request+0x36>
 801886e:	3301      	adds	r3, #1
 8018870:	b29c      	uxth	r4, r3
 8018872:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8018876:	b2db      	uxtb	r3, r3
 8018878:	80c4      	strh	r4, [r0, #6]
 801887a:	1c91      	adds	r1, r2, #2
 801887c:	9801      	ldr	r0, [sp, #4]
 801887e:	f882 c000 	strb.w	ip, [r2]
 8018882:	7053      	strb	r3, [r2, #1]
 8018884:	f7fe fdf0 	bl	8017468 <uxr_object_id_to_raw>
 8018888:	4620      	mov	r0, r4
 801888a:	b002      	add	sp, #8
 801888c:	bd10      	pop	{r4, pc}
 801888e:	230a      	movs	r3, #10
 8018890:	f04f 0c00 	mov.w	ip, #0
 8018894:	461c      	mov	r4, r3
 8018896:	e7ef      	b.n	8018878 <uxr_init_base_object_request+0x20>

08018898 <uxr_parse_base_object_request>:
 8018898:	b570      	push	{r4, r5, r6, lr}
 801889a:	4604      	mov	r4, r0
 801889c:	3002      	adds	r0, #2
 801889e:	460d      	mov	r5, r1
 80188a0:	4616      	mov	r6, r2
 80188a2:	f7fe fdcd 	bl	8017440 <uxr_object_id_from_raw>
 80188a6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80188aa:	8028      	strh	r0, [r5, #0]
 80188ac:	806b      	strh	r3, [r5, #2]
 80188ae:	7822      	ldrb	r2, [r4, #0]
 80188b0:	7863      	ldrb	r3, [r4, #1]
 80188b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80188b6:	8033      	strh	r3, [r6, #0]
 80188b8:	bd70      	pop	{r4, r5, r6, pc}
 80188ba:	bf00      	nop

080188bc <uxr_init_framing_io>:
 80188bc:	2300      	movs	r3, #0
 80188be:	7041      	strb	r1, [r0, #1]
 80188c0:	7003      	strb	r3, [r0, #0]
 80188c2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80188c4:	4770      	bx	lr
 80188c6:	bf00      	nop

080188c8 <uxr_write_framed_msg>:
 80188c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188cc:	4617      	mov	r7, r2
 80188ce:	7842      	ldrb	r2, [r0, #1]
 80188d0:	460e      	mov	r6, r1
 80188d2:	b083      	sub	sp, #12
 80188d4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80188d8:	469b      	mov	fp, r3
 80188da:	237e      	movs	r3, #126	@ 0x7e
 80188dc:	4604      	mov	r4, r0
 80188de:	2901      	cmp	r1, #1
 80188e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80188e4:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80188e8:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80188ec:	f240 8115 	bls.w	8018b1a <uxr_write_framed_msg+0x252>
 80188f0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80188f4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80188f8:	2202      	movs	r2, #2
 80188fa:	2901      	cmp	r1, #1
 80188fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018900:	d952      	bls.n	80189a8 <uxr_write_framed_msg+0xe0>
 8018902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018904:	2103      	movs	r1, #3
 8018906:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801890a:	b2dd      	uxtb	r5, r3
 801890c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018910:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018914:	2a01      	cmp	r2, #1
 8018916:	d95c      	bls.n	80189d2 <uxr_write_framed_msg+0x10a>
 8018918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801891a:	1862      	adds	r2, r4, r1
 801891c:	3101      	adds	r1, #1
 801891e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8018922:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8018926:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801892a:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801892e:	2a01      	cmp	r2, #1
 8018930:	d961      	bls.n	80189f6 <uxr_write_framed_msg+0x12e>
 8018932:	1c4a      	adds	r2, r1, #1
 8018934:	4421      	add	r1, r4
 8018936:	b2d2      	uxtb	r2, r2
 8018938:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801893c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018940:	2b00      	cmp	r3, #0
 8018942:	d06a      	beq.n	8018a1a <uxr_write_framed_msg+0x152>
 8018944:	f04f 0800 	mov.w	r8, #0
 8018948:	46c1      	mov	r9, r8
 801894a:	e016      	b.n	801897a <uxr_write_framed_msg+0xb2>
 801894c:	2a29      	cmp	r2, #41	@ 0x29
 801894e:	d868      	bhi.n	8018a22 <uxr_write_framed_msg+0x15a>
 8018950:	18a0      	adds	r0, r4, r2
 8018952:	3201      	adds	r2, #1
 8018954:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018958:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801895c:	ea88 0101 	eor.w	r1, r8, r1
 8018960:	4b7d      	ldr	r3, [pc, #500]	@ (8018b58 <uxr_write_framed_msg+0x290>)
 8018962:	f109 0901 	add.w	r9, r9, #1
 8018966:	b2c9      	uxtb	r1, r1
 8018968:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801896c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8018970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018972:	454b      	cmp	r3, r9
 8018974:	d969      	bls.n	8018a4a <uxr_write_framed_msg+0x182>
 8018976:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801897a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801897e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018982:	2801      	cmp	r0, #1
 8018984:	d8e2      	bhi.n	801894c <uxr_write_framed_msg+0x84>
 8018986:	1c50      	adds	r0, r2, #1
 8018988:	b2c0      	uxtb	r0, r0
 801898a:	2829      	cmp	r0, #41	@ 0x29
 801898c:	d849      	bhi.n	8018a22 <uxr_write_framed_msg+0x15a>
 801898e:	18a0      	adds	r0, r4, r2
 8018990:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8018994:	3202      	adds	r2, #2
 8018996:	f081 0520 	eor.w	r5, r1, #32
 801899a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801899e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80189a2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80189a6:	e7d9      	b.n	801895c <uxr_write_framed_msg+0x94>
 80189a8:	2104      	movs	r1, #4
 80189aa:	f04f 0c03 	mov.w	ip, #3
 80189ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189b0:	4422      	add	r2, r4
 80189b2:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80189b6:	44a4      	add	ip, r4
 80189b8:	b2dd      	uxtb	r5, r3
 80189ba:	f080 0020 	eor.w	r0, r0, #32
 80189be:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80189c2:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80189c6:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80189ca:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80189ce:	2a01      	cmp	r2, #1
 80189d0:	d8a2      	bhi.n	8018918 <uxr_write_framed_msg+0x50>
 80189d2:	1862      	adds	r2, r4, r1
 80189d4:	207d      	movs	r0, #125	@ 0x7d
 80189d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189d8:	f085 0520 	eor.w	r5, r5, #32
 80189dc:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80189e0:	3102      	adds	r1, #2
 80189e2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80189e6:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80189ea:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80189ee:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80189f2:	2a01      	cmp	r2, #1
 80189f4:	d89d      	bhi.n	8018932 <uxr_write_framed_msg+0x6a>
 80189f6:	1c4d      	adds	r5, r1, #1
 80189f8:	1c8a      	adds	r2, r1, #2
 80189fa:	f080 0020 	eor.w	r0, r0, #32
 80189fe:	4421      	add	r1, r4
 8018a00:	fa54 f585 	uxtab	r5, r4, r5
 8018a04:	b2d2      	uxtb	r2, r2
 8018a06:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018a0a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8018a0e:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8018a12:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d194      	bne.n	8018944 <uxr_write_framed_msg+0x7c>
 8018a1a:	4619      	mov	r1, r3
 8018a1c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018a20:	e019      	b.n	8018a56 <uxr_write_framed_msg+0x18e>
 8018a22:	2500      	movs	r5, #0
 8018a24:	e000      	b.n	8018a28 <uxr_write_framed_msg+0x160>
 8018a26:	b160      	cbz	r0, 8018a42 <uxr_write_framed_msg+0x17a>
 8018a28:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018a2c:	1b52      	subs	r2, r2, r5
 8018a2e:	4653      	mov	r3, sl
 8018a30:	4638      	mov	r0, r7
 8018a32:	4421      	add	r1, r4
 8018a34:	47b0      	blx	r6
 8018a36:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a3a:	4405      	add	r5, r0
 8018a3c:	4295      	cmp	r5, r2
 8018a3e:	d3f2      	bcc.n	8018a26 <uxr_write_framed_msg+0x15e>
 8018a40:	d066      	beq.n	8018b10 <uxr_write_framed_msg+0x248>
 8018a42:	2000      	movs	r0, #0
 8018a44:	b003      	add	sp, #12
 8018a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a4a:	fa5f f188 	uxtb.w	r1, r8
 8018a4e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a52:	f8ad 8004 	strh.w	r8, [sp, #4]
 8018a56:	f04f 0900 	mov.w	r9, #0
 8018a5a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8018a5e:	46c8      	mov	r8, r9
 8018a60:	e013      	b.n	8018a8a <uxr_write_framed_msg+0x1c2>
 8018a62:	2a29      	cmp	r2, #41	@ 0x29
 8018a64:	d824      	bhi.n	8018ab0 <uxr_write_framed_msg+0x1e8>
 8018a66:	18a3      	adds	r3, r4, r2
 8018a68:	3201      	adds	r2, #1
 8018a6a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8018a6e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a72:	f109 0901 	add.w	r9, r9, #1
 8018a76:	f1b9 0f02 	cmp.w	r9, #2
 8018a7a:	d02d      	beq.n	8018ad8 <uxr_write_framed_msg+0x210>
 8018a7c:	f109 0308 	add.w	r3, r9, #8
 8018a80:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a84:	446b      	add	r3, sp
 8018a86:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8018a8a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018a8e:	2b01      	cmp	r3, #1
 8018a90:	d8e7      	bhi.n	8018a62 <uxr_write_framed_msg+0x19a>
 8018a92:	1c53      	adds	r3, r2, #1
 8018a94:	b2db      	uxtb	r3, r3
 8018a96:	2b29      	cmp	r3, #41	@ 0x29
 8018a98:	d80a      	bhi.n	8018ab0 <uxr_write_framed_msg+0x1e8>
 8018a9a:	18a3      	adds	r3, r4, r2
 8018a9c:	f081 0120 	eor.w	r1, r1, #32
 8018aa0:	3202      	adds	r2, #2
 8018aa2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8018aa6:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8018aaa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018aae:	e7e0      	b.n	8018a72 <uxr_write_framed_msg+0x1aa>
 8018ab0:	2500      	movs	r5, #0
 8018ab2:	e001      	b.n	8018ab8 <uxr_write_framed_msg+0x1f0>
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	d0c4      	beq.n	8018a42 <uxr_write_framed_msg+0x17a>
 8018ab8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018abc:	1b52      	subs	r2, r2, r5
 8018abe:	4653      	mov	r3, sl
 8018ac0:	4638      	mov	r0, r7
 8018ac2:	4421      	add	r1, r4
 8018ac4:	47b0      	blx	r6
 8018ac6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018aca:	4405      	add	r5, r0
 8018acc:	4295      	cmp	r5, r2
 8018ace:	d3f1      	bcc.n	8018ab4 <uxr_write_framed_msg+0x1ec>
 8018ad0:	d1b7      	bne.n	8018a42 <uxr_write_framed_msg+0x17a>
 8018ad2:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8018ad6:	e7d1      	b.n	8018a7c <uxr_write_framed_msg+0x1b4>
 8018ad8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018adc:	b19a      	cbz	r2, 8018b06 <uxr_write_framed_msg+0x23e>
 8018ade:	2500      	movs	r5, #0
 8018ae0:	e001      	b.n	8018ae6 <uxr_write_framed_msg+0x21e>
 8018ae2:	2800      	cmp	r0, #0
 8018ae4:	d0ad      	beq.n	8018a42 <uxr_write_framed_msg+0x17a>
 8018ae6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018aea:	1b52      	subs	r2, r2, r5
 8018aec:	4653      	mov	r3, sl
 8018aee:	4638      	mov	r0, r7
 8018af0:	4421      	add	r1, r4
 8018af2:	47b0      	blx	r6
 8018af4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018af8:	4405      	add	r5, r0
 8018afa:	4295      	cmp	r5, r2
 8018afc:	d3f1      	bcc.n	8018ae2 <uxr_write_framed_msg+0x21a>
 8018afe:	d1a0      	bne.n	8018a42 <uxr_write_framed_msg+0x17a>
 8018b00:	2300      	movs	r3, #0
 8018b02:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018b06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b08:	b298      	uxth	r0, r3
 8018b0a:	b003      	add	sp, #12
 8018b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b10:	f04f 0300 	mov.w	r3, #0
 8018b14:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018b18:	e72a      	b.n	8018970 <uxr_write_framed_msg+0xa8>
 8018b1a:	217d      	movs	r1, #125	@ 0x7d
 8018b1c:	f082 0220 	eor.w	r2, r2, #32
 8018b20:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8018b24:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8018b28:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8018b2c:	2203      	movs	r2, #3
 8018b2e:	2901      	cmp	r1, #1
 8018b30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018b34:	d803      	bhi.n	8018b3e <uxr_write_framed_msg+0x276>
 8018b36:	2105      	movs	r1, #5
 8018b38:	f04f 0c04 	mov.w	ip, #4
 8018b3c:	e737      	b.n	80189ae <uxr_write_framed_msg+0xe6>
 8018b3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b40:	2104      	movs	r1, #4
 8018b42:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8018b46:	b2dd      	uxtb	r5, r3
 8018b48:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018b4c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018b50:	2a01      	cmp	r2, #1
 8018b52:	f63f aee1 	bhi.w	8018918 <uxr_write_framed_msg+0x50>
 8018b56:	e73c      	b.n	80189d2 <uxr_write_framed_msg+0x10a>
 8018b58:	08025164 	.word	0x08025164

08018b5c <uxr_framing_read_transport>:
 8018b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b60:	4604      	mov	r4, r0
 8018b62:	b085      	sub	sp, #20
 8018b64:	4692      	mov	sl, r2
 8018b66:	4689      	mov	r9, r1
 8018b68:	461d      	mov	r5, r3
 8018b6a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018b6c:	f000 fca6 	bl	80194bc <uxr_millis>
 8018b70:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018b74:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8018b78:	4680      	mov	r8, r0
 8018b7a:	42ba      	cmp	r2, r7
 8018b7c:	d05f      	beq.n	8018c3e <uxr_framing_read_transport+0xe2>
 8018b7e:	d817      	bhi.n	8018bb0 <uxr_framing_read_transport+0x54>
 8018b80:	3f01      	subs	r7, #1
 8018b82:	1aba      	subs	r2, r7, r2
 8018b84:	2700      	movs	r7, #0
 8018b86:	b2d2      	uxtb	r2, r2
 8018b88:	42b2      	cmp	r2, r6
 8018b8a:	d81a      	bhi.n	8018bc2 <uxr_framing_read_transport+0x66>
 8018b8c:	19d3      	adds	r3, r2, r7
 8018b8e:	42b3      	cmp	r3, r6
 8018b90:	d852      	bhi.n	8018c38 <uxr_framing_read_transport+0xdc>
 8018b92:	b9d2      	cbnz	r2, 8018bca <uxr_framing_read_transport+0x6e>
 8018b94:	2600      	movs	r6, #0
 8018b96:	f000 fc91 	bl	80194bc <uxr_millis>
 8018b9a:	682b      	ldr	r3, [r5, #0]
 8018b9c:	eba0 0008 	sub.w	r0, r0, r8
 8018ba0:	1a1b      	subs	r3, r3, r0
 8018ba2:	4630      	mov	r0, r6
 8018ba4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ba8:	602b      	str	r3, [r5, #0]
 8018baa:	b005      	add	sp, #20
 8018bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bb0:	2f00      	cmp	r7, #0
 8018bb2:	d060      	beq.n	8018c76 <uxr_framing_read_transport+0x11a>
 8018bb4:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8018bb8:	3f01      	subs	r7, #1
 8018bba:	b2d2      	uxtb	r2, r2
 8018bbc:	b2ff      	uxtb	r7, r7
 8018bbe:	42b2      	cmp	r2, r6
 8018bc0:	d9e4      	bls.n	8018b8c <uxr_framing_read_transport+0x30>
 8018bc2:	b2f2      	uxtb	r2, r6
 8018bc4:	2700      	movs	r7, #0
 8018bc6:	2a00      	cmp	r2, #0
 8018bc8:	d0e4      	beq.n	8018b94 <uxr_framing_read_transport+0x38>
 8018bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bcc:	4650      	mov	r0, sl
 8018bce:	9203      	str	r2, [sp, #12]
 8018bd0:	9300      	str	r3, [sp, #0]
 8018bd2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018bd6:	682b      	ldr	r3, [r5, #0]
 8018bd8:	3102      	adds	r1, #2
 8018bda:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8018c80 <uxr_framing_read_transport+0x124>
 8018bde:	4421      	add	r1, r4
 8018be0:	47c8      	blx	r9
 8018be2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018be6:	4606      	mov	r6, r0
 8018be8:	4403      	add	r3, r0
 8018bea:	0859      	lsrs	r1, r3, #1
 8018bec:	fbab 2101 	umull	r2, r1, fp, r1
 8018bf0:	222a      	movs	r2, #42	@ 0x2a
 8018bf2:	0889      	lsrs	r1, r1, #2
 8018bf4:	fb02 3111 	mls	r1, r2, r1, r3
 8018bf8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	d0c9      	beq.n	8018b94 <uxr_framing_read_transport+0x38>
 8018c00:	9a03      	ldr	r2, [sp, #12]
 8018c02:	4290      	cmp	r0, r2
 8018c04:	d1c7      	bne.n	8018b96 <uxr_framing_read_transport+0x3a>
 8018c06:	2f00      	cmp	r7, #0
 8018c08:	d0c5      	beq.n	8018b96 <uxr_framing_read_transport+0x3a>
 8018c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c0c:	3102      	adds	r1, #2
 8018c0e:	463a      	mov	r2, r7
 8018c10:	4650      	mov	r0, sl
 8018c12:	4421      	add	r1, r4
 8018c14:	9300      	str	r3, [sp, #0]
 8018c16:	2300      	movs	r3, #0
 8018c18:	47c8      	blx	r9
 8018c1a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018c1e:	4406      	add	r6, r0
 8018c20:	1813      	adds	r3, r2, r0
 8018c22:	085a      	lsrs	r2, r3, #1
 8018c24:	fbab 1b02 	umull	r1, fp, fp, r2
 8018c28:	222a      	movs	r2, #42	@ 0x2a
 8018c2a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018c2e:	fb02 331b 	mls	r3, r2, fp, r3
 8018c32:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018c36:	e7ae      	b.n	8018b96 <uxr_framing_read_transport+0x3a>
 8018c38:	1ab6      	subs	r6, r6, r2
 8018c3a:	b2f7      	uxtb	r7, r6
 8018c3c:	e7a9      	b.n	8018b92 <uxr_framing_read_transport+0x36>
 8018c3e:	2300      	movs	r3, #0
 8018c40:	2e28      	cmp	r6, #40	@ 0x28
 8018c42:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8018c44:	d9bd      	bls.n	8018bc2 <uxr_framing_read_transport+0x66>
 8018c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c48:	2229      	movs	r2, #41	@ 0x29
 8018c4a:	1ca1      	adds	r1, r4, #2
 8018c4c:	4650      	mov	r0, sl
 8018c4e:	9300      	str	r3, [sp, #0]
 8018c50:	682b      	ldr	r3, [r5, #0]
 8018c52:	47c8      	blx	r9
 8018c54:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018c58:	4606      	mov	r6, r0
 8018c5a:	212a      	movs	r1, #42	@ 0x2a
 8018c5c:	4403      	add	r3, r0
 8018c5e:	4808      	ldr	r0, [pc, #32]	@ (8018c80 <uxr_framing_read_transport+0x124>)
 8018c60:	085a      	lsrs	r2, r3, #1
 8018c62:	fba0 0202 	umull	r0, r2, r0, r2
 8018c66:	0892      	lsrs	r2, r2, #2
 8018c68:	fb01 3312 	mls	r3, r1, r2, r3
 8018c6c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018c70:	2e00      	cmp	r6, #0
 8018c72:	d08f      	beq.n	8018b94 <uxr_framing_read_transport+0x38>
 8018c74:	e78f      	b.n	8018b96 <uxr_framing_read_transport+0x3a>
 8018c76:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8018c7a:	b2d2      	uxtb	r2, r2
 8018c7c:	e784      	b.n	8018b88 <uxr_framing_read_transport+0x2c>
 8018c7e:	bf00      	nop
 8018c80:	30c30c31 	.word	0x30c30c31

08018c84 <uxr_read_framed_msg>:
 8018c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c88:	461e      	mov	r6, r3
 8018c8a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8018c8e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8018c92:	b083      	sub	sp, #12
 8018c94:	4604      	mov	r4, r0
 8018c96:	4688      	mov	r8, r1
 8018c98:	429d      	cmp	r5, r3
 8018c9a:	4691      	mov	r9, r2
 8018c9c:	f000 818c 	beq.w	8018fb8 <uxr_read_framed_msg+0x334>
 8018ca0:	7823      	ldrb	r3, [r4, #0]
 8018ca2:	4dc3      	ldr	r5, [pc, #780]	@ (8018fb0 <uxr_read_framed_msg+0x32c>)
 8018ca4:	4fc3      	ldr	r7, [pc, #780]	@ (8018fb4 <uxr_read_framed_msg+0x330>)
 8018ca6:	2b07      	cmp	r3, #7
 8018ca8:	d8fd      	bhi.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018caa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018cae:	011c      	.short	0x011c
 8018cb0:	00d900fb 	.word	0x00d900fb
 8018cb4:	008f00ba 	.word	0x008f00ba
 8018cb8:	00320051 	.word	0x00320051
 8018cbc:	0008      	.short	0x0008
 8018cbe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018cc2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018cc6:	4299      	cmp	r1, r3
 8018cc8:	f000 814d 	beq.w	8018f66 <uxr_read_framed_msg+0x2e2>
 8018ccc:	18e2      	adds	r2, r4, r3
 8018cce:	7892      	ldrb	r2, [r2, #2]
 8018cd0:	2a7d      	cmp	r2, #125	@ 0x7d
 8018cd2:	f000 81b8 	beq.w	8019046 <uxr_read_framed_msg+0x3c2>
 8018cd6:	3301      	adds	r3, #1
 8018cd8:	212a      	movs	r1, #42	@ 0x2a
 8018cda:	2a7e      	cmp	r2, #126	@ 0x7e
 8018cdc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018ce0:	fba5 c000 	umull	ip, r0, r5, r0
 8018ce4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018ce8:	fb01 3310 	mls	r3, r1, r0, r3
 8018cec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018cf0:	f000 8257 	beq.w	80191a2 <uxr_read_framed_msg+0x51e>
 8018cf4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018cf6:	2000      	movs	r0, #0
 8018cf8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018cfa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018cfe:	7020      	strb	r0, [r4, #0]
 8018d00:	b29b      	uxth	r3, r3
 8018d02:	4299      	cmp	r1, r3
 8018d04:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018d06:	f000 8178 	beq.w	8018ffa <uxr_read_framed_msg+0x376>
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	b003      	add	sp, #12
 8018d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d12:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018d16:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018d1a:	4298      	cmp	r0, r3
 8018d1c:	f000 8132 	beq.w	8018f84 <uxr_read_framed_msg+0x300>
 8018d20:	18e2      	adds	r2, r4, r3
 8018d22:	7891      	ldrb	r1, [r2, #2]
 8018d24:	297d      	cmp	r1, #125	@ 0x7d
 8018d26:	f000 8170 	beq.w	801900a <uxr_read_framed_msg+0x386>
 8018d2a:	3301      	adds	r3, #1
 8018d2c:	202a      	movs	r0, #42	@ 0x2a
 8018d2e:	297e      	cmp	r1, #126	@ 0x7e
 8018d30:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018d34:	fba5 c202 	umull	ip, r2, r5, r2
 8018d38:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018d3c:	fb00 3312 	mls	r3, r0, r2, r3
 8018d40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018d44:	f000 821d 	beq.w	8019182 <uxr_read_framed_msg+0x4fe>
 8018d48:	2307      	movs	r3, #7
 8018d4a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018d4c:	7023      	strb	r3, [r4, #0]
 8018d4e:	e7aa      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018d50:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018d52:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018d56:	459e      	cmp	lr, r3
 8018d58:	d827      	bhi.n	8018daa <uxr_read_framed_msg+0x126>
 8018d5a:	e032      	b.n	8018dc2 <uxr_read_framed_msg+0x13e>
 8018d5c:	fba5 b101 	umull	fp, r1, r5, r1
 8018d60:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018d64:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018d68:	0889      	lsrs	r1, r1, #2
 8018d6a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8018d6e:	fb0b 0111 	mls	r1, fp, r1, r0
 8018d72:	f000 80d4 	beq.w	8018f1e <uxr_read_framed_msg+0x29a>
 8018d76:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018d7a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018d7e:	f000 80cb 	beq.w	8018f18 <uxr_read_framed_msg+0x294>
 8018d82:	f806 c003 	strb.w	ip, [r6, r3]
 8018d86:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018d88:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018d8a:	ea80 010c 	eor.w	r1, r0, ip
 8018d8e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018d92:	3301      	adds	r3, #1
 8018d94:	b2c9      	uxtb	r1, r1
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8018d9c:	4573      	cmp	r3, lr
 8018d9e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018da0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018da4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018da6:	f080 811d 	bcs.w	8018fe4 <uxr_read_framed_msg+0x360>
 8018daa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018dae:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8018db2:	1c50      	adds	r0, r2, #1
 8018db4:	eb04 0c02 	add.w	ip, r4, r2
 8018db8:	4592      	cmp	sl, r2
 8018dba:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8018dbe:	d1cd      	bne.n	8018d5c <uxr_read_framed_msg+0xd8>
 8018dc0:	459e      	cmp	lr, r3
 8018dc2:	f040 8114 	bne.w	8018fee <uxr_read_framed_msg+0x36a>
 8018dc6:	2306      	movs	r3, #6
 8018dc8:	7023      	strb	r3, [r4, #0]
 8018dca:	e76c      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018dcc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018dd0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018dd4:	4298      	cmp	r0, r3
 8018dd6:	f000 80c6 	beq.w	8018f66 <uxr_read_framed_msg+0x2e2>
 8018dda:	18e2      	adds	r2, r4, r3
 8018ddc:	7891      	ldrb	r1, [r2, #2]
 8018dde:	297d      	cmp	r1, #125	@ 0x7d
 8018de0:	f000 8193 	beq.w	801910a <uxr_read_framed_msg+0x486>
 8018de4:	3301      	adds	r3, #1
 8018de6:	202a      	movs	r0, #42	@ 0x2a
 8018de8:	297e      	cmp	r1, #126	@ 0x7e
 8018dea:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018dee:	fba5 c202 	umull	ip, r2, r5, r2
 8018df2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018df6:	fb00 3312 	mls	r3, r0, r2, r3
 8018dfa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018dfe:	f000 81d0 	beq.w	80191a2 <uxr_read_framed_msg+0x51e>
 8018e02:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018e04:	2000      	movs	r0, #0
 8018e06:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018e0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018e0c:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018e0e:	b29b      	uxth	r3, r3
 8018e10:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018e12:	428b      	cmp	r3, r1
 8018e14:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018e16:	f240 80e2 	bls.w	8018fde <uxr_read_framed_msg+0x35a>
 8018e1a:	7020      	strb	r0, [r4, #0]
 8018e1c:	b003      	add	sp, #12
 8018e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e22:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e26:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018e2a:	4298      	cmp	r0, r3
 8018e2c:	f000 80aa 	beq.w	8018f84 <uxr_read_framed_msg+0x300>
 8018e30:	18e2      	adds	r2, r4, r3
 8018e32:	7891      	ldrb	r1, [r2, #2]
 8018e34:	297d      	cmp	r1, #125	@ 0x7d
 8018e36:	f000 8186 	beq.w	8019146 <uxr_read_framed_msg+0x4c2>
 8018e3a:	3301      	adds	r3, #1
 8018e3c:	202a      	movs	r0, #42	@ 0x2a
 8018e3e:	297e      	cmp	r1, #126	@ 0x7e
 8018e40:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018e44:	fba5 c202 	umull	ip, r2, r5, r2
 8018e48:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018e4c:	fb00 3312 	mls	r3, r0, r2, r3
 8018e50:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e54:	f000 8195 	beq.w	8019182 <uxr_read_framed_msg+0x4fe>
 8018e58:	2304      	movs	r3, #4
 8018e5a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018e5c:	7023      	strb	r3, [r4, #0]
 8018e5e:	e722      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018e60:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e64:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018e68:	4290      	cmp	r0, r2
 8018e6a:	f000 80b4 	beq.w	8018fd6 <uxr_read_framed_msg+0x352>
 8018e6e:	18a3      	adds	r3, r4, r2
 8018e70:	7899      	ldrb	r1, [r3, #2]
 8018e72:	297d      	cmp	r1, #125	@ 0x7d
 8018e74:	f000 8107 	beq.w	8019086 <uxr_read_framed_msg+0x402>
 8018e78:	3201      	adds	r2, #1
 8018e7a:	232a      	movs	r3, #42	@ 0x2a
 8018e7c:	297e      	cmp	r1, #126	@ 0x7e
 8018e7e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8018e82:	fba5 c000 	umull	ip, r0, r5, r0
 8018e86:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018e8a:	fb03 2210 	mls	r2, r3, r0, r2
 8018e8e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018e92:	f000 818a 	beq.w	80191aa <uxr_read_framed_msg+0x526>
 8018e96:	7863      	ldrb	r3, [r4, #1]
 8018e98:	428b      	cmp	r3, r1
 8018e9a:	bf0c      	ite	eq
 8018e9c:	2303      	moveq	r3, #3
 8018e9e:	2300      	movne	r3, #0
 8018ea0:	7023      	strb	r3, [r4, #0]
 8018ea2:	e700      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018eaa:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8018eae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018eb2:	4299      	cmp	r1, r3
 8018eb4:	d06a      	beq.n	8018f8c <uxr_read_framed_msg+0x308>
 8018eb6:	18e2      	adds	r2, r4, r3
 8018eb8:	7890      	ldrb	r0, [r2, #2]
 8018eba:	287d      	cmp	r0, #125	@ 0x7d
 8018ebc:	f000 8100 	beq.w	80190c0 <uxr_read_framed_msg+0x43c>
 8018ec0:	3301      	adds	r3, #1
 8018ec2:	212a      	movs	r1, #42	@ 0x2a
 8018ec4:	287e      	cmp	r0, #126	@ 0x7e
 8018ec6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8018eca:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018ece:	fba5 c202 	umull	ip, r2, r5, r2
 8018ed2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018ed6:	fb01 3312 	mls	r3, r1, r2, r3
 8018eda:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ede:	d055      	beq.n	8018f8c <uxr_read_framed_msg+0x308>
 8018ee0:	2302      	movs	r3, #2
 8018ee2:	7023      	strb	r3, [r4, #0]
 8018ee4:	e6df      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018ee6:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8018eea:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018eee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018ef2:	1c5a      	adds	r2, r3, #1
 8018ef4:	459c      	cmp	ip, r3
 8018ef6:	eb04 0103 	add.w	r1, r4, r3
 8018efa:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018efe:	f43f af04 	beq.w	8018d0a <uxr_read_framed_msg+0x86>
 8018f02:	fba5 0303 	umull	r0, r3, r5, r3
 8018f06:	7889      	ldrb	r1, [r1, #2]
 8018f08:	089b      	lsrs	r3, r3, #2
 8018f0a:	297e      	cmp	r1, #126	@ 0x7e
 8018f0c:	fb0e 2313 	mls	r3, lr, r3, r2
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018f16:	d1ec      	bne.n	8018ef2 <uxr_read_framed_msg+0x26e>
 8018f18:	2301      	movs	r3, #1
 8018f1a:	7023      	strb	r3, [r4, #0]
 8018f1c:	e6c3      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018f1e:	1c50      	adds	r0, r2, #1
 8018f20:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018f24:	3202      	adds	r2, #2
 8018f26:	0841      	lsrs	r1, r0, #1
 8018f28:	fba5 c101 	umull	ip, r1, r5, r1
 8018f2c:	0889      	lsrs	r1, r1, #2
 8018f2e:	fb0b 0111 	mls	r1, fp, r1, r0
 8018f32:	1860      	adds	r0, r4, r1
 8018f34:	b2c9      	uxtb	r1, r1
 8018f36:	458a      	cmp	sl, r1
 8018f38:	f43f af42 	beq.w	8018dc0 <uxr_read_framed_msg+0x13c>
 8018f3c:	0851      	lsrs	r1, r2, #1
 8018f3e:	7880      	ldrb	r0, [r0, #2]
 8018f40:	fba5 a101 	umull	sl, r1, r5, r1
 8018f44:	287e      	cmp	r0, #126	@ 0x7e
 8018f46:	f080 0c20 	eor.w	ip, r0, #32
 8018f4a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8018f4e:	fb0b 2211 	mls	r2, fp, r1, r2
 8018f52:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018f56:	f47f af14 	bne.w	8018d82 <uxr_read_framed_msg+0xfe>
 8018f5a:	459e      	cmp	lr, r3
 8018f5c:	f43f af33 	beq.w	8018dc6 <uxr_read_framed_msg+0x142>
 8018f60:	2301      	movs	r3, #1
 8018f62:	7023      	strb	r3, [r4, #0]
 8018f64:	e69f      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018f66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f68:	9300      	str	r3, [sp, #0]
 8018f6a:	2301      	movs	r3, #1
 8018f6c:	9301      	str	r3, [sp, #4]
 8018f6e:	464a      	mov	r2, r9
 8018f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f72:	4641      	mov	r1, r8
 8018f74:	4620      	mov	r0, r4
 8018f76:	f7ff fdf1 	bl	8018b5c <uxr_framing_read_transport>
 8018f7a:	2800      	cmp	r0, #0
 8018f7c:	f43f aec5 	beq.w	8018d0a <uxr_read_framed_msg+0x86>
 8018f80:	7823      	ldrb	r3, [r4, #0]
 8018f82:	e690      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f86:	9300      	str	r3, [sp, #0]
 8018f88:	2302      	movs	r3, #2
 8018f8a:	e7ef      	b.n	8018f6c <uxr_read_framed_msg+0x2e8>
 8018f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f8e:	464a      	mov	r2, r9
 8018f90:	4641      	mov	r1, r8
 8018f92:	4620      	mov	r0, r4
 8018f94:	9300      	str	r3, [sp, #0]
 8018f96:	2304      	movs	r3, #4
 8018f98:	9301      	str	r3, [sp, #4]
 8018f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f9c:	f7ff fdde 	bl	8018b5c <uxr_framing_read_transport>
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	d1ed      	bne.n	8018f80 <uxr_read_framed_msg+0x2fc>
 8018fa4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018fa8:	2b7e      	cmp	r3, #126	@ 0x7e
 8018faa:	d0e9      	beq.n	8018f80 <uxr_read_framed_msg+0x2fc>
 8018fac:	e6ad      	b.n	8018d0a <uxr_read_framed_msg+0x86>
 8018fae:	bf00      	nop
 8018fb0:	30c30c31 	.word	0x30c30c31
 8018fb4:	08025164 	.word	0x08025164
 8018fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fba:	9300      	str	r3, [sp, #0]
 8018fbc:	2305      	movs	r3, #5
 8018fbe:	9301      	str	r3, [sp, #4]
 8018fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fc2:	f7ff fdcb 	bl	8018b5c <uxr_framing_read_transport>
 8018fc6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018fca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018fce:	429a      	cmp	r2, r3
 8018fd0:	f43f ae9b 	beq.w	8018d0a <uxr_read_framed_msg+0x86>
 8018fd4:	e664      	b.n	8018ca0 <uxr_read_framed_msg+0x1c>
 8018fd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fd8:	9300      	str	r3, [sp, #0]
 8018fda:	2303      	movs	r3, #3
 8018fdc:	e7c6      	b.n	8018f6c <uxr_read_framed_msg+0x2e8>
 8018fde:	2305      	movs	r3, #5
 8018fe0:	7023      	strb	r3, [r4, #0]
 8018fe2:	e660      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 8018fe4:	f43f aeef 	beq.w	8018dc6 <uxr_read_framed_msg+0x142>
 8018fe8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018fec:	d094      	beq.n	8018f18 <uxr_read_framed_msg+0x294>
 8018fee:	ebae 0303 	sub.w	r3, lr, r3
 8018ff2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018ff4:	3302      	adds	r3, #2
 8018ff6:	9200      	str	r2, [sp, #0]
 8018ff8:	e7b8      	b.n	8018f6c <uxr_read_framed_msg+0x2e8>
 8018ffa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018ffe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019000:	7013      	strb	r3, [r2, #0]
 8019002:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8019004:	b003      	add	sp, #12
 8019006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801900a:	1c59      	adds	r1, r3, #1
 801900c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019010:	084a      	lsrs	r2, r1, #1
 8019012:	fba5 e202 	umull	lr, r2, r5, r2
 8019016:	0892      	lsrs	r2, r2, #2
 8019018:	fb0c 1212 	mls	r2, ip, r2, r1
 801901c:	b2d1      	uxtb	r1, r2
 801901e:	4288      	cmp	r0, r1
 8019020:	d0b0      	beq.n	8018f84 <uxr_read_framed_msg+0x300>
 8019022:	3302      	adds	r3, #2
 8019024:	4422      	add	r2, r4
 8019026:	7891      	ldrb	r1, [r2, #2]
 8019028:	085a      	lsrs	r2, r3, #1
 801902a:	fba5 0202 	umull	r0, r2, r5, r2
 801902e:	297e      	cmp	r1, #126	@ 0x7e
 8019030:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019034:	fb0c 3312 	mls	r3, ip, r2, r3
 8019038:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801903c:	f000 80a1 	beq.w	8019182 <uxr_read_framed_msg+0x4fe>
 8019040:	f081 0120 	eor.w	r1, r1, #32
 8019044:	e680      	b.n	8018d48 <uxr_read_framed_msg+0xc4>
 8019046:	f103 0c01 	add.w	ip, r3, #1
 801904a:	202a      	movs	r0, #42	@ 0x2a
 801904c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019050:	fba5 e202 	umull	lr, r2, r5, r2
 8019054:	0892      	lsrs	r2, r2, #2
 8019056:	fb00 c212 	mls	r2, r0, r2, ip
 801905a:	fa5f fc82 	uxtb.w	ip, r2
 801905e:	4561      	cmp	r1, ip
 8019060:	d081      	beq.n	8018f66 <uxr_read_framed_msg+0x2e2>
 8019062:	3302      	adds	r3, #2
 8019064:	4422      	add	r2, r4
 8019066:	0859      	lsrs	r1, r3, #1
 8019068:	7892      	ldrb	r2, [r2, #2]
 801906a:	fba5 c101 	umull	ip, r1, r5, r1
 801906e:	2a7e      	cmp	r2, #126	@ 0x7e
 8019070:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019074:	fb00 3311 	mls	r3, r0, r1, r3
 8019078:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801907c:	f000 8091 	beq.w	80191a2 <uxr_read_framed_msg+0x51e>
 8019080:	f082 0220 	eor.w	r2, r2, #32
 8019084:	e636      	b.n	8018cf4 <uxr_read_framed_msg+0x70>
 8019086:	1c51      	adds	r1, r2, #1
 8019088:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801908c:	084b      	lsrs	r3, r1, #1
 801908e:	fba5 e303 	umull	lr, r3, r5, r3
 8019092:	089b      	lsrs	r3, r3, #2
 8019094:	fb0c 1313 	mls	r3, ip, r3, r1
 8019098:	b2d9      	uxtb	r1, r3
 801909a:	4288      	cmp	r0, r1
 801909c:	d09b      	beq.n	8018fd6 <uxr_read_framed_msg+0x352>
 801909e:	3202      	adds	r2, #2
 80190a0:	4423      	add	r3, r4
 80190a2:	0850      	lsrs	r0, r2, #1
 80190a4:	789b      	ldrb	r3, [r3, #2]
 80190a6:	fba5 1000 	umull	r1, r0, r5, r0
 80190aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80190ac:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80190b0:	fb0c 2210 	mls	r2, ip, r0, r2
 80190b4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80190b8:	d077      	beq.n	80191aa <uxr_read_framed_msg+0x526>
 80190ba:	f083 0120 	eor.w	r1, r3, #32
 80190be:	e6ea      	b.n	8018e96 <uxr_read_framed_msg+0x212>
 80190c0:	f103 0c01 	add.w	ip, r3, #1
 80190c4:	202a      	movs	r0, #42	@ 0x2a
 80190c6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80190ca:	fba5 e202 	umull	lr, r2, r5, r2
 80190ce:	0892      	lsrs	r2, r2, #2
 80190d0:	fb00 c212 	mls	r2, r0, r2, ip
 80190d4:	fa5f fc82 	uxtb.w	ip, r2
 80190d8:	4561      	cmp	r1, ip
 80190da:	f43f af57 	beq.w	8018f8c <uxr_read_framed_msg+0x308>
 80190de:	3302      	adds	r3, #2
 80190e0:	4422      	add	r2, r4
 80190e2:	7891      	ldrb	r1, [r2, #2]
 80190e4:	085a      	lsrs	r2, r3, #1
 80190e6:	fba5 c202 	umull	ip, r2, r5, r2
 80190ea:	297e      	cmp	r1, #126	@ 0x7e
 80190ec:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80190f0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80190f4:	fb00 3312 	mls	r3, r0, r2, r3
 80190f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80190fc:	f43f af46 	beq.w	8018f8c <uxr_read_framed_msg+0x308>
 8019100:	f081 0120 	eor.w	r1, r1, #32
 8019104:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019108:	e6ea      	b.n	8018ee0 <uxr_read_framed_msg+0x25c>
 801910a:	1c59      	adds	r1, r3, #1
 801910c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019110:	084a      	lsrs	r2, r1, #1
 8019112:	fba5 e202 	umull	lr, r2, r5, r2
 8019116:	0892      	lsrs	r2, r2, #2
 8019118:	fb0c 1212 	mls	r2, ip, r2, r1
 801911c:	b2d1      	uxtb	r1, r2
 801911e:	4288      	cmp	r0, r1
 8019120:	f43f af21 	beq.w	8018f66 <uxr_read_framed_msg+0x2e2>
 8019124:	3302      	adds	r3, #2
 8019126:	4422      	add	r2, r4
 8019128:	7891      	ldrb	r1, [r2, #2]
 801912a:	085a      	lsrs	r2, r3, #1
 801912c:	fba5 0202 	umull	r0, r2, r5, r2
 8019130:	297e      	cmp	r1, #126	@ 0x7e
 8019132:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019136:	fb0c 3312 	mls	r3, ip, r2, r3
 801913a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801913e:	d030      	beq.n	80191a2 <uxr_read_framed_msg+0x51e>
 8019140:	f081 0120 	eor.w	r1, r1, #32
 8019144:	e65d      	b.n	8018e02 <uxr_read_framed_msg+0x17e>
 8019146:	1c59      	adds	r1, r3, #1
 8019148:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801914c:	084a      	lsrs	r2, r1, #1
 801914e:	fba5 e202 	umull	lr, r2, r5, r2
 8019152:	0892      	lsrs	r2, r2, #2
 8019154:	fb0c 1212 	mls	r2, ip, r2, r1
 8019158:	b2d1      	uxtb	r1, r2
 801915a:	4288      	cmp	r0, r1
 801915c:	f43f af12 	beq.w	8018f84 <uxr_read_framed_msg+0x300>
 8019160:	3302      	adds	r3, #2
 8019162:	4422      	add	r2, r4
 8019164:	7891      	ldrb	r1, [r2, #2]
 8019166:	085a      	lsrs	r2, r3, #1
 8019168:	fba5 0202 	umull	r0, r2, r5, r2
 801916c:	297e      	cmp	r1, #126	@ 0x7e
 801916e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019172:	fb0c 3312 	mls	r3, ip, r2, r3
 8019176:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801917a:	d002      	beq.n	8019182 <uxr_read_framed_msg+0x4fe>
 801917c:	f081 0120 	eor.w	r1, r1, #32
 8019180:	e66a      	b.n	8018e58 <uxr_read_framed_msg+0x1d4>
 8019182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019184:	9300      	str	r3, [sp, #0]
 8019186:	2302      	movs	r3, #2
 8019188:	9301      	str	r3, [sp, #4]
 801918a:	464a      	mov	r2, r9
 801918c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801918e:	4641      	mov	r1, r8
 8019190:	4620      	mov	r0, r4
 8019192:	f7ff fce3 	bl	8018b5c <uxr_framing_read_transport>
 8019196:	2800      	cmp	r0, #0
 8019198:	f47f aef2 	bne.w	8018f80 <uxr_read_framed_msg+0x2fc>
 801919c:	2301      	movs	r3, #1
 801919e:	7023      	strb	r3, [r4, #0]
 80191a0:	e581      	b.n	8018ca6 <uxr_read_framed_msg+0x22>
 80191a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191a4:	9300      	str	r3, [sp, #0]
 80191a6:	2301      	movs	r3, #1
 80191a8:	e7ee      	b.n	8019188 <uxr_read_framed_msg+0x504>
 80191aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191ac:	9300      	str	r3, [sp, #0]
 80191ae:	2303      	movs	r3, #3
 80191b0:	e7ea      	b.n	8019188 <uxr_read_framed_msg+0x504>
 80191b2:	bf00      	nop

080191b4 <uxr_stream_id>:
 80191b4:	2901      	cmp	r1, #1
 80191b6:	4684      	mov	ip, r0
 80191b8:	b500      	push	{lr}
 80191ba:	b083      	sub	sp, #12
 80191bc:	d01f      	beq.n	80191fe <uxr_stream_id+0x4a>
 80191be:	2902      	cmp	r1, #2
 80191c0:	f04f 0e00 	mov.w	lr, #0
 80191c4:	d020      	beq.n	8019208 <uxr_stream_id+0x54>
 80191c6:	2300      	movs	r3, #0
 80191c8:	2000      	movs	r0, #0
 80191ca:	f36e 0307 	bfi	r3, lr, #0, #8
 80191ce:	f36c 230f 	bfi	r3, ip, #8, #8
 80191d2:	f361 4317 	bfi	r3, r1, #16, #8
 80191d6:	f362 631f 	bfi	r3, r2, #24, #8
 80191da:	fa5f fc83 	uxtb.w	ip, r3
 80191de:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80191e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80191e6:	0e1b      	lsrs	r3, r3, #24
 80191e8:	f36c 0007 	bfi	r0, ip, #0, #8
 80191ec:	f361 200f 	bfi	r0, r1, #8, #8
 80191f0:	f362 4017 	bfi	r0, r2, #16, #8
 80191f4:	f363 601f 	bfi	r0, r3, #24, #8
 80191f8:	b003      	add	sp, #12
 80191fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80191fe:	f100 0e01 	add.w	lr, r0, #1
 8019202:	fa5f fe8e 	uxtb.w	lr, lr
 8019206:	e7de      	b.n	80191c6 <uxr_stream_id+0x12>
 8019208:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801920c:	e7db      	b.n	80191c6 <uxr_stream_id+0x12>
 801920e:	bf00      	nop

08019210 <uxr_stream_id_from_raw>:
 8019210:	b082      	sub	sp, #8
 8019212:	b130      	cbz	r0, 8019222 <uxr_stream_id_from_raw+0x12>
 8019214:	0603      	lsls	r3, r0, #24
 8019216:	d421      	bmi.n	801925c <uxr_stream_id_from_raw+0x4c>
 8019218:	1e42      	subs	r2, r0, #1
 801921a:	f04f 0c01 	mov.w	ip, #1
 801921e:	b2d2      	uxtb	r2, r2
 8019220:	e001      	b.n	8019226 <uxr_stream_id_from_raw+0x16>
 8019222:	4684      	mov	ip, r0
 8019224:	4602      	mov	r2, r0
 8019226:	2300      	movs	r3, #0
 8019228:	f360 0307 	bfi	r3, r0, #0, #8
 801922c:	2000      	movs	r0, #0
 801922e:	f362 230f 	bfi	r3, r2, #8, #8
 8019232:	f36c 4317 	bfi	r3, ip, #16, #8
 8019236:	f361 631f 	bfi	r3, r1, #24, #8
 801923a:	fa5f fc83 	uxtb.w	ip, r3
 801923e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019242:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019246:	0e1b      	lsrs	r3, r3, #24
 8019248:	f36c 0007 	bfi	r0, ip, #0, #8
 801924c:	f361 200f 	bfi	r0, r1, #8, #8
 8019250:	f362 4017 	bfi	r0, r2, #16, #8
 8019254:	f363 601f 	bfi	r0, r3, #24, #8
 8019258:	b002      	add	sp, #8
 801925a:	4770      	bx	lr
 801925c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019260:	f04f 0c02 	mov.w	ip, #2
 8019264:	e7df      	b.n	8019226 <uxr_stream_id_from_raw+0x16>
 8019266:	bf00      	nop

08019268 <uxr_init_stream_storage>:
 8019268:	2300      	movs	r3, #0
 801926a:	7403      	strb	r3, [r0, #16]
 801926c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8019270:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8019274:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8019278:	4770      	bx	lr
 801927a:	bf00      	nop

0801927c <uxr_reset_stream_storage>:
 801927c:	b570      	push	{r4, r5, r6, lr}
 801927e:	7c03      	ldrb	r3, [r0, #16]
 8019280:	4604      	mov	r4, r0
 8019282:	b14b      	cbz	r3, 8019298 <uxr_reset_stream_storage+0x1c>
 8019284:	4606      	mov	r6, r0
 8019286:	2500      	movs	r5, #0
 8019288:	4630      	mov	r0, r6
 801928a:	3501      	adds	r5, #1
 801928c:	f007 f9a4 	bl	80205d8 <uxr_reset_output_best_effort_stream>
 8019290:	7c23      	ldrb	r3, [r4, #16]
 8019292:	3610      	adds	r6, #16
 8019294:	42ab      	cmp	r3, r5
 8019296:	d8f7      	bhi.n	8019288 <uxr_reset_stream_storage+0xc>
 8019298:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801929c:	b15b      	cbz	r3, 80192b6 <uxr_reset_stream_storage+0x3a>
 801929e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80192a2:	2500      	movs	r5, #0
 80192a4:	4630      	mov	r0, r6
 80192a6:	3501      	adds	r5, #1
 80192a8:	f006 ff9c 	bl	80201e4 <uxr_reset_input_best_effort_stream>
 80192ac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80192b0:	3602      	adds	r6, #2
 80192b2:	42ab      	cmp	r3, r5
 80192b4:	d8f6      	bhi.n	80192a4 <uxr_reset_stream_storage+0x28>
 80192b6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80192ba:	b15b      	cbz	r3, 80192d4 <uxr_reset_stream_storage+0x58>
 80192bc:	f104 0618 	add.w	r6, r4, #24
 80192c0:	2500      	movs	r5, #0
 80192c2:	4630      	mov	r0, r6
 80192c4:	3501      	adds	r5, #1
 80192c6:	f007 fa33 	bl	8020730 <uxr_reset_output_reliable_stream>
 80192ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80192ce:	3628      	adds	r6, #40	@ 0x28
 80192d0:	42ab      	cmp	r3, r5
 80192d2:	d8f6      	bhi.n	80192c2 <uxr_reset_stream_storage+0x46>
 80192d4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80192d8:	b15b      	cbz	r3, 80192f2 <uxr_reset_stream_storage+0x76>
 80192da:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80192de:	2500      	movs	r5, #0
 80192e0:	4630      	mov	r0, r6
 80192e2:	3501      	adds	r5, #1
 80192e4:	f006 ffea 	bl	80202bc <uxr_reset_input_reliable_stream>
 80192e8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80192ec:	3618      	adds	r6, #24
 80192ee:	42ab      	cmp	r3, r5
 80192f0:	d8f6      	bhi.n	80192e0 <uxr_reset_stream_storage+0x64>
 80192f2:	bd70      	pop	{r4, r5, r6, pc}

080192f4 <uxr_add_output_best_effort_buffer>:
 80192f4:	b510      	push	{r4, lr}
 80192f6:	7c04      	ldrb	r4, [r0, #16]
 80192f8:	b082      	sub	sp, #8
 80192fa:	f104 0c01 	add.w	ip, r4, #1
 80192fe:	f880 c010 	strb.w	ip, [r0, #16]
 8019302:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019306:	f007 f95d 	bl	80205c4 <uxr_init_output_best_effort_stream>
 801930a:	2201      	movs	r2, #1
 801930c:	4620      	mov	r0, r4
 801930e:	4611      	mov	r1, r2
 8019310:	b002      	add	sp, #8
 8019312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019316:	f7ff bf4d 	b.w	80191b4 <uxr_stream_id>
 801931a:	bf00      	nop

0801931c <uxr_add_output_reliable_buffer>:
 801931c:	b510      	push	{r4, lr}
 801931e:	b084      	sub	sp, #16
 8019320:	4684      	mov	ip, r0
 8019322:	2028      	movs	r0, #40	@ 0x28
 8019324:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019328:	9400      	str	r4, [sp, #0]
 801932a:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801932e:	fb00 c004 	mla	r0, r0, r4, ip
 8019332:	f104 0e01 	add.w	lr, r4, #1
 8019336:	3018      	adds	r0, #24
 8019338:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801933c:	f007 f9c2 	bl	80206c4 <uxr_init_output_reliable_stream>
 8019340:	2201      	movs	r2, #1
 8019342:	2102      	movs	r1, #2
 8019344:	4620      	mov	r0, r4
 8019346:	b004      	add	sp, #16
 8019348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801934c:	f7ff bf32 	b.w	80191b4 <uxr_stream_id>

08019350 <uxr_add_input_best_effort_buffer>:
 8019350:	b510      	push	{r4, lr}
 8019352:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8019356:	b082      	sub	sp, #8
 8019358:	1c62      	adds	r2, r4, #1
 801935a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801935e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8019362:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019366:	f006 ff39 	bl	80201dc <uxr_init_input_best_effort_stream>
 801936a:	2200      	movs	r2, #0
 801936c:	2101      	movs	r1, #1
 801936e:	4620      	mov	r0, r4
 8019370:	b002      	add	sp, #8
 8019372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019376:	f7ff bf1d 	b.w	80191b4 <uxr_stream_id>
 801937a:	bf00      	nop

0801937c <uxr_add_input_reliable_buffer>:
 801937c:	b510      	push	{r4, lr}
 801937e:	b084      	sub	sp, #16
 8019380:	4684      	mov	ip, r0
 8019382:	2018      	movs	r0, #24
 8019384:	9c06      	ldr	r4, [sp, #24]
 8019386:	9400      	str	r4, [sp, #0]
 8019388:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801938c:	fb00 c004 	mla	r0, r0, r4, ip
 8019390:	f104 0e01 	add.w	lr, r4, #1
 8019394:	3048      	adds	r0, #72	@ 0x48
 8019396:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801939a:	f006 ff69 	bl	8020270 <uxr_init_input_reliable_stream>
 801939e:	2200      	movs	r2, #0
 80193a0:	2102      	movs	r1, #2
 80193a2:	4620      	mov	r0, r4
 80193a4:	b004      	add	sp, #16
 80193a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193aa:	f7ff bf03 	b.w	80191b4 <uxr_stream_id>
 80193ae:	bf00      	nop

080193b0 <uxr_get_output_best_effort_stream>:
 80193b0:	7c03      	ldrb	r3, [r0, #16]
 80193b2:	428b      	cmp	r3, r1
 80193b4:	bf8c      	ite	hi
 80193b6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80193ba:	2000      	movls	r0, #0
 80193bc:	4770      	bx	lr
 80193be:	bf00      	nop

080193c0 <uxr_get_output_reliable_stream>:
 80193c0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80193c4:	428b      	cmp	r3, r1
 80193c6:	d904      	bls.n	80193d2 <uxr_get_output_reliable_stream+0x12>
 80193c8:	2328      	movs	r3, #40	@ 0x28
 80193ca:	fb03 0001 	mla	r0, r3, r1, r0
 80193ce:	3018      	adds	r0, #24
 80193d0:	4770      	bx	lr
 80193d2:	2000      	movs	r0, #0
 80193d4:	4770      	bx	lr
 80193d6:	bf00      	nop

080193d8 <uxr_get_input_best_effort_stream>:
 80193d8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80193dc:	428b      	cmp	r3, r1
 80193de:	d903      	bls.n	80193e8 <uxr_get_input_best_effort_stream+0x10>
 80193e0:	3121      	adds	r1, #33	@ 0x21
 80193e2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80193e6:	4770      	bx	lr
 80193e8:	2000      	movs	r0, #0
 80193ea:	4770      	bx	lr

080193ec <uxr_get_input_reliable_stream>:
 80193ec:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80193f0:	428b      	cmp	r3, r1
 80193f2:	d904      	bls.n	80193fe <uxr_get_input_reliable_stream+0x12>
 80193f4:	2318      	movs	r3, #24
 80193f6:	fb03 0001 	mla	r0, r3, r1, r0
 80193fa:	3048      	adds	r0, #72	@ 0x48
 80193fc:	4770      	bx	lr
 80193fe:	2000      	movs	r0, #0
 8019400:	4770      	bx	lr
 8019402:	bf00      	nop

08019404 <uxr_output_streams_confirmed>:
 8019404:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019408:	b183      	cbz	r3, 801942c <uxr_output_streams_confirmed+0x28>
 801940a:	b570      	push	{r4, r5, r6, lr}
 801940c:	4606      	mov	r6, r0
 801940e:	f100 0518 	add.w	r5, r0, #24
 8019412:	2400      	movs	r4, #0
 8019414:	e000      	b.n	8019418 <uxr_output_streams_confirmed+0x14>
 8019416:	b140      	cbz	r0, 801942a <uxr_output_streams_confirmed+0x26>
 8019418:	4628      	mov	r0, r5
 801941a:	3401      	adds	r4, #1
 801941c:	f007 fbfc 	bl	8020c18 <uxr_is_output_up_to_date>
 8019420:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8019424:	3528      	adds	r5, #40	@ 0x28
 8019426:	42a3      	cmp	r3, r4
 8019428:	d8f5      	bhi.n	8019416 <uxr_output_streams_confirmed+0x12>
 801942a:	bd70      	pop	{r4, r5, r6, pc}
 801942c:	2001      	movs	r0, #1
 801942e:	4770      	bx	lr

08019430 <uxr_buffer_submessage_header>:
 8019430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019432:	460e      	mov	r6, r1
 8019434:	2104      	movs	r1, #4
 8019436:	4604      	mov	r4, r0
 8019438:	4615      	mov	r5, r2
 801943a:	461f      	mov	r7, r3
 801943c:	f7fa fed8 	bl	80141f0 <ucdr_align_to>
 8019440:	2301      	movs	r3, #1
 8019442:	4631      	mov	r1, r6
 8019444:	4620      	mov	r0, r4
 8019446:	ea47 0203 	orr.w	r2, r7, r3
 801944a:	7523      	strb	r3, [r4, #20]
 801944c:	462b      	mov	r3, r5
 801944e:	f000 fa29 	bl	80198a4 <uxr_serialize_submessage_header>
 8019452:	4620      	mov	r0, r4
 8019454:	f7fa fee2 	bl	801421c <ucdr_buffer_remaining>
 8019458:	42a8      	cmp	r0, r5
 801945a:	bf34      	ite	cc
 801945c:	2000      	movcc	r0, #0
 801945e:	2001      	movcs	r0, #1
 8019460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019462:	bf00      	nop

08019464 <uxr_read_submessage_header>:
 8019464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019468:	4604      	mov	r4, r0
 801946a:	460d      	mov	r5, r1
 801946c:	2104      	movs	r1, #4
 801946e:	4616      	mov	r6, r2
 8019470:	4698      	mov	r8, r3
 8019472:	f7fa febd 	bl	80141f0 <ucdr_align_to>
 8019476:	4620      	mov	r0, r4
 8019478:	f7fa fed0 	bl	801421c <ucdr_buffer_remaining>
 801947c:	2803      	cmp	r0, #3
 801947e:	bf8c      	ite	hi
 8019480:	2701      	movhi	r7, #1
 8019482:	2700      	movls	r7, #0
 8019484:	d802      	bhi.n	801948c <uxr_read_submessage_header+0x28>
 8019486:	4638      	mov	r0, r7
 8019488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801948c:	4633      	mov	r3, r6
 801948e:	4642      	mov	r2, r8
 8019490:	4620      	mov	r0, r4
 8019492:	4629      	mov	r1, r5
 8019494:	f000 fa1a 	bl	80198cc <uxr_deserialize_submessage_header>
 8019498:	f898 3000 	ldrb.w	r3, [r8]
 801949c:	4638      	mov	r0, r7
 801949e:	f003 0201 	and.w	r2, r3, #1
 80194a2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80194a6:	f888 3000 	strb.w	r3, [r8]
 80194aa:	7522      	strb	r2, [r4, #20]
 80194ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080194b0 <uxr_submessage_padding>:
 80194b0:	f010 0003 	ands.w	r0, r0, #3
 80194b4:	bf18      	it	ne
 80194b6:	f1c0 0004 	rsbne	r0, r0, #4
 80194ba:	4770      	bx	lr

080194bc <uxr_millis>:
 80194bc:	b510      	push	{r4, lr}
 80194be:	b084      	sub	sp, #16
 80194c0:	2001      	movs	r0, #1
 80194c2:	4669      	mov	r1, sp
 80194c4:	f7e8 ff00 	bl	80022c8 <clock_gettime>
 80194c8:	4908      	ldr	r1, [pc, #32]	@ (80194ec <uxr_millis+0x30>)
 80194ca:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80194ce:	fba0 0301 	umull	r0, r3, r0, r1
 80194d2:	1900      	adds	r0, r0, r4
 80194d4:	fb01 3102 	mla	r1, r1, r2, r3
 80194d8:	4a05      	ldr	r2, [pc, #20]	@ (80194f0 <uxr_millis+0x34>)
 80194da:	f04f 0300 	mov.w	r3, #0
 80194de:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80194e2:	f7e6 ff65 	bl	80003b0 <__aeabi_ldivmod>
 80194e6:	b004      	add	sp, #16
 80194e8:	bd10      	pop	{r4, pc}
 80194ea:	bf00      	nop
 80194ec:	3b9aca00 	.word	0x3b9aca00
 80194f0:	000f4240 	.word	0x000f4240

080194f4 <uxr_nanos>:
 80194f4:	b510      	push	{r4, lr}
 80194f6:	b084      	sub	sp, #16
 80194f8:	2001      	movs	r0, #1
 80194fa:	4669      	mov	r1, sp
 80194fc:	f7e8 fee4 	bl	80022c8 <clock_gettime>
 8019500:	4a06      	ldr	r2, [pc, #24]	@ (801951c <uxr_nanos+0x28>)
 8019502:	9800      	ldr	r0, [sp, #0]
 8019504:	9902      	ldr	r1, [sp, #8]
 8019506:	fba0 0302 	umull	r0, r3, r0, r2
 801950a:	9c01      	ldr	r4, [sp, #4]
 801950c:	1840      	adds	r0, r0, r1
 801950e:	fb02 3304 	mla	r3, r2, r4, r3
 8019512:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8019516:	b004      	add	sp, #16
 8019518:	bd10      	pop	{r4, pc}
 801951a:	bf00      	nop
 801951c:	3b9aca00 	.word	0x3b9aca00

08019520 <on_full_output_buffer_fragmented>:
 8019520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019524:	460c      	mov	r4, r1
 8019526:	b08a      	sub	sp, #40	@ 0x28
 8019528:	4606      	mov	r6, r0
 801952a:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801952e:	f104 0008 	add.w	r0, r4, #8
 8019532:	f7ff ff45 	bl	80193c0 <uxr_get_output_reliable_stream>
 8019536:	4605      	mov	r5, r0
 8019538:	f007 fb78 	bl	8020c2c <get_available_free_slots>
 801953c:	b968      	cbnz	r0, 801955a <on_full_output_buffer_fragmented+0x3a>
 801953e:	4620      	mov	r0, r4
 8019540:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8019544:	4798      	blx	r3
 8019546:	b918      	cbnz	r0, 8019550 <on_full_output_buffer_fragmented+0x30>
 8019548:	2001      	movs	r0, #1
 801954a:	b00a      	add	sp, #40	@ 0x28
 801954c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019550:	4628      	mov	r0, r5
 8019552:	f007 fb6b 	bl	8020c2c <get_available_free_slots>
 8019556:	2800      	cmp	r0, #0
 8019558:	d0f6      	beq.n	8019548 <on_full_output_buffer_fragmented+0x28>
 801955a:	8929      	ldrh	r1, [r5, #8]
 801955c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019560:	89eb      	ldrh	r3, [r5, #14]
 8019562:	7b28      	ldrb	r0, [r5, #12]
 8019564:	686f      	ldr	r7, [r5, #4]
 8019566:	1a12      	subs	r2, r2, r0
 8019568:	fbb3 f0f1 	udiv	r0, r3, r1
 801956c:	fbb7 f7f1 	udiv	r7, r7, r1
 8019570:	fb01 3110 	mls	r1, r1, r0, r3
 8019574:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8019578:	b289      	uxth	r1, r1
 801957a:	fb07 f101 	mul.w	r1, r7, r1
 801957e:	3f04      	subs	r7, #4
 8019580:	443a      	add	r2, r7
 8019582:	3104      	adds	r1, #4
 8019584:	fa1f f882 	uxth.w	r8, r2
 8019588:	463a      	mov	r2, r7
 801958a:	eba3 0308 	sub.w	r3, r3, r8
 801958e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8019592:	682b      	ldr	r3, [r5, #0]
 8019594:	4419      	add	r1, r3
 8019596:	2300      	movs	r3, #0
 8019598:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801959c:	9000      	str	r0, [sp, #0]
 801959e:	a802      	add	r0, sp, #8
 80195a0:	f7fa fdf8 	bl	8014194 <ucdr_init_buffer_origin_offset>
 80195a4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80195a8:	f102 0308 	add.w	r3, r2, #8
 80195ac:	42bb      	cmp	r3, r7
 80195ae:	d927      	bls.n	8019600 <on_full_output_buffer_fragmented+0xe0>
 80195b0:	4642      	mov	r2, r8
 80195b2:	2300      	movs	r3, #0
 80195b4:	210d      	movs	r1, #13
 80195b6:	a802      	add	r0, sp, #8
 80195b8:	f7ff ff3a 	bl	8019430 <uxr_buffer_submessage_header>
 80195bc:	8929      	ldrh	r1, [r5, #8]
 80195be:	89eb      	ldrh	r3, [r5, #14]
 80195c0:	686a      	ldr	r2, [r5, #4]
 80195c2:	fbb3 f0f1 	udiv	r0, r3, r1
 80195c6:	fbb2 f2f1 	udiv	r2, r2, r1
 80195ca:	fb01 3310 	mls	r3, r1, r0, r3
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	fb02 f303 	mul.w	r3, r2, r3
 80195d4:	682a      	ldr	r2, [r5, #0]
 80195d6:	50d7      	str	r7, [r2, r3]
 80195d8:	2101      	movs	r1, #1
 80195da:	89e8      	ldrh	r0, [r5, #14]
 80195dc:	f007 fc78 	bl	8020ed0 <uxr_seq_num_add>
 80195e0:	9904      	ldr	r1, [sp, #16]
 80195e2:	9a03      	ldr	r2, [sp, #12]
 80195e4:	81e8      	strh	r0, [r5, #14]
 80195e6:	4630      	mov	r0, r6
 80195e8:	1a52      	subs	r2, r2, r1
 80195ea:	f7fa fde5 	bl	80141b8 <ucdr_init_buffer>
 80195ee:	4630      	mov	r0, r6
 80195f0:	4622      	mov	r2, r4
 80195f2:	490f      	ldr	r1, [pc, #60]	@ (8019630 <on_full_output_buffer_fragmented+0x110>)
 80195f4:	f7fa fdb4 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 80195f8:	2000      	movs	r0, #0
 80195fa:	b00a      	add	sp, #40	@ 0x28
 80195fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019600:	b292      	uxth	r2, r2
 8019602:	2302      	movs	r3, #2
 8019604:	210d      	movs	r1, #13
 8019606:	a802      	add	r0, sp, #8
 8019608:	f7ff ff12 	bl	8019430 <uxr_buffer_submessage_header>
 801960c:	8928      	ldrh	r0, [r5, #8]
 801960e:	89eb      	ldrh	r3, [r5, #14]
 8019610:	6869      	ldr	r1, [r5, #4]
 8019612:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8019616:	fbb3 f7f0 	udiv	r7, r3, r0
 801961a:	fbb1 f1f0 	udiv	r1, r1, r0
 801961e:	fb00 3317 	mls	r3, r0, r7, r3
 8019622:	3208      	adds	r2, #8
 8019624:	b29b      	uxth	r3, r3
 8019626:	fb01 f303 	mul.w	r3, r1, r3
 801962a:	6829      	ldr	r1, [r5, #0]
 801962c:	50ca      	str	r2, [r1, r3]
 801962e:	e7d3      	b.n	80195d8 <on_full_output_buffer_fragmented+0xb8>
 8019630:	08019521 	.word	0x08019521

08019634 <uxr_prepare_output_stream>:
 8019634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019636:	b087      	sub	sp, #28
 8019638:	2707      	movs	r7, #7
 801963a:	2500      	movs	r5, #0
 801963c:	461c      	mov	r4, r3
 801963e:	4606      	mov	r6, r0
 8019640:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019644:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019646:	e9cd 7500 	strd	r7, r5, [sp]
 801964a:	3204      	adds	r2, #4
 801964c:	f7fe ffc8 	bl	80185e0 <uxr_prepare_stream_to_write_submessage>
 8019650:	f080 0201 	eor.w	r2, r0, #1
 8019654:	b2d2      	uxtb	r2, r2
 8019656:	75a2      	strb	r2, [r4, #22]
 8019658:	b112      	cbz	r2, 8019660 <uxr_prepare_output_stream+0x2c>
 801965a:	4628      	mov	r0, r5
 801965c:	b007      	add	sp, #28
 801965e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019660:	aa05      	add	r2, sp, #20
 8019662:	9902      	ldr	r1, [sp, #8]
 8019664:	4630      	mov	r0, r6
 8019666:	f7ff f8f7 	bl	8018858 <uxr_init_base_object_request>
 801966a:	a905      	add	r1, sp, #20
 801966c:	4605      	mov	r5, r0
 801966e:	4620      	mov	r0, r4
 8019670:	f001 f8d2 	bl	801a818 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019674:	69a6      	ldr	r6, [r4, #24]
 8019676:	69e7      	ldr	r7, [r4, #28]
 8019678:	4620      	mov	r0, r4
 801967a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801967e:	1a52      	subs	r2, r2, r1
 8019680:	f7fa fd9a 	bl	80141b8 <ucdr_init_buffer>
 8019684:	4620      	mov	r0, r4
 8019686:	463a      	mov	r2, r7
 8019688:	4631      	mov	r1, r6
 801968a:	f7fa fd69 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 801968e:	4628      	mov	r0, r5
 8019690:	b007      	add	sp, #28
 8019692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019694 <uxr_prepare_output_stream_fragmented>:
 8019694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019698:	b091      	sub	sp, #68	@ 0x44
 801969a:	4605      	mov	r5, r0
 801969c:	3008      	adds	r0, #8
 801969e:	461e      	mov	r6, r3
 80196a0:	9105      	str	r1, [sp, #20]
 80196a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80196a6:	9204      	str	r2, [sp, #16]
 80196a8:	f7ff fe8a 	bl	80193c0 <uxr_get_output_reliable_stream>
 80196ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80196b0:	2b01      	cmp	r3, #1
 80196b2:	f000 8093 	beq.w	80197dc <uxr_prepare_output_stream_fragmented+0x148>
 80196b6:	4604      	mov	r4, r0
 80196b8:	2800      	cmp	r0, #0
 80196ba:	f000 808f 	beq.w	80197dc <uxr_prepare_output_stream_fragmented+0x148>
 80196be:	f007 fab5 	bl	8020c2c <get_available_free_slots>
 80196c2:	2800      	cmp	r0, #0
 80196c4:	f000 8085 	beq.w	80197d2 <uxr_prepare_output_stream_fragmented+0x13e>
 80196c8:	8923      	ldrh	r3, [r4, #8]
 80196ca:	89e7      	ldrh	r7, [r4, #14]
 80196cc:	6862      	ldr	r2, [r4, #4]
 80196ce:	fbb7 f9f3 	udiv	r9, r7, r3
 80196d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80196d6:	fb03 7919 	mls	r9, r3, r9, r7
 80196da:	6823      	ldr	r3, [r4, #0]
 80196dc:	f1a2 0b04 	sub.w	fp, r2, #4
 80196e0:	9203      	str	r2, [sp, #12]
 80196e2:	fa1f f989 	uxth.w	r9, r9
 80196e6:	fb02 f909 	mul.w	r9, r2, r9
 80196ea:	f109 0904 	add.w	r9, r9, #4
 80196ee:	4499      	add	r9, r3
 80196f0:	7b23      	ldrb	r3, [r4, #12]
 80196f2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80196f6:	4543      	cmp	r3, r8
 80196f8:	d37c      	bcc.n	80197f4 <uxr_prepare_output_stream_fragmented+0x160>
 80196fa:	f1ab 0a04 	sub.w	sl, fp, #4
 80196fe:	465a      	mov	r2, fp
 8019700:	4649      	mov	r1, r9
 8019702:	a808      	add	r0, sp, #32
 8019704:	ebaa 0a03 	sub.w	sl, sl, r3
 8019708:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801970a:	f8cd 8000 	str.w	r8, [sp]
 801970e:	3308      	adds	r3, #8
 8019710:	fa1f fa8a 	uxth.w	sl, sl
 8019714:	9302      	str	r3, [sp, #8]
 8019716:	2300      	movs	r3, #0
 8019718:	f7fa fd3c 	bl	8014194 <ucdr_init_buffer_origin_offset>
 801971c:	9b02      	ldr	r3, [sp, #8]
 801971e:	4652      	mov	r2, sl
 8019720:	210d      	movs	r1, #13
 8019722:	455b      	cmp	r3, fp
 8019724:	bf34      	ite	cc
 8019726:	2302      	movcc	r3, #2
 8019728:	2300      	movcs	r3, #0
 801972a:	a808      	add	r0, sp, #32
 801972c:	f7ff fe80 	bl	8019430 <uxr_buffer_submessage_header>
 8019730:	8921      	ldrh	r1, [r4, #8]
 8019732:	6863      	ldr	r3, [r4, #4]
 8019734:	4638      	mov	r0, r7
 8019736:	fbb7 f2f1 	udiv	r2, r7, r1
 801973a:	fbb3 f3f1 	udiv	r3, r3, r1
 801973e:	fb01 7212 	mls	r2, r1, r2, r7
 8019742:	2101      	movs	r1, #1
 8019744:	b292      	uxth	r2, r2
 8019746:	fb02 f303 	mul.w	r3, r2, r3
 801974a:	6822      	ldr	r2, [r4, #0]
 801974c:	f842 b003 	str.w	fp, [r2, r3]
 8019750:	f007 fbbe 	bl	8020ed0 <uxr_seq_num_add>
 8019754:	9b03      	ldr	r3, [sp, #12]
 8019756:	f108 0104 	add.w	r1, r8, #4
 801975a:	4607      	mov	r7, r0
 801975c:	f1a3 0208 	sub.w	r2, r3, #8
 8019760:	4630      	mov	r0, r6
 8019762:	4449      	add	r1, r9
 8019764:	eba2 0208 	sub.w	r2, r2, r8
 8019768:	f7fa fd26 	bl	80141b8 <ucdr_init_buffer>
 801976c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801976e:	2107      	movs	r1, #7
 8019770:	81e7      	strh	r7, [r4, #14]
 8019772:	1d1a      	adds	r2, r3, #4
 8019774:	2300      	movs	r3, #0
 8019776:	4630      	mov	r0, r6
 8019778:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801977c:	bf28      	it	cs
 801977e:	461a      	movcs	r2, r3
 8019780:	b292      	uxth	r2, r2
 8019782:	f7ff fe55 	bl	8019430 <uxr_buffer_submessage_header>
 8019786:	aa07      	add	r2, sp, #28
 8019788:	9904      	ldr	r1, [sp, #16]
 801978a:	4628      	mov	r0, r5
 801978c:	f7ff f864 	bl	8018858 <uxr_init_base_object_request>
 8019790:	4604      	mov	r4, r0
 8019792:	b320      	cbz	r0, 80197de <uxr_prepare_output_stream_fragmented+0x14a>
 8019794:	a907      	add	r1, sp, #28
 8019796:	4630      	mov	r0, r6
 8019798:	f001 f83e 	bl	801a818 <uxr_serialize_WRITE_DATA_Payload_Data>
 801979c:	4630      	mov	r0, r6
 801979e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80197a2:	1a52      	subs	r2, r2, r1
 80197a4:	f7fa fd08 	bl	80141b8 <ucdr_init_buffer>
 80197a8:	9b05      	ldr	r3, [sp, #20]
 80197aa:	9a02      	ldr	r2, [sp, #8]
 80197ac:	4630      	mov	r0, r6
 80197ae:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80197b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80197b4:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 80197b8:	462a      	mov	r2, r5
 80197ba:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80197be:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80197c0:	4918      	ldr	r1, [pc, #96]	@ (8019824 <uxr_prepare_output_stream_fragmented+0x190>)
 80197c2:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80197c6:	f7fa fccb 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 80197ca:	4620      	mov	r0, r4
 80197cc:	b011      	add	sp, #68	@ 0x44
 80197ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80197d4:	4628      	mov	r0, r5
 80197d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80197d8:	4798      	blx	r3
 80197da:	b920      	cbnz	r0, 80197e6 <uxr_prepare_output_stream_fragmented+0x152>
 80197dc:	2400      	movs	r4, #0
 80197de:	4620      	mov	r0, r4
 80197e0:	b011      	add	sp, #68	@ 0x44
 80197e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197e6:	4620      	mov	r0, r4
 80197e8:	f007 fa20 	bl	8020c2c <get_available_free_slots>
 80197ec:	2800      	cmp	r0, #0
 80197ee:	f47f af6b 	bne.w	80196c8 <uxr_prepare_output_stream_fragmented+0x34>
 80197f2:	e7f3      	b.n	80197dc <uxr_prepare_output_stream_fragmented+0x148>
 80197f4:	4638      	mov	r0, r7
 80197f6:	2101      	movs	r1, #1
 80197f8:	f007 fb6a 	bl	8020ed0 <uxr_seq_num_add>
 80197fc:	8922      	ldrh	r2, [r4, #8]
 80197fe:	6863      	ldr	r3, [r4, #4]
 8019800:	4607      	mov	r7, r0
 8019802:	fbb3 f9f2 	udiv	r9, r3, r2
 8019806:	fbb0 f3f2 	udiv	r3, r0, r2
 801980a:	fb02 0313 	mls	r3, r2, r3, r0
 801980e:	b29b      	uxth	r3, r3
 8019810:	fb03 f909 	mul.w	r9, r3, r9
 8019814:	6823      	ldr	r3, [r4, #0]
 8019816:	f109 0904 	add.w	r9, r9, #4
 801981a:	4499      	add	r9, r3
 801981c:	7b23      	ldrb	r3, [r4, #12]
 801981e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8019822:	e76a      	b.n	80196fa <uxr_prepare_output_stream_fragmented+0x66>
 8019824:	08019521 	.word	0x08019521

08019828 <uxr_serialize_message_header>:
 8019828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801982a:	4616      	mov	r6, r2
 801982c:	b083      	sub	sp, #12
 801982e:	4604      	mov	r4, r0
 8019830:	460d      	mov	r5, r1
 8019832:	9301      	str	r3, [sp, #4]
 8019834:	9f08      	ldr	r7, [sp, #32]
 8019836:	f7f9 fa55 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801983a:	4631      	mov	r1, r6
 801983c:	4620      	mov	r0, r4
 801983e:	f7f9 fa51 	bl	8012ce4 <ucdr_serialize_uint8_t>
 8019842:	9a01      	ldr	r2, [sp, #4]
 8019844:	2101      	movs	r1, #1
 8019846:	4620      	mov	r0, r4
 8019848:	f7f9 faf8 	bl	8012e3c <ucdr_serialize_endian_uint16_t>
 801984c:	062b      	lsls	r3, r5, #24
 801984e:	d501      	bpl.n	8019854 <uxr_serialize_message_header+0x2c>
 8019850:	b003      	add	sp, #12
 8019852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019854:	2204      	movs	r2, #4
 8019856:	4639      	mov	r1, r7
 8019858:	4620      	mov	r0, r4
 801985a:	b003      	add	sp, #12
 801985c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019860:	f006 bbd8 	b.w	8020014 <ucdr_serialize_array_uint8_t>

08019864 <uxr_deserialize_message_header>:
 8019864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019866:	4616      	mov	r6, r2
 8019868:	b083      	sub	sp, #12
 801986a:	4604      	mov	r4, r0
 801986c:	460d      	mov	r5, r1
 801986e:	9301      	str	r3, [sp, #4]
 8019870:	9f08      	ldr	r7, [sp, #32]
 8019872:	f7f9 fa4d 	bl	8012d10 <ucdr_deserialize_uint8_t>
 8019876:	4631      	mov	r1, r6
 8019878:	4620      	mov	r0, r4
 801987a:	f7f9 fa49 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801987e:	9a01      	ldr	r2, [sp, #4]
 8019880:	2101      	movs	r1, #1
 8019882:	4620      	mov	r0, r4
 8019884:	f7f9 fbce 	bl	8013024 <ucdr_deserialize_endian_uint16_t>
 8019888:	f995 3000 	ldrsb.w	r3, [r5]
 801988c:	2b00      	cmp	r3, #0
 801988e:	da01      	bge.n	8019894 <uxr_deserialize_message_header+0x30>
 8019890:	b003      	add	sp, #12
 8019892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019894:	2204      	movs	r2, #4
 8019896:	4639      	mov	r1, r7
 8019898:	4620      	mov	r0, r4
 801989a:	b003      	add	sp, #12
 801989c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80198a0:	f006 bc1c 	b.w	80200dc <ucdr_deserialize_array_uint8_t>

080198a4 <uxr_serialize_submessage_header>:
 80198a4:	b530      	push	{r4, r5, lr}
 80198a6:	4615      	mov	r5, r2
 80198a8:	b083      	sub	sp, #12
 80198aa:	4604      	mov	r4, r0
 80198ac:	9301      	str	r3, [sp, #4]
 80198ae:	f7f9 fa19 	bl	8012ce4 <ucdr_serialize_uint8_t>
 80198b2:	4629      	mov	r1, r5
 80198b4:	4620      	mov	r0, r4
 80198b6:	f7f9 fa15 	bl	8012ce4 <ucdr_serialize_uint8_t>
 80198ba:	9a01      	ldr	r2, [sp, #4]
 80198bc:	2101      	movs	r1, #1
 80198be:	4620      	mov	r0, r4
 80198c0:	b003      	add	sp, #12
 80198c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198c6:	f7f9 bab9 	b.w	8012e3c <ucdr_serialize_endian_uint16_t>
 80198ca:	bf00      	nop

080198cc <uxr_deserialize_submessage_header>:
 80198cc:	b530      	push	{r4, r5, lr}
 80198ce:	4615      	mov	r5, r2
 80198d0:	b083      	sub	sp, #12
 80198d2:	4604      	mov	r4, r0
 80198d4:	9301      	str	r3, [sp, #4]
 80198d6:	f7f9 fa1b 	bl	8012d10 <ucdr_deserialize_uint8_t>
 80198da:	4629      	mov	r1, r5
 80198dc:	4620      	mov	r0, r4
 80198de:	f7f9 fa17 	bl	8012d10 <ucdr_deserialize_uint8_t>
 80198e2:	9a01      	ldr	r2, [sp, #4]
 80198e4:	2101      	movs	r1, #1
 80198e6:	4620      	mov	r0, r4
 80198e8:	b003      	add	sp, #12
 80198ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198ee:	f7f9 bb99 	b.w	8013024 <ucdr_deserialize_endian_uint16_t>
 80198f2:	bf00      	nop

080198f4 <uxr_serialize_CLIENT_Representation>:
 80198f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198f8:	2204      	movs	r2, #4
 80198fa:	460e      	mov	r6, r1
 80198fc:	4605      	mov	r5, r0
 80198fe:	f006 fb89 	bl	8020014 <ucdr_serialize_array_uint8_t>
 8019902:	4607      	mov	r7, r0
 8019904:	2202      	movs	r2, #2
 8019906:	1d31      	adds	r1, r6, #4
 8019908:	4628      	mov	r0, r5
 801990a:	f006 fb83 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801990e:	4038      	ands	r0, r7
 8019910:	2202      	movs	r2, #2
 8019912:	1db1      	adds	r1, r6, #6
 8019914:	b2c7      	uxtb	r7, r0
 8019916:	4628      	mov	r0, r5
 8019918:	f006 fb7c 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801991c:	2204      	movs	r2, #4
 801991e:	4007      	ands	r7, r0
 8019920:	f106 0108 	add.w	r1, r6, #8
 8019924:	4628      	mov	r0, r5
 8019926:	f006 fb75 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801992a:	4007      	ands	r7, r0
 801992c:	7b31      	ldrb	r1, [r6, #12]
 801992e:	4628      	mov	r0, r5
 8019930:	f7f9 f9d8 	bl	8012ce4 <ucdr_serialize_uint8_t>
 8019934:	7b71      	ldrb	r1, [r6, #13]
 8019936:	4007      	ands	r7, r0
 8019938:	4628      	mov	r0, r5
 801993a:	f7f9 f9a5 	bl	8012c88 <ucdr_serialize_bool>
 801993e:	7b73      	ldrb	r3, [r6, #13]
 8019940:	ea07 0800 	and.w	r8, r7, r0
 8019944:	b93b      	cbnz	r3, 8019956 <uxr_serialize_CLIENT_Representation+0x62>
 8019946:	8bb1      	ldrh	r1, [r6, #28]
 8019948:	4628      	mov	r0, r5
 801994a:	f7f9 f9f7 	bl	8012d3c <ucdr_serialize_uint16_t>
 801994e:	ea08 0000 	and.w	r0, r8, r0
 8019952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019956:	6931      	ldr	r1, [r6, #16]
 8019958:	4628      	mov	r0, r5
 801995a:	f7f9 fbd9 	bl	8013110 <ucdr_serialize_uint32_t>
 801995e:	6933      	ldr	r3, [r6, #16]
 8019960:	b1e3      	cbz	r3, 801999c <uxr_serialize_CLIENT_Representation+0xa8>
 8019962:	b1c0      	cbz	r0, 8019996 <uxr_serialize_CLIENT_Representation+0xa2>
 8019964:	4637      	mov	r7, r6
 8019966:	f04f 0900 	mov.w	r9, #0
 801996a:	e000      	b.n	801996e <uxr_serialize_CLIENT_Representation+0x7a>
 801996c:	b19c      	cbz	r4, 8019996 <uxr_serialize_CLIENT_Representation+0xa2>
 801996e:	6979      	ldr	r1, [r7, #20]
 8019970:	4628      	mov	r0, r5
 8019972:	f006 fc1b 	bl	80201ac <ucdr_serialize_string>
 8019976:	69b9      	ldr	r1, [r7, #24]
 8019978:	4604      	mov	r4, r0
 801997a:	4628      	mov	r0, r5
 801997c:	f006 fc16 	bl	80201ac <ucdr_serialize_string>
 8019980:	f109 0901 	add.w	r9, r9, #1
 8019984:	6933      	ldr	r3, [r6, #16]
 8019986:	4004      	ands	r4, r0
 8019988:	3708      	adds	r7, #8
 801998a:	4599      	cmp	r9, r3
 801998c:	b2e4      	uxtb	r4, r4
 801998e:	d3ed      	bcc.n	801996c <uxr_serialize_CLIENT_Representation+0x78>
 8019990:	ea08 0804 	and.w	r8, r8, r4
 8019994:	e7d7      	b.n	8019946 <uxr_serialize_CLIENT_Representation+0x52>
 8019996:	f04f 0800 	mov.w	r8, #0
 801999a:	e7d4      	b.n	8019946 <uxr_serialize_CLIENT_Representation+0x52>
 801999c:	ea08 0800 	and.w	r8, r8, r0
 80199a0:	e7d1      	b.n	8019946 <uxr_serialize_CLIENT_Representation+0x52>
 80199a2:	bf00      	nop

080199a4 <uxr_deserialize_CLIENT_Representation>:
 80199a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199a8:	2204      	movs	r2, #4
 80199aa:	460c      	mov	r4, r1
 80199ac:	4605      	mov	r5, r0
 80199ae:	f006 fb95 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 80199b2:	4607      	mov	r7, r0
 80199b4:	2202      	movs	r2, #2
 80199b6:	1d21      	adds	r1, r4, #4
 80199b8:	4628      	mov	r0, r5
 80199ba:	f006 fb8f 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 80199be:	4038      	ands	r0, r7
 80199c0:	2202      	movs	r2, #2
 80199c2:	1da1      	adds	r1, r4, #6
 80199c4:	b2c6      	uxtb	r6, r0
 80199c6:	4628      	mov	r0, r5
 80199c8:	f006 fb88 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 80199cc:	2204      	movs	r2, #4
 80199ce:	4006      	ands	r6, r0
 80199d0:	f104 0108 	add.w	r1, r4, #8
 80199d4:	4628      	mov	r0, r5
 80199d6:	f006 fb81 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 80199da:	4006      	ands	r6, r0
 80199dc:	f104 010c 	add.w	r1, r4, #12
 80199e0:	4628      	mov	r0, r5
 80199e2:	f7f9 f995 	bl	8012d10 <ucdr_deserialize_uint8_t>
 80199e6:	f104 010d 	add.w	r1, r4, #13
 80199ea:	ea06 0700 	and.w	r7, r6, r0
 80199ee:	4628      	mov	r0, r5
 80199f0:	f7f9 f960 	bl	8012cb4 <ucdr_deserialize_bool>
 80199f4:	7b63      	ldrb	r3, [r4, #13]
 80199f6:	4007      	ands	r7, r0
 80199f8:	b93b      	cbnz	r3, 8019a0a <uxr_deserialize_CLIENT_Representation+0x66>
 80199fa:	f104 011c 	add.w	r1, r4, #28
 80199fe:	4628      	mov	r0, r5
 8019a00:	f7f9 fa9c 	bl	8012f3c <ucdr_deserialize_uint16_t>
 8019a04:	4038      	ands	r0, r7
 8019a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a0a:	f104 0110 	add.w	r1, r4, #16
 8019a0e:	4628      	mov	r0, r5
 8019a10:	f7f9 fcae 	bl	8013370 <ucdr_deserialize_uint32_t>
 8019a14:	6923      	ldr	r3, [r4, #16]
 8019a16:	2b01      	cmp	r3, #1
 8019a18:	d903      	bls.n	8019a22 <uxr_deserialize_CLIENT_Representation+0x7e>
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	2700      	movs	r7, #0
 8019a1e:	75ab      	strb	r3, [r5, #22]
 8019a20:	e7eb      	b.n	80199fa <uxr_deserialize_CLIENT_Representation+0x56>
 8019a22:	b30b      	cbz	r3, 8019a68 <uxr_deserialize_CLIENT_Representation+0xc4>
 8019a24:	b1f0      	cbz	r0, 8019a64 <uxr_deserialize_CLIENT_Representation+0xc0>
 8019a26:	46a0      	mov	r8, r4
 8019a28:	f04f 0900 	mov.w	r9, #0
 8019a2c:	e000      	b.n	8019a30 <uxr_deserialize_CLIENT_Representation+0x8c>
 8019a2e:	b1ce      	cbz	r6, 8019a64 <uxr_deserialize_CLIENT_Representation+0xc0>
 8019a30:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8019a34:	f108 0808 	add.w	r8, r8, #8
 8019a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a3c:	4628      	mov	r0, r5
 8019a3e:	f006 fbc5 	bl	80201cc <ucdr_deserialize_string>
 8019a42:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019a46:	4606      	mov	r6, r0
 8019a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	f109 0901 	add.w	r9, r9, #1
 8019a52:	f006 fbbb 	bl	80201cc <ucdr_deserialize_string>
 8019a56:	6923      	ldr	r3, [r4, #16]
 8019a58:	4006      	ands	r6, r0
 8019a5a:	4599      	cmp	r9, r3
 8019a5c:	b2f6      	uxtb	r6, r6
 8019a5e:	d3e6      	bcc.n	8019a2e <uxr_deserialize_CLIENT_Representation+0x8a>
 8019a60:	4037      	ands	r7, r6
 8019a62:	e7ca      	b.n	80199fa <uxr_deserialize_CLIENT_Representation+0x56>
 8019a64:	2700      	movs	r7, #0
 8019a66:	e7c8      	b.n	80199fa <uxr_deserialize_CLIENT_Representation+0x56>
 8019a68:	4007      	ands	r7, r0
 8019a6a:	e7c6      	b.n	80199fa <uxr_deserialize_CLIENT_Representation+0x56>

08019a6c <uxr_serialize_AGENT_Representation>:
 8019a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a70:	2204      	movs	r2, #4
 8019a72:	460f      	mov	r7, r1
 8019a74:	4605      	mov	r5, r0
 8019a76:	f006 facd 	bl	8020014 <ucdr_serialize_array_uint8_t>
 8019a7a:	4604      	mov	r4, r0
 8019a7c:	2202      	movs	r2, #2
 8019a7e:	1d39      	adds	r1, r7, #4
 8019a80:	4628      	mov	r0, r5
 8019a82:	f006 fac7 	bl	8020014 <ucdr_serialize_array_uint8_t>
 8019a86:	4020      	ands	r0, r4
 8019a88:	2202      	movs	r2, #2
 8019a8a:	1db9      	adds	r1, r7, #6
 8019a8c:	b2c4      	uxtb	r4, r0
 8019a8e:	4628      	mov	r0, r5
 8019a90:	f006 fac0 	bl	8020014 <ucdr_serialize_array_uint8_t>
 8019a94:	7a39      	ldrb	r1, [r7, #8]
 8019a96:	4004      	ands	r4, r0
 8019a98:	4628      	mov	r0, r5
 8019a9a:	f7f9 f8f5 	bl	8012c88 <ucdr_serialize_bool>
 8019a9e:	7a3b      	ldrb	r3, [r7, #8]
 8019aa0:	ea00 0804 	and.w	r8, r0, r4
 8019aa4:	b913      	cbnz	r3, 8019aac <uxr_serialize_AGENT_Representation+0x40>
 8019aa6:	4640      	mov	r0, r8
 8019aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019aac:	68f9      	ldr	r1, [r7, #12]
 8019aae:	4628      	mov	r0, r5
 8019ab0:	f7f9 fb2e 	bl	8013110 <ucdr_serialize_uint32_t>
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	b303      	cbz	r3, 8019afa <uxr_serialize_AGENT_Representation+0x8e>
 8019ab8:	b1d0      	cbz	r0, 8019af0 <uxr_serialize_AGENT_Representation+0x84>
 8019aba:	463e      	mov	r6, r7
 8019abc:	f04f 0900 	mov.w	r9, #0
 8019ac0:	e000      	b.n	8019ac4 <uxr_serialize_AGENT_Representation+0x58>
 8019ac2:	b1ac      	cbz	r4, 8019af0 <uxr_serialize_AGENT_Representation+0x84>
 8019ac4:	6931      	ldr	r1, [r6, #16]
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	f006 fb70 	bl	80201ac <ucdr_serialize_string>
 8019acc:	6971      	ldr	r1, [r6, #20]
 8019ace:	4604      	mov	r4, r0
 8019ad0:	4628      	mov	r0, r5
 8019ad2:	f006 fb6b 	bl	80201ac <ucdr_serialize_string>
 8019ad6:	f109 0901 	add.w	r9, r9, #1
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	4004      	ands	r4, r0
 8019ade:	3608      	adds	r6, #8
 8019ae0:	4599      	cmp	r9, r3
 8019ae2:	b2e4      	uxtb	r4, r4
 8019ae4:	d3ed      	bcc.n	8019ac2 <uxr_serialize_AGENT_Representation+0x56>
 8019ae6:	ea08 0804 	and.w	r8, r8, r4
 8019aea:	4640      	mov	r0, r8
 8019aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019af0:	f04f 0800 	mov.w	r8, #0
 8019af4:	4640      	mov	r0, r8
 8019af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019afa:	ea08 0800 	and.w	r8, r8, r0
 8019afe:	e7d2      	b.n	8019aa6 <uxr_serialize_AGENT_Representation+0x3a>

08019b00 <uxr_serialize_DATAWRITER_Representation>:
 8019b00:	b570      	push	{r4, r5, r6, lr}
 8019b02:	460d      	mov	r5, r1
 8019b04:	7809      	ldrb	r1, [r1, #0]
 8019b06:	4606      	mov	r6, r0
 8019b08:	f7f9 f8ec 	bl	8012ce4 <ucdr_serialize_uint8_t>
 8019b0c:	4604      	mov	r4, r0
 8019b0e:	b130      	cbz	r0, 8019b1e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b10:	782b      	ldrb	r3, [r5, #0]
 8019b12:	2b02      	cmp	r3, #2
 8019b14:	d00c      	beq.n	8019b30 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019b16:	2b03      	cmp	r3, #3
 8019b18:	d010      	beq.n	8019b3c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d008      	beq.n	8019b30 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019b1e:	2202      	movs	r2, #2
 8019b20:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019b24:	4630      	mov	r0, r6
 8019b26:	f006 fa75 	bl	8020014 <ucdr_serialize_array_uint8_t>
 8019b2a:	4020      	ands	r0, r4
 8019b2c:	b2c0      	uxtb	r0, r0
 8019b2e:	bd70      	pop	{r4, r5, r6, pc}
 8019b30:	6869      	ldr	r1, [r5, #4]
 8019b32:	4630      	mov	r0, r6
 8019b34:	f006 fb3a 	bl	80201ac <ucdr_serialize_string>
 8019b38:	4604      	mov	r4, r0
 8019b3a:	e7f0      	b.n	8019b1e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b3c:	4629      	mov	r1, r5
 8019b3e:	4630      	mov	r0, r6
 8019b40:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019b44:	3104      	adds	r1, #4
 8019b46:	f7fd f947 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 8019b4a:	4604      	mov	r4, r0
 8019b4c:	e7e7      	b.n	8019b1e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b4e:	bf00      	nop

08019b50 <uxr_serialize_ObjectVariant.part.0>:
 8019b50:	b570      	push	{r4, r5, r6, lr}
 8019b52:	780b      	ldrb	r3, [r1, #0]
 8019b54:	460c      	mov	r4, r1
 8019b56:	4605      	mov	r5, r0
 8019b58:	3b01      	subs	r3, #1
 8019b5a:	2b0d      	cmp	r3, #13
 8019b5c:	d854      	bhi.n	8019c08 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019b5e:	e8df f003 	tbb	[pc, r3]
 8019b62:	0730      	.short	0x0730
 8019b64:	07071b1b 	.word	0x07071b1b
 8019b68:	0c530707 	.word	0x0c530707
 8019b6c:	494e0c0c 	.word	0x494e0c0c
 8019b70:	3104      	adds	r1, #4
 8019b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b76:	f7ff bfc3 	b.w	8019b00 <uxr_serialize_DATAWRITER_Representation>
 8019b7a:	7909      	ldrb	r1, [r1, #4]
 8019b7c:	f7f9 f8b2 	bl	8012ce4 <ucdr_serialize_uint8_t>
 8019b80:	b1e8      	cbz	r0, 8019bbe <uxr_serialize_ObjectVariant.part.0+0x6e>
 8019b82:	7923      	ldrb	r3, [r4, #4]
 8019b84:	2b01      	cmp	r3, #1
 8019b86:	d001      	beq.n	8019b8c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019b88:	2b02      	cmp	r3, #2
 8019b8a:	d13d      	bne.n	8019c08 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019b8c:	68a1      	ldr	r1, [r4, #8]
 8019b8e:	4628      	mov	r0, r5
 8019b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b94:	f006 bb0a 	b.w	80201ac <ucdr_serialize_string>
 8019b98:	7909      	ldrb	r1, [r1, #4]
 8019b9a:	f7f9 f8a3 	bl	8012ce4 <ucdr_serialize_uint8_t>
 8019b9e:	4606      	mov	r6, r0
 8019ba0:	b120      	cbz	r0, 8019bac <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019ba2:	7923      	ldrb	r3, [r4, #4]
 8019ba4:	2b02      	cmp	r3, #2
 8019ba6:	d039      	beq.n	8019c1c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019ba8:	2b03      	cmp	r3, #3
 8019baa:	d02f      	beq.n	8019c0c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019bac:	2202      	movs	r2, #2
 8019bae:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8019bb2:	4628      	mov	r0, r5
 8019bb4:	f006 fa2e 	bl	8020014 <ucdr_serialize_array_uint8_t>
 8019bb8:	4030      	ands	r0, r6
 8019bba:	b2c0      	uxtb	r0, r0
 8019bbc:	bd70      	pop	{r4, r5, r6, pc}
 8019bbe:	2000      	movs	r0, #0
 8019bc0:	bd70      	pop	{r4, r5, r6, pc}
 8019bc2:	7909      	ldrb	r1, [r1, #4]
 8019bc4:	f7f9 f88e 	bl	8012ce4 <ucdr_serialize_uint8_t>
 8019bc8:	4606      	mov	r6, r0
 8019bca:	b158      	cbz	r0, 8019be4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019bcc:	7923      	ldrb	r3, [r4, #4]
 8019bce:	2b02      	cmp	r3, #2
 8019bd0:	d003      	beq.n	8019bda <uxr_serialize_ObjectVariant.part.0+0x8a>
 8019bd2:	2b03      	cmp	r3, #3
 8019bd4:	d028      	beq.n	8019c28 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8019bd6:	2b01      	cmp	r3, #1
 8019bd8:	d104      	bne.n	8019be4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019bda:	68a1      	ldr	r1, [r4, #8]
 8019bdc:	4628      	mov	r0, r5
 8019bde:	f006 fae5 	bl	80201ac <ucdr_serialize_string>
 8019be2:	4606      	mov	r6, r0
 8019be4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8019be8:	4628      	mov	r0, r5
 8019bea:	f7f9 fdb7 	bl	801375c <ucdr_serialize_int16_t>
 8019bee:	4030      	ands	r0, r6
 8019bf0:	b2c0      	uxtb	r0, r0
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
 8019bf4:	3104      	adds	r1, #4
 8019bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bfa:	f7ff be7b 	b.w	80198f4 <uxr_serialize_CLIENT_Representation>
 8019bfe:	3104      	adds	r1, #4
 8019c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c04:	f7ff bf32 	b.w	8019a6c <uxr_serialize_AGENT_Representation>
 8019c08:	2001      	movs	r0, #1
 8019c0a:	bd70      	pop	{r4, r5, r6, pc}
 8019c0c:	68a2      	ldr	r2, [r4, #8]
 8019c0e:	f104 010c 	add.w	r1, r4, #12
 8019c12:	4628      	mov	r0, r5
 8019c14:	f7fd f8e0 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 8019c18:	4606      	mov	r6, r0
 8019c1a:	e7c7      	b.n	8019bac <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019c1c:	68a1      	ldr	r1, [r4, #8]
 8019c1e:	4628      	mov	r0, r5
 8019c20:	f006 fac4 	bl	80201ac <ucdr_serialize_string>
 8019c24:	4606      	mov	r6, r0
 8019c26:	e7c1      	b.n	8019bac <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019c28:	68a2      	ldr	r2, [r4, #8]
 8019c2a:	f104 010c 	add.w	r1, r4, #12
 8019c2e:	4628      	mov	r0, r5
 8019c30:	f7fd f8d2 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 8019c34:	4606      	mov	r6, r0
 8019c36:	e7d5      	b.n	8019be4 <uxr_serialize_ObjectVariant.part.0+0x94>

08019c38 <uxr_deserialize_DATAWRITER_Representation>:
 8019c38:	b570      	push	{r4, r5, r6, lr}
 8019c3a:	4606      	mov	r6, r0
 8019c3c:	460d      	mov	r5, r1
 8019c3e:	f7f9 f867 	bl	8012d10 <ucdr_deserialize_uint8_t>
 8019c42:	4604      	mov	r4, r0
 8019c44:	b130      	cbz	r0, 8019c54 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c46:	782b      	ldrb	r3, [r5, #0]
 8019c48:	2b02      	cmp	r3, #2
 8019c4a:	d00c      	beq.n	8019c66 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019c4c:	2b03      	cmp	r3, #3
 8019c4e:	d012      	beq.n	8019c76 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019c50:	2b01      	cmp	r3, #1
 8019c52:	d008      	beq.n	8019c66 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019c54:	2202      	movs	r2, #2
 8019c56:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019c5a:	4630      	mov	r0, r6
 8019c5c:	f006 fa3e 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 8019c60:	4020      	ands	r0, r4
 8019c62:	b2c0      	uxtb	r0, r0
 8019c64:	bd70      	pop	{r4, r5, r6, pc}
 8019c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019c6a:	6869      	ldr	r1, [r5, #4]
 8019c6c:	4630      	mov	r0, r6
 8019c6e:	f006 faad 	bl	80201cc <ucdr_deserialize_string>
 8019c72:	4604      	mov	r4, r0
 8019c74:	e7ee      	b.n	8019c54 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c76:	1d2b      	adds	r3, r5, #4
 8019c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019c7c:	f105 0108 	add.w	r1, r5, #8
 8019c80:	4630      	mov	r0, r6
 8019c82:	f7fd f8bb 	bl	8016dfc <ucdr_deserialize_sequence_uint8_t>
 8019c86:	4604      	mov	r4, r0
 8019c88:	e7e4      	b.n	8019c54 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c8a:	bf00      	nop

08019c8c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019c8c:	b570      	push	{r4, r5, r6, lr}
 8019c8e:	460d      	mov	r5, r1
 8019c90:	7809      	ldrb	r1, [r1, #0]
 8019c92:	4606      	mov	r6, r0
 8019c94:	f7f8 fff8 	bl	8012c88 <ucdr_serialize_bool>
 8019c98:	782b      	ldrb	r3, [r5, #0]
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	b94b      	cbnz	r3, 8019cb2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019c9e:	7a29      	ldrb	r1, [r5, #8]
 8019ca0:	4630      	mov	r0, r6
 8019ca2:	f7f8 fff1 	bl	8012c88 <ucdr_serialize_bool>
 8019ca6:	7a2b      	ldrb	r3, [r5, #8]
 8019ca8:	4004      	ands	r4, r0
 8019caa:	b2e4      	uxtb	r4, r4
 8019cac:	b943      	cbnz	r3, 8019cc0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019cae:	4620      	mov	r0, r4
 8019cb0:	bd70      	pop	{r4, r5, r6, pc}
 8019cb2:	6869      	ldr	r1, [r5, #4]
 8019cb4:	4630      	mov	r0, r6
 8019cb6:	f006 fa79 	bl	80201ac <ucdr_serialize_string>
 8019cba:	4004      	ands	r4, r0
 8019cbc:	b2e4      	uxtb	r4, r4
 8019cbe:	e7ee      	b.n	8019c9e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019cc0:	68e9      	ldr	r1, [r5, #12]
 8019cc2:	4630      	mov	r0, r6
 8019cc4:	f006 fa72 	bl	80201ac <ucdr_serialize_string>
 8019cc8:	4004      	ands	r4, r0
 8019cca:	4620      	mov	r0, r4
 8019ccc:	bd70      	pop	{r4, r5, r6, pc}
 8019cce:	bf00      	nop

08019cd0 <uxr_serialize_OBJK_Topic_Binary>:
 8019cd0:	b570      	push	{r4, r5, r6, lr}
 8019cd2:	460d      	mov	r5, r1
 8019cd4:	4606      	mov	r6, r0
 8019cd6:	6809      	ldr	r1, [r1, #0]
 8019cd8:	f006 fa68 	bl	80201ac <ucdr_serialize_string>
 8019cdc:	4604      	mov	r4, r0
 8019cde:	7929      	ldrb	r1, [r5, #4]
 8019ce0:	4630      	mov	r0, r6
 8019ce2:	f7f8 ffd1 	bl	8012c88 <ucdr_serialize_bool>
 8019ce6:	792b      	ldrb	r3, [r5, #4]
 8019ce8:	4004      	ands	r4, r0
 8019cea:	b2e4      	uxtb	r4, r4
 8019cec:	b943      	cbnz	r3, 8019d00 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019cee:	7b29      	ldrb	r1, [r5, #12]
 8019cf0:	4630      	mov	r0, r6
 8019cf2:	f7f8 ffc9 	bl	8012c88 <ucdr_serialize_bool>
 8019cf6:	7b2b      	ldrb	r3, [r5, #12]
 8019cf8:	4004      	ands	r4, r0
 8019cfa:	b93b      	cbnz	r3, 8019d0c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019cfc:	4620      	mov	r0, r4
 8019cfe:	bd70      	pop	{r4, r5, r6, pc}
 8019d00:	68a9      	ldr	r1, [r5, #8]
 8019d02:	4630      	mov	r0, r6
 8019d04:	f006 fa52 	bl	80201ac <ucdr_serialize_string>
 8019d08:	4004      	ands	r4, r0
 8019d0a:	e7f0      	b.n	8019cee <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019d0c:	6929      	ldr	r1, [r5, #16]
 8019d0e:	4630      	mov	r0, r6
 8019d10:	f006 fa4c 	bl	80201ac <ucdr_serialize_string>
 8019d14:	4004      	ands	r4, r0
 8019d16:	b2e4      	uxtb	r4, r4
 8019d18:	4620      	mov	r0, r4
 8019d1a:	bd70      	pop	{r4, r5, r6, pc}

08019d1c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d20:	460c      	mov	r4, r1
 8019d22:	7809      	ldrb	r1, [r1, #0]
 8019d24:	4606      	mov	r6, r0
 8019d26:	f7f8 ffaf 	bl	8012c88 <ucdr_serialize_bool>
 8019d2a:	7823      	ldrb	r3, [r4, #0]
 8019d2c:	4605      	mov	r5, r0
 8019d2e:	b96b      	cbnz	r3, 8019d4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019d30:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019d34:	4630      	mov	r0, r6
 8019d36:	f7f8 ffa7 	bl	8012c88 <ucdr_serialize_bool>
 8019d3a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019d3e:	4005      	ands	r5, r0
 8019d40:	b2ed      	uxtb	r5, r5
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d169      	bne.n	8019e1a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8019d46:	4628      	mov	r0, r5
 8019d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d4c:	6861      	ldr	r1, [r4, #4]
 8019d4e:	4630      	mov	r0, r6
 8019d50:	f7f9 f9de 	bl	8013110 <ucdr_serialize_uint32_t>
 8019d54:	6863      	ldr	r3, [r4, #4]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d06b      	beq.n	8019e32 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	d067      	beq.n	8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d5e:	68a1      	ldr	r1, [r4, #8]
 8019d60:	4630      	mov	r0, r6
 8019d62:	f006 fa23 	bl	80201ac <ucdr_serialize_string>
 8019d66:	6863      	ldr	r3, [r4, #4]
 8019d68:	2b01      	cmp	r3, #1
 8019d6a:	d953      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d6c:	2800      	cmp	r0, #0
 8019d6e:	d05e      	beq.n	8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d70:	68e1      	ldr	r1, [r4, #12]
 8019d72:	4630      	mov	r0, r6
 8019d74:	f006 fa1a 	bl	80201ac <ucdr_serialize_string>
 8019d78:	6863      	ldr	r3, [r4, #4]
 8019d7a:	2b02      	cmp	r3, #2
 8019d7c:	d94a      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d7e:	2800      	cmp	r0, #0
 8019d80:	d055      	beq.n	8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d82:	6921      	ldr	r1, [r4, #16]
 8019d84:	4630      	mov	r0, r6
 8019d86:	f006 fa11 	bl	80201ac <ucdr_serialize_string>
 8019d8a:	6863      	ldr	r3, [r4, #4]
 8019d8c:	2b03      	cmp	r3, #3
 8019d8e:	d941      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d90:	2800      	cmp	r0, #0
 8019d92:	d04c      	beq.n	8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d94:	6961      	ldr	r1, [r4, #20]
 8019d96:	4630      	mov	r0, r6
 8019d98:	f006 fa08 	bl	80201ac <ucdr_serialize_string>
 8019d9c:	6863      	ldr	r3, [r4, #4]
 8019d9e:	2b04      	cmp	r3, #4
 8019da0:	d938      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019da2:	2800      	cmp	r0, #0
 8019da4:	d043      	beq.n	8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019da6:	69a1      	ldr	r1, [r4, #24]
 8019da8:	4630      	mov	r0, r6
 8019daa:	f006 f9ff 	bl	80201ac <ucdr_serialize_string>
 8019dae:	6863      	ldr	r3, [r4, #4]
 8019db0:	2b05      	cmp	r3, #5
 8019db2:	d92f      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019db4:	2800      	cmp	r0, #0
 8019db6:	d03a      	beq.n	8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019db8:	69e1      	ldr	r1, [r4, #28]
 8019dba:	4630      	mov	r0, r6
 8019dbc:	f006 f9f6 	bl	80201ac <ucdr_serialize_string>
 8019dc0:	6863      	ldr	r3, [r4, #4]
 8019dc2:	2b06      	cmp	r3, #6
 8019dc4:	d926      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019dc6:	b390      	cbz	r0, 8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019dc8:	6a21      	ldr	r1, [r4, #32]
 8019dca:	4630      	mov	r0, r6
 8019dcc:	f006 f9ee 	bl	80201ac <ucdr_serialize_string>
 8019dd0:	6863      	ldr	r3, [r4, #4]
 8019dd2:	2b07      	cmp	r3, #7
 8019dd4:	d91e      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019dd6:	b350      	cbz	r0, 8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019dd8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019dda:	4630      	mov	r0, r6
 8019ddc:	f006 f9e6 	bl	80201ac <ucdr_serialize_string>
 8019de0:	6863      	ldr	r3, [r4, #4]
 8019de2:	2b08      	cmp	r3, #8
 8019de4:	d916      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019de6:	b310      	cbz	r0, 8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019de8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019dea:	4630      	mov	r0, r6
 8019dec:	f006 f9de 	bl	80201ac <ucdr_serialize_string>
 8019df0:	6863      	ldr	r3, [r4, #4]
 8019df2:	2b09      	cmp	r3, #9
 8019df4:	d90e      	bls.n	8019e14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019df6:	b1d0      	cbz	r0, 8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019df8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019dfc:	2709      	movs	r7, #9
 8019dfe:	e000      	b.n	8019e02 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019e00:	b1a8      	cbz	r0, 8019e2e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019e02:	f858 1b04 	ldr.w	r1, [r8], #4
 8019e06:	4630      	mov	r0, r6
 8019e08:	f006 f9d0 	bl	80201ac <ucdr_serialize_string>
 8019e0c:	3701      	adds	r7, #1
 8019e0e:	6862      	ldr	r2, [r4, #4]
 8019e10:	4297      	cmp	r7, r2
 8019e12:	d3f5      	bcc.n	8019e00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8019e14:	4005      	ands	r5, r0
 8019e16:	b2ed      	uxtb	r5, r5
 8019e18:	e78a      	b.n	8019d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019e1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019e1c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019e20:	4630      	mov	r0, r6
 8019e22:	f7fc ffd9 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 8019e26:	4005      	ands	r5, r0
 8019e28:	4628      	mov	r0, r5
 8019e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e2e:	2500      	movs	r5, #0
 8019e30:	e77e      	b.n	8019d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019e32:	4028      	ands	r0, r5
 8019e34:	b2c5      	uxtb	r5, r0
 8019e36:	e77b      	b.n	8019d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08019e38 <uxr_serialize_OBJK_Publisher_Binary>:
 8019e38:	b570      	push	{r4, r5, r6, lr}
 8019e3a:	460d      	mov	r5, r1
 8019e3c:	7809      	ldrb	r1, [r1, #0]
 8019e3e:	4606      	mov	r6, r0
 8019e40:	f7f8 ff22 	bl	8012c88 <ucdr_serialize_bool>
 8019e44:	782b      	ldrb	r3, [r5, #0]
 8019e46:	4604      	mov	r4, r0
 8019e48:	b94b      	cbnz	r3, 8019e5e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8019e4a:	7a29      	ldrb	r1, [r5, #8]
 8019e4c:	4630      	mov	r0, r6
 8019e4e:	f7f8 ff1b 	bl	8012c88 <ucdr_serialize_bool>
 8019e52:	7a2b      	ldrb	r3, [r5, #8]
 8019e54:	4004      	ands	r4, r0
 8019e56:	b2e4      	uxtb	r4, r4
 8019e58:	b943      	cbnz	r3, 8019e6c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	bd70      	pop	{r4, r5, r6, pc}
 8019e5e:	6869      	ldr	r1, [r5, #4]
 8019e60:	4630      	mov	r0, r6
 8019e62:	f006 f9a3 	bl	80201ac <ucdr_serialize_string>
 8019e66:	4004      	ands	r4, r0
 8019e68:	b2e4      	uxtb	r4, r4
 8019e6a:	e7ee      	b.n	8019e4a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8019e6c:	f105 010c 	add.w	r1, r5, #12
 8019e70:	4630      	mov	r0, r6
 8019e72:	f7ff ff53 	bl	8019d1c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8019e76:	4004      	ands	r4, r0
 8019e78:	4620      	mov	r0, r4
 8019e7a:	bd70      	pop	{r4, r5, r6, pc}

08019e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8019e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e80:	460c      	mov	r4, r1
 8019e82:	7809      	ldrb	r1, [r1, #0]
 8019e84:	4606      	mov	r6, r0
 8019e86:	f7f8 feff 	bl	8012c88 <ucdr_serialize_bool>
 8019e8a:	7823      	ldrb	r3, [r4, #0]
 8019e8c:	4605      	mov	r5, r0
 8019e8e:	b96b      	cbnz	r3, 8019eac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8019e90:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019e94:	4630      	mov	r0, r6
 8019e96:	f7f8 fef7 	bl	8012c88 <ucdr_serialize_bool>
 8019e9a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019e9e:	4005      	ands	r5, r0
 8019ea0:	b2ed      	uxtb	r5, r5
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d169      	bne.n	8019f7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eac:	6861      	ldr	r1, [r4, #4]
 8019eae:	4630      	mov	r0, r6
 8019eb0:	f7f9 f92e 	bl	8013110 <ucdr_serialize_uint32_t>
 8019eb4:	6863      	ldr	r3, [r4, #4]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d06b      	beq.n	8019f92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8019eba:	2800      	cmp	r0, #0
 8019ebc:	d067      	beq.n	8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ebe:	68a1      	ldr	r1, [r4, #8]
 8019ec0:	4630      	mov	r0, r6
 8019ec2:	f006 f973 	bl	80201ac <ucdr_serialize_string>
 8019ec6:	6863      	ldr	r3, [r4, #4]
 8019ec8:	2b01      	cmp	r3, #1
 8019eca:	d953      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	d05e      	beq.n	8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ed0:	68e1      	ldr	r1, [r4, #12]
 8019ed2:	4630      	mov	r0, r6
 8019ed4:	f006 f96a 	bl	80201ac <ucdr_serialize_string>
 8019ed8:	6863      	ldr	r3, [r4, #4]
 8019eda:	2b02      	cmp	r3, #2
 8019edc:	d94a      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	d055      	beq.n	8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ee2:	6921      	ldr	r1, [r4, #16]
 8019ee4:	4630      	mov	r0, r6
 8019ee6:	f006 f961 	bl	80201ac <ucdr_serialize_string>
 8019eea:	6863      	ldr	r3, [r4, #4]
 8019eec:	2b03      	cmp	r3, #3
 8019eee:	d941      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ef0:	2800      	cmp	r0, #0
 8019ef2:	d04c      	beq.n	8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ef4:	6961      	ldr	r1, [r4, #20]
 8019ef6:	4630      	mov	r0, r6
 8019ef8:	f006 f958 	bl	80201ac <ucdr_serialize_string>
 8019efc:	6863      	ldr	r3, [r4, #4]
 8019efe:	2b04      	cmp	r3, #4
 8019f00:	d938      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f02:	2800      	cmp	r0, #0
 8019f04:	d043      	beq.n	8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f06:	69a1      	ldr	r1, [r4, #24]
 8019f08:	4630      	mov	r0, r6
 8019f0a:	f006 f94f 	bl	80201ac <ucdr_serialize_string>
 8019f0e:	6863      	ldr	r3, [r4, #4]
 8019f10:	2b05      	cmp	r3, #5
 8019f12:	d92f      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f14:	2800      	cmp	r0, #0
 8019f16:	d03a      	beq.n	8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f18:	69e1      	ldr	r1, [r4, #28]
 8019f1a:	4630      	mov	r0, r6
 8019f1c:	f006 f946 	bl	80201ac <ucdr_serialize_string>
 8019f20:	6863      	ldr	r3, [r4, #4]
 8019f22:	2b06      	cmp	r3, #6
 8019f24:	d926      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f26:	b390      	cbz	r0, 8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f28:	6a21      	ldr	r1, [r4, #32]
 8019f2a:	4630      	mov	r0, r6
 8019f2c:	f006 f93e 	bl	80201ac <ucdr_serialize_string>
 8019f30:	6863      	ldr	r3, [r4, #4]
 8019f32:	2b07      	cmp	r3, #7
 8019f34:	d91e      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f36:	b350      	cbz	r0, 8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f38:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019f3a:	4630      	mov	r0, r6
 8019f3c:	f006 f936 	bl	80201ac <ucdr_serialize_string>
 8019f40:	6863      	ldr	r3, [r4, #4]
 8019f42:	2b08      	cmp	r3, #8
 8019f44:	d916      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f46:	b310      	cbz	r0, 8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f48:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019f4a:	4630      	mov	r0, r6
 8019f4c:	f006 f92e 	bl	80201ac <ucdr_serialize_string>
 8019f50:	6863      	ldr	r3, [r4, #4]
 8019f52:	2b09      	cmp	r3, #9
 8019f54:	d90e      	bls.n	8019f74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f56:	b1d0      	cbz	r0, 8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f58:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019f5c:	2709      	movs	r7, #9
 8019f5e:	e000      	b.n	8019f62 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8019f60:	b1a8      	cbz	r0, 8019f8e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f62:	f858 1b04 	ldr.w	r1, [r8], #4
 8019f66:	4630      	mov	r0, r6
 8019f68:	f006 f920 	bl	80201ac <ucdr_serialize_string>
 8019f6c:	3701      	adds	r7, #1
 8019f6e:	6862      	ldr	r2, [r4, #4]
 8019f70:	4297      	cmp	r7, r2
 8019f72:	d3f5      	bcc.n	8019f60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8019f74:	4005      	ands	r5, r0
 8019f76:	b2ed      	uxtb	r5, r5
 8019f78:	e78a      	b.n	8019e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019f7a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019f7c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019f80:	4630      	mov	r0, r6
 8019f82:	f7fc ff29 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 8019f86:	4005      	ands	r5, r0
 8019f88:	4628      	mov	r0, r5
 8019f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f8e:	2500      	movs	r5, #0
 8019f90:	e77e      	b.n	8019e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019f92:	4028      	ands	r0, r5
 8019f94:	b2c5      	uxtb	r5, r0
 8019f96:	e77b      	b.n	8019e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08019f98 <uxr_serialize_OBJK_Subscriber_Binary>:
 8019f98:	b570      	push	{r4, r5, r6, lr}
 8019f9a:	460d      	mov	r5, r1
 8019f9c:	7809      	ldrb	r1, [r1, #0]
 8019f9e:	4606      	mov	r6, r0
 8019fa0:	f7f8 fe72 	bl	8012c88 <ucdr_serialize_bool>
 8019fa4:	782b      	ldrb	r3, [r5, #0]
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	b94b      	cbnz	r3, 8019fbe <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8019faa:	7a29      	ldrb	r1, [r5, #8]
 8019fac:	4630      	mov	r0, r6
 8019fae:	f7f8 fe6b 	bl	8012c88 <ucdr_serialize_bool>
 8019fb2:	7a2b      	ldrb	r3, [r5, #8]
 8019fb4:	4004      	ands	r4, r0
 8019fb6:	b2e4      	uxtb	r4, r4
 8019fb8:	b943      	cbnz	r3, 8019fcc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8019fba:	4620      	mov	r0, r4
 8019fbc:	bd70      	pop	{r4, r5, r6, pc}
 8019fbe:	6869      	ldr	r1, [r5, #4]
 8019fc0:	4630      	mov	r0, r6
 8019fc2:	f006 f8f3 	bl	80201ac <ucdr_serialize_string>
 8019fc6:	4004      	ands	r4, r0
 8019fc8:	b2e4      	uxtb	r4, r4
 8019fca:	e7ee      	b.n	8019faa <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8019fcc:	f105 010c 	add.w	r1, r5, #12
 8019fd0:	4630      	mov	r0, r6
 8019fd2:	f7ff ff53 	bl	8019e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8019fd6:	4004      	ands	r4, r0
 8019fd8:	4620      	mov	r0, r4
 8019fda:	bd70      	pop	{r4, r5, r6, pc}

08019fdc <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8019fdc:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8019fe0:	4688      	mov	r8, r1
 8019fe2:	4681      	mov	r9, r0
 8019fe4:	8809      	ldrh	r1, [r1, #0]
 8019fe6:	f7f8 fea9 	bl	8012d3c <ucdr_serialize_uint16_t>
 8019fea:	4606      	mov	r6, r0
 8019fec:	f898 1002 	ldrb.w	r1, [r8, #2]
 8019ff0:	4648      	mov	r0, r9
 8019ff2:	f7f8 fe49 	bl	8012c88 <ucdr_serialize_bool>
 8019ff6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019ffa:	4006      	ands	r6, r0
 8019ffc:	b2f5      	uxtb	r5, r6
 8019ffe:	b9eb      	cbnz	r3, 801a03c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a000:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a004:	4648      	mov	r0, r9
 801a006:	f7f8 fe3f 	bl	8012c88 <ucdr_serialize_bool>
 801a00a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a00e:	4005      	ands	r5, r0
 801a010:	bb7b      	cbnz	r3, 801a072 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a012:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a016:	4648      	mov	r0, r9
 801a018:	f7f8 fe36 	bl	8012c88 <ucdr_serialize_bool>
 801a01c:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a020:	4005      	ands	r5, r0
 801a022:	b9f3      	cbnz	r3, 801a062 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a024:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a028:	4648      	mov	r0, r9
 801a02a:	f7f8 fe2d 	bl	8012c88 <ucdr_serialize_bool>
 801a02e:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a032:	4005      	ands	r5, r0
 801a034:	b94b      	cbnz	r3, 801a04a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a036:	4628      	mov	r0, r5
 801a038:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a03c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a040:	4648      	mov	r0, r9
 801a042:	f7f8 fe7b 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a046:	4005      	ands	r5, r0
 801a048:	e7da      	b.n	801a000 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a04a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a04e:	f108 011c 	add.w	r1, r8, #28
 801a052:	4648      	mov	r0, r9
 801a054:	f7fc fec0 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 801a058:	4028      	ands	r0, r5
 801a05a:	b2c5      	uxtb	r5, r0
 801a05c:	4628      	mov	r0, r5
 801a05e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a062:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a066:	4648      	mov	r0, r9
 801a068:	f7f9 f852 	bl	8013110 <ucdr_serialize_uint32_t>
 801a06c:	4028      	ands	r0, r5
 801a06e:	b2c5      	uxtb	r5, r0
 801a070:	e7d8      	b.n	801a024 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a072:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a076:	4648      	mov	r0, r9
 801a078:	f7f9 f84a 	bl	8013110 <ucdr_serialize_uint32_t>
 801a07c:	4028      	ands	r0, r5
 801a07e:	b2c5      	uxtb	r5, r0
 801a080:	e7c7      	b.n	801a012 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a082:	bf00      	nop

0801a084 <uxr_serialize_OBJK_DataReader_Binary>:
 801a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a086:	2202      	movs	r2, #2
 801a088:	460c      	mov	r4, r1
 801a08a:	4606      	mov	r6, r0
 801a08c:	f005 ffc2 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a090:	4605      	mov	r5, r0
 801a092:	78a1      	ldrb	r1, [r4, #2]
 801a094:	4630      	mov	r0, r6
 801a096:	f7f8 fdf7 	bl	8012c88 <ucdr_serialize_bool>
 801a09a:	78a3      	ldrb	r3, [r4, #2]
 801a09c:	4005      	ands	r5, r0
 801a09e:	b2ed      	uxtb	r5, r5
 801a0a0:	b90b      	cbnz	r3, 801a0a6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0a6:	f104 0108 	add.w	r1, r4, #8
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	f7ff ff96 	bl	8019fdc <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a0b0:	4607      	mov	r7, r0
 801a0b2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a0b6:	4630      	mov	r0, r6
 801a0b8:	f7f8 fde6 	bl	8012c88 <ucdr_serialize_bool>
 801a0bc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a0c0:	4038      	ands	r0, r7
 801a0c2:	b2c7      	uxtb	r7, r0
 801a0c4:	b95b      	cbnz	r3, 801a0de <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a0c6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	f7f8 fddc 	bl	8012c88 <ucdr_serialize_bool>
 801a0d0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a0d4:	4007      	ands	r7, r0
 801a0d6:	b94b      	cbnz	r3, 801a0ec <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a0d8:	403d      	ands	r5, r7
 801a0da:	4628      	mov	r0, r5
 801a0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0de:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801a0e2:	4630      	mov	r0, r6
 801a0e4:	f7f9 fa6a 	bl	80135bc <ucdr_serialize_uint64_t>
 801a0e8:	4007      	ands	r7, r0
 801a0ea:	e7ec      	b.n	801a0c6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a0ec:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a0ee:	4630      	mov	r0, r6
 801a0f0:	f006 f85c 	bl	80201ac <ucdr_serialize_string>
 801a0f4:	4007      	ands	r7, r0
 801a0f6:	b2ff      	uxtb	r7, r7
 801a0f8:	e7ee      	b.n	801a0d8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a0fa:	bf00      	nop

0801a0fc <uxr_serialize_OBJK_DataWriter_Binary>:
 801a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0fe:	2202      	movs	r2, #2
 801a100:	460d      	mov	r5, r1
 801a102:	4606      	mov	r6, r0
 801a104:	f005 ff86 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a108:	4604      	mov	r4, r0
 801a10a:	78a9      	ldrb	r1, [r5, #2]
 801a10c:	4630      	mov	r0, r6
 801a10e:	f7f8 fdbb 	bl	8012c88 <ucdr_serialize_bool>
 801a112:	78ab      	ldrb	r3, [r5, #2]
 801a114:	4004      	ands	r4, r0
 801a116:	b2e4      	uxtb	r4, r4
 801a118:	b90b      	cbnz	r3, 801a11e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a11a:	4620      	mov	r0, r4
 801a11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a11e:	f105 0108 	add.w	r1, r5, #8
 801a122:	4630      	mov	r0, r6
 801a124:	f7ff ff5a 	bl	8019fdc <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a128:	4607      	mov	r7, r0
 801a12a:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801a12e:	4630      	mov	r0, r6
 801a130:	f7f8 fdaa 	bl	8012c88 <ucdr_serialize_bool>
 801a134:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a138:	4038      	ands	r0, r7
 801a13a:	b2c7      	uxtb	r7, r0
 801a13c:	b913      	cbnz	r3, 801a144 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a13e:	403c      	ands	r4, r7
 801a140:	4620      	mov	r0, r4
 801a142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a144:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801a148:	4630      	mov	r0, r6
 801a14a:	f7f9 fa37 	bl	80135bc <ucdr_serialize_uint64_t>
 801a14e:	4007      	ands	r7, r0
 801a150:	e7f5      	b.n	801a13e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a152:	bf00      	nop

0801a154 <uxr_serialize_OBJK_Replier_Binary>:
 801a154:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a158:	460f      	mov	r7, r1
 801a15a:	4680      	mov	r8, r0
 801a15c:	6809      	ldr	r1, [r1, #0]
 801a15e:	f006 f825 	bl	80201ac <ucdr_serialize_string>
 801a162:	4605      	mov	r5, r0
 801a164:	6879      	ldr	r1, [r7, #4]
 801a166:	4640      	mov	r0, r8
 801a168:	f006 f820 	bl	80201ac <ucdr_serialize_string>
 801a16c:	4005      	ands	r5, r0
 801a16e:	68b9      	ldr	r1, [r7, #8]
 801a170:	4640      	mov	r0, r8
 801a172:	b2ec      	uxtb	r4, r5
 801a174:	f006 f81a 	bl	80201ac <ucdr_serialize_string>
 801a178:	7b39      	ldrb	r1, [r7, #12]
 801a17a:	4004      	ands	r4, r0
 801a17c:	4640      	mov	r0, r8
 801a17e:	f7f8 fd83 	bl	8012c88 <ucdr_serialize_bool>
 801a182:	7b3b      	ldrb	r3, [r7, #12]
 801a184:	4004      	ands	r4, r0
 801a186:	b94b      	cbnz	r3, 801a19c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a188:	7d39      	ldrb	r1, [r7, #20]
 801a18a:	4640      	mov	r0, r8
 801a18c:	f7f8 fd7c 	bl	8012c88 <ucdr_serialize_bool>
 801a190:	7d3b      	ldrb	r3, [r7, #20]
 801a192:	4004      	ands	r4, r0
 801a194:	b943      	cbnz	r3, 801a1a8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a196:	4620      	mov	r0, r4
 801a198:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a19c:	6939      	ldr	r1, [r7, #16]
 801a19e:	4640      	mov	r0, r8
 801a1a0:	f006 f804 	bl	80201ac <ucdr_serialize_string>
 801a1a4:	4004      	ands	r4, r0
 801a1a6:	e7ef      	b.n	801a188 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a1a8:	69b9      	ldr	r1, [r7, #24]
 801a1aa:	4640      	mov	r0, r8
 801a1ac:	f005 fffe 	bl	80201ac <ucdr_serialize_string>
 801a1b0:	4004      	ands	r4, r0
 801a1b2:	b2e4      	uxtb	r4, r4
 801a1b4:	4620      	mov	r0, r4
 801a1b6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a1ba:	bf00      	nop

0801a1bc <uxr_deserialize_ObjectVariant>:
 801a1bc:	b570      	push	{r4, r5, r6, lr}
 801a1be:	4605      	mov	r5, r0
 801a1c0:	460e      	mov	r6, r1
 801a1c2:	f7f8 fda5 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a1c6:	b168      	cbz	r0, 801a1e4 <uxr_deserialize_ObjectVariant+0x28>
 801a1c8:	7833      	ldrb	r3, [r6, #0]
 801a1ca:	4604      	mov	r4, r0
 801a1cc:	3b01      	subs	r3, #1
 801a1ce:	2b0d      	cmp	r3, #13
 801a1d0:	d809      	bhi.n	801a1e6 <uxr_deserialize_ObjectVariant+0x2a>
 801a1d2:	e8df f003 	tbb	[pc, r3]
 801a1d6:	0a41      	.short	0x0a41
 801a1d8:	0a0a2323 	.word	0x0a0a2323
 801a1dc:	10080a0a 	.word	0x10080a0a
 801a1e0:	565c1010 	.word	0x565c1010
 801a1e4:	2400      	movs	r4, #0
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	bd70      	pop	{r4, r5, r6, pc}
 801a1ea:	1d31      	adds	r1, r6, #4
 801a1ec:	4628      	mov	r0, r5
 801a1ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1f2:	f7ff bd21 	b.w	8019c38 <uxr_deserialize_DATAWRITER_Representation>
 801a1f6:	1d31      	adds	r1, r6, #4
 801a1f8:	4628      	mov	r0, r5
 801a1fa:	f7f8 fd89 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a1fe:	2800      	cmp	r0, #0
 801a200:	d0f0      	beq.n	801a1e4 <uxr_deserialize_ObjectVariant+0x28>
 801a202:	7933      	ldrb	r3, [r6, #4]
 801a204:	2b01      	cmp	r3, #1
 801a206:	d001      	beq.n	801a20c <uxr_deserialize_ObjectVariant+0x50>
 801a208:	2b02      	cmp	r3, #2
 801a20a:	d1ec      	bne.n	801a1e6 <uxr_deserialize_ObjectVariant+0x2a>
 801a20c:	68b1      	ldr	r1, [r6, #8]
 801a20e:	4628      	mov	r0, r5
 801a210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a218:	f005 bfd8 	b.w	80201cc <ucdr_deserialize_string>
 801a21c:	1d31      	adds	r1, r6, #4
 801a21e:	4628      	mov	r0, r5
 801a220:	f7f8 fd76 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a224:	4604      	mov	r4, r0
 801a226:	b170      	cbz	r0, 801a246 <uxr_deserialize_ObjectVariant+0x8a>
 801a228:	7933      	ldrb	r3, [r6, #4]
 801a22a:	2b02      	cmp	r3, #2
 801a22c:	d04c      	beq.n	801a2c8 <uxr_deserialize_ObjectVariant+0x10c>
 801a22e:	2b03      	cmp	r3, #3
 801a230:	d109      	bne.n	801a246 <uxr_deserialize_ObjectVariant+0x8a>
 801a232:	f106 0308 	add.w	r3, r6, #8
 801a236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a23a:	f106 010c 	add.w	r1, r6, #12
 801a23e:	4628      	mov	r0, r5
 801a240:	f7fc fddc 	bl	8016dfc <ucdr_deserialize_sequence_uint8_t>
 801a244:	4604      	mov	r4, r0
 801a246:	2202      	movs	r2, #2
 801a248:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a24c:	4628      	mov	r0, r5
 801a24e:	f005 ff45 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a252:	4020      	ands	r0, r4
 801a254:	b2c4      	uxtb	r4, r0
 801a256:	e7c6      	b.n	801a1e6 <uxr_deserialize_ObjectVariant+0x2a>
 801a258:	1d31      	adds	r1, r6, #4
 801a25a:	4628      	mov	r0, r5
 801a25c:	f7f8 fd58 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a260:	4604      	mov	r4, r0
 801a262:	b130      	cbz	r0, 801a272 <uxr_deserialize_ObjectVariant+0xb6>
 801a264:	7933      	ldrb	r3, [r6, #4]
 801a266:	2b02      	cmp	r3, #2
 801a268:	d036      	beq.n	801a2d8 <uxr_deserialize_ObjectVariant+0x11c>
 801a26a:	2b03      	cmp	r3, #3
 801a26c:	d03c      	beq.n	801a2e8 <uxr_deserialize_ObjectVariant+0x12c>
 801a26e:	2b01      	cmp	r3, #1
 801a270:	d032      	beq.n	801a2d8 <uxr_deserialize_ObjectVariant+0x11c>
 801a272:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a276:	4628      	mov	r0, r5
 801a278:	f7f9 faf0 	bl	801385c <ucdr_deserialize_int16_t>
 801a27c:	4020      	ands	r0, r4
 801a27e:	b2c4      	uxtb	r4, r0
 801a280:	e7b1      	b.n	801a1e6 <uxr_deserialize_ObjectVariant+0x2a>
 801a282:	1d31      	adds	r1, r6, #4
 801a284:	4628      	mov	r0, r5
 801a286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a28a:	f7ff bb8b 	b.w	80199a4 <uxr_deserialize_CLIENT_Representation>
 801a28e:	2204      	movs	r2, #4
 801a290:	4628      	mov	r0, r5
 801a292:	18b1      	adds	r1, r6, r2
 801a294:	f005 ff22 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a298:	4604      	mov	r4, r0
 801a29a:	2202      	movs	r2, #2
 801a29c:	f106 0108 	add.w	r1, r6, #8
 801a2a0:	4628      	mov	r0, r5
 801a2a2:	f005 ff1b 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a2a6:	4004      	ands	r4, r0
 801a2a8:	2202      	movs	r2, #2
 801a2aa:	f106 010a 	add.w	r1, r6, #10
 801a2ae:	4628      	mov	r0, r5
 801a2b0:	b2e4      	uxtb	r4, r4
 801a2b2:	f005 ff13 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	f106 010c 	add.w	r1, r6, #12
 801a2bc:	4628      	mov	r0, r5
 801a2be:	401c      	ands	r4, r3
 801a2c0:	f7f8 fcf8 	bl	8012cb4 <ucdr_deserialize_bool>
 801a2c4:	4004      	ands	r4, r0
 801a2c6:	e78e      	b.n	801a1e6 <uxr_deserialize_ObjectVariant+0x2a>
 801a2c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2cc:	68b1      	ldr	r1, [r6, #8]
 801a2ce:	4628      	mov	r0, r5
 801a2d0:	f005 ff7c 	bl	80201cc <ucdr_deserialize_string>
 801a2d4:	4604      	mov	r4, r0
 801a2d6:	e7b6      	b.n	801a246 <uxr_deserialize_ObjectVariant+0x8a>
 801a2d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2dc:	68b1      	ldr	r1, [r6, #8]
 801a2de:	4628      	mov	r0, r5
 801a2e0:	f005 ff74 	bl	80201cc <ucdr_deserialize_string>
 801a2e4:	4604      	mov	r4, r0
 801a2e6:	e7c4      	b.n	801a272 <uxr_deserialize_ObjectVariant+0xb6>
 801a2e8:	f106 0308 	add.w	r3, r6, #8
 801a2ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2f0:	f106 010c 	add.w	r1, r6, #12
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	f7fc fd81 	bl	8016dfc <ucdr_deserialize_sequence_uint8_t>
 801a2fa:	4604      	mov	r4, r0
 801a2fc:	e7b9      	b.n	801a272 <uxr_deserialize_ObjectVariant+0xb6>
 801a2fe:	bf00      	nop

0801a300 <uxr_deserialize_BaseObjectRequest>:
 801a300:	b570      	push	{r4, r5, r6, lr}
 801a302:	2202      	movs	r2, #2
 801a304:	4605      	mov	r5, r0
 801a306:	460e      	mov	r6, r1
 801a308:	f005 fee8 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a30c:	2202      	movs	r2, #2
 801a30e:	4604      	mov	r4, r0
 801a310:	4628      	mov	r0, r5
 801a312:	18b1      	adds	r1, r6, r2
 801a314:	f005 fee2 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a318:	4020      	ands	r0, r4
 801a31a:	b2c0      	uxtb	r0, r0
 801a31c:	bd70      	pop	{r4, r5, r6, pc}
 801a31e:	bf00      	nop

0801a320 <uxr_serialize_ActivityInfoVariant>:
 801a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a324:	460e      	mov	r6, r1
 801a326:	7809      	ldrb	r1, [r1, #0]
 801a328:	4680      	mov	r8, r0
 801a32a:	f7f8 fcdb 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a32e:	4607      	mov	r7, r0
 801a330:	b138      	cbz	r0, 801a342 <uxr_serialize_ActivityInfoVariant+0x22>
 801a332:	7833      	ldrb	r3, [r6, #0]
 801a334:	2b06      	cmp	r3, #6
 801a336:	f000 8081 	beq.w	801a43c <uxr_serialize_ActivityInfoVariant+0x11c>
 801a33a:	2b0d      	cmp	r3, #13
 801a33c:	d014      	beq.n	801a368 <uxr_serialize_ActivityInfoVariant+0x48>
 801a33e:	2b05      	cmp	r3, #5
 801a340:	d002      	beq.n	801a348 <uxr_serialize_ActivityInfoVariant+0x28>
 801a342:	4638      	mov	r0, r7
 801a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a348:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a34c:	4640      	mov	r0, r8
 801a34e:	f7f9 fa05 	bl	801375c <ucdr_serialize_int16_t>
 801a352:	4607      	mov	r7, r0
 801a354:	4640      	mov	r0, r8
 801a356:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801a35a:	f7f9 f92f 	bl	80135bc <ucdr_serialize_uint64_t>
 801a35e:	4038      	ands	r0, r7
 801a360:	b2c7      	uxtb	r7, r0
 801a362:	4638      	mov	r0, r7
 801a364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a368:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a36c:	4640      	mov	r0, r8
 801a36e:	f7f9 f9f5 	bl	801375c <ucdr_serialize_int16_t>
 801a372:	68f1      	ldr	r1, [r6, #12]
 801a374:	4607      	mov	r7, r0
 801a376:	4640      	mov	r0, r8
 801a378:	f7f8 feca 	bl	8013110 <ucdr_serialize_uint32_t>
 801a37c:	68f3      	ldr	r3, [r6, #12]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d0ed      	beq.n	801a35e <uxr_serialize_ActivityInfoVariant+0x3e>
 801a382:	b318      	cbz	r0, 801a3cc <uxr_serialize_ActivityInfoVariant+0xac>
 801a384:	f106 090c 	add.w	r9, r6, #12
 801a388:	2400      	movs	r4, #0
 801a38a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801a38e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801a392:	7c29      	ldrb	r1, [r5, #16]
 801a394:	4640      	mov	r0, r8
 801a396:	f7f8 fca5 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a39a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801a39e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a3a2:	2800      	cmp	r0, #0
 801a3a4:	d051      	beq.n	801a44a <uxr_serialize_ActivityInfoVariant+0x12a>
 801a3a6:	7c2b      	ldrb	r3, [r5, #16]
 801a3a8:	00c9      	lsls	r1, r1, #3
 801a3aa:	2b03      	cmp	r3, #3
 801a3ac:	d854      	bhi.n	801a458 <uxr_serialize_ActivityInfoVariant+0x138>
 801a3ae:	e8df f003 	tbb	[pc, r3]
 801a3b2:	2133      	.short	0x2133
 801a3b4:	020f      	.short	0x020f
 801a3b6:	4449      	add	r1, r9
 801a3b8:	4640      	mov	r0, r8
 801a3ba:	6889      	ldr	r1, [r1, #8]
 801a3bc:	f005 fef6 	bl	80201ac <ucdr_serialize_string>
 801a3c0:	3401      	adds	r4, #1
 801a3c2:	68f2      	ldr	r2, [r6, #12]
 801a3c4:	4294      	cmp	r4, r2
 801a3c6:	d244      	bcs.n	801a452 <uxr_serialize_ActivityInfoVariant+0x132>
 801a3c8:	2800      	cmp	r0, #0
 801a3ca:	d1de      	bne.n	801a38a <uxr_serialize_ActivityInfoVariant+0x6a>
 801a3cc:	2700      	movs	r7, #0
 801a3ce:	e7b8      	b.n	801a342 <uxr_serialize_ActivityInfoVariant+0x22>
 801a3d0:	3108      	adds	r1, #8
 801a3d2:	44a2      	add	sl, r4
 801a3d4:	2210      	movs	r2, #16
 801a3d6:	4640      	mov	r0, r8
 801a3d8:	4449      	add	r1, r9
 801a3da:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a3de:	f005 fe19 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a3e2:	4605      	mov	r5, r0
 801a3e4:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801a3e8:	4640      	mov	r0, r8
 801a3ea:	f7f8 fe91 	bl	8013110 <ucdr_serialize_uint32_t>
 801a3ee:	4028      	ands	r0, r5
 801a3f0:	b2c0      	uxtb	r0, r0
 801a3f2:	e7e5      	b.n	801a3c0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a3f4:	3108      	adds	r1, #8
 801a3f6:	44a2      	add	sl, r4
 801a3f8:	2204      	movs	r2, #4
 801a3fa:	4640      	mov	r0, r8
 801a3fc:	4449      	add	r1, r9
 801a3fe:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a402:	f005 fe07 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a406:	4605      	mov	r5, r0
 801a408:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801a40c:	4640      	mov	r0, r8
 801a40e:	f7f8 fc95 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a412:	4028      	ands	r0, r5
 801a414:	b2c0      	uxtb	r0, r0
 801a416:	e7d3      	b.n	801a3c0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a418:	3108      	adds	r1, #8
 801a41a:	44a2      	add	sl, r4
 801a41c:	2202      	movs	r2, #2
 801a41e:	4640      	mov	r0, r8
 801a420:	4449      	add	r1, r9
 801a422:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a426:	f005 fdf5 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a42a:	4605      	mov	r5, r0
 801a42c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801a430:	4640      	mov	r0, r8
 801a432:	f7f8 fc57 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a436:	4028      	ands	r0, r5
 801a438:	b2c0      	uxtb	r0, r0
 801a43a:	e7c1      	b.n	801a3c0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a43c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a440:	4640      	mov	r0, r8
 801a442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a446:	f7f9 b989 	b.w	801375c <ucdr_serialize_int16_t>
 801a44a:	3401      	adds	r4, #1
 801a44c:	68f2      	ldr	r2, [r6, #12]
 801a44e:	42a2      	cmp	r2, r4
 801a450:	d8bc      	bhi.n	801a3cc <uxr_serialize_ActivityInfoVariant+0xac>
 801a452:	4007      	ands	r7, r0
 801a454:	b2ff      	uxtb	r7, r7
 801a456:	e774      	b.n	801a342 <uxr_serialize_ActivityInfoVariant+0x22>
 801a458:	3401      	adds	r4, #1
 801a45a:	68f3      	ldr	r3, [r6, #12]
 801a45c:	3518      	adds	r5, #24
 801a45e:	429c      	cmp	r4, r3
 801a460:	d397      	bcc.n	801a392 <uxr_serialize_ActivityInfoVariant+0x72>
 801a462:	e76e      	b.n	801a342 <uxr_serialize_ActivityInfoVariant+0x22>

0801a464 <uxr_deserialize_BaseObjectReply>:
 801a464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a468:	2202      	movs	r2, #2
 801a46a:	4606      	mov	r6, r0
 801a46c:	460f      	mov	r7, r1
 801a46e:	f005 fe35 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a472:	2202      	movs	r2, #2
 801a474:	4605      	mov	r5, r0
 801a476:	4630      	mov	r0, r6
 801a478:	18b9      	adds	r1, r7, r2
 801a47a:	f005 fe2f 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a47e:	4680      	mov	r8, r0
 801a480:	1d39      	adds	r1, r7, #4
 801a482:	4630      	mov	r0, r6
 801a484:	f7f8 fc44 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a488:	ea05 0508 	and.w	r5, r5, r8
 801a48c:	4604      	mov	r4, r0
 801a48e:	1d79      	adds	r1, r7, #5
 801a490:	4630      	mov	r0, r6
 801a492:	402c      	ands	r4, r5
 801a494:	f7f8 fc3c 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a498:	4020      	ands	r0, r4
 801a49a:	b2c0      	uxtb	r0, r0
 801a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a4a0 <uxr_serialize_ReadSpecification>:
 801a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4a2:	460e      	mov	r6, r1
 801a4a4:	4607      	mov	r7, r0
 801a4a6:	7809      	ldrb	r1, [r1, #0]
 801a4a8:	f7f8 fc1c 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a4ac:	4604      	mov	r4, r0
 801a4ae:	7871      	ldrb	r1, [r6, #1]
 801a4b0:	4638      	mov	r0, r7
 801a4b2:	f7f8 fc17 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a4b6:	4004      	ands	r4, r0
 801a4b8:	78b1      	ldrb	r1, [r6, #2]
 801a4ba:	4638      	mov	r0, r7
 801a4bc:	f7f8 fbe4 	bl	8012c88 <ucdr_serialize_bool>
 801a4c0:	78b3      	ldrb	r3, [r6, #2]
 801a4c2:	b2e4      	uxtb	r4, r4
 801a4c4:	4004      	ands	r4, r0
 801a4c6:	b943      	cbnz	r3, 801a4da <uxr_serialize_ReadSpecification+0x3a>
 801a4c8:	7a31      	ldrb	r1, [r6, #8]
 801a4ca:	4638      	mov	r0, r7
 801a4cc:	f7f8 fbdc 	bl	8012c88 <ucdr_serialize_bool>
 801a4d0:	7a33      	ldrb	r3, [r6, #8]
 801a4d2:	4004      	ands	r4, r0
 801a4d4:	b93b      	cbnz	r3, 801a4e6 <uxr_serialize_ReadSpecification+0x46>
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4da:	6871      	ldr	r1, [r6, #4]
 801a4dc:	4638      	mov	r0, r7
 801a4de:	f005 fe65 	bl	80201ac <ucdr_serialize_string>
 801a4e2:	4004      	ands	r4, r0
 801a4e4:	e7f0      	b.n	801a4c8 <uxr_serialize_ReadSpecification+0x28>
 801a4e6:	8971      	ldrh	r1, [r6, #10]
 801a4e8:	4638      	mov	r0, r7
 801a4ea:	f7f8 fc27 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a4ee:	4605      	mov	r5, r0
 801a4f0:	89b1      	ldrh	r1, [r6, #12]
 801a4f2:	4638      	mov	r0, r7
 801a4f4:	f7f8 fc22 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a4f8:	4005      	ands	r5, r0
 801a4fa:	89f1      	ldrh	r1, [r6, #14]
 801a4fc:	4638      	mov	r0, r7
 801a4fe:	b2ed      	uxtb	r5, r5
 801a500:	f7f8 fc1c 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a504:	8a31      	ldrh	r1, [r6, #16]
 801a506:	4025      	ands	r5, r4
 801a508:	4604      	mov	r4, r0
 801a50a:	4638      	mov	r0, r7
 801a50c:	4025      	ands	r5, r4
 801a50e:	f7f8 fc15 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a512:	ea00 0405 	and.w	r4, r0, r5
 801a516:	4620      	mov	r0, r4
 801a518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a51a:	bf00      	nop

0801a51c <uxr_serialize_CREATE_CLIENT_Payload>:
 801a51c:	f7ff b9ea 	b.w	80198f4 <uxr_serialize_CLIENT_Representation>

0801a520 <uxr_serialize_CREATE_Payload>:
 801a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a522:	2202      	movs	r2, #2
 801a524:	4607      	mov	r7, r0
 801a526:	460e      	mov	r6, r1
 801a528:	f005 fd74 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a52c:	2202      	movs	r2, #2
 801a52e:	4605      	mov	r5, r0
 801a530:	4638      	mov	r0, r7
 801a532:	18b1      	adds	r1, r6, r2
 801a534:	f005 fd6e 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a538:	7931      	ldrb	r1, [r6, #4]
 801a53a:	4604      	mov	r4, r0
 801a53c:	4638      	mov	r0, r7
 801a53e:	f7f8 fbd1 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a542:	b170      	cbz	r0, 801a562 <uxr_serialize_CREATE_Payload+0x42>
 801a544:	7933      	ldrb	r3, [r6, #4]
 801a546:	402c      	ands	r4, r5
 801a548:	3b01      	subs	r3, #1
 801a54a:	b2e4      	uxtb	r4, r4
 801a54c:	2b0d      	cmp	r3, #13
 801a54e:	d809      	bhi.n	801a564 <uxr_serialize_CREATE_Payload+0x44>
 801a550:	e8df f003 	tbb	[pc, r3]
 801a554:	23230a4c 	.word	0x23230a4c
 801a558:	0a0a0a0a 	.word	0x0a0a0a0a
 801a55c:	12121208 	.word	0x12121208
 801a560:	3e45      	.short	0x3e45
 801a562:	2400      	movs	r4, #0
 801a564:	4620      	mov	r0, r4
 801a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a568:	f106 0108 	add.w	r1, r6, #8
 801a56c:	4638      	mov	r0, r7
 801a56e:	f7ff fac7 	bl	8019b00 <uxr_serialize_DATAWRITER_Representation>
 801a572:	4004      	ands	r4, r0
 801a574:	4620      	mov	r0, r4
 801a576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a578:	7a31      	ldrb	r1, [r6, #8]
 801a57a:	4638      	mov	r0, r7
 801a57c:	f7f8 fbb2 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a580:	2800      	cmp	r0, #0
 801a582:	d0ee      	beq.n	801a562 <uxr_serialize_CREATE_Payload+0x42>
 801a584:	7a33      	ldrb	r3, [r6, #8]
 801a586:	2b01      	cmp	r3, #1
 801a588:	d001      	beq.n	801a58e <uxr_serialize_CREATE_Payload+0x6e>
 801a58a:	2b02      	cmp	r3, #2
 801a58c:	d1ea      	bne.n	801a564 <uxr_serialize_CREATE_Payload+0x44>
 801a58e:	68f1      	ldr	r1, [r6, #12]
 801a590:	4638      	mov	r0, r7
 801a592:	f005 fe0b 	bl	80201ac <ucdr_serialize_string>
 801a596:	4004      	ands	r4, r0
 801a598:	e7e4      	b.n	801a564 <uxr_serialize_CREATE_Payload+0x44>
 801a59a:	7a31      	ldrb	r1, [r6, #8]
 801a59c:	4638      	mov	r0, r7
 801a59e:	f7f8 fba1 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a5a2:	4605      	mov	r5, r0
 801a5a4:	b158      	cbz	r0, 801a5be <uxr_serialize_CREATE_Payload+0x9e>
 801a5a6:	7a33      	ldrb	r3, [r6, #8]
 801a5a8:	2b02      	cmp	r3, #2
 801a5aa:	d034      	beq.n	801a616 <uxr_serialize_CREATE_Payload+0xf6>
 801a5ac:	2b03      	cmp	r3, #3
 801a5ae:	d106      	bne.n	801a5be <uxr_serialize_CREATE_Payload+0x9e>
 801a5b0:	68f2      	ldr	r2, [r6, #12]
 801a5b2:	f106 0110 	add.w	r1, r6, #16
 801a5b6:	4638      	mov	r0, r7
 801a5b8:	f7fc fc0e 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 801a5bc:	4605      	mov	r5, r0
 801a5be:	2202      	movs	r2, #2
 801a5c0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801a5c4:	4638      	mov	r0, r7
 801a5c6:	f005 fd25 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a5ca:	4028      	ands	r0, r5
 801a5cc:	4004      	ands	r4, r0
 801a5ce:	e7c9      	b.n	801a564 <uxr_serialize_CREATE_Payload+0x44>
 801a5d0:	f106 0108 	add.w	r1, r6, #8
 801a5d4:	4638      	mov	r0, r7
 801a5d6:	f7ff f98d 	bl	80198f4 <uxr_serialize_CLIENT_Representation>
 801a5da:	4004      	ands	r4, r0
 801a5dc:	e7c2      	b.n	801a564 <uxr_serialize_CREATE_Payload+0x44>
 801a5de:	f106 0108 	add.w	r1, r6, #8
 801a5e2:	4638      	mov	r0, r7
 801a5e4:	f7ff fa42 	bl	8019a6c <uxr_serialize_AGENT_Representation>
 801a5e8:	4004      	ands	r4, r0
 801a5ea:	e7bb      	b.n	801a564 <uxr_serialize_CREATE_Payload+0x44>
 801a5ec:	7a31      	ldrb	r1, [r6, #8]
 801a5ee:	4638      	mov	r0, r7
 801a5f0:	f7f8 fb78 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a5f4:	4605      	mov	r5, r0
 801a5f6:	b130      	cbz	r0, 801a606 <uxr_serialize_CREATE_Payload+0xe6>
 801a5f8:	7a33      	ldrb	r3, [r6, #8]
 801a5fa:	2b02      	cmp	r3, #2
 801a5fc:	d011      	beq.n	801a622 <uxr_serialize_CREATE_Payload+0x102>
 801a5fe:	2b03      	cmp	r3, #3
 801a600:	d015      	beq.n	801a62e <uxr_serialize_CREATE_Payload+0x10e>
 801a602:	2b01      	cmp	r3, #1
 801a604:	d00d      	beq.n	801a622 <uxr_serialize_CREATE_Payload+0x102>
 801a606:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801a60a:	4638      	mov	r0, r7
 801a60c:	f7f9 f8a6 	bl	801375c <ucdr_serialize_int16_t>
 801a610:	4028      	ands	r0, r5
 801a612:	4004      	ands	r4, r0
 801a614:	e7a6      	b.n	801a564 <uxr_serialize_CREATE_Payload+0x44>
 801a616:	68f1      	ldr	r1, [r6, #12]
 801a618:	4638      	mov	r0, r7
 801a61a:	f005 fdc7 	bl	80201ac <ucdr_serialize_string>
 801a61e:	4605      	mov	r5, r0
 801a620:	e7cd      	b.n	801a5be <uxr_serialize_CREATE_Payload+0x9e>
 801a622:	68f1      	ldr	r1, [r6, #12]
 801a624:	4638      	mov	r0, r7
 801a626:	f005 fdc1 	bl	80201ac <ucdr_serialize_string>
 801a62a:	4605      	mov	r5, r0
 801a62c:	e7eb      	b.n	801a606 <uxr_serialize_CREATE_Payload+0xe6>
 801a62e:	68f2      	ldr	r2, [r6, #12]
 801a630:	f106 0110 	add.w	r1, r6, #16
 801a634:	4638      	mov	r0, r7
 801a636:	f7fc fbcf 	bl	8016dd8 <ucdr_serialize_sequence_uint8_t>
 801a63a:	4605      	mov	r5, r0
 801a63c:	e7e3      	b.n	801a606 <uxr_serialize_CREATE_Payload+0xe6>
 801a63e:	bf00      	nop

0801a640 <uxr_serialize_GET_INFO_Payload>:
 801a640:	b570      	push	{r4, r5, r6, lr}
 801a642:	2202      	movs	r2, #2
 801a644:	4605      	mov	r5, r0
 801a646:	460e      	mov	r6, r1
 801a648:	f005 fce4 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a64c:	2202      	movs	r2, #2
 801a64e:	4604      	mov	r4, r0
 801a650:	4628      	mov	r0, r5
 801a652:	18b1      	adds	r1, r6, r2
 801a654:	f005 fcde 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a658:	4603      	mov	r3, r0
 801a65a:	6871      	ldr	r1, [r6, #4]
 801a65c:	4628      	mov	r0, r5
 801a65e:	401c      	ands	r4, r3
 801a660:	f7f8 fd56 	bl	8013110 <ucdr_serialize_uint32_t>
 801a664:	b2e4      	uxtb	r4, r4
 801a666:	4020      	ands	r0, r4
 801a668:	bd70      	pop	{r4, r5, r6, pc}
 801a66a:	bf00      	nop

0801a66c <uxr_deserialize_GET_INFO_Payload>:
 801a66c:	b570      	push	{r4, r5, r6, lr}
 801a66e:	2202      	movs	r2, #2
 801a670:	4605      	mov	r5, r0
 801a672:	460e      	mov	r6, r1
 801a674:	f005 fd32 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a678:	2202      	movs	r2, #2
 801a67a:	4604      	mov	r4, r0
 801a67c:	4628      	mov	r0, r5
 801a67e:	18b1      	adds	r1, r6, r2
 801a680:	f005 fd2c 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a684:	4603      	mov	r3, r0
 801a686:	1d31      	adds	r1, r6, #4
 801a688:	4628      	mov	r0, r5
 801a68a:	401c      	ands	r4, r3
 801a68c:	f7f8 fe70 	bl	8013370 <ucdr_deserialize_uint32_t>
 801a690:	b2e4      	uxtb	r4, r4
 801a692:	4020      	ands	r0, r4
 801a694:	bd70      	pop	{r4, r5, r6, pc}
 801a696:	bf00      	nop

0801a698 <uxr_serialize_DELETE_Payload>:
 801a698:	b570      	push	{r4, r5, r6, lr}
 801a69a:	2202      	movs	r2, #2
 801a69c:	4605      	mov	r5, r0
 801a69e:	460e      	mov	r6, r1
 801a6a0:	f005 fcb8 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a6a4:	2202      	movs	r2, #2
 801a6a6:	4604      	mov	r4, r0
 801a6a8:	4628      	mov	r0, r5
 801a6aa:	18b1      	adds	r1, r6, r2
 801a6ac:	f005 fcb2 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a6b0:	4020      	ands	r0, r4
 801a6b2:	b2c0      	uxtb	r0, r0
 801a6b4:	bd70      	pop	{r4, r5, r6, pc}
 801a6b6:	bf00      	nop

0801a6b8 <uxr_deserialize_STATUS_AGENT_Payload>:
 801a6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6bc:	460e      	mov	r6, r1
 801a6be:	4605      	mov	r5, r0
 801a6c0:	f7f8 fb26 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a6c4:	4604      	mov	r4, r0
 801a6c6:	1c71      	adds	r1, r6, #1
 801a6c8:	4628      	mov	r0, r5
 801a6ca:	f7f8 fb21 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a6ce:	2204      	movs	r2, #4
 801a6d0:	4681      	mov	r9, r0
 801a6d2:	4628      	mov	r0, r5
 801a6d4:	18b1      	adds	r1, r6, r2
 801a6d6:	f005 fd01 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a6da:	f106 0108 	add.w	r1, r6, #8
 801a6de:	4680      	mov	r8, r0
 801a6e0:	2202      	movs	r2, #2
 801a6e2:	4628      	mov	r0, r5
 801a6e4:	f005 fcfa 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a6e8:	ea04 0309 	and.w	r3, r4, r9
 801a6ec:	4607      	mov	r7, r0
 801a6ee:	2202      	movs	r2, #2
 801a6f0:	b2db      	uxtb	r3, r3
 801a6f2:	f106 010a 	add.w	r1, r6, #10
 801a6f6:	4628      	mov	r0, r5
 801a6f8:	ea03 0408 	and.w	r4, r3, r8
 801a6fc:	f005 fcee 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a700:	4603      	mov	r3, r0
 801a702:	4628      	mov	r0, r5
 801a704:	403c      	ands	r4, r7
 801a706:	f106 010c 	add.w	r1, r6, #12
 801a70a:	461d      	mov	r5, r3
 801a70c:	f7f8 fad2 	bl	8012cb4 <ucdr_deserialize_bool>
 801a710:	4025      	ands	r5, r4
 801a712:	4028      	ands	r0, r5
 801a714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a718 <uxr_deserialize_STATUS_Payload>:
 801a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a71c:	2202      	movs	r2, #2
 801a71e:	4606      	mov	r6, r0
 801a720:	460f      	mov	r7, r1
 801a722:	f005 fcdb 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a726:	2202      	movs	r2, #2
 801a728:	4605      	mov	r5, r0
 801a72a:	4630      	mov	r0, r6
 801a72c:	18b9      	adds	r1, r7, r2
 801a72e:	f005 fcd5 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a732:	4680      	mov	r8, r0
 801a734:	1d39      	adds	r1, r7, #4
 801a736:	4630      	mov	r0, r6
 801a738:	f7f8 faea 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a73c:	ea05 0508 	and.w	r5, r5, r8
 801a740:	4604      	mov	r4, r0
 801a742:	1d79      	adds	r1, r7, #5
 801a744:	4630      	mov	r0, r6
 801a746:	402c      	ands	r4, r5
 801a748:	f7f8 fae2 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a74c:	4020      	ands	r0, r4
 801a74e:	b2c0      	uxtb	r0, r0
 801a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a754 <uxr_serialize_INFO_Payload>:
 801a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a758:	2202      	movs	r2, #2
 801a75a:	460c      	mov	r4, r1
 801a75c:	4605      	mov	r5, r0
 801a75e:	f005 fc59 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a762:	2202      	movs	r2, #2
 801a764:	4680      	mov	r8, r0
 801a766:	4628      	mov	r0, r5
 801a768:	18a1      	adds	r1, r4, r2
 801a76a:	f005 fc53 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a76e:	4607      	mov	r7, r0
 801a770:	7921      	ldrb	r1, [r4, #4]
 801a772:	4628      	mov	r0, r5
 801a774:	f7f8 fab6 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a778:	ea08 0807 	and.w	r8, r8, r7
 801a77c:	4606      	mov	r6, r0
 801a77e:	7961      	ldrb	r1, [r4, #5]
 801a780:	4628      	mov	r0, r5
 801a782:	ea06 0608 	and.w	r6, r6, r8
 801a786:	f7f8 faad 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a78a:	7a21      	ldrb	r1, [r4, #8]
 801a78c:	4030      	ands	r0, r6
 801a78e:	b2c7      	uxtb	r7, r0
 801a790:	4628      	mov	r0, r5
 801a792:	f7f8 fa79 	bl	8012c88 <ucdr_serialize_bool>
 801a796:	7a23      	ldrb	r3, [r4, #8]
 801a798:	4606      	mov	r6, r0
 801a79a:	b96b      	cbnz	r3, 801a7b8 <uxr_serialize_INFO_Payload+0x64>
 801a79c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801a7a0:	4628      	mov	r0, r5
 801a7a2:	f7f8 fa71 	bl	8012c88 <ucdr_serialize_bool>
 801a7a6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801a7aa:	4030      	ands	r0, r6
 801a7ac:	b2c6      	uxtb	r6, r0
 801a7ae:	b983      	cbnz	r3, 801a7d2 <uxr_serialize_INFO_Payload+0x7e>
 801a7b0:	ea06 0007 	and.w	r0, r6, r7
 801a7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7b8:	7b21      	ldrb	r1, [r4, #12]
 801a7ba:	4628      	mov	r0, r5
 801a7bc:	f7f8 fa92 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a7c0:	b188      	cbz	r0, 801a7e6 <uxr_serialize_INFO_Payload+0x92>
 801a7c2:	f104 010c 	add.w	r1, r4, #12
 801a7c6:	4628      	mov	r0, r5
 801a7c8:	f7ff f9c2 	bl	8019b50 <uxr_serialize_ObjectVariant.part.0>
 801a7cc:	4030      	ands	r0, r6
 801a7ce:	b2c6      	uxtb	r6, r0
 801a7d0:	e7e4      	b.n	801a79c <uxr_serialize_INFO_Payload+0x48>
 801a7d2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	f7ff fda2 	bl	801a320 <uxr_serialize_ActivityInfoVariant>
 801a7dc:	4006      	ands	r6, r0
 801a7de:	ea06 0007 	and.w	r0, r6, r7
 801a7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7e6:	4606      	mov	r6, r0
 801a7e8:	e7d8      	b.n	801a79c <uxr_serialize_INFO_Payload+0x48>
 801a7ea:	bf00      	nop

0801a7ec <uxr_serialize_READ_DATA_Payload>:
 801a7ec:	b570      	push	{r4, r5, r6, lr}
 801a7ee:	2202      	movs	r2, #2
 801a7f0:	4605      	mov	r5, r0
 801a7f2:	460e      	mov	r6, r1
 801a7f4:	f005 fc0e 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a7f8:	2202      	movs	r2, #2
 801a7fa:	4604      	mov	r4, r0
 801a7fc:	4628      	mov	r0, r5
 801a7fe:	18b1      	adds	r1, r6, r2
 801a800:	f005 fc08 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a804:	4603      	mov	r3, r0
 801a806:	1d31      	adds	r1, r6, #4
 801a808:	4628      	mov	r0, r5
 801a80a:	401c      	ands	r4, r3
 801a80c:	f7ff fe48 	bl	801a4a0 <uxr_serialize_ReadSpecification>
 801a810:	b2e4      	uxtb	r4, r4
 801a812:	4020      	ands	r0, r4
 801a814:	bd70      	pop	{r4, r5, r6, pc}
 801a816:	bf00      	nop

0801a818 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801a818:	b570      	push	{r4, r5, r6, lr}
 801a81a:	2202      	movs	r2, #2
 801a81c:	4605      	mov	r5, r0
 801a81e:	460e      	mov	r6, r1
 801a820:	f005 fbf8 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a824:	2202      	movs	r2, #2
 801a826:	4604      	mov	r4, r0
 801a828:	4628      	mov	r0, r5
 801a82a:	18b1      	adds	r1, r6, r2
 801a82c:	f005 fbf2 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a830:	4020      	ands	r0, r4
 801a832:	b2c0      	uxtb	r0, r0
 801a834:	bd70      	pop	{r4, r5, r6, pc}
 801a836:	bf00      	nop

0801a838 <uxr_serialize_ACKNACK_Payload>:
 801a838:	b570      	push	{r4, r5, r6, lr}
 801a83a:	460c      	mov	r4, r1
 801a83c:	4605      	mov	r5, r0
 801a83e:	460e      	mov	r6, r1
 801a840:	f834 1b02 	ldrh.w	r1, [r4], #2
 801a844:	f7f8 fa7a 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a848:	2202      	movs	r2, #2
 801a84a:	4621      	mov	r1, r4
 801a84c:	4604      	mov	r4, r0
 801a84e:	4628      	mov	r0, r5
 801a850:	f005 fbe0 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a854:	4603      	mov	r3, r0
 801a856:	7931      	ldrb	r1, [r6, #4]
 801a858:	4628      	mov	r0, r5
 801a85a:	401c      	ands	r4, r3
 801a85c:	f7f8 fa42 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a860:	b2e4      	uxtb	r4, r4
 801a862:	4020      	ands	r0, r4
 801a864:	bd70      	pop	{r4, r5, r6, pc}
 801a866:	bf00      	nop

0801a868 <uxr_deserialize_ACKNACK_Payload>:
 801a868:	b570      	push	{r4, r5, r6, lr}
 801a86a:	460e      	mov	r6, r1
 801a86c:	4605      	mov	r5, r0
 801a86e:	f7f8 fb65 	bl	8012f3c <ucdr_deserialize_uint16_t>
 801a872:	2202      	movs	r2, #2
 801a874:	4604      	mov	r4, r0
 801a876:	4628      	mov	r0, r5
 801a878:	18b1      	adds	r1, r6, r2
 801a87a:	f005 fc2f 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a87e:	4603      	mov	r3, r0
 801a880:	1d31      	adds	r1, r6, #4
 801a882:	4628      	mov	r0, r5
 801a884:	401c      	ands	r4, r3
 801a886:	f7f8 fa43 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a88a:	b2e4      	uxtb	r4, r4
 801a88c:	4020      	ands	r0, r4
 801a88e:	bd70      	pop	{r4, r5, r6, pc}

0801a890 <uxr_serialize_HEARTBEAT_Payload>:
 801a890:	b570      	push	{r4, r5, r6, lr}
 801a892:	460d      	mov	r5, r1
 801a894:	4606      	mov	r6, r0
 801a896:	8809      	ldrh	r1, [r1, #0]
 801a898:	f7f8 fa50 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a89c:	8869      	ldrh	r1, [r5, #2]
 801a89e:	4604      	mov	r4, r0
 801a8a0:	4630      	mov	r0, r6
 801a8a2:	f7f8 fa4b 	bl	8012d3c <ucdr_serialize_uint16_t>
 801a8a6:	4603      	mov	r3, r0
 801a8a8:	7929      	ldrb	r1, [r5, #4]
 801a8aa:	4630      	mov	r0, r6
 801a8ac:	401c      	ands	r4, r3
 801a8ae:	f7f8 fa19 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a8b2:	b2e4      	uxtb	r4, r4
 801a8b4:	4020      	ands	r0, r4
 801a8b6:	bd70      	pop	{r4, r5, r6, pc}

0801a8b8 <uxr_deserialize_HEARTBEAT_Payload>:
 801a8b8:	b570      	push	{r4, r5, r6, lr}
 801a8ba:	460e      	mov	r6, r1
 801a8bc:	4605      	mov	r5, r0
 801a8be:	f7f8 fb3d 	bl	8012f3c <ucdr_deserialize_uint16_t>
 801a8c2:	4604      	mov	r4, r0
 801a8c4:	1cb1      	adds	r1, r6, #2
 801a8c6:	4628      	mov	r0, r5
 801a8c8:	f7f8 fb38 	bl	8012f3c <ucdr_deserialize_uint16_t>
 801a8cc:	4603      	mov	r3, r0
 801a8ce:	1d31      	adds	r1, r6, #4
 801a8d0:	4628      	mov	r0, r5
 801a8d2:	401c      	ands	r4, r3
 801a8d4:	f7f8 fa1c 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a8d8:	b2e4      	uxtb	r4, r4
 801a8da:	4020      	ands	r0, r4
 801a8dc:	bd70      	pop	{r4, r5, r6, pc}
 801a8de:	bf00      	nop

0801a8e0 <uxr_serialize_TIMESTAMP_Payload>:
 801a8e0:	b570      	push	{r4, r5, r6, lr}
 801a8e2:	460d      	mov	r5, r1
 801a8e4:	4606      	mov	r6, r0
 801a8e6:	6809      	ldr	r1, [r1, #0]
 801a8e8:	f7f9 f82c 	bl	8013944 <ucdr_serialize_int32_t>
 801a8ec:	4604      	mov	r4, r0
 801a8ee:	6869      	ldr	r1, [r5, #4]
 801a8f0:	4630      	mov	r0, r6
 801a8f2:	f7f8 fc0d 	bl	8013110 <ucdr_serialize_uint32_t>
 801a8f6:	4020      	ands	r0, r4
 801a8f8:	b2c0      	uxtb	r0, r0
 801a8fa:	bd70      	pop	{r4, r5, r6, pc}

0801a8fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a900:	460e      	mov	r6, r1
 801a902:	4605      	mov	r5, r0
 801a904:	f7f9 f8b6 	bl	8013a74 <ucdr_deserialize_int32_t>
 801a908:	4607      	mov	r7, r0
 801a90a:	1d31      	adds	r1, r6, #4
 801a90c:	4628      	mov	r0, r5
 801a90e:	f7f8 fd2f 	bl	8013370 <ucdr_deserialize_uint32_t>
 801a912:	4680      	mov	r8, r0
 801a914:	f106 0108 	add.w	r1, r6, #8
 801a918:	4628      	mov	r0, r5
 801a91a:	f7f9 f8ab 	bl	8013a74 <ucdr_deserialize_int32_t>
 801a91e:	ea07 0708 	and.w	r7, r7, r8
 801a922:	4604      	mov	r4, r0
 801a924:	f106 010c 	add.w	r1, r6, #12
 801a928:	4628      	mov	r0, r5
 801a92a:	403c      	ands	r4, r7
 801a92c:	f7f8 fd20 	bl	8013370 <ucdr_deserialize_uint32_t>
 801a930:	f106 0110 	add.w	r1, r6, #16
 801a934:	4004      	ands	r4, r0
 801a936:	4628      	mov	r0, r5
 801a938:	f7f9 f89c 	bl	8013a74 <ucdr_deserialize_int32_t>
 801a93c:	4603      	mov	r3, r0
 801a93e:	b2e4      	uxtb	r4, r4
 801a940:	4628      	mov	r0, r5
 801a942:	461d      	mov	r5, r3
 801a944:	f106 0114 	add.w	r1, r6, #20
 801a948:	f7f8 fd12 	bl	8013370 <ucdr_deserialize_uint32_t>
 801a94c:	402c      	ands	r4, r5
 801a94e:	4020      	ands	r0, r4
 801a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a954 <uxr_serialize_SampleIdentity>:
 801a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a958:	4604      	mov	r4, r0
 801a95a:	460d      	mov	r5, r1
 801a95c:	220c      	movs	r2, #12
 801a95e:	f005 fb59 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a962:	2203      	movs	r2, #3
 801a964:	f105 010c 	add.w	r1, r5, #12
 801a968:	4607      	mov	r7, r0
 801a96a:	4620      	mov	r0, r4
 801a96c:	f005 fb52 	bl	8020014 <ucdr_serialize_array_uint8_t>
 801a970:	7be9      	ldrb	r1, [r5, #15]
 801a972:	4680      	mov	r8, r0
 801a974:	4620      	mov	r0, r4
 801a976:	f7f8 f9b5 	bl	8012ce4 <ucdr_serialize_uint8_t>
 801a97a:	6929      	ldr	r1, [r5, #16]
 801a97c:	4606      	mov	r6, r0
 801a97e:	4620      	mov	r0, r4
 801a980:	f7f8 ffe0 	bl	8013944 <ucdr_serialize_int32_t>
 801a984:	ea07 0708 	and.w	r7, r7, r8
 801a988:	4603      	mov	r3, r0
 801a98a:	4620      	mov	r0, r4
 801a98c:	403e      	ands	r6, r7
 801a98e:	6969      	ldr	r1, [r5, #20]
 801a990:	461c      	mov	r4, r3
 801a992:	f7f8 fbbd 	bl	8013110 <ucdr_serialize_uint32_t>
 801a996:	4034      	ands	r4, r6
 801a998:	4020      	ands	r0, r4
 801a99a:	b2c0      	uxtb	r0, r0
 801a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a9a0 <uxr_deserialize_SampleIdentity>:
 801a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9a4:	4604      	mov	r4, r0
 801a9a6:	460d      	mov	r5, r1
 801a9a8:	220c      	movs	r2, #12
 801a9aa:	f005 fb97 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a9ae:	2203      	movs	r2, #3
 801a9b0:	f105 010c 	add.w	r1, r5, #12
 801a9b4:	4607      	mov	r7, r0
 801a9b6:	4620      	mov	r0, r4
 801a9b8:	f005 fb90 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 801a9bc:	f105 010f 	add.w	r1, r5, #15
 801a9c0:	4680      	mov	r8, r0
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	f7f8 f9a4 	bl	8012d10 <ucdr_deserialize_uint8_t>
 801a9c8:	f105 0110 	add.w	r1, r5, #16
 801a9cc:	4606      	mov	r6, r0
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	f7f9 f850 	bl	8013a74 <ucdr_deserialize_int32_t>
 801a9d4:	ea07 0708 	and.w	r7, r7, r8
 801a9d8:	4603      	mov	r3, r0
 801a9da:	4620      	mov	r0, r4
 801a9dc:	403e      	ands	r6, r7
 801a9de:	f105 0114 	add.w	r1, r5, #20
 801a9e2:	461c      	mov	r4, r3
 801a9e4:	f7f8 fcc4 	bl	8013370 <ucdr_deserialize_uint32_t>
 801a9e8:	4034      	ands	r4, r6
 801a9ea:	4020      	ands	r0, r4
 801a9ec:	b2c0      	uxtb	r0, r0
 801a9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9f2:	bf00      	nop

0801a9f4 <rcl_client_get_rmw_handle>:
 801a9f4:	b118      	cbz	r0, 801a9fe <rcl_client_get_rmw_handle+0xa>
 801a9f6:	6800      	ldr	r0, [r0, #0]
 801a9f8:	b108      	cbz	r0, 801a9fe <rcl_client_get_rmw_handle+0xa>
 801a9fa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801a9fe:	4770      	bx	lr

0801aa00 <rcl_send_request>:
 801aa00:	b570      	push	{r4, r5, r6, lr}
 801aa02:	b082      	sub	sp, #8
 801aa04:	b1f8      	cbz	r0, 801aa46 <rcl_send_request+0x46>
 801aa06:	4604      	mov	r4, r0
 801aa08:	6800      	ldr	r0, [r0, #0]
 801aa0a:	b1e0      	cbz	r0, 801aa46 <rcl_send_request+0x46>
 801aa0c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801aa10:	b1cb      	cbz	r3, 801aa46 <rcl_send_request+0x46>
 801aa12:	460e      	mov	r6, r1
 801aa14:	b1e1      	cbz	r1, 801aa50 <rcl_send_request+0x50>
 801aa16:	4615      	mov	r5, r2
 801aa18:	b1d2      	cbz	r2, 801aa50 <rcl_send_request+0x50>
 801aa1a:	2105      	movs	r1, #5
 801aa1c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801aa20:	f003 f8b6 	bl	801db90 <__atomic_load_8>
 801aa24:	4602      	mov	r2, r0
 801aa26:	460b      	mov	r3, r1
 801aa28:	4631      	mov	r1, r6
 801aa2a:	e9c5 2300 	strd	r2, r3, [r5]
 801aa2e:	6823      	ldr	r3, [r4, #0]
 801aa30:	462a      	mov	r2, r5
 801aa32:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801aa36:	f004 faa1 	bl	801ef7c <rmw_send_request>
 801aa3a:	4606      	mov	r6, r0
 801aa3c:	b160      	cbz	r0, 801aa58 <rcl_send_request+0x58>
 801aa3e:	2601      	movs	r6, #1
 801aa40:	4630      	mov	r0, r6
 801aa42:	b002      	add	sp, #8
 801aa44:	bd70      	pop	{r4, r5, r6, pc}
 801aa46:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801aa4a:	4630      	mov	r0, r6
 801aa4c:	b002      	add	sp, #8
 801aa4e:	bd70      	pop	{r4, r5, r6, pc}
 801aa50:	260b      	movs	r6, #11
 801aa52:	4630      	mov	r0, r6
 801aa54:	b002      	add	sp, #8
 801aa56:	bd70      	pop	{r4, r5, r6, pc}
 801aa58:	6820      	ldr	r0, [r4, #0]
 801aa5a:	2105      	movs	r1, #5
 801aa5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aa60:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801aa64:	9100      	str	r1, [sp, #0]
 801aa66:	f003 f8ff 	bl	801dc68 <__atomic_exchange_8>
 801aa6a:	4630      	mov	r0, r6
 801aa6c:	b002      	add	sp, #8
 801aa6e:	bd70      	pop	{r4, r5, r6, pc}

0801aa70 <rcl_take_response>:
 801aa70:	b570      	push	{r4, r5, r6, lr}
 801aa72:	468e      	mov	lr, r1
 801aa74:	b08c      	sub	sp, #48	@ 0x30
 801aa76:	460c      	mov	r4, r1
 801aa78:	4616      	mov	r6, r2
 801aa7a:	f10d 0c18 	add.w	ip, sp, #24
 801aa7e:	4605      	mov	r5, r0
 801aa80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aa84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aa88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aa8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aa90:	b35d      	cbz	r5, 801aaea <rcl_take_response+0x7a>
 801aa92:	682b      	ldr	r3, [r5, #0]
 801aa94:	b34b      	cbz	r3, 801aaea <rcl_take_response+0x7a>
 801aa96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801aa9a:	b330      	cbz	r0, 801aaea <rcl_take_response+0x7a>
 801aa9c:	b346      	cbz	r6, 801aaf0 <rcl_take_response+0x80>
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	4632      	mov	r2, r6
 801aaa2:	a902      	add	r1, sp, #8
 801aaa4:	f88d 3007 	strb.w	r3, [sp, #7]
 801aaa8:	f10d 0307 	add.w	r3, sp, #7
 801aaac:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801aaf8 <rcl_take_response+0x88>
 801aab0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aab4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aab8:	f004 fb68 	bl	801f18c <rmw_take_response>
 801aabc:	4605      	mov	r5, r0
 801aabe:	b9c8      	cbnz	r0, 801aaf4 <rcl_take_response+0x84>
 801aac0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801aac4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801aac8:	2a00      	cmp	r2, #0
 801aaca:	bf08      	it	eq
 801aacc:	461d      	moveq	r5, r3
 801aace:	f10d 0e18 	add.w	lr, sp, #24
 801aad2:	46a4      	mov	ip, r4
 801aad4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aadc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aae0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aae4:	4628      	mov	r0, r5
 801aae6:	b00c      	add	sp, #48	@ 0x30
 801aae8:	bd70      	pop	{r4, r5, r6, pc}
 801aaea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801aaee:	e7ee      	b.n	801aace <rcl_take_response+0x5e>
 801aaf0:	250b      	movs	r5, #11
 801aaf2:	e7ec      	b.n	801aace <rcl_take_response+0x5e>
 801aaf4:	2501      	movs	r5, #1
 801aaf6:	e7ea      	b.n	801aace <rcl_take_response+0x5e>
	...

0801ab00 <rcl_client_is_valid>:
 801ab00:	b130      	cbz	r0, 801ab10 <rcl_client_is_valid+0x10>
 801ab02:	6800      	ldr	r0, [r0, #0]
 801ab04:	b120      	cbz	r0, 801ab10 <rcl_client_is_valid+0x10>
 801ab06:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801ab0a:	3800      	subs	r0, #0
 801ab0c:	bf18      	it	ne
 801ab0e:	2001      	movne	r0, #1
 801ab10:	4770      	bx	lr
 801ab12:	bf00      	nop

0801ab14 <rcl_convert_rmw_ret_to_rcl_ret>:
 801ab14:	280b      	cmp	r0, #11
 801ab16:	dc0d      	bgt.n	801ab34 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801ab18:	2800      	cmp	r0, #0
 801ab1a:	db09      	blt.n	801ab30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ab1c:	280b      	cmp	r0, #11
 801ab1e:	d807      	bhi.n	801ab30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801ab20:	e8df f000 	tbb	[pc, r0]
 801ab24:	07060607 	.word	0x07060607
 801ab28:	06060606 	.word	0x06060606
 801ab2c:	07070606 	.word	0x07070606
 801ab30:	2001      	movs	r0, #1
 801ab32:	4770      	bx	lr
 801ab34:	28cb      	cmp	r0, #203	@ 0xcb
 801ab36:	bf18      	it	ne
 801ab38:	2001      	movne	r0, #1
 801ab3a:	4770      	bx	lr

0801ab3c <rcl_get_zero_initialized_context>:
 801ab3c:	4a03      	ldr	r2, [pc, #12]	@ (801ab4c <rcl_get_zero_initialized_context+0x10>)
 801ab3e:	4603      	mov	r3, r0
 801ab40:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab44:	e883 0003 	stmia.w	r3, {r0, r1}
 801ab48:	4618      	mov	r0, r3
 801ab4a:	4770      	bx	lr
 801ab4c:	08025364 	.word	0x08025364

0801ab50 <rcl_context_is_valid>:
 801ab50:	b118      	cbz	r0, 801ab5a <rcl_context_is_valid+0xa>
 801ab52:	6840      	ldr	r0, [r0, #4]
 801ab54:	3800      	subs	r0, #0
 801ab56:	bf18      	it	ne
 801ab58:	2001      	movne	r0, #1
 801ab5a:	4770      	bx	lr

0801ab5c <__cleanup_context>:
 801ab5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab60:	4606      	mov	r6, r0
 801ab62:	2300      	movs	r3, #0
 801ab64:	6800      	ldr	r0, [r0, #0]
 801ab66:	6073      	str	r3, [r6, #4]
 801ab68:	2800      	cmp	r0, #0
 801ab6a:	d049      	beq.n	801ac00 <__cleanup_context+0xa4>
 801ab6c:	6947      	ldr	r7, [r0, #20]
 801ab6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ab72:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801ab76:	b137      	cbz	r7, 801ab86 <__cleanup_context+0x2a>
 801ab78:	3014      	adds	r0, #20
 801ab7a:	f000 f9bd 	bl	801aef8 <rcl_init_options_fini>
 801ab7e:	4607      	mov	r7, r0
 801ab80:	2800      	cmp	r0, #0
 801ab82:	d144      	bne.n	801ac0e <__cleanup_context+0xb2>
 801ab84:	6830      	ldr	r0, [r6, #0]
 801ab86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ab88:	b143      	cbz	r3, 801ab9c <__cleanup_context+0x40>
 801ab8a:	3028      	adds	r0, #40	@ 0x28
 801ab8c:	f004 f83c 	bl	801ec08 <rmw_context_fini>
 801ab90:	b118      	cbz	r0, 801ab9a <__cleanup_context+0x3e>
 801ab92:	2f00      	cmp	r7, #0
 801ab94:	d03e      	beq.n	801ac14 <__cleanup_context+0xb8>
 801ab96:	f7fa fcd3 	bl	8015540 <rcutils_reset_error>
 801ab9a:	6830      	ldr	r0, [r6, #0]
 801ab9c:	6a03      	ldr	r3, [r0, #32]
 801ab9e:	b1db      	cbz	r3, 801abd8 <__cleanup_context+0x7c>
 801aba0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801aba4:	2a01      	cmp	r2, #1
 801aba6:	f17c 0100 	sbcs.w	r1, ip, #0
 801abaa:	db11      	blt.n	801abd0 <__cleanup_context+0x74>
 801abac:	2400      	movs	r4, #0
 801abae:	4625      	mov	r5, r4
 801abb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801abb4:	4649      	mov	r1, r9
 801abb6:	b1b8      	cbz	r0, 801abe8 <__cleanup_context+0x8c>
 801abb8:	47c0      	blx	r8
 801abba:	6833      	ldr	r3, [r6, #0]
 801abbc:	3401      	adds	r4, #1
 801abbe:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801abc2:	f145 0500 	adc.w	r5, r5, #0
 801abc6:	6a1b      	ldr	r3, [r3, #32]
 801abc8:	4294      	cmp	r4, r2
 801abca:	eb75 010c 	sbcs.w	r1, r5, ip
 801abce:	dbef      	blt.n	801abb0 <__cleanup_context+0x54>
 801abd0:	4618      	mov	r0, r3
 801abd2:	4649      	mov	r1, r9
 801abd4:	47c0      	blx	r8
 801abd6:	6830      	ldr	r0, [r6, #0]
 801abd8:	4649      	mov	r1, r9
 801abda:	47c0      	blx	r8
 801abdc:	2300      	movs	r3, #0
 801abde:	4638      	mov	r0, r7
 801abe0:	e9c6 3300 	strd	r3, r3, [r6]
 801abe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abe8:	3401      	adds	r4, #1
 801abea:	f145 0500 	adc.w	r5, r5, #0
 801abee:	4294      	cmp	r4, r2
 801abf0:	eb75 010c 	sbcs.w	r1, r5, ip
 801abf4:	dbdc      	blt.n	801abb0 <__cleanup_context+0x54>
 801abf6:	4618      	mov	r0, r3
 801abf8:	4649      	mov	r1, r9
 801abfa:	47c0      	blx	r8
 801abfc:	6830      	ldr	r0, [r6, #0]
 801abfe:	e7eb      	b.n	801abd8 <__cleanup_context+0x7c>
 801ac00:	4607      	mov	r7, r0
 801ac02:	2300      	movs	r3, #0
 801ac04:	4638      	mov	r0, r7
 801ac06:	e9c6 3300 	strd	r3, r3, [r6]
 801ac0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac0e:	f7fa fc97 	bl	8015540 <rcutils_reset_error>
 801ac12:	e7b7      	b.n	801ab84 <__cleanup_context+0x28>
 801ac14:	f7ff ff7e 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 801ac18:	4607      	mov	r7, r0
 801ac1a:	e7bc      	b.n	801ab96 <__cleanup_context+0x3a>

0801ac1c <rcl_init>:
 801ac1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac20:	1e05      	subs	r5, r0, #0
 801ac22:	b09e      	sub	sp, #120	@ 0x78
 801ac24:	460e      	mov	r6, r1
 801ac26:	4690      	mov	r8, r2
 801ac28:	461f      	mov	r7, r3
 801ac2a:	f340 809f 	ble.w	801ad6c <rcl_init+0x150>
 801ac2e:	2900      	cmp	r1, #0
 801ac30:	f000 809f 	beq.w	801ad72 <rcl_init+0x156>
 801ac34:	f1a1 0e04 	sub.w	lr, r1, #4
 801ac38:	f04f 0c00 	mov.w	ip, #0
 801ac3c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ac40:	f10c 0c01 	add.w	ip, ip, #1
 801ac44:	2c00      	cmp	r4, #0
 801ac46:	f000 8094 	beq.w	801ad72 <rcl_init+0x156>
 801ac4a:	4565      	cmp	r5, ip
 801ac4c:	d1f6      	bne.n	801ac3c <rcl_init+0x20>
 801ac4e:	f1b8 0f00 	cmp.w	r8, #0
 801ac52:	f000 808e 	beq.w	801ad72 <rcl_init+0x156>
 801ac56:	f8d8 4000 	ldr.w	r4, [r8]
 801ac5a:	2c00      	cmp	r4, #0
 801ac5c:	f000 8089 	beq.w	801ad72 <rcl_init+0x156>
 801ac60:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801ac64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac6a:	6823      	ldr	r3, [r4, #0]
 801ac6c:	a819      	add	r0, sp, #100	@ 0x64
 801ac6e:	f8cc 3000 	str.w	r3, [ip]
 801ac72:	f7fa fc41 	bl	80154f8 <rcutils_allocator_is_valid>
 801ac76:	f080 0001 	eor.w	r0, r0, #1
 801ac7a:	b2c0      	uxtb	r0, r0
 801ac7c:	2800      	cmp	r0, #0
 801ac7e:	d178      	bne.n	801ad72 <rcl_init+0x156>
 801ac80:	2f00      	cmp	r7, #0
 801ac82:	d076      	beq.n	801ad72 <rcl_init+0x156>
 801ac84:	683b      	ldr	r3, [r7, #0]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d178      	bne.n	801ad7c <rcl_init+0x160>
 801ac8a:	2178      	movs	r1, #120	@ 0x78
 801ac8c:	2001      	movs	r0, #1
 801ac8e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801ac92:	4798      	blx	r3
 801ac94:	4604      	mov	r4, r0
 801ac96:	6038      	str	r0, [r7, #0]
 801ac98:	2800      	cmp	r0, #0
 801ac9a:	f000 80b6 	beq.w	801ae0a <rcl_init+0x1ee>
 801ac9e:	a802      	add	r0, sp, #8
 801aca0:	f003 faea 	bl	801e278 <rmw_get_zero_initialized_context>
 801aca4:	a902      	add	r1, sp, #8
 801aca6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801acaa:	2250      	movs	r2, #80	@ 0x50
 801acac:	f007 fc47 	bl	802253e <memcpy>
 801acb0:	ac19      	add	r4, sp, #100	@ 0x64
 801acb2:	f8d7 e000 	ldr.w	lr, [r7]
 801acb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801acb8:	46f4      	mov	ip, lr
 801acba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801acbe:	6823      	ldr	r3, [r4, #0]
 801acc0:	f10e 0114 	add.w	r1, lr, #20
 801acc4:	4640      	mov	r0, r8
 801acc6:	f8cc 3000 	str.w	r3, [ip]
 801acca:	f000 f93f 	bl	801af4c <rcl_init_options_copy>
 801acce:	4604      	mov	r4, r0
 801acd0:	2800      	cmp	r0, #0
 801acd2:	d144      	bne.n	801ad5e <rcl_init+0x142>
 801acd4:	f8d7 9000 	ldr.w	r9, [r7]
 801acd8:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801acdc:	f8c9 0020 	str.w	r0, [r9, #32]
 801ace0:	f8c9 5018 	str.w	r5, [r9, #24]
 801ace4:	f8c9 801c 	str.w	r8, [r9, #28]
 801ace8:	2d00      	cmp	r5, #0
 801acea:	d04e      	beq.n	801ad8a <rcl_init+0x16e>
 801acec:	2e00      	cmp	r6, #0
 801acee:	d04c      	beq.n	801ad8a <rcl_init+0x16e>
 801acf0:	2104      	movs	r1, #4
 801acf2:	4628      	mov	r0, r5
 801acf4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801acf8:	4798      	blx	r3
 801acfa:	f8c9 0020 	str.w	r0, [r9, #32]
 801acfe:	f8d7 9000 	ldr.w	r9, [r7]
 801ad02:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801ad06:	46ca      	mov	sl, r9
 801ad08:	b343      	cbz	r3, 801ad5c <rcl_init+0x140>
 801ad0a:	2d01      	cmp	r5, #1
 801ad0c:	f178 0300 	sbcs.w	r3, r8, #0
 801ad10:	db3b      	blt.n	801ad8a <rcl_init+0x16e>
 801ad12:	2400      	movs	r4, #0
 801ad14:	3e04      	subs	r6, #4
 801ad16:	46a1      	mov	r9, r4
 801ad18:	e00b      	b.n	801ad32 <rcl_init+0x116>
 801ad1a:	6831      	ldr	r1, [r6, #0]
 801ad1c:	f007 fc0f 	bl	802253e <memcpy>
 801ad20:	3401      	adds	r4, #1
 801ad22:	f149 0900 	adc.w	r9, r9, #0
 801ad26:	45c8      	cmp	r8, r9
 801ad28:	bf08      	it	eq
 801ad2a:	42a5      	cmpeq	r5, r4
 801ad2c:	d02b      	beq.n	801ad86 <rcl_init+0x16a>
 801ad2e:	f8d7 a000 	ldr.w	sl, [r7]
 801ad32:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ad36:	f7e5 fadd 	bl	80002f4 <strlen>
 801ad3a:	1c42      	adds	r2, r0, #1
 801ad3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad3e:	4610      	mov	r0, r2
 801ad40:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801ad42:	f8da a020 	ldr.w	sl, [sl, #32]
 801ad46:	9201      	str	r2, [sp, #4]
 801ad48:	4798      	blx	r3
 801ad4a:	683b      	ldr	r3, [r7, #0]
 801ad4c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801ad50:	6a1b      	ldr	r3, [r3, #32]
 801ad52:	9a01      	ldr	r2, [sp, #4]
 801ad54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ad58:	2800      	cmp	r0, #0
 801ad5a:	d1de      	bne.n	801ad1a <rcl_init+0xfe>
 801ad5c:	240a      	movs	r4, #10
 801ad5e:	4638      	mov	r0, r7
 801ad60:	f7ff fefc 	bl	801ab5c <__cleanup_context>
 801ad64:	4620      	mov	r0, r4
 801ad66:	b01e      	add	sp, #120	@ 0x78
 801ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad6c:	2900      	cmp	r1, #0
 801ad6e:	f43f af6e 	beq.w	801ac4e <rcl_init+0x32>
 801ad72:	240b      	movs	r4, #11
 801ad74:	4620      	mov	r0, r4
 801ad76:	b01e      	add	sp, #120	@ 0x78
 801ad78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad7c:	2464      	movs	r4, #100	@ 0x64
 801ad7e:	4620      	mov	r0, r4
 801ad80:	b01e      	add	sp, #120	@ 0x78
 801ad82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad86:	f8d7 9000 	ldr.w	r9, [r7]
 801ad8a:	4926      	ldr	r1, [pc, #152]	@ (801ae24 <rcl_init+0x208>)
 801ad8c:	680b      	ldr	r3, [r1, #0]
 801ad8e:	3301      	adds	r3, #1
 801ad90:	d036      	beq.n	801ae00 <rcl_init+0x1e4>
 801ad92:	461a      	mov	r2, r3
 801ad94:	2400      	movs	r4, #0
 801ad96:	600b      	str	r3, [r1, #0]
 801ad98:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ad9c:	607b      	str	r3, [r7, #4]
 801ad9e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ada0:	3301      	adds	r3, #1
 801ada2:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801ada6:	d034      	beq.n	801ae12 <rcl_init+0x1f6>
 801ada8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801adac:	b93b      	cbnz	r3, 801adbe <rcl_init+0x1a2>
 801adae:	3030      	adds	r0, #48	@ 0x30
 801adb0:	f000 f93a 	bl	801b028 <rcl_get_localhost_only>
 801adb4:	4604      	mov	r4, r0
 801adb6:	2800      	cmp	r0, #0
 801adb8:	d1d1      	bne.n	801ad5e <rcl_init+0x142>
 801adba:	683b      	ldr	r3, [r7, #0]
 801adbc:	6958      	ldr	r0, [r3, #20]
 801adbe:	aa18      	add	r2, sp, #96	@ 0x60
 801adc0:	a917      	add	r1, sp, #92	@ 0x5c
 801adc2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801adc4:	f001 fb6e 	bl	801c4a4 <rcl_validate_enclave_name>
 801adc8:	4604      	mov	r4, r0
 801adca:	2800      	cmp	r0, #0
 801adcc:	d1c7      	bne.n	801ad5e <rcl_init+0x142>
 801adce:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801add0:	b9eb      	cbnz	r3, 801ae0e <rcl_init+0x1f2>
 801add2:	6839      	ldr	r1, [r7, #0]
 801add4:	694b      	ldr	r3, [r1, #20]
 801add6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801adda:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801addc:	f000 fc72 	bl	801b6c4 <rcl_get_security_options_from_environment>
 801ade0:	4604      	mov	r4, r0
 801ade2:	2800      	cmp	r0, #0
 801ade4:	d1bb      	bne.n	801ad5e <rcl_init+0x142>
 801ade6:	6839      	ldr	r1, [r7, #0]
 801ade8:	6948      	ldr	r0, [r1, #20]
 801adea:	3128      	adds	r1, #40	@ 0x28
 801adec:	3018      	adds	r0, #24
 801adee:	f003 fdd5 	bl	801e99c <rmw_init>
 801adf2:	4604      	mov	r4, r0
 801adf4:	2800      	cmp	r0, #0
 801adf6:	d0bd      	beq.n	801ad74 <rcl_init+0x158>
 801adf8:	f7ff fe8c 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 801adfc:	4604      	mov	r4, r0
 801adfe:	e7ae      	b.n	801ad5e <rcl_init+0x142>
 801ae00:	2201      	movs	r2, #1
 801ae02:	461c      	mov	r4, r3
 801ae04:	600a      	str	r2, [r1, #0]
 801ae06:	4613      	mov	r3, r2
 801ae08:	e7c6      	b.n	801ad98 <rcl_init+0x17c>
 801ae0a:	240a      	movs	r4, #10
 801ae0c:	e7b2      	b.n	801ad74 <rcl_init+0x158>
 801ae0e:	2401      	movs	r4, #1
 801ae10:	e7a5      	b.n	801ad5e <rcl_init+0x142>
 801ae12:	3024      	adds	r0, #36	@ 0x24
 801ae14:	f006 f87c 	bl	8020f10 <rcl_get_default_domain_id>
 801ae18:	4604      	mov	r4, r0
 801ae1a:	2800      	cmp	r0, #0
 801ae1c:	d19f      	bne.n	801ad5e <rcl_init+0x142>
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	6958      	ldr	r0, [r3, #20]
 801ae22:	e7c1      	b.n	801ada8 <rcl_init+0x18c>
 801ae24:	24069278 	.word	0x24069278

0801ae28 <rcl_get_zero_initialized_init_options>:
 801ae28:	2000      	movs	r0, #0
 801ae2a:	4770      	bx	lr

0801ae2c <rcl_init_options_init>:
 801ae2c:	b084      	sub	sp, #16
 801ae2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae30:	b097      	sub	sp, #92	@ 0x5c
 801ae32:	ae1d      	add	r6, sp, #116	@ 0x74
 801ae34:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801ae38:	2800      	cmp	r0, #0
 801ae3a:	d058      	beq.n	801aeee <rcl_init_options_init+0xc2>
 801ae3c:	6803      	ldr	r3, [r0, #0]
 801ae3e:	4605      	mov	r5, r0
 801ae40:	b133      	cbz	r3, 801ae50 <rcl_init_options_init+0x24>
 801ae42:	2464      	movs	r4, #100	@ 0x64
 801ae44:	4620      	mov	r0, r4
 801ae46:	b017      	add	sp, #92	@ 0x5c
 801ae48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ae4c:	b004      	add	sp, #16
 801ae4e:	4770      	bx	lr
 801ae50:	4630      	mov	r0, r6
 801ae52:	f7fa fb51 	bl	80154f8 <rcutils_allocator_is_valid>
 801ae56:	2800      	cmp	r0, #0
 801ae58:	d049      	beq.n	801aeee <rcl_init_options_init+0xc2>
 801ae5a:	46b4      	mov	ip, r6
 801ae5c:	ac11      	add	r4, sp, #68	@ 0x44
 801ae5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae64:	f8dc 3000 	ldr.w	r3, [ip]
 801ae68:	2050      	movs	r0, #80	@ 0x50
 801ae6a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801ae6c:	6023      	str	r3, [r4, #0]
 801ae6e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae70:	4798      	blx	r3
 801ae72:	4604      	mov	r4, r0
 801ae74:	6028      	str	r0, [r5, #0]
 801ae76:	2800      	cmp	r0, #0
 801ae78:	d03b      	beq.n	801aef2 <rcl_init_options_init+0xc6>
 801ae7a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801ae7e:	4686      	mov	lr, r0
 801ae80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ae88:	f8dc 3000 	ldr.w	r3, [ip]
 801ae8c:	a802      	add	r0, sp, #8
 801ae8e:	f8ce 3000 	str.w	r3, [lr]
 801ae92:	f003 fa05 	bl	801e2a0 <rmw_get_zero_initialized_init_options>
 801ae96:	f10d 0e08 	add.w	lr, sp, #8
 801ae9a:	f104 0c18 	add.w	ip, r4, #24
 801ae9e:	682f      	ldr	r7, [r5, #0]
 801aea0:	ac20      	add	r4, sp, #128	@ 0x80
 801aea2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aea6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aeaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aeae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aeb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aeb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aeba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aebe:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 801aec6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801aeca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801aece:	f107 0018 	add.w	r0, r7, #24
 801aed2:	f003 fc65 	bl	801e7a0 <rmw_init_options_init>
 801aed6:	4604      	mov	r4, r0
 801aed8:	2800      	cmp	r0, #0
 801aeda:	d0b3      	beq.n	801ae44 <rcl_init_options_init+0x18>
 801aedc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801aede:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801aee0:	6828      	ldr	r0, [r5, #0]
 801aee2:	4798      	blx	r3
 801aee4:	4620      	mov	r0, r4
 801aee6:	f7ff fe15 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 801aeea:	4604      	mov	r4, r0
 801aeec:	e7aa      	b.n	801ae44 <rcl_init_options_init+0x18>
 801aeee:	240b      	movs	r4, #11
 801aef0:	e7a8      	b.n	801ae44 <rcl_init_options_init+0x18>
 801aef2:	240a      	movs	r4, #10
 801aef4:	e7a6      	b.n	801ae44 <rcl_init_options_init+0x18>
 801aef6:	bf00      	nop

0801aef8 <rcl_init_options_fini>:
 801aef8:	b530      	push	{r4, r5, lr}
 801aefa:	b087      	sub	sp, #28
 801aefc:	b1f0      	cbz	r0, 801af3c <rcl_init_options_fini+0x44>
 801aefe:	6803      	ldr	r3, [r0, #0]
 801af00:	4604      	mov	r4, r0
 801af02:	b1db      	cbz	r3, 801af3c <rcl_init_options_fini+0x44>
 801af04:	469c      	mov	ip, r3
 801af06:	f10d 0e04 	add.w	lr, sp, #4
 801af0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801af12:	f8dc 3000 	ldr.w	r3, [ip]
 801af16:	a801      	add	r0, sp, #4
 801af18:	f8ce 3000 	str.w	r3, [lr]
 801af1c:	f7fa faec 	bl	80154f8 <rcutils_allocator_is_valid>
 801af20:	b160      	cbz	r0, 801af3c <rcl_init_options_fini+0x44>
 801af22:	6820      	ldr	r0, [r4, #0]
 801af24:	3018      	adds	r0, #24
 801af26:	f003 fcf5 	bl	801e914 <rmw_init_options_fini>
 801af2a:	4605      	mov	r5, r0
 801af2c:	b950      	cbnz	r0, 801af44 <rcl_init_options_fini+0x4c>
 801af2e:	6820      	ldr	r0, [r4, #0]
 801af30:	9b02      	ldr	r3, [sp, #8]
 801af32:	9905      	ldr	r1, [sp, #20]
 801af34:	4798      	blx	r3
 801af36:	4628      	mov	r0, r5
 801af38:	b007      	add	sp, #28
 801af3a:	bd30      	pop	{r4, r5, pc}
 801af3c:	250b      	movs	r5, #11
 801af3e:	4628      	mov	r0, r5
 801af40:	b007      	add	sp, #28
 801af42:	bd30      	pop	{r4, r5, pc}
 801af44:	f7ff fde6 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 801af48:	4605      	mov	r5, r0
 801af4a:	e7f8      	b.n	801af3e <rcl_init_options_fini+0x46>

0801af4c <rcl_init_options_copy>:
 801af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af50:	b094      	sub	sp, #80	@ 0x50
 801af52:	2800      	cmp	r0, #0
 801af54:	d05b      	beq.n	801b00e <rcl_init_options_copy+0xc2>
 801af56:	4604      	mov	r4, r0
 801af58:	6800      	ldr	r0, [r0, #0]
 801af5a:	2800      	cmp	r0, #0
 801af5c:	d057      	beq.n	801b00e <rcl_init_options_copy+0xc2>
 801af5e:	460e      	mov	r6, r1
 801af60:	f7fa faca 	bl	80154f8 <rcutils_allocator_is_valid>
 801af64:	2e00      	cmp	r6, #0
 801af66:	d052      	beq.n	801b00e <rcl_init_options_copy+0xc2>
 801af68:	f080 0001 	eor.w	r0, r0, #1
 801af6c:	b2c0      	uxtb	r0, r0
 801af6e:	2800      	cmp	r0, #0
 801af70:	d14d      	bne.n	801b00e <rcl_init_options_copy+0xc2>
 801af72:	6833      	ldr	r3, [r6, #0]
 801af74:	b123      	cbz	r3, 801af80 <rcl_init_options_copy+0x34>
 801af76:	2464      	movs	r4, #100	@ 0x64
 801af78:	4620      	mov	r0, r4
 801af7a:	b014      	add	sp, #80	@ 0x50
 801af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af80:	6827      	ldr	r7, [r4, #0]
 801af82:	ad0f      	add	r5, sp, #60	@ 0x3c
 801af84:	46bc      	mov	ip, r7
 801af86:	f8d7 8000 	ldr.w	r8, [r7]
 801af8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af90:	f8dc 3000 	ldr.w	r3, [ip]
 801af94:	2050      	movs	r0, #80	@ 0x50
 801af96:	4619      	mov	r1, r3
 801af98:	602b      	str	r3, [r5, #0]
 801af9a:	47c0      	blx	r8
 801af9c:	4605      	mov	r5, r0
 801af9e:	6030      	str	r0, [r6, #0]
 801afa0:	b3d0      	cbz	r0, 801b018 <rcl_init_options_copy+0xcc>
 801afa2:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801afa6:	4686      	mov	lr, r0
 801afa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801afac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801afb0:	f8dc 3000 	ldr.w	r3, [ip]
 801afb4:	4668      	mov	r0, sp
 801afb6:	f8ce 3000 	str.w	r3, [lr]
 801afba:	f003 f971 	bl	801e2a0 <rmw_get_zero_initialized_init_options>
 801afbe:	46ee      	mov	lr, sp
 801afc0:	f105 0c18 	add.w	ip, r5, #24
 801afc4:	6824      	ldr	r4, [r4, #0]
 801afc6:	6835      	ldr	r5, [r6, #0]
 801afc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afd0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afe0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801afe4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801afe8:	f104 0018 	add.w	r0, r4, #24
 801afec:	f105 0118 	add.w	r1, r5, #24
 801aff0:	f003 fc3e 	bl	801e870 <rmw_init_options_copy>
 801aff4:	4604      	mov	r4, r0
 801aff6:	2800      	cmp	r0, #0
 801aff8:	d0be      	beq.n	801af78 <rcl_init_options_copy+0x2c>
 801affa:	f7fa fa8b 	bl	8015514 <rcutils_get_error_string>
 801affe:	f7fa fa9f 	bl	8015540 <rcutils_reset_error>
 801b002:	4630      	mov	r0, r6
 801b004:	f7ff ff78 	bl	801aef8 <rcl_init_options_fini>
 801b008:	b140      	cbz	r0, 801b01c <rcl_init_options_copy+0xd0>
 801b00a:	4604      	mov	r4, r0
 801b00c:	e7b4      	b.n	801af78 <rcl_init_options_copy+0x2c>
 801b00e:	240b      	movs	r4, #11
 801b010:	4620      	mov	r0, r4
 801b012:	b014      	add	sp, #80	@ 0x50
 801b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b018:	240a      	movs	r4, #10
 801b01a:	e7ad      	b.n	801af78 <rcl_init_options_copy+0x2c>
 801b01c:	4620      	mov	r0, r4
 801b01e:	b014      	add	sp, #80	@ 0x50
 801b020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b024:	f7ff bd76 	b.w	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>

0801b028 <rcl_get_localhost_only>:
 801b028:	b510      	push	{r4, lr}
 801b02a:	2300      	movs	r3, #0
 801b02c:	b082      	sub	sp, #8
 801b02e:	9301      	str	r3, [sp, #4]
 801b030:	b1b8      	cbz	r0, 801b062 <rcl_get_localhost_only+0x3a>
 801b032:	4604      	mov	r4, r0
 801b034:	a901      	add	r1, sp, #4
 801b036:	480c      	ldr	r0, [pc, #48]	@ (801b068 <rcl_get_localhost_only+0x40>)
 801b038:	f002 fe4e 	bl	801dcd8 <rcutils_get_env>
 801b03c:	b110      	cbz	r0, 801b044 <rcl_get_localhost_only+0x1c>
 801b03e:	2001      	movs	r0, #1
 801b040:	b002      	add	sp, #8
 801b042:	bd10      	pop	{r4, pc}
 801b044:	9b01      	ldr	r3, [sp, #4]
 801b046:	b113      	cbz	r3, 801b04e <rcl_get_localhost_only+0x26>
 801b048:	781a      	ldrb	r2, [r3, #0]
 801b04a:	2a31      	cmp	r2, #49	@ 0x31
 801b04c:	d004      	beq.n	801b058 <rcl_get_localhost_only+0x30>
 801b04e:	2302      	movs	r3, #2
 801b050:	2000      	movs	r0, #0
 801b052:	7023      	strb	r3, [r4, #0]
 801b054:	b002      	add	sp, #8
 801b056:	bd10      	pop	{r4, pc}
 801b058:	785b      	ldrb	r3, [r3, #1]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d1f7      	bne.n	801b04e <rcl_get_localhost_only+0x26>
 801b05e:	2301      	movs	r3, #1
 801b060:	e7f6      	b.n	801b050 <rcl_get_localhost_only+0x28>
 801b062:	200b      	movs	r0, #11
 801b064:	b002      	add	sp, #8
 801b066:	bd10      	pop	{r4, pc}
 801b068:	0802536c 	.word	0x0802536c

0801b06c <rcl_get_zero_initialized_node>:
 801b06c:	4a03      	ldr	r2, [pc, #12]	@ (801b07c <rcl_get_zero_initialized_node+0x10>)
 801b06e:	4603      	mov	r3, r0
 801b070:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b074:	e883 0003 	stmia.w	r3, {r0, r1}
 801b078:	4618      	mov	r0, r3
 801b07a:	4770      	bx	lr
 801b07c:	08025394 	.word	0x08025394

0801b080 <rcl_node_init>:
 801b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b084:	b0a9      	sub	sp, #164	@ 0xa4
 801b086:	4604      	mov	r4, r0
 801b088:	460e      	mov	r6, r1
 801b08a:	4615      	mov	r5, r2
 801b08c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801b090:	a823      	add	r0, sp, #140	@ 0x8c
 801b092:	461f      	mov	r7, r3
 801b094:	f006 f9b0 	bl	80213f8 <rcl_guard_condition_get_default_options>
 801b098:	f1b8 0f00 	cmp.w	r8, #0
 801b09c:	f000 80f3 	beq.w	801b286 <rcl_node_init+0x206>
 801b0a0:	4640      	mov	r0, r8
 801b0a2:	f7fa fa29 	bl	80154f8 <rcutils_allocator_is_valid>
 801b0a6:	2d00      	cmp	r5, #0
 801b0a8:	bf18      	it	ne
 801b0aa:	2c00      	cmpne	r4, #0
 801b0ac:	f080 0001 	eor.w	r0, r0, #1
 801b0b0:	bf0c      	ite	eq
 801b0b2:	f04f 0c01 	moveq.w	ip, #1
 801b0b6:	f04f 0c00 	movne.w	ip, #0
 801b0ba:	2e00      	cmp	r6, #0
 801b0bc:	bf08      	it	eq
 801b0be:	f04c 0c01 	orreq.w	ip, ip, #1
 801b0c2:	ea4c 0c00 	orr.w	ip, ip, r0
 801b0c6:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801b0ca:	f040 80dc 	bne.w	801b286 <rcl_node_init+0x206>
 801b0ce:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b0d2:	f1ba 0f00 	cmp.w	sl, #0
 801b0d6:	f040 80fc 	bne.w	801b2d2 <rcl_node_init+0x252>
 801b0da:	2f00      	cmp	r7, #0
 801b0dc:	f000 80d3 	beq.w	801b286 <rcl_node_init+0x206>
 801b0e0:	4638      	mov	r0, r7
 801b0e2:	f7ff fd35 	bl	801ab50 <rcl_context_is_valid>
 801b0e6:	4683      	mov	fp, r0
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	f000 80d2 	beq.w	801b292 <rcl_node_init+0x212>
 801b0ee:	4652      	mov	r2, sl
 801b0f0:	4630      	mov	r0, r6
 801b0f2:	a922      	add	r1, sp, #136	@ 0x88
 801b0f4:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801b0f8:	f003 fa84 	bl	801e604 <rmw_validate_node_name>
 801b0fc:	4682      	mov	sl, r0
 801b0fe:	2800      	cmp	r0, #0
 801b100:	f040 80c3 	bne.w	801b28a <rcl_node_init+0x20a>
 801b104:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b106:	2800      	cmp	r0, #0
 801b108:	f040 80f1 	bne.w	801b2ee <rcl_node_init+0x26e>
 801b10c:	4628      	mov	r0, r5
 801b10e:	f7e5 f8f1 	bl	80002f4 <strlen>
 801b112:	2800      	cmp	r0, #0
 801b114:	f040 80c0 	bne.w	801b298 <rcl_node_init+0x218>
 801b118:	4d79      	ldr	r5, [pc, #484]	@ (801b300 <rcl_node_init+0x280>)
 801b11a:	a922      	add	r1, sp, #136	@ 0x88
 801b11c:	2200      	movs	r2, #0
 801b11e:	4628      	mov	r0, r5
 801b120:	f003 fa52 	bl	801e5c8 <rmw_validate_namespace>
 801b124:	4682      	mov	sl, r0
 801b126:	2800      	cmp	r0, #0
 801b128:	f040 80af 	bne.w	801b28a <rcl_node_init+0x20a>
 801b12c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b12e:	2800      	cmp	r0, #0
 801b130:	f040 80d5 	bne.w	801b2de <rcl_node_init+0x25e>
 801b134:	f8d8 3000 	ldr.w	r3, [r8]
 801b138:	2078      	movs	r0, #120	@ 0x78
 801b13a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b13e:	4798      	blx	r3
 801b140:	4682      	mov	sl, r0
 801b142:	6060      	str	r0, [r4, #4]
 801b144:	2800      	cmp	r0, #0
 801b146:	f000 80cf 	beq.w	801b2e8 <rcl_node_init+0x268>
 801b14a:	2200      	movs	r2, #0
 801b14c:	2300      	movs	r3, #0
 801b14e:	a808      	add	r0, sp, #32
 801b150:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801b154:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801b158:	f000 f902 	bl	801b360 <rcl_node_get_default_options>
 801b15c:	a908      	add	r1, sp, #32
 801b15e:	4650      	mov	r0, sl
 801b160:	2268      	movs	r2, #104	@ 0x68
 801b162:	f007 f9ec 	bl	802253e <memcpy>
 801b166:	6861      	ldr	r1, [r4, #4]
 801b168:	4640      	mov	r0, r8
 801b16a:	6027      	str	r7, [r4, #0]
 801b16c:	f000 f906 	bl	801b37c <rcl_node_options_copy>
 801b170:	2800      	cmp	r0, #0
 801b172:	d158      	bne.n	801b226 <rcl_node_init+0x1a6>
 801b174:	4628      	mov	r0, r5
 801b176:	f7e5 f8bd 	bl	80002f4 <strlen>
 801b17a:	4428      	add	r0, r5
 801b17c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801b180:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b184:	2b2f      	cmp	r3, #47	@ 0x2f
 801b186:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b18a:	9300      	str	r3, [sp, #0]
 801b18c:	bf0c      	ite	eq
 801b18e:	4b5d      	ldreq	r3, [pc, #372]	@ (801b304 <rcl_node_init+0x284>)
 801b190:	4b5d      	ldrne	r3, [pc, #372]	@ (801b308 <rcl_node_init+0x288>)
 801b192:	9302      	str	r3, [sp, #8]
 801b194:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b198:	9301      	str	r3, [sp, #4]
 801b19a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b19e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b1a2:	f002 fdc1 	bl	801dd28 <rcutils_format_string_limit>
 801b1a6:	6823      	ldr	r3, [r4, #0]
 801b1a8:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801b1ac:	4631      	mov	r1, r6
 801b1ae:	6818      	ldr	r0, [r3, #0]
 801b1b0:	462a      	mov	r2, r5
 801b1b2:	6866      	ldr	r6, [r4, #4]
 801b1b4:	3028      	adds	r0, #40	@ 0x28
 801b1b6:	f003 fe4b 	bl	801ee50 <rmw_create_node>
 801b1ba:	6863      	ldr	r3, [r4, #4]
 801b1bc:	66b0      	str	r0, [r6, #104]	@ 0x68
 801b1be:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b1c0:	2800      	cmp	r0, #0
 801b1c2:	d032      	beq.n	801b22a <rcl_node_init+0x1aa>
 801b1c4:	f003 fed4 	bl	801ef70 <rmw_node_get_graph_guard_condition>
 801b1c8:	4682      	mov	sl, r0
 801b1ca:	b360      	cbz	r0, 801b226 <rcl_node_init+0x1a6>
 801b1cc:	f8d8 3000 	ldr.w	r3, [r8]
 801b1d0:	2008      	movs	r0, #8
 801b1d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b1d6:	6866      	ldr	r6, [r4, #4]
 801b1d8:	4798      	blx	r3
 801b1da:	6863      	ldr	r3, [r4, #4]
 801b1dc:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801b1de:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801b1e2:	f1bb 0f00 	cmp.w	fp, #0
 801b1e6:	d020      	beq.n	801b22a <rcl_node_init+0x1aa>
 801b1e8:	a806      	add	r0, sp, #24
 801b1ea:	ae23      	add	r6, sp, #140	@ 0x8c
 801b1ec:	f006 f82a 	bl	8021244 <rcl_get_zero_initialized_guard_condition>
 801b1f0:	a806      	add	r0, sp, #24
 801b1f2:	6863      	ldr	r3, [r4, #4]
 801b1f4:	46c4      	mov	ip, r8
 801b1f6:	c803      	ldmia	r0, {r0, r1}
 801b1f8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801b1fc:	e88b 0003 	stmia.w	fp, {r0, r1}
 801b200:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b204:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b206:	f8dc 3000 	ldr.w	r3, [ip]
 801b20a:	6033      	str	r3, [r6, #0]
 801b20c:	ab28      	add	r3, sp, #160	@ 0xa0
 801b20e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801b212:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b216:	4651      	mov	r1, sl
 801b218:	463a      	mov	r2, r7
 801b21a:	4670      	mov	r0, lr
 801b21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b21e:	f006 f869 	bl	80212f4 <rcl_guard_condition_init_from_rmw>
 801b222:	4682      	mov	sl, r0
 801b224:	b328      	cbz	r0, 801b272 <rcl_node_init+0x1f2>
 801b226:	6863      	ldr	r3, [r4, #4]
 801b228:	b1f3      	cbz	r3, 801b268 <rcl_node_init+0x1e8>
 801b22a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b22c:	b128      	cbz	r0, 801b23a <rcl_node_init+0x1ba>
 801b22e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b232:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b236:	4798      	blx	r3
 801b238:	6863      	ldr	r3, [r4, #4]
 801b23a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b23c:	b110      	cbz	r0, 801b244 <rcl_node_init+0x1c4>
 801b23e:	f003 fe19 	bl	801ee74 <rmw_destroy_node>
 801b242:	6863      	ldr	r3, [r4, #4]
 801b244:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b246:	b148      	cbz	r0, 801b25c <rcl_node_init+0x1dc>
 801b248:	f006 f8b0 	bl	80213ac <rcl_guard_condition_fini>
 801b24c:	6863      	ldr	r3, [r4, #4]
 801b24e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b252:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b254:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b258:	4798      	blx	r3
 801b25a:	6863      	ldr	r3, [r4, #4]
 801b25c:	4618      	mov	r0, r3
 801b25e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b262:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b266:	4798      	blx	r3
 801b268:	2300      	movs	r3, #0
 801b26a:	f04f 0a01 	mov.w	sl, #1
 801b26e:	e9c4 3300 	strd	r3, r3, [r4]
 801b272:	f1b9 0f00 	cmp.w	r9, #0
 801b276:	d008      	beq.n	801b28a <rcl_node_init+0x20a>
 801b278:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b27c:	4628      	mov	r0, r5
 801b27e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b282:	4798      	blx	r3
 801b284:	e001      	b.n	801b28a <rcl_node_init+0x20a>
 801b286:	f04f 0a0b 	mov.w	sl, #11
 801b28a:	4650      	mov	r0, sl
 801b28c:	b029      	add	sp, #164	@ 0xa4
 801b28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b292:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801b296:	e7f8      	b.n	801b28a <rcl_node_init+0x20a>
 801b298:	782b      	ldrb	r3, [r5, #0]
 801b29a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b29c:	f43f af3d 	beq.w	801b11a <rcl_node_init+0x9a>
 801b2a0:	9503      	str	r5, [sp, #12]
 801b2a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b2a6:	9300      	str	r3, [sp, #0]
 801b2a8:	4b18      	ldr	r3, [pc, #96]	@ (801b30c <rcl_node_init+0x28c>)
 801b2aa:	9302      	str	r3, [sp, #8]
 801b2ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b2b0:	9301      	str	r3, [sp, #4]
 801b2b2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b2b6:	f002 fd37 	bl	801dd28 <rcutils_format_string_limit>
 801b2ba:	4605      	mov	r5, r0
 801b2bc:	b1e0      	cbz	r0, 801b2f8 <rcl_node_init+0x278>
 801b2be:	2200      	movs	r2, #0
 801b2c0:	a922      	add	r1, sp, #136	@ 0x88
 801b2c2:	9222      	str	r2, [sp, #136]	@ 0x88
 801b2c4:	f003 f980 	bl	801e5c8 <rmw_validate_namespace>
 801b2c8:	4682      	mov	sl, r0
 801b2ca:	2800      	cmp	r0, #0
 801b2cc:	d1d4      	bne.n	801b278 <rcl_node_init+0x1f8>
 801b2ce:	46d9      	mov	r9, fp
 801b2d0:	e72c      	b.n	801b12c <rcl_node_init+0xac>
 801b2d2:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801b2d6:	4650      	mov	r0, sl
 801b2d8:	b029      	add	sp, #164	@ 0xa4
 801b2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2de:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801b2e2:	f003 f983 	bl	801e5ec <rmw_namespace_validation_result_string>
 801b2e6:	e7c4      	b.n	801b272 <rcl_node_init+0x1f2>
 801b2e8:	f04f 0a0a 	mov.w	sl, #10
 801b2ec:	e7c1      	b.n	801b272 <rcl_node_init+0x1f2>
 801b2ee:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801b2f2:	f003 f9db 	bl	801e6ac <rmw_node_name_validation_result_string>
 801b2f6:	e7c8      	b.n	801b28a <rcl_node_init+0x20a>
 801b2f8:	f04f 0a0a 	mov.w	sl, #10
 801b2fc:	e7c5      	b.n	801b28a <rcl_node_init+0x20a>
 801b2fe:	bf00      	nop
 801b300:	08025384 	.word	0x08025384
 801b304:	08024a08 	.word	0x08024a08
 801b308:	0802538c 	.word	0x0802538c
 801b30c:	08025388 	.word	0x08025388

0801b310 <rcl_node_is_valid>:
 801b310:	b130      	cbz	r0, 801b320 <rcl_node_is_valid+0x10>
 801b312:	6843      	ldr	r3, [r0, #4]
 801b314:	b123      	cbz	r3, 801b320 <rcl_node_is_valid+0x10>
 801b316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b318:	b113      	cbz	r3, 801b320 <rcl_node_is_valid+0x10>
 801b31a:	6800      	ldr	r0, [r0, #0]
 801b31c:	f7ff bc18 	b.w	801ab50 <rcl_context_is_valid>
 801b320:	2000      	movs	r0, #0
 801b322:	4770      	bx	lr

0801b324 <rcl_node_get_name>:
 801b324:	b120      	cbz	r0, 801b330 <rcl_node_get_name+0xc>
 801b326:	6840      	ldr	r0, [r0, #4]
 801b328:	b110      	cbz	r0, 801b330 <rcl_node_get_name+0xc>
 801b32a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b32c:	b100      	cbz	r0, 801b330 <rcl_node_get_name+0xc>
 801b32e:	6880      	ldr	r0, [r0, #8]
 801b330:	4770      	bx	lr
 801b332:	bf00      	nop

0801b334 <rcl_node_get_namespace>:
 801b334:	b120      	cbz	r0, 801b340 <rcl_node_get_namespace+0xc>
 801b336:	6840      	ldr	r0, [r0, #4]
 801b338:	b110      	cbz	r0, 801b340 <rcl_node_get_namespace+0xc>
 801b33a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b33c:	b100      	cbz	r0, 801b340 <rcl_node_get_namespace+0xc>
 801b33e:	68c0      	ldr	r0, [r0, #12]
 801b340:	4770      	bx	lr
 801b342:	bf00      	nop

0801b344 <rcl_node_get_options>:
 801b344:	b128      	cbz	r0, 801b352 <rcl_node_get_options+0xe>
 801b346:	6840      	ldr	r0, [r0, #4]
 801b348:	b118      	cbz	r0, 801b352 <rcl_node_get_options+0xe>
 801b34a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	bf08      	it	eq
 801b350:	2000      	moveq	r0, #0
 801b352:	4770      	bx	lr

0801b354 <rcl_node_get_rmw_handle>:
 801b354:	b110      	cbz	r0, 801b35c <rcl_node_get_rmw_handle+0x8>
 801b356:	6840      	ldr	r0, [r0, #4]
 801b358:	b100      	cbz	r0, 801b35c <rcl_node_get_rmw_handle+0x8>
 801b35a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b35c:	4770      	bx	lr
 801b35e:	bf00      	nop

0801b360 <rcl_node_get_default_options>:
 801b360:	b510      	push	{r4, lr}
 801b362:	4604      	mov	r4, r0
 801b364:	2268      	movs	r2, #104	@ 0x68
 801b366:	2100      	movs	r1, #0
 801b368:	f006 ffca 	bl	8022300 <memset>
 801b36c:	4620      	mov	r0, r4
 801b36e:	f7fa f8b5 	bl	80154dc <rcutils_get_default_allocator>
 801b372:	2301      	movs	r3, #1
 801b374:	4620      	mov	r0, r4
 801b376:	7523      	strb	r3, [r4, #20]
 801b378:	bd10      	pop	{r4, pc}
 801b37a:	bf00      	nop

0801b37c <rcl_node_options_copy>:
 801b37c:	2800      	cmp	r0, #0
 801b37e:	bf18      	it	ne
 801b380:	4288      	cmpne	r0, r1
 801b382:	d01b      	beq.n	801b3bc <rcl_node_options_copy+0x40>
 801b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b386:	fab1 f681 	clz	r6, r1
 801b38a:	460c      	mov	r4, r1
 801b38c:	0976      	lsrs	r6, r6, #5
 801b38e:	b199      	cbz	r1, 801b3b8 <rcl_node_options_copy+0x3c>
 801b390:	4605      	mov	r5, r0
 801b392:	8a87      	ldrh	r7, [r0, #20]
 801b394:	4684      	mov	ip, r0
 801b396:	468e      	mov	lr, r1
 801b398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b39a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b39e:	682b      	ldr	r3, [r5, #0]
 801b3a0:	2250      	movs	r2, #80	@ 0x50
 801b3a2:	f10c 0118 	add.w	r1, ip, #24
 801b3a6:	f104 0018 	add.w	r0, r4, #24
 801b3aa:	f8ce 3000 	str.w	r3, [lr]
 801b3ae:	82a7      	strh	r7, [r4, #20]
 801b3b0:	f007 f8c5 	bl	802253e <memcpy>
 801b3b4:	4630      	mov	r0, r6
 801b3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3b8:	200b      	movs	r0, #11
 801b3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3bc:	200b      	movs	r0, #11
 801b3be:	4770      	bx	lr

0801b3c0 <rcl_node_resolve_name>:
 801b3c0:	b082      	sub	sp, #8
 801b3c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c6:	b091      	sub	sp, #68	@ 0x44
 801b3c8:	ac1a      	add	r4, sp, #104	@ 0x68
 801b3ca:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801b3ce:	e884 000c 	stmia.w	r4, {r2, r3}
 801b3d2:	2800      	cmp	r0, #0
 801b3d4:	d03d      	beq.n	801b452 <rcl_node_resolve_name+0x92>
 801b3d6:	460c      	mov	r4, r1
 801b3d8:	4605      	mov	r5, r0
 801b3da:	f7ff ffb3 	bl	801b344 <rcl_node_get_options>
 801b3de:	2800      	cmp	r0, #0
 801b3e0:	d03a      	beq.n	801b458 <rcl_node_resolve_name+0x98>
 801b3e2:	4628      	mov	r0, r5
 801b3e4:	f7ff ff9e 	bl	801b324 <rcl_node_get_name>
 801b3e8:	4606      	mov	r6, r0
 801b3ea:	4628      	mov	r0, r5
 801b3ec:	ad0b      	add	r5, sp, #44	@ 0x2c
 801b3ee:	f7ff ffa1 	bl	801b334 <rcl_node_get_namespace>
 801b3f2:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801b3f6:	4607      	mov	r7, r0
 801b3f8:	46ac      	mov	ip, r5
 801b3fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b402:	f8de 3000 	ldr.w	r3, [lr]
 801b406:	f8cc 3000 	str.w	r3, [ip]
 801b40a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b40c:	b30b      	cbz	r3, 801b452 <rcl_node_resolve_name+0x92>
 801b40e:	4689      	mov	r9, r1
 801b410:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801b414:	f002 fe00 	bl	801e018 <rcutils_get_zero_initialized_string_map>
 801b418:	ab10      	add	r3, sp, #64	@ 0x40
 801b41a:	9008      	str	r0, [sp, #32]
 801b41c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b420:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b424:	2100      	movs	r1, #0
 801b426:	a808      	add	r0, sp, #32
 801b428:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b42c:	f002 fe6a 	bl	801e104 <rcutils_string_map_init>
 801b430:	4683      	mov	fp, r0
 801b432:	b1a0      	cbz	r0, 801b45e <rcl_node_resolve_name+0x9e>
 801b434:	f7fa f86e 	bl	8015514 <rcutils_get_error_string>
 801b438:	f7fa f882 	bl	8015540 <rcutils_reset_error>
 801b43c:	f1bb 0f0a 	cmp.w	fp, #10
 801b440:	bf18      	it	ne
 801b442:	f04f 0b01 	movne.w	fp, #1
 801b446:	4658      	mov	r0, fp
 801b448:	b011      	add	sp, #68	@ 0x44
 801b44a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b44e:	b002      	add	sp, #8
 801b450:	4770      	bx	lr
 801b452:	f04f 0b0b 	mov.w	fp, #11
 801b456:	e7f6      	b.n	801b446 <rcl_node_resolve_name+0x86>
 801b458:	f04f 0b01 	mov.w	fp, #1
 801b45c:	e7f3      	b.n	801b446 <rcl_node_resolve_name+0x86>
 801b45e:	9009      	str	r0, [sp, #36]	@ 0x24
 801b460:	9007      	str	r0, [sp, #28]
 801b462:	a808      	add	r0, sp, #32
 801b464:	f005 fee8 	bl	8021238 <rcl_get_default_topic_name_substitutions>
 801b468:	4683      	mov	fp, r0
 801b46a:	b180      	cbz	r0, 801b48e <rcl_node_resolve_name+0xce>
 801b46c:	280a      	cmp	r0, #10
 801b46e:	a808      	add	r0, sp, #32
 801b470:	bf18      	it	ne
 801b472:	f04f 0b01 	movne.w	fp, #1
 801b476:	f002 fe85 	bl	801e184 <rcutils_string_map_fini>
 801b47a:	4604      	mov	r4, r0
 801b47c:	2800      	cmp	r0, #0
 801b47e:	d15b      	bne.n	801b538 <rcl_node_resolve_name+0x178>
 801b480:	4651      	mov	r1, sl
 801b482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b484:	47c8      	blx	r9
 801b486:	4651      	mov	r1, sl
 801b488:	4620      	mov	r0, r4
 801b48a:	47c8      	blx	r9
 801b48c:	e7db      	b.n	801b446 <rcl_node_resolve_name+0x86>
 801b48e:	ab09      	add	r3, sp, #36	@ 0x24
 801b490:	46ec      	mov	ip, sp
 801b492:	9305      	str	r3, [sp, #20]
 801b494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b49a:	682b      	ldr	r3, [r5, #0]
 801b49c:	463a      	mov	r2, r7
 801b49e:	4631      	mov	r1, r6
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	f8cc 3000 	str.w	r3, [ip]
 801b4a6:	ab08      	add	r3, sp, #32
 801b4a8:	f005 fd66 	bl	8020f78 <rcl_expand_topic_name>
 801b4ac:	4683      	mov	fp, r0
 801b4ae:	b9d8      	cbnz	r0, 801b4e8 <rcl_node_resolve_name+0x128>
 801b4b0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b4b2:	4602      	mov	r2, r0
 801b4b4:	9009      	str	r0, [sp, #36]	@ 0x24
 801b4b6:	a90a      	add	r1, sp, #40	@ 0x28
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f002 ffb5 	bl	801e428 <rmw_validate_full_topic_name>
 801b4be:	bb50      	cbnz	r0, 801b516 <rcl_node_resolve_name+0x156>
 801b4c0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b4c2:	2d00      	cmp	r5, #0
 801b4c4:	d140      	bne.n	801b548 <rcl_node_resolve_name+0x188>
 801b4c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b4c8:	a808      	add	r0, sp, #32
 801b4ca:	601c      	str	r4, [r3, #0]
 801b4cc:	f002 fe5a 	bl	801e184 <rcutils_string_map_fini>
 801b4d0:	4683      	mov	fp, r0
 801b4d2:	2800      	cmp	r0, #0
 801b4d4:	d043      	beq.n	801b55e <rcl_node_resolve_name+0x19e>
 801b4d6:	f7fa f81d 	bl	8015514 <rcutils_get_error_string>
 801b4da:	46a8      	mov	r8, r5
 801b4dc:	f04f 0b01 	mov.w	fp, #1
 801b4e0:	462c      	mov	r4, r5
 801b4e2:	f7fa f82d 	bl	8015540 <rcutils_reset_error>
 801b4e6:	e00a      	b.n	801b4fe <rcl_node_resolve_name+0x13e>
 801b4e8:	2867      	cmp	r0, #103	@ 0x67
 801b4ea:	bf14      	ite	ne
 801b4ec:	f04f 0800 	movne.w	r8, #0
 801b4f0:	f008 0801 	andeq.w	r8, r8, #1
 801b4f4:	9c07      	ldr	r4, [sp, #28]
 801b4f6:	a808      	add	r0, sp, #32
 801b4f8:	f002 fe44 	bl	801e184 <rcutils_string_map_fini>
 801b4fc:	bb50      	cbnz	r0, 801b554 <rcl_node_resolve_name+0x194>
 801b4fe:	4651      	mov	r1, sl
 801b500:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b502:	47c8      	blx	r9
 801b504:	4651      	mov	r1, sl
 801b506:	4620      	mov	r0, r4
 801b508:	47c8      	blx	r9
 801b50a:	f1b8 0f00 	cmp.w	r8, #0
 801b50e:	bf18      	it	ne
 801b510:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801b514:	e797      	b.n	801b446 <rcl_node_resolve_name+0x86>
 801b516:	f7f9 fffd 	bl	8015514 <rcutils_get_error_string>
 801b51a:	f7fa f811 	bl	8015540 <rcutils_reset_error>
 801b51e:	a808      	add	r0, sp, #32
 801b520:	f002 fe30 	bl	801e184 <rcutils_string_map_fini>
 801b524:	b998      	cbnz	r0, 801b54e <rcl_node_resolve_name+0x18e>
 801b526:	4651      	mov	r1, sl
 801b528:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b52a:	47c8      	blx	r9
 801b52c:	4651      	mov	r1, sl
 801b52e:	4620      	mov	r0, r4
 801b530:	f04f 0b01 	mov.w	fp, #1
 801b534:	47c8      	blx	r9
 801b536:	e786      	b.n	801b446 <rcl_node_resolve_name+0x86>
 801b538:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b53c:	f7f9 ffea 	bl	8015514 <rcutils_get_error_string>
 801b540:	f7f9 fffe 	bl	8015540 <rcutils_reset_error>
 801b544:	4644      	mov	r4, r8
 801b546:	e7da      	b.n	801b4fe <rcl_node_resolve_name+0x13e>
 801b548:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801b54c:	e7d3      	b.n	801b4f6 <rcl_node_resolve_name+0x136>
 801b54e:	46d8      	mov	r8, fp
 801b550:	f04f 0b01 	mov.w	fp, #1
 801b554:	f7f9 ffde 	bl	8015514 <rcutils_get_error_string>
 801b558:	f7f9 fff2 	bl	8015540 <rcutils_reset_error>
 801b55c:	e7cf      	b.n	801b4fe <rcl_node_resolve_name+0x13e>
 801b55e:	4651      	mov	r1, sl
 801b560:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b562:	47c8      	blx	r9
 801b564:	4651      	mov	r1, sl
 801b566:	4658      	mov	r0, fp
 801b568:	47c8      	blx	r9
 801b56a:	e76c      	b.n	801b446 <rcl_node_resolve_name+0x86>

0801b56c <exact_match_lookup>:
 801b56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b56e:	f102 0708 	add.w	r7, r2, #8
 801b572:	460b      	mov	r3, r1
 801b574:	b085      	sub	sp, #20
 801b576:	4614      	mov	r4, r2
 801b578:	4606      	mov	r6, r0
 801b57a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b57e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b582:	4618      	mov	r0, r3
 801b584:	4919      	ldr	r1, [pc, #100]	@ (801b5ec <exact_match_lookup+0x80>)
 801b586:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b58a:	f002 fbbf 	bl	801dd0c <rcutils_join_path>
 801b58e:	7833      	ldrb	r3, [r6, #0]
 801b590:	4605      	mov	r5, r0
 801b592:	2b2f      	cmp	r3, #47	@ 0x2f
 801b594:	d023      	beq.n	801b5de <exact_match_lookup+0x72>
 801b596:	f104 030c 	add.w	r3, r4, #12
 801b59a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b59e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b5a2:	1c70      	adds	r0, r6, #1
 801b5a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b5a8:	f002 fbb6 	bl	801dd18 <rcutils_to_native_path>
 801b5ac:	4606      	mov	r6, r0
 801b5ae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b5b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b5b6:	4631      	mov	r1, r6
 801b5b8:	4628      	mov	r0, r5
 801b5ba:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b5be:	f002 fba5 	bl	801dd0c <rcutils_join_path>
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	4630      	mov	r0, r6
 801b5c6:	6862      	ldr	r2, [r4, #4]
 801b5c8:	461e      	mov	r6, r3
 801b5ca:	6921      	ldr	r1, [r4, #16]
 801b5cc:	4790      	blx	r2
 801b5ce:	4628      	mov	r0, r5
 801b5d0:	4635      	mov	r5, r6
 801b5d2:	6863      	ldr	r3, [r4, #4]
 801b5d4:	6921      	ldr	r1, [r4, #16]
 801b5d6:	4798      	blx	r3
 801b5d8:	4628      	mov	r0, r5
 801b5da:	b005      	add	sp, #20
 801b5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5de:	7873      	ldrb	r3, [r6, #1]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d1d8      	bne.n	801b596 <exact_match_lookup+0x2a>
 801b5e4:	4628      	mov	r0, r5
 801b5e6:	b005      	add	sp, #20
 801b5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5ea:	bf00      	nop
 801b5ec:	080253d8 	.word	0x080253d8

0801b5f0 <rcl_get_secure_root>:
 801b5f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5f4:	b085      	sub	sp, #20
 801b5f6:	b168      	cbz	r0, 801b614 <rcl_get_secure_root+0x24>
 801b5f8:	4607      	mov	r7, r0
 801b5fa:	4608      	mov	r0, r1
 801b5fc:	460c      	mov	r4, r1
 801b5fe:	f7f9 ff7b 	bl	80154f8 <rcutils_allocator_is_valid>
 801b602:	b138      	cbz	r0, 801b614 <rcl_get_secure_root+0x24>
 801b604:	2300      	movs	r3, #0
 801b606:	482d      	ldr	r0, [pc, #180]	@ (801b6bc <rcl_get_secure_root+0xcc>)
 801b608:	a903      	add	r1, sp, #12
 801b60a:	9303      	str	r3, [sp, #12]
 801b60c:	f002 fb64 	bl	801dcd8 <rcutils_get_env>
 801b610:	4605      	mov	r5, r0
 801b612:	b120      	cbz	r0, 801b61e <rcl_get_secure_root+0x2e>
 801b614:	2500      	movs	r5, #0
 801b616:	4628      	mov	r0, r5
 801b618:	b005      	add	sp, #20
 801b61a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b61e:	9b03      	ldr	r3, [sp, #12]
 801b620:	781a      	ldrb	r2, [r3, #0]
 801b622:	2a00      	cmp	r2, #0
 801b624:	d0f6      	beq.n	801b614 <rcl_get_secure_root+0x24>
 801b626:	f104 090c 	add.w	r9, r4, #12
 801b62a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b62e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b632:	4618      	mov	r0, r3
 801b634:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b638:	f002 fcb0 	bl	801df9c <rcutils_strdup>
 801b63c:	4680      	mov	r8, r0
 801b63e:	2800      	cmp	r0, #0
 801b640:	d0e8      	beq.n	801b614 <rcl_get_secure_root+0x24>
 801b642:	a903      	add	r1, sp, #12
 801b644:	481e      	ldr	r0, [pc, #120]	@ (801b6c0 <rcl_get_secure_root+0xd0>)
 801b646:	9503      	str	r5, [sp, #12]
 801b648:	f002 fb46 	bl	801dcd8 <rcutils_get_env>
 801b64c:	b160      	cbz	r0, 801b668 <rcl_get_secure_root+0x78>
 801b64e:	2600      	movs	r6, #0
 801b650:	4630      	mov	r0, r6
 801b652:	6863      	ldr	r3, [r4, #4]
 801b654:	6921      	ldr	r1, [r4, #16]
 801b656:	4798      	blx	r3
 801b658:	4640      	mov	r0, r8
 801b65a:	6863      	ldr	r3, [r4, #4]
 801b65c:	6921      	ldr	r1, [r4, #16]
 801b65e:	4798      	blx	r3
 801b660:	4628      	mov	r0, r5
 801b662:	b005      	add	sp, #20
 801b664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b668:	9b03      	ldr	r3, [sp, #12]
 801b66a:	781e      	ldrb	r6, [r3, #0]
 801b66c:	b1f6      	cbz	r6, 801b6ac <rcl_get_secure_root+0xbc>
 801b66e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b672:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b676:	4618      	mov	r0, r3
 801b678:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b67c:	f002 fc8e 	bl	801df9c <rcutils_strdup>
 801b680:	4606      	mov	r6, r0
 801b682:	2800      	cmp	r0, #0
 801b684:	d0e3      	beq.n	801b64e <rcl_get_secure_root+0x5e>
 801b686:	4622      	mov	r2, r4
 801b688:	4641      	mov	r1, r8
 801b68a:	f7ff ff6f 	bl	801b56c <exact_match_lookup>
 801b68e:	4605      	mov	r5, r0
 801b690:	2d00      	cmp	r5, #0
 801b692:	d0dd      	beq.n	801b650 <rcl_get_secure_root+0x60>
 801b694:	4628      	mov	r0, r5
 801b696:	f002 fb37 	bl	801dd08 <rcutils_is_directory>
 801b69a:	4603      	mov	r3, r0
 801b69c:	2800      	cmp	r0, #0
 801b69e:	d1d7      	bne.n	801b650 <rcl_get_secure_root+0x60>
 801b6a0:	4628      	mov	r0, r5
 801b6a2:	6921      	ldr	r1, [r4, #16]
 801b6a4:	461d      	mov	r5, r3
 801b6a6:	6863      	ldr	r3, [r4, #4]
 801b6a8:	4798      	blx	r3
 801b6aa:	e7d1      	b.n	801b650 <rcl_get_secure_root+0x60>
 801b6ac:	4622      	mov	r2, r4
 801b6ae:	4638      	mov	r0, r7
 801b6b0:	4641      	mov	r1, r8
 801b6b2:	f7ff ff5b 	bl	801b56c <exact_match_lookup>
 801b6b6:	4605      	mov	r5, r0
 801b6b8:	e7ea      	b.n	801b690 <rcl_get_secure_root+0xa0>
 801b6ba:	bf00      	nop
 801b6bc:	080253e4 	.word	0x080253e4
 801b6c0:	080253fc 	.word	0x080253fc

0801b6c4 <rcl_get_security_options_from_environment>:
 801b6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c8:	b082      	sub	sp, #8
 801b6ca:	2300      	movs	r3, #0
 801b6cc:	4606      	mov	r6, r0
 801b6ce:	460f      	mov	r7, r1
 801b6d0:	4821      	ldr	r0, [pc, #132]	@ (801b758 <rcl_get_security_options_from_environment+0x94>)
 801b6d2:	a901      	add	r1, sp, #4
 801b6d4:	4690      	mov	r8, r2
 801b6d6:	9301      	str	r3, [sp, #4]
 801b6d8:	f002 fafe 	bl	801dcd8 <rcutils_get_env>
 801b6dc:	b120      	cbz	r0, 801b6e8 <rcl_get_security_options_from_environment+0x24>
 801b6de:	2501      	movs	r5, #1
 801b6e0:	4628      	mov	r0, r5
 801b6e2:	b002      	add	sp, #8
 801b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e8:	4604      	mov	r4, r0
 801b6ea:	491c      	ldr	r1, [pc, #112]	@ (801b75c <rcl_get_security_options_from_environment+0x98>)
 801b6ec:	9801      	ldr	r0, [sp, #4]
 801b6ee:	f7e4 fdf7 	bl	80002e0 <strcmp>
 801b6f2:	4605      	mov	r5, r0
 801b6f4:	b9f0      	cbnz	r0, 801b734 <rcl_get_security_options_from_environment+0x70>
 801b6f6:	9001      	str	r0, [sp, #4]
 801b6f8:	f1b8 0f00 	cmp.w	r8, #0
 801b6fc:	d021      	beq.n	801b742 <rcl_get_security_options_from_environment+0x7e>
 801b6fe:	a901      	add	r1, sp, #4
 801b700:	4817      	ldr	r0, [pc, #92]	@ (801b760 <rcl_get_security_options_from_environment+0x9c>)
 801b702:	f002 fae9 	bl	801dcd8 <rcutils_get_env>
 801b706:	2800      	cmp	r0, #0
 801b708:	d1e9      	bne.n	801b6de <rcl_get_security_options_from_environment+0x1a>
 801b70a:	4916      	ldr	r1, [pc, #88]	@ (801b764 <rcl_get_security_options_from_environment+0xa0>)
 801b70c:	9801      	ldr	r0, [sp, #4]
 801b70e:	f7e4 fde7 	bl	80002e0 <strcmp>
 801b712:	4603      	mov	r3, r0
 801b714:	4639      	mov	r1, r7
 801b716:	4630      	mov	r0, r6
 801b718:	fab3 f383 	clz	r3, r3
 801b71c:	095b      	lsrs	r3, r3, #5
 801b71e:	f888 3000 	strb.w	r3, [r8]
 801b722:	f7ff ff65 	bl	801b5f0 <rcl_get_secure_root>
 801b726:	b170      	cbz	r0, 801b746 <rcl_get_security_options_from_environment+0x82>
 801b728:	f8c8 0004 	str.w	r0, [r8, #4]
 801b72c:	4628      	mov	r0, r5
 801b72e:	b002      	add	sp, #8
 801b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b734:	4625      	mov	r5, r4
 801b736:	f888 4000 	strb.w	r4, [r8]
 801b73a:	4628      	mov	r0, r5
 801b73c:	b002      	add	sp, #8
 801b73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b742:	250b      	movs	r5, #11
 801b744:	e7cc      	b.n	801b6e0 <rcl_get_security_options_from_environment+0x1c>
 801b746:	f898 5000 	ldrb.w	r5, [r8]
 801b74a:	f1a5 0501 	sub.w	r5, r5, #1
 801b74e:	fab5 f585 	clz	r5, r5
 801b752:	096d      	lsrs	r5, r5, #5
 801b754:	e7c4      	b.n	801b6e0 <rcl_get_security_options_from_environment+0x1c>
 801b756:	bf00      	nop
 801b758:	0802539c 	.word	0x0802539c
 801b75c:	080253b0 	.word	0x080253b0
 801b760:	080253b8 	.word	0x080253b8
 801b764:	080253d0 	.word	0x080253d0

0801b768 <rcl_get_zero_initialized_service>:
 801b768:	4b01      	ldr	r3, [pc, #4]	@ (801b770 <rcl_get_zero_initialized_service+0x8>)
 801b76a:	6818      	ldr	r0, [r3, #0]
 801b76c:	4770      	bx	lr
 801b76e:	bf00      	nop
 801b770:	0802541c 	.word	0x0802541c

0801b774 <rcl_service_init>:
 801b774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b778:	b088      	sub	sp, #32
 801b77a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b77c:	b1ff      	cbz	r7, 801b7be <rcl_service_init+0x4a>
 801b77e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b782:	4605      	mov	r5, r0
 801b784:	460e      	mov	r6, r1
 801b786:	4691      	mov	r9, r2
 801b788:	4650      	mov	r0, sl
 801b78a:	4698      	mov	r8, r3
 801b78c:	f7f9 feb4 	bl	80154f8 <rcutils_allocator_is_valid>
 801b790:	f080 0401 	eor.w	r4, r0, #1
 801b794:	b2e4      	uxtb	r4, r4
 801b796:	b994      	cbnz	r4, 801b7be <rcl_service_init+0x4a>
 801b798:	b18d      	cbz	r5, 801b7be <rcl_service_init+0x4a>
 801b79a:	4630      	mov	r0, r6
 801b79c:	f7ff fdb8 	bl	801b310 <rcl_node_is_valid>
 801b7a0:	2800      	cmp	r0, #0
 801b7a2:	d05d      	beq.n	801b860 <rcl_service_init+0xec>
 801b7a4:	f1b8 0f00 	cmp.w	r8, #0
 801b7a8:	d009      	beq.n	801b7be <rcl_service_init+0x4a>
 801b7aa:	f1b9 0f00 	cmp.w	r9, #0
 801b7ae:	d006      	beq.n	801b7be <rcl_service_init+0x4a>
 801b7b0:	682b      	ldr	r3, [r5, #0]
 801b7b2:	b14b      	cbz	r3, 801b7c8 <rcl_service_init+0x54>
 801b7b4:	2464      	movs	r4, #100	@ 0x64
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	b008      	add	sp, #32
 801b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7be:	240b      	movs	r4, #11
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	b008      	add	sp, #32
 801b7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7c8:	aa07      	add	r2, sp, #28
 801b7ca:	9304      	str	r3, [sp, #16]
 801b7cc:	9307      	str	r3, [sp, #28]
 801b7ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b7d2:	9205      	str	r2, [sp, #20]
 801b7d4:	2201      	movs	r2, #1
 801b7d6:	9203      	str	r2, [sp, #12]
 801b7d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b7dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b7e0:	4641      	mov	r1, r8
 801b7e2:	4630      	mov	r0, r6
 801b7e4:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b7e8:	f7ff fdea 	bl	801b3c0 <rcl_node_resolve_name>
 801b7ec:	2800      	cmp	r0, #0
 801b7ee:	d146      	bne.n	801b87e <rcl_service_init+0x10a>
 801b7f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b7f2:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801b7f6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b7f8:	4798      	blx	r3
 801b7fa:	6028      	str	r0, [r5, #0]
 801b7fc:	2800      	cmp	r0, #0
 801b7fe:	d046      	beq.n	801b88e <rcl_service_init+0x11a>
 801b800:	4630      	mov	r0, r6
 801b802:	f7ff fda7 	bl	801b354 <rcl_node_get_rmw_handle>
 801b806:	463b      	mov	r3, r7
 801b808:	4649      	mov	r1, r9
 801b80a:	9a07      	ldr	r2, [sp, #28]
 801b80c:	682c      	ldr	r4, [r5, #0]
 801b80e:	f003 fd05 	bl	801f21c <rmw_create_service>
 801b812:	682b      	ldr	r3, [r5, #0]
 801b814:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 801b818:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b81c:	b338      	cbz	r0, 801b86e <rcl_service_init+0xfa>
 801b81e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801b822:	f003 fe2d 	bl	801f480 <rmw_service_request_subscription_get_actual_qos>
 801b826:	bb00      	cbnz	r0, 801b86a <rcl_service_init+0xf6>
 801b828:	682b      	ldr	r3, [r5, #0]
 801b82a:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801b82e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b832:	f003 fe11 	bl	801f458 <rmw_service_response_publisher_get_actual_qos>
 801b836:	4604      	mov	r4, r0
 801b838:	b9b8      	cbnz	r0, 801b86a <rcl_service_init+0xf6>
 801b83a:	6828      	ldr	r0, [r5, #0]
 801b83c:	2268      	movs	r2, #104	@ 0x68
 801b83e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b842:	4639      	mov	r1, r7
 801b844:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 801b848:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 801b84c:	f006 fe77 	bl	802253e <memcpy>
 801b850:	9807      	ldr	r0, [sp, #28]
 801b852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b854:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b856:	4798      	blx	r3
 801b858:	4620      	mov	r0, r4
 801b85a:	b008      	add	sp, #32
 801b85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b860:	24c8      	movs	r4, #200	@ 0xc8
 801b862:	4620      	mov	r0, r4
 801b864:	b008      	add	sp, #32
 801b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b86a:	682b      	ldr	r3, [r5, #0]
 801b86c:	b16b      	cbz	r3, 801b88a <rcl_service_init+0x116>
 801b86e:	4618      	mov	r0, r3
 801b870:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b872:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b874:	2401      	movs	r4, #1
 801b876:	4790      	blx	r2
 801b878:	2300      	movs	r3, #0
 801b87a:	602b      	str	r3, [r5, #0]
 801b87c:	e7e8      	b.n	801b850 <rcl_service_init+0xdc>
 801b87e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801b882:	2b01      	cmp	r3, #1
 801b884:	d905      	bls.n	801b892 <rcl_service_init+0x11e>
 801b886:	280a      	cmp	r0, #10
 801b888:	d001      	beq.n	801b88e <rcl_service_init+0x11a>
 801b88a:	2401      	movs	r4, #1
 801b88c:	e7e0      	b.n	801b850 <rcl_service_init+0xdc>
 801b88e:	240a      	movs	r4, #10
 801b890:	e7de      	b.n	801b850 <rcl_service_init+0xdc>
 801b892:	2468      	movs	r4, #104	@ 0x68
 801b894:	e7dc      	b.n	801b850 <rcl_service_init+0xdc>
 801b896:	bf00      	nop

0801b898 <rcl_service_get_default_options>:
 801b898:	b530      	push	{r4, r5, lr}
 801b89a:	4d0f      	ldr	r5, [pc, #60]	@ (801b8d8 <rcl_service_get_default_options+0x40>)
 801b89c:	b087      	sub	sp, #28
 801b89e:	4604      	mov	r4, r0
 801b8a0:	2250      	movs	r2, #80	@ 0x50
 801b8a2:	490e      	ldr	r1, [pc, #56]	@ (801b8dc <rcl_service_get_default_options+0x44>)
 801b8a4:	4628      	mov	r0, r5
 801b8a6:	f006 fe4a 	bl	802253e <memcpy>
 801b8aa:	4668      	mov	r0, sp
 801b8ac:	f7f9 fe16 	bl	80154dc <rcutils_get_default_allocator>
 801b8b0:	46ec      	mov	ip, sp
 801b8b2:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801b8b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b8ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b8be:	f8dc 3000 	ldr.w	r3, [ip]
 801b8c2:	2268      	movs	r2, #104	@ 0x68
 801b8c4:	4629      	mov	r1, r5
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	f8ce 3000 	str.w	r3, [lr]
 801b8cc:	f006 fe37 	bl	802253e <memcpy>
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	b007      	add	sp, #28
 801b8d4:	bd30      	pop	{r4, r5, pc}
 801b8d6:	bf00      	nop
 801b8d8:	24069280 	.word	0x24069280
 801b8dc:	08025420 	.word	0x08025420

0801b8e0 <rcl_service_get_rmw_handle>:
 801b8e0:	b118      	cbz	r0, 801b8ea <rcl_service_get_rmw_handle+0xa>
 801b8e2:	6800      	ldr	r0, [r0, #0]
 801b8e4:	b108      	cbz	r0, 801b8ea <rcl_service_get_rmw_handle+0xa>
 801b8e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b8ea:	4770      	bx	lr

0801b8ec <rcl_take_request>:
 801b8ec:	b570      	push	{r4, r5, r6, lr}
 801b8ee:	468e      	mov	lr, r1
 801b8f0:	b08c      	sub	sp, #48	@ 0x30
 801b8f2:	460c      	mov	r4, r1
 801b8f4:	4616      	mov	r6, r2
 801b8f6:	f10d 0c18 	add.w	ip, sp, #24
 801b8fa:	4605      	mov	r5, r0
 801b8fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b900:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b904:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b908:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b90c:	b30d      	cbz	r5, 801b952 <rcl_take_request+0x66>
 801b90e:	682b      	ldr	r3, [r5, #0]
 801b910:	b1fb      	cbz	r3, 801b952 <rcl_take_request+0x66>
 801b912:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b916:	b1e0      	cbz	r0, 801b952 <rcl_take_request+0x66>
 801b918:	b336      	cbz	r6, 801b968 <rcl_take_request+0x7c>
 801b91a:	2300      	movs	r3, #0
 801b91c:	4632      	mov	r2, r6
 801b91e:	a902      	add	r1, sp, #8
 801b920:	f88d 3007 	strb.w	r3, [sp, #7]
 801b924:	f10d 0307 	add.w	r3, sp, #7
 801b928:	f003 fb76 	bl	801f018 <rmw_take_request>
 801b92c:	4605      	mov	r5, r0
 801b92e:	b198      	cbz	r0, 801b958 <rcl_take_request+0x6c>
 801b930:	280a      	cmp	r0, #10
 801b932:	bf18      	it	ne
 801b934:	2501      	movne	r5, #1
 801b936:	f10d 0e18 	add.w	lr, sp, #24
 801b93a:	46a4      	mov	ip, r4
 801b93c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b944:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b948:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b94c:	4628      	mov	r0, r5
 801b94e:	b00c      	add	sp, #48	@ 0x30
 801b950:	bd70      	pop	{r4, r5, r6, pc}
 801b952:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801b956:	e7ee      	b.n	801b936 <rcl_take_request+0x4a>
 801b958:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b95c:	f240 2359 	movw	r3, #601	@ 0x259
 801b960:	2a00      	cmp	r2, #0
 801b962:	bf08      	it	eq
 801b964:	461d      	moveq	r5, r3
 801b966:	e7e6      	b.n	801b936 <rcl_take_request+0x4a>
 801b968:	250b      	movs	r5, #11
 801b96a:	e7e4      	b.n	801b936 <rcl_take_request+0x4a>

0801b96c <rcl_send_response>:
 801b96c:	b170      	cbz	r0, 801b98c <rcl_send_response+0x20>
 801b96e:	6800      	ldr	r0, [r0, #0]
 801b970:	b160      	cbz	r0, 801b98c <rcl_send_response+0x20>
 801b972:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b976:	b148      	cbz	r0, 801b98c <rcl_send_response+0x20>
 801b978:	b169      	cbz	r1, 801b996 <rcl_send_response+0x2a>
 801b97a:	b510      	push	{r4, lr}
 801b97c:	b14a      	cbz	r2, 801b992 <rcl_send_response+0x26>
 801b97e:	f003 fba9 	bl	801f0d4 <rmw_send_response>
 801b982:	b110      	cbz	r0, 801b98a <rcl_send_response+0x1e>
 801b984:	2802      	cmp	r0, #2
 801b986:	bf18      	it	ne
 801b988:	2001      	movne	r0, #1
 801b98a:	bd10      	pop	{r4, pc}
 801b98c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801b990:	4770      	bx	lr
 801b992:	200b      	movs	r0, #11
 801b994:	bd10      	pop	{r4, pc}
 801b996:	200b      	movs	r0, #11
 801b998:	4770      	bx	lr
 801b99a:	bf00      	nop

0801b99c <rcl_service_is_valid>:
 801b99c:	b130      	cbz	r0, 801b9ac <rcl_service_is_valid+0x10>
 801b99e:	6800      	ldr	r0, [r0, #0]
 801b9a0:	b120      	cbz	r0, 801b9ac <rcl_service_is_valid+0x10>
 801b9a2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b9a6:	3800      	subs	r0, #0
 801b9a8:	bf18      	it	ne
 801b9aa:	2001      	movne	r0, #1
 801b9ac:	4770      	bx	lr
 801b9ae:	bf00      	nop

0801b9b0 <rcl_get_zero_initialized_subscription>:
 801b9b0:	4b01      	ldr	r3, [pc, #4]	@ (801b9b8 <rcl_get_zero_initialized_subscription+0x8>)
 801b9b2:	6818      	ldr	r0, [r3, #0]
 801b9b4:	4770      	bx	lr
 801b9b6:	bf00      	nop
 801b9b8:	08025470 	.word	0x08025470

0801b9bc <rcl_subscription_init>:
 801b9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9c0:	b088      	sub	sp, #32
 801b9c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b9c4:	b1ff      	cbz	r7, 801ba06 <rcl_subscription_init+0x4a>
 801b9c6:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b9ca:	4605      	mov	r5, r0
 801b9cc:	460e      	mov	r6, r1
 801b9ce:	4691      	mov	r9, r2
 801b9d0:	4650      	mov	r0, sl
 801b9d2:	4698      	mov	r8, r3
 801b9d4:	f7f9 fd90 	bl	80154f8 <rcutils_allocator_is_valid>
 801b9d8:	f080 0401 	eor.w	r4, r0, #1
 801b9dc:	b2e4      	uxtb	r4, r4
 801b9de:	b994      	cbnz	r4, 801ba06 <rcl_subscription_init+0x4a>
 801b9e0:	b18d      	cbz	r5, 801ba06 <rcl_subscription_init+0x4a>
 801b9e2:	4630      	mov	r0, r6
 801b9e4:	f7ff fc94 	bl	801b310 <rcl_node_is_valid>
 801b9e8:	2800      	cmp	r0, #0
 801b9ea:	d055      	beq.n	801ba98 <rcl_subscription_init+0xdc>
 801b9ec:	f1b9 0f00 	cmp.w	r9, #0
 801b9f0:	d009      	beq.n	801ba06 <rcl_subscription_init+0x4a>
 801b9f2:	f1b8 0f00 	cmp.w	r8, #0
 801b9f6:	d006      	beq.n	801ba06 <rcl_subscription_init+0x4a>
 801b9f8:	682b      	ldr	r3, [r5, #0]
 801b9fa:	b14b      	cbz	r3, 801ba10 <rcl_subscription_init+0x54>
 801b9fc:	2464      	movs	r4, #100	@ 0x64
 801b9fe:	4620      	mov	r0, r4
 801ba00:	b008      	add	sp, #32
 801ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba06:	240b      	movs	r4, #11
 801ba08:	4620      	mov	r0, r4
 801ba0a:	b008      	add	sp, #32
 801ba0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba10:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801ba14:	aa07      	add	r2, sp, #28
 801ba16:	9307      	str	r3, [sp, #28]
 801ba18:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801ba1c:	9205      	str	r2, [sp, #20]
 801ba1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ba22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ba26:	4641      	mov	r1, r8
 801ba28:	4630      	mov	r0, r6
 801ba2a:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801ba2e:	f7ff fcc7 	bl	801b3c0 <rcl_node_resolve_name>
 801ba32:	2800      	cmp	r0, #0
 801ba34:	d15f      	bne.n	801baf6 <rcl_subscription_init+0x13a>
 801ba36:	21c8      	movs	r1, #200	@ 0xc8
 801ba38:	2001      	movs	r0, #1
 801ba3a:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801ba3e:	4798      	blx	r3
 801ba40:	6028      	str	r0, [r5, #0]
 801ba42:	2800      	cmp	r0, #0
 801ba44:	d05f      	beq.n	801bb06 <rcl_subscription_init+0x14a>
 801ba46:	4630      	mov	r0, r6
 801ba48:	f7ff fc84 	bl	801b354 <rcl_node_get_rmw_handle>
 801ba4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ba50:	4649      	mov	r1, r9
 801ba52:	9a07      	ldr	r2, [sp, #28]
 801ba54:	9300      	str	r3, [sp, #0]
 801ba56:	463b      	mov	r3, r7
 801ba58:	682c      	ldr	r4, [r5, #0]
 801ba5a:	f003 fd25 	bl	801f4a8 <rmw_create_subscription>
 801ba5e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801ba62:	682c      	ldr	r4, [r5, #0]
 801ba64:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801ba68:	b348      	cbz	r0, 801babe <rcl_subscription_init+0x102>
 801ba6a:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801ba6e:	f003 fe11 	bl	801f694 <rmw_subscription_get_actual_qos>
 801ba72:	4604      	mov	r4, r0
 801ba74:	b9a8      	cbnz	r0, 801baa2 <rcl_subscription_init+0xe6>
 801ba76:	6828      	ldr	r0, [r5, #0]
 801ba78:	2270      	movs	r2, #112	@ 0x70
 801ba7a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801ba7e:	4639      	mov	r1, r7
 801ba80:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801ba84:	f006 fd5b 	bl	802253e <memcpy>
 801ba88:	9807      	ldr	r0, [sp, #28]
 801ba8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba8c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801ba8e:	4798      	blx	r3
 801ba90:	4620      	mov	r0, r4
 801ba92:	b008      	add	sp, #32
 801ba94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba98:	24c8      	movs	r4, #200	@ 0xc8
 801ba9a:	4620      	mov	r0, r4
 801ba9c:	b008      	add	sp, #32
 801ba9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801baa2:	682c      	ldr	r4, [r5, #0]
 801baa4:	b36c      	cbz	r4, 801bb02 <rcl_subscription_init+0x146>
 801baa6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801baaa:	b14b      	cbz	r3, 801bac0 <rcl_subscription_init+0x104>
 801baac:	4630      	mov	r0, r6
 801baae:	f7ff fc51 	bl	801b354 <rcl_node_get_rmw_handle>
 801bab2:	682b      	ldr	r3, [r5, #0]
 801bab4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801bab8:	f003 fe00 	bl	801f6bc <rmw_destroy_subscription>
 801babc:	682c      	ldr	r4, [r5, #0]
 801babe:	b194      	cbz	r4, 801bae6 <rcl_subscription_init+0x12a>
 801bac0:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801bac4:	4630      	mov	r0, r6
 801bac6:	f7f9 fd17 	bl	80154f8 <rcutils_allocator_is_valid>
 801baca:	b158      	cbz	r0, 801bae4 <rcl_subscription_init+0x128>
 801bacc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801bace:	b148      	cbz	r0, 801bae4 <rcl_subscription_init+0x128>
 801bad0:	4631      	mov	r1, r6
 801bad2:	f002 fbf9 	bl	801e2c8 <rmw_subscription_content_filter_options_fini>
 801bad6:	4606      	mov	r6, r0
 801bad8:	b9c8      	cbnz	r0, 801bb0e <rcl_subscription_init+0x152>
 801bada:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801badc:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801bade:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801bae0:	4798      	blx	r3
 801bae2:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801bae4:	682c      	ldr	r4, [r5, #0]
 801bae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bae8:	4620      	mov	r0, r4
 801baea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801baec:	2401      	movs	r4, #1
 801baee:	4798      	blx	r3
 801baf0:	2300      	movs	r3, #0
 801baf2:	602b      	str	r3, [r5, #0]
 801baf4:	e7c8      	b.n	801ba88 <rcl_subscription_init+0xcc>
 801baf6:	2867      	cmp	r0, #103	@ 0x67
 801baf8:	d007      	beq.n	801bb0a <rcl_subscription_init+0x14e>
 801bafa:	2869      	cmp	r0, #105	@ 0x69
 801bafc:	d005      	beq.n	801bb0a <rcl_subscription_init+0x14e>
 801bafe:	280a      	cmp	r0, #10
 801bb00:	d001      	beq.n	801bb06 <rcl_subscription_init+0x14a>
 801bb02:	2401      	movs	r4, #1
 801bb04:	e7c0      	b.n	801ba88 <rcl_subscription_init+0xcc>
 801bb06:	240a      	movs	r4, #10
 801bb08:	e7be      	b.n	801ba88 <rcl_subscription_init+0xcc>
 801bb0a:	2467      	movs	r4, #103	@ 0x67
 801bb0c:	e7bc      	b.n	801ba88 <rcl_subscription_init+0xcc>
 801bb0e:	f7ff f801 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 801bb12:	682c      	ldr	r4, [r5, #0]
 801bb14:	e7e7      	b.n	801bae6 <rcl_subscription_init+0x12a>
 801bb16:	bf00      	nop

0801bb18 <rcl_subscription_get_default_options>:
 801bb18:	b570      	push	{r4, r5, r6, lr}
 801bb1a:	4d14      	ldr	r5, [pc, #80]	@ (801bb6c <rcl_subscription_get_default_options+0x54>)
 801bb1c:	b08a      	sub	sp, #40	@ 0x28
 801bb1e:	4604      	mov	r4, r0
 801bb20:	2250      	movs	r2, #80	@ 0x50
 801bb22:	4913      	ldr	r1, [pc, #76]	@ (801bb70 <rcl_subscription_get_default_options+0x58>)
 801bb24:	4628      	mov	r0, r5
 801bb26:	f006 fd0a 	bl	802253e <memcpy>
 801bb2a:	a804      	add	r0, sp, #16
 801bb2c:	f7f9 fcd6 	bl	80154dc <rcutils_get_default_allocator>
 801bb30:	f10d 0c10 	add.w	ip, sp, #16
 801bb34:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801bb38:	466e      	mov	r6, sp
 801bb3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb42:	f8dc 3000 	ldr.w	r3, [ip]
 801bb46:	4630      	mov	r0, r6
 801bb48:	f8ce 3000 	str.w	r3, [lr]
 801bb4c:	f002 fbd6 	bl	801e2fc <rmw_get_default_subscription_options>
 801bb50:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801bb54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801bb58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bb5c:	2270      	movs	r2, #112	@ 0x70
 801bb5e:	4629      	mov	r1, r5
 801bb60:	4620      	mov	r0, r4
 801bb62:	f006 fcec 	bl	802253e <memcpy>
 801bb66:	4620      	mov	r0, r4
 801bb68:	b00a      	add	sp, #40	@ 0x28
 801bb6a:	bd70      	pop	{r4, r5, r6, pc}
 801bb6c:	240692e8 	.word	0x240692e8
 801bb70:	08025478 	.word	0x08025478

0801bb74 <rcl_take>:
 801bb74:	2800      	cmp	r0, #0
 801bb76:	d049      	beq.n	801bc0c <rcl_take+0x98>
 801bb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb7c:	4615      	mov	r5, r2
 801bb7e:	6802      	ldr	r2, [r0, #0]
 801bb80:	b0a4      	sub	sp, #144	@ 0x90
 801bb82:	4604      	mov	r4, r0
 801bb84:	2a00      	cmp	r2, #0
 801bb86:	d039      	beq.n	801bbfc <rcl_take+0x88>
 801bb88:	461f      	mov	r7, r3
 801bb8a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801bb8e:	b3ab      	cbz	r3, 801bbfc <rcl_take+0x88>
 801bb90:	460e      	mov	r6, r1
 801bb92:	2900      	cmp	r1, #0
 801bb94:	d038      	beq.n	801bc08 <rcl_take+0x94>
 801bb96:	2d00      	cmp	r5, #0
 801bb98:	d03c      	beq.n	801bc14 <rcl_take+0xa0>
 801bb9a:	a802      	add	r0, sp, #8
 801bb9c:	f04f 0800 	mov.w	r8, #0
 801bba0:	f002 fc3a 	bl	801e418 <rmw_get_zero_initialized_message_info>
 801bba4:	f10d 0c08 	add.w	ip, sp, #8
 801bba8:	46ae      	mov	lr, r5
 801bbaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bbb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bbba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bbc2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801bbc6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801bbca:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801bbce:	462b      	mov	r3, r5
 801bbd0:	6820      	ldr	r0, [r4, #0]
 801bbd2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801bbd6:	4631      	mov	r1, r6
 801bbd8:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bbdc:	9700      	str	r7, [sp, #0]
 801bbde:	f003 fdcf 	bl	801f780 <rmw_take_with_info>
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	b9c0      	cbnz	r0, 801bc18 <rcl_take+0xa4>
 801bbe6:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801bbea:	f240 1291 	movw	r2, #401	@ 0x191
 801bbee:	2900      	cmp	r1, #0
 801bbf0:	bf08      	it	eq
 801bbf2:	4613      	moveq	r3, r2
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	b024      	add	sp, #144	@ 0x90
 801bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbfc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bc00:	4618      	mov	r0, r3
 801bc02:	b024      	add	sp, #144	@ 0x90
 801bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc08:	230b      	movs	r3, #11
 801bc0a:	e7f3      	b.n	801bbf4 <rcl_take+0x80>
 801bc0c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bc10:	4618      	mov	r0, r3
 801bc12:	4770      	bx	lr
 801bc14:	ad14      	add	r5, sp, #80	@ 0x50
 801bc16:	e7c0      	b.n	801bb9a <rcl_take+0x26>
 801bc18:	f7fe ff7c 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 801bc1c:	4603      	mov	r3, r0
 801bc1e:	e7e9      	b.n	801bbf4 <rcl_take+0x80>

0801bc20 <rcl_subscription_get_rmw_handle>:
 801bc20:	b118      	cbz	r0, 801bc2a <rcl_subscription_get_rmw_handle+0xa>
 801bc22:	6800      	ldr	r0, [r0, #0]
 801bc24:	b108      	cbz	r0, 801bc2a <rcl_subscription_get_rmw_handle+0xa>
 801bc26:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bc2a:	4770      	bx	lr

0801bc2c <rcl_subscription_is_valid>:
 801bc2c:	b130      	cbz	r0, 801bc3c <rcl_subscription_is_valid+0x10>
 801bc2e:	6800      	ldr	r0, [r0, #0]
 801bc30:	b120      	cbz	r0, 801bc3c <rcl_subscription_is_valid+0x10>
 801bc32:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bc36:	3800      	subs	r0, #0
 801bc38:	bf18      	it	ne
 801bc3a:	2001      	movne	r0, #1
 801bc3c:	4770      	bx	lr
 801bc3e:	bf00      	nop

0801bc40 <rcl_get_system_time>:
 801bc40:	4608      	mov	r0, r1
 801bc42:	f7f9 bc99 	b.w	8015578 <rcutils_system_time_now>
 801bc46:	bf00      	nop

0801bc48 <rcl_get_steady_time>:
 801bc48:	4608      	mov	r0, r1
 801bc4a:	f7f9 bcbb 	b.w	80155c4 <rcutils_steady_time_now>
 801bc4e:	bf00      	nop

0801bc50 <rcl_get_ros_time>:
 801bc50:	7a03      	ldrb	r3, [r0, #8]
 801bc52:	b510      	push	{r4, lr}
 801bc54:	460c      	mov	r4, r1
 801bc56:	b143      	cbz	r3, 801bc6a <rcl_get_ros_time+0x1a>
 801bc58:	2105      	movs	r1, #5
 801bc5a:	f001 ff99 	bl	801db90 <__atomic_load_8>
 801bc5e:	4602      	mov	r2, r0
 801bc60:	460b      	mov	r3, r1
 801bc62:	2000      	movs	r0, #0
 801bc64:	e9c4 2300 	strd	r2, r3, [r4]
 801bc68:	bd10      	pop	{r4, pc}
 801bc6a:	4608      	mov	r0, r1
 801bc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc70:	f7f9 bc82 	b.w	8015578 <rcutils_system_time_now>

0801bc74 <rcl_clock_init>:
 801bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc76:	4605      	mov	r5, r0
 801bc78:	4610      	mov	r0, r2
 801bc7a:	4614      	mov	r4, r2
 801bc7c:	460e      	mov	r6, r1
 801bc7e:	f7f9 fc3b 	bl	80154f8 <rcutils_allocator_is_valid>
 801bc82:	b128      	cbz	r0, 801bc90 <rcl_clock_init+0x1c>
 801bc84:	2d03      	cmp	r5, #3
 801bc86:	d803      	bhi.n	801bc90 <rcl_clock_init+0x1c>
 801bc88:	e8df f005 	tbb	[pc, r5]
 801bc8c:	0659301f 	.word	0x0659301f
 801bc90:	f04f 0c0b 	mov.w	ip, #11
 801bc94:	4660      	mov	r0, ip
 801bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc98:	2c00      	cmp	r4, #0
 801bc9a:	d0f9      	beq.n	801bc90 <rcl_clock_init+0x1c>
 801bc9c:	fab6 f386 	clz	r3, r6
 801bca0:	095b      	lsrs	r3, r3, #5
 801bca2:	2e00      	cmp	r6, #0
 801bca4:	d0f4      	beq.n	801bc90 <rcl_clock_init+0x1c>
 801bca6:	6133      	str	r3, [r6, #16]
 801bca8:	469c      	mov	ip, r3
 801bcaa:	f106 0514 	add.w	r5, r6, #20
 801bcae:	4f32      	ldr	r7, [pc, #200]	@ (801bd78 <rcl_clock_init+0x104>)
 801bcb0:	f04f 0e03 	mov.w	lr, #3
 801bcb4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bcb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bcbc:	6823      	ldr	r3, [r4, #0]
 801bcbe:	4660      	mov	r0, ip
 801bcc0:	602b      	str	r3, [r5, #0]
 801bcc2:	60f7      	str	r7, [r6, #12]
 801bcc4:	f886 e000 	strb.w	lr, [r6]
 801bcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcca:	2e00      	cmp	r6, #0
 801bccc:	d0e0      	beq.n	801bc90 <rcl_clock_init+0x1c>
 801bcce:	2300      	movs	r3, #0
 801bcd0:	f106 0514 	add.w	r5, r6, #20
 801bcd4:	7033      	strb	r3, [r6, #0]
 801bcd6:	469c      	mov	ip, r3
 801bcd8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bcdc:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bce4:	6823      	ldr	r3, [r4, #0]
 801bce6:	4660      	mov	r0, ip
 801bce8:	602b      	str	r3, [r5, #0]
 801bcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcec:	2c00      	cmp	r4, #0
 801bcee:	d0cf      	beq.n	801bc90 <rcl_clock_init+0x1c>
 801bcf0:	fab6 f586 	clz	r5, r6
 801bcf4:	096d      	lsrs	r5, r5, #5
 801bcf6:	2e00      	cmp	r6, #0
 801bcf8:	d0ca      	beq.n	801bc90 <rcl_clock_init+0x1c>
 801bcfa:	46a6      	mov	lr, r4
 801bcfc:	7035      	strb	r5, [r6, #0]
 801bcfe:	f106 0c14 	add.w	ip, r6, #20
 801bd02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bd06:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bd0a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bd0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd12:	f8de 3000 	ldr.w	r3, [lr]
 801bd16:	2010      	movs	r0, #16
 801bd18:	f8cc 3000 	str.w	r3, [ip]
 801bd1c:	6823      	ldr	r3, [r4, #0]
 801bd1e:	6921      	ldr	r1, [r4, #16]
 801bd20:	4798      	blx	r3
 801bd22:	6130      	str	r0, [r6, #16]
 801bd24:	b320      	cbz	r0, 801bd70 <rcl_clock_init+0xfc>
 801bd26:	2200      	movs	r2, #0
 801bd28:	2300      	movs	r3, #0
 801bd2a:	46ac      	mov	ip, r5
 801bd2c:	7205      	strb	r5, [r0, #8]
 801bd2e:	e9c0 2300 	strd	r2, r3, [r0]
 801bd32:	4a12      	ldr	r2, [pc, #72]	@ (801bd7c <rcl_clock_init+0x108>)
 801bd34:	2301      	movs	r3, #1
 801bd36:	4660      	mov	r0, ip
 801bd38:	60f2      	str	r2, [r6, #12]
 801bd3a:	7033      	strb	r3, [r6, #0]
 801bd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd3e:	2c00      	cmp	r4, #0
 801bd40:	d0a6      	beq.n	801bc90 <rcl_clock_init+0x1c>
 801bd42:	fab6 f386 	clz	r3, r6
 801bd46:	095b      	lsrs	r3, r3, #5
 801bd48:	2e00      	cmp	r6, #0
 801bd4a:	d0a1      	beq.n	801bc90 <rcl_clock_init+0x1c>
 801bd4c:	6133      	str	r3, [r6, #16]
 801bd4e:	469c      	mov	ip, r3
 801bd50:	f106 0514 	add.w	r5, r6, #20
 801bd54:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801bd80 <rcl_clock_init+0x10c>
 801bd58:	2702      	movs	r7, #2
 801bd5a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd62:	6823      	ldr	r3, [r4, #0]
 801bd64:	4660      	mov	r0, ip
 801bd66:	602b      	str	r3, [r5, #0]
 801bd68:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bd6c:	7037      	strb	r7, [r6, #0]
 801bd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd70:	f04f 0c0a 	mov.w	ip, #10
 801bd74:	e78e      	b.n	801bc94 <rcl_clock_init+0x20>
 801bd76:	bf00      	nop
 801bd78:	0801bc49 	.word	0x0801bc49
 801bd7c:	0801bc51 	.word	0x0801bc51
 801bd80:	0801bc41 	.word	0x0801bc41

0801bd84 <rcl_clock_get_now>:
 801bd84:	b140      	cbz	r0, 801bd98 <rcl_clock_get_now+0x14>
 801bd86:	b139      	cbz	r1, 801bd98 <rcl_clock_get_now+0x14>
 801bd88:	7803      	ldrb	r3, [r0, #0]
 801bd8a:	b11b      	cbz	r3, 801bd94 <rcl_clock_get_now+0x10>
 801bd8c:	68c3      	ldr	r3, [r0, #12]
 801bd8e:	b10b      	cbz	r3, 801bd94 <rcl_clock_get_now+0x10>
 801bd90:	6900      	ldr	r0, [r0, #16]
 801bd92:	4718      	bx	r3
 801bd94:	2001      	movs	r0, #1
 801bd96:	4770      	bx	lr
 801bd98:	200b      	movs	r0, #11
 801bd9a:	4770      	bx	lr

0801bd9c <rcl_clock_add_jump_callback>:
 801bd9c:	b082      	sub	sp, #8
 801bd9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bda2:	a906      	add	r1, sp, #24
 801bda4:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 801bda8:	e881 000c 	stmia.w	r1, {r2, r3}
 801bdac:	b330      	cbz	r0, 801bdfc <rcl_clock_add_jump_callback+0x60>
 801bdae:	4604      	mov	r4, r0
 801bdb0:	3014      	adds	r0, #20
 801bdb2:	f7f9 fba1 	bl	80154f8 <rcutils_allocator_is_valid>
 801bdb6:	b30d      	cbz	r5, 801bdfc <rcl_clock_add_jump_callback+0x60>
 801bdb8:	f080 0301 	eor.w	r3, r0, #1
 801bdbc:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801bdc0:	d11c      	bne.n	801bdfc <rcl_clock_add_jump_callback+0x60>
 801bdc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bdc4:	2a00      	cmp	r2, #0
 801bdc6:	db19      	blt.n	801bdfc <rcl_clock_add_jump_callback+0x60>
 801bdc8:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801bdcc:	2901      	cmp	r1, #1
 801bdce:	f172 0200 	sbcs.w	r2, r2, #0
 801bdd2:	da13      	bge.n	801bdfc <rcl_clock_add_jump_callback+0x60>
 801bdd4:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801bdd8:	2f00      	cmp	r7, #0
 801bdda:	d040      	beq.n	801be5e <rcl_clock_add_jump_callback+0xc2>
 801bddc:	4602      	mov	r2, r0
 801bdde:	e003      	b.n	801bde8 <rcl_clock_add_jump_callback+0x4c>
 801bde0:	42bb      	cmp	r3, r7
 801bde2:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801bde6:	d010      	beq.n	801be0a <rcl_clock_add_jump_callback+0x6e>
 801bde8:	6811      	ldr	r1, [r2, #0]
 801bdea:	3301      	adds	r3, #1
 801bdec:	42a9      	cmp	r1, r5
 801bdee:	d1f7      	bne.n	801bde0 <rcl_clock_add_jump_callback+0x44>
 801bdf0:	6a11      	ldr	r1, [r2, #32]
 801bdf2:	42b1      	cmp	r1, r6
 801bdf4:	d1f4      	bne.n	801bde0 <rcl_clock_add_jump_callback+0x44>
 801bdf6:	f04f 0e01 	mov.w	lr, #1
 801bdfa:	e001      	b.n	801be00 <rcl_clock_add_jump_callback+0x64>
 801bdfc:	f04f 0e0b 	mov.w	lr, #11
 801be00:	4670      	mov	r0, lr
 801be02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be06:	b002      	add	sp, #8
 801be08:	4770      	bx	lr
 801be0a:	3301      	adds	r3, #1
 801be0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801be10:	00d9      	lsls	r1, r3, #3
 801be12:	69e3      	ldr	r3, [r4, #28]
 801be14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801be16:	4798      	blx	r3
 801be18:	b1f0      	cbz	r0, 801be58 <rcl_clock_add_jump_callback+0xbc>
 801be1a:	68a3      	ldr	r3, [r4, #8]
 801be1c:	f10d 0c18 	add.w	ip, sp, #24
 801be20:	6060      	str	r0, [r4, #4]
 801be22:	f04f 0e00 	mov.w	lr, #0
 801be26:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801be2a:	f103 0801 	add.w	r8, r3, #1
 801be2e:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801be32:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801be36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801be3a:	f105 0708 	add.w	r7, r5, #8
 801be3e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801be40:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801be44:	e887 0003 	stmia.w	r7, {r0, r1}
 801be48:	4670      	mov	r0, lr
 801be4a:	622e      	str	r6, [r5, #32]
 801be4c:	f8c4 8008 	str.w	r8, [r4, #8]
 801be50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be54:	b002      	add	sp, #8
 801be56:	4770      	bx	lr
 801be58:	f04f 0e0a 	mov.w	lr, #10
 801be5c:	e7d0      	b.n	801be00 <rcl_clock_add_jump_callback+0x64>
 801be5e:	2128      	movs	r1, #40	@ 0x28
 801be60:	e7d7      	b.n	801be12 <rcl_clock_add_jump_callback+0x76>
 801be62:	bf00      	nop

0801be64 <rcl_clock_remove_jump_callback>:
 801be64:	2800      	cmp	r0, #0
 801be66:	d05f      	beq.n	801bf28 <rcl_clock_remove_jump_callback+0xc4>
 801be68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be6c:	4605      	mov	r5, r0
 801be6e:	3014      	adds	r0, #20
 801be70:	460f      	mov	r7, r1
 801be72:	4692      	mov	sl, r2
 801be74:	f7f9 fb40 	bl	80154f8 <rcutils_allocator_is_valid>
 801be78:	f080 0001 	eor.w	r0, r0, #1
 801be7c:	b2c0      	uxtb	r0, r0
 801be7e:	2800      	cmp	r0, #0
 801be80:	d13f      	bne.n	801bf02 <rcl_clock_remove_jump_callback+0x9e>
 801be82:	2f00      	cmp	r7, #0
 801be84:	d03d      	beq.n	801bf02 <rcl_clock_remove_jump_callback+0x9e>
 801be86:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801be8a:	f1b8 0f00 	cmp.w	r8, #0
 801be8e:	d00c      	beq.n	801beaa <rcl_clock_remove_jump_callback+0x46>
 801be90:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801be94:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801be98:	464c      	mov	r4, r9
 801be9a:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801be9e:	6823      	ldr	r3, [r4, #0]
 801bea0:	42bb      	cmp	r3, r7
 801bea2:	d005      	beq.n	801beb0 <rcl_clock_remove_jump_callback+0x4c>
 801bea4:	3428      	adds	r4, #40	@ 0x28
 801bea6:	42a6      	cmp	r6, r4
 801bea8:	d1f9      	bne.n	801be9e <rcl_clock_remove_jump_callback+0x3a>
 801beaa:	2001      	movs	r0, #1
 801beac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801beb0:	6a23      	ldr	r3, [r4, #32]
 801beb2:	3428      	adds	r4, #40	@ 0x28
 801beb4:	42a6      	cmp	r6, r4
 801beb6:	d02f      	beq.n	801bf18 <rcl_clock_remove_jump_callback+0xb4>
 801beb8:	4553      	cmp	r3, sl
 801beba:	d1f0      	bne.n	801be9e <rcl_clock_remove_jump_callback+0x3a>
 801bebc:	46a6      	mov	lr, r4
 801bebe:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801bec2:	3428      	adds	r4, #40	@ 0x28
 801bec4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801becc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bed0:	42a6      	cmp	r6, r4
 801bed2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bed6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801beda:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bede:	d1ed      	bne.n	801bebc <rcl_clock_remove_jump_callback+0x58>
 801bee0:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bee4:	60ac      	str	r4, [r5, #8]
 801bee6:	b17c      	cbz	r4, 801bf08 <rcl_clock_remove_jump_callback+0xa4>
 801bee8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801beec:	69eb      	ldr	r3, [r5, #28]
 801beee:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801bef0:	4648      	mov	r0, r9
 801bef2:	00e1      	lsls	r1, r4, #3
 801bef4:	4798      	blx	r3
 801bef6:	4603      	mov	r3, r0
 801bef8:	b1c0      	cbz	r0, 801bf2c <rcl_clock_remove_jump_callback+0xc8>
 801befa:	2000      	movs	r0, #0
 801befc:	606b      	str	r3, [r5, #4]
 801befe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf02:	200b      	movs	r0, #11
 801bf04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf08:	4648      	mov	r0, r9
 801bf0a:	69ab      	ldr	r3, [r5, #24]
 801bf0c:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801bf0e:	4798      	blx	r3
 801bf10:	4620      	mov	r0, r4
 801bf12:	606c      	str	r4, [r5, #4]
 801bf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf18:	4553      	cmp	r3, sl
 801bf1a:	d1c6      	bne.n	801beaa <rcl_clock_remove_jump_callback+0x46>
 801bf1c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bf20:	60ac      	str	r4, [r5, #8]
 801bf22:	2c00      	cmp	r4, #0
 801bf24:	d1e0      	bne.n	801bee8 <rcl_clock_remove_jump_callback+0x84>
 801bf26:	e7ef      	b.n	801bf08 <rcl_clock_remove_jump_callback+0xa4>
 801bf28:	200b      	movs	r0, #11
 801bf2a:	4770      	bx	lr
 801bf2c:	200a      	movs	r0, #10
 801bf2e:	e7e9      	b.n	801bf04 <rcl_clock_remove_jump_callback+0xa0>

0801bf30 <_rcl_timer_time_jump>:
 801bf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf34:	4605      	mov	r5, r0
 801bf36:	b084      	sub	sp, #16
 801bf38:	4614      	mov	r4, r2
 801bf3a:	b131      	cbz	r1, 801bf4a <_rcl_timer_time_jump+0x1a>
 801bf3c:	7803      	ldrb	r3, [r0, #0]
 801bf3e:	3b02      	subs	r3, #2
 801bf40:	2b01      	cmp	r3, #1
 801bf42:	d93f      	bls.n	801bfc4 <_rcl_timer_time_jump+0x94>
 801bf44:	b004      	add	sp, #16
 801bf46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf4a:	6813      	ldr	r3, [r2, #0]
 801bf4c:	a902      	add	r1, sp, #8
 801bf4e:	6818      	ldr	r0, [r3, #0]
 801bf50:	f7ff ff18 	bl	801bd84 <rcl_clock_get_now>
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d1f5      	bne.n	801bf44 <_rcl_timer_time_jump+0x14>
 801bf58:	6820      	ldr	r0, [r4, #0]
 801bf5a:	2105      	movs	r1, #5
 801bf5c:	3020      	adds	r0, #32
 801bf5e:	f001 fe17 	bl	801db90 <__atomic_load_8>
 801bf62:	6823      	ldr	r3, [r4, #0]
 801bf64:	4681      	mov	r9, r0
 801bf66:	4688      	mov	r8, r1
 801bf68:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801bf6c:	2105      	movs	r1, #5
 801bf6e:	f001 fe0f 	bl	801db90 <__atomic_load_8>
 801bf72:	4607      	mov	r7, r0
 801bf74:	6820      	ldr	r0, [r4, #0]
 801bf76:	460e      	mov	r6, r1
 801bf78:	2105      	movs	r1, #5
 801bf7a:	3018      	adds	r0, #24
 801bf7c:	f001 fe08 	bl	801db90 <__atomic_load_8>
 801bf80:	782b      	ldrb	r3, [r5, #0]
 801bf82:	4682      	mov	sl, r0
 801bf84:	460d      	mov	r5, r1
 801bf86:	3b02      	subs	r3, #2
 801bf88:	9a02      	ldr	r2, [sp, #8]
 801bf8a:	2b01      	cmp	r3, #1
 801bf8c:	9b03      	ldr	r3, [sp, #12]
 801bf8e:	d937      	bls.n	801c000 <_rcl_timer_time_jump+0xd0>
 801bf90:	42ba      	cmp	r2, r7
 801bf92:	eb73 0106 	sbcs.w	r1, r3, r6
 801bf96:	da60      	bge.n	801c05a <_rcl_timer_time_jump+0x12a>
 801bf98:	454a      	cmp	r2, r9
 801bf9a:	eb73 0108 	sbcs.w	r1, r3, r8
 801bf9e:	dad1      	bge.n	801bf44 <_rcl_timer_time_jump+0x14>
 801bfa0:	eb1a 0202 	adds.w	r2, sl, r2
 801bfa4:	6820      	ldr	r0, [r4, #0]
 801bfa6:	eb43 0305 	adc.w	r3, r3, r5
 801bfaa:	2505      	movs	r5, #5
 801bfac:	3028      	adds	r0, #40	@ 0x28
 801bfae:	9500      	str	r5, [sp, #0]
 801bfb0:	f001 fe24 	bl	801dbfc <__atomic_store_8>
 801bfb4:	6820      	ldr	r0, [r4, #0]
 801bfb6:	9500      	str	r5, [sp, #0]
 801bfb8:	3020      	adds	r0, #32
 801bfba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bfbe:	f001 fe1d 	bl	801dbfc <__atomic_store_8>
 801bfc2:	e7bf      	b.n	801bf44 <_rcl_timer_time_jump+0x14>
 801bfc4:	6813      	ldr	r3, [r2, #0]
 801bfc6:	a902      	add	r1, sp, #8
 801bfc8:	6818      	ldr	r0, [r3, #0]
 801bfca:	f7ff fedb 	bl	801bd84 <rcl_clock_get_now>
 801bfce:	2800      	cmp	r0, #0
 801bfd0:	d1b8      	bne.n	801bf44 <_rcl_timer_time_jump+0x14>
 801bfd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bfd6:	4313      	orrs	r3, r2
 801bfd8:	d0b4      	beq.n	801bf44 <_rcl_timer_time_jump+0x14>
 801bfda:	6820      	ldr	r0, [r4, #0]
 801bfdc:	2105      	movs	r1, #5
 801bfde:	3028      	adds	r0, #40	@ 0x28
 801bfe0:	f001 fdd6 	bl	801db90 <__atomic_load_8>
 801bfe4:	9d02      	ldr	r5, [sp, #8]
 801bfe6:	4602      	mov	r2, r0
 801bfe8:	9b03      	ldr	r3, [sp, #12]
 801bfea:	6820      	ldr	r0, [r4, #0]
 801bfec:	1b52      	subs	r2, r2, r5
 801bfee:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801bff2:	eb61 0303 	sbc.w	r3, r1, r3
 801bff6:	2105      	movs	r1, #5
 801bff8:	9100      	str	r1, [sp, #0]
 801bffa:	f001 fdff 	bl	801dbfc <__atomic_store_8>
 801bffe:	e7a1      	b.n	801bf44 <_rcl_timer_time_jump+0x14>
 801c000:	4313      	orrs	r3, r2
 801c002:	d09f      	beq.n	801bf44 <_rcl_timer_time_jump+0x14>
 801c004:	6820      	ldr	r0, [r4, #0]
 801c006:	f04f 0805 	mov.w	r8, #5
 801c00a:	2300      	movs	r3, #0
 801c00c:	2200      	movs	r2, #0
 801c00e:	3030      	adds	r0, #48	@ 0x30
 801c010:	f8cd 8000 	str.w	r8, [sp]
 801c014:	f001 fe28 	bl	801dc68 <__atomic_exchange_8>
 801c018:	ea51 0300 	orrs.w	r3, r1, r0
 801c01c:	4606      	mov	r6, r0
 801c01e:	460f      	mov	r7, r1
 801c020:	d090      	beq.n	801bf44 <_rcl_timer_time_jump+0x14>
 801c022:	9a02      	ldr	r2, [sp, #8]
 801c024:	9b03      	ldr	r3, [sp, #12]
 801c026:	1a12      	subs	r2, r2, r0
 801c028:	f8cd 8000 	str.w	r8, [sp]
 801c02c:	6820      	ldr	r0, [r4, #0]
 801c02e:	eb63 0301 	sbc.w	r3, r3, r1
 801c032:	eb12 020a 	adds.w	r2, r2, sl
 801c036:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 801c03a:	eb43 0305 	adc.w	r3, r3, r5
 801c03e:	f001 fddd 	bl	801dbfc <__atomic_store_8>
 801c042:	f8cd 8000 	str.w	r8, [sp]
 801c046:	6820      	ldr	r0, [r4, #0]
 801c048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c04c:	3020      	adds	r0, #32
 801c04e:	1b92      	subs	r2, r2, r6
 801c050:	eb63 0307 	sbc.w	r3, r3, r7
 801c054:	f001 fdd2 	bl	801dbfc <__atomic_store_8>
 801c058:	e774      	b.n	801bf44 <_rcl_timer_time_jump+0x14>
 801c05a:	6820      	ldr	r0, [r4, #0]
 801c05c:	3008      	adds	r0, #8
 801c05e:	f005 f9e7 	bl	8021430 <rcl_trigger_guard_condition>
 801c062:	e76f      	b.n	801bf44 <_rcl_timer_time_jump+0x14>

0801c064 <rcl_get_zero_initialized_timer>:
 801c064:	4b01      	ldr	r3, [pc, #4]	@ (801c06c <rcl_get_zero_initialized_timer+0x8>)
 801c066:	6818      	ldr	r0, [r3, #0]
 801c068:	4770      	bx	lr
 801c06a:	bf00      	nop
 801c06c:	080254c8 	.word	0x080254c8

0801c070 <rcl_timer_init>:
 801c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c074:	b0ab      	sub	sp, #172	@ 0xac
 801c076:	460d      	mov	r5, r1
 801c078:	4604      	mov	r4, r0
 801c07a:	4692      	mov	sl, r2
 801c07c:	a837      	add	r0, sp, #220	@ 0xdc
 801c07e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 801c080:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 801c084:	f7f9 fa38 	bl	80154f8 <rcutils_allocator_is_valid>
 801c088:	fab5 f385 	clz	r3, r5
 801c08c:	095b      	lsrs	r3, r3, #5
 801c08e:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 801c092:	2c00      	cmp	r4, #0
 801c094:	bf08      	it	eq
 801c096:	f043 0301 	orreq.w	r3, r3, #1
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d164      	bne.n	801c168 <rcl_timer_init+0xf8>
 801c09e:	f080 0001 	eor.w	r0, r0, #1
 801c0a2:	b2c0      	uxtb	r0, r0
 801c0a4:	2800      	cmp	r0, #0
 801c0a6:	d15f      	bne.n	801c168 <rcl_timer_init+0xf8>
 801c0a8:	6823      	ldr	r3, [r4, #0]
 801c0aa:	b123      	cbz	r3, 801c0b6 <rcl_timer_init+0x46>
 801c0ac:	2664      	movs	r6, #100	@ 0x64
 801c0ae:	4630      	mov	r0, r6
 801c0b0:	b02b      	add	sp, #172	@ 0xac
 801c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0b6:	a908      	add	r1, sp, #32
 801c0b8:	4628      	mov	r0, r5
 801c0ba:	f7ff fe63 	bl	801bd84 <rcl_clock_get_now>
 801c0be:	4606      	mov	r6, r0
 801c0c0:	2800      	cmp	r0, #0
 801c0c2:	d1f4      	bne.n	801c0ae <rcl_timer_init+0x3e>
 801c0c4:	f10d 0b18 	add.w	fp, sp, #24
 801c0c8:	ae0b      	add	r6, sp, #44	@ 0x2c
 801c0ca:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801c0ce:	4658      	mov	r0, fp
 801c0d0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801c0d4:	f005 f8b6 	bl	8021244 <rcl_get_zero_initialized_guard_condition>
 801c0d8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801c0dc:	e889 0003 	stmia.w	r9, {r0, r1}
 801c0e0:	4630      	mov	r0, r6
 801c0e2:	f005 f989 	bl	80213f8 <rcl_guard_condition_get_default_options>
 801c0e6:	ab0d      	add	r3, sp, #52	@ 0x34
 801c0e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c0ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c0f0:	4651      	mov	r1, sl
 801c0f2:	4648      	mov	r0, r9
 801c0f4:	e896 000c 	ldmia.w	r6, {r2, r3}
 801c0f8:	f005 f8ae 	bl	8021258 <rcl_guard_condition_init>
 801c0fc:	4606      	mov	r6, r0
 801c0fe:	2800      	cmp	r0, #0
 801c100:	d1d5      	bne.n	801c0ae <rcl_timer_init+0x3e>
 801c102:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	2b01      	cmp	r3, #1
 801c108:	d033      	beq.n	801c172 <rcl_timer_init+0x102>
 801c10a:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801c10c:	4642      	mov	r2, r8
 801c10e:	463b      	mov	r3, r7
 801c110:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801c114:	911a      	str	r1, [sp, #104]	@ 0x68
 801c116:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801c11a:	f04f 0a00 	mov.w	sl, #0
 801c11e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801c122:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c126:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801c1d0 <rcl_timer_init+0x160>
 801c12a:	eb12 0008 	adds.w	r0, r2, r8
 801c12e:	eb47 0103 	adc.w	r1, r7, r3
 801c132:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801c136:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801c13a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801c13e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c142:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c146:	f8de 3000 	ldr.w	r3, [lr]
 801c14a:	2050      	movs	r0, #80	@ 0x50
 801c14c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 801c150:	4619      	mov	r1, r3
 801c152:	f8cc 3000 	str.w	r3, [ip]
 801c156:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801c158:	4798      	blx	r3
 801c15a:	6020      	str	r0, [r4, #0]
 801c15c:	b358      	cbz	r0, 801c1b6 <rcl_timer_init+0x146>
 801c15e:	2250      	movs	r2, #80	@ 0x50
 801c160:	a916      	add	r1, sp, #88	@ 0x58
 801c162:	f006 f9ec 	bl	802253e <memcpy>
 801c166:	e7a2      	b.n	801c0ae <rcl_timer_init+0x3e>
 801c168:	260b      	movs	r6, #11
 801c16a:	4630      	mov	r0, r6
 801c16c:	b02b      	add	sp, #172	@ 0xac
 801c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c172:	2001      	movs	r0, #1
 801c174:	2100      	movs	r1, #0
 801c176:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801c17a:	ab12      	add	r3, sp, #72	@ 0x48
 801c17c:	4a16      	ldr	r2, [pc, #88]	@ (801c1d8 <rcl_timer_init+0x168>)
 801c17e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801c182:	9405      	str	r4, [sp, #20]
 801c184:	9204      	str	r2, [sp, #16]
 801c186:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801c18a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c18e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c192:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801c196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c198:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c19c:	4628      	mov	r0, r5
 801c19e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801c1a2:	f7ff fdfb 	bl	801bd9c <rcl_clock_add_jump_callback>
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	2800      	cmp	r0, #0
 801c1aa:	d0ae      	beq.n	801c10a <rcl_timer_init+0x9a>
 801c1ac:	4648      	mov	r0, r9
 801c1ae:	461e      	mov	r6, r3
 801c1b0:	f005 f8fc 	bl	80213ac <rcl_guard_condition_fini>
 801c1b4:	e77b      	b.n	801c0ae <rcl_timer_init+0x3e>
 801c1b6:	4648      	mov	r0, r9
 801c1b8:	260a      	movs	r6, #10
 801c1ba:	f005 f8f7 	bl	80213ac <rcl_guard_condition_fini>
 801c1be:	4622      	mov	r2, r4
 801c1c0:	4905      	ldr	r1, [pc, #20]	@ (801c1d8 <rcl_timer_init+0x168>)
 801c1c2:	4628      	mov	r0, r5
 801c1c4:	f7ff fe4e 	bl	801be64 <rcl_clock_remove_jump_callback>
 801c1c8:	e771      	b.n	801c0ae <rcl_timer_init+0x3e>
 801c1ca:	bf00      	nop
 801c1cc:	f3af 8000 	nop.w
	...
 801c1d8:	0801bf31 	.word	0x0801bf31

0801c1dc <rcl_timer_call>:
 801c1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1e0:	b087      	sub	sp, #28
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	d06c      	beq.n	801c2c0 <rcl_timer_call+0xe4>
 801c1e6:	6803      	ldr	r3, [r0, #0]
 801c1e8:	4604      	mov	r4, r0
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d062      	beq.n	801c2b4 <rcl_timer_call+0xd8>
 801c1ee:	f3bf 8f5b 	dmb	ish
 801c1f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c1f6:	f3bf 8f5b 	dmb	ish
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d14f      	bne.n	801c29e <rcl_timer_call+0xc2>
 801c1fe:	6803      	ldr	r3, [r0, #0]
 801c200:	a904      	add	r1, sp, #16
 801c202:	6818      	ldr	r0, [r3, #0]
 801c204:	f7ff fdbe 	bl	801bd84 <rcl_clock_get_now>
 801c208:	4605      	mov	r5, r0
 801c20a:	2800      	cmp	r0, #0
 801c20c:	d149      	bne.n	801c2a2 <rcl_timer_call+0xc6>
 801c20e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c212:	2b00      	cmp	r3, #0
 801c214:	db49      	blt.n	801c2aa <rcl_timer_call+0xce>
 801c216:	2605      	movs	r6, #5
 801c218:	6820      	ldr	r0, [r4, #0]
 801c21a:	9600      	str	r6, [sp, #0]
 801c21c:	3020      	adds	r0, #32
 801c21e:	f001 fd23 	bl	801dc68 <__atomic_exchange_8>
 801c222:	6823      	ldr	r3, [r4, #0]
 801c224:	4680      	mov	r8, r0
 801c226:	f3bf 8f5b 	dmb	ish
 801c22a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c22e:	f3bf 8f5b 	dmb	ish
 801c232:	6820      	ldr	r0, [r4, #0]
 801c234:	4689      	mov	r9, r1
 801c236:	4631      	mov	r1, r6
 801c238:	3028      	adds	r0, #40	@ 0x28
 801c23a:	f001 fca9 	bl	801db90 <__atomic_load_8>
 801c23e:	460f      	mov	r7, r1
 801c240:	4631      	mov	r1, r6
 801c242:	4606      	mov	r6, r0
 801c244:	6820      	ldr	r0, [r4, #0]
 801c246:	3018      	adds	r0, #24
 801c248:	f001 fca2 	bl	801db90 <__atomic_load_8>
 801c24c:	4602      	mov	r2, r0
 801c24e:	9804      	ldr	r0, [sp, #16]
 801c250:	460b      	mov	r3, r1
 801c252:	18b6      	adds	r6, r6, r2
 801c254:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c258:	4692      	mov	sl, r2
 801c25a:	eb47 0701 	adc.w	r7, r7, r1
 801c25e:	4286      	cmp	r6, r0
 801c260:	eb77 010c 	sbcs.w	r1, r7, ip
 801c264:	da04      	bge.n	801c270 <rcl_timer_call+0x94>
 801c266:	ea53 0102 	orrs.w	r1, r3, r2
 801c26a:	d12e      	bne.n	801c2ca <rcl_timer_call+0xee>
 801c26c:	4606      	mov	r6, r0
 801c26e:	4667      	mov	r7, ip
 801c270:	6820      	ldr	r0, [r4, #0]
 801c272:	2105      	movs	r1, #5
 801c274:	4632      	mov	r2, r6
 801c276:	463b      	mov	r3, r7
 801c278:	3028      	adds	r0, #40	@ 0x28
 801c27a:	9100      	str	r1, [sp, #0]
 801c27c:	f001 fcbe 	bl	801dbfc <__atomic_store_8>
 801c280:	f1bb 0f00 	cmp.w	fp, #0
 801c284:	d00d      	beq.n	801c2a2 <rcl_timer_call+0xc6>
 801c286:	9a04      	ldr	r2, [sp, #16]
 801c288:	4620      	mov	r0, r4
 801c28a:	9b05      	ldr	r3, [sp, #20]
 801c28c:	ebb2 0208 	subs.w	r2, r2, r8
 801c290:	eb63 0309 	sbc.w	r3, r3, r9
 801c294:	47d8      	blx	fp
 801c296:	4628      	mov	r0, r5
 801c298:	b007      	add	sp, #28
 801c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c29e:	f240 3521 	movw	r5, #801	@ 0x321
 801c2a2:	4628      	mov	r0, r5
 801c2a4:	b007      	add	sp, #28
 801c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2aa:	2501      	movs	r5, #1
 801c2ac:	4628      	mov	r0, r5
 801c2ae:	b007      	add	sp, #28
 801c2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801c2b8:	4628      	mov	r0, r5
 801c2ba:	b007      	add	sp, #28
 801c2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2c0:	250b      	movs	r5, #11
 801c2c2:	4628      	mov	r0, r5
 801c2c4:	b007      	add	sp, #28
 801c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2ca:	1b80      	subs	r0, r0, r6
 801c2cc:	eb6c 0107 	sbc.w	r1, ip, r7
 801c2d0:	3801      	subs	r0, #1
 801c2d2:	f161 0100 	sbc.w	r1, r1, #0
 801c2d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c2da:	f7e4 f869 	bl	80003b0 <__aeabi_ldivmod>
 801c2de:	9b02      	ldr	r3, [sp, #8]
 801c2e0:	3001      	adds	r0, #1
 801c2e2:	f141 0100 	adc.w	r1, r1, #0
 801c2e6:	fb00 f303 	mul.w	r3, r0, r3
 801c2ea:	fb01 330a 	mla	r3, r1, sl, r3
 801c2ee:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c2f2:	1986      	adds	r6, r0, r6
 801c2f4:	4453      	add	r3, sl
 801c2f6:	eb43 0707 	adc.w	r7, r3, r7
 801c2fa:	e7b9      	b.n	801c270 <rcl_timer_call+0x94>

0801c2fc <rcl_timer_is_ready>:
 801c2fc:	b570      	push	{r4, r5, r6, lr}
 801c2fe:	b082      	sub	sp, #8
 801c300:	b380      	cbz	r0, 801c364 <rcl_timer_is_ready+0x68>
 801c302:	6803      	ldr	r3, [r0, #0]
 801c304:	4604      	mov	r4, r0
 801c306:	b38b      	cbz	r3, 801c36c <rcl_timer_is_ready+0x70>
 801c308:	460d      	mov	r5, r1
 801c30a:	b359      	cbz	r1, 801c364 <rcl_timer_is_ready+0x68>
 801c30c:	f3bf 8f5b 	dmb	ish
 801c310:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c314:	f3bf 8f5b 	dmb	ish
 801c318:	b953      	cbnz	r3, 801c330 <rcl_timer_is_ready+0x34>
 801c31a:	6803      	ldr	r3, [r0, #0]
 801c31c:	4669      	mov	r1, sp
 801c31e:	6818      	ldr	r0, [r3, #0]
 801c320:	f7ff fd30 	bl	801bd84 <rcl_clock_get_now>
 801c324:	4606      	mov	r6, r0
 801c326:	b148      	cbz	r0, 801c33c <rcl_timer_is_ready+0x40>
 801c328:	f240 3321 	movw	r3, #801	@ 0x321
 801c32c:	4298      	cmp	r0, r3
 801c32e:	d102      	bne.n	801c336 <rcl_timer_is_ready+0x3a>
 801c330:	2300      	movs	r3, #0
 801c332:	461e      	mov	r6, r3
 801c334:	702b      	strb	r3, [r5, #0]
 801c336:	4630      	mov	r0, r6
 801c338:	b002      	add	sp, #8
 801c33a:	bd70      	pop	{r4, r5, r6, pc}
 801c33c:	6820      	ldr	r0, [r4, #0]
 801c33e:	2105      	movs	r1, #5
 801c340:	3028      	adds	r0, #40	@ 0x28
 801c342:	f001 fc25 	bl	801db90 <__atomic_load_8>
 801c346:	9b00      	ldr	r3, [sp, #0]
 801c348:	1ac0      	subs	r0, r0, r3
 801c34a:	9b01      	ldr	r3, [sp, #4]
 801c34c:	eb61 0103 	sbc.w	r1, r1, r3
 801c350:	2801      	cmp	r0, #1
 801c352:	4630      	mov	r0, r6
 801c354:	f171 0300 	sbcs.w	r3, r1, #0
 801c358:	bfb4      	ite	lt
 801c35a:	2301      	movlt	r3, #1
 801c35c:	2300      	movge	r3, #0
 801c35e:	702b      	strb	r3, [r5, #0]
 801c360:	b002      	add	sp, #8
 801c362:	bd70      	pop	{r4, r5, r6, pc}
 801c364:	260b      	movs	r6, #11
 801c366:	4630      	mov	r0, r6
 801c368:	b002      	add	sp, #8
 801c36a:	bd70      	pop	{r4, r5, r6, pc}
 801c36c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c370:	e7e1      	b.n	801c336 <rcl_timer_is_ready+0x3a>
 801c372:	bf00      	nop

0801c374 <rcl_timer_get_time_until_next_call>:
 801c374:	b570      	push	{r4, r5, r6, lr}
 801c376:	b082      	sub	sp, #8
 801c378:	b330      	cbz	r0, 801c3c8 <rcl_timer_get_time_until_next_call+0x54>
 801c37a:	6803      	ldr	r3, [r0, #0]
 801c37c:	4604      	mov	r4, r0
 801c37e:	b33b      	cbz	r3, 801c3d0 <rcl_timer_get_time_until_next_call+0x5c>
 801c380:	460d      	mov	r5, r1
 801c382:	b309      	cbz	r1, 801c3c8 <rcl_timer_get_time_until_next_call+0x54>
 801c384:	f3bf 8f5b 	dmb	ish
 801c388:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c38c:	f3bf 8f5b 	dmb	ish
 801c390:	b9ab      	cbnz	r3, 801c3be <rcl_timer_get_time_until_next_call+0x4a>
 801c392:	6803      	ldr	r3, [r0, #0]
 801c394:	4669      	mov	r1, sp
 801c396:	6818      	ldr	r0, [r3, #0]
 801c398:	f7ff fcf4 	bl	801bd84 <rcl_clock_get_now>
 801c39c:	4606      	mov	r6, r0
 801c39e:	b958      	cbnz	r0, 801c3b8 <rcl_timer_get_time_until_next_call+0x44>
 801c3a0:	6820      	ldr	r0, [r4, #0]
 801c3a2:	2105      	movs	r1, #5
 801c3a4:	3028      	adds	r0, #40	@ 0x28
 801c3a6:	f001 fbf3 	bl	801db90 <__atomic_load_8>
 801c3aa:	9b00      	ldr	r3, [sp, #0]
 801c3ac:	1ac0      	subs	r0, r0, r3
 801c3ae:	9b01      	ldr	r3, [sp, #4]
 801c3b0:	eb61 0103 	sbc.w	r1, r1, r3
 801c3b4:	6028      	str	r0, [r5, #0]
 801c3b6:	6069      	str	r1, [r5, #4]
 801c3b8:	4630      	mov	r0, r6
 801c3ba:	b002      	add	sp, #8
 801c3bc:	bd70      	pop	{r4, r5, r6, pc}
 801c3be:	f240 3621 	movw	r6, #801	@ 0x321
 801c3c2:	4630      	mov	r0, r6
 801c3c4:	b002      	add	sp, #8
 801c3c6:	bd70      	pop	{r4, r5, r6, pc}
 801c3c8:	260b      	movs	r6, #11
 801c3ca:	4630      	mov	r0, r6
 801c3cc:	b002      	add	sp, #8
 801c3ce:	bd70      	pop	{r4, r5, r6, pc}
 801c3d0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c3d4:	e7f0      	b.n	801c3b8 <rcl_timer_get_time_until_next_call+0x44>
 801c3d6:	bf00      	nop

0801c3d8 <rcl_timer_get_guard_condition>:
 801c3d8:	b130      	cbz	r0, 801c3e8 <rcl_timer_get_guard_condition+0x10>
 801c3da:	6800      	ldr	r0, [r0, #0]
 801c3dc:	b120      	cbz	r0, 801c3e8 <rcl_timer_get_guard_condition+0x10>
 801c3de:	68c3      	ldr	r3, [r0, #12]
 801c3e0:	b10b      	cbz	r3, 801c3e6 <rcl_timer_get_guard_condition+0xe>
 801c3e2:	3008      	adds	r0, #8
 801c3e4:	4770      	bx	lr
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	4770      	bx	lr
 801c3ea:	bf00      	nop

0801c3ec <rcl_validate_enclave_name_with_size>:
 801c3ec:	2800      	cmp	r0, #0
 801c3ee:	d049      	beq.n	801c484 <rcl_validate_enclave_name_with_size+0x98>
 801c3f0:	b570      	push	{r4, r5, r6, lr}
 801c3f2:	4615      	mov	r5, r2
 801c3f4:	b0c2      	sub	sp, #264	@ 0x108
 801c3f6:	b19a      	cbz	r2, 801c420 <rcl_validate_enclave_name_with_size+0x34>
 801c3f8:	461e      	mov	r6, r3
 801c3fa:	466a      	mov	r2, sp
 801c3fc:	ab01      	add	r3, sp, #4
 801c3fe:	460c      	mov	r4, r1
 801c400:	f002 f88e 	bl	801e520 <rmw_validate_namespace_with_size>
 801c404:	4684      	mov	ip, r0
 801c406:	b9b8      	cbnz	r0, 801c438 <rcl_validate_enclave_name_with_size+0x4c>
 801c408:	9900      	ldr	r1, [sp, #0]
 801c40a:	b171      	cbz	r1, 801c42a <rcl_validate_enclave_name_with_size+0x3e>
 801c40c:	2907      	cmp	r1, #7
 801c40e:	d019      	beq.n	801c444 <rcl_validate_enclave_name_with_size+0x58>
 801c410:	1e4b      	subs	r3, r1, #1
 801c412:	2b05      	cmp	r3, #5
 801c414:	d83a      	bhi.n	801c48c <rcl_validate_enclave_name_with_size+0xa0>
 801c416:	e8df f003 	tbb	[pc, r3]
 801c41a:	2926      	.short	0x2926
 801c41c:	1d322f2c 	.word	0x1d322f2c
 801c420:	f04f 0c0b 	mov.w	ip, #11
 801c424:	4660      	mov	r0, ip
 801c426:	b042      	add	sp, #264	@ 0x108
 801c428:	bd70      	pop	{r4, r5, r6, pc}
 801c42a:	2907      	cmp	r1, #7
 801c42c:	d00a      	beq.n	801c444 <rcl_validate_enclave_name_with_size+0x58>
 801c42e:	2300      	movs	r3, #0
 801c430:	4660      	mov	r0, ip
 801c432:	602b      	str	r3, [r5, #0]
 801c434:	b042      	add	sp, #264	@ 0x108
 801c436:	bd70      	pop	{r4, r5, r6, pc}
 801c438:	f7fe fb6c 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 801c43c:	4684      	mov	ip, r0
 801c43e:	4660      	mov	r0, ip
 801c440:	b042      	add	sp, #264	@ 0x108
 801c442:	bd70      	pop	{r4, r5, r6, pc}
 801c444:	2cff      	cmp	r4, #255	@ 0xff
 801c446:	d9f2      	bls.n	801c42e <rcl_validate_enclave_name_with_size+0x42>
 801c448:	6029      	str	r1, [r5, #0]
 801c44a:	2e00      	cmp	r6, #0
 801c44c:	d0ea      	beq.n	801c424 <rcl_validate_enclave_name_with_size+0x38>
 801c44e:	23fe      	movs	r3, #254	@ 0xfe
 801c450:	6033      	str	r3, [r6, #0]
 801c452:	e7e7      	b.n	801c424 <rcl_validate_enclave_name_with_size+0x38>
 801c454:	2306      	movs	r3, #6
 801c456:	602b      	str	r3, [r5, #0]
 801c458:	2e00      	cmp	r6, #0
 801c45a:	d0e3      	beq.n	801c424 <rcl_validate_enclave_name_with_size+0x38>
 801c45c:	9b01      	ldr	r3, [sp, #4]
 801c45e:	4660      	mov	r0, ip
 801c460:	6033      	str	r3, [r6, #0]
 801c462:	b042      	add	sp, #264	@ 0x108
 801c464:	bd70      	pop	{r4, r5, r6, pc}
 801c466:	2301      	movs	r3, #1
 801c468:	602b      	str	r3, [r5, #0]
 801c46a:	e7f5      	b.n	801c458 <rcl_validate_enclave_name_with_size+0x6c>
 801c46c:	2302      	movs	r3, #2
 801c46e:	602b      	str	r3, [r5, #0]
 801c470:	e7f2      	b.n	801c458 <rcl_validate_enclave_name_with_size+0x6c>
 801c472:	2303      	movs	r3, #3
 801c474:	602b      	str	r3, [r5, #0]
 801c476:	e7ef      	b.n	801c458 <rcl_validate_enclave_name_with_size+0x6c>
 801c478:	2304      	movs	r3, #4
 801c47a:	602b      	str	r3, [r5, #0]
 801c47c:	e7ec      	b.n	801c458 <rcl_validate_enclave_name_with_size+0x6c>
 801c47e:	2305      	movs	r3, #5
 801c480:	602b      	str	r3, [r5, #0]
 801c482:	e7e9      	b.n	801c458 <rcl_validate_enclave_name_with_size+0x6c>
 801c484:	f04f 0c0b 	mov.w	ip, #11
 801c488:	4660      	mov	r0, ip
 801c48a:	4770      	bx	lr
 801c48c:	460b      	mov	r3, r1
 801c48e:	4a04      	ldr	r2, [pc, #16]	@ (801c4a0 <rcl_validate_enclave_name_with_size+0xb4>)
 801c490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c494:	a802      	add	r0, sp, #8
 801c496:	f001 fd33 	bl	801df00 <rcutils_snprintf>
 801c49a:	f04f 0c01 	mov.w	ip, #1
 801c49e:	e7c1      	b.n	801c424 <rcl_validate_enclave_name_with_size+0x38>
 801c4a0:	080254cc 	.word	0x080254cc

0801c4a4 <rcl_validate_enclave_name>:
 801c4a4:	b168      	cbz	r0, 801c4c2 <rcl_validate_enclave_name+0x1e>
 801c4a6:	b570      	push	{r4, r5, r6, lr}
 801c4a8:	460d      	mov	r5, r1
 801c4aa:	4616      	mov	r6, r2
 801c4ac:	4604      	mov	r4, r0
 801c4ae:	f7e3 ff21 	bl	80002f4 <strlen>
 801c4b2:	4633      	mov	r3, r6
 801c4b4:	4601      	mov	r1, r0
 801c4b6:	462a      	mov	r2, r5
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4be:	f7ff bf95 	b.w	801c3ec <rcl_validate_enclave_name_with_size>
 801c4c2:	200b      	movs	r0, #11
 801c4c4:	4770      	bx	lr
 801c4c6:	bf00      	nop

0801c4c8 <rcl_get_zero_initialized_wait_set>:
 801c4c8:	b510      	push	{r4, lr}
 801c4ca:	4c08      	ldr	r4, [pc, #32]	@ (801c4ec <rcl_get_zero_initialized_wait_set+0x24>)
 801c4cc:	4686      	mov	lr, r0
 801c4ce:	4684      	mov	ip, r0
 801c4d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4e2:	6823      	ldr	r3, [r4, #0]
 801c4e4:	4670      	mov	r0, lr
 801c4e6:	f8cc 3000 	str.w	r3, [ip]
 801c4ea:	bd10      	pop	{r4, pc}
 801c4ec:	0802552c 	.word	0x0802552c

0801c4f0 <rcl_wait_set_is_valid>:
 801c4f0:	b118      	cbz	r0, 801c4fa <rcl_wait_set_is_valid+0xa>
 801c4f2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801c4f4:	3800      	subs	r0, #0
 801c4f6:	bf18      	it	ne
 801c4f8:	2001      	movne	r0, #1
 801c4fa:	4770      	bx	lr

0801c4fc <rcl_wait_set_fini>:
 801c4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c500:	b082      	sub	sp, #8
 801c502:	2800      	cmp	r0, #0
 801c504:	f000 8095 	beq.w	801c632 <rcl_wait_set_fini+0x136>
 801c508:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801c50a:	4604      	mov	r4, r0
 801c50c:	2e00      	cmp	r6, #0
 801c50e:	f000 808c 	beq.w	801c62a <rcl_wait_set_fini+0x12e>
 801c512:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801c514:	f003 faf6 	bl	801fb04 <rmw_destroy_wait_set>
 801c518:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c51a:	1e06      	subs	r6, r0, #0
 801c51c:	bf18      	it	ne
 801c51e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801c522:	2d00      	cmp	r5, #0
 801c524:	f000 8081 	beq.w	801c62a <rcl_wait_set_fini+0x12e>
 801c528:	2700      	movs	r7, #0
 801c52a:	6820      	ldr	r0, [r4, #0]
 801c52c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c530:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c532:	6067      	str	r7, [r4, #4]
 801c534:	602f      	str	r7, [r5, #0]
 801c536:	b120      	cbz	r0, 801c542 <rcl_wait_set_fini+0x46>
 801c538:	9101      	str	r1, [sp, #4]
 801c53a:	47c0      	blx	r8
 801c53c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c53e:	9901      	ldr	r1, [sp, #4]
 801c540:	6027      	str	r7, [r4, #0]
 801c542:	68a8      	ldr	r0, [r5, #8]
 801c544:	b120      	cbz	r0, 801c550 <rcl_wait_set_fini+0x54>
 801c546:	47c0      	blx	r8
 801c548:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c54a:	2300      	movs	r3, #0
 801c54c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c550:	f04f 0800 	mov.w	r8, #0
 801c554:	68a0      	ldr	r0, [r4, #8]
 801c556:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c558:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c55a:	f8c4 800c 	str.w	r8, [r4, #12]
 801c55e:	f8c5 800c 	str.w	r8, [r5, #12]
 801c562:	b128      	cbz	r0, 801c570 <rcl_wait_set_fini+0x74>
 801c564:	47b8      	blx	r7
 801c566:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c568:	f8c4 8008 	str.w	r8, [r4, #8]
 801c56c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c56e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c570:	f04f 0800 	mov.w	r8, #0
 801c574:	6968      	ldr	r0, [r5, #20]
 801c576:	f8c5 8010 	str.w	r8, [r5, #16]
 801c57a:	b128      	cbz	r0, 801c588 <rcl_wait_set_fini+0x8c>
 801c57c:	47b8      	blx	r7
 801c57e:	f8c5 8014 	str.w	r8, [r5, #20]
 801c582:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c584:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c586:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c588:	f04f 0800 	mov.w	r8, #0
 801c58c:	6920      	ldr	r0, [r4, #16]
 801c58e:	f8c4 8014 	str.w	r8, [r4, #20]
 801c592:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801c596:	b128      	cbz	r0, 801c5a4 <rcl_wait_set_fini+0xa8>
 801c598:	47b8      	blx	r7
 801c59a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c59c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c5a0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c5a2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5a4:	f04f 0800 	mov.w	r8, #0
 801c5a8:	69a0      	ldr	r0, [r4, #24]
 801c5aa:	f8c4 801c 	str.w	r8, [r4, #28]
 801c5ae:	f8c5 8018 	str.w	r8, [r5, #24]
 801c5b2:	b128      	cbz	r0, 801c5c0 <rcl_wait_set_fini+0xc4>
 801c5b4:	9101      	str	r1, [sp, #4]
 801c5b6:	47b8      	blx	r7
 801c5b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5ba:	9901      	ldr	r1, [sp, #4]
 801c5bc:	f8c4 8018 	str.w	r8, [r4, #24]
 801c5c0:	6a28      	ldr	r0, [r5, #32]
 801c5c2:	b120      	cbz	r0, 801c5ce <rcl_wait_set_fini+0xd2>
 801c5c4:	47b8      	blx	r7
 801c5c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5c8:	2300      	movs	r3, #0
 801c5ca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c5ce:	2700      	movs	r7, #0
 801c5d0:	6a20      	ldr	r0, [r4, #32]
 801c5d2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c5d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5d8:	6267      	str	r7, [r4, #36]	@ 0x24
 801c5da:	626f      	str	r7, [r5, #36]	@ 0x24
 801c5dc:	b120      	cbz	r0, 801c5e8 <rcl_wait_set_fini+0xec>
 801c5de:	9101      	str	r1, [sp, #4]
 801c5e0:	47c0      	blx	r8
 801c5e2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5e4:	9901      	ldr	r1, [sp, #4]
 801c5e6:	6227      	str	r7, [r4, #32]
 801c5e8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c5ea:	b120      	cbz	r0, 801c5f6 <rcl_wait_set_fini+0xfa>
 801c5ec:	47c0      	blx	r8
 801c5ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5f0:	2300      	movs	r3, #0
 801c5f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801c5f6:	2700      	movs	r7, #0
 801c5f8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c5fa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c5fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c600:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801c602:	632f      	str	r7, [r5, #48]	@ 0x30
 801c604:	b120      	cbz	r0, 801c610 <rcl_wait_set_fini+0x114>
 801c606:	9101      	str	r1, [sp, #4]
 801c608:	47c0      	blx	r8
 801c60a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c60c:	9901      	ldr	r1, [sp, #4]
 801c60e:	62a7      	str	r7, [r4, #40]	@ 0x28
 801c610:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801c612:	b120      	cbz	r0, 801c61e <rcl_wait_set_fini+0x122>
 801c614:	47c0      	blx	r8
 801c616:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c618:	2300      	movs	r3, #0
 801c61a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801c61e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801c620:	4628      	mov	r0, r5
 801c622:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c624:	4798      	blx	r3
 801c626:	2300      	movs	r3, #0
 801c628:	6323      	str	r3, [r4, #48]	@ 0x30
 801c62a:	4630      	mov	r0, r6
 801c62c:	b002      	add	sp, #8
 801c62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c632:	260b      	movs	r6, #11
 801c634:	4630      	mov	r0, r6
 801c636:	b002      	add	sp, #8
 801c638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c63c <rcl_wait_set_add_subscription>:
 801c63c:	b318      	cbz	r0, 801c686 <rcl_wait_set_add_subscription+0x4a>
 801c63e:	b538      	push	{r3, r4, r5, lr}
 801c640:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c642:	4604      	mov	r4, r0
 801c644:	b30b      	cbz	r3, 801c68a <rcl_wait_set_add_subscription+0x4e>
 801c646:	b319      	cbz	r1, 801c690 <rcl_wait_set_add_subscription+0x54>
 801c648:	681d      	ldr	r5, [r3, #0]
 801c64a:	6840      	ldr	r0, [r0, #4]
 801c64c:	4285      	cmp	r5, r0
 801c64e:	d217      	bcs.n	801c680 <rcl_wait_set_add_subscription+0x44>
 801c650:	1c68      	adds	r0, r5, #1
 801c652:	6018      	str	r0, [r3, #0]
 801c654:	6823      	ldr	r3, [r4, #0]
 801c656:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c65a:	b102      	cbz	r2, 801c65e <rcl_wait_set_add_subscription+0x22>
 801c65c:	6015      	str	r5, [r2, #0]
 801c65e:	4608      	mov	r0, r1
 801c660:	f7ff fade 	bl	801bc20 <rcl_subscription_get_rmw_handle>
 801c664:	b150      	cbz	r0, 801c67c <rcl_wait_set_add_subscription+0x40>
 801c666:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c668:	6842      	ldr	r2, [r0, #4]
 801c66a:	2000      	movs	r0, #0
 801c66c:	689b      	ldr	r3, [r3, #8]
 801c66e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c672:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c674:	6853      	ldr	r3, [r2, #4]
 801c676:	3301      	adds	r3, #1
 801c678:	6053      	str	r3, [r2, #4]
 801c67a:	bd38      	pop	{r3, r4, r5, pc}
 801c67c:	2001      	movs	r0, #1
 801c67e:	bd38      	pop	{r3, r4, r5, pc}
 801c680:	f240 3086 	movw	r0, #902	@ 0x386
 801c684:	bd38      	pop	{r3, r4, r5, pc}
 801c686:	200b      	movs	r0, #11
 801c688:	4770      	bx	lr
 801c68a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c68e:	bd38      	pop	{r3, r4, r5, pc}
 801c690:	200b      	movs	r0, #11
 801c692:	bd38      	pop	{r3, r4, r5, pc}

0801c694 <rcl_wait_set_clear>:
 801c694:	2800      	cmp	r0, #0
 801c696:	d074      	beq.n	801c782 <rcl_wait_set_clear+0xee>
 801c698:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c69a:	b510      	push	{r4, lr}
 801c69c:	4604      	mov	r4, r0
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d071      	beq.n	801c786 <rcl_wait_set_clear+0xf2>
 801c6a2:	6800      	ldr	r0, [r0, #0]
 801c6a4:	b138      	cbz	r0, 801c6b6 <rcl_wait_set_clear+0x22>
 801c6a6:	6862      	ldr	r2, [r4, #4]
 801c6a8:	2100      	movs	r1, #0
 801c6aa:	0092      	lsls	r2, r2, #2
 801c6ac:	f005 fe28 	bl	8022300 <memset>
 801c6b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	601a      	str	r2, [r3, #0]
 801c6b6:	68a0      	ldr	r0, [r4, #8]
 801c6b8:	b138      	cbz	r0, 801c6ca <rcl_wait_set_clear+0x36>
 801c6ba:	68e2      	ldr	r2, [r4, #12]
 801c6bc:	2100      	movs	r1, #0
 801c6be:	0092      	lsls	r2, r2, #2
 801c6c0:	f005 fe1e 	bl	8022300 <memset>
 801c6c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	60da      	str	r2, [r3, #12]
 801c6ca:	69a0      	ldr	r0, [r4, #24]
 801c6cc:	b138      	cbz	r0, 801c6de <rcl_wait_set_clear+0x4a>
 801c6ce:	69e2      	ldr	r2, [r4, #28]
 801c6d0:	2100      	movs	r1, #0
 801c6d2:	0092      	lsls	r2, r2, #2
 801c6d4:	f005 fe14 	bl	8022300 <memset>
 801c6d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6da:	2200      	movs	r2, #0
 801c6dc:	619a      	str	r2, [r3, #24]
 801c6de:	6a20      	ldr	r0, [r4, #32]
 801c6e0:	b138      	cbz	r0, 801c6f2 <rcl_wait_set_clear+0x5e>
 801c6e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801c6e4:	2100      	movs	r1, #0
 801c6e6:	0092      	lsls	r2, r2, #2
 801c6e8:	f005 fe0a 	bl	8022300 <memset>
 801c6ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	625a      	str	r2, [r3, #36]	@ 0x24
 801c6f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c6f4:	b138      	cbz	r0, 801c706 <rcl_wait_set_clear+0x72>
 801c6f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c6f8:	2100      	movs	r1, #0
 801c6fa:	0092      	lsls	r2, r2, #2
 801c6fc:	f005 fe00 	bl	8022300 <memset>
 801c700:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c702:	2200      	movs	r2, #0
 801c704:	631a      	str	r2, [r3, #48]	@ 0x30
 801c706:	6920      	ldr	r0, [r4, #16]
 801c708:	b138      	cbz	r0, 801c71a <rcl_wait_set_clear+0x86>
 801c70a:	6962      	ldr	r2, [r4, #20]
 801c70c:	2100      	movs	r1, #0
 801c70e:	0092      	lsls	r2, r2, #2
 801c710:	f005 fdf6 	bl	8022300 <memset>
 801c714:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c716:	2200      	movs	r2, #0
 801c718:	641a      	str	r2, [r3, #64]	@ 0x40
 801c71a:	6898      	ldr	r0, [r3, #8]
 801c71c:	b138      	cbz	r0, 801c72e <rcl_wait_set_clear+0x9a>
 801c71e:	685a      	ldr	r2, [r3, #4]
 801c720:	2100      	movs	r1, #0
 801c722:	0092      	lsls	r2, r2, #2
 801c724:	f005 fdec 	bl	8022300 <memset>
 801c728:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c72a:	2200      	movs	r2, #0
 801c72c:	605a      	str	r2, [r3, #4]
 801c72e:	6958      	ldr	r0, [r3, #20]
 801c730:	b138      	cbz	r0, 801c742 <rcl_wait_set_clear+0xae>
 801c732:	691a      	ldr	r2, [r3, #16]
 801c734:	2100      	movs	r1, #0
 801c736:	0092      	lsls	r2, r2, #2
 801c738:	f005 fde2 	bl	8022300 <memset>
 801c73c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c73e:	2200      	movs	r2, #0
 801c740:	611a      	str	r2, [r3, #16]
 801c742:	6a18      	ldr	r0, [r3, #32]
 801c744:	b138      	cbz	r0, 801c756 <rcl_wait_set_clear+0xc2>
 801c746:	69da      	ldr	r2, [r3, #28]
 801c748:	2100      	movs	r1, #0
 801c74a:	0092      	lsls	r2, r2, #2
 801c74c:	f005 fdd8 	bl	8022300 <memset>
 801c750:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c752:	2200      	movs	r2, #0
 801c754:	61da      	str	r2, [r3, #28]
 801c756:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801c758:	b138      	cbz	r0, 801c76a <rcl_wait_set_clear+0xd6>
 801c75a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c75c:	2100      	movs	r1, #0
 801c75e:	0092      	lsls	r2, r2, #2
 801c760:	f005 fdce 	bl	8022300 <memset>
 801c764:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c766:	2200      	movs	r2, #0
 801c768:	629a      	str	r2, [r3, #40]	@ 0x28
 801c76a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801c76c:	b140      	cbz	r0, 801c780 <rcl_wait_set_clear+0xec>
 801c76e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c770:	2100      	movs	r1, #0
 801c772:	0092      	lsls	r2, r2, #2
 801c774:	f005 fdc4 	bl	8022300 <memset>
 801c778:	2300      	movs	r3, #0
 801c77a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c77c:	4618      	mov	r0, r3
 801c77e:	6353      	str	r3, [r2, #52]	@ 0x34
 801c780:	bd10      	pop	{r4, pc}
 801c782:	200b      	movs	r0, #11
 801c784:	4770      	bx	lr
 801c786:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c78a:	bd10      	pop	{r4, pc}

0801c78c <rcl_wait_set_resize>:
 801c78c:	2800      	cmp	r0, #0
 801c78e:	f000 8180 	beq.w	801ca92 <rcl_wait_set_resize+0x306>
 801c792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c796:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801c798:	b083      	sub	sp, #12
 801c79a:	4605      	mov	r5, r0
 801c79c:	2c00      	cmp	r4, #0
 801c79e:	f000 817a 	beq.w	801ca96 <rcl_wait_set_resize+0x30a>
 801c7a2:	f04f 0900 	mov.w	r9, #0
 801c7a6:	461f      	mov	r7, r3
 801c7a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801c7ac:	4688      	mov	r8, r1
 801c7ae:	4616      	mov	r6, r2
 801c7b0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801c7b4:	f8c0 9004 	str.w	r9, [r0, #4]
 801c7b8:	f8c4 9000 	str.w	r9, [r4]
 801c7bc:	2900      	cmp	r1, #0
 801c7be:	f000 80bf 	beq.w	801c940 <rcl_wait_set_resize+0x1b4>
 801c7c2:	008c      	lsls	r4, r1, #2
 801c7c4:	4652      	mov	r2, sl
 801c7c6:	6800      	ldr	r0, [r0, #0]
 801c7c8:	4621      	mov	r1, r4
 801c7ca:	9301      	str	r3, [sp, #4]
 801c7cc:	4798      	blx	r3
 801c7ce:	9b01      	ldr	r3, [sp, #4]
 801c7d0:	6028      	str	r0, [r5, #0]
 801c7d2:	2800      	cmp	r0, #0
 801c7d4:	f000 80f6 	beq.w	801c9c4 <rcl_wait_set_resize+0x238>
 801c7d8:	4622      	mov	r2, r4
 801c7da:	4649      	mov	r1, r9
 801c7dc:	9301      	str	r3, [sp, #4]
 801c7de:	f005 fd8f 	bl	8022300 <memset>
 801c7e2:	f8c5 8004 	str.w	r8, [r5, #4]
 801c7e6:	4652      	mov	r2, sl
 801c7e8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801c7ec:	4621      	mov	r1, r4
 801c7ee:	9b01      	ldr	r3, [sp, #4]
 801c7f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c7f4:	f8c8 9004 	str.w	r9, [r8, #4]
 801c7f8:	4798      	blx	r3
 801c7fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c7fc:	f8c8 0008 	str.w	r0, [r8, #8]
 801c800:	689b      	ldr	r3, [r3, #8]
 801c802:	2b00      	cmp	r3, #0
 801c804:	f000 814a 	beq.w	801ca9c <rcl_wait_set_resize+0x310>
 801c808:	4622      	mov	r2, r4
 801c80a:	4649      	mov	r1, r9
 801c80c:	4618      	mov	r0, r3
 801c80e:	f005 fd77 	bl	8022300 <memset>
 801c812:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c814:	f04f 0800 	mov.w	r8, #0
 801c818:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c81c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801c820:	f8c5 800c 	str.w	r8, [r5, #12]
 801c824:	f8c4 800c 	str.w	r8, [r4, #12]
 801c828:	2e00      	cmp	r6, #0
 801c82a:	f040 809b 	bne.w	801c964 <rcl_wait_set_resize+0x1d8>
 801c82e:	68a8      	ldr	r0, [r5, #8]
 801c830:	b128      	cbz	r0, 801c83e <rcl_wait_set_resize+0xb2>
 801c832:	4649      	mov	r1, r9
 801c834:	4790      	blx	r2
 801c836:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c838:	60ae      	str	r6, [r5, #8]
 801c83a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c83e:	f04f 0800 	mov.w	r8, #0
 801c842:	19f6      	adds	r6, r6, r7
 801c844:	f8c4 8010 	str.w	r8, [r4, #16]
 801c848:	f040 80a2 	bne.w	801c990 <rcl_wait_set_resize+0x204>
 801c84c:	6960      	ldr	r0, [r4, #20]
 801c84e:	b130      	cbz	r0, 801c85e <rcl_wait_set_resize+0xd2>
 801c850:	4649      	mov	r1, r9
 801c852:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801c854:	4798      	blx	r3
 801c856:	6166      	str	r6, [r4, #20]
 801c858:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c85a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c85e:	2600      	movs	r6, #0
 801c860:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c864:	616e      	str	r6, [r5, #20]
 801c866:	6426      	str	r6, [r4, #64]	@ 0x40
 801c868:	2f00      	cmp	r7, #0
 801c86a:	f040 80af 	bne.w	801c9cc <rcl_wait_set_resize+0x240>
 801c86e:	6928      	ldr	r0, [r5, #16]
 801c870:	b138      	cbz	r0, 801c882 <rcl_wait_set_resize+0xf6>
 801c872:	4649      	mov	r1, r9
 801c874:	47d0      	blx	sl
 801c876:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c878:	612f      	str	r7, [r5, #16]
 801c87a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c87e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c882:	2600      	movs	r6, #0
 801c884:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c886:	61ee      	str	r6, [r5, #28]
 801c888:	61a6      	str	r6, [r4, #24]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	f040 8093 	bne.w	801c9b6 <rcl_wait_set_resize+0x22a>
 801c890:	69a8      	ldr	r0, [r5, #24]
 801c892:	b120      	cbz	r0, 801c89e <rcl_wait_set_resize+0x112>
 801c894:	4649      	mov	r1, r9
 801c896:	47d0      	blx	sl
 801c898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c89a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c89c:	61ab      	str	r3, [r5, #24]
 801c89e:	6a20      	ldr	r0, [r4, #32]
 801c8a0:	b128      	cbz	r0, 801c8ae <rcl_wait_set_resize+0x122>
 801c8a2:	4649      	mov	r1, r9
 801c8a4:	47d0      	blx	sl
 801c8a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c8ae:	2600      	movs	r6, #0
 801c8b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8b2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c8b4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c8b8:	626e      	str	r6, [r5, #36]	@ 0x24
 801c8ba:	6266      	str	r6, [r4, #36]	@ 0x24
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	f000 8098 	beq.w	801c9f2 <rcl_wait_set_resize+0x266>
 801c8c2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c8c6:	463a      	mov	r2, r7
 801c8c8:	6a28      	ldr	r0, [r5, #32]
 801c8ca:	4651      	mov	r1, sl
 801c8cc:	47c8      	blx	r9
 801c8ce:	6228      	str	r0, [r5, #32]
 801c8d0:	2800      	cmp	r0, #0
 801c8d2:	d077      	beq.n	801c9c4 <rcl_wait_set_resize+0x238>
 801c8d4:	4652      	mov	r2, sl
 801c8d6:	4631      	mov	r1, r6
 801c8d8:	f005 fd12 	bl	8022300 <memset>
 801c8dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8e0:	463a      	mov	r2, r7
 801c8e2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c8e4:	4651      	mov	r1, sl
 801c8e6:	626b      	str	r3, [r5, #36]	@ 0x24
 801c8e8:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c8ea:	47c8      	blx	r9
 801c8ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c8ee:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c8f0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801c8f2:	2c00      	cmp	r4, #0
 801c8f4:	f000 80f2 	beq.w	801cadc <rcl_wait_set_resize+0x350>
 801c8f8:	4620      	mov	r0, r4
 801c8fa:	4652      	mov	r2, sl
 801c8fc:	4631      	mov	r1, r6
 801c8fe:	f005 fcff 	bl	8022300 <memset>
 801c902:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c904:	2600      	movs	r6, #0
 801c906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c908:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c90a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c90e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801c910:	6326      	str	r6, [r4, #48]	@ 0x30
 801c912:	2b00      	cmp	r3, #0
 801c914:	f040 8097 	bne.w	801ca46 <rcl_wait_set_resize+0x2ba>
 801c918:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c91a:	b120      	cbz	r0, 801c926 <rcl_wait_set_resize+0x19a>
 801c91c:	4639      	mov	r1, r7
 801c91e:	47c0      	blx	r8
 801c920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c922:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c924:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c926:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801c928:	2800      	cmp	r0, #0
 801c92a:	d04c      	beq.n	801c9c6 <rcl_wait_set_resize+0x23a>
 801c92c:	4639      	mov	r1, r7
 801c92e:	47c0      	blx	r8
 801c930:	2300      	movs	r3, #0
 801c932:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801c934:	4618      	mov	r0, r3
 801c936:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801c93a:	b003      	add	sp, #12
 801c93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c940:	6800      	ldr	r0, [r0, #0]
 801c942:	b120      	cbz	r0, 801c94e <rcl_wait_set_resize+0x1c2>
 801c944:	4651      	mov	r1, sl
 801c946:	47d8      	blx	fp
 801c948:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c94a:	f8c5 8000 	str.w	r8, [r5]
 801c94e:	68a0      	ldr	r0, [r4, #8]
 801c950:	2800      	cmp	r0, #0
 801c952:	f43f af5f 	beq.w	801c814 <rcl_wait_set_resize+0x88>
 801c956:	4651      	mov	r1, sl
 801c958:	47d8      	blx	fp
 801c95a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c95c:	2300      	movs	r3, #0
 801c95e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c962:	e757      	b.n	801c814 <rcl_wait_set_resize+0x88>
 801c964:	00b4      	lsls	r4, r6, #2
 801c966:	464a      	mov	r2, r9
 801c968:	68a8      	ldr	r0, [r5, #8]
 801c96a:	4621      	mov	r1, r4
 801c96c:	4798      	blx	r3
 801c96e:	60a8      	str	r0, [r5, #8]
 801c970:	b340      	cbz	r0, 801c9c4 <rcl_wait_set_resize+0x238>
 801c972:	4622      	mov	r2, r4
 801c974:	4641      	mov	r1, r8
 801c976:	f005 fcc3 	bl	8022300 <memset>
 801c97a:	f04f 0800 	mov.w	r8, #0
 801c97e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c980:	60ee      	str	r6, [r5, #12]
 801c982:	19f6      	adds	r6, r6, r7
 801c984:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c988:	f8c4 8010 	str.w	r8, [r4, #16]
 801c98c:	f43f af5e 	beq.w	801c84c <rcl_wait_set_resize+0xc0>
 801c990:	00b6      	lsls	r6, r6, #2
 801c992:	464a      	mov	r2, r9
 801c994:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801c996:	6960      	ldr	r0, [r4, #20]
 801c998:	4631      	mov	r1, r6
 801c99a:	4798      	blx	r3
 801c99c:	4681      	mov	r9, r0
 801c99e:	6160      	str	r0, [r4, #20]
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	f000 8084 	beq.w	801caae <rcl_wait_set_resize+0x322>
 801c9a6:	4632      	mov	r2, r6
 801c9a8:	4641      	mov	r1, r8
 801c9aa:	f005 fca9 	bl	8022300 <memset>
 801c9ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c9b4:	e753      	b.n	801c85e <rcl_wait_set_resize+0xd2>
 801c9b6:	009c      	lsls	r4, r3, #2
 801c9b8:	464a      	mov	r2, r9
 801c9ba:	69a8      	ldr	r0, [r5, #24]
 801c9bc:	4621      	mov	r1, r4
 801c9be:	47c0      	blx	r8
 801c9c0:	61a8      	str	r0, [r5, #24]
 801c9c2:	bb40      	cbnz	r0, 801ca16 <rcl_wait_set_resize+0x28a>
 801c9c4:	200a      	movs	r0, #10
 801c9c6:	b003      	add	sp, #12
 801c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9cc:	00bc      	lsls	r4, r7, #2
 801c9ce:	464a      	mov	r2, r9
 801c9d0:	6928      	ldr	r0, [r5, #16]
 801c9d2:	4621      	mov	r1, r4
 801c9d4:	47c0      	blx	r8
 801c9d6:	6128      	str	r0, [r5, #16]
 801c9d8:	2800      	cmp	r0, #0
 801c9da:	d0f3      	beq.n	801c9c4 <rcl_wait_set_resize+0x238>
 801c9dc:	4622      	mov	r2, r4
 801c9de:	4631      	mov	r1, r6
 801c9e0:	f005 fc8e 	bl	8022300 <memset>
 801c9e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9e6:	616f      	str	r7, [r5, #20]
 801c9e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c9ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c9f0:	e747      	b.n	801c882 <rcl_wait_set_resize+0xf6>
 801c9f2:	6a28      	ldr	r0, [r5, #32]
 801c9f4:	b120      	cbz	r0, 801ca00 <rcl_wait_set_resize+0x274>
 801c9f6:	4639      	mov	r1, r7
 801c9f8:	47c0      	blx	r8
 801c9fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9fe:	622b      	str	r3, [r5, #32]
 801ca00:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801ca02:	2800      	cmp	r0, #0
 801ca04:	f43f af7e 	beq.w	801c904 <rcl_wait_set_resize+0x178>
 801ca08:	4639      	mov	r1, r7
 801ca0a:	47c0      	blx	r8
 801ca0c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca0e:	2300      	movs	r3, #0
 801ca10:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801ca14:	e776      	b.n	801c904 <rcl_wait_set_resize+0x178>
 801ca16:	4622      	mov	r2, r4
 801ca18:	4631      	mov	r1, r6
 801ca1a:	f005 fc71 	bl	8022300 <memset>
 801ca1e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801ca20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca22:	464a      	mov	r2, r9
 801ca24:	6a38      	ldr	r0, [r7, #32]
 801ca26:	4621      	mov	r1, r4
 801ca28:	61eb      	str	r3, [r5, #28]
 801ca2a:	61fe      	str	r6, [r7, #28]
 801ca2c:	47c0      	blx	r8
 801ca2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca30:	6238      	str	r0, [r7, #32]
 801ca32:	6a1f      	ldr	r7, [r3, #32]
 801ca34:	2f00      	cmp	r7, #0
 801ca36:	d04a      	beq.n	801cace <rcl_wait_set_resize+0x342>
 801ca38:	4622      	mov	r2, r4
 801ca3a:	4631      	mov	r1, r6
 801ca3c:	4638      	mov	r0, r7
 801ca3e:	f005 fc5f 	bl	8022300 <memset>
 801ca42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca44:	e733      	b.n	801c8ae <rcl_wait_set_resize+0x122>
 801ca46:	009c      	lsls	r4, r3, #2
 801ca48:	463a      	mov	r2, r7
 801ca4a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ca4c:	4621      	mov	r1, r4
 801ca4e:	47c8      	blx	r9
 801ca50:	62a8      	str	r0, [r5, #40]	@ 0x28
 801ca52:	2800      	cmp	r0, #0
 801ca54:	d0b6      	beq.n	801c9c4 <rcl_wait_set_resize+0x238>
 801ca56:	4622      	mov	r2, r4
 801ca58:	4631      	mov	r1, r6
 801ca5a:	f005 fc51 	bl	8022300 <memset>
 801ca5e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801ca62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca64:	463a      	mov	r2, r7
 801ca66:	4621      	mov	r1, r4
 801ca68:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801ca6c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801ca6e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801ca72:	47c8      	blx	r9
 801ca74:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca76:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801ca7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d034      	beq.n	801caea <rcl_wait_set_resize+0x35e>
 801ca80:	4622      	mov	r2, r4
 801ca82:	4631      	mov	r1, r6
 801ca84:	4618      	mov	r0, r3
 801ca86:	f005 fc3b 	bl	8022300 <memset>
 801ca8a:	4630      	mov	r0, r6
 801ca8c:	b003      	add	sp, #12
 801ca8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca92:	200b      	movs	r0, #11
 801ca94:	4770      	bx	lr
 801ca96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ca9a:	e794      	b.n	801c9c6 <rcl_wait_set_resize+0x23a>
 801ca9c:	6828      	ldr	r0, [r5, #0]
 801ca9e:	4651      	mov	r1, sl
 801caa0:	9301      	str	r3, [sp, #4]
 801caa2:	47d8      	blx	fp
 801caa4:	9b01      	ldr	r3, [sp, #4]
 801caa6:	200a      	movs	r0, #10
 801caa8:	e9c5 3300 	strd	r3, r3, [r5]
 801caac:	e78b      	b.n	801c9c6 <rcl_wait_set_resize+0x23a>
 801caae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cab0:	68a8      	ldr	r0, [r5, #8]
 801cab2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801cab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cab6:	4798      	blx	r3
 801cab8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801caba:	6928      	ldr	r0, [r5, #16]
 801cabc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801cabe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801cac0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801cac4:	4790      	blx	r2
 801cac6:	200a      	movs	r0, #10
 801cac8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801cacc:	e77b      	b.n	801c9c6 <rcl_wait_set_resize+0x23a>
 801cace:	69a8      	ldr	r0, [r5, #24]
 801cad0:	4649      	mov	r1, r9
 801cad2:	47d0      	blx	sl
 801cad4:	200a      	movs	r0, #10
 801cad6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801cada:	e774      	b.n	801c9c6 <rcl_wait_set_resize+0x23a>
 801cadc:	6a28      	ldr	r0, [r5, #32]
 801cade:	4639      	mov	r1, r7
 801cae0:	47c0      	blx	r8
 801cae2:	200a      	movs	r0, #10
 801cae4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801cae8:	e76d      	b.n	801c9c6 <rcl_wait_set_resize+0x23a>
 801caea:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801caec:	4639      	mov	r1, r7
 801caee:	9301      	str	r3, [sp, #4]
 801caf0:	47c0      	blx	r8
 801caf2:	9b01      	ldr	r3, [sp, #4]
 801caf4:	200a      	movs	r0, #10
 801caf6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801cafa:	e764      	b.n	801c9c6 <rcl_wait_set_resize+0x23a>

0801cafc <rcl_wait_set_init>:
 801cafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb00:	b085      	sub	sp, #20
 801cb02:	4605      	mov	r5, r0
 801cb04:	460e      	mov	r6, r1
 801cb06:	4617      	mov	r7, r2
 801cb08:	a812      	add	r0, sp, #72	@ 0x48
 801cb0a:	4698      	mov	r8, r3
 801cb0c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801cb10:	f7f8 fcf2 	bl	80154f8 <rcutils_allocator_is_valid>
 801cb14:	2d00      	cmp	r5, #0
 801cb16:	d072      	beq.n	801cbfe <rcl_wait_set_init+0x102>
 801cb18:	f080 0001 	eor.w	r0, r0, #1
 801cb1c:	b2c0      	uxtb	r0, r0
 801cb1e:	2800      	cmp	r0, #0
 801cb20:	d16d      	bne.n	801cbfe <rcl_wait_set_init+0x102>
 801cb22:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801cb26:	f1ba 0f00 	cmp.w	sl, #0
 801cb2a:	d004      	beq.n	801cb36 <rcl_wait_set_init+0x3a>
 801cb2c:	2464      	movs	r4, #100	@ 0x64
 801cb2e:	4620      	mov	r0, r4
 801cb30:	b005      	add	sp, #20
 801cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb36:	f1b9 0f00 	cmp.w	r9, #0
 801cb3a:	d060      	beq.n	801cbfe <rcl_wait_set_init+0x102>
 801cb3c:	4648      	mov	r0, r9
 801cb3e:	f7fe f807 	bl	801ab50 <rcl_context_is_valid>
 801cb42:	2800      	cmp	r0, #0
 801cb44:	d068      	beq.n	801cc18 <rcl_wait_set_init+0x11c>
 801cb46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cb48:	205c      	movs	r0, #92	@ 0x5c
 801cb4a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cb4c:	4798      	blx	r3
 801cb4e:	6328      	str	r0, [r5, #48]	@ 0x30
 801cb50:	2800      	cmp	r0, #0
 801cb52:	d063      	beq.n	801cc1c <rcl_wait_set_init+0x120>
 801cb54:	225c      	movs	r2, #92	@ 0x5c
 801cb56:	4651      	mov	r1, sl
 801cb58:	f005 fbd2 	bl	8022300 <memset>
 801cb5c:	ac12      	add	r4, sp, #72	@ 0x48
 801cb5e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801cb62:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801cb66:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801cb6a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801cb6e:	eb03 0e02 	add.w	lr, r3, r2
 801cb72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb74:	f8d9 9000 	ldr.w	r9, [r9]
 801cb78:	449e      	add	lr, r3
 801cb7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cb7c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801cb80:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801cb84:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801cb88:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801cb8c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801cb90:	44be      	add	lr, r7
 801cb92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb96:	6823      	ldr	r3, [r4, #0]
 801cb98:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801cb9c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801cba0:	f8cc 3000 	str.w	r3, [ip]
 801cba4:	f002 ffa4 	bl	801faf0 <rmw_create_wait_set>
 801cba8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cbaa:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801cbae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cbb0:	b350      	cbz	r0, 801cc08 <rcl_wait_set_init+0x10c>
 801cbb2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cbb4:	4643      	mov	r3, r8
 801cbb6:	463a      	mov	r2, r7
 801cbb8:	4631      	mov	r1, r6
 801cbba:	9402      	str	r4, [sp, #8]
 801cbbc:	4628      	mov	r0, r5
 801cbbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801cbc0:	9401      	str	r4, [sp, #4]
 801cbc2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801cbc4:	9400      	str	r4, [sp, #0]
 801cbc6:	f7ff fde1 	bl	801c78c <rcl_wait_set_resize>
 801cbca:	4604      	mov	r4, r0
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	d0ae      	beq.n	801cb2e <rcl_wait_set_init+0x32>
 801cbd0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cbd2:	bb2b      	cbnz	r3, 801cc20 <rcl_wait_set_init+0x124>
 801cbd4:	2600      	movs	r6, #0
 801cbd6:	4628      	mov	r0, r5
 801cbd8:	4633      	mov	r3, r6
 801cbda:	4632      	mov	r2, r6
 801cbdc:	4631      	mov	r1, r6
 801cbde:	9600      	str	r6, [sp, #0]
 801cbe0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801cbe4:	f7ff fdd2 	bl	801c78c <rcl_wait_set_resize>
 801cbe8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cbea:	2800      	cmp	r0, #0
 801cbec:	d09f      	beq.n	801cb2e <rcl_wait_set_init+0x32>
 801cbee:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cbf0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801cbf2:	4798      	blx	r3
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	632e      	str	r6, [r5, #48]	@ 0x30
 801cbf8:	b005      	add	sp, #20
 801cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbfe:	240b      	movs	r4, #11
 801cc00:	4620      	mov	r0, r4
 801cc02:	b005      	add	sp, #20
 801cc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc08:	2401      	movs	r4, #1
 801cc0a:	f002 ff7b 	bl	801fb04 <rmw_destroy_wait_set>
 801cc0e:	2800      	cmp	r0, #0
 801cc10:	bf18      	it	ne
 801cc12:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801cc16:	e7dd      	b.n	801cbd4 <rcl_wait_set_init+0xd8>
 801cc18:	2465      	movs	r4, #101	@ 0x65
 801cc1a:	e788      	b.n	801cb2e <rcl_wait_set_init+0x32>
 801cc1c:	240a      	movs	r4, #10
 801cc1e:	e786      	b.n	801cb2e <rcl_wait_set_init+0x32>
 801cc20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cc22:	e7f2      	b.n	801cc0a <rcl_wait_set_init+0x10e>

0801cc24 <rcl_wait_set_add_guard_condition>:
 801cc24:	b318      	cbz	r0, 801cc6e <rcl_wait_set_add_guard_condition+0x4a>
 801cc26:	b538      	push	{r3, r4, r5, lr}
 801cc28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cc2a:	4604      	mov	r4, r0
 801cc2c:	b30b      	cbz	r3, 801cc72 <rcl_wait_set_add_guard_condition+0x4e>
 801cc2e:	b319      	cbz	r1, 801cc78 <rcl_wait_set_add_guard_condition+0x54>
 801cc30:	68dd      	ldr	r5, [r3, #12]
 801cc32:	68c0      	ldr	r0, [r0, #12]
 801cc34:	4285      	cmp	r5, r0
 801cc36:	d217      	bcs.n	801cc68 <rcl_wait_set_add_guard_condition+0x44>
 801cc38:	1c68      	adds	r0, r5, #1
 801cc3a:	60d8      	str	r0, [r3, #12]
 801cc3c:	68a3      	ldr	r3, [r4, #8]
 801cc3e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cc42:	b102      	cbz	r2, 801cc46 <rcl_wait_set_add_guard_condition+0x22>
 801cc44:	6015      	str	r5, [r2, #0]
 801cc46:	4608      	mov	r0, r1
 801cc48:	f004 fc02 	bl	8021450 <rcl_guard_condition_get_rmw_handle>
 801cc4c:	b150      	cbz	r0, 801cc64 <rcl_wait_set_add_guard_condition+0x40>
 801cc4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc50:	6842      	ldr	r2, [r0, #4]
 801cc52:	2000      	movs	r0, #0
 801cc54:	695b      	ldr	r3, [r3, #20]
 801cc56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc5a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cc5c:	6913      	ldr	r3, [r2, #16]
 801cc5e:	3301      	adds	r3, #1
 801cc60:	6113      	str	r3, [r2, #16]
 801cc62:	bd38      	pop	{r3, r4, r5, pc}
 801cc64:	2001      	movs	r0, #1
 801cc66:	bd38      	pop	{r3, r4, r5, pc}
 801cc68:	f240 3086 	movw	r0, #902	@ 0x386
 801cc6c:	bd38      	pop	{r3, r4, r5, pc}
 801cc6e:	200b      	movs	r0, #11
 801cc70:	4770      	bx	lr
 801cc72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cc76:	bd38      	pop	{r3, r4, r5, pc}
 801cc78:	200b      	movs	r0, #11
 801cc7a:	bd38      	pop	{r3, r4, r5, pc}

0801cc7c <rcl_wait_set_add_timer>:
 801cc7c:	b328      	cbz	r0, 801ccca <rcl_wait_set_add_timer+0x4e>
 801cc7e:	b538      	push	{r3, r4, r5, lr}
 801cc80:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cc82:	4604      	mov	r4, r0
 801cc84:	b31b      	cbz	r3, 801ccce <rcl_wait_set_add_timer+0x52>
 801cc86:	b329      	cbz	r1, 801ccd4 <rcl_wait_set_add_timer+0x58>
 801cc88:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801cc8a:	6965      	ldr	r5, [r4, #20]
 801cc8c:	42a8      	cmp	r0, r5
 801cc8e:	d219      	bcs.n	801ccc4 <rcl_wait_set_add_timer+0x48>
 801cc90:	1c45      	adds	r5, r0, #1
 801cc92:	641d      	str	r5, [r3, #64]	@ 0x40
 801cc94:	6923      	ldr	r3, [r4, #16]
 801cc96:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cc9a:	b102      	cbz	r2, 801cc9e <rcl_wait_set_add_timer+0x22>
 801cc9c:	6010      	str	r0, [r2, #0]
 801cc9e:	4608      	mov	r0, r1
 801cca0:	f7ff fb9a 	bl	801c3d8 <rcl_timer_get_guard_condition>
 801cca4:	b168      	cbz	r0, 801ccc2 <rcl_wait_set_add_timer+0x46>
 801cca6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cca8:	68e3      	ldr	r3, [r4, #12]
 801ccaa:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801ccac:	3b01      	subs	r3, #1
 801ccae:	441d      	add	r5, r3
 801ccb0:	f004 fbce 	bl	8021450 <rcl_guard_condition_get_rmw_handle>
 801ccb4:	b180      	cbz	r0, 801ccd8 <rcl_wait_set_add_timer+0x5c>
 801ccb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccb8:	6842      	ldr	r2, [r0, #4]
 801ccba:	2000      	movs	r0, #0
 801ccbc:	695b      	ldr	r3, [r3, #20]
 801ccbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ccc2:	bd38      	pop	{r3, r4, r5, pc}
 801ccc4:	f240 3086 	movw	r0, #902	@ 0x386
 801ccc8:	bd38      	pop	{r3, r4, r5, pc}
 801ccca:	200b      	movs	r0, #11
 801cccc:	4770      	bx	lr
 801ccce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ccd2:	bd38      	pop	{r3, r4, r5, pc}
 801ccd4:	200b      	movs	r0, #11
 801ccd6:	bd38      	pop	{r3, r4, r5, pc}
 801ccd8:	2001      	movs	r0, #1
 801ccda:	bd38      	pop	{r3, r4, r5, pc}

0801ccdc <rcl_wait_set_add_client>:
 801ccdc:	b318      	cbz	r0, 801cd26 <rcl_wait_set_add_client+0x4a>
 801ccde:	b538      	push	{r3, r4, r5, lr}
 801cce0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cce2:	4604      	mov	r4, r0
 801cce4:	b30b      	cbz	r3, 801cd2a <rcl_wait_set_add_client+0x4e>
 801cce6:	b319      	cbz	r1, 801cd30 <rcl_wait_set_add_client+0x54>
 801cce8:	699d      	ldr	r5, [r3, #24]
 801ccea:	69c0      	ldr	r0, [r0, #28]
 801ccec:	4285      	cmp	r5, r0
 801ccee:	d217      	bcs.n	801cd20 <rcl_wait_set_add_client+0x44>
 801ccf0:	1c68      	adds	r0, r5, #1
 801ccf2:	6198      	str	r0, [r3, #24]
 801ccf4:	69a3      	ldr	r3, [r4, #24]
 801ccf6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ccfa:	b102      	cbz	r2, 801ccfe <rcl_wait_set_add_client+0x22>
 801ccfc:	6015      	str	r5, [r2, #0]
 801ccfe:	4608      	mov	r0, r1
 801cd00:	f7fd fe78 	bl	801a9f4 <rcl_client_get_rmw_handle>
 801cd04:	b150      	cbz	r0, 801cd1c <rcl_wait_set_add_client+0x40>
 801cd06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd08:	6842      	ldr	r2, [r0, #4]
 801cd0a:	2000      	movs	r0, #0
 801cd0c:	6a1b      	ldr	r3, [r3, #32]
 801cd0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cd14:	69d3      	ldr	r3, [r2, #28]
 801cd16:	3301      	adds	r3, #1
 801cd18:	61d3      	str	r3, [r2, #28]
 801cd1a:	bd38      	pop	{r3, r4, r5, pc}
 801cd1c:	2001      	movs	r0, #1
 801cd1e:	bd38      	pop	{r3, r4, r5, pc}
 801cd20:	f240 3086 	movw	r0, #902	@ 0x386
 801cd24:	bd38      	pop	{r3, r4, r5, pc}
 801cd26:	200b      	movs	r0, #11
 801cd28:	4770      	bx	lr
 801cd2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cd2e:	bd38      	pop	{r3, r4, r5, pc}
 801cd30:	200b      	movs	r0, #11
 801cd32:	bd38      	pop	{r3, r4, r5, pc}

0801cd34 <rcl_wait_set_add_service>:
 801cd34:	b318      	cbz	r0, 801cd7e <rcl_wait_set_add_service+0x4a>
 801cd36:	b538      	push	{r3, r4, r5, lr}
 801cd38:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd3a:	4604      	mov	r4, r0
 801cd3c:	b30b      	cbz	r3, 801cd82 <rcl_wait_set_add_service+0x4e>
 801cd3e:	b319      	cbz	r1, 801cd88 <rcl_wait_set_add_service+0x54>
 801cd40:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801cd42:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801cd44:	4285      	cmp	r5, r0
 801cd46:	d217      	bcs.n	801cd78 <rcl_wait_set_add_service+0x44>
 801cd48:	1c68      	adds	r0, r5, #1
 801cd4a:	6258      	str	r0, [r3, #36]	@ 0x24
 801cd4c:	6a23      	ldr	r3, [r4, #32]
 801cd4e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cd52:	b102      	cbz	r2, 801cd56 <rcl_wait_set_add_service+0x22>
 801cd54:	6015      	str	r5, [r2, #0]
 801cd56:	4608      	mov	r0, r1
 801cd58:	f7fe fdc2 	bl	801b8e0 <rcl_service_get_rmw_handle>
 801cd5c:	b150      	cbz	r0, 801cd74 <rcl_wait_set_add_service+0x40>
 801cd5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd60:	6842      	ldr	r2, [r0, #4]
 801cd62:	2000      	movs	r0, #0
 801cd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd6a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cd6c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801cd6e:	3301      	adds	r3, #1
 801cd70:	6293      	str	r3, [r2, #40]	@ 0x28
 801cd72:	bd38      	pop	{r3, r4, r5, pc}
 801cd74:	2001      	movs	r0, #1
 801cd76:	bd38      	pop	{r3, r4, r5, pc}
 801cd78:	f240 3086 	movw	r0, #902	@ 0x386
 801cd7c:	bd38      	pop	{r3, r4, r5, pc}
 801cd7e:	200b      	movs	r0, #11
 801cd80:	4770      	bx	lr
 801cd82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cd86:	bd38      	pop	{r3, r4, r5, pc}
 801cd88:	200b      	movs	r0, #11
 801cd8a:	bd38      	pop	{r3, r4, r5, pc}
 801cd8c:	0000      	movs	r0, r0
	...

0801cd90 <rcl_wait>:
 801cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd94:	ed2d 8b02 	vpush	{d8}
 801cd98:	b08d      	sub	sp, #52	@ 0x34
 801cd9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cd9e:	2800      	cmp	r0, #0
 801cda0:	f000 814f 	beq.w	801d042 <rcl_wait+0x2b2>
 801cda4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801cda6:	4605      	mov	r5, r0
 801cda8:	2e00      	cmp	r6, #0
 801cdaa:	f000 811a 	beq.w	801cfe2 <rcl_wait+0x252>
 801cdae:	6843      	ldr	r3, [r0, #4]
 801cdb0:	b983      	cbnz	r3, 801cdd4 <rcl_wait+0x44>
 801cdb2:	68eb      	ldr	r3, [r5, #12]
 801cdb4:	b973      	cbnz	r3, 801cdd4 <rcl_wait+0x44>
 801cdb6:	696b      	ldr	r3, [r5, #20]
 801cdb8:	b963      	cbnz	r3, 801cdd4 <rcl_wait+0x44>
 801cdba:	69eb      	ldr	r3, [r5, #28]
 801cdbc:	b953      	cbnz	r3, 801cdd4 <rcl_wait+0x44>
 801cdbe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801cdc0:	b943      	cbnz	r3, 801cdd4 <rcl_wait+0x44>
 801cdc2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801cdc4:	b933      	cbnz	r3, 801cdd4 <rcl_wait+0x44>
 801cdc6:	f240 3085 	movw	r0, #901	@ 0x385
 801cdca:	b00d      	add	sp, #52	@ 0x34
 801cdcc:	ecbd 8b02 	vpop	{d8}
 801cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdd4:	9b04      	ldr	r3, [sp, #16]
 801cdd6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801cdd8:	2b01      	cmp	r3, #1
 801cdda:	9b05      	ldr	r3, [sp, #20]
 801cddc:	f173 0300 	sbcs.w	r3, r3, #0
 801cde0:	f2c0 80f8 	blt.w	801cfd4 <rcl_wait+0x244>
 801cde4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801cde8:	2a00      	cmp	r2, #0
 801cdea:	f000 810f 	beq.w	801d00c <rcl_wait+0x27c>
 801cdee:	2400      	movs	r4, #0
 801cdf0:	4613      	mov	r3, r2
 801cdf2:	f240 3921 	movw	r9, #801	@ 0x321
 801cdf6:	4632      	mov	r2, r6
 801cdf8:	46a2      	mov	sl, r4
 801cdfa:	46a3      	mov	fp, r4
 801cdfc:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801d060 <rcl_wait+0x2d0>
 801ce00:	e014      	b.n	801ce2c <rcl_wait+0x9c>
 801ce02:	2800      	cmp	r0, #0
 801ce04:	d1e1      	bne.n	801cdca <rcl_wait+0x3a>
 801ce06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ce0a:	4542      	cmp	r2, r8
 801ce0c:	eb73 0107 	sbcs.w	r1, r3, r7
 801ce10:	da03      	bge.n	801ce1a <rcl_wait+0x8a>
 801ce12:	4690      	mov	r8, r2
 801ce14:	461f      	mov	r7, r3
 801ce16:	f04f 0b01 	mov.w	fp, #1
 801ce1a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ce1c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ce1e:	3401      	adds	r4, #1
 801ce20:	f14a 0a00 	adc.w	sl, sl, #0
 801ce24:	429c      	cmp	r4, r3
 801ce26:	f17a 0100 	sbcs.w	r1, sl, #0
 801ce2a:	d228      	bcs.n	801ce7e <rcl_wait+0xee>
 801ce2c:	6928      	ldr	r0, [r5, #16]
 801ce2e:	a908      	add	r1, sp, #32
 801ce30:	00a6      	lsls	r6, r4, #2
 801ce32:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ce36:	2800      	cmp	r0, #0
 801ce38:	d0f1      	beq.n	801ce1e <rcl_wait+0x8e>
 801ce3a:	68eb      	ldr	r3, [r5, #12]
 801ce3c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801ce40:	4423      	add	r3, r4
 801ce42:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801ce46:	f1be 0f00 	cmp.w	lr, #0
 801ce4a:	d006      	beq.n	801ce5a <rcl_wait+0xca>
 801ce4c:	6913      	ldr	r3, [r2, #16]
 801ce4e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801ce52:	3301      	adds	r3, #1
 801ce54:	6113      	str	r3, [r2, #16]
 801ce56:	692b      	ldr	r3, [r5, #16]
 801ce58:	5998      	ldr	r0, [r3, r6]
 801ce5a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ce5e:	f7ff fa89 	bl	801c374 <rcl_timer_get_time_until_next_call>
 801ce62:	4548      	cmp	r0, r9
 801ce64:	d1cd      	bne.n	801ce02 <rcl_wait+0x72>
 801ce66:	692b      	ldr	r3, [r5, #16]
 801ce68:	2200      	movs	r2, #0
 801ce6a:	3401      	adds	r4, #1
 801ce6c:	519a      	str	r2, [r3, r6]
 801ce6e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ce70:	f14a 0a00 	adc.w	sl, sl, #0
 801ce74:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ce76:	429c      	cmp	r4, r3
 801ce78:	f17a 0100 	sbcs.w	r1, sl, #0
 801ce7c:	d3d6      	bcc.n	801ce2c <rcl_wait+0x9c>
 801ce7e:	4659      	mov	r1, fp
 801ce80:	4616      	mov	r6, r2
 801ce82:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ce86:	4313      	orrs	r3, r2
 801ce88:	f040 80b4 	bne.w	801cff4 <rcl_wait+0x264>
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	2200      	movs	r2, #0
 801ce90:	460c      	mov	r4, r1
 801ce92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ce96:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801ce9a:	ab08      	add	r3, sp, #32
 801ce9c:	9302      	str	r3, [sp, #8]
 801ce9e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801cea2:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801cea4:	f106 0110 	add.w	r1, r6, #16
 801cea8:	9300      	str	r3, [sp, #0]
 801ceaa:	1d30      	adds	r0, r6, #4
 801ceac:	f106 031c 	add.w	r3, r6, #28
 801ceb0:	9201      	str	r2, [sp, #4]
 801ceb2:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801ceb6:	f002 fcb7 	bl	801f828 <rmw_wait>
 801ceba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cebc:	4680      	mov	r8, r0
 801cebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cec0:	b1e2      	cbz	r2, 801cefc <rcl_wait+0x16c>
 801cec2:	f04f 0900 	mov.w	r9, #0
 801cec6:	464f      	mov	r7, r9
 801cec8:	692a      	ldr	r2, [r5, #16]
 801ceca:	f10d 011f 	add.w	r1, sp, #31
 801cece:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801ced2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801ced6:	b160      	cbz	r0, 801cef2 <rcl_wait+0x162>
 801ced8:	f88d 701f 	strb.w	r7, [sp, #31]
 801cedc:	f7ff fa0e 	bl	801c2fc <rcl_timer_is_ready>
 801cee0:	2800      	cmp	r0, #0
 801cee2:	f47f af72 	bne.w	801cdca <rcl_wait+0x3a>
 801cee6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ceea:	b90b      	cbnz	r3, 801cef0 <rcl_wait+0x160>
 801ceec:	692a      	ldr	r2, [r5, #16]
 801ceee:	5193      	str	r3, [r2, r6]
 801cef0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cef2:	f109 0901 	add.w	r9, r9, #1
 801cef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cef8:	454a      	cmp	r2, r9
 801cefa:	d8e5      	bhi.n	801cec8 <rcl_wait+0x138>
 801cefc:	f038 0002 	bics.w	r0, r8, #2
 801cf00:	d176      	bne.n	801cff0 <rcl_wait+0x260>
 801cf02:	686f      	ldr	r7, [r5, #4]
 801cf04:	b17f      	cbz	r7, 801cf26 <rcl_wait+0x196>
 801cf06:	4602      	mov	r2, r0
 801cf08:	e002      	b.n	801cf10 <rcl_wait+0x180>
 801cf0a:	3201      	adds	r2, #1
 801cf0c:	42ba      	cmp	r2, r7
 801cf0e:	d00a      	beq.n	801cf26 <rcl_wait+0x196>
 801cf10:	6899      	ldr	r1, [r3, #8]
 801cf12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf16:	2900      	cmp	r1, #0
 801cf18:	d1f7      	bne.n	801cf0a <rcl_wait+0x17a>
 801cf1a:	682e      	ldr	r6, [r5, #0]
 801cf1c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf20:	3201      	adds	r2, #1
 801cf22:	42ba      	cmp	r2, r7
 801cf24:	d1f4      	bne.n	801cf10 <rcl_wait+0x180>
 801cf26:	68ef      	ldr	r7, [r5, #12]
 801cf28:	b17f      	cbz	r7, 801cf4a <rcl_wait+0x1ba>
 801cf2a:	2200      	movs	r2, #0
 801cf2c:	e002      	b.n	801cf34 <rcl_wait+0x1a4>
 801cf2e:	3201      	adds	r2, #1
 801cf30:	42ba      	cmp	r2, r7
 801cf32:	d00a      	beq.n	801cf4a <rcl_wait+0x1ba>
 801cf34:	6959      	ldr	r1, [r3, #20]
 801cf36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf3a:	2900      	cmp	r1, #0
 801cf3c:	d1f7      	bne.n	801cf2e <rcl_wait+0x19e>
 801cf3e:	68ae      	ldr	r6, [r5, #8]
 801cf40:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf44:	3201      	adds	r2, #1
 801cf46:	42ba      	cmp	r2, r7
 801cf48:	d1f4      	bne.n	801cf34 <rcl_wait+0x1a4>
 801cf4a:	69ef      	ldr	r7, [r5, #28]
 801cf4c:	b17f      	cbz	r7, 801cf6e <rcl_wait+0x1de>
 801cf4e:	2200      	movs	r2, #0
 801cf50:	e002      	b.n	801cf58 <rcl_wait+0x1c8>
 801cf52:	3201      	adds	r2, #1
 801cf54:	42ba      	cmp	r2, r7
 801cf56:	d00a      	beq.n	801cf6e <rcl_wait+0x1de>
 801cf58:	6a19      	ldr	r1, [r3, #32]
 801cf5a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf5e:	2900      	cmp	r1, #0
 801cf60:	d1f7      	bne.n	801cf52 <rcl_wait+0x1c2>
 801cf62:	69ae      	ldr	r6, [r5, #24]
 801cf64:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf68:	3201      	adds	r2, #1
 801cf6a:	42ba      	cmp	r2, r7
 801cf6c:	d1f4      	bne.n	801cf58 <rcl_wait+0x1c8>
 801cf6e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801cf70:	b17f      	cbz	r7, 801cf92 <rcl_wait+0x202>
 801cf72:	2200      	movs	r2, #0
 801cf74:	e002      	b.n	801cf7c <rcl_wait+0x1ec>
 801cf76:	3201      	adds	r2, #1
 801cf78:	42ba      	cmp	r2, r7
 801cf7a:	d00a      	beq.n	801cf92 <rcl_wait+0x202>
 801cf7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801cf7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf82:	2900      	cmp	r1, #0
 801cf84:	d1f7      	bne.n	801cf76 <rcl_wait+0x1e6>
 801cf86:	6a2e      	ldr	r6, [r5, #32]
 801cf88:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf8c:	3201      	adds	r2, #1
 801cf8e:	42ba      	cmp	r2, r7
 801cf90:	d1f4      	bne.n	801cf7c <rcl_wait+0x1ec>
 801cf92:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801cf94:	b17f      	cbz	r7, 801cfb6 <rcl_wait+0x226>
 801cf96:	2200      	movs	r2, #0
 801cf98:	e002      	b.n	801cfa0 <rcl_wait+0x210>
 801cf9a:	3201      	adds	r2, #1
 801cf9c:	42ba      	cmp	r2, r7
 801cf9e:	d00a      	beq.n	801cfb6 <rcl_wait+0x226>
 801cfa0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801cfa2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cfa6:	2900      	cmp	r1, #0
 801cfa8:	d1f7      	bne.n	801cf9a <rcl_wait+0x20a>
 801cfaa:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801cfac:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cfb0:	3201      	adds	r2, #1
 801cfb2:	42ba      	cmp	r2, r7
 801cfb4:	d1f4      	bne.n	801cfa0 <rcl_wait+0x210>
 801cfb6:	f1b8 0f02 	cmp.w	r8, #2
 801cfba:	f47f af06 	bne.w	801cdca <rcl_wait+0x3a>
 801cfbe:	f084 0301 	eor.w	r3, r4, #1
 801cfc2:	b2db      	uxtb	r3, r3
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	bf18      	it	ne
 801cfc8:	2002      	movne	r0, #2
 801cfca:	b00d      	add	sp, #52	@ 0x34
 801cfcc:	ecbd 8b02 	vpop	{d8}
 801cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfd4:	2a00      	cmp	r2, #0
 801cfd6:	d03a      	beq.n	801d04e <rcl_wait+0x2be>
 801cfd8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801cfdc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801cfe0:	e705      	b.n	801cdee <rcl_wait+0x5e>
 801cfe2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cfe6:	b00d      	add	sp, #52	@ 0x34
 801cfe8:	ecbd 8b02 	vpop	{d8}
 801cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cff0:	2001      	movs	r0, #1
 801cff2:	e6ea      	b.n	801cdca <rcl_wait+0x3a>
 801cff4:	9b04      	ldr	r3, [sp, #16]
 801cff6:	460c      	mov	r4, r1
 801cff8:	2b01      	cmp	r3, #1
 801cffa:	9b05      	ldr	r3, [sp, #20]
 801cffc:	f173 0300 	sbcs.w	r3, r3, #0
 801d000:	bfa8      	it	ge
 801d002:	f044 0401 	orrge.w	r4, r4, #1
 801d006:	b914      	cbnz	r4, 801d00e <rcl_wait+0x27e>
 801d008:	4623      	mov	r3, r4
 801d00a:	e747      	b.n	801ce9c <rcl_wait+0x10c>
 801d00c:	4611      	mov	r1, r2
 801d00e:	2f00      	cmp	r7, #0
 801d010:	da02      	bge.n	801d018 <rcl_wait+0x288>
 801d012:	f04f 0800 	mov.w	r8, #0
 801d016:	4647      	mov	r7, r8
 801d018:	460c      	mov	r4, r1
 801d01a:	4640      	mov	r0, r8
 801d01c:	4639      	mov	r1, r7
 801d01e:	a312      	add	r3, pc, #72	@ (adr r3, 801d068 <rcl_wait+0x2d8>)
 801d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d024:	f7e3 f9c4 	bl	80003b0 <__aeabi_ldivmod>
 801d028:	a30f      	add	r3, pc, #60	@ (adr r3, 801d068 <rcl_wait+0x2d8>)
 801d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d02e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d032:	4640      	mov	r0, r8
 801d034:	4639      	mov	r1, r7
 801d036:	f7e3 f9bb 	bl	80003b0 <__aeabi_ldivmod>
 801d03a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801d03e:	ab08      	add	r3, sp, #32
 801d040:	e72c      	b.n	801ce9c <rcl_wait+0x10c>
 801d042:	200b      	movs	r0, #11
 801d044:	b00d      	add	sp, #52	@ 0x34
 801d046:	ecbd 8b02 	vpop	{d8}
 801d04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d04e:	4611      	mov	r1, r2
 801d050:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d054:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801d058:	e713      	b.n	801ce82 <rcl_wait+0xf2>
 801d05a:	bf00      	nop
 801d05c:	f3af 8000 	nop.w
 801d060:	ffffffff 	.word	0xffffffff
 801d064:	7fffffff 	.word	0x7fffffff
 801d068:	3b9aca00 	.word	0x3b9aca00
 801d06c:	00000000 	.word	0x00000000

0801d070 <rcl_action_take_goal_response>:
 801d070:	2800      	cmp	r0, #0
 801d072:	d039      	beq.n	801d0e8 <rcl_action_take_goal_response+0x78>
 801d074:	b570      	push	{r4, r5, r6, lr}
 801d076:	4604      	mov	r4, r0
 801d078:	6800      	ldr	r0, [r0, #0]
 801d07a:	b380      	cbz	r0, 801d0de <rcl_action_take_goal_response+0x6e>
 801d07c:	460e      	mov	r6, r1
 801d07e:	4615      	mov	r5, r2
 801d080:	f7fd fd3e 	bl	801ab00 <rcl_client_is_valid>
 801d084:	b330      	cbz	r0, 801d0d4 <rcl_action_take_goal_response+0x64>
 801d086:	6820      	ldr	r0, [r4, #0]
 801d088:	3004      	adds	r0, #4
 801d08a:	f7fd fd39 	bl	801ab00 <rcl_client_is_valid>
 801d08e:	b308      	cbz	r0, 801d0d4 <rcl_action_take_goal_response+0x64>
 801d090:	6820      	ldr	r0, [r4, #0]
 801d092:	3008      	adds	r0, #8
 801d094:	f7fd fd34 	bl	801ab00 <rcl_client_is_valid>
 801d098:	b1e0      	cbz	r0, 801d0d4 <rcl_action_take_goal_response+0x64>
 801d09a:	6820      	ldr	r0, [r4, #0]
 801d09c:	300c      	adds	r0, #12
 801d09e:	f7fe fdc5 	bl	801bc2c <rcl_subscription_is_valid>
 801d0a2:	b1b8      	cbz	r0, 801d0d4 <rcl_action_take_goal_response+0x64>
 801d0a4:	6820      	ldr	r0, [r4, #0]
 801d0a6:	3010      	adds	r0, #16
 801d0a8:	f7fe fdc0 	bl	801bc2c <rcl_subscription_is_valid>
 801d0ac:	b190      	cbz	r0, 801d0d4 <rcl_action_take_goal_response+0x64>
 801d0ae:	b1cd      	cbz	r5, 801d0e4 <rcl_action_take_goal_response+0x74>
 801d0b0:	b1c6      	cbz	r6, 801d0e4 <rcl_action_take_goal_response+0x74>
 801d0b2:	462a      	mov	r2, r5
 801d0b4:	4631      	mov	r1, r6
 801d0b6:	6820      	ldr	r0, [r4, #0]
 801d0b8:	f7fd fcda 	bl	801aa70 <rcl_take_response>
 801d0bc:	b148      	cbz	r0, 801d0d2 <rcl_action_take_goal_response+0x62>
 801d0be:	280a      	cmp	r0, #10
 801d0c0:	d007      	beq.n	801d0d2 <rcl_action_take_goal_response+0x62>
 801d0c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d0c6:	f640 0337 	movw	r3, #2103	@ 0x837
 801d0ca:	4290      	cmp	r0, r2
 801d0cc:	bf0c      	ite	eq
 801d0ce:	4618      	moveq	r0, r3
 801d0d0:	2001      	movne	r0, #1
 801d0d2:	bd70      	pop	{r4, r5, r6, pc}
 801d0d4:	f7f8 fa34 	bl	8015540 <rcutils_reset_error>
 801d0d8:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0dc:	bd70      	pop	{r4, r5, r6, pc}
 801d0de:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0e2:	bd70      	pop	{r4, r5, r6, pc}
 801d0e4:	200b      	movs	r0, #11
 801d0e6:	bd70      	pop	{r4, r5, r6, pc}
 801d0e8:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0ec:	4770      	bx	lr
 801d0ee:	bf00      	nop

0801d0f0 <rcl_action_send_result_request>:
 801d0f0:	b390      	cbz	r0, 801d158 <rcl_action_send_result_request+0x68>
 801d0f2:	b570      	push	{r4, r5, r6, lr}
 801d0f4:	4604      	mov	r4, r0
 801d0f6:	6800      	ldr	r0, [r0, #0]
 801d0f8:	b348      	cbz	r0, 801d14e <rcl_action_send_result_request+0x5e>
 801d0fa:	460e      	mov	r6, r1
 801d0fc:	4615      	mov	r5, r2
 801d0fe:	f7fd fcff 	bl	801ab00 <rcl_client_is_valid>
 801d102:	b1f8      	cbz	r0, 801d144 <rcl_action_send_result_request+0x54>
 801d104:	6820      	ldr	r0, [r4, #0]
 801d106:	3004      	adds	r0, #4
 801d108:	f7fd fcfa 	bl	801ab00 <rcl_client_is_valid>
 801d10c:	b1d0      	cbz	r0, 801d144 <rcl_action_send_result_request+0x54>
 801d10e:	6820      	ldr	r0, [r4, #0]
 801d110:	3008      	adds	r0, #8
 801d112:	f7fd fcf5 	bl	801ab00 <rcl_client_is_valid>
 801d116:	b1a8      	cbz	r0, 801d144 <rcl_action_send_result_request+0x54>
 801d118:	6820      	ldr	r0, [r4, #0]
 801d11a:	300c      	adds	r0, #12
 801d11c:	f7fe fd86 	bl	801bc2c <rcl_subscription_is_valid>
 801d120:	b180      	cbz	r0, 801d144 <rcl_action_send_result_request+0x54>
 801d122:	6820      	ldr	r0, [r4, #0]
 801d124:	3010      	adds	r0, #16
 801d126:	f7fe fd81 	bl	801bc2c <rcl_subscription_is_valid>
 801d12a:	b158      	cbz	r0, 801d144 <rcl_action_send_result_request+0x54>
 801d12c:	b195      	cbz	r5, 801d154 <rcl_action_send_result_request+0x64>
 801d12e:	b18e      	cbz	r6, 801d154 <rcl_action_send_result_request+0x64>
 801d130:	6820      	ldr	r0, [r4, #0]
 801d132:	462a      	mov	r2, r5
 801d134:	4631      	mov	r1, r6
 801d136:	3008      	adds	r0, #8
 801d138:	f7fd fc62 	bl	801aa00 <rcl_send_request>
 801d13c:	3800      	subs	r0, #0
 801d13e:	bf18      	it	ne
 801d140:	2001      	movne	r0, #1
 801d142:	bd70      	pop	{r4, r5, r6, pc}
 801d144:	f7f8 f9fc 	bl	8015540 <rcutils_reset_error>
 801d148:	f640 0036 	movw	r0, #2102	@ 0x836
 801d14c:	bd70      	pop	{r4, r5, r6, pc}
 801d14e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d152:	bd70      	pop	{r4, r5, r6, pc}
 801d154:	200b      	movs	r0, #11
 801d156:	bd70      	pop	{r4, r5, r6, pc}
 801d158:	f640 0036 	movw	r0, #2102	@ 0x836
 801d15c:	4770      	bx	lr
 801d15e:	bf00      	nop

0801d160 <rcl_action_take_result_response>:
 801d160:	2800      	cmp	r0, #0
 801d162:	d03a      	beq.n	801d1da <rcl_action_take_result_response+0x7a>
 801d164:	b570      	push	{r4, r5, r6, lr}
 801d166:	4604      	mov	r4, r0
 801d168:	6800      	ldr	r0, [r0, #0]
 801d16a:	b388      	cbz	r0, 801d1d0 <rcl_action_take_result_response+0x70>
 801d16c:	460e      	mov	r6, r1
 801d16e:	4615      	mov	r5, r2
 801d170:	f7fd fcc6 	bl	801ab00 <rcl_client_is_valid>
 801d174:	b338      	cbz	r0, 801d1c6 <rcl_action_take_result_response+0x66>
 801d176:	6820      	ldr	r0, [r4, #0]
 801d178:	3004      	adds	r0, #4
 801d17a:	f7fd fcc1 	bl	801ab00 <rcl_client_is_valid>
 801d17e:	b310      	cbz	r0, 801d1c6 <rcl_action_take_result_response+0x66>
 801d180:	6820      	ldr	r0, [r4, #0]
 801d182:	3008      	adds	r0, #8
 801d184:	f7fd fcbc 	bl	801ab00 <rcl_client_is_valid>
 801d188:	b1e8      	cbz	r0, 801d1c6 <rcl_action_take_result_response+0x66>
 801d18a:	6820      	ldr	r0, [r4, #0]
 801d18c:	300c      	adds	r0, #12
 801d18e:	f7fe fd4d 	bl	801bc2c <rcl_subscription_is_valid>
 801d192:	b1c0      	cbz	r0, 801d1c6 <rcl_action_take_result_response+0x66>
 801d194:	6820      	ldr	r0, [r4, #0]
 801d196:	3010      	adds	r0, #16
 801d198:	f7fe fd48 	bl	801bc2c <rcl_subscription_is_valid>
 801d19c:	b198      	cbz	r0, 801d1c6 <rcl_action_take_result_response+0x66>
 801d19e:	b1d5      	cbz	r5, 801d1d6 <rcl_action_take_result_response+0x76>
 801d1a0:	b1ce      	cbz	r6, 801d1d6 <rcl_action_take_result_response+0x76>
 801d1a2:	6820      	ldr	r0, [r4, #0]
 801d1a4:	462a      	mov	r2, r5
 801d1a6:	4631      	mov	r1, r6
 801d1a8:	3008      	adds	r0, #8
 801d1aa:	f7fd fc61 	bl	801aa70 <rcl_take_response>
 801d1ae:	b148      	cbz	r0, 801d1c4 <rcl_action_take_result_response+0x64>
 801d1b0:	280a      	cmp	r0, #10
 801d1b2:	d007      	beq.n	801d1c4 <rcl_action_take_result_response+0x64>
 801d1b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d1b8:	f640 0337 	movw	r3, #2103	@ 0x837
 801d1bc:	4290      	cmp	r0, r2
 801d1be:	bf0c      	ite	eq
 801d1c0:	4618      	moveq	r0, r3
 801d1c2:	2001      	movne	r0, #1
 801d1c4:	bd70      	pop	{r4, r5, r6, pc}
 801d1c6:	f7f8 f9bb 	bl	8015540 <rcutils_reset_error>
 801d1ca:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1ce:	bd70      	pop	{r4, r5, r6, pc}
 801d1d0:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1d4:	bd70      	pop	{r4, r5, r6, pc}
 801d1d6:	200b      	movs	r0, #11
 801d1d8:	bd70      	pop	{r4, r5, r6, pc}
 801d1da:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1de:	4770      	bx	lr

0801d1e0 <rcl_action_take_cancel_response>:
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	d03a      	beq.n	801d25a <rcl_action_take_cancel_response+0x7a>
 801d1e4:	b570      	push	{r4, r5, r6, lr}
 801d1e6:	4604      	mov	r4, r0
 801d1e8:	6800      	ldr	r0, [r0, #0]
 801d1ea:	b388      	cbz	r0, 801d250 <rcl_action_take_cancel_response+0x70>
 801d1ec:	460e      	mov	r6, r1
 801d1ee:	4615      	mov	r5, r2
 801d1f0:	f7fd fc86 	bl	801ab00 <rcl_client_is_valid>
 801d1f4:	b338      	cbz	r0, 801d246 <rcl_action_take_cancel_response+0x66>
 801d1f6:	6820      	ldr	r0, [r4, #0]
 801d1f8:	3004      	adds	r0, #4
 801d1fa:	f7fd fc81 	bl	801ab00 <rcl_client_is_valid>
 801d1fe:	b310      	cbz	r0, 801d246 <rcl_action_take_cancel_response+0x66>
 801d200:	6820      	ldr	r0, [r4, #0]
 801d202:	3008      	adds	r0, #8
 801d204:	f7fd fc7c 	bl	801ab00 <rcl_client_is_valid>
 801d208:	b1e8      	cbz	r0, 801d246 <rcl_action_take_cancel_response+0x66>
 801d20a:	6820      	ldr	r0, [r4, #0]
 801d20c:	300c      	adds	r0, #12
 801d20e:	f7fe fd0d 	bl	801bc2c <rcl_subscription_is_valid>
 801d212:	b1c0      	cbz	r0, 801d246 <rcl_action_take_cancel_response+0x66>
 801d214:	6820      	ldr	r0, [r4, #0]
 801d216:	3010      	adds	r0, #16
 801d218:	f7fe fd08 	bl	801bc2c <rcl_subscription_is_valid>
 801d21c:	b198      	cbz	r0, 801d246 <rcl_action_take_cancel_response+0x66>
 801d21e:	b1d5      	cbz	r5, 801d256 <rcl_action_take_cancel_response+0x76>
 801d220:	b1ce      	cbz	r6, 801d256 <rcl_action_take_cancel_response+0x76>
 801d222:	6820      	ldr	r0, [r4, #0]
 801d224:	462a      	mov	r2, r5
 801d226:	4631      	mov	r1, r6
 801d228:	3004      	adds	r0, #4
 801d22a:	f7fd fc21 	bl	801aa70 <rcl_take_response>
 801d22e:	b148      	cbz	r0, 801d244 <rcl_action_take_cancel_response+0x64>
 801d230:	280a      	cmp	r0, #10
 801d232:	d007      	beq.n	801d244 <rcl_action_take_cancel_response+0x64>
 801d234:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d238:	f640 0337 	movw	r3, #2103	@ 0x837
 801d23c:	4290      	cmp	r0, r2
 801d23e:	bf0c      	ite	eq
 801d240:	4618      	moveq	r0, r3
 801d242:	2001      	movne	r0, #1
 801d244:	bd70      	pop	{r4, r5, r6, pc}
 801d246:	f7f8 f97b 	bl	8015540 <rcutils_reset_error>
 801d24a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d24e:	bd70      	pop	{r4, r5, r6, pc}
 801d250:	f640 0036 	movw	r0, #2102	@ 0x836
 801d254:	bd70      	pop	{r4, r5, r6, pc}
 801d256:	200b      	movs	r0, #11
 801d258:	bd70      	pop	{r4, r5, r6, pc}
 801d25a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d25e:	4770      	bx	lr

0801d260 <rcl_action_take_feedback>:
 801d260:	2800      	cmp	r0, #0
 801d262:	d038      	beq.n	801d2d6 <rcl_action_take_feedback+0x76>
 801d264:	b530      	push	{r4, r5, lr}
 801d266:	4604      	mov	r4, r0
 801d268:	6800      	ldr	r0, [r0, #0]
 801d26a:	b091      	sub	sp, #68	@ 0x44
 801d26c:	b378      	cbz	r0, 801d2ce <rcl_action_take_feedback+0x6e>
 801d26e:	460d      	mov	r5, r1
 801d270:	f7fd fc46 	bl	801ab00 <rcl_client_is_valid>
 801d274:	b328      	cbz	r0, 801d2c2 <rcl_action_take_feedback+0x62>
 801d276:	6820      	ldr	r0, [r4, #0]
 801d278:	3004      	adds	r0, #4
 801d27a:	f7fd fc41 	bl	801ab00 <rcl_client_is_valid>
 801d27e:	b300      	cbz	r0, 801d2c2 <rcl_action_take_feedback+0x62>
 801d280:	6820      	ldr	r0, [r4, #0]
 801d282:	3008      	adds	r0, #8
 801d284:	f7fd fc3c 	bl	801ab00 <rcl_client_is_valid>
 801d288:	b1d8      	cbz	r0, 801d2c2 <rcl_action_take_feedback+0x62>
 801d28a:	6820      	ldr	r0, [r4, #0]
 801d28c:	300c      	adds	r0, #12
 801d28e:	f7fe fccd 	bl	801bc2c <rcl_subscription_is_valid>
 801d292:	b1b0      	cbz	r0, 801d2c2 <rcl_action_take_feedback+0x62>
 801d294:	6820      	ldr	r0, [r4, #0]
 801d296:	3010      	adds	r0, #16
 801d298:	f7fe fcc8 	bl	801bc2c <rcl_subscription_is_valid>
 801d29c:	b188      	cbz	r0, 801d2c2 <rcl_action_take_feedback+0x62>
 801d29e:	b1ed      	cbz	r5, 801d2dc <rcl_action_take_feedback+0x7c>
 801d2a0:	6820      	ldr	r0, [r4, #0]
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	466a      	mov	r2, sp
 801d2a6:	4629      	mov	r1, r5
 801d2a8:	300c      	adds	r0, #12
 801d2aa:	f7fe fc63 	bl	801bb74 <rcl_take>
 801d2ae:	b160      	cbz	r0, 801d2ca <rcl_action_take_feedback+0x6a>
 801d2b0:	f240 1391 	movw	r3, #401	@ 0x191
 801d2b4:	4298      	cmp	r0, r3
 801d2b6:	d014      	beq.n	801d2e2 <rcl_action_take_feedback+0x82>
 801d2b8:	280a      	cmp	r0, #10
 801d2ba:	bf18      	it	ne
 801d2bc:	2001      	movne	r0, #1
 801d2be:	b011      	add	sp, #68	@ 0x44
 801d2c0:	bd30      	pop	{r4, r5, pc}
 801d2c2:	f7f8 f93d 	bl	8015540 <rcutils_reset_error>
 801d2c6:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2ca:	b011      	add	sp, #68	@ 0x44
 801d2cc:	bd30      	pop	{r4, r5, pc}
 801d2ce:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2d2:	b011      	add	sp, #68	@ 0x44
 801d2d4:	bd30      	pop	{r4, r5, pc}
 801d2d6:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2da:	4770      	bx	lr
 801d2dc:	200b      	movs	r0, #11
 801d2de:	b011      	add	sp, #68	@ 0x44
 801d2e0:	bd30      	pop	{r4, r5, pc}
 801d2e2:	f640 0037 	movw	r0, #2103	@ 0x837
 801d2e6:	e7f0      	b.n	801d2ca <rcl_action_take_feedback+0x6a>

0801d2e8 <rcl_action_wait_set_add_action_client>:
 801d2e8:	2800      	cmp	r0, #0
 801d2ea:	d048      	beq.n	801d37e <rcl_action_wait_set_add_action_client+0x96>
 801d2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2ee:	460c      	mov	r4, r1
 801d2f0:	2900      	cmp	r1, #0
 801d2f2:	d03c      	beq.n	801d36e <rcl_action_wait_set_add_action_client+0x86>
 801d2f4:	4605      	mov	r5, r0
 801d2f6:	6808      	ldr	r0, [r1, #0]
 801d2f8:	2800      	cmp	r0, #0
 801d2fa:	d038      	beq.n	801d36e <rcl_action_wait_set_add_action_client+0x86>
 801d2fc:	4617      	mov	r7, r2
 801d2fe:	461e      	mov	r6, r3
 801d300:	f7fd fbfe 	bl	801ab00 <rcl_client_is_valid>
 801d304:	b3b0      	cbz	r0, 801d374 <rcl_action_wait_set_add_action_client+0x8c>
 801d306:	6820      	ldr	r0, [r4, #0]
 801d308:	3004      	adds	r0, #4
 801d30a:	f7fd fbf9 	bl	801ab00 <rcl_client_is_valid>
 801d30e:	b388      	cbz	r0, 801d374 <rcl_action_wait_set_add_action_client+0x8c>
 801d310:	6820      	ldr	r0, [r4, #0]
 801d312:	3008      	adds	r0, #8
 801d314:	f7fd fbf4 	bl	801ab00 <rcl_client_is_valid>
 801d318:	b360      	cbz	r0, 801d374 <rcl_action_wait_set_add_action_client+0x8c>
 801d31a:	6820      	ldr	r0, [r4, #0]
 801d31c:	300c      	adds	r0, #12
 801d31e:	f7fe fc85 	bl	801bc2c <rcl_subscription_is_valid>
 801d322:	b338      	cbz	r0, 801d374 <rcl_action_wait_set_add_action_client+0x8c>
 801d324:	6820      	ldr	r0, [r4, #0]
 801d326:	3010      	adds	r0, #16
 801d328:	f7fe fc80 	bl	801bc2c <rcl_subscription_is_valid>
 801d32c:	b310      	cbz	r0, 801d374 <rcl_action_wait_set_add_action_client+0x8c>
 801d32e:	6821      	ldr	r1, [r4, #0]
 801d330:	4628      	mov	r0, r5
 801d332:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801d336:	f7ff fcd1 	bl	801ccdc <rcl_wait_set_add_client>
 801d33a:	b9b8      	cbnz	r0, 801d36c <rcl_action_wait_set_add_action_client+0x84>
 801d33c:	6821      	ldr	r1, [r4, #0]
 801d33e:	4628      	mov	r0, r5
 801d340:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801d344:	3104      	adds	r1, #4
 801d346:	f7ff fcc9 	bl	801ccdc <rcl_wait_set_add_client>
 801d34a:	b978      	cbnz	r0, 801d36c <rcl_action_wait_set_add_action_client+0x84>
 801d34c:	6821      	ldr	r1, [r4, #0]
 801d34e:	4628      	mov	r0, r5
 801d350:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801d354:	3108      	adds	r1, #8
 801d356:	f7ff fcc1 	bl	801ccdc <rcl_wait_set_add_client>
 801d35a:	b938      	cbnz	r0, 801d36c <rcl_action_wait_set_add_action_client+0x84>
 801d35c:	6821      	ldr	r1, [r4, #0]
 801d35e:	4628      	mov	r0, r5
 801d360:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801d364:	310c      	adds	r1, #12
 801d366:	f7ff f969 	bl	801c63c <rcl_wait_set_add_subscription>
 801d36a:	b158      	cbz	r0, 801d384 <rcl_action_wait_set_add_action_client+0x9c>
 801d36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d36e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d374:	f7f8 f8e4 	bl	8015540 <rcutils_reset_error>
 801d378:	f640 0036 	movw	r0, #2102	@ 0x836
 801d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d37e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d382:	4770      	bx	lr
 801d384:	6821      	ldr	r1, [r4, #0]
 801d386:	4628      	mov	r0, r5
 801d388:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801d38c:	3110      	adds	r1, #16
 801d38e:	f7ff f955 	bl	801c63c <rcl_wait_set_add_subscription>
 801d392:	2800      	cmp	r0, #0
 801d394:	d1ea      	bne.n	801d36c <rcl_action_wait_set_add_action_client+0x84>
 801d396:	b11f      	cbz	r7, 801d3a0 <rcl_action_wait_set_add_action_client+0xb8>
 801d398:	6823      	ldr	r3, [r4, #0]
 801d39a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d39e:	603b      	str	r3, [r7, #0]
 801d3a0:	2e00      	cmp	r6, #0
 801d3a2:	d0e3      	beq.n	801d36c <rcl_action_wait_set_add_action_client+0x84>
 801d3a4:	6823      	ldr	r3, [r4, #0]
 801d3a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801d3aa:	6033      	str	r3, [r6, #0]
 801d3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3ae:	bf00      	nop

0801d3b0 <rcl_action_client_wait_set_get_entities_ready>:
 801d3b0:	2800      	cmp	r0, #0
 801d3b2:	d050      	beq.n	801d456 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3b8:	460c      	mov	r4, r1
 801d3ba:	2900      	cmp	r1, #0
 801d3bc:	d03e      	beq.n	801d43c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d3be:	4605      	mov	r5, r0
 801d3c0:	6808      	ldr	r0, [r1, #0]
 801d3c2:	2800      	cmp	r0, #0
 801d3c4:	d03a      	beq.n	801d43c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d3c6:	4616      	mov	r6, r2
 801d3c8:	461f      	mov	r7, r3
 801d3ca:	f7fd fb99 	bl	801ab00 <rcl_client_is_valid>
 801d3ce:	2800      	cmp	r0, #0
 801d3d0:	d038      	beq.n	801d444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3d2:	6820      	ldr	r0, [r4, #0]
 801d3d4:	3004      	adds	r0, #4
 801d3d6:	f7fd fb93 	bl	801ab00 <rcl_client_is_valid>
 801d3da:	2800      	cmp	r0, #0
 801d3dc:	d032      	beq.n	801d444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3de:	6820      	ldr	r0, [r4, #0]
 801d3e0:	3008      	adds	r0, #8
 801d3e2:	f7fd fb8d 	bl	801ab00 <rcl_client_is_valid>
 801d3e6:	b368      	cbz	r0, 801d444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3e8:	6820      	ldr	r0, [r4, #0]
 801d3ea:	300c      	adds	r0, #12
 801d3ec:	f7fe fc1e 	bl	801bc2c <rcl_subscription_is_valid>
 801d3f0:	b340      	cbz	r0, 801d444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3f2:	6820      	ldr	r0, [r4, #0]
 801d3f4:	3010      	adds	r0, #16
 801d3f6:	f7fe fc19 	bl	801bc2c <rcl_subscription_is_valid>
 801d3fa:	b318      	cbz	r0, 801d444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801d400:	2a00      	cmp	r2, #0
 801d402:	bf18      	it	ne
 801d404:	2b00      	cmpne	r3, #0
 801d406:	9b08      	ldr	r3, [sp, #32]
 801d408:	bf0c      	ite	eq
 801d40a:	2101      	moveq	r1, #1
 801d40c:	2100      	movne	r1, #0
 801d40e:	2b00      	cmp	r3, #0
 801d410:	bf08      	it	eq
 801d412:	f041 0101 	orreq.w	r1, r1, #1
 801d416:	2f00      	cmp	r7, #0
 801d418:	bf08      	it	eq
 801d41a:	f041 0101 	orreq.w	r1, r1, #1
 801d41e:	b9b9      	cbnz	r1, 801d450 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d420:	b1b6      	cbz	r6, 801d450 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d422:	6823      	ldr	r3, [r4, #0]
 801d424:	686c      	ldr	r4, [r5, #4]
 801d426:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801d42a:	428a      	cmp	r2, r1
 801d42c:	4610      	mov	r0, r2
 801d42e:	bf38      	it	cc
 801d430:	4608      	movcc	r0, r1
 801d432:	4284      	cmp	r4, r0
 801d434:	d812      	bhi.n	801d45c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d436:	2001      	movs	r0, #1
 801d438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d43c:	f640 0036 	movw	r0, #2102	@ 0x836
 801d440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d444:	f7f8 f87c 	bl	8015540 <rcutils_reset_error>
 801d448:	f640 0036 	movw	r0, #2102	@ 0x836
 801d44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d450:	200b      	movs	r0, #11
 801d452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d456:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d45a:	4770      	bx	lr
 801d45c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801d460:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801d464:	45f0      	cmp	r8, lr
 801d466:	4640      	mov	r0, r8
 801d468:	69ec      	ldr	r4, [r5, #28]
 801d46a:	bf38      	it	cc
 801d46c:	4670      	movcc	r0, lr
 801d46e:	4560      	cmp	r0, ip
 801d470:	bf38      	it	cc
 801d472:	4660      	movcc	r0, ip
 801d474:	4284      	cmp	r4, r0
 801d476:	d9de      	bls.n	801d436 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d478:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d47c:	682d      	ldr	r5, [r5, #0]
 801d47e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d482:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d486:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d48a:	1a18      	subs	r0, r3, r0
 801d48c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d490:	f103 0c0c 	add.w	ip, r3, #12
 801d494:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d498:	fab0 f080 	clz	r0, r0
 801d49c:	eba5 050c 	sub.w	r5, r5, ip
 801d4a0:	0940      	lsrs	r0, r0, #5
 801d4a2:	fab5 f585 	clz	r5, r5
 801d4a6:	096d      	lsrs	r5, r5, #5
 801d4a8:	7035      	strb	r5, [r6, #0]
 801d4aa:	f103 0510 	add.w	r5, r3, #16
 801d4ae:	1b64      	subs	r4, r4, r5
 801d4b0:	9d08      	ldr	r5, [sp, #32]
 801d4b2:	fab4 f484 	clz	r4, r4
 801d4b6:	0964      	lsrs	r4, r4, #5
 801d4b8:	703c      	strb	r4, [r7, #0]
 801d4ba:	1d1c      	adds	r4, r3, #4
 801d4bc:	3308      	adds	r3, #8
 801d4be:	7028      	strb	r0, [r5, #0]
 801d4c0:	1b09      	subs	r1, r1, r4
 801d4c2:	2000      	movs	r0, #0
 801d4c4:	1ad3      	subs	r3, r2, r3
 801d4c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4c8:	fab1 f181 	clz	r1, r1
 801d4cc:	fab3 f383 	clz	r3, r3
 801d4d0:	0949      	lsrs	r1, r1, #5
 801d4d2:	095b      	lsrs	r3, r3, #5
 801d4d4:	7011      	strb	r1, [r2, #0]
 801d4d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d4d8:	7013      	strb	r3, [r2, #0]
 801d4da:	e7b1      	b.n	801d440 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d4dc <rcl_action_take_goal_request>:
 801d4dc:	2800      	cmp	r0, #0
 801d4de:	d039      	beq.n	801d554 <rcl_action_take_goal_request+0x78>
 801d4e0:	b570      	push	{r4, r5, r6, lr}
 801d4e2:	4604      	mov	r4, r0
 801d4e4:	6800      	ldr	r0, [r0, #0]
 801d4e6:	b380      	cbz	r0, 801d54a <rcl_action_take_goal_request+0x6e>
 801d4e8:	460e      	mov	r6, r1
 801d4ea:	4615      	mov	r5, r2
 801d4ec:	f7fe fa56 	bl	801b99c <rcl_service_is_valid>
 801d4f0:	b330      	cbz	r0, 801d540 <rcl_action_take_goal_request+0x64>
 801d4f2:	6820      	ldr	r0, [r4, #0]
 801d4f4:	3004      	adds	r0, #4
 801d4f6:	f7fe fa51 	bl	801b99c <rcl_service_is_valid>
 801d4fa:	b308      	cbz	r0, 801d540 <rcl_action_take_goal_request+0x64>
 801d4fc:	6820      	ldr	r0, [r4, #0]
 801d4fe:	3008      	adds	r0, #8
 801d500:	f7fe fa4c 	bl	801b99c <rcl_service_is_valid>
 801d504:	b1e0      	cbz	r0, 801d540 <rcl_action_take_goal_request+0x64>
 801d506:	6820      	ldr	r0, [r4, #0]
 801d508:	300c      	adds	r0, #12
 801d50a:	f7f6 ffbb 	bl	8014484 <rcl_publisher_is_valid>
 801d50e:	b1b8      	cbz	r0, 801d540 <rcl_action_take_goal_request+0x64>
 801d510:	6820      	ldr	r0, [r4, #0]
 801d512:	3010      	adds	r0, #16
 801d514:	f7f6 ffb6 	bl	8014484 <rcl_publisher_is_valid>
 801d518:	b190      	cbz	r0, 801d540 <rcl_action_take_goal_request+0x64>
 801d51a:	b1cd      	cbz	r5, 801d550 <rcl_action_take_goal_request+0x74>
 801d51c:	b1c6      	cbz	r6, 801d550 <rcl_action_take_goal_request+0x74>
 801d51e:	462a      	mov	r2, r5
 801d520:	4631      	mov	r1, r6
 801d522:	6820      	ldr	r0, [r4, #0]
 801d524:	f7fe f9e2 	bl	801b8ec <rcl_take_request>
 801d528:	b148      	cbz	r0, 801d53e <rcl_action_take_goal_request+0x62>
 801d52a:	280a      	cmp	r0, #10
 801d52c:	d007      	beq.n	801d53e <rcl_action_take_goal_request+0x62>
 801d52e:	f240 2259 	movw	r2, #601	@ 0x259
 801d532:	f640 0399 	movw	r3, #2201	@ 0x899
 801d536:	4290      	cmp	r0, r2
 801d538:	bf0c      	ite	eq
 801d53a:	4618      	moveq	r0, r3
 801d53c:	2001      	movne	r0, #1
 801d53e:	bd70      	pop	{r4, r5, r6, pc}
 801d540:	f7f7 fffe 	bl	8015540 <rcutils_reset_error>
 801d544:	f640 0098 	movw	r0, #2200	@ 0x898
 801d548:	bd70      	pop	{r4, r5, r6, pc}
 801d54a:	f640 0098 	movw	r0, #2200	@ 0x898
 801d54e:	bd70      	pop	{r4, r5, r6, pc}
 801d550:	200b      	movs	r0, #11
 801d552:	bd70      	pop	{r4, r5, r6, pc}
 801d554:	f640 0098 	movw	r0, #2200	@ 0x898
 801d558:	4770      	bx	lr
 801d55a:	bf00      	nop

0801d55c <rcl_action_send_goal_response>:
 801d55c:	b390      	cbz	r0, 801d5c4 <rcl_action_send_goal_response+0x68>
 801d55e:	b570      	push	{r4, r5, r6, lr}
 801d560:	4604      	mov	r4, r0
 801d562:	6800      	ldr	r0, [r0, #0]
 801d564:	b348      	cbz	r0, 801d5ba <rcl_action_send_goal_response+0x5e>
 801d566:	460e      	mov	r6, r1
 801d568:	4615      	mov	r5, r2
 801d56a:	f7fe fa17 	bl	801b99c <rcl_service_is_valid>
 801d56e:	b1f8      	cbz	r0, 801d5b0 <rcl_action_send_goal_response+0x54>
 801d570:	6820      	ldr	r0, [r4, #0]
 801d572:	3004      	adds	r0, #4
 801d574:	f7fe fa12 	bl	801b99c <rcl_service_is_valid>
 801d578:	b1d0      	cbz	r0, 801d5b0 <rcl_action_send_goal_response+0x54>
 801d57a:	6820      	ldr	r0, [r4, #0]
 801d57c:	3008      	adds	r0, #8
 801d57e:	f7fe fa0d 	bl	801b99c <rcl_service_is_valid>
 801d582:	b1a8      	cbz	r0, 801d5b0 <rcl_action_send_goal_response+0x54>
 801d584:	6820      	ldr	r0, [r4, #0]
 801d586:	300c      	adds	r0, #12
 801d588:	f7f6 ff7c 	bl	8014484 <rcl_publisher_is_valid>
 801d58c:	b180      	cbz	r0, 801d5b0 <rcl_action_send_goal_response+0x54>
 801d58e:	6820      	ldr	r0, [r4, #0]
 801d590:	3010      	adds	r0, #16
 801d592:	f7f6 ff77 	bl	8014484 <rcl_publisher_is_valid>
 801d596:	b158      	cbz	r0, 801d5b0 <rcl_action_send_goal_response+0x54>
 801d598:	b195      	cbz	r5, 801d5c0 <rcl_action_send_goal_response+0x64>
 801d59a:	b18e      	cbz	r6, 801d5c0 <rcl_action_send_goal_response+0x64>
 801d59c:	462a      	mov	r2, r5
 801d59e:	4631      	mov	r1, r6
 801d5a0:	6820      	ldr	r0, [r4, #0]
 801d5a2:	f7fe f9e3 	bl	801b96c <rcl_send_response>
 801d5a6:	b110      	cbz	r0, 801d5ae <rcl_action_send_goal_response+0x52>
 801d5a8:	2802      	cmp	r0, #2
 801d5aa:	bf18      	it	ne
 801d5ac:	2001      	movne	r0, #1
 801d5ae:	bd70      	pop	{r4, r5, r6, pc}
 801d5b0:	f7f7 ffc6 	bl	8015540 <rcutils_reset_error>
 801d5b4:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5b8:	bd70      	pop	{r4, r5, r6, pc}
 801d5ba:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5be:	bd70      	pop	{r4, r5, r6, pc}
 801d5c0:	200b      	movs	r0, #11
 801d5c2:	bd70      	pop	{r4, r5, r6, pc}
 801d5c4:	f640 0098 	movw	r0, #2200	@ 0x898
 801d5c8:	4770      	bx	lr
 801d5ca:	bf00      	nop

0801d5cc <rcl_action_take_result_request>:
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	d03a      	beq.n	801d646 <rcl_action_take_result_request+0x7a>
 801d5d0:	b570      	push	{r4, r5, r6, lr}
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	6800      	ldr	r0, [r0, #0]
 801d5d6:	b388      	cbz	r0, 801d63c <rcl_action_take_result_request+0x70>
 801d5d8:	460e      	mov	r6, r1
 801d5da:	4615      	mov	r5, r2
 801d5dc:	f7fe f9de 	bl	801b99c <rcl_service_is_valid>
 801d5e0:	b338      	cbz	r0, 801d632 <rcl_action_take_result_request+0x66>
 801d5e2:	6820      	ldr	r0, [r4, #0]
 801d5e4:	3004      	adds	r0, #4
 801d5e6:	f7fe f9d9 	bl	801b99c <rcl_service_is_valid>
 801d5ea:	b310      	cbz	r0, 801d632 <rcl_action_take_result_request+0x66>
 801d5ec:	6820      	ldr	r0, [r4, #0]
 801d5ee:	3008      	adds	r0, #8
 801d5f0:	f7fe f9d4 	bl	801b99c <rcl_service_is_valid>
 801d5f4:	b1e8      	cbz	r0, 801d632 <rcl_action_take_result_request+0x66>
 801d5f6:	6820      	ldr	r0, [r4, #0]
 801d5f8:	300c      	adds	r0, #12
 801d5fa:	f7f6 ff43 	bl	8014484 <rcl_publisher_is_valid>
 801d5fe:	b1c0      	cbz	r0, 801d632 <rcl_action_take_result_request+0x66>
 801d600:	6820      	ldr	r0, [r4, #0]
 801d602:	3010      	adds	r0, #16
 801d604:	f7f6 ff3e 	bl	8014484 <rcl_publisher_is_valid>
 801d608:	b198      	cbz	r0, 801d632 <rcl_action_take_result_request+0x66>
 801d60a:	b1d5      	cbz	r5, 801d642 <rcl_action_take_result_request+0x76>
 801d60c:	b1ce      	cbz	r6, 801d642 <rcl_action_take_result_request+0x76>
 801d60e:	6820      	ldr	r0, [r4, #0]
 801d610:	462a      	mov	r2, r5
 801d612:	4631      	mov	r1, r6
 801d614:	3008      	adds	r0, #8
 801d616:	f7fe f969 	bl	801b8ec <rcl_take_request>
 801d61a:	b148      	cbz	r0, 801d630 <rcl_action_take_result_request+0x64>
 801d61c:	280a      	cmp	r0, #10
 801d61e:	d007      	beq.n	801d630 <rcl_action_take_result_request+0x64>
 801d620:	f240 2259 	movw	r2, #601	@ 0x259
 801d624:	f640 0399 	movw	r3, #2201	@ 0x899
 801d628:	4290      	cmp	r0, r2
 801d62a:	bf0c      	ite	eq
 801d62c:	4618      	moveq	r0, r3
 801d62e:	2001      	movne	r0, #1
 801d630:	bd70      	pop	{r4, r5, r6, pc}
 801d632:	f7f7 ff85 	bl	8015540 <rcutils_reset_error>
 801d636:	f640 0098 	movw	r0, #2200	@ 0x898
 801d63a:	bd70      	pop	{r4, r5, r6, pc}
 801d63c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d640:	bd70      	pop	{r4, r5, r6, pc}
 801d642:	200b      	movs	r0, #11
 801d644:	bd70      	pop	{r4, r5, r6, pc}
 801d646:	f640 0098 	movw	r0, #2200	@ 0x898
 801d64a:	4770      	bx	lr

0801d64c <rcl_action_take_cancel_request>:
 801d64c:	2800      	cmp	r0, #0
 801d64e:	d03a      	beq.n	801d6c6 <rcl_action_take_cancel_request+0x7a>
 801d650:	b570      	push	{r4, r5, r6, lr}
 801d652:	4604      	mov	r4, r0
 801d654:	6800      	ldr	r0, [r0, #0]
 801d656:	b388      	cbz	r0, 801d6bc <rcl_action_take_cancel_request+0x70>
 801d658:	460e      	mov	r6, r1
 801d65a:	4615      	mov	r5, r2
 801d65c:	f7fe f99e 	bl	801b99c <rcl_service_is_valid>
 801d660:	b338      	cbz	r0, 801d6b2 <rcl_action_take_cancel_request+0x66>
 801d662:	6820      	ldr	r0, [r4, #0]
 801d664:	3004      	adds	r0, #4
 801d666:	f7fe f999 	bl	801b99c <rcl_service_is_valid>
 801d66a:	b310      	cbz	r0, 801d6b2 <rcl_action_take_cancel_request+0x66>
 801d66c:	6820      	ldr	r0, [r4, #0]
 801d66e:	3008      	adds	r0, #8
 801d670:	f7fe f994 	bl	801b99c <rcl_service_is_valid>
 801d674:	b1e8      	cbz	r0, 801d6b2 <rcl_action_take_cancel_request+0x66>
 801d676:	6820      	ldr	r0, [r4, #0]
 801d678:	300c      	adds	r0, #12
 801d67a:	f7f6 ff03 	bl	8014484 <rcl_publisher_is_valid>
 801d67e:	b1c0      	cbz	r0, 801d6b2 <rcl_action_take_cancel_request+0x66>
 801d680:	6820      	ldr	r0, [r4, #0]
 801d682:	3010      	adds	r0, #16
 801d684:	f7f6 fefe 	bl	8014484 <rcl_publisher_is_valid>
 801d688:	b198      	cbz	r0, 801d6b2 <rcl_action_take_cancel_request+0x66>
 801d68a:	b1d5      	cbz	r5, 801d6c2 <rcl_action_take_cancel_request+0x76>
 801d68c:	b1ce      	cbz	r6, 801d6c2 <rcl_action_take_cancel_request+0x76>
 801d68e:	6820      	ldr	r0, [r4, #0]
 801d690:	462a      	mov	r2, r5
 801d692:	4631      	mov	r1, r6
 801d694:	3004      	adds	r0, #4
 801d696:	f7fe f929 	bl	801b8ec <rcl_take_request>
 801d69a:	b148      	cbz	r0, 801d6b0 <rcl_action_take_cancel_request+0x64>
 801d69c:	280a      	cmp	r0, #10
 801d69e:	d007      	beq.n	801d6b0 <rcl_action_take_cancel_request+0x64>
 801d6a0:	f240 2259 	movw	r2, #601	@ 0x259
 801d6a4:	f640 0399 	movw	r3, #2201	@ 0x899
 801d6a8:	4290      	cmp	r0, r2
 801d6aa:	bf0c      	ite	eq
 801d6ac:	4618      	moveq	r0, r3
 801d6ae:	2001      	movne	r0, #1
 801d6b0:	bd70      	pop	{r4, r5, r6, pc}
 801d6b2:	f7f7 ff45 	bl	8015540 <rcutils_reset_error>
 801d6b6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6ba:	bd70      	pop	{r4, r5, r6, pc}
 801d6bc:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6c0:	bd70      	pop	{r4, r5, r6, pc}
 801d6c2:	200b      	movs	r0, #11
 801d6c4:	bd70      	pop	{r4, r5, r6, pc}
 801d6c6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6ca:	4770      	bx	lr

0801d6cc <rcl_action_send_cancel_response>:
 801d6cc:	b398      	cbz	r0, 801d736 <rcl_action_send_cancel_response+0x6a>
 801d6ce:	b570      	push	{r4, r5, r6, lr}
 801d6d0:	4604      	mov	r4, r0
 801d6d2:	6800      	ldr	r0, [r0, #0]
 801d6d4:	b350      	cbz	r0, 801d72c <rcl_action_send_cancel_response+0x60>
 801d6d6:	460e      	mov	r6, r1
 801d6d8:	4615      	mov	r5, r2
 801d6da:	f7fe f95f 	bl	801b99c <rcl_service_is_valid>
 801d6de:	b300      	cbz	r0, 801d722 <rcl_action_send_cancel_response+0x56>
 801d6e0:	6820      	ldr	r0, [r4, #0]
 801d6e2:	3004      	adds	r0, #4
 801d6e4:	f7fe f95a 	bl	801b99c <rcl_service_is_valid>
 801d6e8:	b1d8      	cbz	r0, 801d722 <rcl_action_send_cancel_response+0x56>
 801d6ea:	6820      	ldr	r0, [r4, #0]
 801d6ec:	3008      	adds	r0, #8
 801d6ee:	f7fe f955 	bl	801b99c <rcl_service_is_valid>
 801d6f2:	b1b0      	cbz	r0, 801d722 <rcl_action_send_cancel_response+0x56>
 801d6f4:	6820      	ldr	r0, [r4, #0]
 801d6f6:	300c      	adds	r0, #12
 801d6f8:	f7f6 fec4 	bl	8014484 <rcl_publisher_is_valid>
 801d6fc:	b188      	cbz	r0, 801d722 <rcl_action_send_cancel_response+0x56>
 801d6fe:	6820      	ldr	r0, [r4, #0]
 801d700:	3010      	adds	r0, #16
 801d702:	f7f6 febf 	bl	8014484 <rcl_publisher_is_valid>
 801d706:	b160      	cbz	r0, 801d722 <rcl_action_send_cancel_response+0x56>
 801d708:	b19d      	cbz	r5, 801d732 <rcl_action_send_cancel_response+0x66>
 801d70a:	b196      	cbz	r6, 801d732 <rcl_action_send_cancel_response+0x66>
 801d70c:	6820      	ldr	r0, [r4, #0]
 801d70e:	462a      	mov	r2, r5
 801d710:	4631      	mov	r1, r6
 801d712:	3004      	adds	r0, #4
 801d714:	f7fe f92a 	bl	801b96c <rcl_send_response>
 801d718:	b110      	cbz	r0, 801d720 <rcl_action_send_cancel_response+0x54>
 801d71a:	2802      	cmp	r0, #2
 801d71c:	bf18      	it	ne
 801d71e:	2001      	movne	r0, #1
 801d720:	bd70      	pop	{r4, r5, r6, pc}
 801d722:	f7f7 ff0d 	bl	8015540 <rcutils_reset_error>
 801d726:	f640 0098 	movw	r0, #2200	@ 0x898
 801d72a:	bd70      	pop	{r4, r5, r6, pc}
 801d72c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d730:	bd70      	pop	{r4, r5, r6, pc}
 801d732:	200b      	movs	r0, #11
 801d734:	bd70      	pop	{r4, r5, r6, pc}
 801d736:	f640 0098 	movw	r0, #2200	@ 0x898
 801d73a:	4770      	bx	lr

0801d73c <rcl_action_wait_set_add_action_server>:
 801d73c:	2800      	cmp	r0, #0
 801d73e:	d04d      	beq.n	801d7dc <rcl_action_wait_set_add_action_server+0xa0>
 801d740:	b570      	push	{r4, r5, r6, lr}
 801d742:	460c      	mov	r4, r1
 801d744:	b159      	cbz	r1, 801d75e <rcl_action_wait_set_add_action_server+0x22>
 801d746:	4605      	mov	r5, r0
 801d748:	6808      	ldr	r0, [r1, #0]
 801d74a:	b140      	cbz	r0, 801d75e <rcl_action_wait_set_add_action_server+0x22>
 801d74c:	4616      	mov	r6, r2
 801d74e:	f7fe f925 	bl	801b99c <rcl_service_is_valid>
 801d752:	b120      	cbz	r0, 801d75e <rcl_action_wait_set_add_action_server+0x22>
 801d754:	6820      	ldr	r0, [r4, #0]
 801d756:	3004      	adds	r0, #4
 801d758:	f7fe f920 	bl	801b99c <rcl_service_is_valid>
 801d75c:	b910      	cbnz	r0, 801d764 <rcl_action_wait_set_add_action_server+0x28>
 801d75e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d762:	bd70      	pop	{r4, r5, r6, pc}
 801d764:	6820      	ldr	r0, [r4, #0]
 801d766:	3008      	adds	r0, #8
 801d768:	f7fe f918 	bl	801b99c <rcl_service_is_valid>
 801d76c:	2800      	cmp	r0, #0
 801d76e:	d0f6      	beq.n	801d75e <rcl_action_wait_set_add_action_server+0x22>
 801d770:	6820      	ldr	r0, [r4, #0]
 801d772:	300c      	adds	r0, #12
 801d774:	f7f6 fe9e 	bl	80144b4 <rcl_publisher_is_valid_except_context>
 801d778:	2800      	cmp	r0, #0
 801d77a:	d0f0      	beq.n	801d75e <rcl_action_wait_set_add_action_server+0x22>
 801d77c:	6820      	ldr	r0, [r4, #0]
 801d77e:	3010      	adds	r0, #16
 801d780:	f7f6 fe98 	bl	80144b4 <rcl_publisher_is_valid_except_context>
 801d784:	2800      	cmp	r0, #0
 801d786:	d0ea      	beq.n	801d75e <rcl_action_wait_set_add_action_server+0x22>
 801d788:	6821      	ldr	r1, [r4, #0]
 801d78a:	4628      	mov	r0, r5
 801d78c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801d790:	f7ff fad0 	bl	801cd34 <rcl_wait_set_add_service>
 801d794:	2800      	cmp	r0, #0
 801d796:	d1e4      	bne.n	801d762 <rcl_action_wait_set_add_action_server+0x26>
 801d798:	6821      	ldr	r1, [r4, #0]
 801d79a:	4628      	mov	r0, r5
 801d79c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801d7a0:	3104      	adds	r1, #4
 801d7a2:	f7ff fac7 	bl	801cd34 <rcl_wait_set_add_service>
 801d7a6:	2800      	cmp	r0, #0
 801d7a8:	d1db      	bne.n	801d762 <rcl_action_wait_set_add_action_server+0x26>
 801d7aa:	6821      	ldr	r1, [r4, #0]
 801d7ac:	4628      	mov	r0, r5
 801d7ae:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801d7b2:	3108      	adds	r1, #8
 801d7b4:	f7ff fabe 	bl	801cd34 <rcl_wait_set_add_service>
 801d7b8:	2800      	cmp	r0, #0
 801d7ba:	d1d2      	bne.n	801d762 <rcl_action_wait_set_add_action_server+0x26>
 801d7bc:	6821      	ldr	r1, [r4, #0]
 801d7be:	4628      	mov	r0, r5
 801d7c0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801d7c4:	3114      	adds	r1, #20
 801d7c6:	f7ff fa59 	bl	801cc7c <rcl_wait_set_add_timer>
 801d7ca:	2800      	cmp	r0, #0
 801d7cc:	d1c9      	bne.n	801d762 <rcl_action_wait_set_add_action_server+0x26>
 801d7ce:	2e00      	cmp	r6, #0
 801d7d0:	d0c7      	beq.n	801d762 <rcl_action_wait_set_add_action_server+0x26>
 801d7d2:	6823      	ldr	r3, [r4, #0]
 801d7d4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801d7d8:	6033      	str	r3, [r6, #0]
 801d7da:	bd70      	pop	{r4, r5, r6, pc}
 801d7dc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d7e0:	4770      	bx	lr
 801d7e2:	bf00      	nop

0801d7e4 <rcl_action_server_wait_set_get_entities_ready>:
 801d7e4:	2800      	cmp	r0, #0
 801d7e6:	d067      	beq.n	801d8b8 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7ec:	460c      	mov	r4, r1
 801d7ee:	b161      	cbz	r1, 801d80a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7f0:	4605      	mov	r5, r0
 801d7f2:	6808      	ldr	r0, [r1, #0]
 801d7f4:	b148      	cbz	r0, 801d80a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7f6:	4616      	mov	r6, r2
 801d7f8:	4698      	mov	r8, r3
 801d7fa:	f7fe f8cf 	bl	801b99c <rcl_service_is_valid>
 801d7fe:	b120      	cbz	r0, 801d80a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d800:	6820      	ldr	r0, [r4, #0]
 801d802:	3004      	adds	r0, #4
 801d804:	f7fe f8ca 	bl	801b99c <rcl_service_is_valid>
 801d808:	b918      	cbnz	r0, 801d812 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d80a:	f640 0098 	movw	r0, #2200	@ 0x898
 801d80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d812:	6820      	ldr	r0, [r4, #0]
 801d814:	3008      	adds	r0, #8
 801d816:	f7fe f8c1 	bl	801b99c <rcl_service_is_valid>
 801d81a:	2800      	cmp	r0, #0
 801d81c:	d0f5      	beq.n	801d80a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d81e:	6820      	ldr	r0, [r4, #0]
 801d820:	300c      	adds	r0, #12
 801d822:	f7f6 fe47 	bl	80144b4 <rcl_publisher_is_valid_except_context>
 801d826:	2800      	cmp	r0, #0
 801d828:	d0ef      	beq.n	801d80a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d82a:	6820      	ldr	r0, [r4, #0]
 801d82c:	3010      	adds	r0, #16
 801d82e:	f7f6 fe41 	bl	80144b4 <rcl_publisher_is_valid_except_context>
 801d832:	2800      	cmp	r0, #0
 801d834:	d0e9      	beq.n	801d80a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d83a:	2a00      	cmp	r2, #0
 801d83c:	bf18      	it	ne
 801d83e:	2b00      	cmpne	r3, #0
 801d840:	bf0c      	ite	eq
 801d842:	2101      	moveq	r1, #1
 801d844:	2100      	movne	r1, #0
 801d846:	f1b8 0f00 	cmp.w	r8, #0
 801d84a:	bf08      	it	eq
 801d84c:	f041 0101 	orreq.w	r1, r1, #1
 801d850:	bba9      	cbnz	r1, 801d8be <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d852:	b3a6      	cbz	r6, 801d8be <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d854:	6821      	ldr	r1, [r4, #0]
 801d856:	2000      	movs	r0, #0
 801d858:	692c      	ldr	r4, [r5, #16]
 801d85a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801d85e:	6a2f      	ldr	r7, [r5, #32]
 801d860:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d864:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801d868:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801d86c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d870:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d874:	1a64      	subs	r4, r4, r1
 801d876:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801d87a:	fab4 f484 	clz	r4, r4
 801d87e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d882:	0964      	lsrs	r4, r4, #5
 801d884:	7034      	strb	r4, [r6, #0]
 801d886:	1d0c      	adds	r4, r1, #4
 801d888:	1b2c      	subs	r4, r5, r4
 801d88a:	fab4 f484 	clz	r4, r4
 801d88e:	0964      	lsrs	r4, r4, #5
 801d890:	f888 4000 	strb.w	r4, [r8]
 801d894:	f101 0408 	add.w	r4, r1, #8
 801d898:	1b1b      	subs	r3, r3, r4
 801d89a:	9c06      	ldr	r4, [sp, #24]
 801d89c:	fab3 f383 	clz	r3, r3
 801d8a0:	095b      	lsrs	r3, r3, #5
 801d8a2:	7023      	strb	r3, [r4, #0]
 801d8a4:	f101 0314 	add.w	r3, r1, #20
 801d8a8:	1ad3      	subs	r3, r2, r3
 801d8aa:	9a07      	ldr	r2, [sp, #28]
 801d8ac:	fab3 f383 	clz	r3, r3
 801d8b0:	095b      	lsrs	r3, r3, #5
 801d8b2:	7013      	strb	r3, [r2, #0]
 801d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d8bc:	4770      	bx	lr
 801d8be:	200b      	movs	r0, #11
 801d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d8c4 <_execute_event_handler>:
 801d8c4:	2002      	movs	r0, #2
 801d8c6:	4770      	bx	lr

0801d8c8 <_cancel_goal_event_handler>:
 801d8c8:	2003      	movs	r0, #3
 801d8ca:	4770      	bx	lr

0801d8cc <_succeed_event_handler>:
 801d8cc:	2004      	movs	r0, #4
 801d8ce:	4770      	bx	lr

0801d8d0 <_abort_event_handler>:
 801d8d0:	2006      	movs	r0, #6
 801d8d2:	4770      	bx	lr

0801d8d4 <_canceled_event_handler>:
 801d8d4:	2005      	movs	r0, #5
 801d8d6:	4770      	bx	lr

0801d8d8 <rcl_action_transition_goal_state>:
 801d8d8:	b2c2      	uxtb	r2, r0
 801d8da:	2a06      	cmp	r2, #6
 801d8dc:	d810      	bhi.n	801d900 <rcl_action_transition_goal_state+0x28>
 801d8de:	2904      	cmp	r1, #4
 801d8e0:	d80e      	bhi.n	801d900 <rcl_action_transition_goal_state+0x28>
 801d8e2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d8e6:	b410      	push	{r4}
 801d8e8:	1853      	adds	r3, r2, r1
 801d8ea:	4c06      	ldr	r4, [pc, #24]	@ (801d904 <rcl_action_transition_goal_state+0x2c>)
 801d8ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d8f0:	b113      	cbz	r3, 801d8f8 <rcl_action_transition_goal_state+0x20>
 801d8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8f6:	4718      	bx	r3
 801d8f8:	2000      	movs	r0, #0
 801d8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8fe:	4770      	bx	lr
 801d900:	2000      	movs	r0, #0
 801d902:	4770      	bx	lr
 801d904:	08025560 	.word	0x08025560

0801d908 <rcl_action_get_zero_initialized_cancel_response>:
 801d908:	b510      	push	{r4, lr}
 801d90a:	4c07      	ldr	r4, [pc, #28]	@ (801d928 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d90c:	4686      	mov	lr, r0
 801d90e:	4684      	mov	ip, r0
 801d910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d918:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d91c:	6823      	ldr	r3, [r4, #0]
 801d91e:	4670      	mov	r0, lr
 801d920:	f8cc 3000 	str.w	r3, [ip]
 801d924:	bd10      	pop	{r4, pc}
 801d926:	bf00      	nop
 801d928:	080255ec 	.word	0x080255ec

0801d92c <rclc_action_send_result_request>:
 801d92c:	b1d0      	cbz	r0, 801d964 <rclc_action_send_result_request+0x38>
 801d92e:	4684      	mov	ip, r0
 801d930:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d934:	b500      	push	{lr}
 801d936:	b087      	sub	sp, #28
 801d938:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d93c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d940:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d944:	f10d 0e08 	add.w	lr, sp, #8
 801d948:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d94c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d950:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801d954:	a902      	add	r1, sp, #8
 801d956:	3010      	adds	r0, #16
 801d958:	f7ff fbca 	bl	801d0f0 <rcl_action_send_result_request>
 801d95c:	b920      	cbnz	r0, 801d968 <rclc_action_send_result_request+0x3c>
 801d95e:	b007      	add	sp, #28
 801d960:	f85d fb04 	ldr.w	pc, [sp], #4
 801d964:	200b      	movs	r0, #11
 801d966:	4770      	bx	lr
 801d968:	9001      	str	r0, [sp, #4]
 801d96a:	f7f7 fde9 	bl	8015540 <rcutils_reset_error>
 801d96e:	9801      	ldr	r0, [sp, #4]
 801d970:	b007      	add	sp, #28
 801d972:	f85d fb04 	ldr.w	pc, [sp], #4
 801d976:	bf00      	nop

0801d978 <rclc_action_take_goal_handle>:
 801d978:	b160      	cbz	r0, 801d994 <rclc_action_take_goal_handle+0x1c>
 801d97a:	6883      	ldr	r3, [r0, #8]
 801d97c:	b143      	cbz	r3, 801d990 <rclc_action_take_goal_handle+0x18>
 801d97e:	6819      	ldr	r1, [r3, #0]
 801d980:	2200      	movs	r2, #0
 801d982:	6081      	str	r1, [r0, #8]
 801d984:	721a      	strb	r2, [r3, #8]
 801d986:	68c1      	ldr	r1, [r0, #12]
 801d988:	621a      	str	r2, [r3, #32]
 801d98a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801d98c:	6019      	str	r1, [r3, #0]
 801d98e:	60c3      	str	r3, [r0, #12]
 801d990:	4618      	mov	r0, r3
 801d992:	4770      	bx	lr
 801d994:	4603      	mov	r3, r0
 801d996:	e7fb      	b.n	801d990 <rclc_action_take_goal_handle+0x18>

0801d998 <rclc_action_remove_used_goal_handle>:
 801d998:	b180      	cbz	r0, 801d9bc <rclc_action_remove_used_goal_handle+0x24>
 801d99a:	b179      	cbz	r1, 801d9bc <rclc_action_remove_used_goal_handle+0x24>
 801d99c:	68c3      	ldr	r3, [r0, #12]
 801d99e:	4299      	cmp	r1, r3
 801d9a0:	d00d      	beq.n	801d9be <rclc_action_remove_used_goal_handle+0x26>
 801d9a2:	b12b      	cbz	r3, 801d9b0 <rclc_action_remove_used_goal_handle+0x18>
 801d9a4:	681a      	ldr	r2, [r3, #0]
 801d9a6:	4291      	cmp	r1, r2
 801d9a8:	d003      	beq.n	801d9b2 <rclc_action_remove_used_goal_handle+0x1a>
 801d9aa:	4613      	mov	r3, r2
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d1f9      	bne.n	801d9a4 <rclc_action_remove_used_goal_handle+0xc>
 801d9b0:	4770      	bx	lr
 801d9b2:	680a      	ldr	r2, [r1, #0]
 801d9b4:	601a      	str	r2, [r3, #0]
 801d9b6:	6883      	ldr	r3, [r0, #8]
 801d9b8:	600b      	str	r3, [r1, #0]
 801d9ba:	6081      	str	r1, [r0, #8]
 801d9bc:	4770      	bx	lr
 801d9be:	680b      	ldr	r3, [r1, #0]
 801d9c0:	60c3      	str	r3, [r0, #12]
 801d9c2:	e7f8      	b.n	801d9b6 <rclc_action_remove_used_goal_handle+0x1e>

0801d9c4 <rclc_action_find_goal_handle_by_uuid>:
 801d9c4:	b538      	push	{r3, r4, r5, lr}
 801d9c6:	b181      	cbz	r1, 801d9ea <rclc_action_find_goal_handle_by_uuid+0x26>
 801d9c8:	b178      	cbz	r0, 801d9ea <rclc_action_find_goal_handle_by_uuid+0x26>
 801d9ca:	68c4      	ldr	r4, [r0, #12]
 801d9cc:	460d      	mov	r5, r1
 801d9ce:	b914      	cbnz	r4, 801d9d6 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d9d0:	e009      	b.n	801d9e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d9d2:	6824      	ldr	r4, [r4, #0]
 801d9d4:	b13c      	cbz	r4, 801d9e6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d9d6:	f104 0009 	add.w	r0, r4, #9
 801d9da:	2210      	movs	r2, #16
 801d9dc:	4629      	mov	r1, r5
 801d9de:	f004 fc65 	bl	80222ac <memcmp>
 801d9e2:	2800      	cmp	r0, #0
 801d9e4:	d1f5      	bne.n	801d9d2 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d9e6:	4620      	mov	r0, r4
 801d9e8:	bd38      	pop	{r3, r4, r5, pc}
 801d9ea:	2400      	movs	r4, #0
 801d9ec:	4620      	mov	r0, r4
 801d9ee:	bd38      	pop	{r3, r4, r5, pc}

0801d9f0 <rclc_action_find_first_handle_by_status>:
 801d9f0:	b140      	cbz	r0, 801da04 <rclc_action_find_first_handle_by_status+0x14>
 801d9f2:	68c0      	ldr	r0, [r0, #12]
 801d9f4:	b910      	cbnz	r0, 801d9fc <rclc_action_find_first_handle_by_status+0xc>
 801d9f6:	e005      	b.n	801da04 <rclc_action_find_first_handle_by_status+0x14>
 801d9f8:	6800      	ldr	r0, [r0, #0]
 801d9fa:	b118      	cbz	r0, 801da04 <rclc_action_find_first_handle_by_status+0x14>
 801d9fc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801da00:	428b      	cmp	r3, r1
 801da02:	d1f9      	bne.n	801d9f8 <rclc_action_find_first_handle_by_status+0x8>
 801da04:	4770      	bx	lr
 801da06:	bf00      	nop

0801da08 <rclc_action_find_first_terminated_handle>:
 801da08:	b140      	cbz	r0, 801da1c <rclc_action_find_first_terminated_handle+0x14>
 801da0a:	68c0      	ldr	r0, [r0, #12]
 801da0c:	b910      	cbnz	r0, 801da14 <rclc_action_find_first_terminated_handle+0xc>
 801da0e:	e005      	b.n	801da1c <rclc_action_find_first_terminated_handle+0x14>
 801da10:	6800      	ldr	r0, [r0, #0]
 801da12:	b118      	cbz	r0, 801da1c <rclc_action_find_first_terminated_handle+0x14>
 801da14:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801da18:	2b03      	cmp	r3, #3
 801da1a:	ddf9      	ble.n	801da10 <rclc_action_find_first_terminated_handle+0x8>
 801da1c:	4770      	bx	lr
 801da1e:	bf00      	nop

0801da20 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801da20:	b170      	cbz	r0, 801da40 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801da22:	68c0      	ldr	r0, [r0, #12]
 801da24:	b160      	cbz	r0, 801da40 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801da26:	b410      	push	{r4}
 801da28:	e001      	b.n	801da2e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801da2a:	6800      	ldr	r0, [r0, #0]
 801da2c:	b128      	cbz	r0, 801da3a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801da2e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801da32:	4299      	cmp	r1, r3
 801da34:	bf08      	it	eq
 801da36:	4294      	cmpeq	r4, r2
 801da38:	d1f7      	bne.n	801da2a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801da3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da3e:	4770      	bx	lr
 801da40:	4770      	bx	lr
 801da42:	bf00      	nop

0801da44 <rclc_action_find_handle_by_result_request_sequence_number>:
 801da44:	b170      	cbz	r0, 801da64 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801da46:	68c0      	ldr	r0, [r0, #12]
 801da48:	b160      	cbz	r0, 801da64 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801da4a:	b410      	push	{r4}
 801da4c:	e001      	b.n	801da52 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801da4e:	6800      	ldr	r0, [r0, #0]
 801da50:	b128      	cbz	r0, 801da5e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801da52:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801da56:	4299      	cmp	r1, r3
 801da58:	bf08      	it	eq
 801da5a:	4294      	cmpeq	r4, r2
 801da5c:	d1f7      	bne.n	801da4e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801da5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da62:	4770      	bx	lr
 801da64:	4770      	bx	lr
 801da66:	bf00      	nop

0801da68 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801da68:	b170      	cbz	r0, 801da88 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da6a:	68c0      	ldr	r0, [r0, #12]
 801da6c:	b160      	cbz	r0, 801da88 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da6e:	b410      	push	{r4}
 801da70:	e001      	b.n	801da76 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801da72:	6800      	ldr	r0, [r0, #0]
 801da74:	b128      	cbz	r0, 801da82 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801da76:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801da7a:	4299      	cmp	r1, r3
 801da7c:	bf08      	it	eq
 801da7e:	4294      	cmpeq	r4, r2
 801da80:	d1f7      	bne.n	801da72 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801da82:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da86:	4770      	bx	lr
 801da88:	4770      	bx	lr
 801da8a:	bf00      	nop

0801da8c <rclc_action_find_first_handle_with_goal_response>:
 801da8c:	b140      	cbz	r0, 801daa0 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da8e:	68c0      	ldr	r0, [r0, #12]
 801da90:	b910      	cbnz	r0, 801da98 <rclc_action_find_first_handle_with_goal_response+0xc>
 801da92:	e005      	b.n	801daa0 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da94:	6800      	ldr	r0, [r0, #0]
 801da96:	b118      	cbz	r0, 801daa0 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da98:	f890 3020 	ldrb.w	r3, [r0, #32]
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	d0f9      	beq.n	801da94 <rclc_action_find_first_handle_with_goal_response+0x8>
 801daa0:	4770      	bx	lr
 801daa2:	bf00      	nop

0801daa4 <rclc_action_find_first_handle_with_result_response>:
 801daa4:	b140      	cbz	r0, 801dab8 <rclc_action_find_first_handle_with_result_response+0x14>
 801daa6:	68c0      	ldr	r0, [r0, #12]
 801daa8:	b910      	cbnz	r0, 801dab0 <rclc_action_find_first_handle_with_result_response+0xc>
 801daaa:	e005      	b.n	801dab8 <rclc_action_find_first_handle_with_result_response+0x14>
 801daac:	6800      	ldr	r0, [r0, #0]
 801daae:	b118      	cbz	r0, 801dab8 <rclc_action_find_first_handle_with_result_response+0x14>
 801dab0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d0f9      	beq.n	801daac <rclc_action_find_first_handle_with_result_response+0x8>
 801dab8:	4770      	bx	lr
 801daba:	bf00      	nop

0801dabc <rclc_action_server_response_goal_request>:
 801dabc:	b198      	cbz	r0, 801dae6 <rclc_action_server_response_goal_request+0x2a>
 801dabe:	2200      	movs	r2, #0
 801dac0:	460b      	mov	r3, r1
 801dac2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801dac6:	b510      	push	{r4, lr}
 801dac8:	6844      	ldr	r4, [r0, #4]
 801daca:	b086      	sub	sp, #24
 801dacc:	f104 0010 	add.w	r0, r4, #16
 801dad0:	9205      	str	r2, [sp, #20]
 801dad2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801dad6:	aa03      	add	r2, sp, #12
 801dad8:	f88d 300c 	strb.w	r3, [sp, #12]
 801dadc:	f7ff fd3e 	bl	801d55c <rcl_action_send_goal_response>
 801dae0:	b918      	cbnz	r0, 801daea <rclc_action_server_response_goal_request+0x2e>
 801dae2:	b006      	add	sp, #24
 801dae4:	bd10      	pop	{r4, pc}
 801dae6:	200b      	movs	r0, #11
 801dae8:	4770      	bx	lr
 801daea:	9001      	str	r0, [sp, #4]
 801daec:	f7f7 fd28 	bl	8015540 <rcutils_reset_error>
 801daf0:	9801      	ldr	r0, [sp, #4]
 801daf2:	b006      	add	sp, #24
 801daf4:	bd10      	pop	{r4, pc}
 801daf6:	bf00      	nop

0801daf8 <rclc_action_server_goal_cancel_accept>:
 801daf8:	b310      	cbz	r0, 801db40 <rclc_action_server_goal_cancel_accept+0x48>
 801dafa:	b510      	push	{r4, lr}
 801dafc:	b090      	sub	sp, #64	@ 0x40
 801dafe:	4604      	mov	r4, r0
 801db00:	a806      	add	r0, sp, #24
 801db02:	f7ff ff01 	bl	801d908 <rcl_action_get_zero_initialized_cancel_response>
 801db06:	2300      	movs	r3, #0
 801db08:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801db0c:	46ec      	mov	ip, sp
 801db0e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801db12:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801db16:	f88d 3018 	strb.w	r3, [sp, #24]
 801db1a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801db1e:	f8cd d01c 	str.w	sp, [sp, #28]
 801db22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801db26:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801db48 <rclc_action_server_goal_cancel_accept+0x50>
 801db2a:	6860      	ldr	r0, [r4, #4]
 801db2c:	aa06      	add	r2, sp, #24
 801db2e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801db32:	3010      	adds	r0, #16
 801db34:	ed8d 7b08 	vstr	d7, [sp, #32]
 801db38:	f7ff fdc8 	bl	801d6cc <rcl_action_send_cancel_response>
 801db3c:	b010      	add	sp, #64	@ 0x40
 801db3e:	bd10      	pop	{r4, pc}
 801db40:	200b      	movs	r0, #11
 801db42:	4770      	bx	lr
 801db44:	f3af 8000 	nop.w
 801db48:	00000001 	.word	0x00000001
 801db4c:	00000001 	.word	0x00000001

0801db50 <rclc_action_server_goal_cancel_reject>:
 801db50:	b082      	sub	sp, #8
 801db52:	b530      	push	{r4, r5, lr}
 801db54:	b08b      	sub	sp, #44	@ 0x2c
 801db56:	ac0e      	add	r4, sp, #56	@ 0x38
 801db58:	e884 000c 	stmia.w	r4, {r2, r3}
 801db5c:	b188      	cbz	r0, 801db82 <rclc_action_server_goal_cancel_reject+0x32>
 801db5e:	4604      	mov	r4, r0
 801db60:	a801      	add	r0, sp, #4
 801db62:	460d      	mov	r5, r1
 801db64:	f7ff fed0 	bl	801d908 <rcl_action_get_zero_initialized_cancel_response>
 801db68:	aa01      	add	r2, sp, #4
 801db6a:	a90e      	add	r1, sp, #56	@ 0x38
 801db6c:	f104 0010 	add.w	r0, r4, #16
 801db70:	f88d 5004 	strb.w	r5, [sp, #4]
 801db74:	f7ff fdaa 	bl	801d6cc <rcl_action_send_cancel_response>
 801db78:	b00b      	add	sp, #44	@ 0x2c
 801db7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db7e:	b002      	add	sp, #8
 801db80:	4770      	bx	lr
 801db82:	200b      	movs	r0, #11
 801db84:	b00b      	add	sp, #44	@ 0x2c
 801db86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db8a:	b002      	add	sp, #8
 801db8c:	4770      	bx	lr
 801db8e:	bf00      	nop

0801db90 <__atomic_load_8>:
 801db90:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801db94:	4a16      	ldr	r2, [pc, #88]	@ (801dbf0 <__atomic_load_8+0x60>)
 801db96:	4b17      	ldr	r3, [pc, #92]	@ (801dbf4 <__atomic_load_8+0x64>)
 801db98:	f04f 0c01 	mov.w	ip, #1
 801db9c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801dba0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801dba4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801dba8:	fb02 f101 	mul.w	r1, r2, r1
 801dbac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801dbb0:	fba3 2301 	umull	r2, r3, r3, r1
 801dbb4:	091b      	lsrs	r3, r3, #4
 801dbb6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801dbba:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801dbbe:	b4d0      	push	{r4, r6, r7}
 801dbc0:	1ac9      	subs	r1, r1, r3
 801dbc2:	4c0d      	ldr	r4, [pc, #52]	@ (801dbf8 <__atomic_load_8+0x68>)
 801dbc4:	1862      	adds	r2, r4, r1
 801dbc6:	e8d2 3f4f 	ldrexb	r3, [r2]
 801dbca:	e8c2 cf46 	strexb	r6, ip, [r2]
 801dbce:	2e00      	cmp	r6, #0
 801dbd0:	d1f9      	bne.n	801dbc6 <__atomic_load_8+0x36>
 801dbd2:	b2db      	uxtb	r3, r3
 801dbd4:	f3bf 8f5b 	dmb	ish
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d1f4      	bne.n	801dbc6 <__atomic_load_8+0x36>
 801dbdc:	e9d0 6700 	ldrd	r6, r7, [r0]
 801dbe0:	f3bf 8f5b 	dmb	ish
 801dbe4:	5463      	strb	r3, [r4, r1]
 801dbe6:	4630      	mov	r0, r6
 801dbe8:	4639      	mov	r1, r7
 801dbea:	bcd0      	pop	{r4, r6, r7}
 801dbec:	4770      	bx	lr
 801dbee:	bf00      	nop
 801dbf0:	27d4eb2d 	.word	0x27d4eb2d
 801dbf4:	b21642c9 	.word	0xb21642c9
 801dbf8:	24069358 	.word	0x24069358

0801dbfc <__atomic_store_8>:
 801dbfc:	b570      	push	{r4, r5, r6, lr}
 801dbfe:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dc02:	4916      	ldr	r1, [pc, #88]	@ (801dc5c <__atomic_store_8+0x60>)
 801dc04:	4c16      	ldr	r4, [pc, #88]	@ (801dc60 <__atomic_store_8+0x64>)
 801dc06:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801dc0a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dc0e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dc12:	fb01 fe0e 	mul.w	lr, r1, lr
 801dc16:	4913      	ldr	r1, [pc, #76]	@ (801dc64 <__atomic_store_8+0x68>)
 801dc18:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801dc1c:	fba1 510e 	umull	r5, r1, r1, lr
 801dc20:	f04f 0501 	mov.w	r5, #1
 801dc24:	0909      	lsrs	r1, r1, #4
 801dc26:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dc2a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dc2e:	ebae 0e01 	sub.w	lr, lr, r1
 801dc32:	eb04 0c0e 	add.w	ip, r4, lr
 801dc36:	e8dc 1f4f 	ldrexb	r1, [ip]
 801dc3a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801dc3e:	2e00      	cmp	r6, #0
 801dc40:	d1f9      	bne.n	801dc36 <__atomic_store_8+0x3a>
 801dc42:	b2c9      	uxtb	r1, r1
 801dc44:	f3bf 8f5b 	dmb	ish
 801dc48:	2900      	cmp	r1, #0
 801dc4a:	d1f4      	bne.n	801dc36 <__atomic_store_8+0x3a>
 801dc4c:	e9c0 2300 	strd	r2, r3, [r0]
 801dc50:	f3bf 8f5b 	dmb	ish
 801dc54:	f804 100e 	strb.w	r1, [r4, lr]
 801dc58:	bd70      	pop	{r4, r5, r6, pc}
 801dc5a:	bf00      	nop
 801dc5c:	27d4eb2d 	.word	0x27d4eb2d
 801dc60:	24069358 	.word	0x24069358
 801dc64:	b21642c9 	.word	0xb21642c9

0801dc68 <__atomic_exchange_8>:
 801dc68:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801dc6c:	4917      	ldr	r1, [pc, #92]	@ (801dccc <__atomic_exchange_8+0x64>)
 801dc6e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801dc72:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801dc76:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dc7a:	fb01 fc0c 	mul.w	ip, r1, ip
 801dc7e:	4914      	ldr	r1, [pc, #80]	@ (801dcd0 <__atomic_exchange_8+0x68>)
 801dc80:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dc84:	b570      	push	{r4, r5, r6, lr}
 801dc86:	4686      	mov	lr, r0
 801dc88:	fba1 010c 	umull	r0, r1, r1, ip
 801dc8c:	4d11      	ldr	r5, [pc, #68]	@ (801dcd4 <__atomic_exchange_8+0x6c>)
 801dc8e:	f04f 0001 	mov.w	r0, #1
 801dc92:	0909      	lsrs	r1, r1, #4
 801dc94:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dc98:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dc9c:	ebac 0c01 	sub.w	ip, ip, r1
 801dca0:	eb05 010c 	add.w	r1, r5, ip
 801dca4:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dca8:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dcac:	2e00      	cmp	r6, #0
 801dcae:	d1f9      	bne.n	801dca4 <__atomic_exchange_8+0x3c>
 801dcb0:	b2e4      	uxtb	r4, r4
 801dcb2:	f3bf 8f5b 	dmb	ish
 801dcb6:	2c00      	cmp	r4, #0
 801dcb8:	d1f4      	bne.n	801dca4 <__atomic_exchange_8+0x3c>
 801dcba:	e9de 0100 	ldrd	r0, r1, [lr]
 801dcbe:	e9ce 2300 	strd	r2, r3, [lr]
 801dcc2:	f3bf 8f5b 	dmb	ish
 801dcc6:	f805 400c 	strb.w	r4, [r5, ip]
 801dcca:	bd70      	pop	{r4, r5, r6, pc}
 801dccc:	27d4eb2d 	.word	0x27d4eb2d
 801dcd0:	b21642c9 	.word	0xb21642c9
 801dcd4:	24069358 	.word	0x24069358

0801dcd8 <rcutils_get_env>:
 801dcd8:	b168      	cbz	r0, 801dcf6 <rcutils_get_env+0x1e>
 801dcda:	b510      	push	{r4, lr}
 801dcdc:	460c      	mov	r4, r1
 801dcde:	b129      	cbz	r1, 801dcec <rcutils_get_env+0x14>
 801dce0:	f003 fe64 	bl	80219ac <getenv>
 801dce4:	b120      	cbz	r0, 801dcf0 <rcutils_get_env+0x18>
 801dce6:	6020      	str	r0, [r4, #0]
 801dce8:	2000      	movs	r0, #0
 801dcea:	bd10      	pop	{r4, pc}
 801dcec:	4803      	ldr	r0, [pc, #12]	@ (801dcfc <rcutils_get_env+0x24>)
 801dcee:	bd10      	pop	{r4, pc}
 801dcf0:	4b03      	ldr	r3, [pc, #12]	@ (801dd00 <rcutils_get_env+0x28>)
 801dcf2:	6023      	str	r3, [r4, #0]
 801dcf4:	bd10      	pop	{r4, pc}
 801dcf6:	4803      	ldr	r0, [pc, #12]	@ (801dd04 <rcutils_get_env+0x2c>)
 801dcf8:	4770      	bx	lr
 801dcfa:	bf00      	nop
 801dcfc:	0802562c 	.word	0x0802562c
 801dd00:	08025ab4 	.word	0x08025ab4
 801dd04:	08025610 	.word	0x08025610

0801dd08 <rcutils_is_directory>:
 801dd08:	2000      	movs	r0, #0
 801dd0a:	4770      	bx	lr

0801dd0c <rcutils_join_path>:
 801dd0c:	b082      	sub	sp, #8
 801dd0e:	2000      	movs	r0, #0
 801dd10:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dd14:	b002      	add	sp, #8
 801dd16:	4770      	bx	lr

0801dd18 <rcutils_to_native_path>:
 801dd18:	b084      	sub	sp, #16
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	f10d 0c04 	add.w	ip, sp, #4
 801dd20:	b004      	add	sp, #16
 801dd22:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801dd26:	4770      	bx	lr

0801dd28 <rcutils_format_string_limit>:
 801dd28:	b40f      	push	{r0, r1, r2, r3}
 801dd2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd2c:	b083      	sub	sp, #12
 801dd2e:	ac08      	add	r4, sp, #32
 801dd30:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801dd32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801dd36:	b326      	cbz	r6, 801dd82 <rcutils_format_string_limit+0x5a>
 801dd38:	a808      	add	r0, sp, #32
 801dd3a:	f7f7 fbdd 	bl	80154f8 <rcutils_allocator_is_valid>
 801dd3e:	b300      	cbz	r0, 801dd82 <rcutils_format_string_limit+0x5a>
 801dd40:	2100      	movs	r1, #0
 801dd42:	ab0f      	add	r3, sp, #60	@ 0x3c
 801dd44:	4632      	mov	r2, r6
 801dd46:	4608      	mov	r0, r1
 801dd48:	e9cd 3300 	strd	r3, r3, [sp]
 801dd4c:	f000 f906 	bl	801df5c <rcutils_vsnprintf>
 801dd50:	1c43      	adds	r3, r0, #1
 801dd52:	4605      	mov	r5, r0
 801dd54:	d015      	beq.n	801dd82 <rcutils_format_string_limit+0x5a>
 801dd56:	1c47      	adds	r7, r0, #1
 801dd58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd5a:	429f      	cmp	r7, r3
 801dd5c:	d901      	bls.n	801dd62 <rcutils_format_string_limit+0x3a>
 801dd5e:	1e5d      	subs	r5, r3, #1
 801dd60:	461f      	mov	r7, r3
 801dd62:	9b08      	ldr	r3, [sp, #32]
 801dd64:	4638      	mov	r0, r7
 801dd66:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dd68:	4798      	blx	r3
 801dd6a:	4604      	mov	r4, r0
 801dd6c:	b148      	cbz	r0, 801dd82 <rcutils_format_string_limit+0x5a>
 801dd6e:	4632      	mov	r2, r6
 801dd70:	4639      	mov	r1, r7
 801dd72:	9b01      	ldr	r3, [sp, #4]
 801dd74:	f000 f8f2 	bl	801df5c <rcutils_vsnprintf>
 801dd78:	2800      	cmp	r0, #0
 801dd7a:	db09      	blt.n	801dd90 <rcutils_format_string_limit+0x68>
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	5563      	strb	r3, [r4, r5]
 801dd80:	e000      	b.n	801dd84 <rcutils_format_string_limit+0x5c>
 801dd82:	2400      	movs	r4, #0
 801dd84:	4620      	mov	r0, r4
 801dd86:	b003      	add	sp, #12
 801dd88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dd8c:	b004      	add	sp, #16
 801dd8e:	4770      	bx	lr
 801dd90:	4620      	mov	r0, r4
 801dd92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd94:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dd96:	2400      	movs	r4, #0
 801dd98:	4798      	blx	r3
 801dd9a:	e7f3      	b.n	801dd84 <rcutils_format_string_limit+0x5c>

0801dd9c <rcutils_repl_str>:
 801dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dda0:	ed2d 8b02 	vpush	{d8}
 801dda4:	b087      	sub	sp, #28
 801dda6:	2600      	movs	r6, #0
 801dda8:	4680      	mov	r8, r0
 801ddaa:	468a      	mov	sl, r1
 801ddac:	9000      	str	r0, [sp, #0]
 801ddae:	4608      	mov	r0, r1
 801ddb0:	ee08 2a10 	vmov	s16, r2
 801ddb4:	4699      	mov	r9, r3
 801ddb6:	2510      	movs	r5, #16
 801ddb8:	f7e2 fa9c 	bl	80002f4 <strlen>
 801ddbc:	4637      	mov	r7, r6
 801ddbe:	46b3      	mov	fp, r6
 801ddc0:	9001      	str	r0, [sp, #4]
 801ddc2:	e01e      	b.n	801de02 <rcutils_repl_str+0x66>
 801ddc4:	f10b 0b01 	add.w	fp, fp, #1
 801ddc8:	9b01      	ldr	r3, [sp, #4]
 801ddca:	455e      	cmp	r6, fp
 801ddcc:	eb04 0803 	add.w	r8, r4, r3
 801ddd0:	d211      	bcs.n	801ddf6 <rcutils_repl_str+0x5a>
 801ddd2:	442e      	add	r6, r5
 801ddd4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ddd8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801dddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dde0:	00b1      	lsls	r1, r6, #2
 801dde2:	4798      	blx	r3
 801dde4:	2800      	cmp	r0, #0
 801dde6:	f000 8088 	beq.w	801defa <rcutils_repl_str+0x15e>
 801ddea:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801ddee:	4607      	mov	r7, r0
 801ddf0:	bf28      	it	cs
 801ddf2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801ddf6:	9a00      	ldr	r2, [sp, #0]
 801ddf8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801ddfc:	1aa4      	subs	r4, r4, r2
 801ddfe:	f843 4c04 	str.w	r4, [r3, #-4]
 801de02:	4651      	mov	r1, sl
 801de04:	4640      	mov	r0, r8
 801de06:	f004 faa2 	bl	802234e <strstr>
 801de0a:	4604      	mov	r4, r0
 801de0c:	4638      	mov	r0, r7
 801de0e:	2c00      	cmp	r4, #0
 801de10:	d1d8      	bne.n	801ddc4 <rcutils_repl_str+0x28>
 801de12:	4640      	mov	r0, r8
 801de14:	f7e2 fa6e 	bl	80002f4 <strlen>
 801de18:	9b00      	ldr	r3, [sp, #0]
 801de1a:	eba8 0803 	sub.w	r8, r8, r3
 801de1e:	eb08 0400 	add.w	r4, r8, r0
 801de22:	9402      	str	r4, [sp, #8]
 801de24:	f1bb 0f00 	cmp.w	fp, #0
 801de28:	d045      	beq.n	801deb6 <rcutils_repl_str+0x11a>
 801de2a:	ee18 0a10 	vmov	r0, s16
 801de2e:	f7e2 fa61 	bl	80002f4 <strlen>
 801de32:	9a01      	ldr	r2, [sp, #4]
 801de34:	4606      	mov	r6, r0
 801de36:	f8d9 3000 	ldr.w	r3, [r9]
 801de3a:	1a82      	subs	r2, r0, r2
 801de3c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801de40:	fb0b 4202 	mla	r2, fp, r2, r4
 801de44:	1c50      	adds	r0, r2, #1
 801de46:	9205      	str	r2, [sp, #20]
 801de48:	4798      	blx	r3
 801de4a:	4682      	mov	sl, r0
 801de4c:	2800      	cmp	r0, #0
 801de4e:	d054      	beq.n	801defa <rcutils_repl_str+0x15e>
 801de50:	683a      	ldr	r2, [r7, #0]
 801de52:	463d      	mov	r5, r7
 801de54:	9900      	ldr	r1, [sp, #0]
 801de56:	2401      	movs	r4, #1
 801de58:	f004 fb71 	bl	802253e <memcpy>
 801de5c:	683b      	ldr	r3, [r7, #0]
 801de5e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801de62:	eb0a 0803 	add.w	r8, sl, r3
 801de66:	ee18 7a10 	vmov	r7, s16
 801de6a:	f8dd a000 	ldr.w	sl, [sp]
 801de6e:	f8cd 9000 	str.w	r9, [sp]
 801de72:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801de76:	4632      	mov	r2, r6
 801de78:	4639      	mov	r1, r7
 801de7a:	4640      	mov	r0, r8
 801de7c:	44b0      	add	r8, r6
 801de7e:	f004 fb5e 	bl	802253e <memcpy>
 801de82:	f855 2b04 	ldr.w	r2, [r5], #4
 801de86:	45a3      	cmp	fp, r4
 801de88:	444a      	add	r2, r9
 801de8a:	eb0a 0102 	add.w	r1, sl, r2
 801de8e:	d02a      	beq.n	801dee6 <rcutils_repl_str+0x14a>
 801de90:	6828      	ldr	r0, [r5, #0]
 801de92:	1a82      	subs	r2, r0, r2
 801de94:	4640      	mov	r0, r8
 801de96:	4490      	add	r8, r2
 801de98:	f004 fb51 	bl	802253e <memcpy>
 801de9c:	1c62      	adds	r2, r4, #1
 801de9e:	45a3      	cmp	fp, r4
 801dea0:	4614      	mov	r4, r2
 801dea2:	d8e8      	bhi.n	801de76 <rcutils_repl_str+0xda>
 801dea4:	f8dd 9000 	ldr.w	r9, [sp]
 801dea8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801deac:	2300      	movs	r3, #0
 801deae:	9a05      	ldr	r2, [sp, #20]
 801deb0:	f80a 3002 	strb.w	r3, [sl, r2]
 801deb4:	e00b      	b.n	801dece <rcutils_repl_str+0x132>
 801deb6:	4620      	mov	r0, r4
 801deb8:	f8d9 3000 	ldr.w	r3, [r9]
 801debc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dec0:	3001      	adds	r0, #1
 801dec2:	4798      	blx	r3
 801dec4:	4682      	mov	sl, r0
 801dec6:	b110      	cbz	r0, 801dece <rcutils_repl_str+0x132>
 801dec8:	9900      	ldr	r1, [sp, #0]
 801deca:	f004 fb30 	bl	802252e <strcpy>
 801dece:	4638      	mov	r0, r7
 801ded0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ded4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ded8:	4798      	blx	r3
 801deda:	4650      	mov	r0, sl
 801dedc:	b007      	add	sp, #28
 801dede:	ecbd 8b02 	vpop	{d8}
 801dee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dee6:	9b02      	ldr	r3, [sp, #8]
 801dee8:	4640      	mov	r0, r8
 801deea:	f8dd 9000 	ldr.w	r9, [sp]
 801deee:	1a9a      	subs	r2, r3, r2
 801def0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801def4:	f004 fb23 	bl	802253e <memcpy>
 801def8:	e7d8      	b.n	801deac <rcutils_repl_str+0x110>
 801defa:	f04f 0a00 	mov.w	sl, #0
 801defe:	e7e6      	b.n	801dece <rcutils_repl_str+0x132>

0801df00 <rcutils_snprintf>:
 801df00:	b40c      	push	{r2, r3}
 801df02:	b530      	push	{r4, r5, lr}
 801df04:	b083      	sub	sp, #12
 801df06:	ab06      	add	r3, sp, #24
 801df08:	f853 2b04 	ldr.w	r2, [r3], #4
 801df0c:	9301      	str	r3, [sp, #4]
 801df0e:	b1e2      	cbz	r2, 801df4a <rcutils_snprintf+0x4a>
 801df10:	fab0 f480 	clz	r4, r0
 801df14:	fab1 f581 	clz	r5, r1
 801df18:	ea50 0c01 	orrs.w	ip, r0, r1
 801df1c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801df20:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801df24:	d008      	beq.n	801df38 <rcutils_snprintf+0x38>
 801df26:	b984      	cbnz	r4, 801df4a <rcutils_snprintf+0x4a>
 801df28:	b97d      	cbnz	r5, 801df4a <rcutils_snprintf+0x4a>
 801df2a:	f004 f91d 	bl	8022168 <vsniprintf>
 801df2e:	b003      	add	sp, #12
 801df30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df34:	b002      	add	sp, #8
 801df36:	4770      	bx	lr
 801df38:	4661      	mov	r1, ip
 801df3a:	4660      	mov	r0, ip
 801df3c:	f004 f914 	bl	8022168 <vsniprintf>
 801df40:	b003      	add	sp, #12
 801df42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df46:	b002      	add	sp, #8
 801df48:	4770      	bx	lr
 801df4a:	f004 fac3 	bl	80224d4 <__errno>
 801df4e:	2216      	movs	r2, #22
 801df50:	4603      	mov	r3, r0
 801df52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df56:	601a      	str	r2, [r3, #0]
 801df58:	e7e9      	b.n	801df2e <rcutils_snprintf+0x2e>
 801df5a:	bf00      	nop

0801df5c <rcutils_vsnprintf>:
 801df5c:	b570      	push	{r4, r5, r6, lr}
 801df5e:	b1b2      	cbz	r2, 801df8e <rcutils_vsnprintf+0x32>
 801df60:	fab0 f480 	clz	r4, r0
 801df64:	fab1 f581 	clz	r5, r1
 801df68:	ea50 0c01 	orrs.w	ip, r0, r1
 801df6c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801df70:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801df74:	d005      	beq.n	801df82 <rcutils_vsnprintf+0x26>
 801df76:	b954      	cbnz	r4, 801df8e <rcutils_vsnprintf+0x32>
 801df78:	b94d      	cbnz	r5, 801df8e <rcutils_vsnprintf+0x32>
 801df7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df7e:	f004 b8f3 	b.w	8022168 <vsniprintf>
 801df82:	4661      	mov	r1, ip
 801df84:	4660      	mov	r0, ip
 801df86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df8a:	f004 b8ed 	b.w	8022168 <vsniprintf>
 801df8e:	f004 faa1 	bl	80224d4 <__errno>
 801df92:	2316      	movs	r3, #22
 801df94:	6003      	str	r3, [r0, #0]
 801df96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df9a:	bd70      	pop	{r4, r5, r6, pc}

0801df9c <rcutils_strdup>:
 801df9c:	b084      	sub	sp, #16
 801df9e:	b570      	push	{r4, r5, r6, lr}
 801dfa0:	b082      	sub	sp, #8
 801dfa2:	4605      	mov	r5, r0
 801dfa4:	ac07      	add	r4, sp, #28
 801dfa6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801dfaa:	b1b0      	cbz	r0, 801dfda <rcutils_strdup+0x3e>
 801dfac:	f7e2 f9a2 	bl	80002f4 <strlen>
 801dfb0:	1c42      	adds	r2, r0, #1
 801dfb2:	9b07      	ldr	r3, [sp, #28]
 801dfb4:	4606      	mov	r6, r0
 801dfb6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dfb8:	4610      	mov	r0, r2
 801dfba:	9201      	str	r2, [sp, #4]
 801dfbc:	4798      	blx	r3
 801dfbe:	4604      	mov	r4, r0
 801dfc0:	b128      	cbz	r0, 801dfce <rcutils_strdup+0x32>
 801dfc2:	9a01      	ldr	r2, [sp, #4]
 801dfc4:	4629      	mov	r1, r5
 801dfc6:	f004 faba 	bl	802253e <memcpy>
 801dfca:	2300      	movs	r3, #0
 801dfcc:	55a3      	strb	r3, [r4, r6]
 801dfce:	4620      	mov	r0, r4
 801dfd0:	b002      	add	sp, #8
 801dfd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfd6:	b004      	add	sp, #16
 801dfd8:	4770      	bx	lr
 801dfda:	4604      	mov	r4, r0
 801dfdc:	e7f7      	b.n	801dfce <rcutils_strdup+0x32>
 801dfde:	bf00      	nop

0801dfe0 <rcutils_strndup>:
 801dfe0:	b082      	sub	sp, #8
 801dfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfe4:	ac06      	add	r4, sp, #24
 801dfe6:	4605      	mov	r5, r0
 801dfe8:	e884 000c 	stmia.w	r4, {r2, r3}
 801dfec:	b188      	cbz	r0, 801e012 <rcutils_strndup+0x32>
 801dfee:	1c4f      	adds	r7, r1, #1
 801dff0:	460e      	mov	r6, r1
 801dff2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dff4:	4638      	mov	r0, r7
 801dff6:	4790      	blx	r2
 801dff8:	4604      	mov	r4, r0
 801dffa:	b128      	cbz	r0, 801e008 <rcutils_strndup+0x28>
 801dffc:	463a      	mov	r2, r7
 801dffe:	4629      	mov	r1, r5
 801e000:	f004 fa9d 	bl	802253e <memcpy>
 801e004:	2300      	movs	r3, #0
 801e006:	55a3      	strb	r3, [r4, r6]
 801e008:	4620      	mov	r0, r4
 801e00a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e00e:	b002      	add	sp, #8
 801e010:	4770      	bx	lr
 801e012:	4604      	mov	r4, r0
 801e014:	e7f8      	b.n	801e008 <rcutils_strndup+0x28>
 801e016:	bf00      	nop

0801e018 <rcutils_get_zero_initialized_string_map>:
 801e018:	2000      	movs	r0, #0
 801e01a:	4b01      	ldr	r3, [pc, #4]	@ (801e020 <rcutils_get_zero_initialized_string_map+0x8>)
 801e01c:	6018      	str	r0, [r3, #0]
 801e01e:	4770      	bx	lr
 801e020:	24069370 	.word	0x24069370

0801e024 <rcutils_string_map_reserve>:
 801e024:	2800      	cmp	r0, #0
 801e026:	d05e      	beq.n	801e0e6 <rcutils_string_map_reserve+0xc2>
 801e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e02c:	460c      	mov	r4, r1
 801e02e:	6801      	ldr	r1, [r0, #0]
 801e030:	b082      	sub	sp, #8
 801e032:	4605      	mov	r5, r0
 801e034:	b129      	cbz	r1, 801e042 <rcutils_string_map_reserve+0x1e>
 801e036:	68cb      	ldr	r3, [r1, #12]
 801e038:	42a3      	cmp	r3, r4
 801e03a:	d906      	bls.n	801e04a <rcutils_string_map_reserve+0x26>
 801e03c:	461c      	mov	r4, r3
 801e03e:	2900      	cmp	r1, #0
 801e040:	d1f9      	bne.n	801e036 <rcutils_string_map_reserve+0x12>
 801e042:	201f      	movs	r0, #31
 801e044:	b002      	add	sp, #8
 801e046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e04a:	688b      	ldr	r3, [r1, #8]
 801e04c:	42a3      	cmp	r3, r4
 801e04e:	d046      	beq.n	801e0de <rcutils_string_map_reserve+0xba>
 801e050:	6a0e      	ldr	r6, [r1, #32]
 801e052:	2c00      	cmp	r4, #0
 801e054:	d033      	beq.n	801e0be <rcutils_string_map_reserve+0x9a>
 801e056:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801e05a:	d242      	bcs.n	801e0e2 <rcutils_string_map_reserve+0xbe>
 801e05c:	00a7      	lsls	r7, r4, #2
 801e05e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801e062:	6808      	ldr	r0, [r1, #0]
 801e064:	4632      	mov	r2, r6
 801e066:	4639      	mov	r1, r7
 801e068:	47c0      	blx	r8
 801e06a:	2800      	cmp	r0, #0
 801e06c:	d039      	beq.n	801e0e2 <rcutils_string_map_reserve+0xbe>
 801e06e:	682b      	ldr	r3, [r5, #0]
 801e070:	4632      	mov	r2, r6
 801e072:	4639      	mov	r1, r7
 801e074:	6018      	str	r0, [r3, #0]
 801e076:	6858      	ldr	r0, [r3, #4]
 801e078:	47c0      	blx	r8
 801e07a:	2800      	cmp	r0, #0
 801e07c:	d031      	beq.n	801e0e2 <rcutils_string_map_reserve+0xbe>
 801e07e:	682d      	ldr	r5, [r5, #0]
 801e080:	68ab      	ldr	r3, [r5, #8]
 801e082:	6068      	str	r0, [r5, #4]
 801e084:	42a3      	cmp	r3, r4
 801e086:	d225      	bcs.n	801e0d4 <rcutils_string_map_reserve+0xb0>
 801e088:	682a      	ldr	r2, [r5, #0]
 801e08a:	eb00 0c07 	add.w	ip, r0, r7
 801e08e:	0099      	lsls	r1, r3, #2
 801e090:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801e094:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801e098:	45e6      	cmp	lr, ip
 801e09a:	d203      	bcs.n	801e0a4 <rcutils_string_map_reserve+0x80>
 801e09c:	eb02 0c07 	add.w	ip, r2, r7
 801e0a0:	4566      	cmp	r6, ip
 801e0a2:	d322      	bcc.n	801e0ea <rcutils_string_map_reserve+0xc6>
 801e0a4:	1ae3      	subs	r3, r4, r3
 801e0a6:	4670      	mov	r0, lr
 801e0a8:	2100      	movs	r1, #0
 801e0aa:	009a      	lsls	r2, r3, #2
 801e0ac:	9201      	str	r2, [sp, #4]
 801e0ae:	f004 f927 	bl	8022300 <memset>
 801e0b2:	9a01      	ldr	r2, [sp, #4]
 801e0b4:	2100      	movs	r1, #0
 801e0b6:	4630      	mov	r0, r6
 801e0b8:	f004 f922 	bl	8022300 <memset>
 801e0bc:	e00a      	b.n	801e0d4 <rcutils_string_map_reserve+0xb0>
 801e0be:	694f      	ldr	r7, [r1, #20]
 801e0c0:	6808      	ldr	r0, [r1, #0]
 801e0c2:	4631      	mov	r1, r6
 801e0c4:	47b8      	blx	r7
 801e0c6:	682b      	ldr	r3, [r5, #0]
 801e0c8:	4631      	mov	r1, r6
 801e0ca:	6858      	ldr	r0, [r3, #4]
 801e0cc:	601c      	str	r4, [r3, #0]
 801e0ce:	47b8      	blx	r7
 801e0d0:	682d      	ldr	r5, [r5, #0]
 801e0d2:	606c      	str	r4, [r5, #4]
 801e0d4:	2000      	movs	r0, #0
 801e0d6:	60ac      	str	r4, [r5, #8]
 801e0d8:	b002      	add	sp, #8
 801e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0de:	2000      	movs	r0, #0
 801e0e0:	e7b0      	b.n	801e044 <rcutils_string_map_reserve+0x20>
 801e0e2:	200a      	movs	r0, #10
 801e0e4:	e7ae      	b.n	801e044 <rcutils_string_map_reserve+0x20>
 801e0e6:	200b      	movs	r0, #11
 801e0e8:	4770      	bx	lr
 801e0ea:	1f0b      	subs	r3, r1, #4
 801e0ec:	4418      	add	r0, r3
 801e0ee:	4413      	add	r3, r2
 801e0f0:	3a04      	subs	r2, #4
 801e0f2:	4417      	add	r7, r2
 801e0f4:	2200      	movs	r2, #0
 801e0f6:	f843 2f04 	str.w	r2, [r3, #4]!
 801e0fa:	42bb      	cmp	r3, r7
 801e0fc:	f840 2f04 	str.w	r2, [r0, #4]!
 801e100:	d1f9      	bne.n	801e0f6 <rcutils_string_map_reserve+0xd2>
 801e102:	e7e7      	b.n	801e0d4 <rcutils_string_map_reserve+0xb0>

0801e104 <rcutils_string_map_init>:
 801e104:	b082      	sub	sp, #8
 801e106:	b570      	push	{r4, r5, r6, lr}
 801e108:	ac04      	add	r4, sp, #16
 801e10a:	e884 000c 	stmia.w	r4, {r2, r3}
 801e10e:	b380      	cbz	r0, 801e172 <rcutils_string_map_init+0x6e>
 801e110:	6806      	ldr	r6, [r0, #0]
 801e112:	4604      	mov	r4, r0
 801e114:	b12e      	cbz	r6, 801e122 <rcutils_string_map_init+0x1e>
 801e116:	251e      	movs	r5, #30
 801e118:	4628      	mov	r0, r5
 801e11a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e11e:	b002      	add	sp, #8
 801e120:	4770      	bx	lr
 801e122:	a804      	add	r0, sp, #16
 801e124:	460d      	mov	r5, r1
 801e126:	f7f7 f9e7 	bl	80154f8 <rcutils_allocator_is_valid>
 801e12a:	b310      	cbz	r0, 801e172 <rcutils_string_map_init+0x6e>
 801e12c:	9b04      	ldr	r3, [sp, #16]
 801e12e:	2024      	movs	r0, #36	@ 0x24
 801e130:	9908      	ldr	r1, [sp, #32]
 801e132:	4798      	blx	r3
 801e134:	6020      	str	r0, [r4, #0]
 801e136:	b310      	cbz	r0, 801e17e <rcutils_string_map_init+0x7a>
 801e138:	f10d 0e10 	add.w	lr, sp, #16
 801e13c:	f100 0c10 	add.w	ip, r0, #16
 801e140:	e9c0 6600 	strd	r6, r6, [r0]
 801e144:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801e148:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e14c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e150:	f8de 3000 	ldr.w	r3, [lr]
 801e154:	4629      	mov	r1, r5
 801e156:	4620      	mov	r0, r4
 801e158:	f8cc 3000 	str.w	r3, [ip]
 801e15c:	f7ff ff62 	bl	801e024 <rcutils_string_map_reserve>
 801e160:	4605      	mov	r5, r0
 801e162:	2800      	cmp	r0, #0
 801e164:	d0d8      	beq.n	801e118 <rcutils_string_map_init+0x14>
 801e166:	9b05      	ldr	r3, [sp, #20]
 801e168:	9908      	ldr	r1, [sp, #32]
 801e16a:	6820      	ldr	r0, [r4, #0]
 801e16c:	4798      	blx	r3
 801e16e:	6026      	str	r6, [r4, #0]
 801e170:	e7d2      	b.n	801e118 <rcutils_string_map_init+0x14>
 801e172:	250b      	movs	r5, #11
 801e174:	4628      	mov	r0, r5
 801e176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e17a:	b002      	add	sp, #8
 801e17c:	4770      	bx	lr
 801e17e:	250a      	movs	r5, #10
 801e180:	e7ca      	b.n	801e118 <rcutils_string_map_init+0x14>
 801e182:	bf00      	nop

0801e184 <rcutils_string_map_fini>:
 801e184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e188:	b082      	sub	sp, #8
 801e18a:	2800      	cmp	r0, #0
 801e18c:	d03a      	beq.n	801e204 <rcutils_string_map_fini+0x80>
 801e18e:	6804      	ldr	r4, [r0, #0]
 801e190:	4606      	mov	r6, r0
 801e192:	2c00      	cmp	r4, #0
 801e194:	d032      	beq.n	801e1fc <rcutils_string_map_fini+0x78>
 801e196:	68a3      	ldr	r3, [r4, #8]
 801e198:	b32b      	cbz	r3, 801e1e6 <rcutils_string_map_fini+0x62>
 801e19a:	2500      	movs	r5, #0
 801e19c:	6822      	ldr	r2, [r4, #0]
 801e19e:	462f      	mov	r7, r5
 801e1a0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e1a4:	b1e0      	cbz	r0, 801e1e0 <rcutils_string_map_fini+0x5c>
 801e1a6:	6a21      	ldr	r1, [r4, #32]
 801e1a8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801e1ac:	9101      	str	r1, [sp, #4]
 801e1ae:	47c0      	blx	r8
 801e1b0:	9901      	ldr	r1, [sp, #4]
 801e1b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 801e1b6:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801e1ba:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e1be:	47c0      	blx	r8
 801e1c0:	68e3      	ldr	r3, [r4, #12]
 801e1c2:	6862      	ldr	r2, [r4, #4]
 801e1c4:	3b01      	subs	r3, #1
 801e1c6:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801e1ca:	3501      	adds	r5, #1
 801e1cc:	60e3      	str	r3, [r4, #12]
 801e1ce:	6834      	ldr	r4, [r6, #0]
 801e1d0:	68a3      	ldr	r3, [r4, #8]
 801e1d2:	429d      	cmp	r5, r3
 801e1d4:	d207      	bcs.n	801e1e6 <rcutils_string_map_fini+0x62>
 801e1d6:	6822      	ldr	r2, [r4, #0]
 801e1d8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e1dc:	2800      	cmp	r0, #0
 801e1de:	d1e2      	bne.n	801e1a6 <rcutils_string_map_fini+0x22>
 801e1e0:	3501      	adds	r5, #1
 801e1e2:	429d      	cmp	r5, r3
 801e1e4:	d3dc      	bcc.n	801e1a0 <rcutils_string_map_fini+0x1c>
 801e1e6:	2100      	movs	r1, #0
 801e1e8:	4630      	mov	r0, r6
 801e1ea:	f7ff ff1b 	bl	801e024 <rcutils_string_map_reserve>
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	b920      	cbnz	r0, 801e1fc <rcutils_string_map_fini+0x78>
 801e1f2:	6830      	ldr	r0, [r6, #0]
 801e1f4:	6943      	ldr	r3, [r0, #20]
 801e1f6:	6a01      	ldr	r1, [r0, #32]
 801e1f8:	4798      	blx	r3
 801e1fa:	6034      	str	r4, [r6, #0]
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	b002      	add	sp, #8
 801e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e204:	240b      	movs	r4, #11
 801e206:	4620      	mov	r0, r4
 801e208:	b002      	add	sp, #8
 801e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e20e:	bf00      	nop

0801e210 <rcutils_string_map_getn>:
 801e210:	b378      	cbz	r0, 801e272 <rcutils_string_map_getn+0x62>
 801e212:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e216:	f8d0 b000 	ldr.w	fp, [r0]
 801e21a:	f1bb 0f00 	cmp.w	fp, #0
 801e21e:	d01f      	beq.n	801e260 <rcutils_string_map_getn+0x50>
 801e220:	fab1 f481 	clz	r4, r1
 801e224:	4688      	mov	r8, r1
 801e226:	0964      	lsrs	r4, r4, #5
 801e228:	b1d1      	cbz	r1, 801e260 <rcutils_string_map_getn+0x50>
 801e22a:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e22e:	f8db 6000 	ldr.w	r6, [fp]
 801e232:	b1af      	cbz	r7, 801e260 <rcutils_string_map_getn+0x50>
 801e234:	4691      	mov	r9, r2
 801e236:	3e04      	subs	r6, #4
 801e238:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e23c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e240:	3401      	adds	r4, #1
 801e242:	4628      	mov	r0, r5
 801e244:	b155      	cbz	r5, 801e25c <rcutils_string_map_getn+0x4c>
 801e246:	f7e2 f855 	bl	80002f4 <strlen>
 801e24a:	4602      	mov	r2, r0
 801e24c:	4629      	mov	r1, r5
 801e24e:	4640      	mov	r0, r8
 801e250:	454a      	cmp	r2, r9
 801e252:	bf38      	it	cc
 801e254:	464a      	movcc	r2, r9
 801e256:	f004 f868 	bl	802232a <strncmp>
 801e25a:	b120      	cbz	r0, 801e266 <rcutils_string_map_getn+0x56>
 801e25c:	42a7      	cmp	r7, r4
 801e25e:	d1eb      	bne.n	801e238 <rcutils_string_map_getn+0x28>
 801e260:	2000      	movs	r0, #0
 801e262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e266:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e26a:	f853 000a 	ldr.w	r0, [r3, sl]
 801e26e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e272:	4770      	bx	lr
 801e274:	0000      	movs	r0, r0
	...

0801e278 <rmw_get_zero_initialized_context>:
 801e278:	b510      	push	{r4, lr}
 801e27a:	4604      	mov	r4, r0
 801e27c:	3010      	adds	r0, #16
 801e27e:	f000 f80f 	bl	801e2a0 <rmw_get_zero_initialized_init_options>
 801e282:	2300      	movs	r3, #0
 801e284:	4620      	mov	r0, r4
 801e286:	60a3      	str	r3, [r4, #8]
 801e288:	64a3      	str	r3, [r4, #72]	@ 0x48
 801e28a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801e28c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801e298 <rmw_get_zero_initialized_context+0x20>
 801e290:	ed84 7b00 	vstr	d7, [r4]
 801e294:	bd10      	pop	{r4, pc}
 801e296:	bf00      	nop
	...

0801e2a0 <rmw_get_zero_initialized_init_options>:
 801e2a0:	b510      	push	{r4, lr}
 801e2a2:	4604      	mov	r4, r0
 801e2a4:	2238      	movs	r2, #56	@ 0x38
 801e2a6:	2100      	movs	r1, #0
 801e2a8:	f004 f82a 	bl	8022300 <memset>
 801e2ac:	f104 0010 	add.w	r0, r4, #16
 801e2b0:	f000 f806 	bl	801e2c0 <rmw_get_default_security_options>
 801e2b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2b8:	4620      	mov	r0, r4
 801e2ba:	60e3      	str	r3, [r4, #12]
 801e2bc:	bd10      	pop	{r4, pc}
 801e2be:	bf00      	nop

0801e2c0 <rmw_get_default_security_options>:
 801e2c0:	2200      	movs	r2, #0
 801e2c2:	7002      	strb	r2, [r0, #0]
 801e2c4:	6042      	str	r2, [r0, #4]
 801e2c6:	4770      	bx	lr

0801e2c8 <rmw_subscription_content_filter_options_fini>:
 801e2c8:	b1b0      	cbz	r0, 801e2f8 <rmw_subscription_content_filter_options_fini+0x30>
 801e2ca:	b538      	push	{r3, r4, r5, lr}
 801e2cc:	4604      	mov	r4, r0
 801e2ce:	4608      	mov	r0, r1
 801e2d0:	460d      	mov	r5, r1
 801e2d2:	f7f7 f911 	bl	80154f8 <rcutils_allocator_is_valid>
 801e2d6:	b168      	cbz	r0, 801e2f4 <rmw_subscription_content_filter_options_fini+0x2c>
 801e2d8:	6820      	ldr	r0, [r4, #0]
 801e2da:	b120      	cbz	r0, 801e2e6 <rmw_subscription_content_filter_options_fini+0x1e>
 801e2dc:	686b      	ldr	r3, [r5, #4]
 801e2de:	6929      	ldr	r1, [r5, #16]
 801e2e0:	4798      	blx	r3
 801e2e2:	2300      	movs	r3, #0
 801e2e4:	6023      	str	r3, [r4, #0]
 801e2e6:	1d20      	adds	r0, r4, #4
 801e2e8:	f003 f97c 	bl	80215e4 <rcutils_string_array_fini>
 801e2ec:	3800      	subs	r0, #0
 801e2ee:	bf18      	it	ne
 801e2f0:	2001      	movne	r0, #1
 801e2f2:	bd38      	pop	{r3, r4, r5, pc}
 801e2f4:	200b      	movs	r0, #11
 801e2f6:	bd38      	pop	{r3, r4, r5, pc}
 801e2f8:	200b      	movs	r0, #11
 801e2fa:	4770      	bx	lr

0801e2fc <rmw_get_default_subscription_options>:
 801e2fc:	2200      	movs	r2, #0
 801e2fe:	e9c0 2200 	strd	r2, r2, [r0]
 801e302:	6082      	str	r2, [r0, #8]
 801e304:	4770      	bx	lr
 801e306:	bf00      	nop

0801e308 <rmw_time_equal>:
 801e308:	b4f0      	push	{r4, r5, r6, r7}
 801e30a:	b084      	sub	sp, #16
 801e30c:	ac04      	add	r4, sp, #16
 801e30e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e312:	4603      	mov	r3, r0
 801e314:	4925      	ldr	r1, [pc, #148]	@ (801e3ac <rmw_time_equal+0xa4>)
 801e316:	9d01      	ldr	r5, [sp, #4]
 801e318:	4610      	mov	r0, r2
 801e31a:	4299      	cmp	r1, r3
 801e31c:	f04f 0202 	mov.w	r2, #2
 801e320:	9e03      	ldr	r6, [sp, #12]
 801e322:	41aa      	sbcs	r2, r5
 801e324:	d330      	bcc.n	801e388 <rmw_time_equal+0x80>
 801e326:	4c22      	ldr	r4, [pc, #136]	@ (801e3b0 <rmw_time_equal+0xa8>)
 801e328:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e32c:	fba3 3204 	umull	r3, r2, r3, r4
 801e330:	fb04 2205 	mla	r2, r4, r5, r2
 801e334:	43dd      	mvns	r5, r3
 801e336:	1a8c      	subs	r4, r1, r2
 801e338:	4285      	cmp	r5, r0
 801e33a:	41b4      	sbcs	r4, r6
 801e33c:	d332      	bcc.n	801e3a4 <rmw_time_equal+0x9c>
 801e33e:	eb10 0c03 	adds.w	ip, r0, r3
 801e342:	eb42 0106 	adc.w	r1, r2, r6
 801e346:	4819      	ldr	r0, [pc, #100]	@ (801e3ac <rmw_time_equal+0xa4>)
 801e348:	2202      	movs	r2, #2
 801e34a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e34c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e34e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e352:	4298      	cmp	r0, r3
 801e354:	41b2      	sbcs	r2, r6
 801e356:	d31c      	bcc.n	801e392 <rmw_time_equal+0x8a>
 801e358:	4c15      	ldr	r4, [pc, #84]	@ (801e3b0 <rmw_time_equal+0xa8>)
 801e35a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e35e:	fba3 3204 	umull	r3, r2, r3, r4
 801e362:	fb04 2206 	mla	r2, r4, r6, r2
 801e366:	43de      	mvns	r6, r3
 801e368:	1a84      	subs	r4, r0, r2
 801e36a:	42ae      	cmp	r6, r5
 801e36c:	41bc      	sbcs	r4, r7
 801e36e:	d315      	bcc.n	801e39c <rmw_time_equal+0x94>
 801e370:	195b      	adds	r3, r3, r5
 801e372:	eb42 0207 	adc.w	r2, r2, r7
 801e376:	428a      	cmp	r2, r1
 801e378:	bf08      	it	eq
 801e37a:	4563      	cmpeq	r3, ip
 801e37c:	bf0c      	ite	eq
 801e37e:	2001      	moveq	r0, #1
 801e380:	2000      	movne	r0, #0
 801e382:	b004      	add	sp, #16
 801e384:	bcf0      	pop	{r4, r5, r6, r7}
 801e386:	4770      	bx	lr
 801e388:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e38c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e390:	e7d9      	b.n	801e346 <rmw_time_equal+0x3e>
 801e392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e396:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801e39a:	e7ec      	b.n	801e376 <rmw_time_equal+0x6e>
 801e39c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3a0:	4602      	mov	r2, r0
 801e3a2:	e7e8      	b.n	801e376 <rmw_time_equal+0x6e>
 801e3a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e3a8:	e7cd      	b.n	801e346 <rmw_time_equal+0x3e>
 801e3aa:	bf00      	nop
 801e3ac:	25c17d04 	.word	0x25c17d04
 801e3b0:	3b9aca00 	.word	0x3b9aca00

0801e3b4 <rmw_time_total_nsec>:
 801e3b4:	b470      	push	{r4, r5, r6}
 801e3b6:	b085      	sub	sp, #20
 801e3b8:	ac04      	add	r4, sp, #16
 801e3ba:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e3be:	4603      	mov	r3, r0
 801e3c0:	4913      	ldr	r1, [pc, #76]	@ (801e410 <rmw_time_total_nsec+0x5c>)
 801e3c2:	9d01      	ldr	r5, [sp, #4]
 801e3c4:	4610      	mov	r0, r2
 801e3c6:	4299      	cmp	r1, r3
 801e3c8:	f04f 0202 	mov.w	r2, #2
 801e3cc:	9e03      	ldr	r6, [sp, #12]
 801e3ce:	41aa      	sbcs	r2, r5
 801e3d0:	d311      	bcc.n	801e3f6 <rmw_time_total_nsec+0x42>
 801e3d2:	4c10      	ldr	r4, [pc, #64]	@ (801e414 <rmw_time_total_nsec+0x60>)
 801e3d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e3d8:	fba3 3204 	umull	r3, r2, r3, r4
 801e3dc:	fb04 2205 	mla	r2, r4, r5, r2
 801e3e0:	43dd      	mvns	r5, r3
 801e3e2:	1a8c      	subs	r4, r1, r2
 801e3e4:	4285      	cmp	r5, r0
 801e3e6:	41b4      	sbcs	r4, r6
 801e3e8:	d30c      	bcc.n	801e404 <rmw_time_total_nsec+0x50>
 801e3ea:	1818      	adds	r0, r3, r0
 801e3ec:	eb42 0106 	adc.w	r1, r2, r6
 801e3f0:	b005      	add	sp, #20
 801e3f2:	bc70      	pop	{r4, r5, r6}
 801e3f4:	4770      	bx	lr
 801e3f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e3fe:	b005      	add	sp, #20
 801e400:	bc70      	pop	{r4, r5, r6}
 801e402:	4770      	bx	lr
 801e404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e408:	b005      	add	sp, #20
 801e40a:	bc70      	pop	{r4, r5, r6}
 801e40c:	4770      	bx	lr
 801e40e:	bf00      	nop
 801e410:	25c17d04 	.word	0x25c17d04
 801e414:	3b9aca00 	.word	0x3b9aca00

0801e418 <rmw_get_zero_initialized_message_info>:
 801e418:	b510      	push	{r4, lr}
 801e41a:	4604      	mov	r4, r0
 801e41c:	2240      	movs	r2, #64	@ 0x40
 801e41e:	2100      	movs	r1, #0
 801e420:	f003 ff6e 	bl	8022300 <memset>
 801e424:	4620      	mov	r0, r4
 801e426:	bd10      	pop	{r4, pc}

0801e428 <rmw_validate_full_topic_name>:
 801e428:	2800      	cmp	r0, #0
 801e42a:	d05d      	beq.n	801e4e8 <rmw_validate_full_topic_name+0xc0>
 801e42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e430:	460d      	mov	r5, r1
 801e432:	2900      	cmp	r1, #0
 801e434:	d05a      	beq.n	801e4ec <rmw_validate_full_topic_name+0xc4>
 801e436:	4604      	mov	r4, r0
 801e438:	4616      	mov	r6, r2
 801e43a:	f7e1 ff5b 	bl	80002f4 <strlen>
 801e43e:	b150      	cbz	r0, 801e456 <rmw_validate_full_topic_name+0x2e>
 801e440:	7823      	ldrb	r3, [r4, #0]
 801e442:	2b2f      	cmp	r3, #47	@ 0x2f
 801e444:	d00e      	beq.n	801e464 <rmw_validate_full_topic_name+0x3c>
 801e446:	2302      	movs	r3, #2
 801e448:	602b      	str	r3, [r5, #0]
 801e44a:	b146      	cbz	r6, 801e45e <rmw_validate_full_topic_name+0x36>
 801e44c:	2300      	movs	r3, #0
 801e44e:	4618      	mov	r0, r3
 801e450:	6033      	str	r3, [r6, #0]
 801e452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e456:	2301      	movs	r3, #1
 801e458:	602b      	str	r3, [r5, #0]
 801e45a:	2e00      	cmp	r6, #0
 801e45c:	d1f6      	bne.n	801e44c <rmw_validate_full_topic_name+0x24>
 801e45e:	2000      	movs	r0, #0
 801e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e464:	1e43      	subs	r3, r0, #1
 801e466:	5ce2      	ldrb	r2, [r4, r3]
 801e468:	2a2f      	cmp	r2, #47	@ 0x2f
 801e46a:	d041      	beq.n	801e4f0 <rmw_validate_full_topic_name+0xc8>
 801e46c:	1e62      	subs	r2, r4, #1
 801e46e:	f1c4 0e01 	rsb	lr, r4, #1
 801e472:	eb02 0800 	add.w	r8, r2, r0
 801e476:	eb0e 0702 	add.w	r7, lr, r2
 801e47a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e47e:	f023 0120 	bic.w	r1, r3, #32
 801e482:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801e486:	3941      	subs	r1, #65	@ 0x41
 801e488:	2919      	cmp	r1, #25
 801e48a:	d90f      	bls.n	801e4ac <rmw_validate_full_topic_name+0x84>
 801e48c:	f1bc 0f0a 	cmp.w	ip, #10
 801e490:	d90c      	bls.n	801e4ac <rmw_validate_full_topic_name+0x84>
 801e492:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801e496:	fab3 f383 	clz	r3, r3
 801e49a:	095b      	lsrs	r3, r3, #5
 801e49c:	b933      	cbnz	r3, 801e4ac <rmw_validate_full_topic_name+0x84>
 801e49e:	2204      	movs	r2, #4
 801e4a0:	602a      	str	r2, [r5, #0]
 801e4a2:	2e00      	cmp	r6, #0
 801e4a4:	d0db      	beq.n	801e45e <rmw_validate_full_topic_name+0x36>
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	6037      	str	r7, [r6, #0]
 801e4aa:	e7d2      	b.n	801e452 <rmw_validate_full_topic_name+0x2a>
 801e4ac:	4542      	cmp	r2, r8
 801e4ae:	d1e2      	bne.n	801e476 <rmw_validate_full_topic_name+0x4e>
 801e4b0:	2301      	movs	r3, #1
 801e4b2:	4f1a      	ldr	r7, [pc, #104]	@ (801e51c <rmw_validate_full_topic_name+0xf4>)
 801e4b4:	e004      	b.n	801e4c0 <rmw_validate_full_topic_name+0x98>
 801e4b6:	4298      	cmp	r0, r3
 801e4b8:	f104 0401 	add.w	r4, r4, #1
 801e4bc:	4613      	mov	r3, r2
 801e4be:	d91c      	bls.n	801e4fa <rmw_validate_full_topic_name+0xd2>
 801e4c0:	4298      	cmp	r0, r3
 801e4c2:	f103 0201 	add.w	r2, r3, #1
 801e4c6:	d0f6      	beq.n	801e4b6 <rmw_validate_full_topic_name+0x8e>
 801e4c8:	7821      	ldrb	r1, [r4, #0]
 801e4ca:	292f      	cmp	r1, #47	@ 0x2f
 801e4cc:	d1f3      	bne.n	801e4b6 <rmw_validate_full_topic_name+0x8e>
 801e4ce:	7861      	ldrb	r1, [r4, #1]
 801e4d0:	292f      	cmp	r1, #47	@ 0x2f
 801e4d2:	d01e      	beq.n	801e512 <rmw_validate_full_topic_name+0xea>
 801e4d4:	5dc9      	ldrb	r1, [r1, r7]
 801e4d6:	0749      	lsls	r1, r1, #29
 801e4d8:	d5ed      	bpl.n	801e4b6 <rmw_validate_full_topic_name+0x8e>
 801e4da:	2206      	movs	r2, #6
 801e4dc:	602a      	str	r2, [r5, #0]
 801e4de:	2e00      	cmp	r6, #0
 801e4e0:	d0bd      	beq.n	801e45e <rmw_validate_full_topic_name+0x36>
 801e4e2:	2000      	movs	r0, #0
 801e4e4:	6033      	str	r3, [r6, #0]
 801e4e6:	e7b4      	b.n	801e452 <rmw_validate_full_topic_name+0x2a>
 801e4e8:	200b      	movs	r0, #11
 801e4ea:	4770      	bx	lr
 801e4ec:	200b      	movs	r0, #11
 801e4ee:	e7b0      	b.n	801e452 <rmw_validate_full_topic_name+0x2a>
 801e4f0:	2203      	movs	r2, #3
 801e4f2:	602a      	str	r2, [r5, #0]
 801e4f4:	2e00      	cmp	r6, #0
 801e4f6:	d1f4      	bne.n	801e4e2 <rmw_validate_full_topic_name+0xba>
 801e4f8:	e7b1      	b.n	801e45e <rmw_validate_full_topic_name+0x36>
 801e4fa:	28f7      	cmp	r0, #247	@ 0xf7
 801e4fc:	d803      	bhi.n	801e506 <rmw_validate_full_topic_name+0xde>
 801e4fe:	2300      	movs	r3, #0
 801e500:	4618      	mov	r0, r3
 801e502:	602b      	str	r3, [r5, #0]
 801e504:	e7a5      	b.n	801e452 <rmw_validate_full_topic_name+0x2a>
 801e506:	2307      	movs	r3, #7
 801e508:	602b      	str	r3, [r5, #0]
 801e50a:	2e00      	cmp	r6, #0
 801e50c:	d0a7      	beq.n	801e45e <rmw_validate_full_topic_name+0x36>
 801e50e:	23f6      	movs	r3, #246	@ 0xf6
 801e510:	e7e7      	b.n	801e4e2 <rmw_validate_full_topic_name+0xba>
 801e512:	2205      	movs	r2, #5
 801e514:	602a      	str	r2, [r5, #0]
 801e516:	2e00      	cmp	r6, #0
 801e518:	d1e3      	bne.n	801e4e2 <rmw_validate_full_topic_name+0xba>
 801e51a:	e7a0      	b.n	801e45e <rmw_validate_full_topic_name+0x36>
 801e51c:	08025bca 	.word	0x08025bca

0801e520 <rmw_validate_namespace_with_size>:
 801e520:	2800      	cmp	r0, #0
 801e522:	d043      	beq.n	801e5ac <rmw_validate_namespace_with_size+0x8c>
 801e524:	b570      	push	{r4, r5, r6, lr}
 801e526:	4614      	mov	r4, r2
 801e528:	b0c2      	sub	sp, #264	@ 0x108
 801e52a:	b32a      	cbz	r2, 801e578 <rmw_validate_namespace_with_size+0x58>
 801e52c:	2901      	cmp	r1, #1
 801e52e:	460d      	mov	r5, r1
 801e530:	461e      	mov	r6, r3
 801e532:	d102      	bne.n	801e53a <rmw_validate_namespace_with_size+0x1a>
 801e534:	7803      	ldrb	r3, [r0, #0]
 801e536:	2b2f      	cmp	r3, #47	@ 0x2f
 801e538:	d012      	beq.n	801e560 <rmw_validate_namespace_with_size+0x40>
 801e53a:	aa01      	add	r2, sp, #4
 801e53c:	4669      	mov	r1, sp
 801e53e:	f7ff ff73 	bl	801e428 <rmw_validate_full_topic_name>
 801e542:	b980      	cbnz	r0, 801e566 <rmw_validate_namespace_with_size+0x46>
 801e544:	9a00      	ldr	r2, [sp, #0]
 801e546:	b14a      	cbz	r2, 801e55c <rmw_validate_namespace_with_size+0x3c>
 801e548:	2a07      	cmp	r2, #7
 801e54a:	d007      	beq.n	801e55c <rmw_validate_namespace_with_size+0x3c>
 801e54c:	1e53      	subs	r3, r2, #1
 801e54e:	2b05      	cmp	r3, #5
 801e550:	d82e      	bhi.n	801e5b0 <rmw_validate_namespace_with_size+0x90>
 801e552:	e8df f003 	tbb	[pc, r3]
 801e556:	1f1c      	.short	0x1f1c
 801e558:	14282522 	.word	0x14282522
 801e55c:	2df5      	cmp	r5, #245	@ 0xf5
 801e55e:	d804      	bhi.n	801e56a <rmw_validate_namespace_with_size+0x4a>
 801e560:	2300      	movs	r3, #0
 801e562:	4618      	mov	r0, r3
 801e564:	6023      	str	r3, [r4, #0]
 801e566:	b042      	add	sp, #264	@ 0x108
 801e568:	bd70      	pop	{r4, r5, r6, pc}
 801e56a:	2307      	movs	r3, #7
 801e56c:	6023      	str	r3, [r4, #0]
 801e56e:	2e00      	cmp	r6, #0
 801e570:	d0f9      	beq.n	801e566 <rmw_validate_namespace_with_size+0x46>
 801e572:	23f4      	movs	r3, #244	@ 0xf4
 801e574:	6033      	str	r3, [r6, #0]
 801e576:	e7f6      	b.n	801e566 <rmw_validate_namespace_with_size+0x46>
 801e578:	200b      	movs	r0, #11
 801e57a:	b042      	add	sp, #264	@ 0x108
 801e57c:	bd70      	pop	{r4, r5, r6, pc}
 801e57e:	2306      	movs	r3, #6
 801e580:	6023      	str	r3, [r4, #0]
 801e582:	2e00      	cmp	r6, #0
 801e584:	d0ef      	beq.n	801e566 <rmw_validate_namespace_with_size+0x46>
 801e586:	9b01      	ldr	r3, [sp, #4]
 801e588:	6033      	str	r3, [r6, #0]
 801e58a:	b042      	add	sp, #264	@ 0x108
 801e58c:	bd70      	pop	{r4, r5, r6, pc}
 801e58e:	2301      	movs	r3, #1
 801e590:	6023      	str	r3, [r4, #0]
 801e592:	e7f6      	b.n	801e582 <rmw_validate_namespace_with_size+0x62>
 801e594:	2302      	movs	r3, #2
 801e596:	6023      	str	r3, [r4, #0]
 801e598:	e7f3      	b.n	801e582 <rmw_validate_namespace_with_size+0x62>
 801e59a:	2303      	movs	r3, #3
 801e59c:	6023      	str	r3, [r4, #0]
 801e59e:	e7f0      	b.n	801e582 <rmw_validate_namespace_with_size+0x62>
 801e5a0:	2304      	movs	r3, #4
 801e5a2:	6023      	str	r3, [r4, #0]
 801e5a4:	e7ed      	b.n	801e582 <rmw_validate_namespace_with_size+0x62>
 801e5a6:	2305      	movs	r3, #5
 801e5a8:	6023      	str	r3, [r4, #0]
 801e5aa:	e7ea      	b.n	801e582 <rmw_validate_namespace_with_size+0x62>
 801e5ac:	200b      	movs	r0, #11
 801e5ae:	4770      	bx	lr
 801e5b0:	4613      	mov	r3, r2
 801e5b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e5b6:	4a03      	ldr	r2, [pc, #12]	@ (801e5c4 <rmw_validate_namespace_with_size+0xa4>)
 801e5b8:	a802      	add	r0, sp, #8
 801e5ba:	f7ff fca1 	bl	801df00 <rcutils_snprintf>
 801e5be:	2001      	movs	r0, #1
 801e5c0:	e7d1      	b.n	801e566 <rmw_validate_namespace_with_size+0x46>
 801e5c2:	bf00      	nop
 801e5c4:	08025648 	.word	0x08025648

0801e5c8 <rmw_validate_namespace>:
 801e5c8:	b168      	cbz	r0, 801e5e6 <rmw_validate_namespace+0x1e>
 801e5ca:	b570      	push	{r4, r5, r6, lr}
 801e5cc:	460d      	mov	r5, r1
 801e5ce:	4616      	mov	r6, r2
 801e5d0:	4604      	mov	r4, r0
 801e5d2:	f7e1 fe8f 	bl	80002f4 <strlen>
 801e5d6:	4633      	mov	r3, r6
 801e5d8:	4601      	mov	r1, r0
 801e5da:	462a      	mov	r2, r5
 801e5dc:	4620      	mov	r0, r4
 801e5de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5e2:	f7ff bf9d 	b.w	801e520 <rmw_validate_namespace_with_size>
 801e5e6:	200b      	movs	r0, #11
 801e5e8:	4770      	bx	lr
 801e5ea:	bf00      	nop

0801e5ec <rmw_namespace_validation_result_string>:
 801e5ec:	2807      	cmp	r0, #7
 801e5ee:	d803      	bhi.n	801e5f8 <rmw_namespace_validation_result_string+0xc>
 801e5f0:	4b02      	ldr	r3, [pc, #8]	@ (801e5fc <rmw_namespace_validation_result_string+0x10>)
 801e5f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e5f6:	4770      	bx	lr
 801e5f8:	4801      	ldr	r0, [pc, #4]	@ (801e600 <rmw_namespace_validation_result_string+0x14>)
 801e5fa:	4770      	bx	lr
 801e5fc:	08025840 	.word	0x08025840
 801e600:	08025698 	.word	0x08025698

0801e604 <rmw_validate_node_name>:
 801e604:	2800      	cmp	r0, #0
 801e606:	d042      	beq.n	801e68e <rmw_validate_node_name+0x8a>
 801e608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e60c:	460d      	mov	r5, r1
 801e60e:	2900      	cmp	r1, #0
 801e610:	d03f      	beq.n	801e692 <rmw_validate_node_name+0x8e>
 801e612:	4604      	mov	r4, r0
 801e614:	4616      	mov	r6, r2
 801e616:	f7e1 fe6d 	bl	80002f4 <strlen>
 801e61a:	b310      	cbz	r0, 801e662 <rmw_validate_node_name+0x5e>
 801e61c:	1e63      	subs	r3, r4, #1
 801e61e:	f1c4 0101 	rsb	r1, r4, #1
 801e622:	eb03 0800 	add.w	r8, r3, r0
 801e626:	18cf      	adds	r7, r1, r3
 801e628:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801e62c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801e630:	f02e 0c20 	bic.w	ip, lr, #32
 801e634:	2a09      	cmp	r2, #9
 801e636:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801e63a:	d905      	bls.n	801e648 <rmw_validate_node_name+0x44>
 801e63c:	f1bc 0f19 	cmp.w	ip, #25
 801e640:	d902      	bls.n	801e648 <rmw_validate_node_name+0x44>
 801e642:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801e646:	d114      	bne.n	801e672 <rmw_validate_node_name+0x6e>
 801e648:	4598      	cmp	r8, r3
 801e64a:	d1ec      	bne.n	801e626 <rmw_validate_node_name+0x22>
 801e64c:	7822      	ldrb	r2, [r4, #0]
 801e64e:	4b16      	ldr	r3, [pc, #88]	@ (801e6a8 <rmw_validate_node_name+0xa4>)
 801e650:	5cd3      	ldrb	r3, [r2, r3]
 801e652:	f013 0304 	ands.w	r3, r3, #4
 801e656:	d113      	bne.n	801e680 <rmw_validate_node_name+0x7c>
 801e658:	28ff      	cmp	r0, #255	@ 0xff
 801e65a:	d81c      	bhi.n	801e696 <rmw_validate_node_name+0x92>
 801e65c:	4618      	mov	r0, r3
 801e65e:	602b      	str	r3, [r5, #0]
 801e660:	e00c      	b.n	801e67c <rmw_validate_node_name+0x78>
 801e662:	2301      	movs	r3, #1
 801e664:	602b      	str	r3, [r5, #0]
 801e666:	b17e      	cbz	r6, 801e688 <rmw_validate_node_name+0x84>
 801e668:	2300      	movs	r3, #0
 801e66a:	4618      	mov	r0, r3
 801e66c:	6033      	str	r3, [r6, #0]
 801e66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e672:	2302      	movs	r3, #2
 801e674:	602b      	str	r3, [r5, #0]
 801e676:	b13e      	cbz	r6, 801e688 <rmw_validate_node_name+0x84>
 801e678:	2000      	movs	r0, #0
 801e67a:	6037      	str	r7, [r6, #0]
 801e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e680:	2303      	movs	r3, #3
 801e682:	602b      	str	r3, [r5, #0]
 801e684:	2e00      	cmp	r6, #0
 801e686:	d1ef      	bne.n	801e668 <rmw_validate_node_name+0x64>
 801e688:	2000      	movs	r0, #0
 801e68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e68e:	200b      	movs	r0, #11
 801e690:	4770      	bx	lr
 801e692:	200b      	movs	r0, #11
 801e694:	e7f2      	b.n	801e67c <rmw_validate_node_name+0x78>
 801e696:	2204      	movs	r2, #4
 801e698:	602a      	str	r2, [r5, #0]
 801e69a:	2e00      	cmp	r6, #0
 801e69c:	d0f4      	beq.n	801e688 <rmw_validate_node_name+0x84>
 801e69e:	22fe      	movs	r2, #254	@ 0xfe
 801e6a0:	4618      	mov	r0, r3
 801e6a2:	6032      	str	r2, [r6, #0]
 801e6a4:	e7ea      	b.n	801e67c <rmw_validate_node_name+0x78>
 801e6a6:	bf00      	nop
 801e6a8:	08025bca 	.word	0x08025bca

0801e6ac <rmw_node_name_validation_result_string>:
 801e6ac:	2804      	cmp	r0, #4
 801e6ae:	d803      	bhi.n	801e6b8 <rmw_node_name_validation_result_string+0xc>
 801e6b0:	4b02      	ldr	r3, [pc, #8]	@ (801e6bc <rmw_node_name_validation_result_string+0x10>)
 801e6b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e6b6:	4770      	bx	lr
 801e6b8:	4801      	ldr	r0, [pc, #4]	@ (801e6c0 <rmw_node_name_validation_result_string+0x14>)
 801e6ba:	4770      	bx	lr
 801e6bc:	0802594c 	.word	0x0802594c
 801e6c0:	08025860 	.word	0x08025860

0801e6c4 <get_memory>:
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	6840      	ldr	r0, [r0, #4]
 801e6c8:	b158      	cbz	r0, 801e6e2 <get_memory+0x1e>
 801e6ca:	6842      	ldr	r2, [r0, #4]
 801e6cc:	605a      	str	r2, [r3, #4]
 801e6ce:	b10a      	cbz	r2, 801e6d4 <get_memory+0x10>
 801e6d0:	2100      	movs	r1, #0
 801e6d2:	6011      	str	r1, [r2, #0]
 801e6d4:	681a      	ldr	r2, [r3, #0]
 801e6d6:	6042      	str	r2, [r0, #4]
 801e6d8:	b102      	cbz	r2, 801e6dc <get_memory+0x18>
 801e6da:	6010      	str	r0, [r2, #0]
 801e6dc:	2200      	movs	r2, #0
 801e6de:	6002      	str	r2, [r0, #0]
 801e6e0:	6018      	str	r0, [r3, #0]
 801e6e2:	4770      	bx	lr

0801e6e4 <put_memory>:
 801e6e4:	680b      	ldr	r3, [r1, #0]
 801e6e6:	b10b      	cbz	r3, 801e6ec <put_memory+0x8>
 801e6e8:	684a      	ldr	r2, [r1, #4]
 801e6ea:	605a      	str	r2, [r3, #4]
 801e6ec:	684a      	ldr	r2, [r1, #4]
 801e6ee:	b102      	cbz	r2, 801e6f2 <put_memory+0xe>
 801e6f0:	6013      	str	r3, [r2, #0]
 801e6f2:	6803      	ldr	r3, [r0, #0]
 801e6f4:	428b      	cmp	r3, r1
 801e6f6:	6843      	ldr	r3, [r0, #4]
 801e6f8:	bf08      	it	eq
 801e6fa:	6002      	streq	r2, [r0, #0]
 801e6fc:	604b      	str	r3, [r1, #4]
 801e6fe:	b103      	cbz	r3, 801e702 <put_memory+0x1e>
 801e700:	6019      	str	r1, [r3, #0]
 801e702:	2300      	movs	r3, #0
 801e704:	600b      	str	r3, [r1, #0]
 801e706:	6041      	str	r1, [r0, #4]
 801e708:	4770      	bx	lr
 801e70a:	bf00      	nop

0801e70c <rmw_destroy_client>:
 801e70c:	b570      	push	{r4, r5, r6, lr}
 801e70e:	b128      	cbz	r0, 801e71c <rmw_destroy_client+0x10>
 801e710:	4604      	mov	r4, r0
 801e712:	6800      	ldr	r0, [r0, #0]
 801e714:	460d      	mov	r5, r1
 801e716:	f7f7 fdb7 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801e71a:	b910      	cbnz	r0, 801e722 <rmw_destroy_client+0x16>
 801e71c:	2401      	movs	r4, #1
 801e71e:	4620      	mov	r0, r4
 801e720:	bd70      	pop	{r4, r5, r6, pc}
 801e722:	6863      	ldr	r3, [r4, #4]
 801e724:	2b00      	cmp	r3, #0
 801e726:	d0f9      	beq.n	801e71c <rmw_destroy_client+0x10>
 801e728:	2d00      	cmp	r5, #0
 801e72a:	d0f7      	beq.n	801e71c <rmw_destroy_client+0x10>
 801e72c:	6828      	ldr	r0, [r5, #0]
 801e72e:	f7f7 fdab 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801e732:	2800      	cmp	r0, #0
 801e734:	d0f2      	beq.n	801e71c <rmw_destroy_client+0x10>
 801e736:	686e      	ldr	r6, [r5, #4]
 801e738:	2e00      	cmp	r6, #0
 801e73a:	d0ef      	beq.n	801e71c <rmw_destroy_client+0x10>
 801e73c:	6864      	ldr	r4, [r4, #4]
 801e73e:	6932      	ldr	r2, [r6, #16]
 801e740:	6920      	ldr	r0, [r4, #16]
 801e742:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e746:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e74a:	6819      	ldr	r1, [r3, #0]
 801e74c:	f002 faca 	bl	8020ce4 <uxr_buffer_cancel_data>
 801e750:	4602      	mov	r2, r0
 801e752:	6920      	ldr	r0, [r4, #16]
 801e754:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e758:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e75c:	f7f7 fc82 	bl	8016064 <run_xrce_session>
 801e760:	6920      	ldr	r0, [r4, #16]
 801e762:	6932      	ldr	r2, [r6, #16]
 801e764:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e768:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e76c:	6819      	ldr	r1, [r3, #0]
 801e76e:	f7f8 fb5f 	bl	8016e30 <uxr_buffer_delete_entity>
 801e772:	4602      	mov	r2, r0
 801e774:	6920      	ldr	r0, [r4, #16]
 801e776:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e77a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e77e:	f7f7 fc71 	bl	8016064 <run_xrce_session>
 801e782:	4603      	mov	r3, r0
 801e784:	4628      	mov	r0, r5
 801e786:	2b00      	cmp	r3, #0
 801e788:	bf14      	ite	ne
 801e78a:	2400      	movne	r4, #0
 801e78c:	2402      	moveq	r4, #2
 801e78e:	f7f7 fb45 	bl	8015e1c <rmw_uxrce_fini_client_memory>
 801e792:	e7c4      	b.n	801e71e <rmw_destroy_client+0x12>

0801e794 <rmw_get_implementation_identifier>:
 801e794:	4b01      	ldr	r3, [pc, #4]	@ (801e79c <rmw_get_implementation_identifier+0x8>)
 801e796:	6818      	ldr	r0, [r3, #0]
 801e798:	4770      	bx	lr
 801e79a:	bf00      	nop
 801e79c:	08025978 	.word	0x08025978

0801e7a0 <rmw_init_options_init>:
 801e7a0:	b084      	sub	sp, #16
 801e7a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7a4:	b083      	sub	sp, #12
 801e7a6:	ad09      	add	r5, sp, #36	@ 0x24
 801e7a8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801e7ac:	b130      	cbz	r0, 801e7bc <rmw_init_options_init+0x1c>
 801e7ae:	4604      	mov	r4, r0
 801e7b0:	4628      	mov	r0, r5
 801e7b2:	f7f6 fea1 	bl	80154f8 <rcutils_allocator_is_valid>
 801e7b6:	b108      	cbz	r0, 801e7bc <rmw_init_options_init+0x1c>
 801e7b8:	68a6      	ldr	r6, [r4, #8]
 801e7ba:	b12e      	cbz	r6, 801e7c8 <rmw_init_options_init+0x28>
 801e7bc:	200b      	movs	r0, #11
 801e7be:	b003      	add	sp, #12
 801e7c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e7c4:	b004      	add	sp, #16
 801e7c6:	4770      	bx	lr
 801e7c8:	2200      	movs	r2, #0
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	f104 0c20 	add.w	ip, r4, #32
 801e7d0:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801e86c <rmw_init_options_init+0xcc>
 801e7d4:	466f      	mov	r7, sp
 801e7d6:	e9c4 2300 	strd	r2, r3, [r4]
 801e7da:	4b20      	ldr	r3, [pc, #128]	@ (801e85c <rmw_init_options_init+0xbc>)
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	60a3      	str	r3, [r4, #8]
 801e7e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e7e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e7e6:	682b      	ldr	r3, [r5, #0]
 801e7e8:	4638      	mov	r0, r7
 801e7ea:	f8cc 3000 	str.w	r3, [ip]
 801e7ee:	f8c4 e01c 	str.w	lr, [r4, #28]
 801e7f2:	60e6      	str	r6, [r4, #12]
 801e7f4:	f7ff fd64 	bl	801e2c0 <rmw_get_default_security_options>
 801e7f8:	f104 0310 	add.w	r3, r4, #16
 801e7fc:	2203      	movs	r2, #3
 801e7fe:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e802:	e883 0003 	stmia.w	r3, {r0, r1}
 801e806:	4816      	ldr	r0, [pc, #88]	@ (801e860 <rmw_init_options_init+0xc0>)
 801e808:	4916      	ldr	r1, [pc, #88]	@ (801e864 <rmw_init_options_init+0xc4>)
 801e80a:	7626      	strb	r6, [r4, #24]
 801e80c:	f7f7 fa46 	bl	8015c9c <rmw_uxrce_init_init_options_impl_memory>
 801e810:	4813      	ldr	r0, [pc, #76]	@ (801e860 <rmw_init_options_init+0xc0>)
 801e812:	f7ff ff57 	bl	801e6c4 <get_memory>
 801e816:	b1f0      	cbz	r0, 801e856 <rmw_init_options_init+0xb6>
 801e818:	4a13      	ldr	r2, [pc, #76]	@ (801e868 <rmw_init_options_init+0xc8>)
 801e81a:	6883      	ldr	r3, [r0, #8]
 801e81c:	6851      	ldr	r1, [r2, #4]
 801e81e:	6363      	str	r3, [r4, #52]	@ 0x34
 801e820:	7810      	ldrb	r0, [r2, #0]
 801e822:	6159      	str	r1, [r3, #20]
 801e824:	68d1      	ldr	r1, [r2, #12]
 801e826:	7418      	strb	r0, [r3, #16]
 801e828:	61d9      	str	r1, [r3, #28]
 801e82a:	6911      	ldr	r1, [r2, #16]
 801e82c:	6219      	str	r1, [r3, #32]
 801e82e:	6951      	ldr	r1, [r2, #20]
 801e830:	6892      	ldr	r2, [r2, #8]
 801e832:	6259      	str	r1, [r3, #36]	@ 0x24
 801e834:	619a      	str	r2, [r3, #24]
 801e836:	f7fa fe5d 	bl	80194f4 <uxr_nanos>
 801e83a:	f003 f9bd 	bl	8021bb8 <srand>
 801e83e:	f003 f9e9 	bl	8021c14 <rand>
 801e842:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e844:	6298      	str	r0, [r3, #40]	@ 0x28
 801e846:	2800      	cmp	r0, #0
 801e848:	d0f9      	beq.n	801e83e <rmw_init_options_init+0x9e>
 801e84a:	2000      	movs	r0, #0
 801e84c:	b003      	add	sp, #12
 801e84e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e852:	b004      	add	sp, #16
 801e854:	4770      	bx	lr
 801e856:	2001      	movs	r0, #1
 801e858:	e7b1      	b.n	801e7be <rmw_init_options_init+0x1e>
 801e85a:	bf00      	nop
 801e85c:	08025978 	.word	0x08025978
 801e860:	240691e4 	.word	0x240691e4
 801e864:	24064a80 	.word	0x24064a80
 801e868:	2406490c 	.word	0x2406490c
 801e86c:	08025384 	.word	0x08025384

0801e870 <rmw_init_options_copy>:
 801e870:	2800      	cmp	r0, #0
 801e872:	d047      	beq.n	801e904 <rmw_init_options_copy+0x94>
 801e874:	b570      	push	{r4, r5, r6, lr}
 801e876:	460d      	mov	r5, r1
 801e878:	b149      	cbz	r1, 801e88e <rmw_init_options_copy+0x1e>
 801e87a:	4604      	mov	r4, r0
 801e87c:	6880      	ldr	r0, [r0, #8]
 801e87e:	b120      	cbz	r0, 801e88a <rmw_init_options_copy+0x1a>
 801e880:	4b22      	ldr	r3, [pc, #136]	@ (801e90c <rmw_init_options_copy+0x9c>)
 801e882:	6819      	ldr	r1, [r3, #0]
 801e884:	f7e1 fd2c 	bl	80002e0 <strcmp>
 801e888:	bba8      	cbnz	r0, 801e8f6 <rmw_init_options_copy+0x86>
 801e88a:	68ab      	ldr	r3, [r5, #8]
 801e88c:	b11b      	cbz	r3, 801e896 <rmw_init_options_copy+0x26>
 801e88e:	f04f 0c0b 	mov.w	ip, #11
 801e892:	4660      	mov	r0, ip
 801e894:	bd70      	pop	{r4, r5, r6, pc}
 801e896:	4623      	mov	r3, r4
 801e898:	462a      	mov	r2, r5
 801e89a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801e89e:	f8d3 e000 	ldr.w	lr, [r3]
 801e8a2:	3310      	adds	r3, #16
 801e8a4:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801e8a8:	3210      	adds	r2, #16
 801e8aa:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801e8ae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e8b2:	42b3      	cmp	r3, r6
 801e8b4:	f842 ec10 	str.w	lr, [r2, #-16]
 801e8b8:	f842 cc0c 	str.w	ip, [r2, #-12]
 801e8bc:	f842 0c08 	str.w	r0, [r2, #-8]
 801e8c0:	f842 1c04 	str.w	r1, [r2, #-4]
 801e8c4:	d1eb      	bne.n	801e89e <rmw_init_options_copy+0x2e>
 801e8c6:	6819      	ldr	r1, [r3, #0]
 801e8c8:	685b      	ldr	r3, [r3, #4]
 801e8ca:	4811      	ldr	r0, [pc, #68]	@ (801e910 <rmw_init_options_copy+0xa0>)
 801e8cc:	6011      	str	r1, [r2, #0]
 801e8ce:	6053      	str	r3, [r2, #4]
 801e8d0:	f7ff fef8 	bl	801e6c4 <get_memory>
 801e8d4:	b198      	cbz	r0, 801e8fe <rmw_init_options_copy+0x8e>
 801e8d6:	6883      	ldr	r3, [r0, #8]
 801e8d8:	f04f 0c00 	mov.w	ip, #0
 801e8dc:	636b      	str	r3, [r5, #52]	@ 0x34
 801e8de:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801e8e0:	f103 0410 	add.w	r4, r3, #16
 801e8e4:	3510      	adds	r5, #16
 801e8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e8e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e8ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e8ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e8f2:	4660      	mov	r0, ip
 801e8f4:	bd70      	pop	{r4, r5, r6, pc}
 801e8f6:	f04f 0c0c 	mov.w	ip, #12
 801e8fa:	4660      	mov	r0, ip
 801e8fc:	bd70      	pop	{r4, r5, r6, pc}
 801e8fe:	f04f 0c01 	mov.w	ip, #1
 801e902:	e7c6      	b.n	801e892 <rmw_init_options_copy+0x22>
 801e904:	f04f 0c0b 	mov.w	ip, #11
 801e908:	4660      	mov	r0, ip
 801e90a:	4770      	bx	lr
 801e90c:	08025978 	.word	0x08025978
 801e910:	240691e4 	.word	0x240691e4

0801e914 <rmw_init_options_fini>:
 801e914:	b510      	push	{r4, lr}
 801e916:	b08e      	sub	sp, #56	@ 0x38
 801e918:	b388      	cbz	r0, 801e97e <rmw_init_options_fini+0x6a>
 801e91a:	4604      	mov	r4, r0
 801e91c:	3020      	adds	r0, #32
 801e91e:	f7f6 fdeb 	bl	80154f8 <rcutils_allocator_is_valid>
 801e922:	b360      	cbz	r0, 801e97e <rmw_init_options_fini+0x6a>
 801e924:	68a0      	ldr	r0, [r4, #8]
 801e926:	b120      	cbz	r0, 801e932 <rmw_init_options_fini+0x1e>
 801e928:	4b1a      	ldr	r3, [pc, #104]	@ (801e994 <rmw_init_options_fini+0x80>)
 801e92a:	6819      	ldr	r1, [r3, #0]
 801e92c:	f7e1 fcd8 	bl	80002e0 <strcmp>
 801e930:	bb68      	cbnz	r0, 801e98e <rmw_init_options_fini+0x7a>
 801e932:	4b19      	ldr	r3, [pc, #100]	@ (801e998 <rmw_init_options_fini+0x84>)
 801e934:	6819      	ldr	r1, [r3, #0]
 801e936:	b331      	cbz	r1, 801e986 <rmw_init_options_fini+0x72>
 801e938:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801e93a:	e001      	b.n	801e940 <rmw_init_options_fini+0x2c>
 801e93c:	6849      	ldr	r1, [r1, #4]
 801e93e:	b311      	cbz	r1, 801e986 <rmw_init_options_fini+0x72>
 801e940:	688b      	ldr	r3, [r1, #8]
 801e942:	429a      	cmp	r2, r3
 801e944:	d1fa      	bne.n	801e93c <rmw_init_options_fini+0x28>
 801e946:	4814      	ldr	r0, [pc, #80]	@ (801e998 <rmw_init_options_fini+0x84>)
 801e948:	f7ff fecc 	bl	801e6e4 <put_memory>
 801e94c:	4668      	mov	r0, sp
 801e94e:	f7ff fca7 	bl	801e2a0 <rmw_get_zero_initialized_init_options>
 801e952:	46ee      	mov	lr, sp
 801e954:	46a4      	mov	ip, r4
 801e956:	2400      	movs	r4, #0
 801e958:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e95c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e960:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e968:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e96c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e970:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e974:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e978:	4620      	mov	r0, r4
 801e97a:	b00e      	add	sp, #56	@ 0x38
 801e97c:	bd10      	pop	{r4, pc}
 801e97e:	240b      	movs	r4, #11
 801e980:	4620      	mov	r0, r4
 801e982:	b00e      	add	sp, #56	@ 0x38
 801e984:	bd10      	pop	{r4, pc}
 801e986:	2401      	movs	r4, #1
 801e988:	4620      	mov	r0, r4
 801e98a:	b00e      	add	sp, #56	@ 0x38
 801e98c:	bd10      	pop	{r4, pc}
 801e98e:	240c      	movs	r4, #12
 801e990:	e7f2      	b.n	801e978 <rmw_init_options_fini+0x64>
 801e992:	bf00      	nop
 801e994:	08025978 	.word	0x08025978
 801e998:	240691e4 	.word	0x240691e4

0801e99c <rmw_init>:
 801e99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e9a0:	b083      	sub	sp, #12
 801e9a2:	2800      	cmp	r0, #0
 801e9a4:	f000 80d3 	beq.w	801eb4e <rmw_init+0x1b2>
 801e9a8:	460e      	mov	r6, r1
 801e9aa:	2900      	cmp	r1, #0
 801e9ac:	f000 80cf 	beq.w	801eb4e <rmw_init+0x1b2>
 801e9b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e9b2:	4605      	mov	r5, r0
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	f000 80ca 	beq.w	801eb4e <rmw_init+0x1b2>
 801e9ba:	4b78      	ldr	r3, [pc, #480]	@ (801eb9c <rmw_init+0x200>)
 801e9bc:	6880      	ldr	r0, [r0, #8]
 801e9be:	681f      	ldr	r7, [r3, #0]
 801e9c0:	b128      	cbz	r0, 801e9ce <rmw_init+0x32>
 801e9c2:	4639      	mov	r1, r7
 801e9c4:	f7e1 fc8c 	bl	80002e0 <strcmp>
 801e9c8:	2800      	cmp	r0, #0
 801e9ca:	f040 80ca 	bne.w	801eb62 <rmw_init+0x1c6>
 801e9ce:	4c74      	ldr	r4, [pc, #464]	@ (801eba0 <rmw_init+0x204>)
 801e9d0:	f04f 0800 	mov.w	r8, #0
 801e9d4:	4973      	ldr	r1, [pc, #460]	@ (801eba4 <rmw_init+0x208>)
 801e9d6:	4874      	ldr	r0, [pc, #464]	@ (801eba8 <rmw_init+0x20c>)
 801e9d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e9dc:	60b7      	str	r7, [r6, #8]
 801e9de:	e9c6 2300 	strd	r2, r3, [r6]
 801e9e2:	68eb      	ldr	r3, [r5, #12]
 801e9e4:	2201      	movs	r2, #1
 801e9e6:	64b3      	str	r3, [r6, #72]	@ 0x48
 801e9e8:	f7f7 f8f8 	bl	8015bdc <rmw_uxrce_init_session_memory>
 801e9ec:	4620      	mov	r0, r4
 801e9ee:	2204      	movs	r2, #4
 801e9f0:	496e      	ldr	r1, [pc, #440]	@ (801ebac <rmw_init+0x210>)
 801e9f2:	f7f7 f933 	bl	8015c5c <rmw_uxrce_init_static_input_buffer_memory>
 801e9f6:	486c      	ldr	r0, [pc, #432]	@ (801eba8 <rmw_init+0x20c>)
 801e9f8:	f884 800d 	strb.w	r8, [r4, #13]
 801e9fc:	f7ff fe62 	bl	801e6c4 <get_memory>
 801ea00:	2800      	cmp	r0, #0
 801ea02:	f000 80a9 	beq.w	801eb58 <rmw_init+0x1bc>
 801ea06:	6884      	ldr	r4, [r0, #8]
 801ea08:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801ea0a:	f104 0910 	add.w	r9, r4, #16
 801ea0e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801ea10:	f890 c010 	ldrb.w	ip, [r0, #16]
 801ea14:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801ea18:	9101      	str	r1, [sp, #4]
 801ea1a:	4661      	mov	r1, ip
 801ea1c:	6a00      	ldr	r0, [r0, #32]
 801ea1e:	9000      	str	r0, [sp, #0]
 801ea20:	4648      	mov	r0, r9
 801ea22:	f7f8 fcbd 	bl	80173a0 <uxr_set_custom_transport_callbacks>
 801ea26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ea2a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801ea2e:	4960      	ldr	r1, [pc, #384]	@ (801ebb0 <rmw_init+0x214>)
 801ea30:	4860      	ldr	r0, [pc, #384]	@ (801ebb4 <rmw_init+0x218>)
 801ea32:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801ea36:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801ea3a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801ea3e:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801ea42:	2201      	movs	r2, #1
 801ea44:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801ea48:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801ea4c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801ea50:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801ea54:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801ea56:	f7f7 f8a1 	bl	8015b9c <rmw_uxrce_init_node_memory>
 801ea5a:	2205      	movs	r2, #5
 801ea5c:	4956      	ldr	r1, [pc, #344]	@ (801ebb8 <rmw_init+0x21c>)
 801ea5e:	4857      	ldr	r0, [pc, #348]	@ (801ebbc <rmw_init+0x220>)
 801ea60:	f7f7 f87c 	bl	8015b5c <rmw_uxrce_init_subscription_memory>
 801ea64:	220a      	movs	r2, #10
 801ea66:	4956      	ldr	r1, [pc, #344]	@ (801ebc0 <rmw_init+0x224>)
 801ea68:	4856      	ldr	r0, [pc, #344]	@ (801ebc4 <rmw_init+0x228>)
 801ea6a:	f7f7 f857 	bl	8015b1c <rmw_uxrce_init_publisher_memory>
 801ea6e:	2201      	movs	r2, #1
 801ea70:	4955      	ldr	r1, [pc, #340]	@ (801ebc8 <rmw_init+0x22c>)
 801ea72:	4856      	ldr	r0, [pc, #344]	@ (801ebcc <rmw_init+0x230>)
 801ea74:	f7f7 f812 	bl	8015a9c <rmw_uxrce_init_service_memory>
 801ea78:	2201      	movs	r2, #1
 801ea7a:	4955      	ldr	r1, [pc, #340]	@ (801ebd0 <rmw_init+0x234>)
 801ea7c:	4855      	ldr	r0, [pc, #340]	@ (801ebd4 <rmw_init+0x238>)
 801ea7e:	f7f7 f82d 	bl	8015adc <rmw_uxrce_init_client_memory>
 801ea82:	220f      	movs	r2, #15
 801ea84:	4954      	ldr	r1, [pc, #336]	@ (801ebd8 <rmw_init+0x23c>)
 801ea86:	4855      	ldr	r0, [pc, #340]	@ (801ebdc <rmw_init+0x240>)
 801ea88:	f7f7 f8c8 	bl	8015c1c <rmw_uxrce_init_topic_memory>
 801ea8c:	2203      	movs	r2, #3
 801ea8e:	4954      	ldr	r1, [pc, #336]	@ (801ebe0 <rmw_init+0x244>)
 801ea90:	4854      	ldr	r0, [pc, #336]	@ (801ebe4 <rmw_init+0x248>)
 801ea92:	f7f7 f903 	bl	8015c9c <rmw_uxrce_init_init_options_impl_memory>
 801ea96:	2204      	movs	r2, #4
 801ea98:	4953      	ldr	r1, [pc, #332]	@ (801ebe8 <rmw_init+0x24c>)
 801ea9a:	4854      	ldr	r0, [pc, #336]	@ (801ebec <rmw_init+0x250>)
 801ea9c:	f7f7 f91e 	bl	8015cdc <rmw_uxrce_init_wait_set_memory>
 801eaa0:	4953      	ldr	r1, [pc, #332]	@ (801ebf0 <rmw_init+0x254>)
 801eaa2:	4854      	ldr	r0, [pc, #336]	@ (801ebf4 <rmw_init+0x258>)
 801eaa4:	2204      	movs	r2, #4
 801eaa6:	f7f7 f939 	bl	8015d1c <rmw_uxrce_init_guard_condition_memory>
 801eaaa:	4642      	mov	r2, r8
 801eaac:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801eaae:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801eab0:	f7f6 ffbc 	bl	8015a2c <rmw_uxrce_transport_init>
 801eab4:	4607      	mov	r7, r0
 801eab6:	2800      	cmp	r0, #0
 801eab8:	d158      	bne.n	801eb6c <rmw_init+0x1d0>
 801eaba:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801eabc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801eac0:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801eac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801eac6:	4628      	mov	r0, r5
 801eac8:	f7f8 fe6e 	bl	80177a8 <uxr_init_session>
 801eacc:	4622      	mov	r2, r4
 801eace:	494a      	ldr	r1, [pc, #296]	@ (801ebf8 <rmw_init+0x25c>)
 801ead0:	4628      	mov	r0, r5
 801ead2:	f7f8 fe8d 	bl	80177f0 <uxr_set_topic_callback>
 801ead6:	463a      	mov	r2, r7
 801ead8:	4948      	ldr	r1, [pc, #288]	@ (801ebfc <rmw_init+0x260>)
 801eada:	4628      	mov	r0, r5
 801eadc:	f7f8 fe84 	bl	80177e8 <uxr_set_status_callback>
 801eae0:	463a      	mov	r2, r7
 801eae2:	4947      	ldr	r1, [pc, #284]	@ (801ec00 <rmw_init+0x264>)
 801eae4:	4628      	mov	r0, r5
 801eae6:	f7f8 fe87 	bl	80177f8 <uxr_set_request_callback>
 801eaea:	463a      	mov	r2, r7
 801eaec:	4945      	ldr	r1, [pc, #276]	@ (801ec04 <rmw_init+0x268>)
 801eaee:	4628      	mov	r0, r5
 801eaf0:	f7f8 fe86 	bl	8017800 <uxr_set_reply_callback>
 801eaf4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eaf8:	2304      	movs	r3, #4
 801eafa:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801eafe:	0092      	lsls	r2, r2, #2
 801eb00:	4628      	mov	r0, r5
 801eb02:	f7f8 febd 	bl	8017880 <uxr_create_input_reliable_stream>
 801eb06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eb0a:	2304      	movs	r3, #4
 801eb0c:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801eb10:	0092      	lsls	r2, r2, #2
 801eb12:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801eb16:	4628      	mov	r0, r5
 801eb18:	f7f8 fe88 	bl	801782c <uxr_create_output_reliable_stream>
 801eb1c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801eb20:	4628      	mov	r0, r5
 801eb22:	f7f8 fea7 	bl	8017874 <uxr_create_input_best_effort_stream>
 801eb26:	f241 3194 	movw	r1, #5012	@ 0x1394
 801eb2a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801eb2e:	4628      	mov	r0, r5
 801eb30:	4421      	add	r1, r4
 801eb32:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eb36:	f7f8 fe67 	bl	8017808 <uxr_create_output_best_effort_stream>
 801eb3a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801eb3e:	4628      	mov	r0, r5
 801eb40:	f7f9 fc70 	bl	8018424 <uxr_create_session>
 801eb44:	b1f8      	cbz	r0, 801eb86 <rmw_init+0x1ea>
 801eb46:	4638      	mov	r0, r7
 801eb48:	b003      	add	sp, #12
 801eb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb4e:	270b      	movs	r7, #11
 801eb50:	4638      	mov	r0, r7
 801eb52:	b003      	add	sp, #12
 801eb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb58:	2701      	movs	r7, #1
 801eb5a:	4638      	mov	r0, r7
 801eb5c:	b003      	add	sp, #12
 801eb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb62:	270c      	movs	r7, #12
 801eb64:	4638      	mov	r0, r7
 801eb66:	b003      	add	sp, #12
 801eb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb6c:	4648      	mov	r0, r9
 801eb6e:	f7f8 fc55 	bl	801741c <uxr_close_custom_transport>
 801eb72:	4621      	mov	r1, r4
 801eb74:	480c      	ldr	r0, [pc, #48]	@ (801eba8 <rmw_init+0x20c>)
 801eb76:	f7ff fdb5 	bl	801e6e4 <put_memory>
 801eb7a:	4638      	mov	r0, r7
 801eb7c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801eb80:	b003      	add	sp, #12
 801eb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb86:	4648      	mov	r0, r9
 801eb88:	f7f8 fc48 	bl	801741c <uxr_close_custom_transport>
 801eb8c:	4621      	mov	r1, r4
 801eb8e:	4806      	ldr	r0, [pc, #24]	@ (801eba8 <rmw_init+0x20c>)
 801eb90:	f7ff fda8 	bl	801e6e4 <put_memory>
 801eb94:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801eb96:	2701      	movs	r7, #1
 801eb98:	e7d5      	b.n	801eb46 <rmw_init+0x1aa>
 801eb9a:	bf00      	nop
 801eb9c:	08025978 	.word	0x08025978
 801eba0:	24069234 	.word	0x24069234
 801eba4:	240654e0 	.word	0x240654e0
 801eba8:	24069224 	.word	0x24069224
 801ebac:	24066a88 	.word	0x24066a88
 801ebb0:	24064b04 	.word	0x24064b04
 801ebb4:	240691f4 	.word	0x240691f4
 801ebb8:	24068b88 	.word	0x24068b88
 801ebbc:	24069244 	.word	0x24069244
 801ebc0:	24064ba8 	.word	0x24064ba8
 801ebc4:	24069204 	.word	0x24069204
 801ebc8:	24065418 	.word	0x24065418
 801ebcc:	24069214 	.word	0x24069214
 801ebd0:	24064938 	.word	0x24064938
 801ebd4:	24064928 	.word	0x24064928
 801ebd8:	24068fc0 	.word	0x24068fc0
 801ebdc:	24069254 	.word	0x24069254
 801ebe0:	24064a80 	.word	0x24064a80
 801ebe4:	240691e4 	.word	0x240691e4
 801ebe8:	24069164 	.word	0x24069164
 801ebec:	24069264 	.word	0x24069264
 801ebf0:	24064a00 	.word	0x24064a00
 801ebf4:	240691d4 	.word	0x240691d4
 801ebf8:	08021641 	.word	0x08021641
 801ebfc:	08021639 	.word	0x08021639
 801ec00:	080216d9 	.word	0x080216d9
 801ec04:	08021775 	.word	0x08021775

0801ec08 <rmw_context_fini>:
 801ec08:	4b17      	ldr	r3, [pc, #92]	@ (801ec68 <rmw_context_fini+0x60>)
 801ec0a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801ec0c:	b570      	push	{r4, r5, r6, lr}
 801ec0e:	681c      	ldr	r4, [r3, #0]
 801ec10:	4605      	mov	r5, r0
 801ec12:	b334      	cbz	r4, 801ec62 <rmw_context_fini+0x5a>
 801ec14:	2600      	movs	r6, #0
 801ec16:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801ec1a:	6902      	ldr	r2, [r0, #16]
 801ec1c:	428a      	cmp	r2, r1
 801ec1e:	d018      	beq.n	801ec52 <rmw_context_fini+0x4a>
 801ec20:	2c00      	cmp	r4, #0
 801ec22:	d1f8      	bne.n	801ec16 <rmw_context_fini+0xe>
 801ec24:	b189      	cbz	r1, 801ec4a <rmw_context_fini+0x42>
 801ec26:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801ec2a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801ec2e:	789b      	ldrb	r3, [r3, #2]
 801ec30:	2b01      	cmp	r3, #1
 801ec32:	bf14      	ite	ne
 801ec34:	210a      	movne	r1, #10
 801ec36:	2100      	moveq	r1, #0
 801ec38:	f7f9 fbcc 	bl	80183d4 <uxr_delete_session_retries>
 801ec3c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ec3e:	f7f7 f88d 	bl	8015d5c <rmw_uxrce_fini_session_memory>
 801ec42:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ec44:	3010      	adds	r0, #16
 801ec46:	f7f8 fbe9 	bl	801741c <uxr_close_custom_transport>
 801ec4a:	2300      	movs	r3, #0
 801ec4c:	4630      	mov	r0, r6
 801ec4e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801ec50:	bd70      	pop	{r4, r5, r6, pc}
 801ec52:	3018      	adds	r0, #24
 801ec54:	f000 f90e 	bl	801ee74 <rmw_destroy_node>
 801ec58:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ec5a:	4606      	mov	r6, r0
 801ec5c:	2c00      	cmp	r4, #0
 801ec5e:	d1da      	bne.n	801ec16 <rmw_context_fini+0xe>
 801ec60:	e7e0      	b.n	801ec24 <rmw_context_fini+0x1c>
 801ec62:	4626      	mov	r6, r4
 801ec64:	e7de      	b.n	801ec24 <rmw_context_fini+0x1c>
 801ec66:	bf00      	nop
 801ec68:	240691f4 	.word	0x240691f4

0801ec6c <create_topic>:
 801ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec70:	4605      	mov	r5, r0
 801ec72:	b084      	sub	sp, #16
 801ec74:	4822      	ldr	r0, [pc, #136]	@ (801ed00 <create_topic+0x94>)
 801ec76:	460f      	mov	r7, r1
 801ec78:	4616      	mov	r6, r2
 801ec7a:	f7ff fd23 	bl	801e6c4 <get_memory>
 801ec7e:	4604      	mov	r4, r0
 801ec80:	2800      	cmp	r0, #0
 801ec82:	d039      	beq.n	801ecf8 <create_topic+0x8c>
 801ec84:	692b      	ldr	r3, [r5, #16]
 801ec86:	2102      	movs	r1, #2
 801ec88:	6884      	ldr	r4, [r0, #8]
 801ec8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ec8e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801ed08 <create_topic+0x9c>
 801ec92:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801ec96:	1c42      	adds	r2, r0, #1
 801ec98:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801ec9c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801eca0:	f7f8 fbc0 	bl	8017424 <uxr_object_id>
 801eca4:	223c      	movs	r2, #60	@ 0x3c
 801eca6:	6120      	str	r0, [r4, #16]
 801eca8:	4641      	mov	r1, r8
 801ecaa:	4638      	mov	r0, r7
 801ecac:	f7f7 fad4 	bl	8016258 <generate_topic_name>
 801ecb0:	b1f0      	cbz	r0, 801ecf0 <create_topic+0x84>
 801ecb2:	4f14      	ldr	r7, [pc, #80]	@ (801ed04 <create_topic+0x98>)
 801ecb4:	4630      	mov	r0, r6
 801ecb6:	2264      	movs	r2, #100	@ 0x64
 801ecb8:	4639      	mov	r1, r7
 801ecba:	f7f7 fa9f 	bl	80161fc <generate_type_name>
 801ecbe:	b1b8      	cbz	r0, 801ecf0 <create_topic+0x84>
 801ecc0:	6928      	ldr	r0, [r5, #16]
 801ecc2:	2106      	movs	r1, #6
 801ecc4:	696b      	ldr	r3, [r5, #20]
 801ecc6:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801ecca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ecce:	f8cd 8000 	str.w	r8, [sp]
 801ecd2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801ecd6:	6811      	ldr	r1, [r2, #0]
 801ecd8:	6922      	ldr	r2, [r4, #16]
 801ecda:	f7f8 f927 	bl	8016f2c <uxr_buffer_create_topic_bin>
 801ecde:	4602      	mov	r2, r0
 801ece0:	6928      	ldr	r0, [r5, #16]
 801ece2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ece6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ecea:	f7f7 f9bb 	bl	8016064 <run_xrce_session>
 801ecee:	b918      	cbnz	r0, 801ecf8 <create_topic+0x8c>
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	2400      	movs	r4, #0
 801ecf4:	f7f7 f8a8 	bl	8015e48 <rmw_uxrce_fini_topic_memory>
 801ecf8:	4620      	mov	r0, r4
 801ecfa:	b004      	add	sp, #16
 801ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed00:	24069254 	.word	0x24069254
 801ed04:	240693b0 	.word	0x240693b0
 801ed08:	24069374 	.word	0x24069374

0801ed0c <destroy_topic>:
 801ed0c:	b538      	push	{r3, r4, r5, lr}
 801ed0e:	6985      	ldr	r5, [r0, #24]
 801ed10:	b1dd      	cbz	r5, 801ed4a <destroy_topic+0x3e>
 801ed12:	4604      	mov	r4, r0
 801ed14:	6928      	ldr	r0, [r5, #16]
 801ed16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ed1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ed1e:	6922      	ldr	r2, [r4, #16]
 801ed20:	6819      	ldr	r1, [r3, #0]
 801ed22:	f7f8 f885 	bl	8016e30 <uxr_buffer_delete_entity>
 801ed26:	4602      	mov	r2, r0
 801ed28:	6928      	ldr	r0, [r5, #16]
 801ed2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ed2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ed32:	f7f7 f997 	bl	8016064 <run_xrce_session>
 801ed36:	4603      	mov	r3, r0
 801ed38:	4620      	mov	r0, r4
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	bf14      	ite	ne
 801ed3e:	2400      	movne	r4, #0
 801ed40:	2402      	moveq	r4, #2
 801ed42:	f7f7 f881 	bl	8015e48 <rmw_uxrce_fini_topic_memory>
 801ed46:	4620      	mov	r0, r4
 801ed48:	bd38      	pop	{r3, r4, r5, pc}
 801ed4a:	2401      	movs	r4, #1
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	bd38      	pop	{r3, r4, r5, pc}

0801ed50 <create_node>:
 801ed50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed54:	b083      	sub	sp, #12
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d064      	beq.n	801ee24 <create_node+0xd4>
 801ed5a:	4606      	mov	r6, r0
 801ed5c:	4838      	ldr	r0, [pc, #224]	@ (801ee40 <create_node+0xf0>)
 801ed5e:	460f      	mov	r7, r1
 801ed60:	4690      	mov	r8, r2
 801ed62:	461d      	mov	r5, r3
 801ed64:	f7ff fcae 	bl	801e6c4 <get_memory>
 801ed68:	2800      	cmp	r0, #0
 801ed6a:	d05b      	beq.n	801ee24 <create_node+0xd4>
 801ed6c:	6884      	ldr	r4, [r0, #8]
 801ed6e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801ed70:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801ed74:	f104 0518 	add.w	r5, r4, #24
 801ed78:	6123      	str	r3, [r4, #16]
 801ed7a:	f7ff fd0b 	bl	801e794 <rmw_get_implementation_identifier>
 801ed7e:	f8c4 9020 	str.w	r9, [r4, #32]
 801ed82:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801ed86:	4630      	mov	r0, r6
 801ed88:	f7e1 fab4 	bl	80002f4 <strlen>
 801ed8c:	1c42      	adds	r2, r0, #1
 801ed8e:	2a3c      	cmp	r2, #60	@ 0x3c
 801ed90:	d840      	bhi.n	801ee14 <create_node+0xc4>
 801ed92:	4648      	mov	r0, r9
 801ed94:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801ed98:	4631      	mov	r1, r6
 801ed9a:	f003 fbd0 	bl	802253e <memcpy>
 801ed9e:	4638      	mov	r0, r7
 801eda0:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801eda4:	f7e1 faa6 	bl	80002f4 <strlen>
 801eda8:	1c42      	adds	r2, r0, #1
 801edaa:	2a3c      	cmp	r2, #60	@ 0x3c
 801edac:	d832      	bhi.n	801ee14 <create_node+0xc4>
 801edae:	4639      	mov	r1, r7
 801edb0:	4648      	mov	r0, r9
 801edb2:	f003 fbc4 	bl	802253e <memcpy>
 801edb6:	6923      	ldr	r3, [r4, #16]
 801edb8:	2101      	movs	r1, #1
 801edba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801edbe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801edc2:	1842      	adds	r2, r0, r1
 801edc4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801edc8:	f7f8 fb2c 	bl	8017424 <uxr_object_id>
 801edcc:	6160      	str	r0, [r4, #20]
 801edce:	783b      	ldrb	r3, [r7, #0]
 801edd0:	2b2f      	cmp	r3, #47	@ 0x2f
 801edd2:	d12c      	bne.n	801ee2e <create_node+0xde>
 801edd4:	787b      	ldrb	r3, [r7, #1]
 801edd6:	bb53      	cbnz	r3, 801ee2e <create_node+0xde>
 801edd8:	4633      	mov	r3, r6
 801edda:	4a1a      	ldr	r2, [pc, #104]	@ (801ee44 <create_node+0xf4>)
 801eddc:	213c      	movs	r1, #60	@ 0x3c
 801edde:	481a      	ldr	r0, [pc, #104]	@ (801ee48 <create_node+0xf8>)
 801ede0:	f003 f920 	bl	8022024 <sniprintf>
 801ede4:	6920      	ldr	r0, [r4, #16]
 801ede6:	2106      	movs	r1, #6
 801ede8:	fa1f f388 	uxth.w	r3, r8
 801edec:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801edf0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801edf4:	9101      	str	r1, [sp, #4]
 801edf6:	4914      	ldr	r1, [pc, #80]	@ (801ee48 <create_node+0xf8>)
 801edf8:	9100      	str	r1, [sp, #0]
 801edfa:	6811      	ldr	r1, [r2, #0]
 801edfc:	6962      	ldr	r2, [r4, #20]
 801edfe:	f7f8 f863 	bl	8016ec8 <uxr_buffer_create_participant_bin>
 801ee02:	4602      	mov	r2, r0
 801ee04:	6920      	ldr	r0, [r4, #16]
 801ee06:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ee0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ee0e:	f7f7 f929 	bl	8016064 <run_xrce_session>
 801ee12:	b918      	cbnz	r0, 801ee1c <create_node+0xcc>
 801ee14:	4628      	mov	r0, r5
 801ee16:	2500      	movs	r5, #0
 801ee18:	f7f6 ffa6 	bl	8015d68 <rmw_uxrce_fini_node_memory>
 801ee1c:	4628      	mov	r0, r5
 801ee1e:	b003      	add	sp, #12
 801ee20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ee24:	2500      	movs	r5, #0
 801ee26:	4628      	mov	r0, r5
 801ee28:	b003      	add	sp, #12
 801ee2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ee2e:	463b      	mov	r3, r7
 801ee30:	4a06      	ldr	r2, [pc, #24]	@ (801ee4c <create_node+0xfc>)
 801ee32:	213c      	movs	r1, #60	@ 0x3c
 801ee34:	9600      	str	r6, [sp, #0]
 801ee36:	4804      	ldr	r0, [pc, #16]	@ (801ee48 <create_node+0xf8>)
 801ee38:	f003 f8f4 	bl	8022024 <sniprintf>
 801ee3c:	e7d2      	b.n	801ede4 <create_node+0x94>
 801ee3e:	bf00      	nop
 801ee40:	240691f4 	.word	0x240691f4
 801ee44:	080249fc 	.word	0x080249fc
 801ee48:	24069414 	.word	0x24069414
 801ee4c:	0802538c 	.word	0x0802538c

0801ee50 <rmw_create_node>:
 801ee50:	468c      	mov	ip, r1
 801ee52:	4611      	mov	r1, r2
 801ee54:	f1bc 0f00 	cmp.w	ip, #0
 801ee58:	d00a      	beq.n	801ee70 <rmw_create_node+0x20>
 801ee5a:	f89c 3000 	ldrb.w	r3, [ip]
 801ee5e:	b13b      	cbz	r3, 801ee70 <rmw_create_node+0x20>
 801ee60:	b132      	cbz	r2, 801ee70 <rmw_create_node+0x20>
 801ee62:	7813      	ldrb	r3, [r2, #0]
 801ee64:	b123      	cbz	r3, 801ee70 <rmw_create_node+0x20>
 801ee66:	4603      	mov	r3, r0
 801ee68:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801ee6a:	4660      	mov	r0, ip
 801ee6c:	f7ff bf70 	b.w	801ed50 <create_node>
 801ee70:	2000      	movs	r0, #0
 801ee72:	4770      	bx	lr

0801ee74 <rmw_destroy_node>:
 801ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee76:	b328      	cbz	r0, 801eec4 <rmw_destroy_node+0x50>
 801ee78:	4607      	mov	r7, r0
 801ee7a:	6800      	ldr	r0, [r0, #0]
 801ee7c:	b120      	cbz	r0, 801ee88 <rmw_destroy_node+0x14>
 801ee7e:	4b37      	ldr	r3, [pc, #220]	@ (801ef5c <rmw_destroy_node+0xe8>)
 801ee80:	6819      	ldr	r1, [r3, #0]
 801ee82:	f7e1 fa2d 	bl	80002e0 <strcmp>
 801ee86:	b9e8      	cbnz	r0, 801eec4 <rmw_destroy_node+0x50>
 801ee88:	687d      	ldr	r5, [r7, #4]
 801ee8a:	b1dd      	cbz	r5, 801eec4 <rmw_destroy_node+0x50>
 801ee8c:	4b34      	ldr	r3, [pc, #208]	@ (801ef60 <rmw_destroy_node+0xec>)
 801ee8e:	681c      	ldr	r4, [r3, #0]
 801ee90:	2c00      	cmp	r4, #0
 801ee92:	d060      	beq.n	801ef56 <rmw_destroy_node+0xe2>
 801ee94:	2600      	movs	r6, #0
 801ee96:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ee9a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801ee9e:	429d      	cmp	r5, r3
 801eea0:	d013      	beq.n	801eeca <rmw_destroy_node+0x56>
 801eea2:	2c00      	cmp	r4, #0
 801eea4:	d1f7      	bne.n	801ee96 <rmw_destroy_node+0x22>
 801eea6:	4b2f      	ldr	r3, [pc, #188]	@ (801ef64 <rmw_destroy_node+0xf0>)
 801eea8:	681c      	ldr	r4, [r3, #0]
 801eeaa:	b1c4      	cbz	r4, 801eede <rmw_destroy_node+0x6a>
 801eeac:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801eeb0:	6a0b      	ldr	r3, [r1, #32]
 801eeb2:	429d      	cmp	r5, r3
 801eeb4:	d1f9      	bne.n	801eeaa <rmw_destroy_node+0x36>
 801eeb6:	317c      	adds	r1, #124	@ 0x7c
 801eeb8:	4638      	mov	r0, r7
 801eeba:	f000 fbff 	bl	801f6bc <rmw_destroy_subscription>
 801eebe:	2801      	cmp	r0, #1
 801eec0:	4606      	mov	r6, r0
 801eec2:	d1f2      	bne.n	801eeaa <rmw_destroy_node+0x36>
 801eec4:	2601      	movs	r6, #1
 801eec6:	4630      	mov	r0, r6
 801eec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eeca:	3184      	adds	r1, #132	@ 0x84
 801eecc:	4638      	mov	r0, r7
 801eece:	f7f6 fd59 	bl	8015984 <rmw_destroy_publisher>
 801eed2:	2801      	cmp	r0, #1
 801eed4:	4606      	mov	r6, r0
 801eed6:	d0f5      	beq.n	801eec4 <rmw_destroy_node+0x50>
 801eed8:	2c00      	cmp	r4, #0
 801eeda:	d1dc      	bne.n	801ee96 <rmw_destroy_node+0x22>
 801eedc:	e7e3      	b.n	801eea6 <rmw_destroy_node+0x32>
 801eede:	4b22      	ldr	r3, [pc, #136]	@ (801ef68 <rmw_destroy_node+0xf4>)
 801eee0:	681c      	ldr	r4, [r3, #0]
 801eee2:	b16c      	cbz	r4, 801ef00 <rmw_destroy_node+0x8c>
 801eee4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801eee8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801eeea:	429d      	cmp	r5, r3
 801eeec:	d1f9      	bne.n	801eee2 <rmw_destroy_node+0x6e>
 801eeee:	317c      	adds	r1, #124	@ 0x7c
 801eef0:	4638      	mov	r0, r7
 801eef2:	f000 fa6d 	bl	801f3d0 <rmw_destroy_service>
 801eef6:	2801      	cmp	r0, #1
 801eef8:	4606      	mov	r6, r0
 801eefa:	d0e3      	beq.n	801eec4 <rmw_destroy_node+0x50>
 801eefc:	2c00      	cmp	r4, #0
 801eefe:	d1f1      	bne.n	801eee4 <rmw_destroy_node+0x70>
 801ef00:	4b1a      	ldr	r3, [pc, #104]	@ (801ef6c <rmw_destroy_node+0xf8>)
 801ef02:	681c      	ldr	r4, [r3, #0]
 801ef04:	b16c      	cbz	r4, 801ef22 <rmw_destroy_node+0xae>
 801ef06:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ef0a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801ef0c:	429d      	cmp	r5, r3
 801ef0e:	d1f9      	bne.n	801ef04 <rmw_destroy_node+0x90>
 801ef10:	317c      	adds	r1, #124	@ 0x7c
 801ef12:	4638      	mov	r0, r7
 801ef14:	f7ff fbfa 	bl	801e70c <rmw_destroy_client>
 801ef18:	2801      	cmp	r0, #1
 801ef1a:	4606      	mov	r6, r0
 801ef1c:	d0d2      	beq.n	801eec4 <rmw_destroy_node+0x50>
 801ef1e:	2c00      	cmp	r4, #0
 801ef20:	d1f1      	bne.n	801ef06 <rmw_destroy_node+0x92>
 801ef22:	6928      	ldr	r0, [r5, #16]
 801ef24:	696a      	ldr	r2, [r5, #20]
 801ef26:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ef2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ef2e:	6819      	ldr	r1, [r3, #0]
 801ef30:	f7f7 ff7e 	bl	8016e30 <uxr_buffer_delete_entity>
 801ef34:	4602      	mov	r2, r0
 801ef36:	6928      	ldr	r0, [r5, #16]
 801ef38:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ef3c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ef40:	f7f7 f890 	bl	8016064 <run_xrce_session>
 801ef44:	4603      	mov	r3, r0
 801ef46:	4638      	mov	r0, r7
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	bf08      	it	eq
 801ef4c:	2602      	moveq	r6, #2
 801ef4e:	f7f6 ff0b 	bl	8015d68 <rmw_uxrce_fini_node_memory>
 801ef52:	4630      	mov	r0, r6
 801ef54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef56:	4626      	mov	r6, r4
 801ef58:	e7a5      	b.n	801eea6 <rmw_destroy_node+0x32>
 801ef5a:	bf00      	nop
 801ef5c:	08025978 	.word	0x08025978
 801ef60:	24069204 	.word	0x24069204
 801ef64:	24069244 	.word	0x24069244
 801ef68:	24069214 	.word	0x24069214
 801ef6c:	24064928 	.word	0x24064928

0801ef70 <rmw_node_get_graph_guard_condition>:
 801ef70:	6843      	ldr	r3, [r0, #4]
 801ef72:	6918      	ldr	r0, [r3, #16]
 801ef74:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801ef78:	4770      	bx	lr
 801ef7a:	bf00      	nop

0801ef7c <rmw_send_request>:
 801ef7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef80:	4604      	mov	r4, r0
 801ef82:	6800      	ldr	r0, [r0, #0]
 801ef84:	b08b      	sub	sp, #44	@ 0x2c
 801ef86:	460e      	mov	r6, r1
 801ef88:	4615      	mov	r5, r2
 801ef8a:	b128      	cbz	r0, 801ef98 <rmw_send_request+0x1c>
 801ef8c:	4b21      	ldr	r3, [pc, #132]	@ (801f014 <rmw_send_request+0x98>)
 801ef8e:	6819      	ldr	r1, [r3, #0]
 801ef90:	f7e1 f9a6 	bl	80002e0 <strcmp>
 801ef94:	2800      	cmp	r0, #0
 801ef96:	d139      	bne.n	801f00c <rmw_send_request+0x90>
 801ef98:	6864      	ldr	r4, [r4, #4]
 801ef9a:	2700      	movs	r7, #0
 801ef9c:	6963      	ldr	r3, [r4, #20]
 801ef9e:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801efa2:	689b      	ldr	r3, [r3, #8]
 801efa4:	4798      	blx	r3
 801efa6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801efaa:	4630      	mov	r0, r6
 801efac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801efb0:	4798      	blx	r3
 801efb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801efb6:	9000      	str	r0, [sp, #0]
 801efb8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801efbc:	6922      	ldr	r2, [r4, #16]
 801efbe:	ab02      	add	r3, sp, #8
 801efc0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801efc2:	f7fa fb37 	bl	8019634 <uxr_prepare_output_stream>
 801efc6:	e9c5 0700 	strd	r0, r7, [r5]
 801efca:	b198      	cbz	r0, 801eff4 <rmw_send_request+0x78>
 801efcc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801efd0:	a902      	add	r1, sp, #8
 801efd2:	4630      	mov	r0, r6
 801efd4:	4798      	blx	r3
 801efd6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801efda:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801efde:	2b01      	cmp	r3, #1
 801efe0:	d00c      	beq.n	801effc <rmw_send_request+0x80>
 801efe2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801efe4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801efe8:	f7f9 f82a 	bl	8018040 <uxr_run_session_until_confirm_delivery>
 801efec:	4638      	mov	r0, r7
 801efee:	b00b      	add	sp, #44	@ 0x2c
 801eff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eff4:	2001      	movs	r0, #1
 801eff6:	b00b      	add	sp, #44	@ 0x2c
 801eff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801effc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f000:	f7f8 fc64 	bl	80178cc <uxr_flash_output_streams>
 801f004:	4638      	mov	r0, r7
 801f006:	b00b      	add	sp, #44	@ 0x2c
 801f008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f00c:	200c      	movs	r0, #12
 801f00e:	b00b      	add	sp, #44	@ 0x2c
 801f010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f014:	08025978 	.word	0x08025978

0801f018 <rmw_take_request>:
 801f018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f01c:	4605      	mov	r5, r0
 801f01e:	6800      	ldr	r0, [r0, #0]
 801f020:	b089      	sub	sp, #36	@ 0x24
 801f022:	460c      	mov	r4, r1
 801f024:	4690      	mov	r8, r2
 801f026:	461e      	mov	r6, r3
 801f028:	b128      	cbz	r0, 801f036 <rmw_take_request+0x1e>
 801f02a:	4b28      	ldr	r3, [pc, #160]	@ (801f0cc <rmw_take_request+0xb4>)
 801f02c:	6819      	ldr	r1, [r3, #0]
 801f02e:	f7e1 f957 	bl	80002e0 <strcmp>
 801f032:	2800      	cmp	r0, #0
 801f034:	d146      	bne.n	801f0c4 <rmw_take_request+0xac>
 801f036:	b10e      	cbz	r6, 801f03c <rmw_take_request+0x24>
 801f038:	2300      	movs	r3, #0
 801f03a:	7033      	strb	r3, [r6, #0]
 801f03c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801f040:	f7f6 ff92 	bl	8015f68 <rmw_uxrce_clean_expired_static_input_buffer>
 801f044:	4648      	mov	r0, r9
 801f046:	f7f6 ff65 	bl	8015f14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f04a:	4607      	mov	r7, r0
 801f04c:	b3b0      	cbz	r0, 801f0bc <rmw_take_request+0xa4>
 801f04e:	6885      	ldr	r5, [r0, #8]
 801f050:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801f054:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801f058:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801f05c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801f060:	7423      	strb	r3, [r4, #16]
 801f062:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801f066:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801f06a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801f06e:	74e3      	strb	r3, [r4, #19]
 801f070:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801f074:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801f078:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801f07c:	6161      	str	r1, [r4, #20]
 801f07e:	61a2      	str	r2, [r4, #24]
 801f080:	61e3      	str	r3, [r4, #28]
 801f082:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f086:	689b      	ldr	r3, [r3, #8]
 801f088:	4798      	blx	r3
 801f08a:	6844      	ldr	r4, [r0, #4]
 801f08c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801f090:	f105 0110 	add.w	r1, r5, #16
 801f094:	4668      	mov	r0, sp
 801f096:	f7f5 f88f 	bl	80141b8 <ucdr_init_buffer>
 801f09a:	4641      	mov	r1, r8
 801f09c:	68e3      	ldr	r3, [r4, #12]
 801f09e:	4668      	mov	r0, sp
 801f0a0:	4798      	blx	r3
 801f0a2:	4639      	mov	r1, r7
 801f0a4:	4604      	mov	r4, r0
 801f0a6:	480a      	ldr	r0, [pc, #40]	@ (801f0d0 <rmw_take_request+0xb8>)
 801f0a8:	f7ff fb1c 	bl	801e6e4 <put_memory>
 801f0ac:	b106      	cbz	r6, 801f0b0 <rmw_take_request+0x98>
 801f0ae:	7034      	strb	r4, [r6, #0]
 801f0b0:	f084 0001 	eor.w	r0, r4, #1
 801f0b4:	b2c0      	uxtb	r0, r0
 801f0b6:	b009      	add	sp, #36	@ 0x24
 801f0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0bc:	2001      	movs	r0, #1
 801f0be:	b009      	add	sp, #36	@ 0x24
 801f0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0c4:	200c      	movs	r0, #12
 801f0c6:	b009      	add	sp, #36	@ 0x24
 801f0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0cc:	08025978 	.word	0x08025978
 801f0d0:	24069234 	.word	0x24069234

0801f0d4 <rmw_send_response>:
 801f0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f0d6:	4605      	mov	r5, r0
 801f0d8:	6800      	ldr	r0, [r0, #0]
 801f0da:	b091      	sub	sp, #68	@ 0x44
 801f0dc:	460c      	mov	r4, r1
 801f0de:	4616      	mov	r6, r2
 801f0e0:	b128      	cbz	r0, 801f0ee <rmw_send_response+0x1a>
 801f0e2:	4b29      	ldr	r3, [pc, #164]	@ (801f188 <rmw_send_response+0xb4>)
 801f0e4:	6819      	ldr	r1, [r3, #0]
 801f0e6:	f7e1 f8fb 	bl	80002e0 <strcmp>
 801f0ea:	2800      	cmp	r0, #0
 801f0ec:	d141      	bne.n	801f172 <rmw_send_response+0x9e>
 801f0ee:	686d      	ldr	r5, [r5, #4]
 801f0f0:	68a1      	ldr	r1, [r4, #8]
 801f0f2:	6860      	ldr	r0, [r4, #4]
 801f0f4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801f0f6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801f0fa:	9307      	str	r3, [sp, #28]
 801f0fc:	4623      	mov	r3, r4
 801f0fe:	9206      	str	r2, [sp, #24]
 801f100:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f104:	789b      	ldrb	r3, [r3, #2]
 801f106:	f88d 2017 	strb.w	r2, [sp, #23]
 801f10a:	f88d 3016 	strb.w	r3, [sp, #22]
 801f10e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801f112:	68e2      	ldr	r2, [r4, #12]
 801f114:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f118:	ab02      	add	r3, sp, #8
 801f11a:	696c      	ldr	r4, [r5, #20]
 801f11c:	c307      	stmia	r3!, {r0, r1, r2}
 801f11e:	68e3      	ldr	r3, [r4, #12]
 801f120:	4798      	blx	r3
 801f122:	6844      	ldr	r4, [r0, #4]
 801f124:	4630      	mov	r0, r6
 801f126:	6923      	ldr	r3, [r4, #16]
 801f128:	4798      	blx	r3
 801f12a:	f100 0318 	add.w	r3, r0, #24
 801f12e:	6938      	ldr	r0, [r7, #16]
 801f130:	9300      	str	r3, [sp, #0]
 801f132:	ab08      	add	r3, sp, #32
 801f134:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f138:	692a      	ldr	r2, [r5, #16]
 801f13a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801f13c:	f7fa fa7a 	bl	8019634 <uxr_prepare_output_stream>
 801f140:	b910      	cbnz	r0, 801f148 <rmw_send_response+0x74>
 801f142:	2001      	movs	r0, #1
 801f144:	b011      	add	sp, #68	@ 0x44
 801f146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f148:	a902      	add	r1, sp, #8
 801f14a:	a808      	add	r0, sp, #32
 801f14c:	f7fb fc02 	bl	801a954 <uxr_serialize_SampleIdentity>
 801f150:	68a3      	ldr	r3, [r4, #8]
 801f152:	a908      	add	r1, sp, #32
 801f154:	4630      	mov	r0, r6
 801f156:	4798      	blx	r3
 801f158:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801f15c:	6938      	ldr	r0, [r7, #16]
 801f15e:	2b01      	cmp	r3, #1
 801f160:	d00a      	beq.n	801f178 <rmw_send_response+0xa4>
 801f162:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801f164:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f168:	f7f8 ff6a 	bl	8018040 <uxr_run_session_until_confirm_delivery>
 801f16c:	2000      	movs	r0, #0
 801f16e:	b011      	add	sp, #68	@ 0x44
 801f170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f172:	200c      	movs	r0, #12
 801f174:	b011      	add	sp, #68	@ 0x44
 801f176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f178:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f17c:	f7f8 fba6 	bl	80178cc <uxr_flash_output_streams>
 801f180:	2000      	movs	r0, #0
 801f182:	b011      	add	sp, #68	@ 0x44
 801f184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f186:	bf00      	nop
 801f188:	08025978 	.word	0x08025978

0801f18c <rmw_take_response>:
 801f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f190:	4604      	mov	r4, r0
 801f192:	6800      	ldr	r0, [r0, #0]
 801f194:	b088      	sub	sp, #32
 801f196:	460f      	mov	r7, r1
 801f198:	4690      	mov	r8, r2
 801f19a:	461d      	mov	r5, r3
 801f19c:	b120      	cbz	r0, 801f1a8 <rmw_take_response+0x1c>
 801f19e:	4b1d      	ldr	r3, [pc, #116]	@ (801f214 <rmw_take_response+0x88>)
 801f1a0:	6819      	ldr	r1, [r3, #0]
 801f1a2:	f7e1 f89d 	bl	80002e0 <strcmp>
 801f1a6:	bb68      	cbnz	r0, 801f204 <rmw_take_response+0x78>
 801f1a8:	b10d      	cbz	r5, 801f1ae <rmw_take_response+0x22>
 801f1aa:	2300      	movs	r3, #0
 801f1ac:	702b      	strb	r3, [r5, #0]
 801f1ae:	6864      	ldr	r4, [r4, #4]
 801f1b0:	f7f6 feda 	bl	8015f68 <rmw_uxrce_clean_expired_static_input_buffer>
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	f7f6 fead 	bl	8015f14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f1ba:	4606      	mov	r6, r0
 801f1bc:	b330      	cbz	r0, 801f20c <rmw_take_response+0x80>
 801f1be:	6963      	ldr	r3, [r4, #20]
 801f1c0:	6884      	ldr	r4, [r0, #8]
 801f1c2:	68db      	ldr	r3, [r3, #12]
 801f1c4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801f1c8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801f1cc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801f1d0:	4798      	blx	r3
 801f1d2:	6847      	ldr	r7, [r0, #4]
 801f1d4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801f1d8:	f104 0110 	add.w	r1, r4, #16
 801f1dc:	4668      	mov	r0, sp
 801f1de:	f7f4 ffeb 	bl	80141b8 <ucdr_init_buffer>
 801f1e2:	4641      	mov	r1, r8
 801f1e4:	68fb      	ldr	r3, [r7, #12]
 801f1e6:	4668      	mov	r0, sp
 801f1e8:	4798      	blx	r3
 801f1ea:	4631      	mov	r1, r6
 801f1ec:	4604      	mov	r4, r0
 801f1ee:	480a      	ldr	r0, [pc, #40]	@ (801f218 <rmw_take_response+0x8c>)
 801f1f0:	f7ff fa78 	bl	801e6e4 <put_memory>
 801f1f4:	b105      	cbz	r5, 801f1f8 <rmw_take_response+0x6c>
 801f1f6:	702c      	strb	r4, [r5, #0]
 801f1f8:	f084 0001 	eor.w	r0, r4, #1
 801f1fc:	b2c0      	uxtb	r0, r0
 801f1fe:	b008      	add	sp, #32
 801f200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f204:	200c      	movs	r0, #12
 801f206:	b008      	add	sp, #32
 801f208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f20c:	2001      	movs	r0, #1
 801f20e:	b008      	add	sp, #32
 801f210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f214:	08025978 	.word	0x08025978
 801f218:	24069234 	.word	0x24069234

0801f21c <rmw_create_service>:
 801f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f220:	b091      	sub	sp, #68	@ 0x44
 801f222:	2900      	cmp	r1, #0
 801f224:	f000 80bb 	beq.w	801f39e <rmw_create_service+0x182>
 801f228:	4606      	mov	r6, r0
 801f22a:	2800      	cmp	r0, #0
 801f22c:	f000 80b7 	beq.w	801f39e <rmw_create_service+0x182>
 801f230:	4614      	mov	r4, r2
 801f232:	6800      	ldr	r0, [r0, #0]
 801f234:	4689      	mov	r9, r1
 801f236:	461d      	mov	r5, r3
 801f238:	f7f7 f826 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801f23c:	2c00      	cmp	r4, #0
 801f23e:	f000 80ae 	beq.w	801f39e <rmw_create_service+0x182>
 801f242:	f080 0001 	eor.w	r0, r0, #1
 801f246:	b2c0      	uxtb	r0, r0
 801f248:	2800      	cmp	r0, #0
 801f24a:	f040 80a8 	bne.w	801f39e <rmw_create_service+0x182>
 801f24e:	7823      	ldrb	r3, [r4, #0]
 801f250:	2b00      	cmp	r3, #0
 801f252:	f000 80a4 	beq.w	801f39e <rmw_create_service+0x182>
 801f256:	2d00      	cmp	r5, #0
 801f258:	f000 80a1 	beq.w	801f39e <rmw_create_service+0x182>
 801f25c:	4856      	ldr	r0, [pc, #344]	@ (801f3b8 <rmw_create_service+0x19c>)
 801f25e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801f262:	f7ff fa2f 	bl	801e6c4 <get_memory>
 801f266:	4606      	mov	r6, r0
 801f268:	2800      	cmp	r0, #0
 801f26a:	f000 8099 	beq.w	801f3a0 <rmw_create_service+0x184>
 801f26e:	6887      	ldr	r7, [r0, #8]
 801f270:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801f274:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801f278:	f7ff fa8c 	bl	801e794 <rmw_get_implementation_identifier>
 801f27c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801f27e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801f282:	4620      	mov	r0, r4
 801f284:	f7e1 f836 	bl	80002f4 <strlen>
 801f288:	1c42      	adds	r2, r0, #1
 801f28a:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801f28e:	2a3c      	cmp	r2, #60	@ 0x3c
 801f290:	f200 808a 	bhi.w	801f3a8 <rmw_create_service+0x18c>
 801f294:	4621      	mov	r1, r4
 801f296:	4650      	mov	r0, sl
 801f298:	f003 f951 	bl	802253e <memcpy>
 801f29c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f2a0:	4629      	mov	r1, r5
 801f2a2:	2250      	movs	r2, #80	@ 0x50
 801f2a4:	f107 0020 	add.w	r0, r7, #32
 801f2a8:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801f2ac:	677b      	str	r3, [r7, #116]	@ 0x74
 801f2ae:	f003 f946 	bl	802253e <memcpy>
 801f2b2:	4648      	mov	r0, r9
 801f2b4:	4941      	ldr	r1, [pc, #260]	@ (801f3bc <rmw_create_service+0x1a0>)
 801f2b6:	f7f7 f86f 	bl	8016398 <get_service_typesupport_handle>
 801f2ba:	2800      	cmp	r0, #0
 801f2bc:	d074      	beq.n	801f3a8 <rmw_create_service+0x18c>
 801f2be:	6843      	ldr	r3, [r0, #4]
 801f2c0:	617b      	str	r3, [r7, #20]
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	d070      	beq.n	801f3a8 <rmw_create_service+0x18c>
 801f2c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f2ca:	2108      	movs	r1, #8
 801f2cc:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801f3c4 <rmw_create_service+0x1a8>
 801f2d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f2d4:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801f3c8 <rmw_create_service+0x1ac>
 801f2d8:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801f2dc:	1c42      	adds	r2, r0, #1
 801f2de:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801f2e2:	f7f8 f89f 	bl	8017424 <uxr_object_id>
 801f2e6:	2364      	movs	r3, #100	@ 0x64
 801f2e8:	6138      	str	r0, [r7, #16]
 801f2ea:	4652      	mov	r2, sl
 801f2ec:	4649      	mov	r1, r9
 801f2ee:	6978      	ldr	r0, [r7, #20]
 801f2f0:	f7f6 ff1e 	bl	8016130 <generate_service_types>
 801f2f4:	2800      	cmp	r0, #0
 801f2f6:	d057      	beq.n	801f3a8 <rmw_create_service+0x18c>
 801f2f8:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801f3cc <rmw_create_service+0x1b0>
 801f2fc:	233c      	movs	r3, #60	@ 0x3c
 801f2fe:	4a30      	ldr	r2, [pc, #192]	@ (801f3c0 <rmw_create_service+0x1a4>)
 801f300:	4620      	mov	r0, r4
 801f302:	4659      	mov	r1, fp
 801f304:	f7f6 fee2 	bl	80160cc <generate_service_topics>
 801f308:	2800      	cmp	r0, #0
 801f30a:	d04d      	beq.n	801f3a8 <rmw_create_service+0x18c>
 801f30c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f310:	a80c      	add	r0, sp, #48	@ 0x30
 801f312:	4629      	mov	r1, r5
 801f314:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801f318:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f31c:	f7f6 febe 	bl	801609c <convert_qos_profile>
 801f320:	4a27      	ldr	r2, [pc, #156]	@ (801f3c0 <rmw_create_service+0x1a4>)
 801f322:	a80c      	add	r0, sp, #48	@ 0x30
 801f324:	9400      	str	r4, [sp, #0]
 801f326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f328:	e9cd b203 	strd	fp, r2, [sp, #12]
 801f32c:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801f330:	c803      	ldmia	r0, {r0, r1}
 801f332:	9a08      	ldr	r2, [sp, #32]
 801f334:	9005      	str	r0, [sp, #20]
 801f336:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801f33a:	2306      	movs	r3, #6
 801f33c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f340:	9307      	str	r3, [sp, #28]
 801f342:	6811      	ldr	r1, [r2, #0]
 801f344:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801f348:	693a      	ldr	r2, [r7, #16]
 801f34a:	f7f7 ff73 	bl	8017234 <uxr_buffer_create_replier_bin>
 801f34e:	4602      	mov	r2, r0
 801f350:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f354:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f358:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f35c:	f7f6 fe82 	bl	8016064 <run_xrce_session>
 801f360:	b310      	cbz	r0, 801f3a8 <rmw_create_service+0x18c>
 801f362:	7a2b      	ldrb	r3, [r5, #8]
 801f364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f368:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f36c:	2b02      	cmp	r3, #2
 801f36e:	920e      	str	r2, [sp, #56]	@ 0x38
 801f370:	f04f 0200 	mov.w	r2, #0
 801f374:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f376:	bf0c      	ite	eq
 801f378:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801f37c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801f380:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f384:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f386:	ab0e      	add	r3, sp, #56	@ 0x38
 801f388:	673a      	str	r2, [r7, #112]	@ 0x70
 801f38a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801f38e:	9300      	str	r3, [sp, #0]
 801f390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f392:	6811      	ldr	r1, [r2, #0]
 801f394:	693a      	ldr	r2, [r7, #16]
 801f396:	f001 fc6b 	bl	8020c70 <uxr_buffer_request_data>
 801f39a:	8338      	strh	r0, [r7, #24]
 801f39c:	e000      	b.n	801f3a0 <rmw_create_service+0x184>
 801f39e:	2600      	movs	r6, #0
 801f3a0:	4630      	mov	r0, r6
 801f3a2:	b011      	add	sp, #68	@ 0x44
 801f3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3a8:	4630      	mov	r0, r6
 801f3aa:	2600      	movs	r6, #0
 801f3ac:	f7f6 fd20 	bl	8015df0 <rmw_uxrce_fini_service_memory>
 801f3b0:	4630      	mov	r0, r6
 801f3b2:	b011      	add	sp, #68	@ 0x44
 801f3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3b8:	24069214 	.word	0x24069214
 801f3bc:	080236c8 	.word	0x080236c8
 801f3c0:	240694f0 	.word	0x240694f0
 801f3c4:	2406952c 	.word	0x2406952c
 801f3c8:	2406948c 	.word	0x2406948c
 801f3cc:	24069450 	.word	0x24069450

0801f3d0 <rmw_destroy_service>:
 801f3d0:	b570      	push	{r4, r5, r6, lr}
 801f3d2:	b128      	cbz	r0, 801f3e0 <rmw_destroy_service+0x10>
 801f3d4:	4604      	mov	r4, r0
 801f3d6:	6800      	ldr	r0, [r0, #0]
 801f3d8:	460d      	mov	r5, r1
 801f3da:	f7f6 ff55 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801f3de:	b910      	cbnz	r0, 801f3e6 <rmw_destroy_service+0x16>
 801f3e0:	2401      	movs	r4, #1
 801f3e2:	4620      	mov	r0, r4
 801f3e4:	bd70      	pop	{r4, r5, r6, pc}
 801f3e6:	6863      	ldr	r3, [r4, #4]
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d0f9      	beq.n	801f3e0 <rmw_destroy_service+0x10>
 801f3ec:	2d00      	cmp	r5, #0
 801f3ee:	d0f7      	beq.n	801f3e0 <rmw_destroy_service+0x10>
 801f3f0:	6828      	ldr	r0, [r5, #0]
 801f3f2:	f7f6 ff49 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801f3f6:	2800      	cmp	r0, #0
 801f3f8:	d0f2      	beq.n	801f3e0 <rmw_destroy_service+0x10>
 801f3fa:	686e      	ldr	r6, [r5, #4]
 801f3fc:	2e00      	cmp	r6, #0
 801f3fe:	d0ef      	beq.n	801f3e0 <rmw_destroy_service+0x10>
 801f400:	6864      	ldr	r4, [r4, #4]
 801f402:	6932      	ldr	r2, [r6, #16]
 801f404:	6920      	ldr	r0, [r4, #16]
 801f406:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f40a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f40e:	6819      	ldr	r1, [r3, #0]
 801f410:	f001 fc68 	bl	8020ce4 <uxr_buffer_cancel_data>
 801f414:	4602      	mov	r2, r0
 801f416:	6920      	ldr	r0, [r4, #16]
 801f418:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f41c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f420:	f7f6 fe20 	bl	8016064 <run_xrce_session>
 801f424:	6920      	ldr	r0, [r4, #16]
 801f426:	6932      	ldr	r2, [r6, #16]
 801f428:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f42c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f430:	6819      	ldr	r1, [r3, #0]
 801f432:	f7f7 fcfd 	bl	8016e30 <uxr_buffer_delete_entity>
 801f436:	4602      	mov	r2, r0
 801f438:	6920      	ldr	r0, [r4, #16]
 801f43a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f43e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f442:	f7f6 fe0f 	bl	8016064 <run_xrce_session>
 801f446:	4603      	mov	r3, r0
 801f448:	4628      	mov	r0, r5
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	bf14      	ite	ne
 801f44e:	2400      	movne	r4, #0
 801f450:	2402      	moveq	r4, #2
 801f452:	f7f6 fccd 	bl	8015df0 <rmw_uxrce_fini_service_memory>
 801f456:	e7c4      	b.n	801f3e2 <rmw_destroy_service+0x12>

0801f458 <rmw_service_response_publisher_get_actual_qos>:
 801f458:	b181      	cbz	r1, 801f47c <rmw_service_response_publisher_get_actual_qos+0x24>
 801f45a:	4603      	mov	r3, r0
 801f45c:	b510      	push	{r4, lr}
 801f45e:	fab0 f480 	clz	r4, r0
 801f462:	0964      	lsrs	r4, r4, #5
 801f464:	b140      	cbz	r0, 801f478 <rmw_service_response_publisher_get_actual_qos+0x20>
 801f466:	685b      	ldr	r3, [r3, #4]
 801f468:	4608      	mov	r0, r1
 801f46a:	2250      	movs	r2, #80	@ 0x50
 801f46c:	f103 0120 	add.w	r1, r3, #32
 801f470:	f003 f865 	bl	802253e <memcpy>
 801f474:	4620      	mov	r0, r4
 801f476:	bd10      	pop	{r4, pc}
 801f478:	200b      	movs	r0, #11
 801f47a:	bd10      	pop	{r4, pc}
 801f47c:	200b      	movs	r0, #11
 801f47e:	4770      	bx	lr

0801f480 <rmw_service_request_subscription_get_actual_qos>:
 801f480:	b178      	cbz	r0, 801f4a2 <rmw_service_request_subscription_get_actual_qos+0x22>
 801f482:	b510      	push	{r4, lr}
 801f484:	fab1 f481 	clz	r4, r1
 801f488:	0964      	lsrs	r4, r4, #5
 801f48a:	b141      	cbz	r1, 801f49e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801f48c:	6843      	ldr	r3, [r0, #4]
 801f48e:	2250      	movs	r2, #80	@ 0x50
 801f490:	4608      	mov	r0, r1
 801f492:	f103 0120 	add.w	r1, r3, #32
 801f496:	f003 f852 	bl	802253e <memcpy>
 801f49a:	4620      	mov	r0, r4
 801f49c:	bd10      	pop	{r4, pc}
 801f49e:	200b      	movs	r0, #11
 801f4a0:	bd10      	pop	{r4, pc}
 801f4a2:	200b      	movs	r0, #11
 801f4a4:	4770      	bx	lr
 801f4a6:	bf00      	nop

0801f4a8 <rmw_create_subscription>:
 801f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4ac:	b08d      	sub	sp, #52	@ 0x34
 801f4ae:	2900      	cmp	r1, #0
 801f4b0:	f000 80d8 	beq.w	801f664 <rmw_create_subscription+0x1bc>
 801f4b4:	4604      	mov	r4, r0
 801f4b6:	2800      	cmp	r0, #0
 801f4b8:	f000 80d4 	beq.w	801f664 <rmw_create_subscription+0x1bc>
 801f4bc:	6800      	ldr	r0, [r0, #0]
 801f4be:	460e      	mov	r6, r1
 801f4c0:	4615      	mov	r5, r2
 801f4c2:	461f      	mov	r7, r3
 801f4c4:	f7f6 fee0 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801f4c8:	f080 0001 	eor.w	r0, r0, #1
 801f4cc:	b2c0      	uxtb	r0, r0
 801f4ce:	2800      	cmp	r0, #0
 801f4d0:	f040 80c8 	bne.w	801f664 <rmw_create_subscription+0x1bc>
 801f4d4:	2d00      	cmp	r5, #0
 801f4d6:	f000 80c5 	beq.w	801f664 <rmw_create_subscription+0x1bc>
 801f4da:	782b      	ldrb	r3, [r5, #0]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	f000 80c1 	beq.w	801f664 <rmw_create_subscription+0x1bc>
 801f4e2:	2f00      	cmp	r7, #0
 801f4e4:	f000 80be 	beq.w	801f664 <rmw_create_subscription+0x1bc>
 801f4e8:	4867      	ldr	r0, [pc, #412]	@ (801f688 <rmw_create_subscription+0x1e0>)
 801f4ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f4ee:	f7ff f8e9 	bl	801e6c4 <get_memory>
 801f4f2:	4604      	mov	r4, r0
 801f4f4:	2800      	cmp	r0, #0
 801f4f6:	f000 80b6 	beq.w	801f666 <rmw_create_subscription+0x1be>
 801f4fa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f4fe:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801f502:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801f506:	f7ff f945 	bl	801e794 <rmw_get_implementation_identifier>
 801f50a:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801f50e:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801f512:	4628      	mov	r0, r5
 801f514:	f7e0 feee 	bl	80002f4 <strlen>
 801f518:	3001      	adds	r0, #1
 801f51a:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801f51e:	283c      	cmp	r0, #60	@ 0x3c
 801f520:	f200 80a5 	bhi.w	801f66e <rmw_create_subscription+0x1c6>
 801f524:	462b      	mov	r3, r5
 801f526:	4a59      	ldr	r2, [pc, #356]	@ (801f68c <rmw_create_subscription+0x1e4>)
 801f528:	213c      	movs	r1, #60	@ 0x3c
 801f52a:	4650      	mov	r0, sl
 801f52c:	f002 fd7a 	bl	8022024 <sniprintf>
 801f530:	4639      	mov	r1, r7
 801f532:	2250      	movs	r2, #80	@ 0x50
 801f534:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801f538:	f8c8 9020 	str.w	r9, [r8, #32]
 801f53c:	f002 ffff 	bl	802253e <memcpy>
 801f540:	4630      	mov	r0, r6
 801f542:	4953      	ldr	r1, [pc, #332]	@ (801f690 <rmw_create_subscription+0x1e8>)
 801f544:	f7f6 ff1c 	bl	8016380 <get_message_typesupport_handle>
 801f548:	2800      	cmp	r0, #0
 801f54a:	f000 8090 	beq.w	801f66e <rmw_create_subscription+0x1c6>
 801f54e:	6842      	ldr	r2, [r0, #4]
 801f550:	f8c8 2018 	str.w	r2, [r8, #24]
 801f554:	2a00      	cmp	r2, #0
 801f556:	f000 808a 	beq.w	801f66e <rmw_create_subscription+0x1c6>
 801f55a:	4629      	mov	r1, r5
 801f55c:	463b      	mov	r3, r7
 801f55e:	4648      	mov	r0, r9
 801f560:	f7ff fb84 	bl	801ec6c <create_topic>
 801f564:	f8c8 001c 	str.w	r0, [r8, #28]
 801f568:	2800      	cmp	r0, #0
 801f56a:	f000 8085 	beq.w	801f678 <rmw_create_subscription+0x1d0>
 801f56e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f572:	2104      	movs	r1, #4
 801f574:	2506      	movs	r5, #6
 801f576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f57a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801f57e:	1c42      	adds	r2, r0, #1
 801f580:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801f584:	f7f7 ff4e 	bl	8017424 <uxr_object_id>
 801f588:	f8c8 0010 	str.w	r0, [r8, #16]
 801f58c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f590:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801f594:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f598:	9500      	str	r5, [sp, #0]
 801f59a:	6819      	ldr	r1, [r3, #0]
 801f59c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f5a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f5a4:	f7f7 fd28 	bl	8016ff8 <uxr_buffer_create_subscriber_bin>
 801f5a8:	4602      	mov	r2, r0
 801f5aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f5ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f5b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f5b6:	f7f6 fd55 	bl	8016064 <run_xrce_session>
 801f5ba:	2800      	cmp	r0, #0
 801f5bc:	d057      	beq.n	801f66e <rmw_create_subscription+0x1c6>
 801f5be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f5c2:	4629      	mov	r1, r5
 801f5c4:	ae08      	add	r6, sp, #32
 801f5c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f5ca:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801f5ce:	1c42      	adds	r2, r0, #1
 801f5d0:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801f5d4:	f7f7 ff26 	bl	8017424 <uxr_object_id>
 801f5d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f5dc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801f5e0:	4639      	mov	r1, r7
 801f5e2:	f8c8 0014 	str.w	r0, [r8, #20]
 801f5e6:	4630      	mov	r0, r6
 801f5e8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801f5ec:	9305      	str	r3, [sp, #20]
 801f5ee:	f7f6 fd55 	bl	801609c <convert_qos_profile>
 801f5f2:	9503      	str	r5, [sp, #12]
 801f5f4:	9b05      	ldr	r3, [sp, #20]
 801f5f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f5fa:	9001      	str	r0, [sp, #4]
 801f5fc:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801f600:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f604:	691b      	ldr	r3, [r3, #16]
 801f606:	9300      	str	r3, [sp, #0]
 801f608:	f8db 1000 	ldr.w	r1, [fp]
 801f60c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801f610:	f7f7 fd98 	bl	8017144 <uxr_buffer_create_datareader_bin>
 801f614:	4602      	mov	r2, r0
 801f616:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f61a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f61e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f622:	f7f6 fd1f 	bl	8016064 <run_xrce_session>
 801f626:	b310      	cbz	r0, 801f66e <rmw_create_subscription+0x1c6>
 801f628:	7a3b      	ldrb	r3, [r7, #8]
 801f62a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f62e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f632:	2b02      	cmp	r3, #2
 801f634:	920a      	str	r2, [sp, #40]	@ 0x28
 801f636:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f63a:	f04f 0200 	mov.w	r2, #0
 801f63e:	bf08      	it	eq
 801f640:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801f644:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f648:	bf18      	it	ne
 801f64a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801f64e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f650:	9307      	str	r3, [sp, #28]
 801f652:	ab0a      	add	r3, sp, #40	@ 0x28
 801f654:	9300      	str	r3, [sp, #0]
 801f656:	9b07      	ldr	r3, [sp, #28]
 801f658:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801f65c:	6809      	ldr	r1, [r1, #0]
 801f65e:	f001 fb07 	bl	8020c70 <uxr_buffer_request_data>
 801f662:	e000      	b.n	801f666 <rmw_create_subscription+0x1be>
 801f664:	2400      	movs	r4, #0
 801f666:	4620      	mov	r0, r4
 801f668:	b00d      	add	sp, #52	@ 0x34
 801f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f66e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801f672:	b108      	cbz	r0, 801f678 <rmw_create_subscription+0x1d0>
 801f674:	f7f6 fbe8 	bl	8015e48 <rmw_uxrce_fini_topic_memory>
 801f678:	4620      	mov	r0, r4
 801f67a:	2400      	movs	r4, #0
 801f67c:	f7f6 fba2 	bl	8015dc4 <rmw_uxrce_fini_subscription_memory>
 801f680:	4620      	mov	r0, r4
 801f682:	b00d      	add	sp, #52	@ 0x34
 801f684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f688:	24069244 	.word	0x24069244
 801f68c:	080249fc 	.word	0x080249fc
 801f690:	080236c8 	.word	0x080236c8

0801f694 <rmw_subscription_get_actual_qos>:
 801f694:	b178      	cbz	r0, 801f6b6 <rmw_subscription_get_actual_qos+0x22>
 801f696:	b510      	push	{r4, lr}
 801f698:	fab1 f481 	clz	r4, r1
 801f69c:	0964      	lsrs	r4, r4, #5
 801f69e:	b141      	cbz	r1, 801f6b2 <rmw_subscription_get_actual_qos+0x1e>
 801f6a0:	6843      	ldr	r3, [r0, #4]
 801f6a2:	2250      	movs	r2, #80	@ 0x50
 801f6a4:	4608      	mov	r0, r1
 801f6a6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801f6aa:	f002 ff48 	bl	802253e <memcpy>
 801f6ae:	4620      	mov	r0, r4
 801f6b0:	bd10      	pop	{r4, pc}
 801f6b2:	200b      	movs	r0, #11
 801f6b4:	bd10      	pop	{r4, pc}
 801f6b6:	200b      	movs	r0, #11
 801f6b8:	4770      	bx	lr
 801f6ba:	bf00      	nop

0801f6bc <rmw_destroy_subscription>:
 801f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6c0:	b128      	cbz	r0, 801f6ce <rmw_destroy_subscription+0x12>
 801f6c2:	4604      	mov	r4, r0
 801f6c4:	6800      	ldr	r0, [r0, #0]
 801f6c6:	460d      	mov	r5, r1
 801f6c8:	f7f6 fdde 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801f6cc:	b918      	cbnz	r0, 801f6d6 <rmw_destroy_subscription+0x1a>
 801f6ce:	2401      	movs	r4, #1
 801f6d0:	4620      	mov	r0, r4
 801f6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6d6:	6863      	ldr	r3, [r4, #4]
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d0f8      	beq.n	801f6ce <rmw_destroy_subscription+0x12>
 801f6dc:	fab5 f485 	clz	r4, r5
 801f6e0:	0964      	lsrs	r4, r4, #5
 801f6e2:	2d00      	cmp	r5, #0
 801f6e4:	d0f3      	beq.n	801f6ce <rmw_destroy_subscription+0x12>
 801f6e6:	6828      	ldr	r0, [r5, #0]
 801f6e8:	f7f6 fdce 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 801f6ec:	2800      	cmp	r0, #0
 801f6ee:	d0ee      	beq.n	801f6ce <rmw_destroy_subscription+0x12>
 801f6f0:	686e      	ldr	r6, [r5, #4]
 801f6f2:	2e00      	cmp	r6, #0
 801f6f4:	d0eb      	beq.n	801f6ce <rmw_destroy_subscription+0x12>
 801f6f6:	6a37      	ldr	r7, [r6, #32]
 801f6f8:	6972      	ldr	r2, [r6, #20]
 801f6fa:	6938      	ldr	r0, [r7, #16]
 801f6fc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f700:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f704:	6819      	ldr	r1, [r3, #0]
 801f706:	f001 faed 	bl	8020ce4 <uxr_buffer_cancel_data>
 801f70a:	4602      	mov	r2, r0
 801f70c:	6938      	ldr	r0, [r7, #16]
 801f70e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f712:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f716:	f7f6 fca5 	bl	8016064 <run_xrce_session>
 801f71a:	69f0      	ldr	r0, [r6, #28]
 801f71c:	f7ff faf6 	bl	801ed0c <destroy_topic>
 801f720:	6a33      	ldr	r3, [r6, #32]
 801f722:	6972      	ldr	r2, [r6, #20]
 801f724:	6918      	ldr	r0, [r3, #16]
 801f726:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f72a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f72e:	6819      	ldr	r1, [r3, #0]
 801f730:	f7f7 fb7e 	bl	8016e30 <uxr_buffer_delete_entity>
 801f734:	6a33      	ldr	r3, [r6, #32]
 801f736:	4680      	mov	r8, r0
 801f738:	6932      	ldr	r2, [r6, #16]
 801f73a:	6918      	ldr	r0, [r3, #16]
 801f73c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f740:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f744:	6819      	ldr	r1, [r3, #0]
 801f746:	f7f7 fb73 	bl	8016e30 <uxr_buffer_delete_entity>
 801f74a:	4606      	mov	r6, r0
 801f74c:	6938      	ldr	r0, [r7, #16]
 801f74e:	4642      	mov	r2, r8
 801f750:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f754:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f758:	f7f6 fc84 	bl	8016064 <run_xrce_session>
 801f75c:	693f      	ldr	r7, [r7, #16]
 801f75e:	4632      	mov	r2, r6
 801f760:	4606      	mov	r6, r0
 801f762:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801f766:	4638      	mov	r0, r7
 801f768:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801f76c:	f7f6 fc7a 	bl	8016064 <run_xrce_session>
 801f770:	b126      	cbz	r6, 801f77c <rmw_destroy_subscription+0xc0>
 801f772:	b118      	cbz	r0, 801f77c <rmw_destroy_subscription+0xc0>
 801f774:	4628      	mov	r0, r5
 801f776:	f7f6 fb25 	bl	8015dc4 <rmw_uxrce_fini_subscription_memory>
 801f77a:	e7a9      	b.n	801f6d0 <rmw_destroy_subscription+0x14>
 801f77c:	2402      	movs	r4, #2
 801f77e:	e7f9      	b.n	801f774 <rmw_destroy_subscription+0xb8>

0801f780 <rmw_take_with_info>:
 801f780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f782:	4604      	mov	r4, r0
 801f784:	6800      	ldr	r0, [r0, #0]
 801f786:	b089      	sub	sp, #36	@ 0x24
 801f788:	460f      	mov	r7, r1
 801f78a:	4615      	mov	r5, r2
 801f78c:	b128      	cbz	r0, 801f79a <rmw_take_with_info+0x1a>
 801f78e:	4b24      	ldr	r3, [pc, #144]	@ (801f820 <rmw_take_with_info+0xa0>)
 801f790:	6819      	ldr	r1, [r3, #0]
 801f792:	f7e0 fda5 	bl	80002e0 <strcmp>
 801f796:	2800      	cmp	r0, #0
 801f798:	d13e      	bne.n	801f818 <rmw_take_with_info+0x98>
 801f79a:	b305      	cbz	r5, 801f7de <rmw_take_with_info+0x5e>
 801f79c:	2300      	movs	r3, #0
 801f79e:	6864      	ldr	r4, [r4, #4]
 801f7a0:	702b      	strb	r3, [r5, #0]
 801f7a2:	f7f6 fbe1 	bl	8015f68 <rmw_uxrce_clean_expired_static_input_buffer>
 801f7a6:	4620      	mov	r0, r4
 801f7a8:	f7f6 fbb4 	bl	8015f14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f7ac:	4606      	mov	r6, r0
 801f7ae:	b1f0      	cbz	r0, 801f7ee <rmw_take_with_info+0x6e>
 801f7b0:	6881      	ldr	r1, [r0, #8]
 801f7b2:	4668      	mov	r0, sp
 801f7b4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f7b8:	3110      	adds	r1, #16
 801f7ba:	f7f4 fcfd 	bl	80141b8 <ucdr_init_buffer>
 801f7be:	69a3      	ldr	r3, [r4, #24]
 801f7c0:	4639      	mov	r1, r7
 801f7c2:	4668      	mov	r0, sp
 801f7c4:	68db      	ldr	r3, [r3, #12]
 801f7c6:	4798      	blx	r3
 801f7c8:	4604      	mov	r4, r0
 801f7ca:	4631      	mov	r1, r6
 801f7cc:	4815      	ldr	r0, [pc, #84]	@ (801f824 <rmw_take_with_info+0xa4>)
 801f7ce:	f7fe ff89 	bl	801e6e4 <put_memory>
 801f7d2:	702c      	strb	r4, [r5, #0]
 801f7d4:	f084 0001 	eor.w	r0, r4, #1
 801f7d8:	b2c0      	uxtb	r0, r0
 801f7da:	b009      	add	sp, #36	@ 0x24
 801f7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7de:	6864      	ldr	r4, [r4, #4]
 801f7e0:	f7f6 fbc2 	bl	8015f68 <rmw_uxrce_clean_expired_static_input_buffer>
 801f7e4:	4620      	mov	r0, r4
 801f7e6:	f7f6 fb95 	bl	8015f14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f7ea:	4605      	mov	r5, r0
 801f7ec:	b910      	cbnz	r0, 801f7f4 <rmw_take_with_info+0x74>
 801f7ee:	2001      	movs	r0, #1
 801f7f0:	b009      	add	sp, #36	@ 0x24
 801f7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7f4:	68a9      	ldr	r1, [r5, #8]
 801f7f6:	4668      	mov	r0, sp
 801f7f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f7fc:	3110      	adds	r1, #16
 801f7fe:	f7f4 fcdb 	bl	80141b8 <ucdr_init_buffer>
 801f802:	69a3      	ldr	r3, [r4, #24]
 801f804:	4639      	mov	r1, r7
 801f806:	4668      	mov	r0, sp
 801f808:	68db      	ldr	r3, [r3, #12]
 801f80a:	4798      	blx	r3
 801f80c:	4629      	mov	r1, r5
 801f80e:	4604      	mov	r4, r0
 801f810:	4804      	ldr	r0, [pc, #16]	@ (801f824 <rmw_take_with_info+0xa4>)
 801f812:	f7fe ff67 	bl	801e6e4 <put_memory>
 801f816:	e7dd      	b.n	801f7d4 <rmw_take_with_info+0x54>
 801f818:	200c      	movs	r0, #12
 801f81a:	b009      	add	sp, #36	@ 0x24
 801f81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f81e:	bf00      	nop
 801f820:	08025978 	.word	0x08025978
 801f824:	24069234 	.word	0x24069234

0801f828 <rmw_wait>:
 801f828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f82c:	4698      	mov	r8, r3
 801f82e:	ea40 0301 	orr.w	r3, r0, r1
 801f832:	b089      	sub	sp, #36	@ 0x24
 801f834:	ea48 0303 	orr.w	r3, r8, r3
 801f838:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f83a:	4313      	orrs	r3, r2
 801f83c:	f000 8106 	beq.w	801fa4c <rmw_wait+0x224>
 801f840:	4605      	mov	r5, r0
 801f842:	460e      	mov	r6, r1
 801f844:	4691      	mov	r9, r2
 801f846:	b16c      	cbz	r4, 801f864 <rmw_wait+0x3c>
 801f848:	4ba6      	ldr	r3, [pc, #664]	@ (801fae4 <rmw_wait+0x2bc>)
 801f84a:	af04      	add	r7, sp, #16
 801f84c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f84e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801f852:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801f856:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f85a:	f7fe fd55 	bl	801e308 <rmw_time_equal>
 801f85e:	2800      	cmp	r0, #0
 801f860:	f000 810b 	beq.w	801fa7a <rmw_wait+0x252>
 801f864:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f868:	f7f6 fb7e 	bl	8015f68 <rmw_uxrce_clean_expired_static_input_buffer>
 801f86c:	4b9e      	ldr	r3, [pc, #632]	@ (801fae8 <rmw_wait+0x2c0>)
 801f86e:	681c      	ldr	r4, [r3, #0]
 801f870:	b14c      	cbz	r4, 801f886 <rmw_wait+0x5e>
 801f872:	4623      	mov	r3, r4
 801f874:	2100      	movs	r1, #0
 801f876:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801f87a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f87e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801f882:	2b00      	cmp	r3, #0
 801f884:	d1f7      	bne.n	801f876 <rmw_wait+0x4e>
 801f886:	f1b9 0f00 	cmp.w	r9, #0
 801f88a:	d011      	beq.n	801f8b0 <rmw_wait+0x88>
 801f88c:	f8d9 1000 	ldr.w	r1, [r9]
 801f890:	b171      	cbz	r1, 801f8b0 <rmw_wait+0x88>
 801f892:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801f896:	2300      	movs	r3, #0
 801f898:	2001      	movs	r0, #1
 801f89a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f89e:	3301      	adds	r3, #1
 801f8a0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f8a2:	4299      	cmp	r1, r3
 801f8a4:	6912      	ldr	r2, [r2, #16]
 801f8a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8aa:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f8ae:	d1f4      	bne.n	801f89a <rmw_wait+0x72>
 801f8b0:	f1b8 0f00 	cmp.w	r8, #0
 801f8b4:	d011      	beq.n	801f8da <rmw_wait+0xb2>
 801f8b6:	f8d8 1000 	ldr.w	r1, [r8]
 801f8ba:	b171      	cbz	r1, 801f8da <rmw_wait+0xb2>
 801f8bc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f8c0:	2300      	movs	r3, #0
 801f8c2:	2001      	movs	r0, #1
 801f8c4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f8c8:	3301      	adds	r3, #1
 801f8ca:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f8cc:	4299      	cmp	r1, r3
 801f8ce:	6912      	ldr	r2, [r2, #16]
 801f8d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8d4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f8d8:	d1f4      	bne.n	801f8c4 <rmw_wait+0x9c>
 801f8da:	b185      	cbz	r5, 801f8fe <rmw_wait+0xd6>
 801f8dc:	6829      	ldr	r1, [r5, #0]
 801f8de:	b171      	cbz	r1, 801f8fe <rmw_wait+0xd6>
 801f8e0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801f8e4:	2300      	movs	r3, #0
 801f8e6:	2001      	movs	r0, #1
 801f8e8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f8ec:	3301      	adds	r3, #1
 801f8ee:	6a12      	ldr	r2, [r2, #32]
 801f8f0:	4299      	cmp	r1, r3
 801f8f2:	6912      	ldr	r2, [r2, #16]
 801f8f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8f8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f8fc:	d1f4      	bne.n	801f8e8 <rmw_wait+0xc0>
 801f8fe:	b344      	cbz	r4, 801f952 <rmw_wait+0x12a>
 801f900:	4622      	mov	r2, r4
 801f902:	2300      	movs	r3, #0
 801f904:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801f908:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801f90c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801f910:	440b      	add	r3, r1
 801f912:	b2db      	uxtb	r3, r3
 801f914:	2a00      	cmp	r2, #0
 801f916:	d1f5      	bne.n	801f904 <rmw_wait+0xdc>
 801f918:	2b00      	cmp	r3, #0
 801f91a:	d05f      	beq.n	801f9dc <rmw_wait+0x1b4>
 801f91c:	1c7a      	adds	r2, r7, #1
 801f91e:	d00d      	beq.n	801f93c <rmw_wait+0x114>
 801f920:	ee07 7a90 	vmov	s15, r7
 801f924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f928:	ee07 3a90 	vmov	s15, r3
 801f92c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f934:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801f938:	ee17 7a90 	vmov	r7, s15
 801f93c:	68a0      	ldr	r0, [r4, #8]
 801f93e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801f942:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801f946:	2b00      	cmp	r3, #0
 801f948:	f040 808d 	bne.w	801fa66 <rmw_wait+0x23e>
 801f94c:	6864      	ldr	r4, [r4, #4]
 801f94e:	2c00      	cmp	r4, #0
 801f950:	d1f4      	bne.n	801f93c <rmw_wait+0x114>
 801f952:	f1b9 0f00 	cmp.w	r9, #0
 801f956:	f000 80a1 	beq.w	801fa9c <rmw_wait+0x274>
 801f95a:	f8d9 7000 	ldr.w	r7, [r9]
 801f95e:	2f00      	cmp	r7, #0
 801f960:	f000 80a4 	beq.w	801faac <rmw_wait+0x284>
 801f964:	2400      	movs	r4, #0
 801f966:	4627      	mov	r7, r4
 801f968:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f96c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f970:	f7f6 fad0 	bl	8015f14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f974:	2800      	cmp	r0, #0
 801f976:	d03b      	beq.n	801f9f0 <rmw_wait+0x1c8>
 801f978:	3401      	adds	r4, #1
 801f97a:	f8d9 3000 	ldr.w	r3, [r9]
 801f97e:	2701      	movs	r7, #1
 801f980:	42a3      	cmp	r3, r4
 801f982:	d8f1      	bhi.n	801f968 <rmw_wait+0x140>
 801f984:	2701      	movs	r7, #1
 801f986:	f1b8 0f00 	cmp.w	r8, #0
 801f98a:	d010      	beq.n	801f9ae <rmw_wait+0x186>
 801f98c:	f8d8 3000 	ldr.w	r3, [r8]
 801f990:	b16b      	cbz	r3, 801f9ae <rmw_wait+0x186>
 801f992:	2400      	movs	r4, #0
 801f994:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f998:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f99c:	f7f6 faba 	bl	8015f14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f9a0:	b370      	cbz	r0, 801fa00 <rmw_wait+0x1d8>
 801f9a2:	3401      	adds	r4, #1
 801f9a4:	f8d8 3000 	ldr.w	r3, [r8]
 801f9a8:	2701      	movs	r7, #1
 801f9aa:	42a3      	cmp	r3, r4
 801f9ac:	d8f2      	bhi.n	801f994 <rmw_wait+0x16c>
 801f9ae:	2d00      	cmp	r5, #0
 801f9b0:	d035      	beq.n	801fa1e <rmw_wait+0x1f6>
 801f9b2:	682b      	ldr	r3, [r5, #0]
 801f9b4:	b39b      	cbz	r3, 801fa1e <rmw_wait+0x1f6>
 801f9b6:	2400      	movs	r4, #0
 801f9b8:	686b      	ldr	r3, [r5, #4]
 801f9ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f9be:	f7f6 faa9 	bl	8015f14 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f9c2:	b328      	cbz	r0, 801fa10 <rmw_wait+0x1e8>
 801f9c4:	3401      	adds	r4, #1
 801f9c6:	682b      	ldr	r3, [r5, #0]
 801f9c8:	2701      	movs	r7, #1
 801f9ca:	42a3      	cmp	r3, r4
 801f9cc:	d8f4      	bhi.n	801f9b8 <rmw_wait+0x190>
 801f9ce:	2e00      	cmp	r6, #0
 801f9d0:	d03c      	beq.n	801fa4c <rmw_wait+0x224>
 801f9d2:	6834      	ldr	r4, [r6, #0]
 801f9d4:	2c00      	cmp	r4, #0
 801f9d6:	d039      	beq.n	801fa4c <rmw_wait+0x224>
 801f9d8:	2701      	movs	r7, #1
 801f9da:	e023      	b.n	801fa24 <rmw_wait+0x1fc>
 801f9dc:	68a0      	ldr	r0, [r4, #8]
 801f9de:	2100      	movs	r1, #0
 801f9e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f9e4:	f7f8 faf2 	bl	8017fcc <uxr_run_session_timeout>
 801f9e8:	6864      	ldr	r4, [r4, #4]
 801f9ea:	2c00      	cmp	r4, #0
 801f9ec:	d1f6      	bne.n	801f9dc <rmw_wait+0x1b4>
 801f9ee:	e7b0      	b.n	801f952 <rmw_wait+0x12a>
 801f9f0:	e9d9 3200 	ldrd	r3, r2, [r9]
 801f9f4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f9f8:	3401      	adds	r4, #1
 801f9fa:	42a3      	cmp	r3, r4
 801f9fc:	d8b4      	bhi.n	801f968 <rmw_wait+0x140>
 801f9fe:	e7c2      	b.n	801f986 <rmw_wait+0x15e>
 801fa00:	e9d8 3200 	ldrd	r3, r2, [r8]
 801fa04:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801fa08:	3401      	adds	r4, #1
 801fa0a:	429c      	cmp	r4, r3
 801fa0c:	d3c2      	bcc.n	801f994 <rmw_wait+0x16c>
 801fa0e:	e7ce      	b.n	801f9ae <rmw_wait+0x186>
 801fa10:	e9d5 3200 	ldrd	r3, r2, [r5]
 801fa14:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801fa18:	3401      	adds	r4, #1
 801fa1a:	42a3      	cmp	r3, r4
 801fa1c:	d8cc      	bhi.n	801f9b8 <rmw_wait+0x190>
 801fa1e:	b1a6      	cbz	r6, 801fa4a <rmw_wait+0x222>
 801fa20:	6834      	ldr	r4, [r6, #0]
 801fa22:	b194      	cbz	r4, 801fa4a <rmw_wait+0x222>
 801fa24:	2300      	movs	r3, #0
 801fa26:	461d      	mov	r5, r3
 801fa28:	e004      	b.n	801fa34 <rmw_wait+0x20c>
 801fa2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801fa2e:	3301      	adds	r3, #1
 801fa30:	42a3      	cmp	r3, r4
 801fa32:	d00a      	beq.n	801fa4a <rmw_wait+0x222>
 801fa34:	6870      	ldr	r0, [r6, #4]
 801fa36:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801fa3a:	7c0a      	ldrb	r2, [r1, #16]
 801fa3c:	2a00      	cmp	r2, #0
 801fa3e:	d0f4      	beq.n	801fa2a <rmw_wait+0x202>
 801fa40:	3301      	adds	r3, #1
 801fa42:	4617      	mov	r7, r2
 801fa44:	740d      	strb	r5, [r1, #16]
 801fa46:	42a3      	cmp	r3, r4
 801fa48:	d1f4      	bne.n	801fa34 <rmw_wait+0x20c>
 801fa4a:	b147      	cbz	r7, 801fa5e <rmw_wait+0x236>
 801fa4c:	2000      	movs	r0, #0
 801fa4e:	b009      	add	sp, #36	@ 0x24
 801fa50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa54:	b11e      	cbz	r6, 801fa5e <rmw_wait+0x236>
 801fa56:	6834      	ldr	r4, [r6, #0]
 801fa58:	462f      	mov	r7, r5
 801fa5a:	2c00      	cmp	r4, #0
 801fa5c:	d1e2      	bne.n	801fa24 <rmw_wait+0x1fc>
 801fa5e:	2002      	movs	r0, #2
 801fa60:	b009      	add	sp, #36	@ 0x24
 801fa62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa66:	4639      	mov	r1, r7
 801fa68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801fa6c:	f7f8 fac8 	bl	8018000 <uxr_run_session_until_data>
 801fa70:	6864      	ldr	r4, [r4, #4]
 801fa72:	2c00      	cmp	r4, #0
 801fa74:	f47f af62 	bne.w	801f93c <rmw_wait+0x114>
 801fa78:	e76b      	b.n	801f952 <rmw_wait+0x12a>
 801fa7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fa7e:	f7fe fc99 	bl	801e3b4 <rmw_time_total_nsec>
 801fa82:	2300      	movs	r3, #0
 801fa84:	4a19      	ldr	r2, [pc, #100]	@ (801faec <rmw_wait+0x2c4>)
 801fa86:	f7e0 fce3 	bl	8000450 <__aeabi_uldivmod>
 801fa8a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801fa8e:	4607      	mov	r7, r0
 801fa90:	f171 0300 	sbcs.w	r3, r1, #0
 801fa94:	bfa8      	it	ge
 801fa96:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801fa9a:	e6e5      	b.n	801f868 <rmw_wait+0x40>
 801fa9c:	f1b8 0f00 	cmp.w	r8, #0
 801faa0:	d00f      	beq.n	801fac2 <rmw_wait+0x29a>
 801faa2:	f8d8 3000 	ldr.w	r3, [r8]
 801faa6:	b193      	cbz	r3, 801face <rmw_wait+0x2a6>
 801faa8:	464f      	mov	r7, r9
 801faaa:	e772      	b.n	801f992 <rmw_wait+0x16a>
 801faac:	f1b8 0f00 	cmp.w	r8, #0
 801fab0:	d007      	beq.n	801fac2 <rmw_wait+0x29a>
 801fab2:	f8d8 3000 	ldr.w	r3, [r8]
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	f47f af6b 	bne.w	801f992 <rmw_wait+0x16a>
 801fabc:	b155      	cbz	r5, 801fad4 <rmw_wait+0x2ac>
 801fabe:	461f      	mov	r7, r3
 801fac0:	e777      	b.n	801f9b2 <rmw_wait+0x18a>
 801fac2:	2d00      	cmp	r5, #0
 801fac4:	d0c6      	beq.n	801fa54 <rmw_wait+0x22c>
 801fac6:	682b      	ldr	r3, [r5, #0]
 801fac8:	b143      	cbz	r3, 801fadc <rmw_wait+0x2b4>
 801faca:	4647      	mov	r7, r8
 801facc:	e773      	b.n	801f9b6 <rmw_wait+0x18e>
 801face:	b10d      	cbz	r5, 801fad4 <rmw_wait+0x2ac>
 801fad0:	464f      	mov	r7, r9
 801fad2:	e76e      	b.n	801f9b2 <rmw_wait+0x18a>
 801fad4:	462f      	mov	r7, r5
 801fad6:	2e00      	cmp	r6, #0
 801fad8:	d1a2      	bne.n	801fa20 <rmw_wait+0x1f8>
 801fada:	e7c0      	b.n	801fa5e <rmw_wait+0x236>
 801fadc:	4647      	mov	r7, r8
 801fade:	2e00      	cmp	r6, #0
 801fae0:	d19e      	bne.n	801fa20 <rmw_wait+0x1f8>
 801fae2:	e7bc      	b.n	801fa5e <rmw_wait+0x236>
 801fae4:	08023480 	.word	0x08023480
 801fae8:	24069224 	.word	0x24069224
 801faec:	000f4240 	.word	0x000f4240

0801faf0 <rmw_create_wait_set>:
 801faf0:	b508      	push	{r3, lr}
 801faf2:	4803      	ldr	r0, [pc, #12]	@ (801fb00 <rmw_create_wait_set+0x10>)
 801faf4:	f7fe fde6 	bl	801e6c4 <get_memory>
 801faf8:	b108      	cbz	r0, 801fafe <rmw_create_wait_set+0xe>
 801fafa:	6880      	ldr	r0, [r0, #8]
 801fafc:	3010      	adds	r0, #16
 801fafe:	bd08      	pop	{r3, pc}
 801fb00:	24069264 	.word	0x24069264

0801fb04 <rmw_destroy_wait_set>:
 801fb04:	b508      	push	{r3, lr}
 801fb06:	4b08      	ldr	r3, [pc, #32]	@ (801fb28 <rmw_destroy_wait_set+0x24>)
 801fb08:	6819      	ldr	r1, [r3, #0]
 801fb0a:	b911      	cbnz	r1, 801fb12 <rmw_destroy_wait_set+0xe>
 801fb0c:	e00a      	b.n	801fb24 <rmw_destroy_wait_set+0x20>
 801fb0e:	6849      	ldr	r1, [r1, #4]
 801fb10:	b141      	cbz	r1, 801fb24 <rmw_destroy_wait_set+0x20>
 801fb12:	688b      	ldr	r3, [r1, #8]
 801fb14:	3310      	adds	r3, #16
 801fb16:	4298      	cmp	r0, r3
 801fb18:	d1f9      	bne.n	801fb0e <rmw_destroy_wait_set+0xa>
 801fb1a:	4803      	ldr	r0, [pc, #12]	@ (801fb28 <rmw_destroy_wait_set+0x24>)
 801fb1c:	f7fe fde2 	bl	801e6e4 <put_memory>
 801fb20:	2000      	movs	r0, #0
 801fb22:	bd08      	pop	{r3, pc}
 801fb24:	2001      	movs	r0, #1
 801fb26:	bd08      	pop	{r3, pc}
 801fb28:	24069264 	.word	0x24069264

0801fb2c <rosgraph_msgs__msg__Clock__init>:
 801fb2c:	b538      	push	{r3, r4, r5, lr}
 801fb2e:	4604      	mov	r4, r0
 801fb30:	b128      	cbz	r0, 801fb3e <rosgraph_msgs__msg__Clock__init+0x12>
 801fb32:	f7f7 f91f 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 801fb36:	4605      	mov	r5, r0
 801fb38:	b120      	cbz	r0, 801fb44 <rosgraph_msgs__msg__Clock__init+0x18>
 801fb3a:	4628      	mov	r0, r5
 801fb3c:	bd38      	pop	{r3, r4, r5, pc}
 801fb3e:	4605      	mov	r5, r0
 801fb40:	4628      	mov	r0, r5
 801fb42:	bd38      	pop	{r3, r4, r5, pc}
 801fb44:	4620      	mov	r0, r4
 801fb46:	f7f7 f919 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 801fb4a:	4628      	mov	r0, r5
 801fb4c:	bd38      	pop	{r3, r4, r5, pc}
 801fb4e:	bf00      	nop

0801fb50 <rosgraph_msgs__msg__Clock__fini>:
 801fb50:	b108      	cbz	r0, 801fb56 <rosgraph_msgs__msg__Clock__fini+0x6>
 801fb52:	f7f7 b913 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 801fb56:	4770      	bx	lr

0801fb58 <std_msgs__msg__Header__init>:
 801fb58:	b570      	push	{r4, r5, r6, lr}
 801fb5a:	4605      	mov	r5, r0
 801fb5c:	b1a8      	cbz	r0, 801fb8a <std_msgs__msg__Header__init+0x32>
 801fb5e:	f7f7 f909 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 801fb62:	4604      	mov	r4, r0
 801fb64:	b140      	cbz	r0, 801fb78 <std_msgs__msg__Header__init+0x20>
 801fb66:	f105 0608 	add.w	r6, r5, #8
 801fb6a:	4630      	mov	r0, r6
 801fb6c:	f001 fe86 	bl	802187c <rosidl_runtime_c__String__init>
 801fb70:	4604      	mov	r4, r0
 801fb72:	b168      	cbz	r0, 801fb90 <std_msgs__msg__Header__init+0x38>
 801fb74:	4620      	mov	r0, r4
 801fb76:	bd70      	pop	{r4, r5, r6, pc}
 801fb78:	4628      	mov	r0, r5
 801fb7a:	f7f7 f8ff 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 801fb7e:	f105 0008 	add.w	r0, r5, #8
 801fb82:	f001 fe91 	bl	80218a8 <rosidl_runtime_c__String__fini>
 801fb86:	4620      	mov	r0, r4
 801fb88:	bd70      	pop	{r4, r5, r6, pc}
 801fb8a:	4604      	mov	r4, r0
 801fb8c:	4620      	mov	r0, r4
 801fb8e:	bd70      	pop	{r4, r5, r6, pc}
 801fb90:	4628      	mov	r0, r5
 801fb92:	f7f7 f8f3 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 801fb96:	4630      	mov	r0, r6
 801fb98:	f001 fe86 	bl	80218a8 <rosidl_runtime_c__String__fini>
 801fb9c:	e7ea      	b.n	801fb74 <std_msgs__msg__Header__init+0x1c>
 801fb9e:	bf00      	nop

0801fba0 <std_msgs__msg__Header__fini>:
 801fba0:	b148      	cbz	r0, 801fbb6 <std_msgs__msg__Header__fini+0x16>
 801fba2:	b510      	push	{r4, lr}
 801fba4:	4604      	mov	r4, r0
 801fba6:	f7f7 f8e9 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 801fbaa:	f104 0008 	add.w	r0, r4, #8
 801fbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbb2:	f001 be79 	b.w	80218a8 <rosidl_runtime_c__String__fini>
 801fbb6:	4770      	bx	lr

0801fbb8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801fbb8:	b570      	push	{r4, r5, r6, lr}
 801fbba:	4605      	mov	r5, r0
 801fbbc:	b1a8      	cbz	r0, 801fbea <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801fbbe:	f7ff ffcb 	bl	801fb58 <std_msgs__msg__Header__init>
 801fbc2:	4604      	mov	r4, r0
 801fbc4:	b140      	cbz	r0, 801fbd8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801fbc6:	f105 0618 	add.w	r6, r5, #24
 801fbca:	4630      	mov	r0, r6
 801fbcc:	f001 feb4 	bl	8021938 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801fbd0:	4604      	mov	r4, r0
 801fbd2:	b168      	cbz	r0, 801fbf0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801fbd4:	4620      	mov	r0, r4
 801fbd6:	bd70      	pop	{r4, r5, r6, pc}
 801fbd8:	4628      	mov	r0, r5
 801fbda:	f7ff ffe1 	bl	801fba0 <std_msgs__msg__Header__fini>
 801fbde:	f105 0018 	add.w	r0, r5, #24
 801fbe2:	f001 fead 	bl	8021940 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fbe6:	4620      	mov	r0, r4
 801fbe8:	bd70      	pop	{r4, r5, r6, pc}
 801fbea:	4604      	mov	r4, r0
 801fbec:	4620      	mov	r0, r4
 801fbee:	bd70      	pop	{r4, r5, r6, pc}
 801fbf0:	4628      	mov	r0, r5
 801fbf2:	f7ff ffd5 	bl	801fba0 <std_msgs__msg__Header__fini>
 801fbf6:	4630      	mov	r0, r6
 801fbf8:	f001 fea2 	bl	8021940 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fbfc:	e7ea      	b.n	801fbd4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801fbfe:	bf00      	nop

0801fc00 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801fc00:	b148      	cbz	r0, 801fc16 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801fc02:	b510      	push	{r4, lr}
 801fc04:	4604      	mov	r4, r0
 801fc06:	f7ff ffcb 	bl	801fba0 <std_msgs__msg__Header__fini>
 801fc0a:	f104 0018 	add.w	r0, r4, #24
 801fc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc12:	f001 be95 	b.w	8021940 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fc16:	4770      	bx	lr

0801fc18 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801fc18:	b570      	push	{r4, r5, r6, lr}
 801fc1a:	4605      	mov	r5, r0
 801fc1c:	b1a8      	cbz	r0, 801fc4a <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801fc1e:	f7ff ff9b 	bl	801fb58 <std_msgs__msg__Header__init>
 801fc22:	4604      	mov	r4, r0
 801fc24:	b140      	cbz	r0, 801fc38 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801fc26:	f105 0618 	add.w	r6, r5, #24
 801fc2a:	4630      	mov	r0, r6
 801fc2c:	f001 fe8a 	bl	8021944 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801fc30:	4604      	mov	r4, r0
 801fc32:	b168      	cbz	r0, 801fc50 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801fc34:	4620      	mov	r0, r4
 801fc36:	bd70      	pop	{r4, r5, r6, pc}
 801fc38:	4628      	mov	r0, r5
 801fc3a:	f7ff ffb1 	bl	801fba0 <std_msgs__msg__Header__fini>
 801fc3e:	f105 0018 	add.w	r0, r5, #24
 801fc42:	f001 fe83 	bl	802194c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc46:	4620      	mov	r0, r4
 801fc48:	bd70      	pop	{r4, r5, r6, pc}
 801fc4a:	4604      	mov	r4, r0
 801fc4c:	4620      	mov	r0, r4
 801fc4e:	bd70      	pop	{r4, r5, r6, pc}
 801fc50:	4628      	mov	r0, r5
 801fc52:	f7ff ffa5 	bl	801fba0 <std_msgs__msg__Header__fini>
 801fc56:	4630      	mov	r0, r6
 801fc58:	f001 fe78 	bl	802194c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc5c:	e7ea      	b.n	801fc34 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801fc5e:	bf00      	nop

0801fc60 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801fc60:	b148      	cbz	r0, 801fc76 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801fc62:	b510      	push	{r4, lr}
 801fc64:	4604      	mov	r4, r0
 801fc66:	f7ff ff9b 	bl	801fba0 <std_msgs__msg__Header__fini>
 801fc6a:	f104 0018 	add.w	r0, r4, #24
 801fc6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc72:	f001 be6b 	b.w	802194c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc76:	4770      	bx	lr

0801fc78 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801fc78:	b538      	push	{r3, r4, r5, lr}
 801fc7a:	4604      	mov	r4, r0
 801fc7c:	b128      	cbz	r0, 801fc8a <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801fc7e:	f7f7 f879 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 801fc82:	4605      	mov	r5, r0
 801fc84:	b120      	cbz	r0, 801fc90 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801fc86:	4628      	mov	r0, r5
 801fc88:	bd38      	pop	{r3, r4, r5, pc}
 801fc8a:	4605      	mov	r5, r0
 801fc8c:	4628      	mov	r0, r5
 801fc8e:	bd38      	pop	{r3, r4, r5, pc}
 801fc90:	4620      	mov	r0, r4
 801fc92:	f7f7 f873 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 801fc96:	4628      	mov	r0, r5
 801fc98:	bd38      	pop	{r3, r4, r5, pc}
 801fc9a:	bf00      	nop

0801fc9c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801fc9c:	b108      	cbz	r0, 801fca2 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801fc9e:	f7f7 b86d 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 801fca2:	4770      	bx	lr

0801fca4 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801fca4:	b538      	push	{r3, r4, r5, lr}
 801fca6:	4604      	mov	r4, r0
 801fca8:	b128      	cbz	r0, 801fcb6 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801fcaa:	f7f7 f863 	bl	8016d74 <builtin_interfaces__msg__Time__init>
 801fcae:	4605      	mov	r5, r0
 801fcb0:	b120      	cbz	r0, 801fcbc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801fcb2:	4628      	mov	r0, r5
 801fcb4:	bd38      	pop	{r3, r4, r5, pc}
 801fcb6:	4605      	mov	r5, r0
 801fcb8:	4628      	mov	r0, r5
 801fcba:	bd38      	pop	{r3, r4, r5, pc}
 801fcbc:	4620      	mov	r0, r4
 801fcbe:	f7f7 f85d 	bl	8016d7c <builtin_interfaces__msg__Time__fini>
 801fcc2:	4628      	mov	r0, r5
 801fcc4:	bd38      	pop	{r3, r4, r5, pc}
 801fcc6:	bf00      	nop

0801fcc8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801fcc8:	b108      	cbz	r0, 801fcce <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801fcca:	f7f7 b857 	b.w	8016d7c <builtin_interfaces__msg__Time__fini>
 801fcce:	4770      	bx	lr

0801fcd0 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801fcd0:	f001 be32 	b.w	8021938 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801fcd4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801fcd4:	f001 be34 	b.w	8021940 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801fcd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fcd8:	4b04      	ldr	r3, [pc, #16]	@ (801fcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fcda:	681a      	ldr	r2, [r3, #0]
 801fcdc:	b10a      	cbz	r2, 801fce2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801fcde:	4803      	ldr	r0, [pc, #12]	@ (801fcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fce0:	4770      	bx	lr
 801fce2:	4a03      	ldr	r2, [pc, #12]	@ (801fcf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801fce4:	4801      	ldr	r0, [pc, #4]	@ (801fcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fce6:	6812      	ldr	r2, [r2, #0]
 801fce8:	601a      	str	r2, [r3, #0]
 801fcea:	4770      	bx	lr
 801fcec:	24001194 	.word	0x24001194
 801fcf0:	24000d30 	.word	0x24000d30

0801fcf4 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801fcf4:	f001 be26 	b.w	8021944 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801fcf8 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801fcf8:	f001 be28 	b.w	802194c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801fcfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fcfc:	4b04      	ldr	r3, [pc, #16]	@ (801fd10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fcfe:	681a      	ldr	r2, [r3, #0]
 801fd00:	b10a      	cbz	r2, 801fd06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801fd02:	4803      	ldr	r0, [pc, #12]	@ (801fd10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fd04:	4770      	bx	lr
 801fd06:	4a03      	ldr	r2, [pc, #12]	@ (801fd14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801fd08:	4801      	ldr	r0, [pc, #4]	@ (801fd10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fd0a:	6812      	ldr	r2, [r2, #0]
 801fd0c:	601a      	str	r2, [r3, #0]
 801fd0e:	4770      	bx	lr
 801fd10:	24001254 	.word	0x24001254
 801fd14:	24000d30 	.word	0x24000d30

0801fd18 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fd18:	b1b8      	cbz	r0, 801fd4a <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801fd1a:	b538      	push	{r3, r4, r5, lr}
 801fd1c:	460d      	mov	r5, r1
 801fd1e:	2108      	movs	r1, #8
 801fd20:	4628      	mov	r0, r5
 801fd22:	f7f4 fa4d 	bl	80141c0 <ucdr_alignment>
 801fd26:	f105 0308 	add.w	r3, r5, #8
 801fd2a:	2108      	movs	r1, #8
 801fd2c:	f1c5 0508 	rsb	r5, r5, #8
 801fd30:	181c      	adds	r4, r3, r0
 801fd32:	4620      	mov	r0, r4
 801fd34:	f7f4 fa44 	bl	80141c0 <ucdr_alignment>
 801fd38:	2108      	movs	r1, #8
 801fd3a:	4408      	add	r0, r1
 801fd3c:	4404      	add	r4, r0
 801fd3e:	4620      	mov	r0, r4
 801fd40:	f7f4 fa3e 	bl	80141c0 <ucdr_alignment>
 801fd44:	4428      	add	r0, r5
 801fd46:	4420      	add	r0, r4
 801fd48:	bd38      	pop	{r3, r4, r5, pc}
 801fd4a:	4770      	bx	lr

0801fd4c <_ActuationCommand__cdr_deserialize>:
 801fd4c:	b538      	push	{r3, r4, r5, lr}
 801fd4e:	460c      	mov	r4, r1
 801fd50:	b171      	cbz	r1, 801fd70 <_ActuationCommand__cdr_deserialize+0x24>
 801fd52:	4605      	mov	r5, r0
 801fd54:	f7f4 f916 	bl	8013f84 <ucdr_deserialize_double>
 801fd58:	f104 0108 	add.w	r1, r4, #8
 801fd5c:	4628      	mov	r0, r5
 801fd5e:	f7f4 f911 	bl	8013f84 <ucdr_deserialize_double>
 801fd62:	f104 0110 	add.w	r1, r4, #16
 801fd66:	4628      	mov	r0, r5
 801fd68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd6c:	f7f4 b90a 	b.w	8013f84 <ucdr_deserialize_double>
 801fd70:	4608      	mov	r0, r1
 801fd72:	bd38      	pop	{r3, r4, r5, pc}

0801fd74 <_ActuationCommand__cdr_serialize>:
 801fd74:	b198      	cbz	r0, 801fd9e <_ActuationCommand__cdr_serialize+0x2a>
 801fd76:	b538      	push	{r3, r4, r5, lr}
 801fd78:	460d      	mov	r5, r1
 801fd7a:	4604      	mov	r4, r0
 801fd7c:	ed90 0b00 	vldr	d0, [r0]
 801fd80:	4608      	mov	r0, r1
 801fd82:	f7f4 f82f 	bl	8013de4 <ucdr_serialize_double>
 801fd86:	4628      	mov	r0, r5
 801fd88:	ed94 0b02 	vldr	d0, [r4, #8]
 801fd8c:	f7f4 f82a 	bl	8013de4 <ucdr_serialize_double>
 801fd90:	4628      	mov	r0, r5
 801fd92:	ed94 0b04 	vldr	d0, [r4, #16]
 801fd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd9a:	f7f4 b823 	b.w	8013de4 <ucdr_serialize_double>
 801fd9e:	4770      	bx	lr

0801fda0 <_ActuationCommand__get_serialized_size>:
 801fda0:	b190      	cbz	r0, 801fdc8 <_ActuationCommand__get_serialized_size+0x28>
 801fda2:	2108      	movs	r1, #8
 801fda4:	2000      	movs	r0, #0
 801fda6:	b510      	push	{r4, lr}
 801fda8:	f7f4 fa0a 	bl	80141c0 <ucdr_alignment>
 801fdac:	2108      	movs	r1, #8
 801fdae:	1844      	adds	r4, r0, r1
 801fdb0:	4620      	mov	r0, r4
 801fdb2:	f7f4 fa05 	bl	80141c0 <ucdr_alignment>
 801fdb6:	2108      	movs	r1, #8
 801fdb8:	4408      	add	r0, r1
 801fdba:	4404      	add	r4, r0
 801fdbc:	4620      	mov	r0, r4
 801fdbe:	f7f4 f9ff 	bl	80141c0 <ucdr_alignment>
 801fdc2:	3008      	adds	r0, #8
 801fdc4:	4420      	add	r0, r4
 801fdc6:	bd10      	pop	{r4, pc}
 801fdc8:	4770      	bx	lr
 801fdca:	bf00      	nop

0801fdcc <_ActuationCommand__max_serialized_size>:
 801fdcc:	b538      	push	{r3, r4, r5, lr}
 801fdce:	2108      	movs	r1, #8
 801fdd0:	2000      	movs	r0, #0
 801fdd2:	f7f4 f9f5 	bl	80141c0 <ucdr_alignment>
 801fdd6:	2108      	movs	r1, #8
 801fdd8:	1845      	adds	r5, r0, r1
 801fdda:	4628      	mov	r0, r5
 801fddc:	f7f4 f9f0 	bl	80141c0 <ucdr_alignment>
 801fde0:	2108      	movs	r1, #8
 801fde2:	1844      	adds	r4, r0, r1
 801fde4:	442c      	add	r4, r5
 801fde6:	4620      	mov	r0, r4
 801fde8:	f7f4 f9ea 	bl	80141c0 <ucdr_alignment>
 801fdec:	3008      	adds	r0, #8
 801fdee:	4420      	add	r0, r4
 801fdf0:	bd38      	pop	{r3, r4, r5, pc}
 801fdf2:	bf00      	nop

0801fdf4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fdf4:	b570      	push	{r4, r5, r6, lr}
 801fdf6:	460c      	mov	r4, r1
 801fdf8:	2301      	movs	r3, #1
 801fdfa:	2108      	movs	r1, #8
 801fdfc:	f104 0508 	add.w	r5, r4, #8
 801fe00:	7003      	strb	r3, [r0, #0]
 801fe02:	4620      	mov	r0, r4
 801fe04:	f1c4 0408 	rsb	r4, r4, #8
 801fe08:	f7f4 f9da 	bl	80141c0 <ucdr_alignment>
 801fe0c:	1946      	adds	r6, r0, r5
 801fe0e:	2108      	movs	r1, #8
 801fe10:	4630      	mov	r0, r6
 801fe12:	f7f4 f9d5 	bl	80141c0 <ucdr_alignment>
 801fe16:	2108      	movs	r1, #8
 801fe18:	1845      	adds	r5, r0, r1
 801fe1a:	4435      	add	r5, r6
 801fe1c:	4628      	mov	r0, r5
 801fe1e:	f7f4 f9cf 	bl	80141c0 <ucdr_alignment>
 801fe22:	4420      	add	r0, r4
 801fe24:	4428      	add	r0, r5
 801fe26:	bd70      	pop	{r4, r5, r6, pc}

0801fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fe28:	4800      	ldr	r0, [pc, #0]	@ (801fe2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801fe2a:	4770      	bx	lr
 801fe2c:	24001260 	.word	0x24001260

0801fe30 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801fe30:	b1b8      	cbz	r0, 801fe62 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801fe32:	b538      	push	{r3, r4, r5, lr}
 801fe34:	460d      	mov	r5, r1
 801fe36:	2108      	movs	r1, #8
 801fe38:	4628      	mov	r0, r5
 801fe3a:	f7f4 f9c1 	bl	80141c0 <ucdr_alignment>
 801fe3e:	f105 0308 	add.w	r3, r5, #8
 801fe42:	2108      	movs	r1, #8
 801fe44:	f1c5 0508 	rsb	r5, r5, #8
 801fe48:	181c      	adds	r4, r3, r0
 801fe4a:	4620      	mov	r0, r4
 801fe4c:	f7f4 f9b8 	bl	80141c0 <ucdr_alignment>
 801fe50:	2108      	movs	r1, #8
 801fe52:	4408      	add	r0, r1
 801fe54:	4404      	add	r4, r0
 801fe56:	4620      	mov	r0, r4
 801fe58:	f7f4 f9b2 	bl	80141c0 <ucdr_alignment>
 801fe5c:	4428      	add	r0, r5
 801fe5e:	4420      	add	r0, r4
 801fe60:	bd38      	pop	{r3, r4, r5, pc}
 801fe62:	4770      	bx	lr

0801fe64 <_ActuationStatus__cdr_deserialize>:
 801fe64:	b538      	push	{r3, r4, r5, lr}
 801fe66:	460c      	mov	r4, r1
 801fe68:	b171      	cbz	r1, 801fe88 <_ActuationStatus__cdr_deserialize+0x24>
 801fe6a:	4605      	mov	r5, r0
 801fe6c:	f7f4 f88a 	bl	8013f84 <ucdr_deserialize_double>
 801fe70:	f104 0108 	add.w	r1, r4, #8
 801fe74:	4628      	mov	r0, r5
 801fe76:	f7f4 f885 	bl	8013f84 <ucdr_deserialize_double>
 801fe7a:	f104 0110 	add.w	r1, r4, #16
 801fe7e:	4628      	mov	r0, r5
 801fe80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe84:	f7f4 b87e 	b.w	8013f84 <ucdr_deserialize_double>
 801fe88:	4608      	mov	r0, r1
 801fe8a:	bd38      	pop	{r3, r4, r5, pc}

0801fe8c <_ActuationStatus__cdr_serialize>:
 801fe8c:	b198      	cbz	r0, 801feb6 <_ActuationStatus__cdr_serialize+0x2a>
 801fe8e:	b538      	push	{r3, r4, r5, lr}
 801fe90:	460d      	mov	r5, r1
 801fe92:	4604      	mov	r4, r0
 801fe94:	ed90 0b00 	vldr	d0, [r0]
 801fe98:	4608      	mov	r0, r1
 801fe9a:	f7f3 ffa3 	bl	8013de4 <ucdr_serialize_double>
 801fe9e:	4628      	mov	r0, r5
 801fea0:	ed94 0b02 	vldr	d0, [r4, #8]
 801fea4:	f7f3 ff9e 	bl	8013de4 <ucdr_serialize_double>
 801fea8:	4628      	mov	r0, r5
 801feaa:	ed94 0b04 	vldr	d0, [r4, #16]
 801feae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801feb2:	f7f3 bf97 	b.w	8013de4 <ucdr_serialize_double>
 801feb6:	4770      	bx	lr

0801feb8 <_ActuationStatus__get_serialized_size>:
 801feb8:	b190      	cbz	r0, 801fee0 <_ActuationStatus__get_serialized_size+0x28>
 801feba:	2108      	movs	r1, #8
 801febc:	2000      	movs	r0, #0
 801febe:	b510      	push	{r4, lr}
 801fec0:	f7f4 f97e 	bl	80141c0 <ucdr_alignment>
 801fec4:	2108      	movs	r1, #8
 801fec6:	1844      	adds	r4, r0, r1
 801fec8:	4620      	mov	r0, r4
 801feca:	f7f4 f979 	bl	80141c0 <ucdr_alignment>
 801fece:	2108      	movs	r1, #8
 801fed0:	4408      	add	r0, r1
 801fed2:	4404      	add	r4, r0
 801fed4:	4620      	mov	r0, r4
 801fed6:	f7f4 f973 	bl	80141c0 <ucdr_alignment>
 801feda:	3008      	adds	r0, #8
 801fedc:	4420      	add	r0, r4
 801fede:	bd10      	pop	{r4, pc}
 801fee0:	4770      	bx	lr
 801fee2:	bf00      	nop

0801fee4 <_ActuationStatus__max_serialized_size>:
 801fee4:	b538      	push	{r3, r4, r5, lr}
 801fee6:	2108      	movs	r1, #8
 801fee8:	2000      	movs	r0, #0
 801feea:	f7f4 f969 	bl	80141c0 <ucdr_alignment>
 801feee:	2108      	movs	r1, #8
 801fef0:	1845      	adds	r5, r0, r1
 801fef2:	4628      	mov	r0, r5
 801fef4:	f7f4 f964 	bl	80141c0 <ucdr_alignment>
 801fef8:	2108      	movs	r1, #8
 801fefa:	1844      	adds	r4, r0, r1
 801fefc:	442c      	add	r4, r5
 801fefe:	4620      	mov	r0, r4
 801ff00:	f7f4 f95e 	bl	80141c0 <ucdr_alignment>
 801ff04:	3008      	adds	r0, #8
 801ff06:	4420      	add	r0, r4
 801ff08:	bd38      	pop	{r3, r4, r5, pc}
 801ff0a:	bf00      	nop

0801ff0c <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801ff0c:	b570      	push	{r4, r5, r6, lr}
 801ff0e:	460c      	mov	r4, r1
 801ff10:	2301      	movs	r3, #1
 801ff12:	2108      	movs	r1, #8
 801ff14:	f104 0508 	add.w	r5, r4, #8
 801ff18:	7003      	strb	r3, [r0, #0]
 801ff1a:	4620      	mov	r0, r4
 801ff1c:	f1c4 0408 	rsb	r4, r4, #8
 801ff20:	f7f4 f94e 	bl	80141c0 <ucdr_alignment>
 801ff24:	1946      	adds	r6, r0, r5
 801ff26:	2108      	movs	r1, #8
 801ff28:	4630      	mov	r0, r6
 801ff2a:	f7f4 f949 	bl	80141c0 <ucdr_alignment>
 801ff2e:	2108      	movs	r1, #8
 801ff30:	1845      	adds	r5, r0, r1
 801ff32:	4435      	add	r5, r6
 801ff34:	4628      	mov	r0, r5
 801ff36:	f7f4 f943 	bl	80141c0 <ucdr_alignment>
 801ff3a:	4420      	add	r0, r4
 801ff3c:	4428      	add	r0, r5
 801ff3e:	bd70      	pop	{r4, r5, r6, pc}

0801ff40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801ff40:	4800      	ldr	r0, [pc, #0]	@ (801ff44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801ff42:	4770      	bx	lr
 801ff44:	24001288 	.word	0x24001288

0801ff48 <ucdr_serialize_endian_array_char>:
 801ff48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff4c:	4619      	mov	r1, r3
 801ff4e:	461f      	mov	r7, r3
 801ff50:	4605      	mov	r5, r0
 801ff52:	4690      	mov	r8, r2
 801ff54:	f7f4 f8dc 	bl	8014110 <ucdr_check_buffer_available_for>
 801ff58:	b9e0      	cbnz	r0, 801ff94 <ucdr_serialize_endian_array_char+0x4c>
 801ff5a:	463e      	mov	r6, r7
 801ff5c:	e00b      	b.n	801ff76 <ucdr_serialize_endian_array_char+0x2e>
 801ff5e:	4441      	add	r1, r8
 801ff60:	68a8      	ldr	r0, [r5, #8]
 801ff62:	4622      	mov	r2, r4
 801ff64:	1b36      	subs	r6, r6, r4
 801ff66:	f002 faea 	bl	802253e <memcpy>
 801ff6a:	68ab      	ldr	r3, [r5, #8]
 801ff6c:	6928      	ldr	r0, [r5, #16]
 801ff6e:	4423      	add	r3, r4
 801ff70:	4420      	add	r0, r4
 801ff72:	60ab      	str	r3, [r5, #8]
 801ff74:	6128      	str	r0, [r5, #16]
 801ff76:	4631      	mov	r1, r6
 801ff78:	2201      	movs	r2, #1
 801ff7a:	4628      	mov	r0, r5
 801ff7c:	f7f4 f952 	bl	8014224 <ucdr_check_final_buffer_behavior_array>
 801ff80:	1bb9      	subs	r1, r7, r6
 801ff82:	4604      	mov	r4, r0
 801ff84:	2800      	cmp	r0, #0
 801ff86:	d1ea      	bne.n	801ff5e <ucdr_serialize_endian_array_char+0x16>
 801ff88:	2301      	movs	r3, #1
 801ff8a:	7da8      	ldrb	r0, [r5, #22]
 801ff8c:	756b      	strb	r3, [r5, #21]
 801ff8e:	4058      	eors	r0, r3
 801ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff94:	463a      	mov	r2, r7
 801ff96:	4641      	mov	r1, r8
 801ff98:	68a8      	ldr	r0, [r5, #8]
 801ff9a:	f002 fad0 	bl	802253e <memcpy>
 801ff9e:	68aa      	ldr	r2, [r5, #8]
 801ffa0:	692b      	ldr	r3, [r5, #16]
 801ffa2:	443a      	add	r2, r7
 801ffa4:	443b      	add	r3, r7
 801ffa6:	60aa      	str	r2, [r5, #8]
 801ffa8:	612b      	str	r3, [r5, #16]
 801ffaa:	e7ed      	b.n	801ff88 <ucdr_serialize_endian_array_char+0x40>

0801ffac <ucdr_deserialize_endian_array_char>:
 801ffac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffb0:	4619      	mov	r1, r3
 801ffb2:	461f      	mov	r7, r3
 801ffb4:	4605      	mov	r5, r0
 801ffb6:	4690      	mov	r8, r2
 801ffb8:	f7f4 f8aa 	bl	8014110 <ucdr_check_buffer_available_for>
 801ffbc:	b9e8      	cbnz	r0, 801fffa <ucdr_deserialize_endian_array_char+0x4e>
 801ffbe:	463e      	mov	r6, r7
 801ffc0:	e00c      	b.n	801ffdc <ucdr_deserialize_endian_array_char+0x30>
 801ffc2:	eb08 0003 	add.w	r0, r8, r3
 801ffc6:	68a9      	ldr	r1, [r5, #8]
 801ffc8:	4622      	mov	r2, r4
 801ffca:	1b36      	subs	r6, r6, r4
 801ffcc:	f002 fab7 	bl	802253e <memcpy>
 801ffd0:	68ab      	ldr	r3, [r5, #8]
 801ffd2:	6928      	ldr	r0, [r5, #16]
 801ffd4:	4423      	add	r3, r4
 801ffd6:	4420      	add	r0, r4
 801ffd8:	60ab      	str	r3, [r5, #8]
 801ffda:	6128      	str	r0, [r5, #16]
 801ffdc:	4631      	mov	r1, r6
 801ffde:	2201      	movs	r2, #1
 801ffe0:	4628      	mov	r0, r5
 801ffe2:	f7f4 f91f 	bl	8014224 <ucdr_check_final_buffer_behavior_array>
 801ffe6:	1bbb      	subs	r3, r7, r6
 801ffe8:	4604      	mov	r4, r0
 801ffea:	2800      	cmp	r0, #0
 801ffec:	d1e9      	bne.n	801ffc2 <ucdr_deserialize_endian_array_char+0x16>
 801ffee:	2301      	movs	r3, #1
 801fff0:	7da8      	ldrb	r0, [r5, #22]
 801fff2:	756b      	strb	r3, [r5, #21]
 801fff4:	4058      	eors	r0, r3
 801fff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fffa:	463a      	mov	r2, r7
 801fffc:	68a9      	ldr	r1, [r5, #8]
 801fffe:	4640      	mov	r0, r8
 8020000:	f002 fa9d 	bl	802253e <memcpy>
 8020004:	68aa      	ldr	r2, [r5, #8]
 8020006:	692b      	ldr	r3, [r5, #16]
 8020008:	443a      	add	r2, r7
 802000a:	443b      	add	r3, r7
 802000c:	60aa      	str	r2, [r5, #8]
 802000e:	612b      	str	r3, [r5, #16]
 8020010:	e7ed      	b.n	801ffee <ucdr_deserialize_endian_array_char+0x42>
 8020012:	bf00      	nop

08020014 <ucdr_serialize_array_uint8_t>:
 8020014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020018:	4688      	mov	r8, r1
 802001a:	4611      	mov	r1, r2
 802001c:	4617      	mov	r7, r2
 802001e:	4605      	mov	r5, r0
 8020020:	f7f4 f876 	bl	8014110 <ucdr_check_buffer_available_for>
 8020024:	b9e0      	cbnz	r0, 8020060 <ucdr_serialize_array_uint8_t+0x4c>
 8020026:	463e      	mov	r6, r7
 8020028:	e00b      	b.n	8020042 <ucdr_serialize_array_uint8_t+0x2e>
 802002a:	4441      	add	r1, r8
 802002c:	68a8      	ldr	r0, [r5, #8]
 802002e:	4622      	mov	r2, r4
 8020030:	1b36      	subs	r6, r6, r4
 8020032:	f002 fa84 	bl	802253e <memcpy>
 8020036:	68ab      	ldr	r3, [r5, #8]
 8020038:	6928      	ldr	r0, [r5, #16]
 802003a:	4423      	add	r3, r4
 802003c:	4420      	add	r0, r4
 802003e:	60ab      	str	r3, [r5, #8]
 8020040:	6128      	str	r0, [r5, #16]
 8020042:	4631      	mov	r1, r6
 8020044:	2201      	movs	r2, #1
 8020046:	4628      	mov	r0, r5
 8020048:	f7f4 f8ec 	bl	8014224 <ucdr_check_final_buffer_behavior_array>
 802004c:	1bb9      	subs	r1, r7, r6
 802004e:	4604      	mov	r4, r0
 8020050:	2800      	cmp	r0, #0
 8020052:	d1ea      	bne.n	802002a <ucdr_serialize_array_uint8_t+0x16>
 8020054:	2301      	movs	r3, #1
 8020056:	7da8      	ldrb	r0, [r5, #22]
 8020058:	756b      	strb	r3, [r5, #21]
 802005a:	4058      	eors	r0, r3
 802005c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020060:	463a      	mov	r2, r7
 8020062:	4641      	mov	r1, r8
 8020064:	68a8      	ldr	r0, [r5, #8]
 8020066:	f002 fa6a 	bl	802253e <memcpy>
 802006a:	68aa      	ldr	r2, [r5, #8]
 802006c:	692b      	ldr	r3, [r5, #16]
 802006e:	443a      	add	r2, r7
 8020070:	443b      	add	r3, r7
 8020072:	60aa      	str	r2, [r5, #8]
 8020074:	612b      	str	r3, [r5, #16]
 8020076:	e7ed      	b.n	8020054 <ucdr_serialize_array_uint8_t+0x40>

08020078 <ucdr_serialize_endian_array_uint8_t>:
 8020078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802007c:	4619      	mov	r1, r3
 802007e:	461f      	mov	r7, r3
 8020080:	4605      	mov	r5, r0
 8020082:	4690      	mov	r8, r2
 8020084:	f7f4 f844 	bl	8014110 <ucdr_check_buffer_available_for>
 8020088:	b9e0      	cbnz	r0, 80200c4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 802008a:	463e      	mov	r6, r7
 802008c:	e00b      	b.n	80200a6 <ucdr_serialize_endian_array_uint8_t+0x2e>
 802008e:	4441      	add	r1, r8
 8020090:	68a8      	ldr	r0, [r5, #8]
 8020092:	4622      	mov	r2, r4
 8020094:	1b36      	subs	r6, r6, r4
 8020096:	f002 fa52 	bl	802253e <memcpy>
 802009a:	68ab      	ldr	r3, [r5, #8]
 802009c:	6928      	ldr	r0, [r5, #16]
 802009e:	4423      	add	r3, r4
 80200a0:	4420      	add	r0, r4
 80200a2:	60ab      	str	r3, [r5, #8]
 80200a4:	6128      	str	r0, [r5, #16]
 80200a6:	4631      	mov	r1, r6
 80200a8:	2201      	movs	r2, #1
 80200aa:	4628      	mov	r0, r5
 80200ac:	f7f4 f8ba 	bl	8014224 <ucdr_check_final_buffer_behavior_array>
 80200b0:	1bb9      	subs	r1, r7, r6
 80200b2:	4604      	mov	r4, r0
 80200b4:	2800      	cmp	r0, #0
 80200b6:	d1ea      	bne.n	802008e <ucdr_serialize_endian_array_uint8_t+0x16>
 80200b8:	2301      	movs	r3, #1
 80200ba:	7da8      	ldrb	r0, [r5, #22]
 80200bc:	756b      	strb	r3, [r5, #21]
 80200be:	4058      	eors	r0, r3
 80200c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200c4:	463a      	mov	r2, r7
 80200c6:	4641      	mov	r1, r8
 80200c8:	68a8      	ldr	r0, [r5, #8]
 80200ca:	f002 fa38 	bl	802253e <memcpy>
 80200ce:	68aa      	ldr	r2, [r5, #8]
 80200d0:	692b      	ldr	r3, [r5, #16]
 80200d2:	443a      	add	r2, r7
 80200d4:	443b      	add	r3, r7
 80200d6:	60aa      	str	r2, [r5, #8]
 80200d8:	612b      	str	r3, [r5, #16]
 80200da:	e7ed      	b.n	80200b8 <ucdr_serialize_endian_array_uint8_t+0x40>

080200dc <ucdr_deserialize_array_uint8_t>:
 80200dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200e0:	4688      	mov	r8, r1
 80200e2:	4611      	mov	r1, r2
 80200e4:	4617      	mov	r7, r2
 80200e6:	4605      	mov	r5, r0
 80200e8:	f7f4 f812 	bl	8014110 <ucdr_check_buffer_available_for>
 80200ec:	b9e8      	cbnz	r0, 802012a <ucdr_deserialize_array_uint8_t+0x4e>
 80200ee:	463e      	mov	r6, r7
 80200f0:	e00c      	b.n	802010c <ucdr_deserialize_array_uint8_t+0x30>
 80200f2:	eb08 0003 	add.w	r0, r8, r3
 80200f6:	68a9      	ldr	r1, [r5, #8]
 80200f8:	4622      	mov	r2, r4
 80200fa:	1b36      	subs	r6, r6, r4
 80200fc:	f002 fa1f 	bl	802253e <memcpy>
 8020100:	68ab      	ldr	r3, [r5, #8]
 8020102:	6928      	ldr	r0, [r5, #16]
 8020104:	4423      	add	r3, r4
 8020106:	4420      	add	r0, r4
 8020108:	60ab      	str	r3, [r5, #8]
 802010a:	6128      	str	r0, [r5, #16]
 802010c:	4631      	mov	r1, r6
 802010e:	2201      	movs	r2, #1
 8020110:	4628      	mov	r0, r5
 8020112:	f7f4 f887 	bl	8014224 <ucdr_check_final_buffer_behavior_array>
 8020116:	1bbb      	subs	r3, r7, r6
 8020118:	4604      	mov	r4, r0
 802011a:	2800      	cmp	r0, #0
 802011c:	d1e9      	bne.n	80200f2 <ucdr_deserialize_array_uint8_t+0x16>
 802011e:	2301      	movs	r3, #1
 8020120:	7da8      	ldrb	r0, [r5, #22]
 8020122:	756b      	strb	r3, [r5, #21]
 8020124:	4058      	eors	r0, r3
 8020126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802012a:	463a      	mov	r2, r7
 802012c:	68a9      	ldr	r1, [r5, #8]
 802012e:	4640      	mov	r0, r8
 8020130:	f002 fa05 	bl	802253e <memcpy>
 8020134:	68aa      	ldr	r2, [r5, #8]
 8020136:	692b      	ldr	r3, [r5, #16]
 8020138:	443a      	add	r2, r7
 802013a:	443b      	add	r3, r7
 802013c:	60aa      	str	r2, [r5, #8]
 802013e:	612b      	str	r3, [r5, #16]
 8020140:	e7ed      	b.n	802011e <ucdr_deserialize_array_uint8_t+0x42>
 8020142:	bf00      	nop

08020144 <ucdr_deserialize_endian_array_uint8_t>:
 8020144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020148:	4619      	mov	r1, r3
 802014a:	461f      	mov	r7, r3
 802014c:	4605      	mov	r5, r0
 802014e:	4690      	mov	r8, r2
 8020150:	f7f3 ffde 	bl	8014110 <ucdr_check_buffer_available_for>
 8020154:	b9e8      	cbnz	r0, 8020192 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8020156:	463e      	mov	r6, r7
 8020158:	e00c      	b.n	8020174 <ucdr_deserialize_endian_array_uint8_t+0x30>
 802015a:	eb08 0003 	add.w	r0, r8, r3
 802015e:	68a9      	ldr	r1, [r5, #8]
 8020160:	4622      	mov	r2, r4
 8020162:	1b36      	subs	r6, r6, r4
 8020164:	f002 f9eb 	bl	802253e <memcpy>
 8020168:	68ab      	ldr	r3, [r5, #8]
 802016a:	6928      	ldr	r0, [r5, #16]
 802016c:	4423      	add	r3, r4
 802016e:	4420      	add	r0, r4
 8020170:	60ab      	str	r3, [r5, #8]
 8020172:	6128      	str	r0, [r5, #16]
 8020174:	4631      	mov	r1, r6
 8020176:	2201      	movs	r2, #1
 8020178:	4628      	mov	r0, r5
 802017a:	f7f4 f853 	bl	8014224 <ucdr_check_final_buffer_behavior_array>
 802017e:	1bbb      	subs	r3, r7, r6
 8020180:	4604      	mov	r4, r0
 8020182:	2800      	cmp	r0, #0
 8020184:	d1e9      	bne.n	802015a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8020186:	2301      	movs	r3, #1
 8020188:	7da8      	ldrb	r0, [r5, #22]
 802018a:	756b      	strb	r3, [r5, #21]
 802018c:	4058      	eors	r0, r3
 802018e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020192:	463a      	mov	r2, r7
 8020194:	68a9      	ldr	r1, [r5, #8]
 8020196:	4640      	mov	r0, r8
 8020198:	f002 f9d1 	bl	802253e <memcpy>
 802019c:	68aa      	ldr	r2, [r5, #8]
 802019e:	692b      	ldr	r3, [r5, #16]
 80201a0:	443a      	add	r2, r7
 80201a2:	443b      	add	r3, r7
 80201a4:	60aa      	str	r2, [r5, #8]
 80201a6:	612b      	str	r3, [r5, #16]
 80201a8:	e7ed      	b.n	8020186 <ucdr_deserialize_endian_array_uint8_t+0x42>
 80201aa:	bf00      	nop

080201ac <ucdr_serialize_string>:
 80201ac:	b510      	push	{r4, lr}
 80201ae:	b082      	sub	sp, #8
 80201b0:	4604      	mov	r4, r0
 80201b2:	4608      	mov	r0, r1
 80201b4:	9101      	str	r1, [sp, #4]
 80201b6:	f7e0 f89d 	bl	80002f4 <strlen>
 80201ba:	4602      	mov	r2, r0
 80201bc:	9901      	ldr	r1, [sp, #4]
 80201be:	4620      	mov	r0, r4
 80201c0:	3201      	adds	r2, #1
 80201c2:	b002      	add	sp, #8
 80201c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80201c8:	f7f6 bdda 	b.w	8016d80 <ucdr_serialize_sequence_char>

080201cc <ucdr_deserialize_string>:
 80201cc:	b500      	push	{lr}
 80201ce:	b083      	sub	sp, #12
 80201d0:	ab01      	add	r3, sp, #4
 80201d2:	f7f6 fde7 	bl	8016da4 <ucdr_deserialize_sequence_char>
 80201d6:	b003      	add	sp, #12
 80201d8:	f85d fb04 	ldr.w	pc, [sp], #4

080201dc <uxr_init_input_best_effort_stream>:
 80201dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80201e0:	8003      	strh	r3, [r0, #0]
 80201e2:	4770      	bx	lr

080201e4 <uxr_reset_input_best_effort_stream>:
 80201e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80201e8:	8003      	strh	r3, [r0, #0]
 80201ea:	4770      	bx	lr

080201ec <uxr_receive_best_effort_message>:
 80201ec:	b538      	push	{r3, r4, r5, lr}
 80201ee:	4604      	mov	r4, r0
 80201f0:	8800      	ldrh	r0, [r0, #0]
 80201f2:	460d      	mov	r5, r1
 80201f4:	f000 fe74 	bl	8020ee0 <uxr_seq_num_cmp>
 80201f8:	4603      	mov	r3, r0
 80201fa:	0fc0      	lsrs	r0, r0, #31
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	bfb8      	it	lt
 8020200:	8025      	strhlt	r5, [r4, #0]
 8020202:	bd38      	pop	{r3, r4, r5, pc}

08020204 <on_full_input_buffer>:
 8020204:	b570      	push	{r4, r5, r6, lr}
 8020206:	460c      	mov	r4, r1
 8020208:	4605      	mov	r5, r0
 802020a:	8908      	ldrh	r0, [r1, #8]
 802020c:	682b      	ldr	r3, [r5, #0]
 802020e:	7d26      	ldrb	r6, [r4, #20]
 8020210:	e9d1 1200 	ldrd	r1, r2, [r1]
 8020214:	fbb2 f2f0 	udiv	r2, r2, r0
 8020218:	eba3 0c01 	sub.w	ip, r3, r1
 802021c:	fbbc fcf2 	udiv	ip, ip, r2
 8020220:	f10c 0c01 	add.w	ip, ip, #1
 8020224:	fa1f f38c 	uxth.w	r3, ip
 8020228:	fbb3 fcf0 	udiv	ip, r3, r0
 802022c:	fb00 331c 	mls	r3, r0, ip, r3
 8020230:	b29b      	uxth	r3, r3
 8020232:	fb02 f303 	mul.w	r3, r2, r3
 8020236:	1d18      	adds	r0, r3, #4
 8020238:	4408      	add	r0, r1
 802023a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802023e:	b116      	cbz	r6, 8020246 <on_full_input_buffer+0x42>
 8020240:	2600      	movs	r6, #0
 8020242:	f840 6c04 	str.w	r6, [r0, #-4]
 8020246:	2a03      	cmp	r2, #3
 8020248:	d801      	bhi.n	802024e <on_full_input_buffer+0x4a>
 802024a:	2001      	movs	r0, #1
 802024c:	bd70      	pop	{r4, r5, r6, pc}
 802024e:	3308      	adds	r3, #8
 8020250:	4628      	mov	r0, r5
 8020252:	3a04      	subs	r2, #4
 8020254:	4419      	add	r1, r3
 8020256:	692b      	ldr	r3, [r5, #16]
 8020258:	f7f3 ffa6 	bl	80141a8 <ucdr_init_buffer_origin>
 802025c:	4628      	mov	r0, r5
 802025e:	4622      	mov	r2, r4
 8020260:	4902      	ldr	r1, [pc, #8]	@ (802026c <on_full_input_buffer+0x68>)
 8020262:	f7f3 ff7d 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 8020266:	2000      	movs	r0, #0
 8020268:	bd70      	pop	{r4, r5, r6, pc}
 802026a:	bf00      	nop
 802026c:	08020205 	.word	0x08020205

08020270 <uxr_init_input_reliable_stream>:
 8020270:	b510      	push	{r4, lr}
 8020272:	e9c0 1200 	strd	r1, r2, [r0]
 8020276:	2400      	movs	r4, #0
 8020278:	9a02      	ldr	r2, [sp, #8]
 802027a:	8103      	strh	r3, [r0, #8]
 802027c:	6102      	str	r2, [r0, #16]
 802027e:	7504      	strb	r4, [r0, #20]
 8020280:	b1c3      	cbz	r3, 80202b4 <uxr_init_input_reliable_stream+0x44>
 8020282:	600c      	str	r4, [r1, #0]
 8020284:	8901      	ldrh	r1, [r0, #8]
 8020286:	2901      	cmp	r1, #1
 8020288:	d914      	bls.n	80202b4 <uxr_init_input_reliable_stream+0x44>
 802028a:	f04f 0c01 	mov.w	ip, #1
 802028e:	6843      	ldr	r3, [r0, #4]
 8020290:	f10c 0e01 	add.w	lr, ip, #1
 8020294:	fbbc f2f1 	udiv	r2, ip, r1
 8020298:	fbb3 f3f1 	udiv	r3, r3, r1
 802029c:	fb01 c212 	mls	r2, r1, r2, ip
 80202a0:	fa1f fc8e 	uxth.w	ip, lr
 80202a4:	b292      	uxth	r2, r2
 80202a6:	fb02 f303 	mul.w	r3, r2, r3
 80202aa:	6802      	ldr	r2, [r0, #0]
 80202ac:	50d4      	str	r4, [r2, r3]
 80202ae:	8901      	ldrh	r1, [r0, #8]
 80202b0:	4561      	cmp	r1, ip
 80202b2:	d8ec      	bhi.n	802028e <uxr_init_input_reliable_stream+0x1e>
 80202b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202b8:	60c3      	str	r3, [r0, #12]
 80202ba:	bd10      	pop	{r4, pc}

080202bc <uxr_reset_input_reliable_stream>:
 80202bc:	8901      	ldrh	r1, [r0, #8]
 80202be:	b1d9      	cbz	r1, 80202f8 <uxr_reset_input_reliable_stream+0x3c>
 80202c0:	b510      	push	{r4, lr}
 80202c2:	f04f 0e00 	mov.w	lr, #0
 80202c6:	46f4      	mov	ip, lr
 80202c8:	4674      	mov	r4, lr
 80202ca:	6843      	ldr	r3, [r0, #4]
 80202cc:	f10e 0e01 	add.w	lr, lr, #1
 80202d0:	fbbc f2f1 	udiv	r2, ip, r1
 80202d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80202d8:	fb01 c212 	mls	r2, r1, r2, ip
 80202dc:	fa1f fc8e 	uxth.w	ip, lr
 80202e0:	b292      	uxth	r2, r2
 80202e2:	fb02 f303 	mul.w	r3, r2, r3
 80202e6:	6802      	ldr	r2, [r0, #0]
 80202e8:	50d4      	str	r4, [r2, r3]
 80202ea:	8901      	ldrh	r1, [r0, #8]
 80202ec:	4561      	cmp	r1, ip
 80202ee:	d8ec      	bhi.n	80202ca <uxr_reset_input_reliable_stream+0xe>
 80202f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202f4:	60c3      	str	r3, [r0, #12]
 80202f6:	bd10      	pop	{r4, pc}
 80202f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202fc:	60c3      	str	r3, [r0, #12]
 80202fe:	4770      	bx	lr

08020300 <uxr_receive_reliable_message>:
 8020300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020304:	4604      	mov	r4, r0
 8020306:	460d      	mov	r5, r1
 8020308:	8901      	ldrh	r1, [r0, #8]
 802030a:	4617      	mov	r7, r2
 802030c:	8980      	ldrh	r0, [r0, #12]
 802030e:	4698      	mov	r8, r3
 8020310:	f000 fdde 	bl	8020ed0 <uxr_seq_num_add>
 8020314:	4629      	mov	r1, r5
 8020316:	4606      	mov	r6, r0
 8020318:	89a0      	ldrh	r0, [r4, #12]
 802031a:	f000 fde1 	bl	8020ee0 <uxr_seq_num_cmp>
 802031e:	2800      	cmp	r0, #0
 8020320:	db0a      	blt.n	8020338 <uxr_receive_reliable_message+0x38>
 8020322:	2600      	movs	r6, #0
 8020324:	4629      	mov	r1, r5
 8020326:	89e0      	ldrh	r0, [r4, #14]
 8020328:	f000 fdda 	bl	8020ee0 <uxr_seq_num_cmp>
 802032c:	2800      	cmp	r0, #0
 802032e:	da00      	bge.n	8020332 <uxr_receive_reliable_message+0x32>
 8020330:	81e5      	strh	r5, [r4, #14]
 8020332:	4630      	mov	r0, r6
 8020334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020338:	4630      	mov	r0, r6
 802033a:	4629      	mov	r1, r5
 802033c:	f000 fdd0 	bl	8020ee0 <uxr_seq_num_cmp>
 8020340:	2800      	cmp	r0, #0
 8020342:	dbee      	blt.n	8020322 <uxr_receive_reliable_message+0x22>
 8020344:	6923      	ldr	r3, [r4, #16]
 8020346:	4638      	mov	r0, r7
 8020348:	4798      	blx	r3
 802034a:	4681      	mov	r9, r0
 802034c:	2101      	movs	r1, #1
 802034e:	89a0      	ldrh	r0, [r4, #12]
 8020350:	f000 fdbe 	bl	8020ed0 <uxr_seq_num_add>
 8020354:	f1b9 0f00 	cmp.w	r9, #0
 8020358:	bf08      	it	eq
 802035a:	4285      	cmpeq	r5, r0
 802035c:	bf0c      	ite	eq
 802035e:	2601      	moveq	r6, #1
 8020360:	2600      	movne	r6, #0
 8020362:	d104      	bne.n	802036e <uxr_receive_reliable_message+0x6e>
 8020364:	2300      	movs	r3, #0
 8020366:	9a08      	ldr	r2, [sp, #32]
 8020368:	81a0      	strh	r0, [r4, #12]
 802036a:	7013      	strb	r3, [r2, #0]
 802036c:	e7da      	b.n	8020324 <uxr_receive_reliable_message+0x24>
 802036e:	8922      	ldrh	r2, [r4, #8]
 8020370:	6863      	ldr	r3, [r4, #4]
 8020372:	fbb5 f0f2 	udiv	r0, r5, r2
 8020376:	fbb3 f3f2 	udiv	r3, r3, r2
 802037a:	fb02 5010 	mls	r0, r2, r0, r5
 802037e:	b280      	uxth	r0, r0
 8020380:	fb03 f000 	mul.w	r0, r3, r0
 8020384:	6823      	ldr	r3, [r4, #0]
 8020386:	3004      	adds	r0, #4
 8020388:	4418      	add	r0, r3
 802038a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802038e:	2b00      	cmp	r3, #0
 8020390:	d1c7      	bne.n	8020322 <uxr_receive_reliable_message+0x22>
 8020392:	4639      	mov	r1, r7
 8020394:	4642      	mov	r2, r8
 8020396:	f002 f8d2 	bl	802253e <memcpy>
 802039a:	8921      	ldrh	r1, [r4, #8]
 802039c:	6863      	ldr	r3, [r4, #4]
 802039e:	fbb5 f2f1 	udiv	r2, r5, r1
 80203a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80203a6:	fb01 5212 	mls	r2, r1, r2, r5
 80203aa:	b292      	uxth	r2, r2
 80203ac:	fb02 f303 	mul.w	r3, r2, r3
 80203b0:	6822      	ldr	r2, [r4, #0]
 80203b2:	f842 8003 	str.w	r8, [r2, r3]
 80203b6:	2301      	movs	r3, #1
 80203b8:	9a08      	ldr	r2, [sp, #32]
 80203ba:	7013      	strb	r3, [r2, #0]
 80203bc:	f1b9 0f00 	cmp.w	r9, #0
 80203c0:	d0af      	beq.n	8020322 <uxr_receive_reliable_message+0x22>
 80203c2:	89a6      	ldrh	r6, [r4, #12]
 80203c4:	2101      	movs	r1, #1
 80203c6:	4630      	mov	r0, r6
 80203c8:	f000 fd82 	bl	8020ed0 <uxr_seq_num_add>
 80203cc:	8921      	ldrh	r1, [r4, #8]
 80203ce:	6863      	ldr	r3, [r4, #4]
 80203d0:	4606      	mov	r6, r0
 80203d2:	fbb0 f2f1 	udiv	r2, r0, r1
 80203d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80203da:	fb01 0212 	mls	r2, r1, r2, r0
 80203de:	6820      	ldr	r0, [r4, #0]
 80203e0:	b292      	uxth	r2, r2
 80203e2:	fb02 f303 	mul.w	r3, r2, r3
 80203e6:	3304      	adds	r3, #4
 80203e8:	4418      	add	r0, r3
 80203ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d097      	beq.n	8020322 <uxr_receive_reliable_message+0x22>
 80203f2:	6923      	ldr	r3, [r4, #16]
 80203f4:	4798      	blx	r3
 80203f6:	2802      	cmp	r0, #2
 80203f8:	d002      	beq.n	8020400 <uxr_receive_reliable_message+0x100>
 80203fa:	2801      	cmp	r0, #1
 80203fc:	d0e2      	beq.n	80203c4 <uxr_receive_reliable_message+0xc4>
 80203fe:	e790      	b.n	8020322 <uxr_receive_reliable_message+0x22>
 8020400:	2601      	movs	r6, #1
 8020402:	e78f      	b.n	8020324 <uxr_receive_reliable_message+0x24>

08020404 <uxr_next_input_reliable_buffer_available>:
 8020404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020408:	4604      	mov	r4, r0
 802040a:	460f      	mov	r7, r1
 802040c:	8980      	ldrh	r0, [r0, #12]
 802040e:	2101      	movs	r1, #1
 8020410:	4690      	mov	r8, r2
 8020412:	f000 fd5d 	bl	8020ed0 <uxr_seq_num_add>
 8020416:	8922      	ldrh	r2, [r4, #8]
 8020418:	6866      	ldr	r6, [r4, #4]
 802041a:	fbb0 f3f2 	udiv	r3, r0, r2
 802041e:	fbb6 f6f2 	udiv	r6, r6, r2
 8020422:	fb02 0313 	mls	r3, r2, r3, r0
 8020426:	b29b      	uxth	r3, r3
 8020428:	fb03 f606 	mul.w	r6, r3, r6
 802042c:	6823      	ldr	r3, [r4, #0]
 802042e:	3604      	adds	r6, #4
 8020430:	441e      	add	r6, r3
 8020432:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8020436:	f1b9 0f00 	cmp.w	r9, #0
 802043a:	d023      	beq.n	8020484 <uxr_next_input_reliable_buffer_available+0x80>
 802043c:	4605      	mov	r5, r0
 802043e:	6923      	ldr	r3, [r4, #16]
 8020440:	4630      	mov	r0, r6
 8020442:	4798      	blx	r3
 8020444:	4682      	mov	sl, r0
 8020446:	b300      	cbz	r0, 802048a <uxr_next_input_reliable_buffer_available+0x86>
 8020448:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 802044c:	2101      	movs	r1, #1
 802044e:	4650      	mov	r0, sl
 8020450:	f000 fd3e 	bl	8020ed0 <uxr_seq_num_add>
 8020454:	8921      	ldrh	r1, [r4, #8]
 8020456:	4682      	mov	sl, r0
 8020458:	6863      	ldr	r3, [r4, #4]
 802045a:	6820      	ldr	r0, [r4, #0]
 802045c:	fbba f2f1 	udiv	r2, sl, r1
 8020460:	fbb3 f3f1 	udiv	r3, r3, r1
 8020464:	fb01 a212 	mls	r2, r1, r2, sl
 8020468:	b292      	uxth	r2, r2
 802046a:	fb02 f303 	mul.w	r3, r2, r3
 802046e:	3304      	adds	r3, #4
 8020470:	4418      	add	r0, r3
 8020472:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8020476:	b12b      	cbz	r3, 8020484 <uxr_next_input_reliable_buffer_available+0x80>
 8020478:	6923      	ldr	r3, [r4, #16]
 802047a:	4798      	blx	r3
 802047c:	2802      	cmp	r0, #2
 802047e:	d01b      	beq.n	80204b8 <uxr_next_input_reliable_buffer_available+0xb4>
 8020480:	2801      	cmp	r0, #1
 8020482:	d0e3      	beq.n	802044c <uxr_next_input_reliable_buffer_available+0x48>
 8020484:	2000      	movs	r0, #0
 8020486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802048a:	464a      	mov	r2, r9
 802048c:	4631      	mov	r1, r6
 802048e:	4638      	mov	r0, r7
 8020490:	f7f3 fe92 	bl	80141b8 <ucdr_init_buffer>
 8020494:	8921      	ldrh	r1, [r4, #8]
 8020496:	6863      	ldr	r3, [r4, #4]
 8020498:	2001      	movs	r0, #1
 802049a:	fbb5 f2f1 	udiv	r2, r5, r1
 802049e:	fbb3 f3f1 	udiv	r3, r3, r1
 80204a2:	fb01 5212 	mls	r2, r1, r2, r5
 80204a6:	b292      	uxth	r2, r2
 80204a8:	fb02 f303 	mul.w	r3, r2, r3
 80204ac:	6822      	ldr	r2, [r4, #0]
 80204ae:	f842 a003 	str.w	sl, [r2, r3]
 80204b2:	81a5      	strh	r5, [r4, #12]
 80204b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204b8:	8920      	ldrh	r0, [r4, #8]
 80204ba:	eb06 0108 	add.w	r1, r6, r8
 80204be:	6863      	ldr	r3, [r4, #4]
 80204c0:	eba9 0208 	sub.w	r2, r9, r8
 80204c4:	fbb5 f6f0 	udiv	r6, r5, r0
 80204c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80204cc:	fb00 5516 	mls	r5, r0, r6, r5
 80204d0:	2000      	movs	r0, #0
 80204d2:	b2ad      	uxth	r5, r5
 80204d4:	fb03 f505 	mul.w	r5, r3, r5
 80204d8:	6823      	ldr	r3, [r4, #0]
 80204da:	5158      	str	r0, [r3, r5]
 80204dc:	4638      	mov	r0, r7
 80204de:	f7f3 fe6b 	bl	80141b8 <ucdr_init_buffer>
 80204e2:	4638      	mov	r0, r7
 80204e4:	4622      	mov	r2, r4
 80204e6:	4903      	ldr	r1, [pc, #12]	@ (80204f4 <uxr_next_input_reliable_buffer_available+0xf0>)
 80204e8:	f7f3 fe3a 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 80204ec:	2001      	movs	r0, #1
 80204ee:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80204f2:	e7c8      	b.n	8020486 <uxr_next_input_reliable_buffer_available+0x82>
 80204f4:	08020205 	.word	0x08020205

080204f8 <uxr_process_heartbeat>:
 80204f8:	b538      	push	{r3, r4, r5, lr}
 80204fa:	4611      	mov	r1, r2
 80204fc:	4604      	mov	r4, r0
 80204fe:	89c0      	ldrh	r0, [r0, #14]
 8020500:	4615      	mov	r5, r2
 8020502:	f000 fced 	bl	8020ee0 <uxr_seq_num_cmp>
 8020506:	2800      	cmp	r0, #0
 8020508:	bfb8      	it	lt
 802050a:	81e5      	strhlt	r5, [r4, #14]
 802050c:	bd38      	pop	{r3, r4, r5, pc}
 802050e:	bf00      	nop

08020510 <uxr_compute_acknack>:
 8020510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020514:	8903      	ldrh	r3, [r0, #8]
 8020516:	4604      	mov	r4, r0
 8020518:	460f      	mov	r7, r1
 802051a:	8985      	ldrh	r5, [r0, #12]
 802051c:	b1db      	cbz	r3, 8020556 <uxr_compute_acknack+0x46>
 802051e:	4628      	mov	r0, r5
 8020520:	2601      	movs	r6, #1
 8020522:	e004      	b.n	802052e <uxr_compute_acknack+0x1e>
 8020524:	4566      	cmp	r6, ip
 8020526:	f106 0601 	add.w	r6, r6, #1
 802052a:	d214      	bcs.n	8020556 <uxr_compute_acknack+0x46>
 802052c:	89a0      	ldrh	r0, [r4, #12]
 802052e:	b2b1      	uxth	r1, r6
 8020530:	f000 fcce 	bl	8020ed0 <uxr_seq_num_add>
 8020534:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020538:	fbb0 f2fc 	udiv	r2, r0, ip
 802053c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8020540:	fb0c 0212 	mls	r2, ip, r2, r0
 8020544:	fbb3 f3fc 	udiv	r3, r3, ip
 8020548:	b292      	uxth	r2, r2
 802054a:	fb02 f303 	mul.w	r3, r2, r3
 802054e:	58cb      	ldr	r3, [r1, r3]
 8020550:	2b00      	cmp	r3, #0
 8020552:	d1e7      	bne.n	8020524 <uxr_compute_acknack+0x14>
 8020554:	4605      	mov	r5, r0
 8020556:	803d      	strh	r5, [r7, #0]
 8020558:	2101      	movs	r1, #1
 802055a:	89e6      	ldrh	r6, [r4, #14]
 802055c:	4628      	mov	r0, r5
 802055e:	f000 fcbb 	bl	8020ed8 <uxr_seq_num_sub>
 8020562:	4601      	mov	r1, r0
 8020564:	4630      	mov	r0, r6
 8020566:	f000 fcb7 	bl	8020ed8 <uxr_seq_num_sub>
 802056a:	4606      	mov	r6, r0
 802056c:	b328      	cbz	r0, 80205ba <uxr_compute_acknack+0xaa>
 802056e:	f04f 0900 	mov.w	r9, #0
 8020572:	f04f 0801 	mov.w	r8, #1
 8020576:	464d      	mov	r5, r9
 8020578:	fa1f f189 	uxth.w	r1, r9
 802057c:	8838      	ldrh	r0, [r7, #0]
 802057e:	f000 fca7 	bl	8020ed0 <uxr_seq_num_add>
 8020582:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020586:	6861      	ldr	r1, [r4, #4]
 8020588:	fa08 fe09 	lsl.w	lr, r8, r9
 802058c:	6822      	ldr	r2, [r4, #0]
 802058e:	f109 0901 	add.w	r9, r9, #1
 8020592:	ea4e 0e05 	orr.w	lr, lr, r5
 8020596:	fbb0 f3fc 	udiv	r3, r0, ip
 802059a:	fbb1 f1fc 	udiv	r1, r1, ip
 802059e:	fb03 001c 	mls	r0, r3, ip, r0
 80205a2:	b283      	uxth	r3, r0
 80205a4:	fb01 f303 	mul.w	r3, r1, r3
 80205a8:	58d3      	ldr	r3, [r2, r3]
 80205aa:	b90b      	cbnz	r3, 80205b0 <uxr_compute_acknack+0xa0>
 80205ac:	fa1f f58e 	uxth.w	r5, lr
 80205b0:	454e      	cmp	r6, r9
 80205b2:	d1e1      	bne.n	8020578 <uxr_compute_acknack+0x68>
 80205b4:	4628      	mov	r0, r5
 80205b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205ba:	4605      	mov	r5, r0
 80205bc:	4628      	mov	r0, r5
 80205be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205c2:	bf00      	nop

080205c4 <uxr_init_output_best_effort_stream>:
 80205c4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80205c8:	6001      	str	r1, [r0, #0]
 80205ca:	7303      	strb	r3, [r0, #12]
 80205cc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80205d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80205d4:	4770      	bx	lr
 80205d6:	bf00      	nop

080205d8 <uxr_reset_output_best_effort_stream>:
 80205d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80205dc:	7b03      	ldrb	r3, [r0, #12]
 80205de:	81c2      	strh	r2, [r0, #14]
 80205e0:	6043      	str	r3, [r0, #4]
 80205e2:	4770      	bx	lr

080205e4 <uxr_prepare_best_effort_buffer_to_write>:
 80205e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80205e6:	4604      	mov	r4, r0
 80205e8:	b083      	sub	sp, #12
 80205ea:	6840      	ldr	r0, [r0, #4]
 80205ec:	460d      	mov	r5, r1
 80205ee:	4616      	mov	r6, r2
 80205f0:	f7f8 ff5e 	bl	80194b0 <uxr_submessage_padding>
 80205f4:	6863      	ldr	r3, [r4, #4]
 80205f6:	4418      	add	r0, r3
 80205f8:	68a3      	ldr	r3, [r4, #8]
 80205fa:	1942      	adds	r2, r0, r5
 80205fc:	4293      	cmp	r3, r2
 80205fe:	bf2c      	ite	cs
 8020600:	2701      	movcs	r7, #1
 8020602:	2700      	movcc	r7, #0
 8020604:	d202      	bcs.n	802060c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8020606:	4638      	mov	r0, r7
 8020608:	b003      	add	sp, #12
 802060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802060c:	9000      	str	r0, [sp, #0]
 802060e:	2300      	movs	r3, #0
 8020610:	4630      	mov	r0, r6
 8020612:	6821      	ldr	r1, [r4, #0]
 8020614:	f7f3 fdbe 	bl	8014194 <ucdr_init_buffer_origin_offset>
 8020618:	6861      	ldr	r1, [r4, #4]
 802061a:	4638      	mov	r0, r7
 802061c:	4429      	add	r1, r5
 802061e:	6061      	str	r1, [r4, #4]
 8020620:	b003      	add	sp, #12
 8020622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020624 <uxr_prepare_best_effort_buffer_to_send>:
 8020624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020628:	4604      	mov	r4, r0
 802062a:	461d      	mov	r5, r3
 802062c:	6840      	ldr	r0, [r0, #4]
 802062e:	7b23      	ldrb	r3, [r4, #12]
 8020630:	4298      	cmp	r0, r3
 8020632:	bf8c      	ite	hi
 8020634:	2601      	movhi	r6, #1
 8020636:	2600      	movls	r6, #0
 8020638:	d802      	bhi.n	8020640 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 802063a:	4630      	mov	r0, r6
 802063c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020640:	4688      	mov	r8, r1
 8020642:	89e0      	ldrh	r0, [r4, #14]
 8020644:	2101      	movs	r1, #1
 8020646:	4617      	mov	r7, r2
 8020648:	f000 fc42 	bl	8020ed0 <uxr_seq_num_add>
 802064c:	6823      	ldr	r3, [r4, #0]
 802064e:	81e0      	strh	r0, [r4, #14]
 8020650:	8028      	strh	r0, [r5, #0]
 8020652:	4630      	mov	r0, r6
 8020654:	f8c8 3000 	str.w	r3, [r8]
 8020658:	6863      	ldr	r3, [r4, #4]
 802065a:	603b      	str	r3, [r7, #0]
 802065c:	7b23      	ldrb	r3, [r4, #12]
 802065e:	6063      	str	r3, [r4, #4]
 8020660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020664 <on_full_output_buffer>:
 8020664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020666:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 802066a:	460c      	mov	r4, r1
 802066c:	6803      	ldr	r3, [r0, #0]
 802066e:	4605      	mov	r5, r0
 8020670:	7b26      	ldrb	r6, [r4, #12]
 8020672:	e9d1 1200 	ldrd	r1, r2, [r1]
 8020676:	fbb2 f2fc 	udiv	r2, r2, ip
 802067a:	eba3 0e01 	sub.w	lr, r3, r1
 802067e:	6903      	ldr	r3, [r0, #16]
 8020680:	fbbe fef2 	udiv	lr, lr, r2
 8020684:	f10e 0e01 	add.w	lr, lr, #1
 8020688:	fa1f fe8e 	uxth.w	lr, lr
 802068c:	fbbe f7fc 	udiv	r7, lr, ip
 8020690:	fb0c ec17 	mls	ip, ip, r7, lr
 8020694:	fa1f fc8c 	uxth.w	ip, ip
 8020698:	fb02 fc0c 	mul.w	ip, r2, ip
 802069c:	f851 200c 	ldr.w	r2, [r1, ip]
 80206a0:	44b4      	add	ip, r6
 80206a2:	1b92      	subs	r2, r2, r6
 80206a4:	f10c 0c08 	add.w	ip, ip, #8
 80206a8:	3a04      	subs	r2, #4
 80206aa:	4461      	add	r1, ip
 80206ac:	f7f3 fd7c 	bl	80141a8 <ucdr_init_buffer_origin>
 80206b0:	4628      	mov	r0, r5
 80206b2:	4622      	mov	r2, r4
 80206b4:	4902      	ldr	r1, [pc, #8]	@ (80206c0 <on_full_output_buffer+0x5c>)
 80206b6:	f7f3 fd53 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 80206ba:	2000      	movs	r0, #0
 80206bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206be:	bf00      	nop
 80206c0:	08020665 	.word	0x08020665

080206c4 <uxr_init_output_reliable_stream>:
 80206c4:	b530      	push	{r4, r5, lr}
 80206c6:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80206ca:	8103      	strh	r3, [r0, #8]
 80206cc:	7304      	strb	r4, [r0, #12]
 80206ce:	e9c0 1200 	strd	r1, r2, [r0]
 80206d2:	b1e3      	cbz	r3, 802070e <uxr_init_output_reliable_stream+0x4a>
 80206d4:	600c      	str	r4, [r1, #0]
 80206d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80206da:	f1bc 0f01 	cmp.w	ip, #1
 80206de:	d916      	bls.n	802070e <uxr_init_output_reliable_stream+0x4a>
 80206e0:	f04f 0e01 	mov.w	lr, #1
 80206e4:	6843      	ldr	r3, [r0, #4]
 80206e6:	f10e 0501 	add.w	r5, lr, #1
 80206ea:	7b04      	ldrb	r4, [r0, #12]
 80206ec:	6801      	ldr	r1, [r0, #0]
 80206ee:	fbbe f2fc 	udiv	r2, lr, ip
 80206f2:	fbb3 f3fc 	udiv	r3, r3, ip
 80206f6:	fb0c e212 	mls	r2, ip, r2, lr
 80206fa:	fa1f fe85 	uxth.w	lr, r5
 80206fe:	b292      	uxth	r2, r2
 8020700:	fb02 f303 	mul.w	r3, r2, r3
 8020704:	50cc      	str	r4, [r1, r3]
 8020706:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 802070a:	45f4      	cmp	ip, lr
 802070c:	d8ea      	bhi.n	80206e4 <uxr_init_output_reliable_stream+0x20>
 802070e:	4b07      	ldr	r3, [pc, #28]	@ (802072c <uxr_init_output_reliable_stream+0x68>)
 8020710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020714:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020718:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 802071c:	f8c0 300e 	str.w	r3, [r0, #14]
 8020720:	2300      	movs	r3, #0
 8020722:	8242      	strh	r2, [r0, #18]
 8020724:	8403      	strh	r3, [r0, #32]
 8020726:	e9c0 4506 	strd	r4, r5, [r0, #24]
 802072a:	bd30      	pop	{r4, r5, pc}
 802072c:	ffff0000 	.word	0xffff0000

08020730 <uxr_reset_output_reliable_stream>:
 8020730:	8901      	ldrh	r1, [r0, #8]
 8020732:	b510      	push	{r4, lr}
 8020734:	b1b1      	cbz	r1, 8020764 <uxr_reset_output_reliable_stream+0x34>
 8020736:	f04f 0e00 	mov.w	lr, #0
 802073a:	46f4      	mov	ip, lr
 802073c:	6843      	ldr	r3, [r0, #4]
 802073e:	f10e 0e01 	add.w	lr, lr, #1
 8020742:	7b04      	ldrb	r4, [r0, #12]
 8020744:	fbbc f2f1 	udiv	r2, ip, r1
 8020748:	fbb3 f3f1 	udiv	r3, r3, r1
 802074c:	fb01 c212 	mls	r2, r1, r2, ip
 8020750:	fa1f fc8e 	uxth.w	ip, lr
 8020754:	b292      	uxth	r2, r2
 8020756:	fb02 f303 	mul.w	r3, r2, r3
 802075a:	6802      	ldr	r2, [r0, #0]
 802075c:	50d4      	str	r4, [r2, r3]
 802075e:	8901      	ldrh	r1, [r0, #8]
 8020760:	4561      	cmp	r1, ip
 8020762:	d8eb      	bhi.n	802073c <uxr_reset_output_reliable_stream+0xc>
 8020764:	4b08      	ldr	r3, [pc, #32]	@ (8020788 <uxr_reset_output_reliable_stream+0x58>)
 8020766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802076a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8020780 <uxr_reset_output_reliable_stream+0x50>
 802076e:	f8c0 300e 	str.w	r3, [r0, #14]
 8020772:	2300      	movs	r3, #0
 8020774:	8242      	strh	r2, [r0, #18]
 8020776:	8403      	strh	r3, [r0, #32]
 8020778:	ed80 7b06 	vstr	d7, [r0, #24]
 802077c:	bd10      	pop	{r4, pc}
 802077e:	bf00      	nop
 8020780:	ffffffff 	.word	0xffffffff
 8020784:	7fffffff 	.word	0x7fffffff
 8020788:	ffff0000 	.word	0xffff0000

0802078c <uxr_prepare_reliable_buffer_to_write>:
 802078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020790:	4604      	mov	r4, r0
 8020792:	b091      	sub	sp, #68	@ 0x44
 8020794:	8900      	ldrh	r0, [r0, #8]
 8020796:	468b      	mov	fp, r1
 8020798:	89e6      	ldrh	r6, [r4, #14]
 802079a:	9204      	str	r2, [sp, #16]
 802079c:	6865      	ldr	r5, [r4, #4]
 802079e:	6823      	ldr	r3, [r4, #0]
 80207a0:	f894 900c 	ldrb.w	r9, [r4, #12]
 80207a4:	fbb6 f2f0 	udiv	r2, r6, r0
 80207a8:	fbb5 f5f0 	udiv	r5, r5, r0
 80207ac:	fb00 6212 	mls	r2, r0, r2, r6
 80207b0:	1f2f      	subs	r7, r5, #4
 80207b2:	b292      	uxth	r2, r2
 80207b4:	fb05 3202 	mla	r2, r5, r2, r3
 80207b8:	1d11      	adds	r1, r2, #4
 80207ba:	f8d2 8000 	ldr.w	r8, [r2]
 80207be:	9103      	str	r1, [sp, #12]
 80207c0:	2800      	cmp	r0, #0
 80207c2:	f000 814a 	beq.w	8020a5a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 80207c6:	f04f 0c00 	mov.w	ip, #0
 80207ca:	46e2      	mov	sl, ip
 80207cc:	4661      	mov	r1, ip
 80207ce:	f10c 0c01 	add.w	ip, ip, #1
 80207d2:	fbb1 f2f0 	udiv	r2, r1, r0
 80207d6:	fb00 1212 	mls	r2, r0, r2, r1
 80207da:	fa1f f18c 	uxth.w	r1, ip
 80207de:	b292      	uxth	r2, r2
 80207e0:	fb05 f202 	mul.w	r2, r5, r2
 80207e4:	589a      	ldr	r2, [r3, r2]
 80207e6:	454a      	cmp	r2, r9
 80207e8:	d103      	bne.n	80207f2 <uxr_prepare_reliable_buffer_to_write+0x66>
 80207ea:	f10a 0a01 	add.w	sl, sl, #1
 80207ee:	fa1f fa8a 	uxth.w	sl, sl
 80207f2:	4281      	cmp	r1, r0
 80207f4:	d3eb      	bcc.n	80207ce <uxr_prepare_reliable_buffer_to_write+0x42>
 80207f6:	4640      	mov	r0, r8
 80207f8:	2104      	movs	r1, #4
 80207fa:	f8cd a014 	str.w	sl, [sp, #20]
 80207fe:	f7f3 fcdf 	bl	80141c0 <ucdr_alignment>
 8020802:	4480      	add	r8, r0
 8020804:	eb08 020b 	add.w	r2, r8, fp
 8020808:	42ba      	cmp	r2, r7
 802080a:	f240 80ca 	bls.w	80209a2 <uxr_prepare_reliable_buffer_to_write+0x216>
 802080e:	7b22      	ldrb	r2, [r4, #12]
 8020810:	445a      	add	r2, fp
 8020812:	42ba      	cmp	r2, r7
 8020814:	f240 80b2 	bls.w	802097c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8020818:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 802081c:	b2bb      	uxth	r3, r7
 802081e:	eba2 0209 	sub.w	r2, r2, r9
 8020822:	441a      	add	r2, r3
 8020824:	b292      	uxth	r2, r2
 8020826:	fb0a f902 	mul.w	r9, sl, r2
 802082a:	9205      	str	r2, [sp, #20]
 802082c:	45d9      	cmp	r9, fp
 802082e:	9206      	str	r2, [sp, #24]
 8020830:	f0c0 80b3 	bcc.w	802099a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020834:	f108 0204 	add.w	r2, r8, #4
 8020838:	42ba      	cmp	r2, r7
 802083a:	f080 80da 	bcs.w	80209f2 <uxr_prepare_reliable_buffer_to_write+0x266>
 802083e:	f1a3 0904 	sub.w	r9, r3, #4
 8020842:	9b05      	ldr	r3, [sp, #20]
 8020844:	eba9 0908 	sub.w	r9, r9, r8
 8020848:	fa1f f989 	uxth.w	r9, r9
 802084c:	ebab 0b09 	sub.w	fp, fp, r9
 8020850:	fbbb f2f3 	udiv	r2, fp, r3
 8020854:	fb03 b312 	mls	r3, r3, r2, fp
 8020858:	2b00      	cmp	r3, #0
 802085a:	f040 80c4 	bne.w	80209e6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 802085e:	b293      	uxth	r3, r2
 8020860:	4553      	cmp	r3, sl
 8020862:	f200 809a 	bhi.w	802099a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020866:	2b00      	cmp	r3, #0
 8020868:	f000 80f9 	beq.w	8020a5e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 802086c:	f8cd 801c 	str.w	r8, [sp, #28]
 8020870:	f04f 0a00 	mov.w	sl, #0
 8020874:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020878:	f10d 0b20 	add.w	fp, sp, #32
 802087c:	9505      	str	r5, [sp, #20]
 802087e:	461d      	mov	r5, r3
 8020880:	e000      	b.n	8020884 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8020882:	46c1      	mov	r9, r8
 8020884:	8922      	ldrh	r2, [r4, #8]
 8020886:	4658      	mov	r0, fp
 8020888:	6863      	ldr	r3, [r4, #4]
 802088a:	f10a 0a01 	add.w	sl, sl, #1
 802088e:	fbb6 f1f2 	udiv	r1, r6, r2
 8020892:	fbb3 f3f2 	udiv	r3, r3, r2
 8020896:	fb02 6111 	mls	r1, r2, r1, r6
 802089a:	463a      	mov	r2, r7
 802089c:	b289      	uxth	r1, r1
 802089e:	fb03 f101 	mul.w	r1, r3, r1
 80208a2:	6823      	ldr	r3, [r4, #0]
 80208a4:	3104      	adds	r1, #4
 80208a6:	4419      	add	r1, r3
 80208a8:	2300      	movs	r3, #0
 80208aa:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80208ae:	f8cd c000 	str.w	ip, [sp]
 80208b2:	f7f3 fc6f 	bl	8014194 <ucdr_init_buffer_origin_offset>
 80208b6:	464a      	mov	r2, r9
 80208b8:	2300      	movs	r3, #0
 80208ba:	210d      	movs	r1, #13
 80208bc:	4658      	mov	r0, fp
 80208be:	f7f8 fdb7 	bl	8019430 <uxr_buffer_submessage_header>
 80208c2:	8921      	ldrh	r1, [r4, #8]
 80208c4:	6863      	ldr	r3, [r4, #4]
 80208c6:	4630      	mov	r0, r6
 80208c8:	fbb6 f2f1 	udiv	r2, r6, r1
 80208cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80208d0:	fb01 6212 	mls	r2, r1, r2, r6
 80208d4:	2101      	movs	r1, #1
 80208d6:	b292      	uxth	r2, r2
 80208d8:	fb02 f303 	mul.w	r3, r2, r3
 80208dc:	6822      	ldr	r2, [r4, #0]
 80208de:	50d7      	str	r7, [r2, r3]
 80208e0:	f000 faf6 	bl	8020ed0 <uxr_seq_num_add>
 80208e4:	4606      	mov	r6, r0
 80208e6:	fa1f f38a 	uxth.w	r3, sl
 80208ea:	429d      	cmp	r5, r3
 80208ec:	d8c9      	bhi.n	8020882 <uxr_prepare_reliable_buffer_to_write+0xf6>
 80208ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80208f2:	9d05      	ldr	r5, [sp, #20]
 80208f4:	8920      	ldrh	r0, [r4, #8]
 80208f6:	463a      	mov	r2, r7
 80208f8:	6863      	ldr	r3, [r4, #4]
 80208fa:	fbb6 f1f0 	udiv	r1, r6, r0
 80208fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8020902:	fb00 6111 	mls	r1, r0, r1, r6
 8020906:	4658      	mov	r0, fp
 8020908:	b289      	uxth	r1, r1
 802090a:	fb01 f303 	mul.w	r3, r1, r3
 802090e:	6821      	ldr	r1, [r4, #0]
 8020910:	3304      	adds	r3, #4
 8020912:	4419      	add	r1, r3
 8020914:	2300      	movs	r3, #0
 8020916:	f851 7c04 	ldr.w	r7, [r1, #-4]
 802091a:	9700      	str	r7, [sp, #0]
 802091c:	f7f3 fc3a 	bl	8014194 <ucdr_init_buffer_origin_offset>
 8020920:	9f06      	ldr	r7, [sp, #24]
 8020922:	4658      	mov	r0, fp
 8020924:	2302      	movs	r3, #2
 8020926:	b2ba      	uxth	r2, r7
 8020928:	210d      	movs	r1, #13
 802092a:	f7f8 fd81 	bl	8019430 <uxr_buffer_submessage_header>
 802092e:	f108 0104 	add.w	r1, r8, #4
 8020932:	9b03      	ldr	r3, [sp, #12]
 8020934:	f1a5 0208 	sub.w	r2, r5, #8
 8020938:	8925      	ldrh	r5, [r4, #8]
 802093a:	440b      	add	r3, r1
 802093c:	eba2 0208 	sub.w	r2, r2, r8
 8020940:	fbb6 f0f5 	udiv	r0, r6, r5
 8020944:	4619      	mov	r1, r3
 8020946:	6863      	ldr	r3, [r4, #4]
 8020948:	fb05 6010 	mls	r0, r5, r0, r6
 802094c:	fbb3 f3f5 	udiv	r3, r3, r5
 8020950:	b280      	uxth	r0, r0
 8020952:	6825      	ldr	r5, [r4, #0]
 8020954:	fb00 f303 	mul.w	r3, r0, r3
 8020958:	7b20      	ldrb	r0, [r4, #12]
 802095a:	3004      	adds	r0, #4
 802095c:	4438      	add	r0, r7
 802095e:	50e8      	str	r0, [r5, r3]
 8020960:	9d04      	ldr	r5, [sp, #16]
 8020962:	4628      	mov	r0, r5
 8020964:	f7f3 fc28 	bl	80141b8 <ucdr_init_buffer>
 8020968:	4628      	mov	r0, r5
 802096a:	4622      	mov	r2, r4
 802096c:	493d      	ldr	r1, [pc, #244]	@ (8020a64 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 802096e:	f7f3 fbf7 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 8020972:	2001      	movs	r0, #1
 8020974:	81e6      	strh	r6, [r4, #14]
 8020976:	b011      	add	sp, #68	@ 0x44
 8020978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802097c:	2101      	movs	r1, #1
 802097e:	89e0      	ldrh	r0, [r4, #14]
 8020980:	f000 faa6 	bl	8020ed0 <uxr_seq_num_add>
 8020984:	4605      	mov	r5, r0
 8020986:	8921      	ldrh	r1, [r4, #8]
 8020988:	8a60      	ldrh	r0, [r4, #18]
 802098a:	f000 faa1 	bl	8020ed0 <uxr_seq_num_add>
 802098e:	4601      	mov	r1, r0
 8020990:	4628      	mov	r0, r5
 8020992:	f000 faa5 	bl	8020ee0 <uxr_seq_num_cmp>
 8020996:	2800      	cmp	r0, #0
 8020998:	dd44      	ble.n	8020a24 <uxr_prepare_reliable_buffer_to_write+0x298>
 802099a:	2000      	movs	r0, #0
 802099c:	b011      	add	sp, #68	@ 0x44
 802099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209a2:	8921      	ldrh	r1, [r4, #8]
 80209a4:	8a60      	ldrh	r0, [r4, #18]
 80209a6:	9205      	str	r2, [sp, #20]
 80209a8:	f000 fa92 	bl	8020ed0 <uxr_seq_num_add>
 80209ac:	4601      	mov	r1, r0
 80209ae:	4630      	mov	r0, r6
 80209b0:	f000 fa96 	bl	8020ee0 <uxr_seq_num_cmp>
 80209b4:	2800      	cmp	r0, #0
 80209b6:	9a05      	ldr	r2, [sp, #20]
 80209b8:	dcef      	bgt.n	802099a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80209ba:	8925      	ldrh	r5, [r4, #8]
 80209bc:	e9d4 7300 	ldrd	r7, r3, [r4]
 80209c0:	fbb6 f4f5 	udiv	r4, r6, r5
 80209c4:	fbb3 f3f5 	udiv	r3, r3, r5
 80209c8:	fb05 6414 	mls	r4, r5, r4, r6
 80209cc:	b2a4      	uxth	r4, r4
 80209ce:	fb04 f303 	mul.w	r3, r4, r3
 80209d2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80209d6:	50fa      	str	r2, [r7, r3]
 80209d8:	2300      	movs	r3, #0
 80209da:	f8cd 8000 	str.w	r8, [sp]
 80209de:	f7f3 fbd9 	bl	8014194 <ucdr_init_buffer_origin_offset>
 80209e2:	2001      	movs	r0, #1
 80209e4:	e7da      	b.n	802099c <uxr_prepare_reliable_buffer_to_write+0x210>
 80209e6:	3201      	adds	r2, #1
 80209e8:	9306      	str	r3, [sp, #24]
 80209ea:	b293      	uxth	r3, r2
 80209ec:	4553      	cmp	r3, sl
 80209ee:	d8d4      	bhi.n	802099a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80209f0:	e739      	b.n	8020866 <uxr_prepare_reliable_buffer_to_write+0xda>
 80209f2:	4630      	mov	r0, r6
 80209f4:	2101      	movs	r1, #1
 80209f6:	9307      	str	r3, [sp, #28]
 80209f8:	f000 fa6a 	bl	8020ed0 <uxr_seq_num_add>
 80209fc:	4606      	mov	r6, r0
 80209fe:	8920      	ldrh	r0, [r4, #8]
 8020a00:	6862      	ldr	r2, [r4, #4]
 8020a02:	fbb6 f1f0 	udiv	r1, r6, r0
 8020a06:	fbb2 f2f0 	udiv	r2, r2, r0
 8020a0a:	fb00 6111 	mls	r1, r0, r1, r6
 8020a0e:	b289      	uxth	r1, r1
 8020a10:	fb01 f202 	mul.w	r2, r1, r2
 8020a14:	6821      	ldr	r1, [r4, #0]
 8020a16:	3204      	adds	r2, #4
 8020a18:	188b      	adds	r3, r1, r2
 8020a1a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8020a1e:	9303      	str	r3, [sp, #12]
 8020a20:	9b07      	ldr	r3, [sp, #28]
 8020a22:	e70c      	b.n	802083e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8020a24:	8921      	ldrh	r1, [r4, #8]
 8020a26:	6863      	ldr	r3, [r4, #4]
 8020a28:	9804      	ldr	r0, [sp, #16]
 8020a2a:	fbb5 f2f1 	udiv	r2, r5, r1
 8020a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020a32:	fb01 5212 	mls	r2, r1, r2, r5
 8020a36:	6821      	ldr	r1, [r4, #0]
 8020a38:	b292      	uxth	r2, r2
 8020a3a:	fb02 f303 	mul.w	r3, r2, r3
 8020a3e:	7b22      	ldrb	r2, [r4, #12]
 8020a40:	3304      	adds	r3, #4
 8020a42:	445a      	add	r2, fp
 8020a44:	4419      	add	r1, r3
 8020a46:	f841 2c04 	str.w	r2, [r1, #-4]
 8020a4a:	7b23      	ldrb	r3, [r4, #12]
 8020a4c:	9300      	str	r3, [sp, #0]
 8020a4e:	2300      	movs	r3, #0
 8020a50:	f7f3 fba0 	bl	8014194 <ucdr_init_buffer_origin_offset>
 8020a54:	2001      	movs	r0, #1
 8020a56:	81e5      	strh	r5, [r4, #14]
 8020a58:	e7a0      	b.n	802099c <uxr_prepare_reliable_buffer_to_write+0x210>
 8020a5a:	4682      	mov	sl, r0
 8020a5c:	e6cb      	b.n	80207f6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8020a5e:	f10d 0b20 	add.w	fp, sp, #32
 8020a62:	e747      	b.n	80208f4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8020a64:	08020665 	.word	0x08020665

08020a68 <uxr_prepare_next_reliable_buffer_to_send>:
 8020a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a6a:	4604      	mov	r4, r0
 8020a6c:	461d      	mov	r5, r3
 8020a6e:	460f      	mov	r7, r1
 8020a70:	8a00      	ldrh	r0, [r0, #16]
 8020a72:	2101      	movs	r1, #1
 8020a74:	4616      	mov	r6, r2
 8020a76:	f000 fa2b 	bl	8020ed0 <uxr_seq_num_add>
 8020a7a:	8028      	strh	r0, [r5, #0]
 8020a7c:	8922      	ldrh	r2, [r4, #8]
 8020a7e:	6863      	ldr	r3, [r4, #4]
 8020a80:	fbb0 f1f2 	udiv	r1, r0, r2
 8020a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8020a88:	fb02 0c11 	mls	ip, r2, r1, r0
 8020a8c:	89e1      	ldrh	r1, [r4, #14]
 8020a8e:	fa1f fc8c 	uxth.w	ip, ip
 8020a92:	fb0c fc03 	mul.w	ip, ip, r3
 8020a96:	6823      	ldr	r3, [r4, #0]
 8020a98:	f10c 0c04 	add.w	ip, ip, #4
 8020a9c:	4463      	add	r3, ip
 8020a9e:	603b      	str	r3, [r7, #0]
 8020aa0:	6823      	ldr	r3, [r4, #0]
 8020aa2:	449c      	add	ip, r3
 8020aa4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020aa8:	6033      	str	r3, [r6, #0]
 8020aaa:	f000 fa19 	bl	8020ee0 <uxr_seq_num_cmp>
 8020aae:	2800      	cmp	r0, #0
 8020ab0:	dd01      	ble.n	8020ab6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020ab2:	2000      	movs	r0, #0
 8020ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ab6:	7b23      	ldrb	r3, [r4, #12]
 8020ab8:	6832      	ldr	r2, [r6, #0]
 8020aba:	429a      	cmp	r2, r3
 8020abc:	d9f9      	bls.n	8020ab2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020abe:	8a61      	ldrh	r1, [r4, #18]
 8020ac0:	8a20      	ldrh	r0, [r4, #16]
 8020ac2:	f000 fa09 	bl	8020ed8 <uxr_seq_num_sub>
 8020ac6:	8923      	ldrh	r3, [r4, #8]
 8020ac8:	4283      	cmp	r3, r0
 8020aca:	d0f2      	beq.n	8020ab2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020acc:	8828      	ldrh	r0, [r5, #0]
 8020ace:	89e3      	ldrh	r3, [r4, #14]
 8020ad0:	8220      	strh	r0, [r4, #16]
 8020ad2:	4298      	cmp	r0, r3
 8020ad4:	d001      	beq.n	8020ada <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8020ad6:	2001      	movs	r0, #1
 8020ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ada:	2101      	movs	r1, #1
 8020adc:	f000 f9f8 	bl	8020ed0 <uxr_seq_num_add>
 8020ae0:	4603      	mov	r3, r0
 8020ae2:	2001      	movs	r0, #1
 8020ae4:	81e3      	strh	r3, [r4, #14]
 8020ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020ae8 <uxr_update_output_stream_heartbeat_timestamp>:
 8020ae8:	b570      	push	{r4, r5, r6, lr}
 8020aea:	8a01      	ldrh	r1, [r0, #16]
 8020aec:	4604      	mov	r4, r0
 8020aee:	8a40      	ldrh	r0, [r0, #18]
 8020af0:	4615      	mov	r5, r2
 8020af2:	461e      	mov	r6, r3
 8020af4:	f000 f9f4 	bl	8020ee0 <uxr_seq_num_cmp>
 8020af8:	2800      	cmp	r0, #0
 8020afa:	db07      	blt.n	8020b0c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8020afc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020b00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020b04:	2000      	movs	r0, #0
 8020b06:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8020b0a:	bd70      	pop	{r4, r5, r6, pc}
 8020b0c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8020b10:	b940      	cbnz	r0, 8020b24 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8020b12:	2301      	movs	r3, #1
 8020b14:	f884 3020 	strb.w	r3, [r4, #32]
 8020b18:	3564      	adds	r5, #100	@ 0x64
 8020b1a:	f146 0600 	adc.w	r6, r6, #0
 8020b1e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8020b22:	bd70      	pop	{r4, r5, r6, pc}
 8020b24:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8020b28:	4295      	cmp	r5, r2
 8020b2a:	eb76 0303 	sbcs.w	r3, r6, r3
 8020b2e:	db04      	blt.n	8020b3a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020b30:	1c43      	adds	r3, r0, #1
 8020b32:	2001      	movs	r0, #1
 8020b34:	f884 3020 	strb.w	r3, [r4, #32]
 8020b38:	e7ee      	b.n	8020b18 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020b3a:	2000      	movs	r0, #0
 8020b3c:	e7ec      	b.n	8020b18 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020b3e:	bf00      	nop

08020b40 <uxr_begin_output_nack_buffer_it>:
 8020b40:	8a40      	ldrh	r0, [r0, #18]
 8020b42:	4770      	bx	lr

08020b44 <uxr_next_reliable_nack_buffer_to_send>:
 8020b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b48:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8020b4c:	b197      	cbz	r7, 8020b74 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8020b4e:	4680      	mov	r8, r0
 8020b50:	460d      	mov	r5, r1
 8020b52:	4616      	mov	r6, r2
 8020b54:	461c      	mov	r4, r3
 8020b56:	8818      	ldrh	r0, [r3, #0]
 8020b58:	2101      	movs	r1, #1
 8020b5a:	f000 f9b9 	bl	8020ed0 <uxr_seq_num_add>
 8020b5e:	8020      	strh	r0, [r4, #0]
 8020b60:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8020b64:	f000 f9bc 	bl	8020ee0 <uxr_seq_num_cmp>
 8020b68:	2800      	cmp	r0, #0
 8020b6a:	dd06      	ble.n	8020b7a <uxr_next_reliable_nack_buffer_to_send+0x36>
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	461f      	mov	r7, r3
 8020b70:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8020b74:	4638      	mov	r0, r7
 8020b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b7a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8020b7e:	8820      	ldrh	r0, [r4, #0]
 8020b80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020b84:	fbb0 f3f2 	udiv	r3, r0, r2
 8020b88:	fbb1 fcf2 	udiv	ip, r1, r2
 8020b8c:	fb02 0313 	mls	r3, r2, r3, r0
 8020b90:	b29b      	uxth	r3, r3
 8020b92:	fb03 fc0c 	mul.w	ip, r3, ip
 8020b96:	f8d8 3000 	ldr.w	r3, [r8]
 8020b9a:	f10c 0c04 	add.w	ip, ip, #4
 8020b9e:	4463      	add	r3, ip
 8020ba0:	602b      	str	r3, [r5, #0]
 8020ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8020ba6:	4463      	add	r3, ip
 8020ba8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020bac:	6033      	str	r3, [r6, #0]
 8020bae:	f898 200c 	ldrb.w	r2, [r8, #12]
 8020bb2:	429a      	cmp	r2, r3
 8020bb4:	d0d0      	beq.n	8020b58 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8020bb6:	e7dd      	b.n	8020b74 <uxr_next_reliable_nack_buffer_to_send+0x30>

08020bb8 <uxr_process_acknack>:
 8020bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bba:	4604      	mov	r4, r0
 8020bbc:	460e      	mov	r6, r1
 8020bbe:	4610      	mov	r0, r2
 8020bc0:	2101      	movs	r1, #1
 8020bc2:	f000 f989 	bl	8020ed8 <uxr_seq_num_sub>
 8020bc6:	8a61      	ldrh	r1, [r4, #18]
 8020bc8:	f000 f986 	bl	8020ed8 <uxr_seq_num_sub>
 8020bcc:	b1c8      	cbz	r0, 8020c02 <uxr_process_acknack+0x4a>
 8020bce:	4605      	mov	r5, r0
 8020bd0:	2700      	movs	r7, #0
 8020bd2:	2101      	movs	r1, #1
 8020bd4:	8a60      	ldrh	r0, [r4, #18]
 8020bd6:	f000 f97b 	bl	8020ed0 <uxr_seq_num_add>
 8020bda:	8923      	ldrh	r3, [r4, #8]
 8020bdc:	6862      	ldr	r2, [r4, #4]
 8020bde:	3701      	adds	r7, #1
 8020be0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8020be4:	6821      	ldr	r1, [r4, #0]
 8020be6:	42bd      	cmp	r5, r7
 8020be8:	8260      	strh	r0, [r4, #18]
 8020bea:	fbb0 fef3 	udiv	lr, r0, r3
 8020bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8020bf2:	fb03 031e 	mls	r3, r3, lr, r0
 8020bf6:	b29b      	uxth	r3, r3
 8020bf8:	fb02 f303 	mul.w	r3, r2, r3
 8020bfc:	f841 c003 	str.w	ip, [r1, r3]
 8020c00:	d1e7      	bne.n	8020bd2 <uxr_process_acknack+0x1a>
 8020c02:	3e00      	subs	r6, #0
 8020c04:	f04f 0300 	mov.w	r3, #0
 8020c08:	bf18      	it	ne
 8020c0a:	2601      	movne	r6, #1
 8020c0c:	f884 3020 	strb.w	r3, [r4, #32]
 8020c10:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8020c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c16:	bf00      	nop

08020c18 <uxr_is_output_up_to_date>:
 8020c18:	8a01      	ldrh	r1, [r0, #16]
 8020c1a:	8a40      	ldrh	r0, [r0, #18]
 8020c1c:	b508      	push	{r3, lr}
 8020c1e:	f000 f95f 	bl	8020ee0 <uxr_seq_num_cmp>
 8020c22:	fab0 f080 	clz	r0, r0
 8020c26:	0940      	lsrs	r0, r0, #5
 8020c28:	bd08      	pop	{r3, pc}
 8020c2a:	bf00      	nop

08020c2c <get_available_free_slots>:
 8020c2c:	8901      	ldrh	r1, [r0, #8]
 8020c2e:	b1e1      	cbz	r1, 8020c6a <get_available_free_slots+0x3e>
 8020c30:	6843      	ldr	r3, [r0, #4]
 8020c32:	f04f 0c00 	mov.w	ip, #0
 8020c36:	b530      	push	{r4, r5, lr}
 8020c38:	fbb3 fef1 	udiv	lr, r3, r1
 8020c3c:	6805      	ldr	r5, [r0, #0]
 8020c3e:	4662      	mov	r2, ip
 8020c40:	7b04      	ldrb	r4, [r0, #12]
 8020c42:	4660      	mov	r0, ip
 8020c44:	f10c 0c01 	add.w	ip, ip, #1
 8020c48:	fbb2 f3f1 	udiv	r3, r2, r1
 8020c4c:	fb01 2313 	mls	r3, r1, r3, r2
 8020c50:	fa1f f28c 	uxth.w	r2, ip
 8020c54:	b29b      	uxth	r3, r3
 8020c56:	fb0e f303 	mul.w	r3, lr, r3
 8020c5a:	58eb      	ldr	r3, [r5, r3]
 8020c5c:	429c      	cmp	r4, r3
 8020c5e:	d101      	bne.n	8020c64 <get_available_free_slots+0x38>
 8020c60:	3001      	adds	r0, #1
 8020c62:	b280      	uxth	r0, r0
 8020c64:	428a      	cmp	r2, r1
 8020c66:	d3ed      	bcc.n	8020c44 <get_available_free_slots+0x18>
 8020c68:	bd30      	pop	{r4, r5, pc}
 8020c6a:	4608      	mov	r0, r1
 8020c6c:	4770      	bx	lr
 8020c6e:	bf00      	nop

08020c70 <uxr_buffer_request_data>:
 8020c70:	b530      	push	{r4, r5, lr}
 8020c72:	b095      	sub	sp, #84	@ 0x54
 8020c74:	4604      	mov	r4, r0
 8020c76:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020c78:	9303      	str	r3, [sp, #12]
 8020c7a:	2d00      	cmp	r5, #0
 8020c7c:	f88d 301c 	strb.w	r3, [sp, #28]
 8020c80:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8020c84:	f04f 0200 	mov.w	r2, #0
 8020c88:	bf14      	ite	ne
 8020c8a:	2101      	movne	r1, #1
 8020c8c:	4611      	moveq	r1, r2
 8020c8e:	f88d 201d 	strb.w	r2, [sp, #29]
 8020c92:	f88d 201e 	strb.w	r2, [sp, #30]
 8020c96:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8020c9a:	d021      	beq.n	8020ce0 <uxr_buffer_request_data+0x70>
 8020c9c:	686b      	ldr	r3, [r5, #4]
 8020c9e:	2210      	movs	r2, #16
 8020ca0:	6829      	ldr	r1, [r5, #0]
 8020ca2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020ca6:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8020caa:	2308      	movs	r3, #8
 8020cac:	2100      	movs	r1, #0
 8020cae:	4620      	mov	r0, r4
 8020cb0:	e9cd 3100 	strd	r3, r1, [sp]
 8020cb4:	ab0c      	add	r3, sp, #48	@ 0x30
 8020cb6:	9905      	ldr	r1, [sp, #20]
 8020cb8:	f7f7 fc92 	bl	80185e0 <uxr_prepare_stream_to_write_submessage>
 8020cbc:	b918      	cbnz	r0, 8020cc6 <uxr_buffer_request_data+0x56>
 8020cbe:	4604      	mov	r4, r0
 8020cc0:	4620      	mov	r0, r4
 8020cc2:	b015      	add	sp, #84	@ 0x54
 8020cc4:	bd30      	pop	{r4, r5, pc}
 8020cc6:	9904      	ldr	r1, [sp, #16]
 8020cc8:	aa06      	add	r2, sp, #24
 8020cca:	4620      	mov	r0, r4
 8020ccc:	f7f7 fdc4 	bl	8018858 <uxr_init_base_object_request>
 8020cd0:	4604      	mov	r4, r0
 8020cd2:	a906      	add	r1, sp, #24
 8020cd4:	a80c      	add	r0, sp, #48	@ 0x30
 8020cd6:	f7f9 fd89 	bl	801a7ec <uxr_serialize_READ_DATA_Payload>
 8020cda:	4620      	mov	r0, r4
 8020cdc:	b015      	add	sp, #84	@ 0x54
 8020cde:	bd30      	pop	{r4, r5, pc}
 8020ce0:	2208      	movs	r2, #8
 8020ce2:	e7e2      	b.n	8020caa <uxr_buffer_request_data+0x3a>

08020ce4 <uxr_buffer_cancel_data>:
 8020ce4:	b510      	push	{r4, lr}
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	b094      	sub	sp, #80	@ 0x50
 8020cea:	4604      	mov	r4, r0
 8020cec:	9205      	str	r2, [sp, #20]
 8020cee:	9301      	str	r3, [sp, #4]
 8020cf0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020cf4:	f88d 301e 	strb.w	r3, [sp, #30]
 8020cf8:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8020cfc:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020d00:	2308      	movs	r3, #8
 8020d02:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8020d06:	2201      	movs	r2, #1
 8020d08:	9300      	str	r3, [sp, #0]
 8020d0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8020d0c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8020d10:	2210      	movs	r2, #16
 8020d12:	f7f7 fc65 	bl	80185e0 <uxr_prepare_stream_to_write_submessage>
 8020d16:	b918      	cbnz	r0, 8020d20 <uxr_buffer_cancel_data+0x3c>
 8020d18:	4604      	mov	r4, r0
 8020d1a:	4620      	mov	r0, r4
 8020d1c:	b014      	add	sp, #80	@ 0x50
 8020d1e:	bd10      	pop	{r4, pc}
 8020d20:	9905      	ldr	r1, [sp, #20]
 8020d22:	aa06      	add	r2, sp, #24
 8020d24:	4620      	mov	r0, r4
 8020d26:	f7f7 fd97 	bl	8018858 <uxr_init_base_object_request>
 8020d2a:	4604      	mov	r4, r0
 8020d2c:	a906      	add	r1, sp, #24
 8020d2e:	a80c      	add	r0, sp, #48	@ 0x30
 8020d30:	f7f9 fd5c 	bl	801a7ec <uxr_serialize_READ_DATA_Payload>
 8020d34:	4620      	mov	r0, r4
 8020d36:	b014      	add	sp, #80	@ 0x50
 8020d38:	bd10      	pop	{r4, pc}
 8020d3a:	bf00      	nop

08020d3c <read_submessage_format>:
 8020d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d40:	b095      	sub	sp, #84	@ 0x54
 8020d42:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8020d46:	b113      	cbz	r3, 8020d4e <read_submessage_format+0x12>
 8020d48:	b015      	add	sp, #84	@ 0x54
 8020d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d4e:	4606      	mov	r6, r0
 8020d50:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020d52:	460c      	mov	r4, r1
 8020d54:	4615      	mov	r5, r2
 8020d56:	9004      	str	r0, [sp, #16]
 8020d58:	4699      	mov	r9, r3
 8020d5a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020d5c:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8020d60:	9005      	str	r0, [sp, #20]
 8020d62:	a80c      	add	r0, sp, #48	@ 0x30
 8020d64:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8020d68:	1a52      	subs	r2, r2, r1
 8020d6a:	f7f3 fa25 	bl	80141b8 <ucdr_init_buffer>
 8020d6e:	a80c      	add	r0, sp, #48	@ 0x30
 8020d70:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020d74:	f7f3 f9f4 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 8020d78:	69e2      	ldr	r2, [r4, #28]
 8020d7a:	b19a      	cbz	r2, 8020da4 <read_submessage_format+0x68>
 8020d7c:	f1b8 0f07 	cmp.w	r8, #7
 8020d80:	f882 9014 	strb.w	r9, [r2, #20]
 8020d84:	d040      	beq.n	8020e08 <read_submessage_format+0xcc>
 8020d86:	f1b8 0f08 	cmp.w	r8, #8
 8020d8a:	d02e      	beq.n	8020dea <read_submessage_format+0xae>
 8020d8c:	f1b8 0f06 	cmp.w	r8, #6
 8020d90:	d011      	beq.n	8020db6 <read_submessage_format+0x7a>
 8020d92:	2301      	movs	r3, #1
 8020d94:	7513      	strb	r3, [r2, #20]
 8020d96:	4629      	mov	r1, r5
 8020d98:	4620      	mov	r0, r4
 8020d9a:	f7f3 fa61 	bl	8014260 <ucdr_advance_buffer>
 8020d9e:	b015      	add	sp, #84	@ 0x54
 8020da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020da4:	f1b8 0f07 	cmp.w	r8, #7
 8020da8:	d02e      	beq.n	8020e08 <read_submessage_format+0xcc>
 8020daa:	f1b8 0f08 	cmp.w	r8, #8
 8020dae:	d01c      	beq.n	8020dea <read_submessage_format+0xae>
 8020db0:	f1b8 0f06 	cmp.w	r8, #6
 8020db4:	d1ef      	bne.n	8020d96 <read_submessage_format+0x5a>
 8020db6:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8020dba:	f1b8 0f00 	cmp.w	r8, #0
 8020dbe:	d011      	beq.n	8020de4 <read_submessage_format+0xa8>
 8020dc0:	ab0c      	add	r3, sp, #48	@ 0x30
 8020dc2:	9501      	str	r5, [sp, #4]
 8020dc4:	463a      	mov	r2, r7
 8020dc6:	4630      	mov	r0, r6
 8020dc8:	9300      	str	r3, [sp, #0]
 8020dca:	2306      	movs	r3, #6
 8020dcc:	f88d 3016 	strb.w	r3, [sp, #22]
 8020dd0:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8020dd4:	9302      	str	r3, [sp, #8]
 8020dd6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8020dda:	47c0      	blx	r8
 8020ddc:	2301      	movs	r3, #1
 8020dde:	69e2      	ldr	r2, [r4, #28]
 8020de0:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020de4:	2a00      	cmp	r2, #0
 8020de6:	d1d4      	bne.n	8020d92 <read_submessage_format+0x56>
 8020de8:	e7d5      	b.n	8020d96 <read_submessage_format+0x5a>
 8020dea:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	d0f8      	beq.n	8020de4 <read_submessage_format+0xa8>
 8020df2:	a80c      	add	r0, sp, #48	@ 0x30
 8020df4:	a906      	add	r1, sp, #24
 8020df6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020dfa:	f7f9 fdd1 	bl	801a9a0 <uxr_deserialize_SampleIdentity>
 8020dfe:	b9a0      	cbnz	r0, 8020e2a <read_submessage_format+0xee>
 8020e00:	69e2      	ldr	r2, [r4, #28]
 8020e02:	2a00      	cmp	r2, #0
 8020e04:	d1c5      	bne.n	8020d92 <read_submessage_format+0x56>
 8020e06:	e7c6      	b.n	8020d96 <read_submessage_format+0x5a>
 8020e08:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8020e0c:	b13b      	cbz	r3, 8020e1e <read_submessage_format+0xe2>
 8020e0e:	a906      	add	r1, sp, #24
 8020e10:	a80c      	add	r0, sp, #48	@ 0x30
 8020e12:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020e16:	f7f9 fa73 	bl	801a300 <uxr_deserialize_BaseObjectRequest>
 8020e1a:	bb60      	cbnz	r0, 8020e76 <read_submessage_format+0x13a>
 8020e1c:	69e2      	ldr	r2, [r4, #28]
 8020e1e:	68a3      	ldr	r3, [r4, #8]
 8020e20:	442b      	add	r3, r5
 8020e22:	60a3      	str	r3, [r4, #8]
 8020e24:	2a00      	cmp	r2, #0
 8020e26:	d1b4      	bne.n	8020d92 <read_submessage_format+0x56>
 8020e28:	e7b5      	b.n	8020d96 <read_submessage_format+0x5a>
 8020e2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e2c:	a80c      	add	r0, sp, #48	@ 0x30
 8020e2e:	eba8 0803 	sub.w	r8, r8, r3
 8020e32:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020e36:	44a8      	add	r8, r5
 8020e38:	1a52      	subs	r2, r2, r1
 8020e3a:	f7f3 f9bd 	bl	80141b8 <ucdr_init_buffer>
 8020e3e:	a80c      	add	r0, sp, #48	@ 0x30
 8020e40:	fa1f f888 	uxth.w	r8, r8
 8020e44:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020e48:	f7f3 f98a 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 8020e4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8020e4e:	2108      	movs	r1, #8
 8020e50:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e54:	9300      	str	r3, [sp, #0]
 8020e56:	463a      	mov	r2, r7
 8020e58:	f88d 1016 	strb.w	r1, [sp, #22]
 8020e5c:	ab06      	add	r3, sp, #24
 8020e5e:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8020e62:	4630      	mov	r0, r6
 8020e64:	9102      	str	r1, [sp, #8]
 8020e66:	9905      	ldr	r1, [sp, #20]
 8020e68:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8020e6c:	47b8      	blx	r7
 8020e6e:	2301      	movs	r3, #1
 8020e70:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020e74:	e7c4      	b.n	8020e00 <read_submessage_format+0xc4>
 8020e76:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020e7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e7c:	a80c      	add	r0, sp, #48	@ 0x30
 8020e7e:	1a52      	subs	r2, r2, r1
 8020e80:	eba8 0803 	sub.w	r8, r8, r3
 8020e84:	f7f3 f998 	bl	80141b8 <ucdr_init_buffer>
 8020e88:	a80c      	add	r0, sp, #48	@ 0x30
 8020e8a:	44a8      	add	r8, r5
 8020e8c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020e90:	f7f3 f966 	bl	8014160 <ucdr_set_on_full_buffer_callback>
 8020e94:	ab0c      	add	r3, sp, #48	@ 0x30
 8020e96:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8020e9a:	fa1f f888 	uxth.w	r8, r8
 8020e9e:	9300      	str	r3, [sp, #0]
 8020ea0:	463a      	mov	r2, r7
 8020ea2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8020ea6:	4630      	mov	r0, r6
 8020ea8:	f8cd 8004 	str.w	r8, [sp, #4]
 8020eac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8020eb0:	2107      	movs	r1, #7
 8020eb2:	f88d 1016 	strb.w	r1, [sp, #22]
 8020eb6:	b29b      	uxth	r3, r3
 8020eb8:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8020ebc:	9102      	str	r1, [sp, #8]
 8020ebe:	9905      	ldr	r1, [sp, #20]
 8020ec0:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8020ec4:	47b8      	blx	r7
 8020ec6:	2301      	movs	r3, #1
 8020ec8:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020ecc:	e7a6      	b.n	8020e1c <read_submessage_format+0xe0>
 8020ece:	bf00      	nop

08020ed0 <uxr_seq_num_add>:
 8020ed0:	4408      	add	r0, r1
 8020ed2:	b280      	uxth	r0, r0
 8020ed4:	4770      	bx	lr
 8020ed6:	bf00      	nop

08020ed8 <uxr_seq_num_sub>:
 8020ed8:	1a40      	subs	r0, r0, r1
 8020eda:	b280      	uxth	r0, r0
 8020edc:	4770      	bx	lr
 8020ede:	bf00      	nop

08020ee0 <uxr_seq_num_cmp>:
 8020ee0:	4288      	cmp	r0, r1
 8020ee2:	d011      	beq.n	8020f08 <uxr_seq_num_cmp+0x28>
 8020ee4:	d309      	bcc.n	8020efa <uxr_seq_num_cmp+0x1a>
 8020ee6:	4288      	cmp	r0, r1
 8020ee8:	d910      	bls.n	8020f0c <uxr_seq_num_cmp+0x2c>
 8020eea:	1a40      	subs	r0, r0, r1
 8020eec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8020ef0:	bfd4      	ite	le
 8020ef2:	2001      	movle	r0, #1
 8020ef4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8020ef8:	4770      	bx	lr
 8020efa:	1a0b      	subs	r3, r1, r0
 8020efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020f00:	daf1      	bge.n	8020ee6 <uxr_seq_num_cmp+0x6>
 8020f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020f06:	4770      	bx	lr
 8020f08:	2000      	movs	r0, #0
 8020f0a:	4770      	bx	lr
 8020f0c:	2001      	movs	r0, #1
 8020f0e:	4770      	bx	lr

08020f10 <rcl_get_default_domain_id>:
 8020f10:	b530      	push	{r4, r5, lr}
 8020f12:	2300      	movs	r3, #0
 8020f14:	b083      	sub	sp, #12
 8020f16:	9300      	str	r3, [sp, #0]
 8020f18:	b1d0      	cbz	r0, 8020f50 <rcl_get_default_domain_id+0x40>
 8020f1a:	4604      	mov	r4, r0
 8020f1c:	4669      	mov	r1, sp
 8020f1e:	4815      	ldr	r0, [pc, #84]	@ (8020f74 <rcl_get_default_domain_id+0x64>)
 8020f20:	f7fc feda 	bl	801dcd8 <rcutils_get_env>
 8020f24:	4602      	mov	r2, r0
 8020f26:	b110      	cbz	r0, 8020f2e <rcl_get_default_domain_id+0x1e>
 8020f28:	2001      	movs	r0, #1
 8020f2a:	b003      	add	sp, #12
 8020f2c:	bd30      	pop	{r4, r5, pc}
 8020f2e:	9b00      	ldr	r3, [sp, #0]
 8020f30:	b18b      	cbz	r3, 8020f56 <rcl_get_default_domain_id+0x46>
 8020f32:	7818      	ldrb	r0, [r3, #0]
 8020f34:	2800      	cmp	r0, #0
 8020f36:	d0f8      	beq.n	8020f2a <rcl_get_default_domain_id+0x1a>
 8020f38:	a901      	add	r1, sp, #4
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	9201      	str	r2, [sp, #4]
 8020f3e:	f000 ff4b 	bl	8021dd8 <strtoul>
 8020f42:	4605      	mov	r5, r0
 8020f44:	b150      	cbz	r0, 8020f5c <rcl_get_default_domain_id+0x4c>
 8020f46:	1c43      	adds	r3, r0, #1
 8020f48:	d00d      	beq.n	8020f66 <rcl_get_default_domain_id+0x56>
 8020f4a:	2000      	movs	r0, #0
 8020f4c:	6025      	str	r5, [r4, #0]
 8020f4e:	e7ec      	b.n	8020f2a <rcl_get_default_domain_id+0x1a>
 8020f50:	200b      	movs	r0, #11
 8020f52:	b003      	add	sp, #12
 8020f54:	bd30      	pop	{r4, r5, pc}
 8020f56:	4618      	mov	r0, r3
 8020f58:	b003      	add	sp, #12
 8020f5a:	bd30      	pop	{r4, r5, pc}
 8020f5c:	9b01      	ldr	r3, [sp, #4]
 8020f5e:	781b      	ldrb	r3, [r3, #0]
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d0f2      	beq.n	8020f4a <rcl_get_default_domain_id+0x3a>
 8020f64:	e7e0      	b.n	8020f28 <rcl_get_default_domain_id+0x18>
 8020f66:	f001 fab5 	bl	80224d4 <__errno>
 8020f6a:	6803      	ldr	r3, [r0, #0]
 8020f6c:	2b22      	cmp	r3, #34	@ 0x22
 8020f6e:	d1ec      	bne.n	8020f4a <rcl_get_default_domain_id+0x3a>
 8020f70:	e7da      	b.n	8020f28 <rcl_get_default_domain_id+0x18>
 8020f72:	bf00      	nop
 8020f74:	08025a2c 	.word	0x08025a2c

08020f78 <rcl_expand_topic_name>:
 8020f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f7c:	b08d      	sub	sp, #52	@ 0x34
 8020f7e:	4698      	mov	r8, r3
 8020f80:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020f82:	9207      	str	r2, [sp, #28]
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	bf18      	it	ne
 8020f88:	f1b8 0f00 	cmpne.w	r8, #0
 8020f8c:	bf0c      	ite	eq
 8020f8e:	2301      	moveq	r3, #1
 8020f90:	2300      	movne	r3, #0
 8020f92:	2a00      	cmp	r2, #0
 8020f94:	bf08      	it	eq
 8020f96:	f043 0301 	orreq.w	r3, r3, #1
 8020f9a:	2900      	cmp	r1, #0
 8020f9c:	bf08      	it	eq
 8020f9e:	f043 0301 	orreq.w	r3, r3, #1
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d13d      	bne.n	8021022 <rcl_expand_topic_name+0xaa>
 8020fa6:	fab0 f280 	clz	r2, r0
 8020faa:	4604      	mov	r4, r0
 8020fac:	0952      	lsrs	r2, r2, #5
 8020fae:	2800      	cmp	r0, #0
 8020fb0:	d037      	beq.n	8021022 <rcl_expand_topic_name+0xaa>
 8020fb2:	460f      	mov	r7, r1
 8020fb4:	a90b      	add	r1, sp, #44	@ 0x2c
 8020fb6:	f000 fa51 	bl	802145c <rcl_validate_topic_name>
 8020fba:	4605      	mov	r5, r0
 8020fbc:	bb68      	cbnz	r0, 802101a <rcl_expand_topic_name+0xa2>
 8020fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	d137      	bne.n	8021034 <rcl_expand_topic_name+0xbc>
 8020fc4:	4602      	mov	r2, r0
 8020fc6:	a90b      	add	r1, sp, #44	@ 0x2c
 8020fc8:	4638      	mov	r0, r7
 8020fca:	f7fd fb1b 	bl	801e604 <rmw_validate_node_name>
 8020fce:	bb68      	cbnz	r0, 802102c <rcl_expand_topic_name+0xb4>
 8020fd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	d133      	bne.n	802103e <rcl_expand_topic_name+0xc6>
 8020fd6:	462a      	mov	r2, r5
 8020fd8:	a90b      	add	r1, sp, #44	@ 0x2c
 8020fda:	9807      	ldr	r0, [sp, #28]
 8020fdc:	f7fd faf4 	bl	801e5c8 <rmw_validate_namespace>
 8020fe0:	bb20      	cbnz	r0, 802102c <rcl_expand_topic_name+0xb4>
 8020fe2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020fe4:	2d00      	cmp	r5, #0
 8020fe6:	f040 80a2 	bne.w	802112e <rcl_expand_topic_name+0x1b6>
 8020fea:	217b      	movs	r1, #123	@ 0x7b
 8020fec:	4620      	mov	r0, r4
 8020fee:	f001 f98f 	bl	8022310 <strchr>
 8020ff2:	7823      	ldrb	r3, [r4, #0]
 8020ff4:	4681      	mov	r9, r0
 8020ff6:	bb20      	cbnz	r0, 8021042 <rcl_expand_topic_name+0xca>
 8020ff8:	2b2f      	cmp	r3, #47	@ 0x2f
 8020ffa:	d122      	bne.n	8021042 <rcl_expand_topic_name+0xca>
 8020ffc:	ab19      	add	r3, sp, #100	@ 0x64
 8020ffe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021002:	ab16      	add	r3, sp, #88	@ 0x58
 8021004:	e88d 0003 	stmia.w	sp, {r0, r1}
 8021008:	4620      	mov	r0, r4
 802100a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802100c:	f7fc ffc6 	bl	801df9c <rcutils_strdup>
 8021010:	2800      	cmp	r0, #0
 8021012:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021014:	bf08      	it	eq
 8021016:	250a      	moveq	r5, #10
 8021018:	6018      	str	r0, [r3, #0]
 802101a:	4628      	mov	r0, r5
 802101c:	b00d      	add	sp, #52	@ 0x34
 802101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021022:	250b      	movs	r5, #11
 8021024:	4628      	mov	r0, r5
 8021026:	b00d      	add	sp, #52	@ 0x34
 8021028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802102c:	f7f9 fd72 	bl	801ab14 <rcl_convert_rmw_ret_to_rcl_ret>
 8021030:	4605      	mov	r5, r0
 8021032:	e7f2      	b.n	802101a <rcl_expand_topic_name+0xa2>
 8021034:	2567      	movs	r5, #103	@ 0x67
 8021036:	4628      	mov	r0, r5
 8021038:	b00d      	add	sp, #52	@ 0x34
 802103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802103e:	25c9      	movs	r5, #201	@ 0xc9
 8021040:	e7eb      	b.n	802101a <rcl_expand_topic_name+0xa2>
 8021042:	2b7e      	cmp	r3, #126	@ 0x7e
 8021044:	d075      	beq.n	8021132 <rcl_expand_topic_name+0x1ba>
 8021046:	f1b9 0f00 	cmp.w	r9, #0
 802104a:	f000 80c2 	beq.w	80211d2 <rcl_expand_topic_name+0x25a>
 802104e:	2300      	movs	r3, #0
 8021050:	46a2      	mov	sl, r4
 8021052:	461e      	mov	r6, r3
 8021054:	9508      	str	r5, [sp, #32]
 8021056:	4655      	mov	r5, sl
 8021058:	9409      	str	r4, [sp, #36]	@ 0x24
 802105a:	46b2      	mov	sl, r6
 802105c:	464c      	mov	r4, r9
 802105e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021062:	2c00      	cmp	r4, #0
 8021064:	f000 80ae 	beq.w	80211c4 <rcl_expand_topic_name+0x24c>
 8021068:	217d      	movs	r1, #125	@ 0x7d
 802106a:	4628      	mov	r0, r5
 802106c:	f001 f950 	bl	8022310 <strchr>
 8021070:	eba0 0904 	sub.w	r9, r0, r4
 8021074:	4621      	mov	r1, r4
 8021076:	4869      	ldr	r0, [pc, #420]	@ (802121c <rcl_expand_topic_name+0x2a4>)
 8021078:	f109 0601 	add.w	r6, r9, #1
 802107c:	4632      	mov	r2, r6
 802107e:	f001 f954 	bl	802232a <strncmp>
 8021082:	2800      	cmp	r0, #0
 8021084:	d051      	beq.n	802112a <rcl_expand_topic_name+0x1b2>
 8021086:	4632      	mov	r2, r6
 8021088:	4621      	mov	r1, r4
 802108a:	4865      	ldr	r0, [pc, #404]	@ (8021220 <rcl_expand_topic_name+0x2a8>)
 802108c:	f001 f94d 	bl	802232a <strncmp>
 8021090:	b128      	cbz	r0, 802109e <rcl_expand_topic_name+0x126>
 8021092:	4632      	mov	r2, r6
 8021094:	4621      	mov	r1, r4
 8021096:	4863      	ldr	r0, [pc, #396]	@ (8021224 <rcl_expand_topic_name+0x2ac>)
 8021098:	f001 f947 	bl	802232a <strncmp>
 802109c:	bb38      	cbnz	r0, 80210ee <rcl_expand_topic_name+0x176>
 802109e:	46d9      	mov	r9, fp
 80210a0:	ab18      	add	r3, sp, #96	@ 0x60
 80210a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80210a6:	ab16      	add	r3, sp, #88	@ 0x58
 80210a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80210ac:	4620      	mov	r0, r4
 80210ae:	4631      	mov	r1, r6
 80210b0:	cb0c      	ldmia	r3, {r2, r3}
 80210b2:	f7fc ff95 	bl	801dfe0 <rcutils_strndup>
 80210b6:	4604      	mov	r4, r0
 80210b8:	2800      	cmp	r0, #0
 80210ba:	f000 80a3 	beq.w	8021204 <rcl_expand_topic_name+0x28c>
 80210be:	464a      	mov	r2, r9
 80210c0:	4628      	mov	r0, r5
 80210c2:	ab16      	add	r3, sp, #88	@ 0x58
 80210c4:	4621      	mov	r1, r4
 80210c6:	f7fc fe69 	bl	801dd9c <rcutils_repl_str>
 80210ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80210cc:	4605      	mov	r5, r0
 80210ce:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210d0:	4620      	mov	r0, r4
 80210d2:	4798      	blx	r3
 80210d4:	4650      	mov	r0, sl
 80210d6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80210da:	4798      	blx	r3
 80210dc:	2d00      	cmp	r5, #0
 80210de:	d06c      	beq.n	80211ba <rcl_expand_topic_name+0x242>
 80210e0:	217b      	movs	r1, #123	@ 0x7b
 80210e2:	4628      	mov	r0, r5
 80210e4:	f001 f914 	bl	8022310 <strchr>
 80210e8:	46aa      	mov	sl, r5
 80210ea:	4604      	mov	r4, r0
 80210ec:	e7b9      	b.n	8021062 <rcl_expand_topic_name+0xea>
 80210ee:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80210f2:	1c61      	adds	r1, r4, #1
 80210f4:	4640      	mov	r0, r8
 80210f6:	f7fd f88b 	bl	801e210 <rcutils_string_map_getn>
 80210fa:	4681      	mov	r9, r0
 80210fc:	2800      	cmp	r0, #0
 80210fe:	d1cf      	bne.n	80210a0 <rcl_expand_topic_name+0x128>
 8021100:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021102:	aa18      	add	r2, sp, #96	@ 0x60
 8021104:	2569      	movs	r5, #105	@ 0x69
 8021106:	6018      	str	r0, [r3, #0]
 8021108:	ab16      	add	r3, sp, #88	@ 0x58
 802110a:	ca07      	ldmia	r2, {r0, r1, r2}
 802110c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8021110:	4631      	mov	r1, r6
 8021112:	4620      	mov	r0, r4
 8021114:	cb0c      	ldmia	r3, {r2, r3}
 8021116:	f7fc ff63 	bl	801dfe0 <rcutils_strndup>
 802111a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802111c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802111e:	4798      	blx	r3
 8021120:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021122:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021124:	4650      	mov	r0, sl
 8021126:	4798      	blx	r3
 8021128:	e777      	b.n	802101a <rcl_expand_topic_name+0xa2>
 802112a:	46b9      	mov	r9, r7
 802112c:	e7b8      	b.n	80210a0 <rcl_expand_topic_name+0x128>
 802112e:	25ca      	movs	r5, #202	@ 0xca
 8021130:	e773      	b.n	802101a <rcl_expand_topic_name+0xa2>
 8021132:	9e07      	ldr	r6, [sp, #28]
 8021134:	4630      	mov	r0, r6
 8021136:	f7df f8dd 	bl	80002f4 <strlen>
 802113a:	4a3b      	ldr	r2, [pc, #236]	@ (8021228 <rcl_expand_topic_name+0x2b0>)
 802113c:	4b3b      	ldr	r3, [pc, #236]	@ (802122c <rcl_expand_topic_name+0x2b4>)
 802113e:	9603      	str	r6, [sp, #12]
 8021140:	2801      	cmp	r0, #1
 8021142:	bf18      	it	ne
 8021144:	4613      	movne	r3, r2
 8021146:	9704      	str	r7, [sp, #16]
 8021148:	9302      	str	r3, [sp, #8]
 802114a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802114c:	9300      	str	r3, [sp, #0]
 802114e:	1c63      	adds	r3, r4, #1
 8021150:	9305      	str	r3, [sp, #20]
 8021152:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021156:	9301      	str	r3, [sp, #4]
 8021158:	ab16      	add	r3, sp, #88	@ 0x58
 802115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802115c:	f7fc fde4 	bl	801dd28 <rcutils_format_string_limit>
 8021160:	4606      	mov	r6, r0
 8021162:	b350      	cbz	r0, 80211ba <rcl_expand_topic_name+0x242>
 8021164:	f1b9 0f00 	cmp.w	r9, #0
 8021168:	d005      	beq.n	8021176 <rcl_expand_topic_name+0x1fe>
 802116a:	217b      	movs	r1, #123	@ 0x7b
 802116c:	46b2      	mov	sl, r6
 802116e:	f001 f8cf 	bl	8022310 <strchr>
 8021172:	4681      	mov	r9, r0
 8021174:	e76e      	b.n	8021054 <rcl_expand_topic_name+0xdc>
 8021176:	7833      	ldrb	r3, [r6, #0]
 8021178:	2b2f      	cmp	r3, #47	@ 0x2f
 802117a:	d01b      	beq.n	80211b4 <rcl_expand_topic_name+0x23c>
 802117c:	9c07      	ldr	r4, [sp, #28]
 802117e:	4620      	mov	r0, r4
 8021180:	f7df f8b8 	bl	80002f4 <strlen>
 8021184:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021188:	4a29      	ldr	r2, [pc, #164]	@ (8021230 <rcl_expand_topic_name+0x2b8>)
 802118a:	9301      	str	r3, [sp, #4]
 802118c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802118e:	9604      	str	r6, [sp, #16]
 8021190:	9300      	str	r3, [sp, #0]
 8021192:	4b28      	ldr	r3, [pc, #160]	@ (8021234 <rcl_expand_topic_name+0x2bc>)
 8021194:	9403      	str	r4, [sp, #12]
 8021196:	2801      	cmp	r0, #1
 8021198:	bf18      	it	ne
 802119a:	4613      	movne	r3, r2
 802119c:	9302      	str	r3, [sp, #8]
 802119e:	ab16      	add	r3, sp, #88	@ 0x58
 80211a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80211a2:	f7fc fdc1 	bl	801dd28 <rcutils_format_string_limit>
 80211a6:	4603      	mov	r3, r0
 80211a8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80211aa:	4630      	mov	r0, r6
 80211ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80211ae:	461e      	mov	r6, r3
 80211b0:	4790      	blx	r2
 80211b2:	b116      	cbz	r6, 80211ba <rcl_expand_topic_name+0x242>
 80211b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80211b6:	601e      	str	r6, [r3, #0]
 80211b8:	e72f      	b.n	802101a <rcl_expand_topic_name+0xa2>
 80211ba:	2300      	movs	r3, #0
 80211bc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80211be:	250a      	movs	r5, #10
 80211c0:	6013      	str	r3, [r2, #0]
 80211c2:	e72a      	b.n	802101a <rcl_expand_topic_name+0xa2>
 80211c4:	4653      	mov	r3, sl
 80211c6:	4656      	mov	r6, sl
 80211c8:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d1d2      	bne.n	8021176 <rcl_expand_topic_name+0x1fe>
 80211d0:	7823      	ldrb	r3, [r4, #0]
 80211d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80211d4:	d01e      	beq.n	8021214 <rcl_expand_topic_name+0x29c>
 80211d6:	9e07      	ldr	r6, [sp, #28]
 80211d8:	4630      	mov	r0, r6
 80211da:	f7df f88b 	bl	80002f4 <strlen>
 80211de:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80211e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80211e4:	9603      	str	r6, [sp, #12]
 80211e6:	9404      	str	r4, [sp, #16]
 80211e8:	e9cd 2300 	strd	r2, r3, [sp]
 80211ec:	4a10      	ldr	r2, [pc, #64]	@ (8021230 <rcl_expand_topic_name+0x2b8>)
 80211ee:	4b11      	ldr	r3, [pc, #68]	@ (8021234 <rcl_expand_topic_name+0x2bc>)
 80211f0:	2801      	cmp	r0, #1
 80211f2:	bf18      	it	ne
 80211f4:	4613      	movne	r3, r2
 80211f6:	9302      	str	r3, [sp, #8]
 80211f8:	ab16      	add	r3, sp, #88	@ 0x58
 80211fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80211fc:	f7fc fd94 	bl	801dd28 <rcutils_format_string_limit>
 8021200:	4606      	mov	r6, r0
 8021202:	e7d6      	b.n	80211b2 <rcl_expand_topic_name+0x23a>
 8021204:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8021208:	4650      	mov	r0, sl
 802120a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802120c:	6014      	str	r4, [r2, #0]
 802120e:	250a      	movs	r5, #10
 8021210:	4798      	blx	r3
 8021212:	e702      	b.n	802101a <rcl_expand_topic_name+0xa2>
 8021214:	2300      	movs	r3, #0
 8021216:	461e      	mov	r6, r3
 8021218:	e7cc      	b.n	80211b4 <rcl_expand_topic_name+0x23c>
 802121a:	bf00      	nop
 802121c:	08025a44 	.word	0x08025a44
 8021220:	08025a4c 	.word	0x08025a4c
 8021224:	08025a54 	.word	0x08025a54
 8021228:	08025a3c 	.word	0x08025a3c
 802122c:	080249f8 	.word	0x080249f8
 8021230:	0802538c 	.word	0x0802538c
 8021234:	08024a08 	.word	0x08024a08

08021238 <rcl_get_default_topic_name_substitutions>:
 8021238:	2800      	cmp	r0, #0
 802123a:	bf0c      	ite	eq
 802123c:	200b      	moveq	r0, #11
 802123e:	2000      	movne	r0, #0
 8021240:	4770      	bx	lr
 8021242:	bf00      	nop

08021244 <rcl_get_zero_initialized_guard_condition>:
 8021244:	4a03      	ldr	r2, [pc, #12]	@ (8021254 <rcl_get_zero_initialized_guard_condition+0x10>)
 8021246:	4603      	mov	r3, r0
 8021248:	e892 0003 	ldmia.w	r2, {r0, r1}
 802124c:	e883 0003 	stmia.w	r3, {r0, r1}
 8021250:	4618      	mov	r0, r3
 8021252:	4770      	bx	lr
 8021254:	08025a60 	.word	0x08025a60

08021258 <rcl_guard_condition_init>:
 8021258:	b082      	sub	sp, #8
 802125a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802125c:	b087      	sub	sp, #28
 802125e:	4604      	mov	r4, r0
 8021260:	460d      	mov	r5, r1
 8021262:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 8021266:	f10d 0c04 	add.w	ip, sp, #4
 802126a:	e9ce 2300 	strd	r2, r3, [lr]
 802126e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021276:	f8de 3000 	ldr.w	r3, [lr]
 802127a:	a801      	add	r0, sp, #4
 802127c:	f8cc 3000 	str.w	r3, [ip]
 8021280:	f7f4 f93a 	bl	80154f8 <rcutils_allocator_is_valid>
 8021284:	b354      	cbz	r4, 80212dc <rcl_guard_condition_init+0x84>
 8021286:	f080 0301 	eor.w	r3, r0, #1
 802128a:	b2db      	uxtb	r3, r3
 802128c:	bb33      	cbnz	r3, 80212dc <rcl_guard_condition_init+0x84>
 802128e:	6866      	ldr	r6, [r4, #4]
 8021290:	b9ee      	cbnz	r6, 80212ce <rcl_guard_condition_init+0x76>
 8021292:	b31d      	cbz	r5, 80212dc <rcl_guard_condition_init+0x84>
 8021294:	4628      	mov	r0, r5
 8021296:	f7f9 fc5b 	bl	801ab50 <rcl_context_is_valid>
 802129a:	b308      	cbz	r0, 80212e0 <rcl_guard_condition_init+0x88>
 802129c:	9b01      	ldr	r3, [sp, #4]
 802129e:	201c      	movs	r0, #28
 80212a0:	9905      	ldr	r1, [sp, #20]
 80212a2:	4798      	blx	r3
 80212a4:	4607      	mov	r7, r0
 80212a6:	6060      	str	r0, [r4, #4]
 80212a8:	b310      	cbz	r0, 80212f0 <rcl_guard_condition_init+0x98>
 80212aa:	6828      	ldr	r0, [r5, #0]
 80212ac:	3028      	adds	r0, #40	@ 0x28
 80212ae:	f000 faab 	bl	8021808 <rmw_create_guard_condition>
 80212b2:	6038      	str	r0, [r7, #0]
 80212b4:	6860      	ldr	r0, [r4, #4]
 80212b6:	6807      	ldr	r7, [r0, #0]
 80212b8:	b1a7      	cbz	r7, 80212e4 <rcl_guard_condition_init+0x8c>
 80212ba:	2301      	movs	r3, #1
 80212bc:	ac01      	add	r4, sp, #4
 80212be:	f100 0708 	add.w	r7, r0, #8
 80212c2:	7103      	strb	r3, [r0, #4]
 80212c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80212c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80212c8:	6823      	ldr	r3, [r4, #0]
 80212ca:	603b      	str	r3, [r7, #0]
 80212cc:	e000      	b.n	80212d0 <rcl_guard_condition_init+0x78>
 80212ce:	2664      	movs	r6, #100	@ 0x64
 80212d0:	4630      	mov	r0, r6
 80212d2:	b007      	add	sp, #28
 80212d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80212d8:	b002      	add	sp, #8
 80212da:	4770      	bx	lr
 80212dc:	260b      	movs	r6, #11
 80212de:	e7f7      	b.n	80212d0 <rcl_guard_condition_init+0x78>
 80212e0:	2665      	movs	r6, #101	@ 0x65
 80212e2:	e7f5      	b.n	80212d0 <rcl_guard_condition_init+0x78>
 80212e4:	9b02      	ldr	r3, [sp, #8]
 80212e6:	2601      	movs	r6, #1
 80212e8:	9905      	ldr	r1, [sp, #20]
 80212ea:	4798      	blx	r3
 80212ec:	6067      	str	r7, [r4, #4]
 80212ee:	e7ef      	b.n	80212d0 <rcl_guard_condition_init+0x78>
 80212f0:	260a      	movs	r6, #10
 80212f2:	e7ed      	b.n	80212d0 <rcl_guard_condition_init+0x78>

080212f4 <rcl_guard_condition_init_from_rmw>:
 80212f4:	b082      	sub	sp, #8
 80212f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212fa:	b086      	sub	sp, #24
 80212fc:	4604      	mov	r4, r0
 80212fe:	460e      	mov	r6, r1
 8021300:	4615      	mov	r5, r2
 8021302:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8021306:	f10d 0e04 	add.w	lr, sp, #4
 802130a:	f84c 3f04 	str.w	r3, [ip, #4]!
 802130e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8021312:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8021316:	f8dc 3000 	ldr.w	r3, [ip]
 802131a:	a801      	add	r0, sp, #4
 802131c:	f8ce 3000 	str.w	r3, [lr]
 8021320:	f7f4 f8ea 	bl	80154f8 <rcutils_allocator_is_valid>
 8021324:	f080 0301 	eor.w	r3, r0, #1
 8021328:	b2db      	uxtb	r3, r3
 802132a:	bb3b      	cbnz	r3, 802137c <rcl_guard_condition_init_from_rmw+0x88>
 802132c:	b334      	cbz	r4, 802137c <rcl_guard_condition_init_from_rmw+0x88>
 802132e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8021332:	f1b8 0f00 	cmp.w	r8, #0
 8021336:	d11a      	bne.n	802136e <rcl_guard_condition_init_from_rmw+0x7a>
 8021338:	b305      	cbz	r5, 802137c <rcl_guard_condition_init_from_rmw+0x88>
 802133a:	4628      	mov	r0, r5
 802133c:	f7f9 fc08 	bl	801ab50 <rcl_context_is_valid>
 8021340:	b1f0      	cbz	r0, 8021380 <rcl_guard_condition_init_from_rmw+0x8c>
 8021342:	9b01      	ldr	r3, [sp, #4]
 8021344:	201c      	movs	r0, #28
 8021346:	9905      	ldr	r1, [sp, #20]
 8021348:	4798      	blx	r3
 802134a:	4607      	mov	r7, r0
 802134c:	6060      	str	r0, [r4, #4]
 802134e:	b320      	cbz	r0, 802139a <rcl_guard_condition_init_from_rmw+0xa6>
 8021350:	b1c6      	cbz	r6, 8021384 <rcl_guard_condition_init_from_rmw+0x90>
 8021352:	6006      	str	r6, [r0, #0]
 8021354:	f880 8004 	strb.w	r8, [r0, #4]
 8021358:	ac01      	add	r4, sp, #4
 802135a:	f107 0c08 	add.w	ip, r7, #8
 802135e:	2500      	movs	r5, #0
 8021360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021366:	6823      	ldr	r3, [r4, #0]
 8021368:	f8cc 3000 	str.w	r3, [ip]
 802136c:	e000      	b.n	8021370 <rcl_guard_condition_init_from_rmw+0x7c>
 802136e:	2564      	movs	r5, #100	@ 0x64
 8021370:	4628      	mov	r0, r5
 8021372:	b006      	add	sp, #24
 8021374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021378:	b002      	add	sp, #8
 802137a:	4770      	bx	lr
 802137c:	250b      	movs	r5, #11
 802137e:	e7f7      	b.n	8021370 <rcl_guard_condition_init_from_rmw+0x7c>
 8021380:	2565      	movs	r5, #101	@ 0x65
 8021382:	e7f5      	b.n	8021370 <rcl_guard_condition_init_from_rmw+0x7c>
 8021384:	6828      	ldr	r0, [r5, #0]
 8021386:	3028      	adds	r0, #40	@ 0x28
 8021388:	f000 fa3e 	bl	8021808 <rmw_create_guard_condition>
 802138c:	6038      	str	r0, [r7, #0]
 802138e:	6867      	ldr	r7, [r4, #4]
 8021390:	683e      	ldr	r6, [r7, #0]
 8021392:	b126      	cbz	r6, 802139e <rcl_guard_condition_init_from_rmw+0xaa>
 8021394:	2301      	movs	r3, #1
 8021396:	713b      	strb	r3, [r7, #4]
 8021398:	e7de      	b.n	8021358 <rcl_guard_condition_init_from_rmw+0x64>
 802139a:	250a      	movs	r5, #10
 802139c:	e7e8      	b.n	8021370 <rcl_guard_condition_init_from_rmw+0x7c>
 802139e:	9b02      	ldr	r3, [sp, #8]
 80213a0:	4638      	mov	r0, r7
 80213a2:	9905      	ldr	r1, [sp, #20]
 80213a4:	2501      	movs	r5, #1
 80213a6:	4798      	blx	r3
 80213a8:	6066      	str	r6, [r4, #4]
 80213aa:	e7e1      	b.n	8021370 <rcl_guard_condition_init_from_rmw+0x7c>

080213ac <rcl_guard_condition_fini>:
 80213ac:	b570      	push	{r4, r5, r6, lr}
 80213ae:	b082      	sub	sp, #8
 80213b0:	b1f0      	cbz	r0, 80213f0 <rcl_guard_condition_fini+0x44>
 80213b2:	6843      	ldr	r3, [r0, #4]
 80213b4:	4604      	mov	r4, r0
 80213b6:	b163      	cbz	r3, 80213d2 <rcl_guard_condition_fini+0x26>
 80213b8:	6818      	ldr	r0, [r3, #0]
 80213ba:	68de      	ldr	r6, [r3, #12]
 80213bc:	6999      	ldr	r1, [r3, #24]
 80213be:	b160      	cbz	r0, 80213da <rcl_guard_condition_fini+0x2e>
 80213c0:	791d      	ldrb	r5, [r3, #4]
 80213c2:	b965      	cbnz	r5, 80213de <rcl_guard_condition_fini+0x32>
 80213c4:	4618      	mov	r0, r3
 80213c6:	47b0      	blx	r6
 80213c8:	2300      	movs	r3, #0
 80213ca:	4628      	mov	r0, r5
 80213cc:	6063      	str	r3, [r4, #4]
 80213ce:	b002      	add	sp, #8
 80213d0:	bd70      	pop	{r4, r5, r6, pc}
 80213d2:	461d      	mov	r5, r3
 80213d4:	4628      	mov	r0, r5
 80213d6:	b002      	add	sp, #8
 80213d8:	bd70      	pop	{r4, r5, r6, pc}
 80213da:	4605      	mov	r5, r0
 80213dc:	e7f2      	b.n	80213c4 <rcl_guard_condition_fini+0x18>
 80213de:	9101      	str	r1, [sp, #4]
 80213e0:	f000 fa28 	bl	8021834 <rmw_destroy_guard_condition>
 80213e4:	1e05      	subs	r5, r0, #0
 80213e6:	6863      	ldr	r3, [r4, #4]
 80213e8:	9901      	ldr	r1, [sp, #4]
 80213ea:	bf18      	it	ne
 80213ec:	2501      	movne	r5, #1
 80213ee:	e7e9      	b.n	80213c4 <rcl_guard_condition_fini+0x18>
 80213f0:	250b      	movs	r5, #11
 80213f2:	4628      	mov	r0, r5
 80213f4:	b002      	add	sp, #8
 80213f6:	bd70      	pop	{r4, r5, r6, pc}

080213f8 <rcl_guard_condition_get_default_options>:
 80213f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213fa:	b087      	sub	sp, #28
 80213fc:	4606      	mov	r6, r0
 80213fe:	4c0b      	ldr	r4, [pc, #44]	@ (802142c <rcl_guard_condition_get_default_options+0x34>)
 8021400:	4668      	mov	r0, sp
 8021402:	f7f4 f86b 	bl	80154dc <rcutils_get_default_allocator>
 8021406:	46ee      	mov	lr, sp
 8021408:	46a4      	mov	ip, r4
 802140a:	4625      	mov	r5, r4
 802140c:	4634      	mov	r4, r6
 802140e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021412:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021418:	f8de 7000 	ldr.w	r7, [lr]
 802141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802141e:	4630      	mov	r0, r6
 8021420:	f8cc 7000 	str.w	r7, [ip]
 8021424:	6027      	str	r7, [r4, #0]
 8021426:	b007      	add	sp, #28
 8021428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802142a:	bf00      	nop
 802142c:	24069590 	.word	0x24069590

08021430 <rcl_trigger_guard_condition>:
 8021430:	b148      	cbz	r0, 8021446 <rcl_trigger_guard_condition+0x16>
 8021432:	b508      	push	{r3, lr}
 8021434:	6843      	ldr	r3, [r0, #4]
 8021436:	b143      	cbz	r3, 802144a <rcl_trigger_guard_condition+0x1a>
 8021438:	6818      	ldr	r0, [r3, #0]
 802143a:	f000 fa0f 	bl	802185c <rmw_trigger_guard_condition>
 802143e:	3800      	subs	r0, #0
 8021440:	bf18      	it	ne
 8021442:	2001      	movne	r0, #1
 8021444:	bd08      	pop	{r3, pc}
 8021446:	200b      	movs	r0, #11
 8021448:	4770      	bx	lr
 802144a:	200b      	movs	r0, #11
 802144c:	bd08      	pop	{r3, pc}
 802144e:	bf00      	nop

08021450 <rcl_guard_condition_get_rmw_handle>:
 8021450:	b110      	cbz	r0, 8021458 <rcl_guard_condition_get_rmw_handle+0x8>
 8021452:	6840      	ldr	r0, [r0, #4]
 8021454:	b100      	cbz	r0, 8021458 <rcl_guard_condition_get_rmw_handle+0x8>
 8021456:	6800      	ldr	r0, [r0, #0]
 8021458:	4770      	bx	lr
 802145a:	bf00      	nop

0802145c <rcl_validate_topic_name>:
 802145c:	2800      	cmp	r0, #0
 802145e:	f000 8089 	beq.w	8021574 <rcl_validate_topic_name+0x118>
 8021462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021466:	460e      	mov	r6, r1
 8021468:	2900      	cmp	r1, #0
 802146a:	f000 8085 	beq.w	8021578 <rcl_validate_topic_name+0x11c>
 802146e:	4604      	mov	r4, r0
 8021470:	4617      	mov	r7, r2
 8021472:	f7de ff3f 	bl	80002f4 <strlen>
 8021476:	b1b0      	cbz	r0, 80214a6 <rcl_validate_topic_name+0x4a>
 8021478:	f894 e000 	ldrb.w	lr, [r4]
 802147c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80215e0 <rcl_validate_topic_name+0x184>
 8021480:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8021484:	f013 0304 	ands.w	r3, r3, #4
 8021488:	d139      	bne.n	80214fe <rcl_validate_topic_name+0xa2>
 802148a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 802148e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8021492:	2a2f      	cmp	r2, #47	@ 0x2f
 8021494:	d10f      	bne.n	80214b6 <rcl_validate_topic_name+0x5a>
 8021496:	2202      	movs	r2, #2
 8021498:	6032      	str	r2, [r6, #0]
 802149a:	b3a7      	cbz	r7, 8021506 <rcl_validate_topic_name+0xaa>
 802149c:	4618      	mov	r0, r3
 802149e:	f8c7 8000 	str.w	r8, [r7]
 80214a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214a6:	2301      	movs	r3, #1
 80214a8:	6033      	str	r3, [r6, #0]
 80214aa:	b367      	cbz	r7, 8021506 <rcl_validate_topic_name+0xaa>
 80214ac:	2300      	movs	r3, #0
 80214ae:	4618      	mov	r0, r3
 80214b0:	603b      	str	r3, [r7, #0]
 80214b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214b6:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 80214ba:	461d      	mov	r5, r3
 80214bc:	4619      	mov	r1, r3
 80214be:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80214c2:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 80214c6:	f1b9 0f09 	cmp.w	r9, #9
 80214ca:	d91f      	bls.n	802150c <rcl_validate_topic_name+0xb0>
 80214cc:	f022 0920 	bic.w	r9, r2, #32
 80214d0:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80214d4:	f1b9 0f19 	cmp.w	r9, #25
 80214d8:	d918      	bls.n	802150c <rcl_validate_topic_name+0xb0>
 80214da:	2a5f      	cmp	r2, #95	@ 0x5f
 80214dc:	d024      	beq.n	8021528 <rcl_validate_topic_name+0xcc>
 80214de:	2a2f      	cmp	r2, #47	@ 0x2f
 80214e0:	d058      	beq.n	8021594 <rcl_validate_topic_name+0x138>
 80214e2:	2a7e      	cmp	r2, #126	@ 0x7e
 80214e4:	d04a      	beq.n	802157c <rcl_validate_topic_name+0x120>
 80214e6:	2a7b      	cmp	r2, #123	@ 0x7b
 80214e8:	d05b      	beq.n	80215a2 <rcl_validate_topic_name+0x146>
 80214ea:	2a7d      	cmp	r2, #125	@ 0x7d
 80214ec:	d169      	bne.n	80215c2 <rcl_validate_topic_name+0x166>
 80214ee:	2d00      	cmp	r5, #0
 80214f0:	d15c      	bne.n	80215ac <rcl_validate_topic_name+0x150>
 80214f2:	2305      	movs	r3, #5
 80214f4:	6033      	str	r3, [r6, #0]
 80214f6:	b137      	cbz	r7, 8021506 <rcl_validate_topic_name+0xaa>
 80214f8:	2000      	movs	r0, #0
 80214fa:	6039      	str	r1, [r7, #0]
 80214fc:	e7d9      	b.n	80214b2 <rcl_validate_topic_name+0x56>
 80214fe:	2304      	movs	r3, #4
 8021500:	6033      	str	r3, [r6, #0]
 8021502:	2f00      	cmp	r7, #0
 8021504:	d1d2      	bne.n	80214ac <rcl_validate_topic_name+0x50>
 8021506:	2000      	movs	r0, #0
 8021508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802150c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021510:	0752      	lsls	r2, r2, #29
 8021512:	d509      	bpl.n	8021528 <rcl_validate_topic_name+0xcc>
 8021514:	2900      	cmp	r1, #0
 8021516:	bf0c      	ite	eq
 8021518:	2200      	moveq	r2, #0
 802151a:	f005 0201 	andne.w	r2, r5, #1
 802151e:	b11a      	cbz	r2, 8021528 <rcl_validate_topic_name+0xcc>
 8021520:	1e4d      	subs	r5, r1, #1
 8021522:	429d      	cmp	r5, r3
 8021524:	d031      	beq.n	802158a <rcl_validate_topic_name+0x12e>
 8021526:	4615      	mov	r5, r2
 8021528:	3101      	adds	r1, #1
 802152a:	4288      	cmp	r0, r1
 802152c:	d1c7      	bne.n	80214be <rcl_validate_topic_name+0x62>
 802152e:	2d00      	cmp	r5, #0
 8021530:	d142      	bne.n	80215b8 <rcl_validate_topic_name+0x15c>
 8021532:	4628      	mov	r0, r5
 8021534:	2301      	movs	r3, #1
 8021536:	e00c      	b.n	8021552 <rcl_validate_topic_name+0xf6>
 8021538:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 802153c:	d101      	bne.n	8021542 <rcl_validate_topic_name+0xe6>
 802153e:	2801      	cmp	r0, #1
 8021540:	d047      	beq.n	80215d2 <rcl_validate_topic_name+0x176>
 8021542:	1c5a      	adds	r2, r3, #1
 8021544:	428b      	cmp	r3, r1
 8021546:	f100 0001 	add.w	r0, r0, #1
 802154a:	f104 0401 	add.w	r4, r4, #1
 802154e:	4613      	mov	r3, r2
 8021550:	d22e      	bcs.n	80215b0 <rcl_validate_topic_name+0x154>
 8021552:	4580      	cmp	r8, r0
 8021554:	d0f5      	beq.n	8021542 <rcl_validate_topic_name+0xe6>
 8021556:	7822      	ldrb	r2, [r4, #0]
 8021558:	2a2f      	cmp	r2, #47	@ 0x2f
 802155a:	d1ed      	bne.n	8021538 <rcl_validate_topic_name+0xdc>
 802155c:	7862      	ldrb	r2, [r4, #1]
 802155e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021562:	0752      	lsls	r2, r2, #29
 8021564:	d5ed      	bpl.n	8021542 <rcl_validate_topic_name+0xe6>
 8021566:	2204      	movs	r2, #4
 8021568:	6032      	str	r2, [r6, #0]
 802156a:	2f00      	cmp	r7, #0
 802156c:	d0cb      	beq.n	8021506 <rcl_validate_topic_name+0xaa>
 802156e:	2000      	movs	r0, #0
 8021570:	603b      	str	r3, [r7, #0]
 8021572:	e79e      	b.n	80214b2 <rcl_validate_topic_name+0x56>
 8021574:	200b      	movs	r0, #11
 8021576:	4770      	bx	lr
 8021578:	200b      	movs	r0, #11
 802157a:	e79a      	b.n	80214b2 <rcl_validate_topic_name+0x56>
 802157c:	2900      	cmp	r1, #0
 802157e:	d0d3      	beq.n	8021528 <rcl_validate_topic_name+0xcc>
 8021580:	2306      	movs	r3, #6
 8021582:	6033      	str	r3, [r6, #0]
 8021584:	2f00      	cmp	r7, #0
 8021586:	d1b7      	bne.n	80214f8 <rcl_validate_topic_name+0x9c>
 8021588:	e7bd      	b.n	8021506 <rcl_validate_topic_name+0xaa>
 802158a:	2309      	movs	r3, #9
 802158c:	6033      	str	r3, [r6, #0]
 802158e:	2f00      	cmp	r7, #0
 8021590:	d1b2      	bne.n	80214f8 <rcl_validate_topic_name+0x9c>
 8021592:	e7b8      	b.n	8021506 <rcl_validate_topic_name+0xaa>
 8021594:	2d00      	cmp	r5, #0
 8021596:	d0c7      	beq.n	8021528 <rcl_validate_topic_name+0xcc>
 8021598:	2308      	movs	r3, #8
 802159a:	6033      	str	r3, [r6, #0]
 802159c:	2f00      	cmp	r7, #0
 802159e:	d1ab      	bne.n	80214f8 <rcl_validate_topic_name+0x9c>
 80215a0:	e7b1      	b.n	8021506 <rcl_validate_topic_name+0xaa>
 80215a2:	2d00      	cmp	r5, #0
 80215a4:	d1f8      	bne.n	8021598 <rcl_validate_topic_name+0x13c>
 80215a6:	460b      	mov	r3, r1
 80215a8:	2501      	movs	r5, #1
 80215aa:	e7bd      	b.n	8021528 <rcl_validate_topic_name+0xcc>
 80215ac:	2500      	movs	r5, #0
 80215ae:	e7bb      	b.n	8021528 <rcl_validate_topic_name+0xcc>
 80215b0:	2300      	movs	r3, #0
 80215b2:	4618      	mov	r0, r3
 80215b4:	6033      	str	r3, [r6, #0]
 80215b6:	e77c      	b.n	80214b2 <rcl_validate_topic_name+0x56>
 80215b8:	2205      	movs	r2, #5
 80215ba:	6032      	str	r2, [r6, #0]
 80215bc:	2f00      	cmp	r7, #0
 80215be:	d1d6      	bne.n	802156e <rcl_validate_topic_name+0x112>
 80215c0:	e7a1      	b.n	8021506 <rcl_validate_topic_name+0xaa>
 80215c2:	2d00      	cmp	r5, #0
 80215c4:	bf14      	ite	ne
 80215c6:	2308      	movne	r3, #8
 80215c8:	2303      	moveq	r3, #3
 80215ca:	6033      	str	r3, [r6, #0]
 80215cc:	2f00      	cmp	r7, #0
 80215ce:	d193      	bne.n	80214f8 <rcl_validate_topic_name+0x9c>
 80215d0:	e799      	b.n	8021506 <rcl_validate_topic_name+0xaa>
 80215d2:	2307      	movs	r3, #7
 80215d4:	6033      	str	r3, [r6, #0]
 80215d6:	2f00      	cmp	r7, #0
 80215d8:	d095      	beq.n	8021506 <rcl_validate_topic_name+0xaa>
 80215da:	2301      	movs	r3, #1
 80215dc:	e7c7      	b.n	802156e <rcl_validate_topic_name+0x112>
 80215de:	bf00      	nop
 80215e0:	08025bca 	.word	0x08025bca

080215e4 <rcutils_string_array_fini>:
 80215e4:	b328      	cbz	r0, 8021632 <rcutils_string_array_fini+0x4e>
 80215e6:	b570      	push	{r4, r5, r6, lr}
 80215e8:	4604      	mov	r4, r0
 80215ea:	6840      	ldr	r0, [r0, #4]
 80215ec:	b1e0      	cbz	r0, 8021628 <rcutils_string_array_fini+0x44>
 80215ee:	f104 0008 	add.w	r0, r4, #8
 80215f2:	f7f3 ff81 	bl	80154f8 <rcutils_allocator_is_valid>
 80215f6:	b1c0      	cbz	r0, 802162a <rcutils_string_array_fini+0x46>
 80215f8:	6823      	ldr	r3, [r4, #0]
 80215fa:	b1c3      	cbz	r3, 802162e <rcutils_string_array_fini+0x4a>
 80215fc:	2500      	movs	r5, #0
 80215fe:	6860      	ldr	r0, [r4, #4]
 8021600:	462e      	mov	r6, r5
 8021602:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8021606:	68e3      	ldr	r3, [r4, #12]
 8021608:	69a1      	ldr	r1, [r4, #24]
 802160a:	4798      	blx	r3
 802160c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8021610:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8021614:	3501      	adds	r5, #1
 8021616:	429d      	cmp	r5, r3
 8021618:	d3f3      	bcc.n	8021602 <rcutils_string_array_fini+0x1e>
 802161a:	68e3      	ldr	r3, [r4, #12]
 802161c:	69a1      	ldr	r1, [r4, #24]
 802161e:	4798      	blx	r3
 8021620:	2300      	movs	r3, #0
 8021622:	4618      	mov	r0, r3
 8021624:	e9c4 3300 	strd	r3, r3, [r4]
 8021628:	bd70      	pop	{r4, r5, r6, pc}
 802162a:	200b      	movs	r0, #11
 802162c:	bd70      	pop	{r4, r5, r6, pc}
 802162e:	6860      	ldr	r0, [r4, #4]
 8021630:	e7f3      	b.n	802161a <rcutils_string_array_fini+0x36>
 8021632:	200b      	movs	r0, #11
 8021634:	4770      	bx	lr
 8021636:	bf00      	nop

08021638 <on_status>:
 8021638:	b082      	sub	sp, #8
 802163a:	b002      	add	sp, #8
 802163c:	4770      	bx	lr
 802163e:	bf00      	nop

08021640 <on_topic>:
 8021640:	4a23      	ldr	r2, [pc, #140]	@ (80216d0 <on_topic+0x90>)
 8021642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021646:	6812      	ldr	r2, [r2, #0]
 8021648:	b094      	sub	sp, #80	@ 0x50
 802164a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802164c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021650:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021652:	9312      	str	r3, [sp, #72]	@ 0x48
 8021654:	b3c2      	cbz	r2, 80216c8 <on_topic+0x88>
 8021656:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802165a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 802165e:	e001      	b.n	8021664 <on_topic+0x24>
 8021660:	6852      	ldr	r2, [r2, #4]
 8021662:	b38a      	cbz	r2, 80216c8 <on_topic+0x88>
 8021664:	6894      	ldr	r4, [r2, #8]
 8021666:	8aa3      	ldrh	r3, [r4, #20]
 8021668:	428b      	cmp	r3, r1
 802166a:	d1f9      	bne.n	8021660 <on_topic+0x20>
 802166c:	7da3      	ldrb	r3, [r4, #22]
 802166e:	4283      	cmp	r3, r0
 8021670:	d1f6      	bne.n	8021660 <on_topic+0x20>
 8021672:	2248      	movs	r2, #72	@ 0x48
 8021674:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8021678:	4668      	mov	r0, sp
 802167a:	f000 ff60 	bl	802253e <memcpy>
 802167e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8021682:	4620      	mov	r0, r4
 8021684:	cb0c      	ldmia	r3, {r2, r3}
 8021686:	f7f4 fbeb 	bl	8015e60 <rmw_uxrce_get_static_input_buffer_for_entity>
 802168a:	4607      	mov	r7, r0
 802168c:	b1e0      	cbz	r0, 80216c8 <on_topic+0x88>
 802168e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8021692:	462a      	mov	r2, r5
 8021694:	4630      	mov	r0, r6
 8021696:	f108 0110 	add.w	r1, r8, #16
 802169a:	f7fe fd1f 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 802169e:	b930      	cbnz	r0, 80216ae <on_topic+0x6e>
 80216a0:	4639      	mov	r1, r7
 80216a2:	480c      	ldr	r0, [pc, #48]	@ (80216d4 <on_topic+0x94>)
 80216a4:	b014      	add	sp, #80	@ 0x50
 80216a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80216aa:	f7fd b81b 	b.w	801e6e4 <put_memory>
 80216ae:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80216b2:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80216b6:	f7f4 f9d1 	bl	8015a5c <rmw_uros_epoch_nanos>
 80216ba:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80216be:	2305      	movs	r3, #5
 80216c0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80216c4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80216c8:	b014      	add	sp, #80	@ 0x50
 80216ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216ce:	bf00      	nop
 80216d0:	24069244 	.word	0x24069244
 80216d4:	24069234 	.word	0x24069234

080216d8 <on_request>:
 80216d8:	4824      	ldr	r0, [pc, #144]	@ (802176c <on_request+0x94>)
 80216da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216de:	6800      	ldr	r0, [r0, #0]
 80216e0:	b094      	sub	sp, #80	@ 0x50
 80216e2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80216e4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80216e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80216ea:	2800      	cmp	r0, #0
 80216ec:	d03b      	beq.n	8021766 <on_request+0x8e>
 80216ee:	461d      	mov	r5, r3
 80216f0:	e001      	b.n	80216f6 <on_request+0x1e>
 80216f2:	6840      	ldr	r0, [r0, #4]
 80216f4:	b3b8      	cbz	r0, 8021766 <on_request+0x8e>
 80216f6:	6884      	ldr	r4, [r0, #8]
 80216f8:	8b21      	ldrh	r1, [r4, #24]
 80216fa:	4291      	cmp	r1, r2
 80216fc:	d1f9      	bne.n	80216f2 <on_request+0x1a>
 80216fe:	2248      	movs	r2, #72	@ 0x48
 8021700:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8021704:	4668      	mov	r0, sp
 8021706:	f000 ff1a 	bl	802253e <memcpy>
 802170a:	f104 0320 	add.w	r3, r4, #32
 802170e:	4620      	mov	r0, r4
 8021710:	cb0c      	ldmia	r3, {r2, r3}
 8021712:	f7f4 fba5 	bl	8015e60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8021716:	4680      	mov	r8, r0
 8021718:	b328      	cbz	r0, 8021766 <on_request+0x8e>
 802171a:	4630      	mov	r0, r6
 802171c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8021720:	463a      	mov	r2, r7
 8021722:	f106 0110 	add.w	r1, r6, #16
 8021726:	f7fe fcd9 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 802172a:	b930      	cbnz	r0, 802173a <on_request+0x62>
 802172c:	4641      	mov	r1, r8
 802172e:	4810      	ldr	r0, [pc, #64]	@ (8021770 <on_request+0x98>)
 8021730:	b014      	add	sp, #80	@ 0x50
 8021732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021736:	f7fc bfd5 	b.w	801e6e4 <put_memory>
 802173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802173c:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8021740:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8021744:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8021748:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802174c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021750:	e88c 0003 	stmia.w	ip, {r0, r1}
 8021754:	f7f4 f982 	bl	8015a5c <rmw_uros_epoch_nanos>
 8021758:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 802175c:	2303      	movs	r3, #3
 802175e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8021762:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8021766:	b014      	add	sp, #80	@ 0x50
 8021768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802176c:	24069214 	.word	0x24069214
 8021770:	24069234 	.word	0x24069234

08021774 <on_reply>:
 8021774:	4822      	ldr	r0, [pc, #136]	@ (8021800 <on_reply+0x8c>)
 8021776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802177a:	6800      	ldr	r0, [r0, #0]
 802177c:	b094      	sub	sp, #80	@ 0x50
 802177e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021780:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8021784:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021786:	b3b8      	cbz	r0, 80217f8 <on_reply+0x84>
 8021788:	461d      	mov	r5, r3
 802178a:	e001      	b.n	8021790 <on_reply+0x1c>
 802178c:	6840      	ldr	r0, [r0, #4]
 802178e:	b398      	cbz	r0, 80217f8 <on_reply+0x84>
 8021790:	6884      	ldr	r4, [r0, #8]
 8021792:	8b21      	ldrh	r1, [r4, #24]
 8021794:	4291      	cmp	r1, r2
 8021796:	d1f9      	bne.n	802178c <on_reply+0x18>
 8021798:	2248      	movs	r2, #72	@ 0x48
 802179a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 802179e:	4668      	mov	r0, sp
 80217a0:	f000 fecd 	bl	802253e <memcpy>
 80217a4:	f104 0320 	add.w	r3, r4, #32
 80217a8:	4620      	mov	r0, r4
 80217aa:	cb0c      	ldmia	r3, {r2, r3}
 80217ac:	f7f4 fb58 	bl	8015e60 <rmw_uxrce_get_static_input_buffer_for_entity>
 80217b0:	4680      	mov	r8, r0
 80217b2:	b308      	cbz	r0, 80217f8 <on_reply+0x84>
 80217b4:	4630      	mov	r0, r6
 80217b6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80217ba:	463a      	mov	r2, r7
 80217bc:	f106 0110 	add.w	r1, r6, #16
 80217c0:	f7fe fc8c 	bl	80200dc <ucdr_deserialize_array_uint8_t>
 80217c4:	b930      	cbnz	r0, 80217d4 <on_reply+0x60>
 80217c6:	4641      	mov	r1, r8
 80217c8:	480e      	ldr	r0, [pc, #56]	@ (8021804 <on_reply+0x90>)
 80217ca:	b014      	add	sp, #80	@ 0x50
 80217cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80217d0:	f7fc bf88 	b.w	801e6e4 <put_memory>
 80217d4:	2200      	movs	r2, #0
 80217d6:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80217da:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80217de:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80217e2:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80217e6:	f7f4 f939 	bl	8015a5c <rmw_uros_epoch_nanos>
 80217ea:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80217ee:	2304      	movs	r3, #4
 80217f0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80217f4:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80217f8:	b014      	add	sp, #80	@ 0x50
 80217fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217fe:	bf00      	nop
 8021800:	24064928 	.word	0x24064928
 8021804:	24069234 	.word	0x24069234

08021808 <rmw_create_guard_condition>:
 8021808:	b538      	push	{r3, r4, r5, lr}
 802180a:	4605      	mov	r5, r0
 802180c:	4808      	ldr	r0, [pc, #32]	@ (8021830 <rmw_create_guard_condition+0x28>)
 802180e:	f7fc ff59 	bl	801e6c4 <get_memory>
 8021812:	4603      	mov	r3, r0
 8021814:	b148      	cbz	r0, 802182a <rmw_create_guard_condition+0x22>
 8021816:	6884      	ldr	r4, [r0, #8]
 8021818:	2300      	movs	r3, #0
 802181a:	61e5      	str	r5, [r4, #28]
 802181c:	7423      	strb	r3, [r4, #16]
 802181e:	f7fc ffb9 	bl	801e794 <rmw_get_implementation_identifier>
 8021822:	f104 0314 	add.w	r3, r4, #20
 8021826:	e9c4 0405 	strd	r0, r4, [r4, #20]
 802182a:	4618      	mov	r0, r3
 802182c:	bd38      	pop	{r3, r4, r5, pc}
 802182e:	bf00      	nop
 8021830:	240691d4 	.word	0x240691d4

08021834 <rmw_destroy_guard_condition>:
 8021834:	b508      	push	{r3, lr}
 8021836:	4b08      	ldr	r3, [pc, #32]	@ (8021858 <rmw_destroy_guard_condition+0x24>)
 8021838:	6819      	ldr	r1, [r3, #0]
 802183a:	b911      	cbnz	r1, 8021842 <rmw_destroy_guard_condition+0xe>
 802183c:	e00a      	b.n	8021854 <rmw_destroy_guard_condition+0x20>
 802183e:	6849      	ldr	r1, [r1, #4]
 8021840:	b141      	cbz	r1, 8021854 <rmw_destroy_guard_condition+0x20>
 8021842:	688b      	ldr	r3, [r1, #8]
 8021844:	3314      	adds	r3, #20
 8021846:	4298      	cmp	r0, r3
 8021848:	d1f9      	bne.n	802183e <rmw_destroy_guard_condition+0xa>
 802184a:	4803      	ldr	r0, [pc, #12]	@ (8021858 <rmw_destroy_guard_condition+0x24>)
 802184c:	f7fc ff4a 	bl	801e6e4 <put_memory>
 8021850:	2000      	movs	r0, #0
 8021852:	bd08      	pop	{r3, pc}
 8021854:	2001      	movs	r0, #1
 8021856:	bd08      	pop	{r3, pc}
 8021858:	240691d4 	.word	0x240691d4

0802185c <rmw_trigger_guard_condition>:
 802185c:	b160      	cbz	r0, 8021878 <rmw_trigger_guard_condition+0x1c>
 802185e:	b510      	push	{r4, lr}
 8021860:	4604      	mov	r4, r0
 8021862:	6800      	ldr	r0, [r0, #0]
 8021864:	f7f4 fd10 	bl	8016288 <is_uxrce_rmw_identifier_valid>
 8021868:	b908      	cbnz	r0, 802186e <rmw_trigger_guard_condition+0x12>
 802186a:	2001      	movs	r0, #1
 802186c:	bd10      	pop	{r4, pc}
 802186e:	6863      	ldr	r3, [r4, #4]
 8021870:	2201      	movs	r2, #1
 8021872:	2000      	movs	r0, #0
 8021874:	741a      	strb	r2, [r3, #16]
 8021876:	bd10      	pop	{r4, pc}
 8021878:	2001      	movs	r0, #1
 802187a:	4770      	bx	lr

0802187c <rosidl_runtime_c__String__init>:
 802187c:	b510      	push	{r4, lr}
 802187e:	4604      	mov	r4, r0
 8021880:	b086      	sub	sp, #24
 8021882:	b170      	cbz	r0, 80218a2 <rosidl_runtime_c__String__init+0x26>
 8021884:	a801      	add	r0, sp, #4
 8021886:	f7f3 fe29 	bl	80154dc <rcutils_get_default_allocator>
 802188a:	9b01      	ldr	r3, [sp, #4]
 802188c:	9905      	ldr	r1, [sp, #20]
 802188e:	2001      	movs	r0, #1
 8021890:	4798      	blx	r3
 8021892:	6020      	str	r0, [r4, #0]
 8021894:	b128      	cbz	r0, 80218a2 <rosidl_runtime_c__String__init+0x26>
 8021896:	2100      	movs	r1, #0
 8021898:	2201      	movs	r2, #1
 802189a:	7001      	strb	r1, [r0, #0]
 802189c:	4610      	mov	r0, r2
 802189e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80218a2:	b006      	add	sp, #24
 80218a4:	bd10      	pop	{r4, pc}
 80218a6:	bf00      	nop

080218a8 <rosidl_runtime_c__String__fini>:
 80218a8:	b320      	cbz	r0, 80218f4 <rosidl_runtime_c__String__fini+0x4c>
 80218aa:	6803      	ldr	r3, [r0, #0]
 80218ac:	b510      	push	{r4, lr}
 80218ae:	4604      	mov	r4, r0
 80218b0:	b086      	sub	sp, #24
 80218b2:	b173      	cbz	r3, 80218d2 <rosidl_runtime_c__String__fini+0x2a>
 80218b4:	6883      	ldr	r3, [r0, #8]
 80218b6:	b1f3      	cbz	r3, 80218f6 <rosidl_runtime_c__String__fini+0x4e>
 80218b8:	a801      	add	r0, sp, #4
 80218ba:	f7f3 fe0f 	bl	80154dc <rcutils_get_default_allocator>
 80218be:	9b02      	ldr	r3, [sp, #8]
 80218c0:	9905      	ldr	r1, [sp, #20]
 80218c2:	6820      	ldr	r0, [r4, #0]
 80218c4:	4798      	blx	r3
 80218c6:	2300      	movs	r3, #0
 80218c8:	e9c4 3300 	strd	r3, r3, [r4]
 80218cc:	60a3      	str	r3, [r4, #8]
 80218ce:	b006      	add	sp, #24
 80218d0:	bd10      	pop	{r4, pc}
 80218d2:	6843      	ldr	r3, [r0, #4]
 80218d4:	b9db      	cbnz	r3, 802190e <rosidl_runtime_c__String__fini+0x66>
 80218d6:	6883      	ldr	r3, [r0, #8]
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d0f8      	beq.n	80218ce <rosidl_runtime_c__String__fini+0x26>
 80218dc:	4b12      	ldr	r3, [pc, #72]	@ (8021928 <rosidl_runtime_c__String__fini+0x80>)
 80218de:	2251      	movs	r2, #81	@ 0x51
 80218e0:	2101      	movs	r1, #1
 80218e2:	4812      	ldr	r0, [pc, #72]	@ (802192c <rosidl_runtime_c__String__fini+0x84>)
 80218e4:	681b      	ldr	r3, [r3, #0]
 80218e6:	68db      	ldr	r3, [r3, #12]
 80218e8:	f000 fb8e 	bl	8022008 <fwrite>
 80218ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218f0:	f000 f84a 	bl	8021988 <exit>
 80218f4:	4770      	bx	lr
 80218f6:	4b0c      	ldr	r3, [pc, #48]	@ (8021928 <rosidl_runtime_c__String__fini+0x80>)
 80218f8:	224c      	movs	r2, #76	@ 0x4c
 80218fa:	2101      	movs	r1, #1
 80218fc:	480c      	ldr	r0, [pc, #48]	@ (8021930 <rosidl_runtime_c__String__fini+0x88>)
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	68db      	ldr	r3, [r3, #12]
 8021902:	f000 fb81 	bl	8022008 <fwrite>
 8021906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802190a:	f000 f83d 	bl	8021988 <exit>
 802190e:	4b06      	ldr	r3, [pc, #24]	@ (8021928 <rosidl_runtime_c__String__fini+0x80>)
 8021910:	224e      	movs	r2, #78	@ 0x4e
 8021912:	2101      	movs	r1, #1
 8021914:	4807      	ldr	r0, [pc, #28]	@ (8021934 <rosidl_runtime_c__String__fini+0x8c>)
 8021916:	681b      	ldr	r3, [r3, #0]
 8021918:	68db      	ldr	r3, [r3, #12]
 802191a:	f000 fb75 	bl	8022008 <fwrite>
 802191e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021922:	f000 f831 	bl	8021988 <exit>
 8021926:	bf00      	nop
 8021928:	240012bc 	.word	0x240012bc
 802192c:	08025b08 	.word	0x08025b08
 8021930:	08025a68 	.word	0x08025a68
 8021934:	08025ab8 	.word	0x08025ab8

08021938 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8021938:	3800      	subs	r0, #0
 802193a:	bf18      	it	ne
 802193c:	2001      	movne	r0, #1
 802193e:	4770      	bx	lr

08021940 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8021940:	4770      	bx	lr
 8021942:	bf00      	nop

08021944 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8021944:	3800      	subs	r0, #0
 8021946:	bf18      	it	ne
 8021948:	2001      	movne	r0, #1
 802194a:	4770      	bx	lr

0802194c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 802194c:	4770      	bx	lr
 802194e:	bf00      	nop

08021950 <calloc>:
 8021950:	4b02      	ldr	r3, [pc, #8]	@ (802195c <calloc+0xc>)
 8021952:	460a      	mov	r2, r1
 8021954:	4601      	mov	r1, r0
 8021956:	6818      	ldr	r0, [r3, #0]
 8021958:	f000 b802 	b.w	8021960 <_calloc_r>
 802195c:	240012bc 	.word	0x240012bc

08021960 <_calloc_r>:
 8021960:	b570      	push	{r4, r5, r6, lr}
 8021962:	fba1 5402 	umull	r5, r4, r1, r2
 8021966:	b93c      	cbnz	r4, 8021978 <_calloc_r+0x18>
 8021968:	4629      	mov	r1, r5
 802196a:	f000 f899 	bl	8021aa0 <_malloc_r>
 802196e:	4606      	mov	r6, r0
 8021970:	b928      	cbnz	r0, 802197e <_calloc_r+0x1e>
 8021972:	2600      	movs	r6, #0
 8021974:	4630      	mov	r0, r6
 8021976:	bd70      	pop	{r4, r5, r6, pc}
 8021978:	220c      	movs	r2, #12
 802197a:	6002      	str	r2, [r0, #0]
 802197c:	e7f9      	b.n	8021972 <_calloc_r+0x12>
 802197e:	462a      	mov	r2, r5
 8021980:	4621      	mov	r1, r4
 8021982:	f000 fcbd 	bl	8022300 <memset>
 8021986:	e7f5      	b.n	8021974 <_calloc_r+0x14>

08021988 <exit>:
 8021988:	b508      	push	{r3, lr}
 802198a:	4b06      	ldr	r3, [pc, #24]	@ (80219a4 <exit+0x1c>)
 802198c:	4604      	mov	r4, r0
 802198e:	b113      	cbz	r3, 8021996 <exit+0xe>
 8021990:	2100      	movs	r1, #0
 8021992:	f3af 8000 	nop.w
 8021996:	4b04      	ldr	r3, [pc, #16]	@ (80219a8 <exit+0x20>)
 8021998:	681b      	ldr	r3, [r3, #0]
 802199a:	b103      	cbz	r3, 802199e <exit+0x16>
 802199c:	4798      	blx	r3
 802199e:	4620      	mov	r0, r4
 80219a0:	f7e0 fe16 	bl	80025d0 <_exit>
 80219a4:	00000000 	.word	0x00000000
 80219a8:	240696e4 	.word	0x240696e4

080219ac <getenv>:
 80219ac:	b507      	push	{r0, r1, r2, lr}
 80219ae:	4b04      	ldr	r3, [pc, #16]	@ (80219c0 <getenv+0x14>)
 80219b0:	4601      	mov	r1, r0
 80219b2:	aa01      	add	r2, sp, #4
 80219b4:	6818      	ldr	r0, [r3, #0]
 80219b6:	f000 f805 	bl	80219c4 <_findenv_r>
 80219ba:	b003      	add	sp, #12
 80219bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80219c0:	240012bc 	.word	0x240012bc

080219c4 <_findenv_r>:
 80219c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219c8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8021a38 <_findenv_r+0x74>
 80219cc:	4606      	mov	r6, r0
 80219ce:	4689      	mov	r9, r1
 80219d0:	4617      	mov	r7, r2
 80219d2:	f000 fde1 	bl	8022598 <__env_lock>
 80219d6:	f8da 4000 	ldr.w	r4, [sl]
 80219da:	b134      	cbz	r4, 80219ea <_findenv_r+0x26>
 80219dc:	464b      	mov	r3, r9
 80219de:	4698      	mov	r8, r3
 80219e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80219e4:	b13a      	cbz	r2, 80219f6 <_findenv_r+0x32>
 80219e6:	2a3d      	cmp	r2, #61	@ 0x3d
 80219e8:	d1f9      	bne.n	80219de <_findenv_r+0x1a>
 80219ea:	4630      	mov	r0, r6
 80219ec:	f000 fdda 	bl	80225a4 <__env_unlock>
 80219f0:	2000      	movs	r0, #0
 80219f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219f6:	eba8 0809 	sub.w	r8, r8, r9
 80219fa:	46a3      	mov	fp, r4
 80219fc:	f854 0b04 	ldr.w	r0, [r4], #4
 8021a00:	2800      	cmp	r0, #0
 8021a02:	d0f2      	beq.n	80219ea <_findenv_r+0x26>
 8021a04:	4642      	mov	r2, r8
 8021a06:	4649      	mov	r1, r9
 8021a08:	f000 fc8f 	bl	802232a <strncmp>
 8021a0c:	2800      	cmp	r0, #0
 8021a0e:	d1f4      	bne.n	80219fa <_findenv_r+0x36>
 8021a10:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021a14:	eb03 0508 	add.w	r5, r3, r8
 8021a18:	f813 3008 	ldrb.w	r3, [r3, r8]
 8021a1c:	2b3d      	cmp	r3, #61	@ 0x3d
 8021a1e:	d1ec      	bne.n	80219fa <_findenv_r+0x36>
 8021a20:	f8da 3000 	ldr.w	r3, [sl]
 8021a24:	ebab 0303 	sub.w	r3, fp, r3
 8021a28:	109b      	asrs	r3, r3, #2
 8021a2a:	4630      	mov	r0, r6
 8021a2c:	603b      	str	r3, [r7, #0]
 8021a2e:	f000 fdb9 	bl	80225a4 <__env_unlock>
 8021a32:	1c68      	adds	r0, r5, #1
 8021a34:	e7dd      	b.n	80219f2 <_findenv_r+0x2e>
 8021a36:	bf00      	nop
 8021a38:	24000000 	.word	0x24000000

08021a3c <malloc>:
 8021a3c:	4b02      	ldr	r3, [pc, #8]	@ (8021a48 <malloc+0xc>)
 8021a3e:	4601      	mov	r1, r0
 8021a40:	6818      	ldr	r0, [r3, #0]
 8021a42:	f000 b82d 	b.w	8021aa0 <_malloc_r>
 8021a46:	bf00      	nop
 8021a48:	240012bc 	.word	0x240012bc

08021a4c <free>:
 8021a4c:	4b02      	ldr	r3, [pc, #8]	@ (8021a58 <free+0xc>)
 8021a4e:	4601      	mov	r1, r0
 8021a50:	6818      	ldr	r0, [r3, #0]
 8021a52:	f000 bdad 	b.w	80225b0 <_free_r>
 8021a56:	bf00      	nop
 8021a58:	240012bc 	.word	0x240012bc

08021a5c <sbrk_aligned>:
 8021a5c:	b570      	push	{r4, r5, r6, lr}
 8021a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8021a9c <sbrk_aligned+0x40>)
 8021a60:	460c      	mov	r4, r1
 8021a62:	6831      	ldr	r1, [r6, #0]
 8021a64:	4605      	mov	r5, r0
 8021a66:	b911      	cbnz	r1, 8021a6e <sbrk_aligned+0x12>
 8021a68:	f000 fd12 	bl	8022490 <_sbrk_r>
 8021a6c:	6030      	str	r0, [r6, #0]
 8021a6e:	4621      	mov	r1, r4
 8021a70:	4628      	mov	r0, r5
 8021a72:	f000 fd0d 	bl	8022490 <_sbrk_r>
 8021a76:	1c43      	adds	r3, r0, #1
 8021a78:	d103      	bne.n	8021a82 <sbrk_aligned+0x26>
 8021a7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021a7e:	4620      	mov	r0, r4
 8021a80:	bd70      	pop	{r4, r5, r6, pc}
 8021a82:	1cc4      	adds	r4, r0, #3
 8021a84:	f024 0403 	bic.w	r4, r4, #3
 8021a88:	42a0      	cmp	r0, r4
 8021a8a:	d0f8      	beq.n	8021a7e <sbrk_aligned+0x22>
 8021a8c:	1a21      	subs	r1, r4, r0
 8021a8e:	4628      	mov	r0, r5
 8021a90:	f000 fcfe 	bl	8022490 <_sbrk_r>
 8021a94:	3001      	adds	r0, #1
 8021a96:	d1f2      	bne.n	8021a7e <sbrk_aligned+0x22>
 8021a98:	e7ef      	b.n	8021a7a <sbrk_aligned+0x1e>
 8021a9a:	bf00      	nop
 8021a9c:	240695a4 	.word	0x240695a4

08021aa0 <_malloc_r>:
 8021aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021aa4:	1ccd      	adds	r5, r1, #3
 8021aa6:	f025 0503 	bic.w	r5, r5, #3
 8021aaa:	3508      	adds	r5, #8
 8021aac:	2d0c      	cmp	r5, #12
 8021aae:	bf38      	it	cc
 8021ab0:	250c      	movcc	r5, #12
 8021ab2:	2d00      	cmp	r5, #0
 8021ab4:	4606      	mov	r6, r0
 8021ab6:	db01      	blt.n	8021abc <_malloc_r+0x1c>
 8021ab8:	42a9      	cmp	r1, r5
 8021aba:	d904      	bls.n	8021ac6 <_malloc_r+0x26>
 8021abc:	230c      	movs	r3, #12
 8021abe:	6033      	str	r3, [r6, #0]
 8021ac0:	2000      	movs	r0, #0
 8021ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021b9c <_malloc_r+0xfc>
 8021aca:	f000 f869 	bl	8021ba0 <__malloc_lock>
 8021ace:	f8d8 3000 	ldr.w	r3, [r8]
 8021ad2:	461c      	mov	r4, r3
 8021ad4:	bb44      	cbnz	r4, 8021b28 <_malloc_r+0x88>
 8021ad6:	4629      	mov	r1, r5
 8021ad8:	4630      	mov	r0, r6
 8021ada:	f7ff ffbf 	bl	8021a5c <sbrk_aligned>
 8021ade:	1c43      	adds	r3, r0, #1
 8021ae0:	4604      	mov	r4, r0
 8021ae2:	d158      	bne.n	8021b96 <_malloc_r+0xf6>
 8021ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8021ae8:	4627      	mov	r7, r4
 8021aea:	2f00      	cmp	r7, #0
 8021aec:	d143      	bne.n	8021b76 <_malloc_r+0xd6>
 8021aee:	2c00      	cmp	r4, #0
 8021af0:	d04b      	beq.n	8021b8a <_malloc_r+0xea>
 8021af2:	6823      	ldr	r3, [r4, #0]
 8021af4:	4639      	mov	r1, r7
 8021af6:	4630      	mov	r0, r6
 8021af8:	eb04 0903 	add.w	r9, r4, r3
 8021afc:	f000 fcc8 	bl	8022490 <_sbrk_r>
 8021b00:	4581      	cmp	r9, r0
 8021b02:	d142      	bne.n	8021b8a <_malloc_r+0xea>
 8021b04:	6821      	ldr	r1, [r4, #0]
 8021b06:	1a6d      	subs	r5, r5, r1
 8021b08:	4629      	mov	r1, r5
 8021b0a:	4630      	mov	r0, r6
 8021b0c:	f7ff ffa6 	bl	8021a5c <sbrk_aligned>
 8021b10:	3001      	adds	r0, #1
 8021b12:	d03a      	beq.n	8021b8a <_malloc_r+0xea>
 8021b14:	6823      	ldr	r3, [r4, #0]
 8021b16:	442b      	add	r3, r5
 8021b18:	6023      	str	r3, [r4, #0]
 8021b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8021b1e:	685a      	ldr	r2, [r3, #4]
 8021b20:	bb62      	cbnz	r2, 8021b7c <_malloc_r+0xdc>
 8021b22:	f8c8 7000 	str.w	r7, [r8]
 8021b26:	e00f      	b.n	8021b48 <_malloc_r+0xa8>
 8021b28:	6822      	ldr	r2, [r4, #0]
 8021b2a:	1b52      	subs	r2, r2, r5
 8021b2c:	d420      	bmi.n	8021b70 <_malloc_r+0xd0>
 8021b2e:	2a0b      	cmp	r2, #11
 8021b30:	d917      	bls.n	8021b62 <_malloc_r+0xc2>
 8021b32:	1961      	adds	r1, r4, r5
 8021b34:	42a3      	cmp	r3, r4
 8021b36:	6025      	str	r5, [r4, #0]
 8021b38:	bf18      	it	ne
 8021b3a:	6059      	strne	r1, [r3, #4]
 8021b3c:	6863      	ldr	r3, [r4, #4]
 8021b3e:	bf08      	it	eq
 8021b40:	f8c8 1000 	streq.w	r1, [r8]
 8021b44:	5162      	str	r2, [r4, r5]
 8021b46:	604b      	str	r3, [r1, #4]
 8021b48:	4630      	mov	r0, r6
 8021b4a:	f000 f82f 	bl	8021bac <__malloc_unlock>
 8021b4e:	f104 000b 	add.w	r0, r4, #11
 8021b52:	1d23      	adds	r3, r4, #4
 8021b54:	f020 0007 	bic.w	r0, r0, #7
 8021b58:	1ac2      	subs	r2, r0, r3
 8021b5a:	bf1c      	itt	ne
 8021b5c:	1a1b      	subne	r3, r3, r0
 8021b5e:	50a3      	strne	r3, [r4, r2]
 8021b60:	e7af      	b.n	8021ac2 <_malloc_r+0x22>
 8021b62:	6862      	ldr	r2, [r4, #4]
 8021b64:	42a3      	cmp	r3, r4
 8021b66:	bf0c      	ite	eq
 8021b68:	f8c8 2000 	streq.w	r2, [r8]
 8021b6c:	605a      	strne	r2, [r3, #4]
 8021b6e:	e7eb      	b.n	8021b48 <_malloc_r+0xa8>
 8021b70:	4623      	mov	r3, r4
 8021b72:	6864      	ldr	r4, [r4, #4]
 8021b74:	e7ae      	b.n	8021ad4 <_malloc_r+0x34>
 8021b76:	463c      	mov	r4, r7
 8021b78:	687f      	ldr	r7, [r7, #4]
 8021b7a:	e7b6      	b.n	8021aea <_malloc_r+0x4a>
 8021b7c:	461a      	mov	r2, r3
 8021b7e:	685b      	ldr	r3, [r3, #4]
 8021b80:	42a3      	cmp	r3, r4
 8021b82:	d1fb      	bne.n	8021b7c <_malloc_r+0xdc>
 8021b84:	2300      	movs	r3, #0
 8021b86:	6053      	str	r3, [r2, #4]
 8021b88:	e7de      	b.n	8021b48 <_malloc_r+0xa8>
 8021b8a:	230c      	movs	r3, #12
 8021b8c:	6033      	str	r3, [r6, #0]
 8021b8e:	4630      	mov	r0, r6
 8021b90:	f000 f80c 	bl	8021bac <__malloc_unlock>
 8021b94:	e794      	b.n	8021ac0 <_malloc_r+0x20>
 8021b96:	6005      	str	r5, [r0, #0]
 8021b98:	e7d6      	b.n	8021b48 <_malloc_r+0xa8>
 8021b9a:	bf00      	nop
 8021b9c:	240695a8 	.word	0x240695a8

08021ba0 <__malloc_lock>:
 8021ba0:	4801      	ldr	r0, [pc, #4]	@ (8021ba8 <__malloc_lock+0x8>)
 8021ba2:	f000 bcc2 	b.w	802252a <__retarget_lock_acquire_recursive>
 8021ba6:	bf00      	nop
 8021ba8:	240696ed 	.word	0x240696ed

08021bac <__malloc_unlock>:
 8021bac:	4801      	ldr	r0, [pc, #4]	@ (8021bb4 <__malloc_unlock+0x8>)
 8021bae:	f000 bcbd 	b.w	802252c <__retarget_lock_release_recursive>
 8021bb2:	bf00      	nop
 8021bb4:	240696ed 	.word	0x240696ed

08021bb8 <srand>:
 8021bb8:	b538      	push	{r3, r4, r5, lr}
 8021bba:	4b10      	ldr	r3, [pc, #64]	@ (8021bfc <srand+0x44>)
 8021bbc:	681d      	ldr	r5, [r3, #0]
 8021bbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021bc0:	4604      	mov	r4, r0
 8021bc2:	b9b3      	cbnz	r3, 8021bf2 <srand+0x3a>
 8021bc4:	2018      	movs	r0, #24
 8021bc6:	f7ff ff39 	bl	8021a3c <malloc>
 8021bca:	4602      	mov	r2, r0
 8021bcc:	6328      	str	r0, [r5, #48]	@ 0x30
 8021bce:	b920      	cbnz	r0, 8021bda <srand+0x22>
 8021bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8021c00 <srand+0x48>)
 8021bd2:	480c      	ldr	r0, [pc, #48]	@ (8021c04 <srand+0x4c>)
 8021bd4:	2146      	movs	r1, #70	@ 0x46
 8021bd6:	f000 fcc1 	bl	802255c <__assert_func>
 8021bda:	490b      	ldr	r1, [pc, #44]	@ (8021c08 <srand+0x50>)
 8021bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8021c0c <srand+0x54>)
 8021bde:	e9c0 1300 	strd	r1, r3, [r0]
 8021be2:	4b0b      	ldr	r3, [pc, #44]	@ (8021c10 <srand+0x58>)
 8021be4:	6083      	str	r3, [r0, #8]
 8021be6:	230b      	movs	r3, #11
 8021be8:	8183      	strh	r3, [r0, #12]
 8021bea:	2100      	movs	r1, #0
 8021bec:	2001      	movs	r0, #1
 8021bee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021bf2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021bf4:	2200      	movs	r2, #0
 8021bf6:	611c      	str	r4, [r3, #16]
 8021bf8:	615a      	str	r2, [r3, #20]
 8021bfa:	bd38      	pop	{r3, r4, r5, pc}
 8021bfc:	240012bc 	.word	0x240012bc
 8021c00:	08025b5a 	.word	0x08025b5a
 8021c04:	08025b71 	.word	0x08025b71
 8021c08:	abcd330e 	.word	0xabcd330e
 8021c0c:	e66d1234 	.word	0xe66d1234
 8021c10:	0005deec 	.word	0x0005deec

08021c14 <rand>:
 8021c14:	4b16      	ldr	r3, [pc, #88]	@ (8021c70 <rand+0x5c>)
 8021c16:	b510      	push	{r4, lr}
 8021c18:	681c      	ldr	r4, [r3, #0]
 8021c1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021c1c:	b9b3      	cbnz	r3, 8021c4c <rand+0x38>
 8021c1e:	2018      	movs	r0, #24
 8021c20:	f7ff ff0c 	bl	8021a3c <malloc>
 8021c24:	4602      	mov	r2, r0
 8021c26:	6320      	str	r0, [r4, #48]	@ 0x30
 8021c28:	b920      	cbnz	r0, 8021c34 <rand+0x20>
 8021c2a:	4b12      	ldr	r3, [pc, #72]	@ (8021c74 <rand+0x60>)
 8021c2c:	4812      	ldr	r0, [pc, #72]	@ (8021c78 <rand+0x64>)
 8021c2e:	2152      	movs	r1, #82	@ 0x52
 8021c30:	f000 fc94 	bl	802255c <__assert_func>
 8021c34:	4911      	ldr	r1, [pc, #68]	@ (8021c7c <rand+0x68>)
 8021c36:	4b12      	ldr	r3, [pc, #72]	@ (8021c80 <rand+0x6c>)
 8021c38:	e9c0 1300 	strd	r1, r3, [r0]
 8021c3c:	4b11      	ldr	r3, [pc, #68]	@ (8021c84 <rand+0x70>)
 8021c3e:	6083      	str	r3, [r0, #8]
 8021c40:	230b      	movs	r3, #11
 8021c42:	8183      	strh	r3, [r0, #12]
 8021c44:	2100      	movs	r1, #0
 8021c46:	2001      	movs	r0, #1
 8021c48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021c4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021c4e:	480e      	ldr	r0, [pc, #56]	@ (8021c88 <rand+0x74>)
 8021c50:	690b      	ldr	r3, [r1, #16]
 8021c52:	694c      	ldr	r4, [r1, #20]
 8021c54:	4a0d      	ldr	r2, [pc, #52]	@ (8021c8c <rand+0x78>)
 8021c56:	4358      	muls	r0, r3
 8021c58:	fb02 0004 	mla	r0, r2, r4, r0
 8021c5c:	fba3 3202 	umull	r3, r2, r3, r2
 8021c60:	3301      	adds	r3, #1
 8021c62:	eb40 0002 	adc.w	r0, r0, r2
 8021c66:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021c6a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021c6e:	bd10      	pop	{r4, pc}
 8021c70:	240012bc 	.word	0x240012bc
 8021c74:	08025b5a 	.word	0x08025b5a
 8021c78:	08025b71 	.word	0x08025b71
 8021c7c:	abcd330e 	.word	0xabcd330e
 8021c80:	e66d1234 	.word	0xe66d1234
 8021c84:	0005deec 	.word	0x0005deec
 8021c88:	5851f42d 	.word	0x5851f42d
 8021c8c:	4c957f2d 	.word	0x4c957f2d

08021c90 <realloc>:
 8021c90:	4b02      	ldr	r3, [pc, #8]	@ (8021c9c <realloc+0xc>)
 8021c92:	460a      	mov	r2, r1
 8021c94:	4601      	mov	r1, r0
 8021c96:	6818      	ldr	r0, [r3, #0]
 8021c98:	f000 b802 	b.w	8021ca0 <_realloc_r>
 8021c9c:	240012bc 	.word	0x240012bc

08021ca0 <_realloc_r>:
 8021ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ca4:	4680      	mov	r8, r0
 8021ca6:	4615      	mov	r5, r2
 8021ca8:	460c      	mov	r4, r1
 8021caa:	b921      	cbnz	r1, 8021cb6 <_realloc_r+0x16>
 8021cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021cb0:	4611      	mov	r1, r2
 8021cb2:	f7ff bef5 	b.w	8021aa0 <_malloc_r>
 8021cb6:	b92a      	cbnz	r2, 8021cc4 <_realloc_r+0x24>
 8021cb8:	f000 fc7a 	bl	80225b0 <_free_r>
 8021cbc:	2400      	movs	r4, #0
 8021cbe:	4620      	mov	r0, r4
 8021cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021cc4:	f000 fcbe 	bl	8022644 <_malloc_usable_size_r>
 8021cc8:	4285      	cmp	r5, r0
 8021cca:	4606      	mov	r6, r0
 8021ccc:	d802      	bhi.n	8021cd4 <_realloc_r+0x34>
 8021cce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021cd2:	d8f4      	bhi.n	8021cbe <_realloc_r+0x1e>
 8021cd4:	4629      	mov	r1, r5
 8021cd6:	4640      	mov	r0, r8
 8021cd8:	f7ff fee2 	bl	8021aa0 <_malloc_r>
 8021cdc:	4607      	mov	r7, r0
 8021cde:	2800      	cmp	r0, #0
 8021ce0:	d0ec      	beq.n	8021cbc <_realloc_r+0x1c>
 8021ce2:	42b5      	cmp	r5, r6
 8021ce4:	462a      	mov	r2, r5
 8021ce6:	4621      	mov	r1, r4
 8021ce8:	bf28      	it	cs
 8021cea:	4632      	movcs	r2, r6
 8021cec:	f000 fc27 	bl	802253e <memcpy>
 8021cf0:	4621      	mov	r1, r4
 8021cf2:	4640      	mov	r0, r8
 8021cf4:	f000 fc5c 	bl	80225b0 <_free_r>
 8021cf8:	463c      	mov	r4, r7
 8021cfa:	e7e0      	b.n	8021cbe <_realloc_r+0x1e>

08021cfc <_strtoul_l.constprop.0>:
 8021cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021d00:	4e34      	ldr	r6, [pc, #208]	@ (8021dd4 <_strtoul_l.constprop.0+0xd8>)
 8021d02:	4686      	mov	lr, r0
 8021d04:	460d      	mov	r5, r1
 8021d06:	4628      	mov	r0, r5
 8021d08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021d0c:	5d37      	ldrb	r7, [r6, r4]
 8021d0e:	f017 0708 	ands.w	r7, r7, #8
 8021d12:	d1f8      	bne.n	8021d06 <_strtoul_l.constprop.0+0xa>
 8021d14:	2c2d      	cmp	r4, #45	@ 0x2d
 8021d16:	d12f      	bne.n	8021d78 <_strtoul_l.constprop.0+0x7c>
 8021d18:	782c      	ldrb	r4, [r5, #0]
 8021d1a:	2701      	movs	r7, #1
 8021d1c:	1c85      	adds	r5, r0, #2
 8021d1e:	f033 0010 	bics.w	r0, r3, #16
 8021d22:	d109      	bne.n	8021d38 <_strtoul_l.constprop.0+0x3c>
 8021d24:	2c30      	cmp	r4, #48	@ 0x30
 8021d26:	d12c      	bne.n	8021d82 <_strtoul_l.constprop.0+0x86>
 8021d28:	7828      	ldrb	r0, [r5, #0]
 8021d2a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021d2e:	2858      	cmp	r0, #88	@ 0x58
 8021d30:	d127      	bne.n	8021d82 <_strtoul_l.constprop.0+0x86>
 8021d32:	786c      	ldrb	r4, [r5, #1]
 8021d34:	2310      	movs	r3, #16
 8021d36:	3502      	adds	r5, #2
 8021d38:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8021d3c:	2600      	movs	r6, #0
 8021d3e:	fbb8 f8f3 	udiv	r8, r8, r3
 8021d42:	fb03 f908 	mul.w	r9, r3, r8
 8021d46:	ea6f 0909 	mvn.w	r9, r9
 8021d4a:	4630      	mov	r0, r6
 8021d4c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021d50:	f1bc 0f09 	cmp.w	ip, #9
 8021d54:	d81c      	bhi.n	8021d90 <_strtoul_l.constprop.0+0x94>
 8021d56:	4664      	mov	r4, ip
 8021d58:	42a3      	cmp	r3, r4
 8021d5a:	dd2a      	ble.n	8021db2 <_strtoul_l.constprop.0+0xb6>
 8021d5c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8021d60:	d007      	beq.n	8021d72 <_strtoul_l.constprop.0+0x76>
 8021d62:	4580      	cmp	r8, r0
 8021d64:	d322      	bcc.n	8021dac <_strtoul_l.constprop.0+0xb0>
 8021d66:	d101      	bne.n	8021d6c <_strtoul_l.constprop.0+0x70>
 8021d68:	45a1      	cmp	r9, r4
 8021d6a:	db1f      	blt.n	8021dac <_strtoul_l.constprop.0+0xb0>
 8021d6c:	fb00 4003 	mla	r0, r0, r3, r4
 8021d70:	2601      	movs	r6, #1
 8021d72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021d76:	e7e9      	b.n	8021d4c <_strtoul_l.constprop.0+0x50>
 8021d78:	2c2b      	cmp	r4, #43	@ 0x2b
 8021d7a:	bf04      	itt	eq
 8021d7c:	782c      	ldrbeq	r4, [r5, #0]
 8021d7e:	1c85      	addeq	r5, r0, #2
 8021d80:	e7cd      	b.n	8021d1e <_strtoul_l.constprop.0+0x22>
 8021d82:	2b00      	cmp	r3, #0
 8021d84:	d1d8      	bne.n	8021d38 <_strtoul_l.constprop.0+0x3c>
 8021d86:	2c30      	cmp	r4, #48	@ 0x30
 8021d88:	bf0c      	ite	eq
 8021d8a:	2308      	moveq	r3, #8
 8021d8c:	230a      	movne	r3, #10
 8021d8e:	e7d3      	b.n	8021d38 <_strtoul_l.constprop.0+0x3c>
 8021d90:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021d94:	f1bc 0f19 	cmp.w	ip, #25
 8021d98:	d801      	bhi.n	8021d9e <_strtoul_l.constprop.0+0xa2>
 8021d9a:	3c37      	subs	r4, #55	@ 0x37
 8021d9c:	e7dc      	b.n	8021d58 <_strtoul_l.constprop.0+0x5c>
 8021d9e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021da2:	f1bc 0f19 	cmp.w	ip, #25
 8021da6:	d804      	bhi.n	8021db2 <_strtoul_l.constprop.0+0xb6>
 8021da8:	3c57      	subs	r4, #87	@ 0x57
 8021daa:	e7d5      	b.n	8021d58 <_strtoul_l.constprop.0+0x5c>
 8021dac:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8021db0:	e7df      	b.n	8021d72 <_strtoul_l.constprop.0+0x76>
 8021db2:	1c73      	adds	r3, r6, #1
 8021db4:	d106      	bne.n	8021dc4 <_strtoul_l.constprop.0+0xc8>
 8021db6:	2322      	movs	r3, #34	@ 0x22
 8021db8:	f8ce 3000 	str.w	r3, [lr]
 8021dbc:	4630      	mov	r0, r6
 8021dbe:	b932      	cbnz	r2, 8021dce <_strtoul_l.constprop.0+0xd2>
 8021dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021dc4:	b107      	cbz	r7, 8021dc8 <_strtoul_l.constprop.0+0xcc>
 8021dc6:	4240      	negs	r0, r0
 8021dc8:	2a00      	cmp	r2, #0
 8021dca:	d0f9      	beq.n	8021dc0 <_strtoul_l.constprop.0+0xc4>
 8021dcc:	b106      	cbz	r6, 8021dd0 <_strtoul_l.constprop.0+0xd4>
 8021dce:	1e69      	subs	r1, r5, #1
 8021dd0:	6011      	str	r1, [r2, #0]
 8021dd2:	e7f5      	b.n	8021dc0 <_strtoul_l.constprop.0+0xc4>
 8021dd4:	08025bca 	.word	0x08025bca

08021dd8 <strtoul>:
 8021dd8:	4613      	mov	r3, r2
 8021dda:	460a      	mov	r2, r1
 8021ddc:	4601      	mov	r1, r0
 8021dde:	4802      	ldr	r0, [pc, #8]	@ (8021de8 <strtoul+0x10>)
 8021de0:	6800      	ldr	r0, [r0, #0]
 8021de2:	f7ff bf8b 	b.w	8021cfc <_strtoul_l.constprop.0>
 8021de6:	bf00      	nop
 8021de8:	240012bc 	.word	0x240012bc

08021dec <std>:
 8021dec:	2300      	movs	r3, #0
 8021dee:	b510      	push	{r4, lr}
 8021df0:	4604      	mov	r4, r0
 8021df2:	e9c0 3300 	strd	r3, r3, [r0]
 8021df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021dfa:	6083      	str	r3, [r0, #8]
 8021dfc:	8181      	strh	r1, [r0, #12]
 8021dfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8021e00:	81c2      	strh	r2, [r0, #14]
 8021e02:	6183      	str	r3, [r0, #24]
 8021e04:	4619      	mov	r1, r3
 8021e06:	2208      	movs	r2, #8
 8021e08:	305c      	adds	r0, #92	@ 0x5c
 8021e0a:	f000 fa79 	bl	8022300 <memset>
 8021e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8021e44 <std+0x58>)
 8021e10:	6263      	str	r3, [r4, #36]	@ 0x24
 8021e12:	4b0d      	ldr	r3, [pc, #52]	@ (8021e48 <std+0x5c>)
 8021e14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021e16:	4b0d      	ldr	r3, [pc, #52]	@ (8021e4c <std+0x60>)
 8021e18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8021e50 <std+0x64>)
 8021e1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8021e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8021e54 <std+0x68>)
 8021e20:	6224      	str	r4, [r4, #32]
 8021e22:	429c      	cmp	r4, r3
 8021e24:	d006      	beq.n	8021e34 <std+0x48>
 8021e26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021e2a:	4294      	cmp	r4, r2
 8021e2c:	d002      	beq.n	8021e34 <std+0x48>
 8021e2e:	33d0      	adds	r3, #208	@ 0xd0
 8021e30:	429c      	cmp	r4, r3
 8021e32:	d105      	bne.n	8021e40 <std+0x54>
 8021e34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e3c:	f000 bb74 	b.w	8022528 <__retarget_lock_init_recursive>
 8021e40:	bd10      	pop	{r4, pc}
 8021e42:	bf00      	nop
 8021e44:	0802208d 	.word	0x0802208d
 8021e48:	080220af 	.word	0x080220af
 8021e4c:	080220e7 	.word	0x080220e7
 8021e50:	0802210b 	.word	0x0802210b
 8021e54:	240695ac 	.word	0x240695ac

08021e58 <stdio_exit_handler>:
 8021e58:	4a02      	ldr	r2, [pc, #8]	@ (8021e64 <stdio_exit_handler+0xc>)
 8021e5a:	4903      	ldr	r1, [pc, #12]	@ (8021e68 <stdio_exit_handler+0x10>)
 8021e5c:	4803      	ldr	r0, [pc, #12]	@ (8021e6c <stdio_exit_handler+0x14>)
 8021e5e:	f000 b869 	b.w	8021f34 <_fwalk_sglue>
 8021e62:	bf00      	nop
 8021e64:	240012b0 	.word	0x240012b0
 8021e68:	08022d29 	.word	0x08022d29
 8021e6c:	240012c0 	.word	0x240012c0

08021e70 <cleanup_stdio>:
 8021e70:	6841      	ldr	r1, [r0, #4]
 8021e72:	4b0c      	ldr	r3, [pc, #48]	@ (8021ea4 <cleanup_stdio+0x34>)
 8021e74:	4299      	cmp	r1, r3
 8021e76:	b510      	push	{r4, lr}
 8021e78:	4604      	mov	r4, r0
 8021e7a:	d001      	beq.n	8021e80 <cleanup_stdio+0x10>
 8021e7c:	f000 ff54 	bl	8022d28 <_fflush_r>
 8021e80:	68a1      	ldr	r1, [r4, #8]
 8021e82:	4b09      	ldr	r3, [pc, #36]	@ (8021ea8 <cleanup_stdio+0x38>)
 8021e84:	4299      	cmp	r1, r3
 8021e86:	d002      	beq.n	8021e8e <cleanup_stdio+0x1e>
 8021e88:	4620      	mov	r0, r4
 8021e8a:	f000 ff4d 	bl	8022d28 <_fflush_r>
 8021e8e:	68e1      	ldr	r1, [r4, #12]
 8021e90:	4b06      	ldr	r3, [pc, #24]	@ (8021eac <cleanup_stdio+0x3c>)
 8021e92:	4299      	cmp	r1, r3
 8021e94:	d004      	beq.n	8021ea0 <cleanup_stdio+0x30>
 8021e96:	4620      	mov	r0, r4
 8021e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e9c:	f000 bf44 	b.w	8022d28 <_fflush_r>
 8021ea0:	bd10      	pop	{r4, pc}
 8021ea2:	bf00      	nop
 8021ea4:	240695ac 	.word	0x240695ac
 8021ea8:	24069614 	.word	0x24069614
 8021eac:	2406967c 	.word	0x2406967c

08021eb0 <global_stdio_init.part.0>:
 8021eb0:	b510      	push	{r4, lr}
 8021eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8021ee0 <global_stdio_init.part.0+0x30>)
 8021eb4:	4c0b      	ldr	r4, [pc, #44]	@ (8021ee4 <global_stdio_init.part.0+0x34>)
 8021eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8021ee8 <global_stdio_init.part.0+0x38>)
 8021eb8:	601a      	str	r2, [r3, #0]
 8021eba:	4620      	mov	r0, r4
 8021ebc:	2200      	movs	r2, #0
 8021ebe:	2104      	movs	r1, #4
 8021ec0:	f7ff ff94 	bl	8021dec <std>
 8021ec4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021ec8:	2201      	movs	r2, #1
 8021eca:	2109      	movs	r1, #9
 8021ecc:	f7ff ff8e 	bl	8021dec <std>
 8021ed0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021ed4:	2202      	movs	r2, #2
 8021ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021eda:	2112      	movs	r1, #18
 8021edc:	f7ff bf86 	b.w	8021dec <std>
 8021ee0:	240696e4 	.word	0x240696e4
 8021ee4:	240695ac 	.word	0x240695ac
 8021ee8:	08021e59 	.word	0x08021e59

08021eec <__sfp_lock_acquire>:
 8021eec:	4801      	ldr	r0, [pc, #4]	@ (8021ef4 <__sfp_lock_acquire+0x8>)
 8021eee:	f000 bb1c 	b.w	802252a <__retarget_lock_acquire_recursive>
 8021ef2:	bf00      	nop
 8021ef4:	240696ee 	.word	0x240696ee

08021ef8 <__sfp_lock_release>:
 8021ef8:	4801      	ldr	r0, [pc, #4]	@ (8021f00 <__sfp_lock_release+0x8>)
 8021efa:	f000 bb17 	b.w	802252c <__retarget_lock_release_recursive>
 8021efe:	bf00      	nop
 8021f00:	240696ee 	.word	0x240696ee

08021f04 <__sinit>:
 8021f04:	b510      	push	{r4, lr}
 8021f06:	4604      	mov	r4, r0
 8021f08:	f7ff fff0 	bl	8021eec <__sfp_lock_acquire>
 8021f0c:	6a23      	ldr	r3, [r4, #32]
 8021f0e:	b11b      	cbz	r3, 8021f18 <__sinit+0x14>
 8021f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f14:	f7ff bff0 	b.w	8021ef8 <__sfp_lock_release>
 8021f18:	4b04      	ldr	r3, [pc, #16]	@ (8021f2c <__sinit+0x28>)
 8021f1a:	6223      	str	r3, [r4, #32]
 8021f1c:	4b04      	ldr	r3, [pc, #16]	@ (8021f30 <__sinit+0x2c>)
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	2b00      	cmp	r3, #0
 8021f22:	d1f5      	bne.n	8021f10 <__sinit+0xc>
 8021f24:	f7ff ffc4 	bl	8021eb0 <global_stdio_init.part.0>
 8021f28:	e7f2      	b.n	8021f10 <__sinit+0xc>
 8021f2a:	bf00      	nop
 8021f2c:	08021e71 	.word	0x08021e71
 8021f30:	240696e4 	.word	0x240696e4

08021f34 <_fwalk_sglue>:
 8021f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f38:	4607      	mov	r7, r0
 8021f3a:	4688      	mov	r8, r1
 8021f3c:	4614      	mov	r4, r2
 8021f3e:	2600      	movs	r6, #0
 8021f40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021f44:	f1b9 0901 	subs.w	r9, r9, #1
 8021f48:	d505      	bpl.n	8021f56 <_fwalk_sglue+0x22>
 8021f4a:	6824      	ldr	r4, [r4, #0]
 8021f4c:	2c00      	cmp	r4, #0
 8021f4e:	d1f7      	bne.n	8021f40 <_fwalk_sglue+0xc>
 8021f50:	4630      	mov	r0, r6
 8021f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f56:	89ab      	ldrh	r3, [r5, #12]
 8021f58:	2b01      	cmp	r3, #1
 8021f5a:	d907      	bls.n	8021f6c <_fwalk_sglue+0x38>
 8021f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f60:	3301      	adds	r3, #1
 8021f62:	d003      	beq.n	8021f6c <_fwalk_sglue+0x38>
 8021f64:	4629      	mov	r1, r5
 8021f66:	4638      	mov	r0, r7
 8021f68:	47c0      	blx	r8
 8021f6a:	4306      	orrs	r6, r0
 8021f6c:	3568      	adds	r5, #104	@ 0x68
 8021f6e:	e7e9      	b.n	8021f44 <_fwalk_sglue+0x10>

08021f70 <_fwrite_r>:
 8021f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f74:	9c08      	ldr	r4, [sp, #32]
 8021f76:	468a      	mov	sl, r1
 8021f78:	4690      	mov	r8, r2
 8021f7a:	fb02 f903 	mul.w	r9, r2, r3
 8021f7e:	4606      	mov	r6, r0
 8021f80:	b118      	cbz	r0, 8021f8a <_fwrite_r+0x1a>
 8021f82:	6a03      	ldr	r3, [r0, #32]
 8021f84:	b90b      	cbnz	r3, 8021f8a <_fwrite_r+0x1a>
 8021f86:	f7ff ffbd 	bl	8021f04 <__sinit>
 8021f8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021f8c:	07dd      	lsls	r5, r3, #31
 8021f8e:	d405      	bmi.n	8021f9c <_fwrite_r+0x2c>
 8021f90:	89a3      	ldrh	r3, [r4, #12]
 8021f92:	0598      	lsls	r0, r3, #22
 8021f94:	d402      	bmi.n	8021f9c <_fwrite_r+0x2c>
 8021f96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f98:	f000 fac7 	bl	802252a <__retarget_lock_acquire_recursive>
 8021f9c:	89a3      	ldrh	r3, [r4, #12]
 8021f9e:	0719      	lsls	r1, r3, #28
 8021fa0:	d516      	bpl.n	8021fd0 <_fwrite_r+0x60>
 8021fa2:	6923      	ldr	r3, [r4, #16]
 8021fa4:	b1a3      	cbz	r3, 8021fd0 <_fwrite_r+0x60>
 8021fa6:	2500      	movs	r5, #0
 8021fa8:	454d      	cmp	r5, r9
 8021faa:	d01f      	beq.n	8021fec <_fwrite_r+0x7c>
 8021fac:	68a7      	ldr	r7, [r4, #8]
 8021fae:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8021fb2:	3f01      	subs	r7, #1
 8021fb4:	2f00      	cmp	r7, #0
 8021fb6:	60a7      	str	r7, [r4, #8]
 8021fb8:	da04      	bge.n	8021fc4 <_fwrite_r+0x54>
 8021fba:	69a3      	ldr	r3, [r4, #24]
 8021fbc:	429f      	cmp	r7, r3
 8021fbe:	db0f      	blt.n	8021fe0 <_fwrite_r+0x70>
 8021fc0:	290a      	cmp	r1, #10
 8021fc2:	d00d      	beq.n	8021fe0 <_fwrite_r+0x70>
 8021fc4:	6823      	ldr	r3, [r4, #0]
 8021fc6:	1c5a      	adds	r2, r3, #1
 8021fc8:	6022      	str	r2, [r4, #0]
 8021fca:	7019      	strb	r1, [r3, #0]
 8021fcc:	3501      	adds	r5, #1
 8021fce:	e7eb      	b.n	8021fa8 <_fwrite_r+0x38>
 8021fd0:	4621      	mov	r1, r4
 8021fd2:	4630      	mov	r0, r6
 8021fd4:	f000 f914 	bl	8022200 <__swsetup_r>
 8021fd8:	2800      	cmp	r0, #0
 8021fda:	d0e4      	beq.n	8021fa6 <_fwrite_r+0x36>
 8021fdc:	2500      	movs	r5, #0
 8021fde:	e005      	b.n	8021fec <_fwrite_r+0x7c>
 8021fe0:	4622      	mov	r2, r4
 8021fe2:	4630      	mov	r0, r6
 8021fe4:	f000 f8ce 	bl	8022184 <__swbuf_r>
 8021fe8:	3001      	adds	r0, #1
 8021fea:	d1ef      	bne.n	8021fcc <_fwrite_r+0x5c>
 8021fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021fee:	07da      	lsls	r2, r3, #31
 8021ff0:	d405      	bmi.n	8021ffe <_fwrite_r+0x8e>
 8021ff2:	89a3      	ldrh	r3, [r4, #12]
 8021ff4:	059b      	lsls	r3, r3, #22
 8021ff6:	d402      	bmi.n	8021ffe <_fwrite_r+0x8e>
 8021ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021ffa:	f000 fa97 	bl	802252c <__retarget_lock_release_recursive>
 8021ffe:	fbb5 f0f8 	udiv	r0, r5, r8
 8022002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08022008 <fwrite>:
 8022008:	b507      	push	{r0, r1, r2, lr}
 802200a:	9300      	str	r3, [sp, #0]
 802200c:	4613      	mov	r3, r2
 802200e:	460a      	mov	r2, r1
 8022010:	4601      	mov	r1, r0
 8022012:	4803      	ldr	r0, [pc, #12]	@ (8022020 <fwrite+0x18>)
 8022014:	6800      	ldr	r0, [r0, #0]
 8022016:	f7ff ffab 	bl	8021f70 <_fwrite_r>
 802201a:	b003      	add	sp, #12
 802201c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022020:	240012bc 	.word	0x240012bc

08022024 <sniprintf>:
 8022024:	b40c      	push	{r2, r3}
 8022026:	b530      	push	{r4, r5, lr}
 8022028:	4b17      	ldr	r3, [pc, #92]	@ (8022088 <sniprintf+0x64>)
 802202a:	1e0c      	subs	r4, r1, #0
 802202c:	681d      	ldr	r5, [r3, #0]
 802202e:	b09d      	sub	sp, #116	@ 0x74
 8022030:	da08      	bge.n	8022044 <sniprintf+0x20>
 8022032:	238b      	movs	r3, #139	@ 0x8b
 8022034:	602b      	str	r3, [r5, #0]
 8022036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802203a:	b01d      	add	sp, #116	@ 0x74
 802203c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022040:	b002      	add	sp, #8
 8022042:	4770      	bx	lr
 8022044:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022048:	f8ad 3014 	strh.w	r3, [sp, #20]
 802204c:	bf14      	ite	ne
 802204e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8022052:	4623      	moveq	r3, r4
 8022054:	9304      	str	r3, [sp, #16]
 8022056:	9307      	str	r3, [sp, #28]
 8022058:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802205c:	9002      	str	r0, [sp, #8]
 802205e:	9006      	str	r0, [sp, #24]
 8022060:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022064:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022066:	ab21      	add	r3, sp, #132	@ 0x84
 8022068:	a902      	add	r1, sp, #8
 802206a:	4628      	mov	r0, r5
 802206c:	9301      	str	r3, [sp, #4]
 802206e:	f000 fb4d 	bl	802270c <_svfiprintf_r>
 8022072:	1c43      	adds	r3, r0, #1
 8022074:	bfbc      	itt	lt
 8022076:	238b      	movlt	r3, #139	@ 0x8b
 8022078:	602b      	strlt	r3, [r5, #0]
 802207a:	2c00      	cmp	r4, #0
 802207c:	d0dd      	beq.n	802203a <sniprintf+0x16>
 802207e:	9b02      	ldr	r3, [sp, #8]
 8022080:	2200      	movs	r2, #0
 8022082:	701a      	strb	r2, [r3, #0]
 8022084:	e7d9      	b.n	802203a <sniprintf+0x16>
 8022086:	bf00      	nop
 8022088:	240012bc 	.word	0x240012bc

0802208c <__sread>:
 802208c:	b510      	push	{r4, lr}
 802208e:	460c      	mov	r4, r1
 8022090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022094:	f000 f9ea 	bl	802246c <_read_r>
 8022098:	2800      	cmp	r0, #0
 802209a:	bfab      	itete	ge
 802209c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802209e:	89a3      	ldrhlt	r3, [r4, #12]
 80220a0:	181b      	addge	r3, r3, r0
 80220a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80220a6:	bfac      	ite	ge
 80220a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80220aa:	81a3      	strhlt	r3, [r4, #12]
 80220ac:	bd10      	pop	{r4, pc}

080220ae <__swrite>:
 80220ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220b2:	461f      	mov	r7, r3
 80220b4:	898b      	ldrh	r3, [r1, #12]
 80220b6:	05db      	lsls	r3, r3, #23
 80220b8:	4605      	mov	r5, r0
 80220ba:	460c      	mov	r4, r1
 80220bc:	4616      	mov	r6, r2
 80220be:	d505      	bpl.n	80220cc <__swrite+0x1e>
 80220c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220c4:	2302      	movs	r3, #2
 80220c6:	2200      	movs	r2, #0
 80220c8:	f000 f9be 	bl	8022448 <_lseek_r>
 80220cc:	89a3      	ldrh	r3, [r4, #12]
 80220ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80220d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80220d6:	81a3      	strh	r3, [r4, #12]
 80220d8:	4632      	mov	r2, r6
 80220da:	463b      	mov	r3, r7
 80220dc:	4628      	mov	r0, r5
 80220de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80220e2:	f000 b9e5 	b.w	80224b0 <_write_r>

080220e6 <__sseek>:
 80220e6:	b510      	push	{r4, lr}
 80220e8:	460c      	mov	r4, r1
 80220ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220ee:	f000 f9ab 	bl	8022448 <_lseek_r>
 80220f2:	1c43      	adds	r3, r0, #1
 80220f4:	89a3      	ldrh	r3, [r4, #12]
 80220f6:	bf15      	itete	ne
 80220f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80220fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80220fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022102:	81a3      	strheq	r3, [r4, #12]
 8022104:	bf18      	it	ne
 8022106:	81a3      	strhne	r3, [r4, #12]
 8022108:	bd10      	pop	{r4, pc}

0802210a <__sclose>:
 802210a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802210e:	f000 b935 	b.w	802237c <_close_r>

08022112 <_vsniprintf_r>:
 8022112:	b530      	push	{r4, r5, lr}
 8022114:	4614      	mov	r4, r2
 8022116:	2c00      	cmp	r4, #0
 8022118:	b09b      	sub	sp, #108	@ 0x6c
 802211a:	4605      	mov	r5, r0
 802211c:	461a      	mov	r2, r3
 802211e:	da05      	bge.n	802212c <_vsniprintf_r+0x1a>
 8022120:	238b      	movs	r3, #139	@ 0x8b
 8022122:	6003      	str	r3, [r0, #0]
 8022124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022128:	b01b      	add	sp, #108	@ 0x6c
 802212a:	bd30      	pop	{r4, r5, pc}
 802212c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022130:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022134:	bf14      	ite	ne
 8022136:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802213a:	4623      	moveq	r3, r4
 802213c:	9302      	str	r3, [sp, #8]
 802213e:	9305      	str	r3, [sp, #20]
 8022140:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022144:	9100      	str	r1, [sp, #0]
 8022146:	9104      	str	r1, [sp, #16]
 8022148:	f8ad 300e 	strh.w	r3, [sp, #14]
 802214c:	4669      	mov	r1, sp
 802214e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022150:	f000 fadc 	bl	802270c <_svfiprintf_r>
 8022154:	1c43      	adds	r3, r0, #1
 8022156:	bfbc      	itt	lt
 8022158:	238b      	movlt	r3, #139	@ 0x8b
 802215a:	602b      	strlt	r3, [r5, #0]
 802215c:	2c00      	cmp	r4, #0
 802215e:	d0e3      	beq.n	8022128 <_vsniprintf_r+0x16>
 8022160:	9b00      	ldr	r3, [sp, #0]
 8022162:	2200      	movs	r2, #0
 8022164:	701a      	strb	r2, [r3, #0]
 8022166:	e7df      	b.n	8022128 <_vsniprintf_r+0x16>

08022168 <vsniprintf>:
 8022168:	b507      	push	{r0, r1, r2, lr}
 802216a:	9300      	str	r3, [sp, #0]
 802216c:	4613      	mov	r3, r2
 802216e:	460a      	mov	r2, r1
 8022170:	4601      	mov	r1, r0
 8022172:	4803      	ldr	r0, [pc, #12]	@ (8022180 <vsniprintf+0x18>)
 8022174:	6800      	ldr	r0, [r0, #0]
 8022176:	f7ff ffcc 	bl	8022112 <_vsniprintf_r>
 802217a:	b003      	add	sp, #12
 802217c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022180:	240012bc 	.word	0x240012bc

08022184 <__swbuf_r>:
 8022184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022186:	460e      	mov	r6, r1
 8022188:	4614      	mov	r4, r2
 802218a:	4605      	mov	r5, r0
 802218c:	b118      	cbz	r0, 8022196 <__swbuf_r+0x12>
 802218e:	6a03      	ldr	r3, [r0, #32]
 8022190:	b90b      	cbnz	r3, 8022196 <__swbuf_r+0x12>
 8022192:	f7ff feb7 	bl	8021f04 <__sinit>
 8022196:	69a3      	ldr	r3, [r4, #24]
 8022198:	60a3      	str	r3, [r4, #8]
 802219a:	89a3      	ldrh	r3, [r4, #12]
 802219c:	071a      	lsls	r2, r3, #28
 802219e:	d501      	bpl.n	80221a4 <__swbuf_r+0x20>
 80221a0:	6923      	ldr	r3, [r4, #16]
 80221a2:	b943      	cbnz	r3, 80221b6 <__swbuf_r+0x32>
 80221a4:	4621      	mov	r1, r4
 80221a6:	4628      	mov	r0, r5
 80221a8:	f000 f82a 	bl	8022200 <__swsetup_r>
 80221ac:	b118      	cbz	r0, 80221b6 <__swbuf_r+0x32>
 80221ae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80221b2:	4638      	mov	r0, r7
 80221b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80221b6:	6823      	ldr	r3, [r4, #0]
 80221b8:	6922      	ldr	r2, [r4, #16]
 80221ba:	1a98      	subs	r0, r3, r2
 80221bc:	6963      	ldr	r3, [r4, #20]
 80221be:	b2f6      	uxtb	r6, r6
 80221c0:	4283      	cmp	r3, r0
 80221c2:	4637      	mov	r7, r6
 80221c4:	dc05      	bgt.n	80221d2 <__swbuf_r+0x4e>
 80221c6:	4621      	mov	r1, r4
 80221c8:	4628      	mov	r0, r5
 80221ca:	f000 fdad 	bl	8022d28 <_fflush_r>
 80221ce:	2800      	cmp	r0, #0
 80221d0:	d1ed      	bne.n	80221ae <__swbuf_r+0x2a>
 80221d2:	68a3      	ldr	r3, [r4, #8]
 80221d4:	3b01      	subs	r3, #1
 80221d6:	60a3      	str	r3, [r4, #8]
 80221d8:	6823      	ldr	r3, [r4, #0]
 80221da:	1c5a      	adds	r2, r3, #1
 80221dc:	6022      	str	r2, [r4, #0]
 80221de:	701e      	strb	r6, [r3, #0]
 80221e0:	6962      	ldr	r2, [r4, #20]
 80221e2:	1c43      	adds	r3, r0, #1
 80221e4:	429a      	cmp	r2, r3
 80221e6:	d004      	beq.n	80221f2 <__swbuf_r+0x6e>
 80221e8:	89a3      	ldrh	r3, [r4, #12]
 80221ea:	07db      	lsls	r3, r3, #31
 80221ec:	d5e1      	bpl.n	80221b2 <__swbuf_r+0x2e>
 80221ee:	2e0a      	cmp	r6, #10
 80221f0:	d1df      	bne.n	80221b2 <__swbuf_r+0x2e>
 80221f2:	4621      	mov	r1, r4
 80221f4:	4628      	mov	r0, r5
 80221f6:	f000 fd97 	bl	8022d28 <_fflush_r>
 80221fa:	2800      	cmp	r0, #0
 80221fc:	d0d9      	beq.n	80221b2 <__swbuf_r+0x2e>
 80221fe:	e7d6      	b.n	80221ae <__swbuf_r+0x2a>

08022200 <__swsetup_r>:
 8022200:	b538      	push	{r3, r4, r5, lr}
 8022202:	4b29      	ldr	r3, [pc, #164]	@ (80222a8 <__swsetup_r+0xa8>)
 8022204:	4605      	mov	r5, r0
 8022206:	6818      	ldr	r0, [r3, #0]
 8022208:	460c      	mov	r4, r1
 802220a:	b118      	cbz	r0, 8022214 <__swsetup_r+0x14>
 802220c:	6a03      	ldr	r3, [r0, #32]
 802220e:	b90b      	cbnz	r3, 8022214 <__swsetup_r+0x14>
 8022210:	f7ff fe78 	bl	8021f04 <__sinit>
 8022214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022218:	0719      	lsls	r1, r3, #28
 802221a:	d422      	bmi.n	8022262 <__swsetup_r+0x62>
 802221c:	06da      	lsls	r2, r3, #27
 802221e:	d407      	bmi.n	8022230 <__swsetup_r+0x30>
 8022220:	2209      	movs	r2, #9
 8022222:	602a      	str	r2, [r5, #0]
 8022224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022228:	81a3      	strh	r3, [r4, #12]
 802222a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802222e:	e033      	b.n	8022298 <__swsetup_r+0x98>
 8022230:	0758      	lsls	r0, r3, #29
 8022232:	d512      	bpl.n	802225a <__swsetup_r+0x5a>
 8022234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022236:	b141      	cbz	r1, 802224a <__swsetup_r+0x4a>
 8022238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802223c:	4299      	cmp	r1, r3
 802223e:	d002      	beq.n	8022246 <__swsetup_r+0x46>
 8022240:	4628      	mov	r0, r5
 8022242:	f000 f9b5 	bl	80225b0 <_free_r>
 8022246:	2300      	movs	r3, #0
 8022248:	6363      	str	r3, [r4, #52]	@ 0x34
 802224a:	89a3      	ldrh	r3, [r4, #12]
 802224c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022250:	81a3      	strh	r3, [r4, #12]
 8022252:	2300      	movs	r3, #0
 8022254:	6063      	str	r3, [r4, #4]
 8022256:	6923      	ldr	r3, [r4, #16]
 8022258:	6023      	str	r3, [r4, #0]
 802225a:	89a3      	ldrh	r3, [r4, #12]
 802225c:	f043 0308 	orr.w	r3, r3, #8
 8022260:	81a3      	strh	r3, [r4, #12]
 8022262:	6923      	ldr	r3, [r4, #16]
 8022264:	b94b      	cbnz	r3, 802227a <__swsetup_r+0x7a>
 8022266:	89a3      	ldrh	r3, [r4, #12]
 8022268:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802226c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022270:	d003      	beq.n	802227a <__swsetup_r+0x7a>
 8022272:	4621      	mov	r1, r4
 8022274:	4628      	mov	r0, r5
 8022276:	f000 fdb7 	bl	8022de8 <__smakebuf_r>
 802227a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802227e:	f013 0201 	ands.w	r2, r3, #1
 8022282:	d00a      	beq.n	802229a <__swsetup_r+0x9a>
 8022284:	2200      	movs	r2, #0
 8022286:	60a2      	str	r2, [r4, #8]
 8022288:	6962      	ldr	r2, [r4, #20]
 802228a:	4252      	negs	r2, r2
 802228c:	61a2      	str	r2, [r4, #24]
 802228e:	6922      	ldr	r2, [r4, #16]
 8022290:	b942      	cbnz	r2, 80222a4 <__swsetup_r+0xa4>
 8022292:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022296:	d1c5      	bne.n	8022224 <__swsetup_r+0x24>
 8022298:	bd38      	pop	{r3, r4, r5, pc}
 802229a:	0799      	lsls	r1, r3, #30
 802229c:	bf58      	it	pl
 802229e:	6962      	ldrpl	r2, [r4, #20]
 80222a0:	60a2      	str	r2, [r4, #8]
 80222a2:	e7f4      	b.n	802228e <__swsetup_r+0x8e>
 80222a4:	2000      	movs	r0, #0
 80222a6:	e7f7      	b.n	8022298 <__swsetup_r+0x98>
 80222a8:	240012bc 	.word	0x240012bc

080222ac <memcmp>:
 80222ac:	b510      	push	{r4, lr}
 80222ae:	3901      	subs	r1, #1
 80222b0:	4402      	add	r2, r0
 80222b2:	4290      	cmp	r0, r2
 80222b4:	d101      	bne.n	80222ba <memcmp+0xe>
 80222b6:	2000      	movs	r0, #0
 80222b8:	e005      	b.n	80222c6 <memcmp+0x1a>
 80222ba:	7803      	ldrb	r3, [r0, #0]
 80222bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80222c0:	42a3      	cmp	r3, r4
 80222c2:	d001      	beq.n	80222c8 <memcmp+0x1c>
 80222c4:	1b18      	subs	r0, r3, r4
 80222c6:	bd10      	pop	{r4, pc}
 80222c8:	3001      	adds	r0, #1
 80222ca:	e7f2      	b.n	80222b2 <memcmp+0x6>

080222cc <memmove>:
 80222cc:	4288      	cmp	r0, r1
 80222ce:	b510      	push	{r4, lr}
 80222d0:	eb01 0402 	add.w	r4, r1, r2
 80222d4:	d902      	bls.n	80222dc <memmove+0x10>
 80222d6:	4284      	cmp	r4, r0
 80222d8:	4623      	mov	r3, r4
 80222da:	d807      	bhi.n	80222ec <memmove+0x20>
 80222dc:	1e43      	subs	r3, r0, #1
 80222de:	42a1      	cmp	r1, r4
 80222e0:	d008      	beq.n	80222f4 <memmove+0x28>
 80222e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80222e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80222ea:	e7f8      	b.n	80222de <memmove+0x12>
 80222ec:	4402      	add	r2, r0
 80222ee:	4601      	mov	r1, r0
 80222f0:	428a      	cmp	r2, r1
 80222f2:	d100      	bne.n	80222f6 <memmove+0x2a>
 80222f4:	bd10      	pop	{r4, pc}
 80222f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80222fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80222fe:	e7f7      	b.n	80222f0 <memmove+0x24>

08022300 <memset>:
 8022300:	4402      	add	r2, r0
 8022302:	4603      	mov	r3, r0
 8022304:	4293      	cmp	r3, r2
 8022306:	d100      	bne.n	802230a <memset+0xa>
 8022308:	4770      	bx	lr
 802230a:	f803 1b01 	strb.w	r1, [r3], #1
 802230e:	e7f9      	b.n	8022304 <memset+0x4>

08022310 <strchr>:
 8022310:	b2c9      	uxtb	r1, r1
 8022312:	4603      	mov	r3, r0
 8022314:	4618      	mov	r0, r3
 8022316:	f813 2b01 	ldrb.w	r2, [r3], #1
 802231a:	b112      	cbz	r2, 8022322 <strchr+0x12>
 802231c:	428a      	cmp	r2, r1
 802231e:	d1f9      	bne.n	8022314 <strchr+0x4>
 8022320:	4770      	bx	lr
 8022322:	2900      	cmp	r1, #0
 8022324:	bf18      	it	ne
 8022326:	2000      	movne	r0, #0
 8022328:	4770      	bx	lr

0802232a <strncmp>:
 802232a:	b510      	push	{r4, lr}
 802232c:	b16a      	cbz	r2, 802234a <strncmp+0x20>
 802232e:	3901      	subs	r1, #1
 8022330:	1884      	adds	r4, r0, r2
 8022332:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022336:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802233a:	429a      	cmp	r2, r3
 802233c:	d103      	bne.n	8022346 <strncmp+0x1c>
 802233e:	42a0      	cmp	r0, r4
 8022340:	d001      	beq.n	8022346 <strncmp+0x1c>
 8022342:	2a00      	cmp	r2, #0
 8022344:	d1f5      	bne.n	8022332 <strncmp+0x8>
 8022346:	1ad0      	subs	r0, r2, r3
 8022348:	bd10      	pop	{r4, pc}
 802234a:	4610      	mov	r0, r2
 802234c:	e7fc      	b.n	8022348 <strncmp+0x1e>

0802234e <strstr>:
 802234e:	780a      	ldrb	r2, [r1, #0]
 8022350:	b570      	push	{r4, r5, r6, lr}
 8022352:	b96a      	cbnz	r2, 8022370 <strstr+0x22>
 8022354:	bd70      	pop	{r4, r5, r6, pc}
 8022356:	429a      	cmp	r2, r3
 8022358:	d109      	bne.n	802236e <strstr+0x20>
 802235a:	460c      	mov	r4, r1
 802235c:	4605      	mov	r5, r0
 802235e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022362:	2b00      	cmp	r3, #0
 8022364:	d0f6      	beq.n	8022354 <strstr+0x6>
 8022366:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802236a:	429e      	cmp	r6, r3
 802236c:	d0f7      	beq.n	802235e <strstr+0x10>
 802236e:	3001      	adds	r0, #1
 8022370:	7803      	ldrb	r3, [r0, #0]
 8022372:	2b00      	cmp	r3, #0
 8022374:	d1ef      	bne.n	8022356 <strstr+0x8>
 8022376:	4618      	mov	r0, r3
 8022378:	e7ec      	b.n	8022354 <strstr+0x6>
	...

0802237c <_close_r>:
 802237c:	b538      	push	{r3, r4, r5, lr}
 802237e:	4d06      	ldr	r5, [pc, #24]	@ (8022398 <_close_r+0x1c>)
 8022380:	2300      	movs	r3, #0
 8022382:	4604      	mov	r4, r0
 8022384:	4608      	mov	r0, r1
 8022386:	602b      	str	r3, [r5, #0]
 8022388:	f7e0 f966 	bl	8002658 <_close>
 802238c:	1c43      	adds	r3, r0, #1
 802238e:	d102      	bne.n	8022396 <_close_r+0x1a>
 8022390:	682b      	ldr	r3, [r5, #0]
 8022392:	b103      	cbz	r3, 8022396 <_close_r+0x1a>
 8022394:	6023      	str	r3, [r4, #0]
 8022396:	bd38      	pop	{r3, r4, r5, pc}
 8022398:	240696e8 	.word	0x240696e8

0802239c <_reclaim_reent>:
 802239c:	4b29      	ldr	r3, [pc, #164]	@ (8022444 <_reclaim_reent+0xa8>)
 802239e:	681b      	ldr	r3, [r3, #0]
 80223a0:	4283      	cmp	r3, r0
 80223a2:	b570      	push	{r4, r5, r6, lr}
 80223a4:	4604      	mov	r4, r0
 80223a6:	d04b      	beq.n	8022440 <_reclaim_reent+0xa4>
 80223a8:	69c3      	ldr	r3, [r0, #28]
 80223aa:	b1ab      	cbz	r3, 80223d8 <_reclaim_reent+0x3c>
 80223ac:	68db      	ldr	r3, [r3, #12]
 80223ae:	b16b      	cbz	r3, 80223cc <_reclaim_reent+0x30>
 80223b0:	2500      	movs	r5, #0
 80223b2:	69e3      	ldr	r3, [r4, #28]
 80223b4:	68db      	ldr	r3, [r3, #12]
 80223b6:	5959      	ldr	r1, [r3, r5]
 80223b8:	2900      	cmp	r1, #0
 80223ba:	d13b      	bne.n	8022434 <_reclaim_reent+0x98>
 80223bc:	3504      	adds	r5, #4
 80223be:	2d80      	cmp	r5, #128	@ 0x80
 80223c0:	d1f7      	bne.n	80223b2 <_reclaim_reent+0x16>
 80223c2:	69e3      	ldr	r3, [r4, #28]
 80223c4:	4620      	mov	r0, r4
 80223c6:	68d9      	ldr	r1, [r3, #12]
 80223c8:	f000 f8f2 	bl	80225b0 <_free_r>
 80223cc:	69e3      	ldr	r3, [r4, #28]
 80223ce:	6819      	ldr	r1, [r3, #0]
 80223d0:	b111      	cbz	r1, 80223d8 <_reclaim_reent+0x3c>
 80223d2:	4620      	mov	r0, r4
 80223d4:	f000 f8ec 	bl	80225b0 <_free_r>
 80223d8:	6961      	ldr	r1, [r4, #20]
 80223da:	b111      	cbz	r1, 80223e2 <_reclaim_reent+0x46>
 80223dc:	4620      	mov	r0, r4
 80223de:	f000 f8e7 	bl	80225b0 <_free_r>
 80223e2:	69e1      	ldr	r1, [r4, #28]
 80223e4:	b111      	cbz	r1, 80223ec <_reclaim_reent+0x50>
 80223e6:	4620      	mov	r0, r4
 80223e8:	f000 f8e2 	bl	80225b0 <_free_r>
 80223ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80223ee:	b111      	cbz	r1, 80223f6 <_reclaim_reent+0x5a>
 80223f0:	4620      	mov	r0, r4
 80223f2:	f000 f8dd 	bl	80225b0 <_free_r>
 80223f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80223f8:	b111      	cbz	r1, 8022400 <_reclaim_reent+0x64>
 80223fa:	4620      	mov	r0, r4
 80223fc:	f000 f8d8 	bl	80225b0 <_free_r>
 8022400:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8022402:	b111      	cbz	r1, 802240a <_reclaim_reent+0x6e>
 8022404:	4620      	mov	r0, r4
 8022406:	f000 f8d3 	bl	80225b0 <_free_r>
 802240a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802240c:	b111      	cbz	r1, 8022414 <_reclaim_reent+0x78>
 802240e:	4620      	mov	r0, r4
 8022410:	f000 f8ce 	bl	80225b0 <_free_r>
 8022414:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8022416:	b111      	cbz	r1, 802241e <_reclaim_reent+0x82>
 8022418:	4620      	mov	r0, r4
 802241a:	f000 f8c9 	bl	80225b0 <_free_r>
 802241e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8022420:	b111      	cbz	r1, 8022428 <_reclaim_reent+0x8c>
 8022422:	4620      	mov	r0, r4
 8022424:	f000 f8c4 	bl	80225b0 <_free_r>
 8022428:	6a23      	ldr	r3, [r4, #32]
 802242a:	b14b      	cbz	r3, 8022440 <_reclaim_reent+0xa4>
 802242c:	4620      	mov	r0, r4
 802242e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022432:	4718      	bx	r3
 8022434:	680e      	ldr	r6, [r1, #0]
 8022436:	4620      	mov	r0, r4
 8022438:	f000 f8ba 	bl	80225b0 <_free_r>
 802243c:	4631      	mov	r1, r6
 802243e:	e7bb      	b.n	80223b8 <_reclaim_reent+0x1c>
 8022440:	bd70      	pop	{r4, r5, r6, pc}
 8022442:	bf00      	nop
 8022444:	240012bc 	.word	0x240012bc

08022448 <_lseek_r>:
 8022448:	b538      	push	{r3, r4, r5, lr}
 802244a:	4d07      	ldr	r5, [pc, #28]	@ (8022468 <_lseek_r+0x20>)
 802244c:	4604      	mov	r4, r0
 802244e:	4608      	mov	r0, r1
 8022450:	4611      	mov	r1, r2
 8022452:	2200      	movs	r2, #0
 8022454:	602a      	str	r2, [r5, #0]
 8022456:	461a      	mov	r2, r3
 8022458:	f7e0 f925 	bl	80026a6 <_lseek>
 802245c:	1c43      	adds	r3, r0, #1
 802245e:	d102      	bne.n	8022466 <_lseek_r+0x1e>
 8022460:	682b      	ldr	r3, [r5, #0]
 8022462:	b103      	cbz	r3, 8022466 <_lseek_r+0x1e>
 8022464:	6023      	str	r3, [r4, #0]
 8022466:	bd38      	pop	{r3, r4, r5, pc}
 8022468:	240696e8 	.word	0x240696e8

0802246c <_read_r>:
 802246c:	b538      	push	{r3, r4, r5, lr}
 802246e:	4d07      	ldr	r5, [pc, #28]	@ (802248c <_read_r+0x20>)
 8022470:	4604      	mov	r4, r0
 8022472:	4608      	mov	r0, r1
 8022474:	4611      	mov	r1, r2
 8022476:	2200      	movs	r2, #0
 8022478:	602a      	str	r2, [r5, #0]
 802247a:	461a      	mov	r2, r3
 802247c:	f7e0 f8b3 	bl	80025e6 <_read>
 8022480:	1c43      	adds	r3, r0, #1
 8022482:	d102      	bne.n	802248a <_read_r+0x1e>
 8022484:	682b      	ldr	r3, [r5, #0]
 8022486:	b103      	cbz	r3, 802248a <_read_r+0x1e>
 8022488:	6023      	str	r3, [r4, #0]
 802248a:	bd38      	pop	{r3, r4, r5, pc}
 802248c:	240696e8 	.word	0x240696e8

08022490 <_sbrk_r>:
 8022490:	b538      	push	{r3, r4, r5, lr}
 8022492:	4d06      	ldr	r5, [pc, #24]	@ (80224ac <_sbrk_r+0x1c>)
 8022494:	2300      	movs	r3, #0
 8022496:	4604      	mov	r4, r0
 8022498:	4608      	mov	r0, r1
 802249a:	602b      	str	r3, [r5, #0]
 802249c:	f7e0 f910 	bl	80026c0 <_sbrk>
 80224a0:	1c43      	adds	r3, r0, #1
 80224a2:	d102      	bne.n	80224aa <_sbrk_r+0x1a>
 80224a4:	682b      	ldr	r3, [r5, #0]
 80224a6:	b103      	cbz	r3, 80224aa <_sbrk_r+0x1a>
 80224a8:	6023      	str	r3, [r4, #0]
 80224aa:	bd38      	pop	{r3, r4, r5, pc}
 80224ac:	240696e8 	.word	0x240696e8

080224b0 <_write_r>:
 80224b0:	b538      	push	{r3, r4, r5, lr}
 80224b2:	4d07      	ldr	r5, [pc, #28]	@ (80224d0 <_write_r+0x20>)
 80224b4:	4604      	mov	r4, r0
 80224b6:	4608      	mov	r0, r1
 80224b8:	4611      	mov	r1, r2
 80224ba:	2200      	movs	r2, #0
 80224bc:	602a      	str	r2, [r5, #0]
 80224be:	461a      	mov	r2, r3
 80224c0:	f7e0 f8ae 	bl	8002620 <_write>
 80224c4:	1c43      	adds	r3, r0, #1
 80224c6:	d102      	bne.n	80224ce <_write_r+0x1e>
 80224c8:	682b      	ldr	r3, [r5, #0]
 80224ca:	b103      	cbz	r3, 80224ce <_write_r+0x1e>
 80224cc:	6023      	str	r3, [r4, #0]
 80224ce:	bd38      	pop	{r3, r4, r5, pc}
 80224d0:	240696e8 	.word	0x240696e8

080224d4 <__errno>:
 80224d4:	4b01      	ldr	r3, [pc, #4]	@ (80224dc <__errno+0x8>)
 80224d6:	6818      	ldr	r0, [r3, #0]
 80224d8:	4770      	bx	lr
 80224da:	bf00      	nop
 80224dc:	240012bc 	.word	0x240012bc

080224e0 <__libc_init_array>:
 80224e0:	b570      	push	{r4, r5, r6, lr}
 80224e2:	4d0d      	ldr	r5, [pc, #52]	@ (8022518 <__libc_init_array+0x38>)
 80224e4:	4c0d      	ldr	r4, [pc, #52]	@ (802251c <__libc_init_array+0x3c>)
 80224e6:	1b64      	subs	r4, r4, r5
 80224e8:	10a4      	asrs	r4, r4, #2
 80224ea:	2600      	movs	r6, #0
 80224ec:	42a6      	cmp	r6, r4
 80224ee:	d109      	bne.n	8022504 <__libc_init_array+0x24>
 80224f0:	4d0b      	ldr	r5, [pc, #44]	@ (8022520 <__libc_init_array+0x40>)
 80224f2:	4c0c      	ldr	r4, [pc, #48]	@ (8022524 <__libc_init_array+0x44>)
 80224f4:	f000 fe62 	bl	80231bc <_init>
 80224f8:	1b64      	subs	r4, r4, r5
 80224fa:	10a4      	asrs	r4, r4, #2
 80224fc:	2600      	movs	r6, #0
 80224fe:	42a6      	cmp	r6, r4
 8022500:	d105      	bne.n	802250e <__libc_init_array+0x2e>
 8022502:	bd70      	pop	{r4, r5, r6, pc}
 8022504:	f855 3b04 	ldr.w	r3, [r5], #4
 8022508:	4798      	blx	r3
 802250a:	3601      	adds	r6, #1
 802250c:	e7ee      	b.n	80224ec <__libc_init_array+0xc>
 802250e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022512:	4798      	blx	r3
 8022514:	3601      	adds	r6, #1
 8022516:	e7f2      	b.n	80224fe <__libc_init_array+0x1e>
 8022518:	08025d44 	.word	0x08025d44
 802251c:	08025d44 	.word	0x08025d44
 8022520:	08025d44 	.word	0x08025d44
 8022524:	08025d88 	.word	0x08025d88

08022528 <__retarget_lock_init_recursive>:
 8022528:	4770      	bx	lr

0802252a <__retarget_lock_acquire_recursive>:
 802252a:	4770      	bx	lr

0802252c <__retarget_lock_release_recursive>:
 802252c:	4770      	bx	lr

0802252e <strcpy>:
 802252e:	4603      	mov	r3, r0
 8022530:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022534:	f803 2b01 	strb.w	r2, [r3], #1
 8022538:	2a00      	cmp	r2, #0
 802253a:	d1f9      	bne.n	8022530 <strcpy+0x2>
 802253c:	4770      	bx	lr

0802253e <memcpy>:
 802253e:	440a      	add	r2, r1
 8022540:	4291      	cmp	r1, r2
 8022542:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8022546:	d100      	bne.n	802254a <memcpy+0xc>
 8022548:	4770      	bx	lr
 802254a:	b510      	push	{r4, lr}
 802254c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022554:	4291      	cmp	r1, r2
 8022556:	d1f9      	bne.n	802254c <memcpy+0xe>
 8022558:	bd10      	pop	{r4, pc}
	...

0802255c <__assert_func>:
 802255c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802255e:	4614      	mov	r4, r2
 8022560:	461a      	mov	r2, r3
 8022562:	4b09      	ldr	r3, [pc, #36]	@ (8022588 <__assert_func+0x2c>)
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	4605      	mov	r5, r0
 8022568:	68d8      	ldr	r0, [r3, #12]
 802256a:	b954      	cbnz	r4, 8022582 <__assert_func+0x26>
 802256c:	4b07      	ldr	r3, [pc, #28]	@ (802258c <__assert_func+0x30>)
 802256e:	461c      	mov	r4, r3
 8022570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022574:	9100      	str	r1, [sp, #0]
 8022576:	462b      	mov	r3, r5
 8022578:	4905      	ldr	r1, [pc, #20]	@ (8022590 <__assert_func+0x34>)
 802257a:	f000 fbfd 	bl	8022d78 <fiprintf>
 802257e:	f000 fc91 	bl	8022ea4 <abort>
 8022582:	4b04      	ldr	r3, [pc, #16]	@ (8022594 <__assert_func+0x38>)
 8022584:	e7f4      	b.n	8022570 <__assert_func+0x14>
 8022586:	bf00      	nop
 8022588:	240012bc 	.word	0x240012bc
 802258c:	08025d05 	.word	0x08025d05
 8022590:	08025cd7 	.word	0x08025cd7
 8022594:	08025cca 	.word	0x08025cca

08022598 <__env_lock>:
 8022598:	4801      	ldr	r0, [pc, #4]	@ (80225a0 <__env_lock+0x8>)
 802259a:	f7ff bfc6 	b.w	802252a <__retarget_lock_acquire_recursive>
 802259e:	bf00      	nop
 80225a0:	240696ec 	.word	0x240696ec

080225a4 <__env_unlock>:
 80225a4:	4801      	ldr	r0, [pc, #4]	@ (80225ac <__env_unlock+0x8>)
 80225a6:	f7ff bfc1 	b.w	802252c <__retarget_lock_release_recursive>
 80225aa:	bf00      	nop
 80225ac:	240696ec 	.word	0x240696ec

080225b0 <_free_r>:
 80225b0:	b538      	push	{r3, r4, r5, lr}
 80225b2:	4605      	mov	r5, r0
 80225b4:	2900      	cmp	r1, #0
 80225b6:	d041      	beq.n	802263c <_free_r+0x8c>
 80225b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80225bc:	1f0c      	subs	r4, r1, #4
 80225be:	2b00      	cmp	r3, #0
 80225c0:	bfb8      	it	lt
 80225c2:	18e4      	addlt	r4, r4, r3
 80225c4:	f7ff faec 	bl	8021ba0 <__malloc_lock>
 80225c8:	4a1d      	ldr	r2, [pc, #116]	@ (8022640 <_free_r+0x90>)
 80225ca:	6813      	ldr	r3, [r2, #0]
 80225cc:	b933      	cbnz	r3, 80225dc <_free_r+0x2c>
 80225ce:	6063      	str	r3, [r4, #4]
 80225d0:	6014      	str	r4, [r2, #0]
 80225d2:	4628      	mov	r0, r5
 80225d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225d8:	f7ff bae8 	b.w	8021bac <__malloc_unlock>
 80225dc:	42a3      	cmp	r3, r4
 80225de:	d908      	bls.n	80225f2 <_free_r+0x42>
 80225e0:	6820      	ldr	r0, [r4, #0]
 80225e2:	1821      	adds	r1, r4, r0
 80225e4:	428b      	cmp	r3, r1
 80225e6:	bf01      	itttt	eq
 80225e8:	6819      	ldreq	r1, [r3, #0]
 80225ea:	685b      	ldreq	r3, [r3, #4]
 80225ec:	1809      	addeq	r1, r1, r0
 80225ee:	6021      	streq	r1, [r4, #0]
 80225f0:	e7ed      	b.n	80225ce <_free_r+0x1e>
 80225f2:	461a      	mov	r2, r3
 80225f4:	685b      	ldr	r3, [r3, #4]
 80225f6:	b10b      	cbz	r3, 80225fc <_free_r+0x4c>
 80225f8:	42a3      	cmp	r3, r4
 80225fa:	d9fa      	bls.n	80225f2 <_free_r+0x42>
 80225fc:	6811      	ldr	r1, [r2, #0]
 80225fe:	1850      	adds	r0, r2, r1
 8022600:	42a0      	cmp	r0, r4
 8022602:	d10b      	bne.n	802261c <_free_r+0x6c>
 8022604:	6820      	ldr	r0, [r4, #0]
 8022606:	4401      	add	r1, r0
 8022608:	1850      	adds	r0, r2, r1
 802260a:	4283      	cmp	r3, r0
 802260c:	6011      	str	r1, [r2, #0]
 802260e:	d1e0      	bne.n	80225d2 <_free_r+0x22>
 8022610:	6818      	ldr	r0, [r3, #0]
 8022612:	685b      	ldr	r3, [r3, #4]
 8022614:	6053      	str	r3, [r2, #4]
 8022616:	4408      	add	r0, r1
 8022618:	6010      	str	r0, [r2, #0]
 802261a:	e7da      	b.n	80225d2 <_free_r+0x22>
 802261c:	d902      	bls.n	8022624 <_free_r+0x74>
 802261e:	230c      	movs	r3, #12
 8022620:	602b      	str	r3, [r5, #0]
 8022622:	e7d6      	b.n	80225d2 <_free_r+0x22>
 8022624:	6820      	ldr	r0, [r4, #0]
 8022626:	1821      	adds	r1, r4, r0
 8022628:	428b      	cmp	r3, r1
 802262a:	bf04      	itt	eq
 802262c:	6819      	ldreq	r1, [r3, #0]
 802262e:	685b      	ldreq	r3, [r3, #4]
 8022630:	6063      	str	r3, [r4, #4]
 8022632:	bf04      	itt	eq
 8022634:	1809      	addeq	r1, r1, r0
 8022636:	6021      	streq	r1, [r4, #0]
 8022638:	6054      	str	r4, [r2, #4]
 802263a:	e7ca      	b.n	80225d2 <_free_r+0x22>
 802263c:	bd38      	pop	{r3, r4, r5, pc}
 802263e:	bf00      	nop
 8022640:	240695a8 	.word	0x240695a8

08022644 <_malloc_usable_size_r>:
 8022644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022648:	1f18      	subs	r0, r3, #4
 802264a:	2b00      	cmp	r3, #0
 802264c:	bfbc      	itt	lt
 802264e:	580b      	ldrlt	r3, [r1, r0]
 8022650:	18c0      	addlt	r0, r0, r3
 8022652:	4770      	bx	lr

08022654 <__ssputs_r>:
 8022654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022658:	688e      	ldr	r6, [r1, #8]
 802265a:	461f      	mov	r7, r3
 802265c:	42be      	cmp	r6, r7
 802265e:	680b      	ldr	r3, [r1, #0]
 8022660:	4682      	mov	sl, r0
 8022662:	460c      	mov	r4, r1
 8022664:	4690      	mov	r8, r2
 8022666:	d82d      	bhi.n	80226c4 <__ssputs_r+0x70>
 8022668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802266c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022670:	d026      	beq.n	80226c0 <__ssputs_r+0x6c>
 8022672:	6965      	ldr	r5, [r4, #20]
 8022674:	6909      	ldr	r1, [r1, #16]
 8022676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802267a:	eba3 0901 	sub.w	r9, r3, r1
 802267e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022682:	1c7b      	adds	r3, r7, #1
 8022684:	444b      	add	r3, r9
 8022686:	106d      	asrs	r5, r5, #1
 8022688:	429d      	cmp	r5, r3
 802268a:	bf38      	it	cc
 802268c:	461d      	movcc	r5, r3
 802268e:	0553      	lsls	r3, r2, #21
 8022690:	d527      	bpl.n	80226e2 <__ssputs_r+0x8e>
 8022692:	4629      	mov	r1, r5
 8022694:	f7ff fa04 	bl	8021aa0 <_malloc_r>
 8022698:	4606      	mov	r6, r0
 802269a:	b360      	cbz	r0, 80226f6 <__ssputs_r+0xa2>
 802269c:	6921      	ldr	r1, [r4, #16]
 802269e:	464a      	mov	r2, r9
 80226a0:	f7ff ff4d 	bl	802253e <memcpy>
 80226a4:	89a3      	ldrh	r3, [r4, #12]
 80226a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80226aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80226ae:	81a3      	strh	r3, [r4, #12]
 80226b0:	6126      	str	r6, [r4, #16]
 80226b2:	6165      	str	r5, [r4, #20]
 80226b4:	444e      	add	r6, r9
 80226b6:	eba5 0509 	sub.w	r5, r5, r9
 80226ba:	6026      	str	r6, [r4, #0]
 80226bc:	60a5      	str	r5, [r4, #8]
 80226be:	463e      	mov	r6, r7
 80226c0:	42be      	cmp	r6, r7
 80226c2:	d900      	bls.n	80226c6 <__ssputs_r+0x72>
 80226c4:	463e      	mov	r6, r7
 80226c6:	6820      	ldr	r0, [r4, #0]
 80226c8:	4632      	mov	r2, r6
 80226ca:	4641      	mov	r1, r8
 80226cc:	f7ff fdfe 	bl	80222cc <memmove>
 80226d0:	68a3      	ldr	r3, [r4, #8]
 80226d2:	1b9b      	subs	r3, r3, r6
 80226d4:	60a3      	str	r3, [r4, #8]
 80226d6:	6823      	ldr	r3, [r4, #0]
 80226d8:	4433      	add	r3, r6
 80226da:	6023      	str	r3, [r4, #0]
 80226dc:	2000      	movs	r0, #0
 80226de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226e2:	462a      	mov	r2, r5
 80226e4:	f7ff fadc 	bl	8021ca0 <_realloc_r>
 80226e8:	4606      	mov	r6, r0
 80226ea:	2800      	cmp	r0, #0
 80226ec:	d1e0      	bne.n	80226b0 <__ssputs_r+0x5c>
 80226ee:	6921      	ldr	r1, [r4, #16]
 80226f0:	4650      	mov	r0, sl
 80226f2:	f7ff ff5d 	bl	80225b0 <_free_r>
 80226f6:	230c      	movs	r3, #12
 80226f8:	f8ca 3000 	str.w	r3, [sl]
 80226fc:	89a3      	ldrh	r3, [r4, #12]
 80226fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022702:	81a3      	strh	r3, [r4, #12]
 8022704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022708:	e7e9      	b.n	80226de <__ssputs_r+0x8a>
	...

0802270c <_svfiprintf_r>:
 802270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022710:	4698      	mov	r8, r3
 8022712:	898b      	ldrh	r3, [r1, #12]
 8022714:	061b      	lsls	r3, r3, #24
 8022716:	b09d      	sub	sp, #116	@ 0x74
 8022718:	4607      	mov	r7, r0
 802271a:	460d      	mov	r5, r1
 802271c:	4614      	mov	r4, r2
 802271e:	d510      	bpl.n	8022742 <_svfiprintf_r+0x36>
 8022720:	690b      	ldr	r3, [r1, #16]
 8022722:	b973      	cbnz	r3, 8022742 <_svfiprintf_r+0x36>
 8022724:	2140      	movs	r1, #64	@ 0x40
 8022726:	f7ff f9bb 	bl	8021aa0 <_malloc_r>
 802272a:	6028      	str	r0, [r5, #0]
 802272c:	6128      	str	r0, [r5, #16]
 802272e:	b930      	cbnz	r0, 802273e <_svfiprintf_r+0x32>
 8022730:	230c      	movs	r3, #12
 8022732:	603b      	str	r3, [r7, #0]
 8022734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022738:	b01d      	add	sp, #116	@ 0x74
 802273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802273e:	2340      	movs	r3, #64	@ 0x40
 8022740:	616b      	str	r3, [r5, #20]
 8022742:	2300      	movs	r3, #0
 8022744:	9309      	str	r3, [sp, #36]	@ 0x24
 8022746:	2320      	movs	r3, #32
 8022748:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802274c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022750:	2330      	movs	r3, #48	@ 0x30
 8022752:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80228f0 <_svfiprintf_r+0x1e4>
 8022756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802275a:	f04f 0901 	mov.w	r9, #1
 802275e:	4623      	mov	r3, r4
 8022760:	469a      	mov	sl, r3
 8022762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022766:	b10a      	cbz	r2, 802276c <_svfiprintf_r+0x60>
 8022768:	2a25      	cmp	r2, #37	@ 0x25
 802276a:	d1f9      	bne.n	8022760 <_svfiprintf_r+0x54>
 802276c:	ebba 0b04 	subs.w	fp, sl, r4
 8022770:	d00b      	beq.n	802278a <_svfiprintf_r+0x7e>
 8022772:	465b      	mov	r3, fp
 8022774:	4622      	mov	r2, r4
 8022776:	4629      	mov	r1, r5
 8022778:	4638      	mov	r0, r7
 802277a:	f7ff ff6b 	bl	8022654 <__ssputs_r>
 802277e:	3001      	adds	r0, #1
 8022780:	f000 80a7 	beq.w	80228d2 <_svfiprintf_r+0x1c6>
 8022784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022786:	445a      	add	r2, fp
 8022788:	9209      	str	r2, [sp, #36]	@ 0x24
 802278a:	f89a 3000 	ldrb.w	r3, [sl]
 802278e:	2b00      	cmp	r3, #0
 8022790:	f000 809f 	beq.w	80228d2 <_svfiprintf_r+0x1c6>
 8022794:	2300      	movs	r3, #0
 8022796:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802279a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802279e:	f10a 0a01 	add.w	sl, sl, #1
 80227a2:	9304      	str	r3, [sp, #16]
 80227a4:	9307      	str	r3, [sp, #28]
 80227a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80227aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80227ac:	4654      	mov	r4, sl
 80227ae:	2205      	movs	r2, #5
 80227b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227b4:	484e      	ldr	r0, [pc, #312]	@ (80228f0 <_svfiprintf_r+0x1e4>)
 80227b6:	f7dd fdab 	bl	8000310 <memchr>
 80227ba:	9a04      	ldr	r2, [sp, #16]
 80227bc:	b9d8      	cbnz	r0, 80227f6 <_svfiprintf_r+0xea>
 80227be:	06d0      	lsls	r0, r2, #27
 80227c0:	bf44      	itt	mi
 80227c2:	2320      	movmi	r3, #32
 80227c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80227c8:	0711      	lsls	r1, r2, #28
 80227ca:	bf44      	itt	mi
 80227cc:	232b      	movmi	r3, #43	@ 0x2b
 80227ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80227d2:	f89a 3000 	ldrb.w	r3, [sl]
 80227d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80227d8:	d015      	beq.n	8022806 <_svfiprintf_r+0xfa>
 80227da:	9a07      	ldr	r2, [sp, #28]
 80227dc:	4654      	mov	r4, sl
 80227de:	2000      	movs	r0, #0
 80227e0:	f04f 0c0a 	mov.w	ip, #10
 80227e4:	4621      	mov	r1, r4
 80227e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80227ea:	3b30      	subs	r3, #48	@ 0x30
 80227ec:	2b09      	cmp	r3, #9
 80227ee:	d94b      	bls.n	8022888 <_svfiprintf_r+0x17c>
 80227f0:	b1b0      	cbz	r0, 8022820 <_svfiprintf_r+0x114>
 80227f2:	9207      	str	r2, [sp, #28]
 80227f4:	e014      	b.n	8022820 <_svfiprintf_r+0x114>
 80227f6:	eba0 0308 	sub.w	r3, r0, r8
 80227fa:	fa09 f303 	lsl.w	r3, r9, r3
 80227fe:	4313      	orrs	r3, r2
 8022800:	9304      	str	r3, [sp, #16]
 8022802:	46a2      	mov	sl, r4
 8022804:	e7d2      	b.n	80227ac <_svfiprintf_r+0xa0>
 8022806:	9b03      	ldr	r3, [sp, #12]
 8022808:	1d19      	adds	r1, r3, #4
 802280a:	681b      	ldr	r3, [r3, #0]
 802280c:	9103      	str	r1, [sp, #12]
 802280e:	2b00      	cmp	r3, #0
 8022810:	bfbb      	ittet	lt
 8022812:	425b      	neglt	r3, r3
 8022814:	f042 0202 	orrlt.w	r2, r2, #2
 8022818:	9307      	strge	r3, [sp, #28]
 802281a:	9307      	strlt	r3, [sp, #28]
 802281c:	bfb8      	it	lt
 802281e:	9204      	strlt	r2, [sp, #16]
 8022820:	7823      	ldrb	r3, [r4, #0]
 8022822:	2b2e      	cmp	r3, #46	@ 0x2e
 8022824:	d10a      	bne.n	802283c <_svfiprintf_r+0x130>
 8022826:	7863      	ldrb	r3, [r4, #1]
 8022828:	2b2a      	cmp	r3, #42	@ 0x2a
 802282a:	d132      	bne.n	8022892 <_svfiprintf_r+0x186>
 802282c:	9b03      	ldr	r3, [sp, #12]
 802282e:	1d1a      	adds	r2, r3, #4
 8022830:	681b      	ldr	r3, [r3, #0]
 8022832:	9203      	str	r2, [sp, #12]
 8022834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022838:	3402      	adds	r4, #2
 802283a:	9305      	str	r3, [sp, #20]
 802283c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8022900 <_svfiprintf_r+0x1f4>
 8022840:	7821      	ldrb	r1, [r4, #0]
 8022842:	2203      	movs	r2, #3
 8022844:	4650      	mov	r0, sl
 8022846:	f7dd fd63 	bl	8000310 <memchr>
 802284a:	b138      	cbz	r0, 802285c <_svfiprintf_r+0x150>
 802284c:	9b04      	ldr	r3, [sp, #16]
 802284e:	eba0 000a 	sub.w	r0, r0, sl
 8022852:	2240      	movs	r2, #64	@ 0x40
 8022854:	4082      	lsls	r2, r0
 8022856:	4313      	orrs	r3, r2
 8022858:	3401      	adds	r4, #1
 802285a:	9304      	str	r3, [sp, #16]
 802285c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022860:	4824      	ldr	r0, [pc, #144]	@ (80228f4 <_svfiprintf_r+0x1e8>)
 8022862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022866:	2206      	movs	r2, #6
 8022868:	f7dd fd52 	bl	8000310 <memchr>
 802286c:	2800      	cmp	r0, #0
 802286e:	d036      	beq.n	80228de <_svfiprintf_r+0x1d2>
 8022870:	4b21      	ldr	r3, [pc, #132]	@ (80228f8 <_svfiprintf_r+0x1ec>)
 8022872:	bb1b      	cbnz	r3, 80228bc <_svfiprintf_r+0x1b0>
 8022874:	9b03      	ldr	r3, [sp, #12]
 8022876:	3307      	adds	r3, #7
 8022878:	f023 0307 	bic.w	r3, r3, #7
 802287c:	3308      	adds	r3, #8
 802287e:	9303      	str	r3, [sp, #12]
 8022880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022882:	4433      	add	r3, r6
 8022884:	9309      	str	r3, [sp, #36]	@ 0x24
 8022886:	e76a      	b.n	802275e <_svfiprintf_r+0x52>
 8022888:	fb0c 3202 	mla	r2, ip, r2, r3
 802288c:	460c      	mov	r4, r1
 802288e:	2001      	movs	r0, #1
 8022890:	e7a8      	b.n	80227e4 <_svfiprintf_r+0xd8>
 8022892:	2300      	movs	r3, #0
 8022894:	3401      	adds	r4, #1
 8022896:	9305      	str	r3, [sp, #20]
 8022898:	4619      	mov	r1, r3
 802289a:	f04f 0c0a 	mov.w	ip, #10
 802289e:	4620      	mov	r0, r4
 80228a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80228a4:	3a30      	subs	r2, #48	@ 0x30
 80228a6:	2a09      	cmp	r2, #9
 80228a8:	d903      	bls.n	80228b2 <_svfiprintf_r+0x1a6>
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d0c6      	beq.n	802283c <_svfiprintf_r+0x130>
 80228ae:	9105      	str	r1, [sp, #20]
 80228b0:	e7c4      	b.n	802283c <_svfiprintf_r+0x130>
 80228b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80228b6:	4604      	mov	r4, r0
 80228b8:	2301      	movs	r3, #1
 80228ba:	e7f0      	b.n	802289e <_svfiprintf_r+0x192>
 80228bc:	ab03      	add	r3, sp, #12
 80228be:	9300      	str	r3, [sp, #0]
 80228c0:	462a      	mov	r2, r5
 80228c2:	4b0e      	ldr	r3, [pc, #56]	@ (80228fc <_svfiprintf_r+0x1f0>)
 80228c4:	a904      	add	r1, sp, #16
 80228c6:	4638      	mov	r0, r7
 80228c8:	f3af 8000 	nop.w
 80228cc:	1c42      	adds	r2, r0, #1
 80228ce:	4606      	mov	r6, r0
 80228d0:	d1d6      	bne.n	8022880 <_svfiprintf_r+0x174>
 80228d2:	89ab      	ldrh	r3, [r5, #12]
 80228d4:	065b      	lsls	r3, r3, #25
 80228d6:	f53f af2d 	bmi.w	8022734 <_svfiprintf_r+0x28>
 80228da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80228dc:	e72c      	b.n	8022738 <_svfiprintf_r+0x2c>
 80228de:	ab03      	add	r3, sp, #12
 80228e0:	9300      	str	r3, [sp, #0]
 80228e2:	462a      	mov	r2, r5
 80228e4:	4b05      	ldr	r3, [pc, #20]	@ (80228fc <_svfiprintf_r+0x1f0>)
 80228e6:	a904      	add	r1, sp, #16
 80228e8:	4638      	mov	r0, r7
 80228ea:	f000 f879 	bl	80229e0 <_printf_i>
 80228ee:	e7ed      	b.n	80228cc <_svfiprintf_r+0x1c0>
 80228f0:	08025d06 	.word	0x08025d06
 80228f4:	08025d10 	.word	0x08025d10
 80228f8:	00000000 	.word	0x00000000
 80228fc:	08022655 	.word	0x08022655
 8022900:	08025d0c 	.word	0x08025d0c

08022904 <_printf_common>:
 8022904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022908:	4616      	mov	r6, r2
 802290a:	4698      	mov	r8, r3
 802290c:	688a      	ldr	r2, [r1, #8]
 802290e:	690b      	ldr	r3, [r1, #16]
 8022910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022914:	4293      	cmp	r3, r2
 8022916:	bfb8      	it	lt
 8022918:	4613      	movlt	r3, r2
 802291a:	6033      	str	r3, [r6, #0]
 802291c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022920:	4607      	mov	r7, r0
 8022922:	460c      	mov	r4, r1
 8022924:	b10a      	cbz	r2, 802292a <_printf_common+0x26>
 8022926:	3301      	adds	r3, #1
 8022928:	6033      	str	r3, [r6, #0]
 802292a:	6823      	ldr	r3, [r4, #0]
 802292c:	0699      	lsls	r1, r3, #26
 802292e:	bf42      	ittt	mi
 8022930:	6833      	ldrmi	r3, [r6, #0]
 8022932:	3302      	addmi	r3, #2
 8022934:	6033      	strmi	r3, [r6, #0]
 8022936:	6825      	ldr	r5, [r4, #0]
 8022938:	f015 0506 	ands.w	r5, r5, #6
 802293c:	d106      	bne.n	802294c <_printf_common+0x48>
 802293e:	f104 0a19 	add.w	sl, r4, #25
 8022942:	68e3      	ldr	r3, [r4, #12]
 8022944:	6832      	ldr	r2, [r6, #0]
 8022946:	1a9b      	subs	r3, r3, r2
 8022948:	42ab      	cmp	r3, r5
 802294a:	dc26      	bgt.n	802299a <_printf_common+0x96>
 802294c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022950:	6822      	ldr	r2, [r4, #0]
 8022952:	3b00      	subs	r3, #0
 8022954:	bf18      	it	ne
 8022956:	2301      	movne	r3, #1
 8022958:	0692      	lsls	r2, r2, #26
 802295a:	d42b      	bmi.n	80229b4 <_printf_common+0xb0>
 802295c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022960:	4641      	mov	r1, r8
 8022962:	4638      	mov	r0, r7
 8022964:	47c8      	blx	r9
 8022966:	3001      	adds	r0, #1
 8022968:	d01e      	beq.n	80229a8 <_printf_common+0xa4>
 802296a:	6823      	ldr	r3, [r4, #0]
 802296c:	6922      	ldr	r2, [r4, #16]
 802296e:	f003 0306 	and.w	r3, r3, #6
 8022972:	2b04      	cmp	r3, #4
 8022974:	bf02      	ittt	eq
 8022976:	68e5      	ldreq	r5, [r4, #12]
 8022978:	6833      	ldreq	r3, [r6, #0]
 802297a:	1aed      	subeq	r5, r5, r3
 802297c:	68a3      	ldr	r3, [r4, #8]
 802297e:	bf0c      	ite	eq
 8022980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022984:	2500      	movne	r5, #0
 8022986:	4293      	cmp	r3, r2
 8022988:	bfc4      	itt	gt
 802298a:	1a9b      	subgt	r3, r3, r2
 802298c:	18ed      	addgt	r5, r5, r3
 802298e:	2600      	movs	r6, #0
 8022990:	341a      	adds	r4, #26
 8022992:	42b5      	cmp	r5, r6
 8022994:	d11a      	bne.n	80229cc <_printf_common+0xc8>
 8022996:	2000      	movs	r0, #0
 8022998:	e008      	b.n	80229ac <_printf_common+0xa8>
 802299a:	2301      	movs	r3, #1
 802299c:	4652      	mov	r2, sl
 802299e:	4641      	mov	r1, r8
 80229a0:	4638      	mov	r0, r7
 80229a2:	47c8      	blx	r9
 80229a4:	3001      	adds	r0, #1
 80229a6:	d103      	bne.n	80229b0 <_printf_common+0xac>
 80229a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80229ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229b0:	3501      	adds	r5, #1
 80229b2:	e7c6      	b.n	8022942 <_printf_common+0x3e>
 80229b4:	18e1      	adds	r1, r4, r3
 80229b6:	1c5a      	adds	r2, r3, #1
 80229b8:	2030      	movs	r0, #48	@ 0x30
 80229ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80229be:	4422      	add	r2, r4
 80229c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80229c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80229c8:	3302      	adds	r3, #2
 80229ca:	e7c7      	b.n	802295c <_printf_common+0x58>
 80229cc:	2301      	movs	r3, #1
 80229ce:	4622      	mov	r2, r4
 80229d0:	4641      	mov	r1, r8
 80229d2:	4638      	mov	r0, r7
 80229d4:	47c8      	blx	r9
 80229d6:	3001      	adds	r0, #1
 80229d8:	d0e6      	beq.n	80229a8 <_printf_common+0xa4>
 80229da:	3601      	adds	r6, #1
 80229dc:	e7d9      	b.n	8022992 <_printf_common+0x8e>
	...

080229e0 <_printf_i>:
 80229e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80229e4:	7e0f      	ldrb	r7, [r1, #24]
 80229e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80229e8:	2f78      	cmp	r7, #120	@ 0x78
 80229ea:	4691      	mov	r9, r2
 80229ec:	4680      	mov	r8, r0
 80229ee:	460c      	mov	r4, r1
 80229f0:	469a      	mov	sl, r3
 80229f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80229f6:	d807      	bhi.n	8022a08 <_printf_i+0x28>
 80229f8:	2f62      	cmp	r7, #98	@ 0x62
 80229fa:	d80a      	bhi.n	8022a12 <_printf_i+0x32>
 80229fc:	2f00      	cmp	r7, #0
 80229fe:	f000 80d2 	beq.w	8022ba6 <_printf_i+0x1c6>
 8022a02:	2f58      	cmp	r7, #88	@ 0x58
 8022a04:	f000 80b9 	beq.w	8022b7a <_printf_i+0x19a>
 8022a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022a10:	e03a      	b.n	8022a88 <_printf_i+0xa8>
 8022a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022a16:	2b15      	cmp	r3, #21
 8022a18:	d8f6      	bhi.n	8022a08 <_printf_i+0x28>
 8022a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8022a20 <_printf_i+0x40>)
 8022a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022a20:	08022a79 	.word	0x08022a79
 8022a24:	08022a8d 	.word	0x08022a8d
 8022a28:	08022a09 	.word	0x08022a09
 8022a2c:	08022a09 	.word	0x08022a09
 8022a30:	08022a09 	.word	0x08022a09
 8022a34:	08022a09 	.word	0x08022a09
 8022a38:	08022a8d 	.word	0x08022a8d
 8022a3c:	08022a09 	.word	0x08022a09
 8022a40:	08022a09 	.word	0x08022a09
 8022a44:	08022a09 	.word	0x08022a09
 8022a48:	08022a09 	.word	0x08022a09
 8022a4c:	08022b8d 	.word	0x08022b8d
 8022a50:	08022ab7 	.word	0x08022ab7
 8022a54:	08022b47 	.word	0x08022b47
 8022a58:	08022a09 	.word	0x08022a09
 8022a5c:	08022a09 	.word	0x08022a09
 8022a60:	08022baf 	.word	0x08022baf
 8022a64:	08022a09 	.word	0x08022a09
 8022a68:	08022ab7 	.word	0x08022ab7
 8022a6c:	08022a09 	.word	0x08022a09
 8022a70:	08022a09 	.word	0x08022a09
 8022a74:	08022b4f 	.word	0x08022b4f
 8022a78:	6833      	ldr	r3, [r6, #0]
 8022a7a:	1d1a      	adds	r2, r3, #4
 8022a7c:	681b      	ldr	r3, [r3, #0]
 8022a7e:	6032      	str	r2, [r6, #0]
 8022a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022a88:	2301      	movs	r3, #1
 8022a8a:	e09d      	b.n	8022bc8 <_printf_i+0x1e8>
 8022a8c:	6833      	ldr	r3, [r6, #0]
 8022a8e:	6820      	ldr	r0, [r4, #0]
 8022a90:	1d19      	adds	r1, r3, #4
 8022a92:	6031      	str	r1, [r6, #0]
 8022a94:	0606      	lsls	r6, r0, #24
 8022a96:	d501      	bpl.n	8022a9c <_printf_i+0xbc>
 8022a98:	681d      	ldr	r5, [r3, #0]
 8022a9a:	e003      	b.n	8022aa4 <_printf_i+0xc4>
 8022a9c:	0645      	lsls	r5, r0, #25
 8022a9e:	d5fb      	bpl.n	8022a98 <_printf_i+0xb8>
 8022aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022aa4:	2d00      	cmp	r5, #0
 8022aa6:	da03      	bge.n	8022ab0 <_printf_i+0xd0>
 8022aa8:	232d      	movs	r3, #45	@ 0x2d
 8022aaa:	426d      	negs	r5, r5
 8022aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022ab0:	4859      	ldr	r0, [pc, #356]	@ (8022c18 <_printf_i+0x238>)
 8022ab2:	230a      	movs	r3, #10
 8022ab4:	e011      	b.n	8022ada <_printf_i+0xfa>
 8022ab6:	6821      	ldr	r1, [r4, #0]
 8022ab8:	6833      	ldr	r3, [r6, #0]
 8022aba:	0608      	lsls	r0, r1, #24
 8022abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8022ac0:	d402      	bmi.n	8022ac8 <_printf_i+0xe8>
 8022ac2:	0649      	lsls	r1, r1, #25
 8022ac4:	bf48      	it	mi
 8022ac6:	b2ad      	uxthmi	r5, r5
 8022ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8022aca:	4853      	ldr	r0, [pc, #332]	@ (8022c18 <_printf_i+0x238>)
 8022acc:	6033      	str	r3, [r6, #0]
 8022ace:	bf14      	ite	ne
 8022ad0:	230a      	movne	r3, #10
 8022ad2:	2308      	moveq	r3, #8
 8022ad4:	2100      	movs	r1, #0
 8022ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022ada:	6866      	ldr	r6, [r4, #4]
 8022adc:	60a6      	str	r6, [r4, #8]
 8022ade:	2e00      	cmp	r6, #0
 8022ae0:	bfa2      	ittt	ge
 8022ae2:	6821      	ldrge	r1, [r4, #0]
 8022ae4:	f021 0104 	bicge.w	r1, r1, #4
 8022ae8:	6021      	strge	r1, [r4, #0]
 8022aea:	b90d      	cbnz	r5, 8022af0 <_printf_i+0x110>
 8022aec:	2e00      	cmp	r6, #0
 8022aee:	d04b      	beq.n	8022b88 <_printf_i+0x1a8>
 8022af0:	4616      	mov	r6, r2
 8022af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8022af6:	fb03 5711 	mls	r7, r3, r1, r5
 8022afa:	5dc7      	ldrb	r7, [r0, r7]
 8022afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022b00:	462f      	mov	r7, r5
 8022b02:	42bb      	cmp	r3, r7
 8022b04:	460d      	mov	r5, r1
 8022b06:	d9f4      	bls.n	8022af2 <_printf_i+0x112>
 8022b08:	2b08      	cmp	r3, #8
 8022b0a:	d10b      	bne.n	8022b24 <_printf_i+0x144>
 8022b0c:	6823      	ldr	r3, [r4, #0]
 8022b0e:	07df      	lsls	r7, r3, #31
 8022b10:	d508      	bpl.n	8022b24 <_printf_i+0x144>
 8022b12:	6923      	ldr	r3, [r4, #16]
 8022b14:	6861      	ldr	r1, [r4, #4]
 8022b16:	4299      	cmp	r1, r3
 8022b18:	bfde      	ittt	le
 8022b1a:	2330      	movle	r3, #48	@ 0x30
 8022b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022b20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022b24:	1b92      	subs	r2, r2, r6
 8022b26:	6122      	str	r2, [r4, #16]
 8022b28:	f8cd a000 	str.w	sl, [sp]
 8022b2c:	464b      	mov	r3, r9
 8022b2e:	aa03      	add	r2, sp, #12
 8022b30:	4621      	mov	r1, r4
 8022b32:	4640      	mov	r0, r8
 8022b34:	f7ff fee6 	bl	8022904 <_printf_common>
 8022b38:	3001      	adds	r0, #1
 8022b3a:	d14a      	bne.n	8022bd2 <_printf_i+0x1f2>
 8022b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022b40:	b004      	add	sp, #16
 8022b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b46:	6823      	ldr	r3, [r4, #0]
 8022b48:	f043 0320 	orr.w	r3, r3, #32
 8022b4c:	6023      	str	r3, [r4, #0]
 8022b4e:	4833      	ldr	r0, [pc, #204]	@ (8022c1c <_printf_i+0x23c>)
 8022b50:	2778      	movs	r7, #120	@ 0x78
 8022b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022b56:	6823      	ldr	r3, [r4, #0]
 8022b58:	6831      	ldr	r1, [r6, #0]
 8022b5a:	061f      	lsls	r7, r3, #24
 8022b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8022b60:	d402      	bmi.n	8022b68 <_printf_i+0x188>
 8022b62:	065f      	lsls	r7, r3, #25
 8022b64:	bf48      	it	mi
 8022b66:	b2ad      	uxthmi	r5, r5
 8022b68:	6031      	str	r1, [r6, #0]
 8022b6a:	07d9      	lsls	r1, r3, #31
 8022b6c:	bf44      	itt	mi
 8022b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8022b72:	6023      	strmi	r3, [r4, #0]
 8022b74:	b11d      	cbz	r5, 8022b7e <_printf_i+0x19e>
 8022b76:	2310      	movs	r3, #16
 8022b78:	e7ac      	b.n	8022ad4 <_printf_i+0xf4>
 8022b7a:	4827      	ldr	r0, [pc, #156]	@ (8022c18 <_printf_i+0x238>)
 8022b7c:	e7e9      	b.n	8022b52 <_printf_i+0x172>
 8022b7e:	6823      	ldr	r3, [r4, #0]
 8022b80:	f023 0320 	bic.w	r3, r3, #32
 8022b84:	6023      	str	r3, [r4, #0]
 8022b86:	e7f6      	b.n	8022b76 <_printf_i+0x196>
 8022b88:	4616      	mov	r6, r2
 8022b8a:	e7bd      	b.n	8022b08 <_printf_i+0x128>
 8022b8c:	6833      	ldr	r3, [r6, #0]
 8022b8e:	6825      	ldr	r5, [r4, #0]
 8022b90:	6961      	ldr	r1, [r4, #20]
 8022b92:	1d18      	adds	r0, r3, #4
 8022b94:	6030      	str	r0, [r6, #0]
 8022b96:	062e      	lsls	r6, r5, #24
 8022b98:	681b      	ldr	r3, [r3, #0]
 8022b9a:	d501      	bpl.n	8022ba0 <_printf_i+0x1c0>
 8022b9c:	6019      	str	r1, [r3, #0]
 8022b9e:	e002      	b.n	8022ba6 <_printf_i+0x1c6>
 8022ba0:	0668      	lsls	r0, r5, #25
 8022ba2:	d5fb      	bpl.n	8022b9c <_printf_i+0x1bc>
 8022ba4:	8019      	strh	r1, [r3, #0]
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	6123      	str	r3, [r4, #16]
 8022baa:	4616      	mov	r6, r2
 8022bac:	e7bc      	b.n	8022b28 <_printf_i+0x148>
 8022bae:	6833      	ldr	r3, [r6, #0]
 8022bb0:	1d1a      	adds	r2, r3, #4
 8022bb2:	6032      	str	r2, [r6, #0]
 8022bb4:	681e      	ldr	r6, [r3, #0]
 8022bb6:	6862      	ldr	r2, [r4, #4]
 8022bb8:	2100      	movs	r1, #0
 8022bba:	4630      	mov	r0, r6
 8022bbc:	f7dd fba8 	bl	8000310 <memchr>
 8022bc0:	b108      	cbz	r0, 8022bc6 <_printf_i+0x1e6>
 8022bc2:	1b80      	subs	r0, r0, r6
 8022bc4:	6060      	str	r0, [r4, #4]
 8022bc6:	6863      	ldr	r3, [r4, #4]
 8022bc8:	6123      	str	r3, [r4, #16]
 8022bca:	2300      	movs	r3, #0
 8022bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022bd0:	e7aa      	b.n	8022b28 <_printf_i+0x148>
 8022bd2:	6923      	ldr	r3, [r4, #16]
 8022bd4:	4632      	mov	r2, r6
 8022bd6:	4649      	mov	r1, r9
 8022bd8:	4640      	mov	r0, r8
 8022bda:	47d0      	blx	sl
 8022bdc:	3001      	adds	r0, #1
 8022bde:	d0ad      	beq.n	8022b3c <_printf_i+0x15c>
 8022be0:	6823      	ldr	r3, [r4, #0]
 8022be2:	079b      	lsls	r3, r3, #30
 8022be4:	d413      	bmi.n	8022c0e <_printf_i+0x22e>
 8022be6:	68e0      	ldr	r0, [r4, #12]
 8022be8:	9b03      	ldr	r3, [sp, #12]
 8022bea:	4298      	cmp	r0, r3
 8022bec:	bfb8      	it	lt
 8022bee:	4618      	movlt	r0, r3
 8022bf0:	e7a6      	b.n	8022b40 <_printf_i+0x160>
 8022bf2:	2301      	movs	r3, #1
 8022bf4:	4632      	mov	r2, r6
 8022bf6:	4649      	mov	r1, r9
 8022bf8:	4640      	mov	r0, r8
 8022bfa:	47d0      	blx	sl
 8022bfc:	3001      	adds	r0, #1
 8022bfe:	d09d      	beq.n	8022b3c <_printf_i+0x15c>
 8022c00:	3501      	adds	r5, #1
 8022c02:	68e3      	ldr	r3, [r4, #12]
 8022c04:	9903      	ldr	r1, [sp, #12]
 8022c06:	1a5b      	subs	r3, r3, r1
 8022c08:	42ab      	cmp	r3, r5
 8022c0a:	dcf2      	bgt.n	8022bf2 <_printf_i+0x212>
 8022c0c:	e7eb      	b.n	8022be6 <_printf_i+0x206>
 8022c0e:	2500      	movs	r5, #0
 8022c10:	f104 0619 	add.w	r6, r4, #25
 8022c14:	e7f5      	b.n	8022c02 <_printf_i+0x222>
 8022c16:	bf00      	nop
 8022c18:	08025d17 	.word	0x08025d17
 8022c1c:	08025d28 	.word	0x08025d28

08022c20 <__sflush_r>:
 8022c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c28:	0716      	lsls	r6, r2, #28
 8022c2a:	4605      	mov	r5, r0
 8022c2c:	460c      	mov	r4, r1
 8022c2e:	d454      	bmi.n	8022cda <__sflush_r+0xba>
 8022c30:	684b      	ldr	r3, [r1, #4]
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	dc02      	bgt.n	8022c3c <__sflush_r+0x1c>
 8022c36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	dd48      	ble.n	8022cce <__sflush_r+0xae>
 8022c3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022c3e:	2e00      	cmp	r6, #0
 8022c40:	d045      	beq.n	8022cce <__sflush_r+0xae>
 8022c42:	2300      	movs	r3, #0
 8022c44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022c48:	682f      	ldr	r7, [r5, #0]
 8022c4a:	6a21      	ldr	r1, [r4, #32]
 8022c4c:	602b      	str	r3, [r5, #0]
 8022c4e:	d030      	beq.n	8022cb2 <__sflush_r+0x92>
 8022c50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022c52:	89a3      	ldrh	r3, [r4, #12]
 8022c54:	0759      	lsls	r1, r3, #29
 8022c56:	d505      	bpl.n	8022c64 <__sflush_r+0x44>
 8022c58:	6863      	ldr	r3, [r4, #4]
 8022c5a:	1ad2      	subs	r2, r2, r3
 8022c5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022c5e:	b10b      	cbz	r3, 8022c64 <__sflush_r+0x44>
 8022c60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022c62:	1ad2      	subs	r2, r2, r3
 8022c64:	2300      	movs	r3, #0
 8022c66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022c68:	6a21      	ldr	r1, [r4, #32]
 8022c6a:	4628      	mov	r0, r5
 8022c6c:	47b0      	blx	r6
 8022c6e:	1c43      	adds	r3, r0, #1
 8022c70:	89a3      	ldrh	r3, [r4, #12]
 8022c72:	d106      	bne.n	8022c82 <__sflush_r+0x62>
 8022c74:	6829      	ldr	r1, [r5, #0]
 8022c76:	291d      	cmp	r1, #29
 8022c78:	d82b      	bhi.n	8022cd2 <__sflush_r+0xb2>
 8022c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8022d24 <__sflush_r+0x104>)
 8022c7c:	410a      	asrs	r2, r1
 8022c7e:	07d6      	lsls	r6, r2, #31
 8022c80:	d427      	bmi.n	8022cd2 <__sflush_r+0xb2>
 8022c82:	2200      	movs	r2, #0
 8022c84:	6062      	str	r2, [r4, #4]
 8022c86:	04d9      	lsls	r1, r3, #19
 8022c88:	6922      	ldr	r2, [r4, #16]
 8022c8a:	6022      	str	r2, [r4, #0]
 8022c8c:	d504      	bpl.n	8022c98 <__sflush_r+0x78>
 8022c8e:	1c42      	adds	r2, r0, #1
 8022c90:	d101      	bne.n	8022c96 <__sflush_r+0x76>
 8022c92:	682b      	ldr	r3, [r5, #0]
 8022c94:	b903      	cbnz	r3, 8022c98 <__sflush_r+0x78>
 8022c96:	6560      	str	r0, [r4, #84]	@ 0x54
 8022c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022c9a:	602f      	str	r7, [r5, #0]
 8022c9c:	b1b9      	cbz	r1, 8022cce <__sflush_r+0xae>
 8022c9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022ca2:	4299      	cmp	r1, r3
 8022ca4:	d002      	beq.n	8022cac <__sflush_r+0x8c>
 8022ca6:	4628      	mov	r0, r5
 8022ca8:	f7ff fc82 	bl	80225b0 <_free_r>
 8022cac:	2300      	movs	r3, #0
 8022cae:	6363      	str	r3, [r4, #52]	@ 0x34
 8022cb0:	e00d      	b.n	8022cce <__sflush_r+0xae>
 8022cb2:	2301      	movs	r3, #1
 8022cb4:	4628      	mov	r0, r5
 8022cb6:	47b0      	blx	r6
 8022cb8:	4602      	mov	r2, r0
 8022cba:	1c50      	adds	r0, r2, #1
 8022cbc:	d1c9      	bne.n	8022c52 <__sflush_r+0x32>
 8022cbe:	682b      	ldr	r3, [r5, #0]
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	d0c6      	beq.n	8022c52 <__sflush_r+0x32>
 8022cc4:	2b1d      	cmp	r3, #29
 8022cc6:	d001      	beq.n	8022ccc <__sflush_r+0xac>
 8022cc8:	2b16      	cmp	r3, #22
 8022cca:	d11e      	bne.n	8022d0a <__sflush_r+0xea>
 8022ccc:	602f      	str	r7, [r5, #0]
 8022cce:	2000      	movs	r0, #0
 8022cd0:	e022      	b.n	8022d18 <__sflush_r+0xf8>
 8022cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022cd6:	b21b      	sxth	r3, r3
 8022cd8:	e01b      	b.n	8022d12 <__sflush_r+0xf2>
 8022cda:	690f      	ldr	r7, [r1, #16]
 8022cdc:	2f00      	cmp	r7, #0
 8022cde:	d0f6      	beq.n	8022cce <__sflush_r+0xae>
 8022ce0:	0793      	lsls	r3, r2, #30
 8022ce2:	680e      	ldr	r6, [r1, #0]
 8022ce4:	bf08      	it	eq
 8022ce6:	694b      	ldreq	r3, [r1, #20]
 8022ce8:	600f      	str	r7, [r1, #0]
 8022cea:	bf18      	it	ne
 8022cec:	2300      	movne	r3, #0
 8022cee:	eba6 0807 	sub.w	r8, r6, r7
 8022cf2:	608b      	str	r3, [r1, #8]
 8022cf4:	f1b8 0f00 	cmp.w	r8, #0
 8022cf8:	dde9      	ble.n	8022cce <__sflush_r+0xae>
 8022cfa:	6a21      	ldr	r1, [r4, #32]
 8022cfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022cfe:	4643      	mov	r3, r8
 8022d00:	463a      	mov	r2, r7
 8022d02:	4628      	mov	r0, r5
 8022d04:	47b0      	blx	r6
 8022d06:	2800      	cmp	r0, #0
 8022d08:	dc08      	bgt.n	8022d1c <__sflush_r+0xfc>
 8022d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022d12:	81a3      	strh	r3, [r4, #12]
 8022d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d1c:	4407      	add	r7, r0
 8022d1e:	eba8 0800 	sub.w	r8, r8, r0
 8022d22:	e7e7      	b.n	8022cf4 <__sflush_r+0xd4>
 8022d24:	dfbffffe 	.word	0xdfbffffe

08022d28 <_fflush_r>:
 8022d28:	b538      	push	{r3, r4, r5, lr}
 8022d2a:	690b      	ldr	r3, [r1, #16]
 8022d2c:	4605      	mov	r5, r0
 8022d2e:	460c      	mov	r4, r1
 8022d30:	b913      	cbnz	r3, 8022d38 <_fflush_r+0x10>
 8022d32:	2500      	movs	r5, #0
 8022d34:	4628      	mov	r0, r5
 8022d36:	bd38      	pop	{r3, r4, r5, pc}
 8022d38:	b118      	cbz	r0, 8022d42 <_fflush_r+0x1a>
 8022d3a:	6a03      	ldr	r3, [r0, #32]
 8022d3c:	b90b      	cbnz	r3, 8022d42 <_fflush_r+0x1a>
 8022d3e:	f7ff f8e1 	bl	8021f04 <__sinit>
 8022d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d0f3      	beq.n	8022d32 <_fflush_r+0xa>
 8022d4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022d4c:	07d0      	lsls	r0, r2, #31
 8022d4e:	d404      	bmi.n	8022d5a <_fflush_r+0x32>
 8022d50:	0599      	lsls	r1, r3, #22
 8022d52:	d402      	bmi.n	8022d5a <_fflush_r+0x32>
 8022d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d56:	f7ff fbe8 	bl	802252a <__retarget_lock_acquire_recursive>
 8022d5a:	4628      	mov	r0, r5
 8022d5c:	4621      	mov	r1, r4
 8022d5e:	f7ff ff5f 	bl	8022c20 <__sflush_r>
 8022d62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022d64:	07da      	lsls	r2, r3, #31
 8022d66:	4605      	mov	r5, r0
 8022d68:	d4e4      	bmi.n	8022d34 <_fflush_r+0xc>
 8022d6a:	89a3      	ldrh	r3, [r4, #12]
 8022d6c:	059b      	lsls	r3, r3, #22
 8022d6e:	d4e1      	bmi.n	8022d34 <_fflush_r+0xc>
 8022d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d72:	f7ff fbdb 	bl	802252c <__retarget_lock_release_recursive>
 8022d76:	e7dd      	b.n	8022d34 <_fflush_r+0xc>

08022d78 <fiprintf>:
 8022d78:	b40e      	push	{r1, r2, r3}
 8022d7a:	b503      	push	{r0, r1, lr}
 8022d7c:	4601      	mov	r1, r0
 8022d7e:	ab03      	add	r3, sp, #12
 8022d80:	4805      	ldr	r0, [pc, #20]	@ (8022d98 <fiprintf+0x20>)
 8022d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d86:	6800      	ldr	r0, [r0, #0]
 8022d88:	9301      	str	r3, [sp, #4]
 8022d8a:	f000 f8bb 	bl	8022f04 <_vfiprintf_r>
 8022d8e:	b002      	add	sp, #8
 8022d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d94:	b003      	add	sp, #12
 8022d96:	4770      	bx	lr
 8022d98:	240012bc 	.word	0x240012bc

08022d9c <__swhatbuf_r>:
 8022d9c:	b570      	push	{r4, r5, r6, lr}
 8022d9e:	460c      	mov	r4, r1
 8022da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022da4:	2900      	cmp	r1, #0
 8022da6:	b096      	sub	sp, #88	@ 0x58
 8022da8:	4615      	mov	r5, r2
 8022daa:	461e      	mov	r6, r3
 8022dac:	da0d      	bge.n	8022dca <__swhatbuf_r+0x2e>
 8022dae:	89a3      	ldrh	r3, [r4, #12]
 8022db0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022db4:	f04f 0100 	mov.w	r1, #0
 8022db8:	bf14      	ite	ne
 8022dba:	2340      	movne	r3, #64	@ 0x40
 8022dbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022dc0:	2000      	movs	r0, #0
 8022dc2:	6031      	str	r1, [r6, #0]
 8022dc4:	602b      	str	r3, [r5, #0]
 8022dc6:	b016      	add	sp, #88	@ 0x58
 8022dc8:	bd70      	pop	{r4, r5, r6, pc}
 8022dca:	466a      	mov	r2, sp
 8022dcc:	f000 f848 	bl	8022e60 <_fstat_r>
 8022dd0:	2800      	cmp	r0, #0
 8022dd2:	dbec      	blt.n	8022dae <__swhatbuf_r+0x12>
 8022dd4:	9901      	ldr	r1, [sp, #4]
 8022dd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022dda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022dde:	4259      	negs	r1, r3
 8022de0:	4159      	adcs	r1, r3
 8022de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022de6:	e7eb      	b.n	8022dc0 <__swhatbuf_r+0x24>

08022de8 <__smakebuf_r>:
 8022de8:	898b      	ldrh	r3, [r1, #12]
 8022dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022dec:	079d      	lsls	r5, r3, #30
 8022dee:	4606      	mov	r6, r0
 8022df0:	460c      	mov	r4, r1
 8022df2:	d507      	bpl.n	8022e04 <__smakebuf_r+0x1c>
 8022df4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022df8:	6023      	str	r3, [r4, #0]
 8022dfa:	6123      	str	r3, [r4, #16]
 8022dfc:	2301      	movs	r3, #1
 8022dfe:	6163      	str	r3, [r4, #20]
 8022e00:	b003      	add	sp, #12
 8022e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e04:	ab01      	add	r3, sp, #4
 8022e06:	466a      	mov	r2, sp
 8022e08:	f7ff ffc8 	bl	8022d9c <__swhatbuf_r>
 8022e0c:	9f00      	ldr	r7, [sp, #0]
 8022e0e:	4605      	mov	r5, r0
 8022e10:	4639      	mov	r1, r7
 8022e12:	4630      	mov	r0, r6
 8022e14:	f7fe fe44 	bl	8021aa0 <_malloc_r>
 8022e18:	b948      	cbnz	r0, 8022e2e <__smakebuf_r+0x46>
 8022e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e1e:	059a      	lsls	r2, r3, #22
 8022e20:	d4ee      	bmi.n	8022e00 <__smakebuf_r+0x18>
 8022e22:	f023 0303 	bic.w	r3, r3, #3
 8022e26:	f043 0302 	orr.w	r3, r3, #2
 8022e2a:	81a3      	strh	r3, [r4, #12]
 8022e2c:	e7e2      	b.n	8022df4 <__smakebuf_r+0xc>
 8022e2e:	89a3      	ldrh	r3, [r4, #12]
 8022e30:	6020      	str	r0, [r4, #0]
 8022e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022e36:	81a3      	strh	r3, [r4, #12]
 8022e38:	9b01      	ldr	r3, [sp, #4]
 8022e3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022e3e:	b15b      	cbz	r3, 8022e58 <__smakebuf_r+0x70>
 8022e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e44:	4630      	mov	r0, r6
 8022e46:	f000 f81d 	bl	8022e84 <_isatty_r>
 8022e4a:	b128      	cbz	r0, 8022e58 <__smakebuf_r+0x70>
 8022e4c:	89a3      	ldrh	r3, [r4, #12]
 8022e4e:	f023 0303 	bic.w	r3, r3, #3
 8022e52:	f043 0301 	orr.w	r3, r3, #1
 8022e56:	81a3      	strh	r3, [r4, #12]
 8022e58:	89a3      	ldrh	r3, [r4, #12]
 8022e5a:	431d      	orrs	r5, r3
 8022e5c:	81a5      	strh	r5, [r4, #12]
 8022e5e:	e7cf      	b.n	8022e00 <__smakebuf_r+0x18>

08022e60 <_fstat_r>:
 8022e60:	b538      	push	{r3, r4, r5, lr}
 8022e62:	4d07      	ldr	r5, [pc, #28]	@ (8022e80 <_fstat_r+0x20>)
 8022e64:	2300      	movs	r3, #0
 8022e66:	4604      	mov	r4, r0
 8022e68:	4608      	mov	r0, r1
 8022e6a:	4611      	mov	r1, r2
 8022e6c:	602b      	str	r3, [r5, #0]
 8022e6e:	f7df fbff 	bl	8002670 <_fstat>
 8022e72:	1c43      	adds	r3, r0, #1
 8022e74:	d102      	bne.n	8022e7c <_fstat_r+0x1c>
 8022e76:	682b      	ldr	r3, [r5, #0]
 8022e78:	b103      	cbz	r3, 8022e7c <_fstat_r+0x1c>
 8022e7a:	6023      	str	r3, [r4, #0]
 8022e7c:	bd38      	pop	{r3, r4, r5, pc}
 8022e7e:	bf00      	nop
 8022e80:	240696e8 	.word	0x240696e8

08022e84 <_isatty_r>:
 8022e84:	b538      	push	{r3, r4, r5, lr}
 8022e86:	4d06      	ldr	r5, [pc, #24]	@ (8022ea0 <_isatty_r+0x1c>)
 8022e88:	2300      	movs	r3, #0
 8022e8a:	4604      	mov	r4, r0
 8022e8c:	4608      	mov	r0, r1
 8022e8e:	602b      	str	r3, [r5, #0]
 8022e90:	f7df fbfe 	bl	8002690 <_isatty>
 8022e94:	1c43      	adds	r3, r0, #1
 8022e96:	d102      	bne.n	8022e9e <_isatty_r+0x1a>
 8022e98:	682b      	ldr	r3, [r5, #0]
 8022e9a:	b103      	cbz	r3, 8022e9e <_isatty_r+0x1a>
 8022e9c:	6023      	str	r3, [r4, #0]
 8022e9e:	bd38      	pop	{r3, r4, r5, pc}
 8022ea0:	240696e8 	.word	0x240696e8

08022ea4 <abort>:
 8022ea4:	b508      	push	{r3, lr}
 8022ea6:	2006      	movs	r0, #6
 8022ea8:	f000 f96c 	bl	8023184 <raise>
 8022eac:	2001      	movs	r0, #1
 8022eae:	f7df fb8f 	bl	80025d0 <_exit>

08022eb2 <__sfputc_r>:
 8022eb2:	6893      	ldr	r3, [r2, #8]
 8022eb4:	3b01      	subs	r3, #1
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	b410      	push	{r4}
 8022eba:	6093      	str	r3, [r2, #8]
 8022ebc:	da08      	bge.n	8022ed0 <__sfputc_r+0x1e>
 8022ebe:	6994      	ldr	r4, [r2, #24]
 8022ec0:	42a3      	cmp	r3, r4
 8022ec2:	db01      	blt.n	8022ec8 <__sfputc_r+0x16>
 8022ec4:	290a      	cmp	r1, #10
 8022ec6:	d103      	bne.n	8022ed0 <__sfputc_r+0x1e>
 8022ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ecc:	f7ff b95a 	b.w	8022184 <__swbuf_r>
 8022ed0:	6813      	ldr	r3, [r2, #0]
 8022ed2:	1c58      	adds	r0, r3, #1
 8022ed4:	6010      	str	r0, [r2, #0]
 8022ed6:	7019      	strb	r1, [r3, #0]
 8022ed8:	4608      	mov	r0, r1
 8022eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ede:	4770      	bx	lr

08022ee0 <__sfputs_r>:
 8022ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ee2:	4606      	mov	r6, r0
 8022ee4:	460f      	mov	r7, r1
 8022ee6:	4614      	mov	r4, r2
 8022ee8:	18d5      	adds	r5, r2, r3
 8022eea:	42ac      	cmp	r4, r5
 8022eec:	d101      	bne.n	8022ef2 <__sfputs_r+0x12>
 8022eee:	2000      	movs	r0, #0
 8022ef0:	e007      	b.n	8022f02 <__sfputs_r+0x22>
 8022ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ef6:	463a      	mov	r2, r7
 8022ef8:	4630      	mov	r0, r6
 8022efa:	f7ff ffda 	bl	8022eb2 <__sfputc_r>
 8022efe:	1c43      	adds	r3, r0, #1
 8022f00:	d1f3      	bne.n	8022eea <__sfputs_r+0xa>
 8022f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022f04 <_vfiprintf_r>:
 8022f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f08:	460d      	mov	r5, r1
 8022f0a:	b09d      	sub	sp, #116	@ 0x74
 8022f0c:	4614      	mov	r4, r2
 8022f0e:	4698      	mov	r8, r3
 8022f10:	4606      	mov	r6, r0
 8022f12:	b118      	cbz	r0, 8022f1c <_vfiprintf_r+0x18>
 8022f14:	6a03      	ldr	r3, [r0, #32]
 8022f16:	b90b      	cbnz	r3, 8022f1c <_vfiprintf_r+0x18>
 8022f18:	f7fe fff4 	bl	8021f04 <__sinit>
 8022f1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022f1e:	07d9      	lsls	r1, r3, #31
 8022f20:	d405      	bmi.n	8022f2e <_vfiprintf_r+0x2a>
 8022f22:	89ab      	ldrh	r3, [r5, #12]
 8022f24:	059a      	lsls	r2, r3, #22
 8022f26:	d402      	bmi.n	8022f2e <_vfiprintf_r+0x2a>
 8022f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022f2a:	f7ff fafe 	bl	802252a <__retarget_lock_acquire_recursive>
 8022f2e:	89ab      	ldrh	r3, [r5, #12]
 8022f30:	071b      	lsls	r3, r3, #28
 8022f32:	d501      	bpl.n	8022f38 <_vfiprintf_r+0x34>
 8022f34:	692b      	ldr	r3, [r5, #16]
 8022f36:	b99b      	cbnz	r3, 8022f60 <_vfiprintf_r+0x5c>
 8022f38:	4629      	mov	r1, r5
 8022f3a:	4630      	mov	r0, r6
 8022f3c:	f7ff f960 	bl	8022200 <__swsetup_r>
 8022f40:	b170      	cbz	r0, 8022f60 <_vfiprintf_r+0x5c>
 8022f42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022f44:	07dc      	lsls	r4, r3, #31
 8022f46:	d504      	bpl.n	8022f52 <_vfiprintf_r+0x4e>
 8022f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022f4c:	b01d      	add	sp, #116	@ 0x74
 8022f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f52:	89ab      	ldrh	r3, [r5, #12]
 8022f54:	0598      	lsls	r0, r3, #22
 8022f56:	d4f7      	bmi.n	8022f48 <_vfiprintf_r+0x44>
 8022f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022f5a:	f7ff fae7 	bl	802252c <__retarget_lock_release_recursive>
 8022f5e:	e7f3      	b.n	8022f48 <_vfiprintf_r+0x44>
 8022f60:	2300      	movs	r3, #0
 8022f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f64:	2320      	movs	r3, #32
 8022f66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8022f6e:	2330      	movs	r3, #48	@ 0x30
 8022f70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023120 <_vfiprintf_r+0x21c>
 8022f74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022f78:	f04f 0901 	mov.w	r9, #1
 8022f7c:	4623      	mov	r3, r4
 8022f7e:	469a      	mov	sl, r3
 8022f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022f84:	b10a      	cbz	r2, 8022f8a <_vfiprintf_r+0x86>
 8022f86:	2a25      	cmp	r2, #37	@ 0x25
 8022f88:	d1f9      	bne.n	8022f7e <_vfiprintf_r+0x7a>
 8022f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8022f8e:	d00b      	beq.n	8022fa8 <_vfiprintf_r+0xa4>
 8022f90:	465b      	mov	r3, fp
 8022f92:	4622      	mov	r2, r4
 8022f94:	4629      	mov	r1, r5
 8022f96:	4630      	mov	r0, r6
 8022f98:	f7ff ffa2 	bl	8022ee0 <__sfputs_r>
 8022f9c:	3001      	adds	r0, #1
 8022f9e:	f000 80a7 	beq.w	80230f0 <_vfiprintf_r+0x1ec>
 8022fa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022fa4:	445a      	add	r2, fp
 8022fa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8022fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	f000 809f 	beq.w	80230f0 <_vfiprintf_r+0x1ec>
 8022fb2:	2300      	movs	r3, #0
 8022fb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022fbc:	f10a 0a01 	add.w	sl, sl, #1
 8022fc0:	9304      	str	r3, [sp, #16]
 8022fc2:	9307      	str	r3, [sp, #28]
 8022fc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022fc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8022fca:	4654      	mov	r4, sl
 8022fcc:	2205      	movs	r2, #5
 8022fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022fd2:	4853      	ldr	r0, [pc, #332]	@ (8023120 <_vfiprintf_r+0x21c>)
 8022fd4:	f7dd f99c 	bl	8000310 <memchr>
 8022fd8:	9a04      	ldr	r2, [sp, #16]
 8022fda:	b9d8      	cbnz	r0, 8023014 <_vfiprintf_r+0x110>
 8022fdc:	06d1      	lsls	r1, r2, #27
 8022fde:	bf44      	itt	mi
 8022fe0:	2320      	movmi	r3, #32
 8022fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022fe6:	0713      	lsls	r3, r2, #28
 8022fe8:	bf44      	itt	mi
 8022fea:	232b      	movmi	r3, #43	@ 0x2b
 8022fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8022ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8022ff6:	d015      	beq.n	8023024 <_vfiprintf_r+0x120>
 8022ff8:	9a07      	ldr	r2, [sp, #28]
 8022ffa:	4654      	mov	r4, sl
 8022ffc:	2000      	movs	r0, #0
 8022ffe:	f04f 0c0a 	mov.w	ip, #10
 8023002:	4621      	mov	r1, r4
 8023004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023008:	3b30      	subs	r3, #48	@ 0x30
 802300a:	2b09      	cmp	r3, #9
 802300c:	d94b      	bls.n	80230a6 <_vfiprintf_r+0x1a2>
 802300e:	b1b0      	cbz	r0, 802303e <_vfiprintf_r+0x13a>
 8023010:	9207      	str	r2, [sp, #28]
 8023012:	e014      	b.n	802303e <_vfiprintf_r+0x13a>
 8023014:	eba0 0308 	sub.w	r3, r0, r8
 8023018:	fa09 f303 	lsl.w	r3, r9, r3
 802301c:	4313      	orrs	r3, r2
 802301e:	9304      	str	r3, [sp, #16]
 8023020:	46a2      	mov	sl, r4
 8023022:	e7d2      	b.n	8022fca <_vfiprintf_r+0xc6>
 8023024:	9b03      	ldr	r3, [sp, #12]
 8023026:	1d19      	adds	r1, r3, #4
 8023028:	681b      	ldr	r3, [r3, #0]
 802302a:	9103      	str	r1, [sp, #12]
 802302c:	2b00      	cmp	r3, #0
 802302e:	bfbb      	ittet	lt
 8023030:	425b      	neglt	r3, r3
 8023032:	f042 0202 	orrlt.w	r2, r2, #2
 8023036:	9307      	strge	r3, [sp, #28]
 8023038:	9307      	strlt	r3, [sp, #28]
 802303a:	bfb8      	it	lt
 802303c:	9204      	strlt	r2, [sp, #16]
 802303e:	7823      	ldrb	r3, [r4, #0]
 8023040:	2b2e      	cmp	r3, #46	@ 0x2e
 8023042:	d10a      	bne.n	802305a <_vfiprintf_r+0x156>
 8023044:	7863      	ldrb	r3, [r4, #1]
 8023046:	2b2a      	cmp	r3, #42	@ 0x2a
 8023048:	d132      	bne.n	80230b0 <_vfiprintf_r+0x1ac>
 802304a:	9b03      	ldr	r3, [sp, #12]
 802304c:	1d1a      	adds	r2, r3, #4
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	9203      	str	r2, [sp, #12]
 8023052:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023056:	3402      	adds	r4, #2
 8023058:	9305      	str	r3, [sp, #20]
 802305a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023130 <_vfiprintf_r+0x22c>
 802305e:	7821      	ldrb	r1, [r4, #0]
 8023060:	2203      	movs	r2, #3
 8023062:	4650      	mov	r0, sl
 8023064:	f7dd f954 	bl	8000310 <memchr>
 8023068:	b138      	cbz	r0, 802307a <_vfiprintf_r+0x176>
 802306a:	9b04      	ldr	r3, [sp, #16]
 802306c:	eba0 000a 	sub.w	r0, r0, sl
 8023070:	2240      	movs	r2, #64	@ 0x40
 8023072:	4082      	lsls	r2, r0
 8023074:	4313      	orrs	r3, r2
 8023076:	3401      	adds	r4, #1
 8023078:	9304      	str	r3, [sp, #16]
 802307a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802307e:	4829      	ldr	r0, [pc, #164]	@ (8023124 <_vfiprintf_r+0x220>)
 8023080:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023084:	2206      	movs	r2, #6
 8023086:	f7dd f943 	bl	8000310 <memchr>
 802308a:	2800      	cmp	r0, #0
 802308c:	d03f      	beq.n	802310e <_vfiprintf_r+0x20a>
 802308e:	4b26      	ldr	r3, [pc, #152]	@ (8023128 <_vfiprintf_r+0x224>)
 8023090:	bb1b      	cbnz	r3, 80230da <_vfiprintf_r+0x1d6>
 8023092:	9b03      	ldr	r3, [sp, #12]
 8023094:	3307      	adds	r3, #7
 8023096:	f023 0307 	bic.w	r3, r3, #7
 802309a:	3308      	adds	r3, #8
 802309c:	9303      	str	r3, [sp, #12]
 802309e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230a0:	443b      	add	r3, r7
 80230a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80230a4:	e76a      	b.n	8022f7c <_vfiprintf_r+0x78>
 80230a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80230aa:	460c      	mov	r4, r1
 80230ac:	2001      	movs	r0, #1
 80230ae:	e7a8      	b.n	8023002 <_vfiprintf_r+0xfe>
 80230b0:	2300      	movs	r3, #0
 80230b2:	3401      	adds	r4, #1
 80230b4:	9305      	str	r3, [sp, #20]
 80230b6:	4619      	mov	r1, r3
 80230b8:	f04f 0c0a 	mov.w	ip, #10
 80230bc:	4620      	mov	r0, r4
 80230be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80230c2:	3a30      	subs	r2, #48	@ 0x30
 80230c4:	2a09      	cmp	r2, #9
 80230c6:	d903      	bls.n	80230d0 <_vfiprintf_r+0x1cc>
 80230c8:	2b00      	cmp	r3, #0
 80230ca:	d0c6      	beq.n	802305a <_vfiprintf_r+0x156>
 80230cc:	9105      	str	r1, [sp, #20]
 80230ce:	e7c4      	b.n	802305a <_vfiprintf_r+0x156>
 80230d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80230d4:	4604      	mov	r4, r0
 80230d6:	2301      	movs	r3, #1
 80230d8:	e7f0      	b.n	80230bc <_vfiprintf_r+0x1b8>
 80230da:	ab03      	add	r3, sp, #12
 80230dc:	9300      	str	r3, [sp, #0]
 80230de:	462a      	mov	r2, r5
 80230e0:	4b12      	ldr	r3, [pc, #72]	@ (802312c <_vfiprintf_r+0x228>)
 80230e2:	a904      	add	r1, sp, #16
 80230e4:	4630      	mov	r0, r6
 80230e6:	f3af 8000 	nop.w
 80230ea:	4607      	mov	r7, r0
 80230ec:	1c78      	adds	r0, r7, #1
 80230ee:	d1d6      	bne.n	802309e <_vfiprintf_r+0x19a>
 80230f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80230f2:	07d9      	lsls	r1, r3, #31
 80230f4:	d405      	bmi.n	8023102 <_vfiprintf_r+0x1fe>
 80230f6:	89ab      	ldrh	r3, [r5, #12]
 80230f8:	059a      	lsls	r2, r3, #22
 80230fa:	d402      	bmi.n	8023102 <_vfiprintf_r+0x1fe>
 80230fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80230fe:	f7ff fa15 	bl	802252c <__retarget_lock_release_recursive>
 8023102:	89ab      	ldrh	r3, [r5, #12]
 8023104:	065b      	lsls	r3, r3, #25
 8023106:	f53f af1f 	bmi.w	8022f48 <_vfiprintf_r+0x44>
 802310a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802310c:	e71e      	b.n	8022f4c <_vfiprintf_r+0x48>
 802310e:	ab03      	add	r3, sp, #12
 8023110:	9300      	str	r3, [sp, #0]
 8023112:	462a      	mov	r2, r5
 8023114:	4b05      	ldr	r3, [pc, #20]	@ (802312c <_vfiprintf_r+0x228>)
 8023116:	a904      	add	r1, sp, #16
 8023118:	4630      	mov	r0, r6
 802311a:	f7ff fc61 	bl	80229e0 <_printf_i>
 802311e:	e7e4      	b.n	80230ea <_vfiprintf_r+0x1e6>
 8023120:	08025d06 	.word	0x08025d06
 8023124:	08025d10 	.word	0x08025d10
 8023128:	00000000 	.word	0x00000000
 802312c:	08022ee1 	.word	0x08022ee1
 8023130:	08025d0c 	.word	0x08025d0c

08023134 <_raise_r>:
 8023134:	291f      	cmp	r1, #31
 8023136:	b538      	push	{r3, r4, r5, lr}
 8023138:	4605      	mov	r5, r0
 802313a:	460c      	mov	r4, r1
 802313c:	d904      	bls.n	8023148 <_raise_r+0x14>
 802313e:	2316      	movs	r3, #22
 8023140:	6003      	str	r3, [r0, #0]
 8023142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023146:	bd38      	pop	{r3, r4, r5, pc}
 8023148:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802314a:	b112      	cbz	r2, 8023152 <_raise_r+0x1e>
 802314c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023150:	b94b      	cbnz	r3, 8023166 <_raise_r+0x32>
 8023152:	4628      	mov	r0, r5
 8023154:	f000 f830 	bl	80231b8 <_getpid_r>
 8023158:	4622      	mov	r2, r4
 802315a:	4601      	mov	r1, r0
 802315c:	4628      	mov	r0, r5
 802315e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023162:	f000 b817 	b.w	8023194 <_kill_r>
 8023166:	2b01      	cmp	r3, #1
 8023168:	d00a      	beq.n	8023180 <_raise_r+0x4c>
 802316a:	1c59      	adds	r1, r3, #1
 802316c:	d103      	bne.n	8023176 <_raise_r+0x42>
 802316e:	2316      	movs	r3, #22
 8023170:	6003      	str	r3, [r0, #0]
 8023172:	2001      	movs	r0, #1
 8023174:	e7e7      	b.n	8023146 <_raise_r+0x12>
 8023176:	2100      	movs	r1, #0
 8023178:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802317c:	4620      	mov	r0, r4
 802317e:	4798      	blx	r3
 8023180:	2000      	movs	r0, #0
 8023182:	e7e0      	b.n	8023146 <_raise_r+0x12>

08023184 <raise>:
 8023184:	4b02      	ldr	r3, [pc, #8]	@ (8023190 <raise+0xc>)
 8023186:	4601      	mov	r1, r0
 8023188:	6818      	ldr	r0, [r3, #0]
 802318a:	f7ff bfd3 	b.w	8023134 <_raise_r>
 802318e:	bf00      	nop
 8023190:	240012bc 	.word	0x240012bc

08023194 <_kill_r>:
 8023194:	b538      	push	{r3, r4, r5, lr}
 8023196:	4d07      	ldr	r5, [pc, #28]	@ (80231b4 <_kill_r+0x20>)
 8023198:	2300      	movs	r3, #0
 802319a:	4604      	mov	r4, r0
 802319c:	4608      	mov	r0, r1
 802319e:	4611      	mov	r1, r2
 80231a0:	602b      	str	r3, [r5, #0]
 80231a2:	f7df fa05 	bl	80025b0 <_kill>
 80231a6:	1c43      	adds	r3, r0, #1
 80231a8:	d102      	bne.n	80231b0 <_kill_r+0x1c>
 80231aa:	682b      	ldr	r3, [r5, #0]
 80231ac:	b103      	cbz	r3, 80231b0 <_kill_r+0x1c>
 80231ae:	6023      	str	r3, [r4, #0]
 80231b0:	bd38      	pop	{r3, r4, r5, pc}
 80231b2:	bf00      	nop
 80231b4:	240696e8 	.word	0x240696e8

080231b8 <_getpid_r>:
 80231b8:	f7df b9f2 	b.w	80025a0 <_getpid>

080231bc <_init>:
 80231bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231be:	bf00      	nop
 80231c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80231c2:	bc08      	pop	{r3}
 80231c4:	469e      	mov	lr, r3
 80231c6:	4770      	bx	lr

080231c8 <_fini>:
 80231c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231ca:	bf00      	nop
 80231cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80231ce:	bc08      	pop	{r3}
 80231d0:	469e      	mov	lr, r3
 80231d2:	4770      	bx	lr
