
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012684  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  08012924  08012924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014380  08014380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08014388  08014388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080143c8  080143c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013ec  24000000  080143cc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000328fc  240013ec  080157b8  000173ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24033ce8  080157b8  00017ce8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000173ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ad58  00000000  00000000  0001741a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000531e  00000000  00000000  00042172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e68  00000000  00000000  00047490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001779  00000000  00000000  000492f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f6d7  00000000  00000000  0004aa71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ce5e  00000000  00000000  0008a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018ff03  00000000  00000000  000b6fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  00246ea9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087c4  00000000  00000000  00246f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0024f6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013ec 	.word	0x240013ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801290c 	.word	0x0801290c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f0 	.word	0x240013f0
 80002dc:	0801290c 	.word	0x0801290c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 fe2c 	bl	80022d4 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fcb7 	bl	8000ff4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 fe4f 	bl	8003334 <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fcaa 	bl	8000ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f002 f88a 	bl	80027dc <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fc91 	bl	8000ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f002 f87c 	bl	80027dc <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fc83 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001408 	.word	0x24001408
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f011 fe7d 	bl	8012428 <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f006 f8f4 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fc39 	bl	8000ff4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f004 fe7b 	bl	80054d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f002 ff43 	bl	80036b0 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fbe0 	bl	8000ff4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	2400146c 	.word	0x2400146c
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_DMA_Init+0x50>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <MX_DMA_Init+0x50>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_DMA_Init+0x50>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_DMA_Init+0x50>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <MX_DMA_Init+0x50>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_DMA_Init+0x50>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	58024400 	.word	0x58024400

080008b0 <cubemx_transport_write>:
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
    HAL_UART_DMAStop(uart);
    return true;
}

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80008c4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	d11b      	bne.n	8000908 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	68b9      	ldr	r1, [r7, #8]
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f009 f85d 	bl	8009998 <HAL_UART_Transmit_DMA>
 80008de:	4603      	mov	r3, r0
 80008e0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80008e2:	e002      	b.n	80008ea <cubemx_transport_write+0x3a>
            osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f00b fab9 	bl	800be5c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80008ea:	7cfb      	ldrb	r3, [r7, #19]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <cubemx_transport_write+0x4a>
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008f6:	2b20      	cmp	r3, #32
 80008f8:	d1f4      	bne.n	80008e4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <cubemx_transport_write+0x54>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	e002      	b.n	800090a <cubemx_transport_write+0x5a>
 8000904:	2300      	movs	r3, #0
 8000906:	e000      	b.n	800090a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000908:	2300      	movs	r3, #0
    }
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000928:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
}
 8000930:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a5a      	ldr	r2, [pc, #360]	@ (8000aa4 <cubemx_transport_read+0x190>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d068      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a57      	ldr	r2, [pc, #348]	@ (8000aa8 <cubemx_transport_read+0x194>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d061      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a55      	ldr	r2, [pc, #340]	@ (8000aac <cubemx_transport_read+0x198>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d05a      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a52      	ldr	r2, [pc, #328]	@ (8000ab0 <cubemx_transport_read+0x19c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d053      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a50      	ldr	r2, [pc, #320]	@ (8000ab4 <cubemx_transport_read+0x1a0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d04c      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a4d      	ldr	r2, [pc, #308]	@ (8000ab8 <cubemx_transport_read+0x1a4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d045      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a4b      	ldr	r2, [pc, #300]	@ (8000abc <cubemx_transport_read+0x1a8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d03e      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a48      	ldr	r2, [pc, #288]	@ (8000ac0 <cubemx_transport_read+0x1ac>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d037      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a46      	ldr	r2, [pc, #280]	@ (8000ac4 <cubemx_transport_read+0x1b0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d030      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a43      	ldr	r2, [pc, #268]	@ (8000ac8 <cubemx_transport_read+0x1b4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d029      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a41      	ldr	r2, [pc, #260]	@ (8000acc <cubemx_transport_read+0x1b8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d022      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ad0 <cubemx_transport_read+0x1bc>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01b      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ad4 <cubemx_transport_read+0x1c0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d014      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a39      	ldr	r2, [pc, #228]	@ (8000ad8 <cubemx_transport_read+0x1c4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a37      	ldr	r2, [pc, #220]	@ (8000adc <cubemx_transport_read+0x1c8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d006      	beq.n	8000a12 <cubemx_transport_read+0xfe>
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a34      	ldr	r2, [pc, #208]	@ (8000ae0 <cubemx_transport_read+0x1cc>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d107      	bne.n	8000a22 <cubemx_transport_read+0x10e>
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000a20:	e006      	b.n	8000a30 <cubemx_transport_read+0x11c>
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000a30:	4a2c      	ldr	r2, [pc, #176]	@ (8000ae4 <cubemx_transport_read+0x1d0>)
 8000a32:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a34:	b662      	cpsie	i
}
 8000a36:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f00b fa0c 	bl	800be5c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000a44:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <cubemx_transport_read+0x1d4>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <cubemx_transport_read+0x1d0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d104      	bne.n	8000a5a <cubemx_transport_read+0x146>
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	f6ff af6a 	blt.w	800092e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000a5e:	e011      	b.n	8000a84 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <cubemx_transport_read+0x1d4>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	440b      	add	r3, r1
 8000a6a:	4920      	ldr	r1, [pc, #128]	@ (8000aec <cubemx_transport_read+0x1d8>)
 8000a6c:	5c8a      	ldrb	r2, [r1, r2]
 8000a6e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <cubemx_transport_read+0x1d4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae8 <cubemx_transport_read+0x1d4>)
 8000a7c:	6013      	str	r3, [r2, #0]
        wrote++;
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	3301      	adds	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <cubemx_transport_read+0x1d4>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <cubemx_transport_read+0x1d0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d003      	beq.n	8000a98 <cubemx_transport_read+0x184>
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d3e3      	bcc.n	8000a60 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000a98:	69bb      	ldr	r3, [r7, #24]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020010 	.word	0x40020010
 8000aa8:	40020028 	.word	0x40020028
 8000aac:	40020040 	.word	0x40020040
 8000ab0:	40020058 	.word	0x40020058
 8000ab4:	40020070 	.word	0x40020070
 8000ab8:	40020088 	.word	0x40020088
 8000abc:	400200a0 	.word	0x400200a0
 8000ac0:	400200b8 	.word	0x400200b8
 8000ac4:	40020410 	.word	0x40020410
 8000ac8:	40020428 	.word	0x40020428
 8000acc:	40020440 	.word	0x40020440
 8000ad0:	40020458 	.word	0x40020458
 8000ad4:	40020470 	.word	0x40020470
 8000ad8:	40020488 	.word	0x40020488
 8000adc:	400204a0 	.word	0x400204a0
 8000ae0:	400204b8 	.word	0x400204b8
 8000ae4:	24001ce8 	.word	0x24001ce8
 8000ae8:	24001ce4 	.word	0x24001ce4
 8000aec:	240014e4 	.word	0x240014e4

08000af0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 8000af4:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <MX_FREERTOS_Init+0x30>)
 8000af6:	f00b f9cc 	bl	800be92 <osMutexNew>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a09      	ldr	r2, [pc, #36]	@ (8000b24 <MX_FREERTOS_Init+0x34>)
 8000afe:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <MX_FREERTOS_Init+0x38>)
 8000b02:	f00b f9c6 	bl	800be92 <osMutexNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <MX_FREERTOS_Init+0x3c>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000b0c:	4a08      	ldr	r2, [pc, #32]	@ (8000b30 <MX_FREERTOS_Init+0x40>)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <MX_FREERTOS_Init+0x44>)
 8000b12:	f00b f8c3 	bl	800bc9c <osThreadNew>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <MX_FREERTOS_Init+0x48>)
 8000b1a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	080129a8 	.word	0x080129a8
 8000b24:	24001d04 	.word	0x24001d04
 8000b28:	080129b8 	.word	0x080129b8
 8000b2c:	24001d08 	.word	0x24001d08
 8000b30:	08012984 	.word	0x08012984
 8000b34:	08001411 	.word	0x08001411
 8000b38:	24001d00 	.word	0x24001d00

08000b3c <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b4c:	d10d      	bne.n	8000b6a <HAL_GPIO_EXTI_Callback+0x2e>
    ucButtonState ^= 1;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b5a:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, 0x1000);
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00b f92b 	bl	800bdc0 <osThreadFlagsSet>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	24001d0c 	.word	0x24001d0c
 8000b78:	24001d00 	.word	0x24001d00

08000b7c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	@ 0x38
 8000b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b9e      	ldr	r3, [pc, #632]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a9c      	ldr	r2, [pc, #624]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b9a      	ldr	r3, [pc, #616]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	623b      	str	r3, [r7, #32]
 8000bae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb0:	4b96      	ldr	r3, [pc, #600]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a95      	ldr	r2, [pc, #596]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b92      	ldr	r3, [pc, #584]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b8f      	ldr	r3, [pc, #572]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	4a8d      	ldr	r2, [pc, #564]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bde:	4b8b      	ldr	r3, [pc, #556]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b87      	ldr	r3, [pc, #540]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	4a86      	ldr	r2, [pc, #536]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfc:	4b83      	ldr	r3, [pc, #524]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0a:	4b80      	ldr	r3, [pc, #512]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	4a7e      	ldr	r2, [pc, #504]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	f003 0320 	and.w	r3, r3, #32
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c28:	4b78      	ldr	r3, [pc, #480]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	4a77      	ldr	r2, [pc, #476]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c38:	4b74      	ldr	r3, [pc, #464]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c46:	4b71      	ldr	r3, [pc, #452]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a6f      	ldr	r2, [pc, #444]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b6d      	ldr	r3, [pc, #436]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c64:	4b69      	ldr	r3, [pc, #420]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a68      	ldr	r2, [pc, #416]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b65      	ldr	r3, [pc, #404]	@ (8000e0c <MX_GPIO_Init+0x290>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c88:	4861      	ldr	r0, [pc, #388]	@ (8000e10 <MX_GPIO_Init+0x294>)
 8000c8a:	f004 fdd3 	bl	8005834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c94:	485f      	ldr	r0, [pc, #380]	@ (8000e14 <MX_GPIO_Init+0x298>)
 8000c96:	f004 fdcd 	bl	8005834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	485e      	ldr	r0, [pc, #376]	@ (8000e18 <MX_GPIO_Init+0x29c>)
 8000ca0:	f004 fdc8 	bl	8005834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4858      	ldr	r0, [pc, #352]	@ (8000e1c <MX_GPIO_Init+0x2a0>)
 8000cba:	f004 fc0b 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cbe:	2332      	movs	r3, #50	@ 0x32
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cce:	230b      	movs	r3, #11
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4850      	ldr	r0, [pc, #320]	@ (8000e1c <MX_GPIO_Init+0x2a0>)
 8000cda:	f004 fbfb 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cde:	2386      	movs	r3, #134	@ 0x86
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cee:	230b      	movs	r3, #11
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4849      	ldr	r0, [pc, #292]	@ (8000e20 <MX_GPIO_Init+0x2a4>)
 8000cfa:	f004 fbeb 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cfe:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	483e      	ldr	r0, [pc, #248]	@ (8000e10 <MX_GPIO_Init+0x294>)
 8000d18:	f004 fbdc 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	483c      	ldr	r0, [pc, #240]	@ (8000e24 <MX_GPIO_Init+0x2a8>)
 8000d34:	f004 fbce 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4a:	230b      	movs	r3, #11
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	482e      	ldr	r0, [pc, #184]	@ (8000e10 <MX_GPIO_Init+0x294>)
 8000d56:	f004 fbbd 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	4828      	ldr	r0, [pc, #160]	@ (8000e14 <MX_GPIO_Init+0x298>)
 8000d74:	f004 fbae 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4826      	ldr	r0, [pc, #152]	@ (8000e28 <MX_GPIO_Init+0x2ac>)
 8000d8e:	f004 fba1 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d92:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000da4:	230a      	movs	r3, #10
 8000da6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <MX_GPIO_Init+0x2a4>)
 8000db0:	f004 fb90 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000db4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4815      	ldr	r0, [pc, #84]	@ (8000e28 <MX_GPIO_Init+0x2ac>)
 8000dd2:	f004 fb7f 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	480a      	ldr	r0, [pc, #40]	@ (8000e18 <MX_GPIO_Init+0x29c>)
 8000dee:	f004 fb71 	bl	80054d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2107      	movs	r1, #7
 8000df6:	2028      	movs	r0, #40	@ 0x28
 8000df8:	f002 fc32 	bl	8003660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dfc:	2028      	movs	r0, #40	@ 0x28
 8000dfe:	f002 fc49 	bl	8003694 <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3738      	adds	r7, #56	@ 0x38
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	58020400 	.word	0x58020400
 8000e14:	58020c00 	.word	0x58020c00
 8000e18:	58021000 	.word	0x58021000
 8000e1c:	58020800 	.word	0x58020800
 8000e20:	58020000 	.word	0x58020000
 8000e24:	58021400 	.word	0x58021400
 8000e28:	58021800 	.word	0x58021800

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 ffdc 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f81c 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f7ff fea0 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3c:	f7ff fd0e 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e40:	f000 fbd2 	bl	80015e8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e44:	f7ff fbd6 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e48:	f000 fb82 	bl	8001550 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4906      	ldr	r1, [pc, #24]	@ (8000e68 <main+0x3c>)
 8000e50:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <main+0x40>)
 8000e52:	f001 fbe1 	bl	8002618 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e56:	f00a fed7 	bl	800bc08 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e5a:	f7ff fe49 	bl	8000af0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e5e:	f00a fef7 	bl	800bc50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e62:	bf00      	nop
 8000e64:	e7fd      	b.n	8000e62 <main+0x36>
 8000e66:	bf00      	nop
 8000e68:	24001d10 	.word	0x24001d10
 8000e6c:	24001408 	.word	0x24001408

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09e      	sub	sp, #120	@ 0x78
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7a:	224c      	movs	r2, #76	@ 0x4c
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f011 fad2 	bl	8012428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2220      	movs	r2, #32
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f011 facb 	bl	8012428 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f004 fd02 	bl	800589c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	4b49      	ldr	r3, [pc, #292]	@ (8000fc4 <SystemClock_Config+0x154>)
 8000e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea0:	4a48      	ldr	r2, [pc, #288]	@ (8000fc4 <SystemClock_Config+0x154>)
 8000ea2:	f023 0301 	bic.w	r3, r3, #1
 8000ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ea8:	4b46      	ldr	r3, [pc, #280]	@ (8000fc4 <SystemClock_Config+0x154>)
 8000eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a44      	ldr	r2, [pc, #272]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000eb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eca:	bf00      	nop
 8000ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ed8:	d1f8      	bne.n	8000ecc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b3c      	ldr	r3, [pc, #240]	@ (8000fcc <SystemClock_Config+0x15c>)
 8000edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8000fcc <SystemClock_Config+0x15c>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <SystemClock_Config+0x15c>)
 8000eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a31      	ldr	r2, [pc, #196]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000f02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <SystemClock_Config+0x154>)
 8000f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f16:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc4 <SystemClock_Config+0x154>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f1e:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <SystemClock_Config+0x154>)
 8000f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f2a:	bf00      	nop
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <SystemClock_Config+0x158>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f38:	d1f8      	bne.n	8000f2c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000f42:	2320      	movs	r3, #32
 8000f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000f52:	23f0      	movs	r3, #240	@ 0xf0
 8000f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f62:	2308      	movs	r3, #8
 8000f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fccc 	bl	8005910 <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000f7e:	f000 f839 	bl	8000ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	233f      	movs	r3, #63	@ 0x3f
 8000f84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2303      	movs	r3, #3
 8000f88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f92:	2340      	movs	r3, #64	@ 0x40
 8000f94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f96:	2340      	movs	r3, #64	@ 0x40
 8000f98:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fa0:	2340      	movs	r3, #64	@ 0x40
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 f90a 	bl	80061c4 <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000fb6:	f000 f81d 	bl	8000ff4 <Error_Handler>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3778      	adds	r7, #120	@ 0x78
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	58000400 	.word	0x58000400
 8000fc8:	58024800 	.word	0x58024800
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fe2:	f000 ff3f 	bl	8001e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40001000 	.word	0x40001000

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <Error_Handler+0x8>

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_MspInit+0x38>)
 8001008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_MspInit+0x38>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_MspInit+0x38>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	210f      	movs	r1, #15
 8001028:	f06f 0001 	mvn.w	r0, #1
 800102c:	f002 fb18 	bl	8003660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	58024400 	.word	0x58024400

0800103c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	@ 0x40
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d827      	bhi.n	800109a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	2036      	movs	r0, #54	@ 0x36
 8001050:	f002 fb06 	bl	8003660 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001054:	2036      	movs	r0, #54	@ 0x36
 8001056:	f002 fb1d 	bl	8003694 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800105a:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <HAL_InitTick+0xc4>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <HAL_InitTick+0xc8>)
 8001062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001066:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <HAL_InitTick+0xc8>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <HAL_InitTick+0xc8>)
 8001072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800107e:	f107 0210 	add.w	r2, r7, #16
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fc27 	bl	80068dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800108e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <HAL_InitTick+0x6a>
 8001098:	e001      	b.n	800109e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e02b      	b.n	80010f6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800109e:	f005 fbf1 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 80010a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80010a4:	e004      	b.n	80010b0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010a6:	f005 fbed 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 80010aa:	4603      	mov	r3, r0
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010b2:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <HAL_InitTick+0xcc>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	0c9b      	lsrs	r3, r3, #18
 80010ba:	3b01      	subs	r3, #1
 80010bc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_InitTick+0xd0>)
 80010c0:	4a13      	ldr	r2, [pc, #76]	@ (8001110 <HAL_InitTick+0xd4>)
 80010c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_InitTick+0xd0>)
 80010c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010cc:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_InitTick+0xd0>)
 80010ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_InitTick+0xd0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <HAL_InitTick+0xd0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <HAL_InitTick+0xd0>)
 80010e0:	f008 f93c 	bl	800935c <HAL_TIM_Base_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d104      	bne.n	80010f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010ea:	4808      	ldr	r0, [pc, #32]	@ (800110c <HAL_InitTick+0xd0>)
 80010ec:	f008 f998 	bl	8009420 <HAL_TIM_Base_Start_IT>
 80010f0:	4603      	mov	r3, r0
 80010f2:	e000      	b.n	80010f6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3740      	adds	r7, #64	@ 0x40
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	24000008 	.word	0x24000008
 8001104:	58024400 	.word	0x58024400
 8001108:	431bde83 	.word	0x431bde83
 800110c:	24001d18 	.word	0x24001d18
 8001110:	40001000 	.word	0x40001000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <NMI_Handler+0x4>

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <MemManage_Handler+0x4>

0800112c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <UsageFault_Handler+0x4>

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <USART3_IRQHandler+0x10>)
 8001152:	f008 fdff 	bl	8009d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	24001dfc 	.word	0x24001dfc

08001160 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8001164:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001168:	f004 fb7d 	bl	8005866 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <TIM6_DAC_IRQHandler+0x10>)
 8001176:	f008 f9cb 	bl	8009510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	24001d18 	.word	0x24001d18

08001184 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800118e:	f011 f9ff 	bl	8012590 <__errno>
 8001192:	4603      	mov	r3, r0
 8001194:	2216      	movs	r2, #22
 8001196:	601a      	str	r2, [r3, #0]
  return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_exit>:

void _exit (int status)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ffe7 	bl	8001184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <_exit+0x12>

080011ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e00a      	b.n	80011e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	4601      	mov	r1, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60ba      	str	r2, [r7, #8]
 80011d8:	b2ca      	uxtb	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf0      	blt.n	80011cc <_read+0x12>
  }

  return len;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf1      	blt.n	8001206 <_write+0x12>
  }
  return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_close>:

int _close(int file)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001254:	605a      	str	r2, [r3, #4]
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_isatty>:

int _isatty(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f011 f964 	bl	8012590 <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	240342e8 	.word	0x240342e8
 80012f4:	00000400 	.word	0x00000400
 80012f8:	24001d64 	.word	0x24001d64
 80012fc:	24033ce8 	.word	0x24033ce8

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001304:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <SystemInit+0xe4>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130a:	4a36      	ldr	r2, [pc, #216]	@ (80013e4 <SystemInit+0xe4>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001314:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <SystemInit+0xe8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	2b06      	cmp	r3, #6
 800131e:	d807      	bhi.n	8001330 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001320:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <SystemInit+0xe8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 030f 	bic.w	r3, r3, #15
 8001328:	4a2f      	ldr	r2, [pc, #188]	@ (80013e8 <SystemInit+0xe8>)
 800132a:	f043 0307 	orr.w	r3, r3, #7
 800132e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001330:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <SystemInit+0xec>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <SystemInit+0xec>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800133c:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <SystemInit+0xec>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <SystemInit+0xec>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4929      	ldr	r1, [pc, #164]	@ (80013ec <SystemInit+0xec>)
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <SystemInit+0xf0>)
 800134a:	4013      	ands	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <SystemInit+0xe8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <SystemInit+0xe8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 030f 	bic.w	r3, r3, #15
 8001362:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <SystemInit+0xe8>)
 8001364:	f043 0307 	orr.w	r3, r3, #7
 8001368:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <SystemInit+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <SystemInit+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <SystemInit+0xec>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <SystemInit+0xec>)
 800137e:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <SystemInit+0xf4>)
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <SystemInit+0xec>)
 8001384:	4a1c      	ldr	r2, [pc, #112]	@ (80013f8 <SystemInit+0xf8>)
 8001386:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <SystemInit+0xec>)
 800138a:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <SystemInit+0xfc>)
 800138c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <SystemInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <SystemInit+0xec>)
 8001396:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <SystemInit+0xfc>)
 8001398:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <SystemInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <SystemInit+0xec>)
 80013a2:	4a16      	ldr	r2, [pc, #88]	@ (80013fc <SystemInit+0xfc>)
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <SystemInit+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <SystemInit+0xec>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <SystemInit+0xec>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <SystemInit+0xec>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <SystemInit+0x100>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <SystemInit+0x104>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013ca:	d202      	bcs.n	80013d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <SystemInit+0x108>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <SystemInit+0x10c>)
 80013d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	52002000 	.word	0x52002000
 80013ec:	58024400 	.word	0x58024400
 80013f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013f4:	02020200 	.word	0x02020200
 80013f8:	01ff0000 	.word	0x01ff0000
 80013fc:	01010280 	.word	0x01010280
 8001400:	5c001000 	.word	0x5c001000
 8001404:	ffff0000 	.word	0xffff0000
 8001408:	51008108 	.word	0x51008108
 800140c:	52004000 	.word	0x52004000

08001410 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	f5ad 7d4a 	sub.w	sp, sp, #808	@ 0x328
 8001416:	af02      	add	r7, sp, #8
 8001418:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800141c:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001420:	6018      	str	r0, [r3, #0]

  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  unsigned int uiX0   = 33970;
 8001422:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8001426:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  unsigned int uiXMin = 1057;
 800142a:	f240 4321 	movw	r3, #1057	@ 0x421
 800142e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  unsigned int uiXMax = 65535;
 8001432:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001436:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  unsigned int uiY0   = 33580;
 800143a:	f248 332c 	movw	r3, #33580	@ 0x832c
 800143e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  unsigned int uiYMin = 1062;
 8001442:	f240 4326 	movw	r3, #1062	@ 0x426
 8001446:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  unsigned int uiYMax = 65535;
 800144a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800144e:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  vehicle_status xVehicleStatus;

  unsigned char cDmaBuffer[UART2_DMA_BUFFER_SIZE]; // TODO Ajustar o buffer pro tamanho da mensagem, manter a mais nova
  struct uxrCustomTransport xUart2DmaTransport;

  xUart2DmaTransport.args = &huart2;
 8001452:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8001456:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800145a:	4a38      	ldr	r2, [pc, #224]	@ (800153c <StartTaskControle+0x12c>)
 800145c:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

  HAL_UART_Receive_DMA(&huart2, cDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001460:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001464:	2240      	movs	r2, #64	@ 0x40
 8001466:	4619      	mov	r1, r3
 8001468:	4834      	ldr	r0, [pc, #208]	@ (800153c <StartTaskControle+0x12c>)
 800146a:	f008 fb15 	bl	8009a98 <HAL_UART_Receive_DMA>

  ucControlMode = AUTOWARE;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 331f 	strb.w	r3, [r7, #799]	@ 0x31f


	xControlAction.fTrottle = 11.11;
 8001474:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <StartTaskControle+0x130>)
 8001476:	4a33      	ldr	r2, [pc, #204]	@ (8001544 <StartTaskControle+0x134>)
 8001478:	601a      	str	r2, [r3, #0]
	xControlAction.fBrake = 22.22;
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <StartTaskControle+0x130>)
 800147c:	4a32      	ldr	r2, [pc, #200]	@ (8001548 <StartTaskControle+0x138>)
 800147e:	605a      	str	r2, [r3, #4]
	xControlAction.fSteeringAngle = 33.33;
 8001480:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <StartTaskControle+0x130>)
 8001482:	4a32      	ldr	r2, [pc, #200]	@ (800154c <StartTaskControle+0x13c>)
 8001484:	609a      	str	r2, [r3, #8]
	xControlAction.ucManualGearShift = 1;
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <StartTaskControle+0x130>)
 8001488:	2201      	movs	r2, #1
 800148a:	739a      	strb	r2, [r3, #14]
	xControlAction.ucHandBrake = 2;
 800148c:	4b2c      	ldr	r3, [pc, #176]	@ (8001540 <StartTaskControle+0x130>)
 800148e:	2202      	movs	r2, #2
 8001490:	731a      	strb	r2, [r3, #12]
	xControlAction.ucReverse = 3;
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <StartTaskControle+0x130>)
 8001494:	2203      	movs	r2, #3
 8001496:	735a      	strb	r2, [r3, #13]
	xControlAction.ucControlMode = MANUAL;
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <StartTaskControle+0x130>)
 800149a:	2202      	movs	r2, #2
 800149c:	741a      	strb	r2, [r3, #16]
	xControlAction.ucGear = 4;
 800149e:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <StartTaskControle+0x130>)
 80014a0:	2204      	movs	r2, #4
 80014a2:	73da      	strb	r2, [r3, #15]

  while(1){

	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <StartTaskControle+0x130>)
 80014a6:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b2:	f000 fa9d 	bl	80019f0 <vGetStringFromControlAction>

	// Send cTxMsgToCarla to CARLA
	cubemx_transport_write(&xUart2DmaTransport, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla), 0);
 80014b6:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ff1a 	bl	80002f4 <strlen>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 80014c6:	f107 0008 	add.w	r0, r7, #8
 80014ca:	2300      	movs	r3, #0
 80014cc:	f7ff f9f0 	bl	80008b0 <cubemx_transport_write>

	do{
		// Read xVehicleStatus
		cubemx_transport_read(&xUart2DmaTransport, cDmaBuffer, UART2_DMA_BUFFER_SIZE, 0, 0); // Using timeout = 1 tick.
 80014d0:	f507 7126 	add.w	r1, r7, #664	@ 0x298
 80014d4:	f107 0008 	add.w	r0, r7, #8
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	2240      	movs	r2, #64	@ 0x40
 80014e0:	f7ff fa18 	bl	8000914 <cubemx_transport_read>

	    HAL_UART_DMAPause(&huart2);
 80014e4:	4815      	ldr	r0, [pc, #84]	@ (800153c <StartTaskControle+0x12c>)
 80014e6:	f008 fb23 	bl	8009b30 <HAL_UART_DMAPause>
		ucFlagFullMsg = ucGetVehicleStatusFromString(&xVehicleStatus, cDmaBuffer);
 80014ea:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 80014ee:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fafb 	bl	8001af0 <ucGetVehicleStatusFromString>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f887 3303 	strb.w	r3, [r7, #771]	@ 0x303
	    HAL_UART_DMAResume(&huart2);
 8001500:	480e      	ldr	r0, [pc, #56]	@ (800153c <StartTaskControle+0x12c>)
 8001502:	f008 fba3 	bl	8009c4c <HAL_UART_DMAResume>

	} while(!ucFlagFullMsg); //NAO_ENCONTRAR_O_$ -> Precisa da mensagem inteira
 8001506:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0e0      	beq.n	80014d0 <StartTaskControle+0xc0>

	xControlAction.fTrottle = xVehicleStatus.xHeadingRate.fFloat;
 800150e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001512:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <StartTaskControle+0x130>)
 8001514:	6013      	str	r3, [r2, #0]
	xControlAction.fBrake = xVehicleStatus.xLatSpeed.fFloat;
 8001516:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <StartTaskControle+0x130>)
 800151c:	6053      	str	r3, [r2, #4]
	xControlAction.fSteeringAngle = xVehicleStatus.xLongSpeed.fFloat;
 800151e:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001522:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <StartTaskControle+0x130>)
 8001524:	6093      	str	r3, [r2, #8]
	xControlAction.ucGear = xVehicleStatus.ucGear+1;
 8001526:	f897 32e4 	ldrb.w	r3, [r7, #740]	@ 0x2e4
 800152a:	3301      	adds	r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <StartTaskControle+0x130>)
 8001530:	73da      	strb	r2, [r3, #15]

	HAL_Delay(15);
 8001532:	200f      	movs	r0, #15
 8001534:	f000 fcb6 	bl	8001ea4 <HAL_Delay>
	vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8001538:	e7b4      	b.n	80014a4 <StartTaskControle+0x94>
 800153a:	bf00      	nop
 800153c:	24001d68 	.word	0x24001d68
 8001540:	24001cec 	.word	0x24001cec
 8001544:	4131c28f 	.word	0x4131c28f
 8001548:	41b1c28f 	.word	0x41b1c28f
 800154c:	420551ec 	.word	0x420551ec

08001550 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 8001556:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <MX_USART2_UART_Init+0x94>)
 8001558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001598:	4811      	ldr	r0, [pc, #68]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 800159a:	f008 f9ad 	bl	80098f8 <HAL_UART_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015a4:	f7ff fd26 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a8:	2100      	movs	r1, #0
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 80015ac:	f00a fa1e 	bl	800b9ec <HAL_UARTEx_SetTxFifoThreshold>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015b6:	f7ff fd1d 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 80015be:	f00a fa53 	bl	800ba68 <HAL_UARTEx_SetRxFifoThreshold>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015c8:	f7ff fd14 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_USART2_UART_Init+0x90>)
 80015ce:	f00a f9d4 	bl	800b97a <HAL_UARTEx_DisableFifoMode>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015d8:	f7ff fd0c 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24001d68 	.word	0x24001d68
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	@ (800167c <MX_USART3_UART_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 80015f4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80015f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001630:	4811      	ldr	r0, [pc, #68]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001632:	f008 f961 	bl	80098f8 <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800163c:	f7ff fcda 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001644:	f00a f9d2 	bl	800b9ec <HAL_UARTEx_SetTxFifoThreshold>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800164e:	f7ff fcd1 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4808      	ldr	r0, [pc, #32]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001656:	f00a fa07 	bl	800ba68 <HAL_UARTEx_SetRxFifoThreshold>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001660:	f7ff fcc8 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	@ (8001678 <MX_USART3_UART_Init+0x90>)
 8001666:	f00a f988 	bl	800b97a <HAL_UARTEx_DisableFifoMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001670:	f7ff fcc0 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24001dfc 	.word	0x24001dfc
 800167c:	40004800 	.word	0x40004800

08001680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b0be      	sub	sp, #248	@ 0xf8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	22c0      	movs	r2, #192	@ 0xc0
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f010 fec1 	bl	8012428 <memset>
  if(uartHandle->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a66      	ldr	r2, [pc, #408]	@ (8001844 <HAL_UART_MspInit+0x1c4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f040 80d9 	bne.w	8001864 <HAL_UART_MspInit+0x1e4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b2:	f04f 0202 	mov.w	r2, #2
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c4:	f107 0320 	add.w	r3, r7, #32
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 f949 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80016d4:	f7ff fc8e 	bl	8000ff4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 80016da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016de:	4a5a      	ldr	r2, [pc, #360]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016e8:	4b57      	ldr	r3, [pc, #348]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 80016ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b54      	ldr	r3, [pc, #336]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fc:	4a52      	ldr	r2, [pc, #328]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001706:	4b50      	ldr	r3, [pc, #320]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001714:	4b4c      	ldr	r3, [pc, #304]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171a:	4a4b      	ldr	r2, [pc, #300]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001724:	4b48      	ldr	r3, [pc, #288]	@ (8001848 <HAL_UART_MspInit+0x1c8>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001732:	2308      	movs	r3, #8
 8001734:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174a:	2307      	movs	r3, #7
 800174c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001754:	4619      	mov	r1, r3
 8001756:	483d      	ldr	r0, [pc, #244]	@ (800184c <HAL_UART_MspInit+0x1cc>)
 8001758:	f003 febc 	bl	80054d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800175c:	2320      	movs	r3, #32
 800175e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001774:	2307      	movs	r3, #7
 8001776:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800177e:	4619      	mov	r1, r3
 8001780:	4833      	ldr	r0, [pc, #204]	@ (8001850 <HAL_UART_MspInit+0x1d0>)
 8001782:	f003 fea7 	bl	80054d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8001786:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 8001788:	4a33      	ldr	r2, [pc, #204]	@ (8001858 <HAL_UART_MspInit+0x1d8>)
 800178a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800178c:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 800178e:	222b      	movs	r2, #43	@ 0x2b
 8001790:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001798:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800179e:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ac:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80017b2:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017ba:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017c0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017c8:	4822      	ldr	r0, [pc, #136]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017ca:	f001 ff71 	bl	80036b0 <HAL_DMA_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 80017d4:	f7ff fc0e 	bl	8000ff4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a1e      	ldr	r2, [pc, #120]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <HAL_UART_MspInit+0x1d4>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_UART_MspInit+0x1e0>)
 80017ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 80017ee:	222c      	movs	r2, #44	@ 0x2c
 80017f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 80017f4:	2240      	movs	r2, #64	@ 0x40
 80017f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 8001800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001804:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 800181a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800181e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001820:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001826:	480d      	ldr	r0, [pc, #52]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 8001828:	f001 ff42 	bl	80036b0 <HAL_DMA_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_UART_MspInit+0x1b6>
    {
      Error_Handler();
 8001832:	f7ff fbdf 	bl	8000ff4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 800183a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800183c:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_UART_MspInit+0x1dc>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001842:	e0c2      	b.n	80019ca <HAL_UART_MspInit+0x34a>
 8001844:	40004400 	.word	0x40004400
 8001848:	58024400 	.word	0x58024400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020c00 	.word	0x58020c00
 8001854:	24001e90 	.word	0x24001e90
 8001858:	40020428 	.word	0x40020428
 800185c:	24001f08 	.word	0x24001f08
 8001860:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5a      	ldr	r2, [pc, #360]	@ (80019d4 <HAL_UART_MspInit+0x354>)
 800186a:	4293      	cmp	r3, r2
 800186c:	f040 80ad 	bne.w	80019ca <HAL_UART_MspInit+0x34a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001870:	f04f 0202 	mov.w	r2, #2
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001882:	f107 0320 	add.w	r3, r7, #32
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f86a 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_UART_MspInit+0x216>
      Error_Handler();
 8001892:	f7ff fbaf 	bl	8000ff4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001896:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_UART_MspInit+0x358>)
 8001898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800189c:	4a4e      	ldr	r2, [pc, #312]	@ (80019d8 <HAL_UART_MspInit+0x358>)
 800189e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018a6:	4b4c      	ldr	r3, [pc, #304]	@ (80019d8 <HAL_UART_MspInit+0x358>)
 80018a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	4b48      	ldr	r3, [pc, #288]	@ (80019d8 <HAL_UART_MspInit+0x358>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	4a47      	ldr	r2, [pc, #284]	@ (80019d8 <HAL_UART_MspInit+0x358>)
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c4:	4b44      	ldr	r3, [pc, #272]	@ (80019d8 <HAL_UART_MspInit+0x358>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ec:	2307      	movs	r3, #7
 80018ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4838      	ldr	r0, [pc, #224]	@ (80019dc <HAL_UART_MspInit+0x35c>)
 80018fa:	f003 fdeb 	bl	80054d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80018fe:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001900:	4a38      	ldr	r2, [pc, #224]	@ (80019e4 <HAL_UART_MspInit+0x364>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001906:	222d      	movs	r2, #45	@ 0x2d
 8001908:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190a:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b33      	ldr	r3, [pc, #204]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191e:	4b30      	ldr	r3, [pc, #192]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001924:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800192a:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 800192c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001930:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001934:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001938:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001940:	4827      	ldr	r0, [pc, #156]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001942:	f001 feb5 	bl	80036b0 <HAL_DMA_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 800194c:	f7ff fb52 	bl	8000ff4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 8001954:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001958:	4a21      	ldr	r2, [pc, #132]	@ (80019e0 <HAL_UART_MspInit+0x360>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800195e:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <HAL_UART_MspInit+0x36c>)
 8001962:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001964:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 8001966:	222e      	movs	r2, #46	@ 0x2e
 8001968:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800196a:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 800196c:	2240      	movs	r2, #64	@ 0x40
 800196e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 8001978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800197c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001984:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 8001992:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001996:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800199e:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 80019a0:	f001 fe86 	bl	80036b0 <HAL_DMA_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_UART_MspInit+0x32e>
      Error_Handler();
 80019aa:	f7ff fb23 	bl	8000ff4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 80019b2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019b4:	4a0c      	ldr	r2, [pc, #48]	@ (80019e8 <HAL_UART_MspInit+0x368>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2108      	movs	r1, #8
 80019be:	2027      	movs	r0, #39	@ 0x27
 80019c0:	f001 fe4e 	bl	8003660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019c4:	2027      	movs	r0, #39	@ 0x27
 80019c6:	f001 fe65 	bl	8003694 <HAL_NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	37f8      	adds	r7, #248	@ 0xf8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40004800 	.word	0x40004800
 80019d8:	58024400 	.word	0x58024400
 80019dc:	58020c00 	.word	0x58020c00
 80019e0:	24001f80 	.word	0x24001f80
 80019e4:	40020010 	.word	0x40020010
 80019e8:	24001ff8 	.word	0x24001ff8
 80019ec:	40020028 	.word	0x40020028

080019f0 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 80019f0:	b084      	sub	sp, #16
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f107 0c18 	add.w	ip, r7, #24
 80019fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	60fb      	str	r3, [r7, #12]
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	60bb      	str	r3, [r7, #8]
  xBrake.fFloat = xControlActionTx.fBrake;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	607b      	str	r3, [r7, #4]

  ucTxMsg[0]  = (unsigned char)'#';
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0e:	2223      	movs	r2, #35	@ 0x23
 8001a10:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'T';
 8001a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a14:	3301      	adds	r3, #1
 8001a16:	2254      	movs	r2, #84	@ 0x54
 8001a18:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xThrottle.ucBytes[0];
 8001a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	7b3a      	ldrb	r2, [r7, #12]
 8001a20:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xThrottle.ucBytes[1];
 8001a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a24:	3303      	adds	r3, #3
 8001a26:	7b7a      	ldrb	r2, [r7, #13]
 8001a28:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xThrottle.ucBytes[2];
 8001a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	7bba      	ldrb	r2, [r7, #14]
 8001a30:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xThrottle.ucBytes[3];
 8001a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a34:	3305      	adds	r3, #5
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'S';
 8001a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	2253      	movs	r2, #83	@ 0x53
 8001a40:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xSteering.ucBytes[0];
 8001a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a44:	3307      	adds	r3, #7
 8001a46:	7a3a      	ldrb	r2, [r7, #8]
 8001a48:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xSteering.ucBytes[1];
 8001a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	7a7a      	ldrb	r2, [r7, #9]
 8001a50:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xSteering.ucBytes[2];
 8001a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a54:	3309      	adds	r3, #9
 8001a56:	7aba      	ldrb	r2, [r7, #10]
 8001a58:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xSteering.ucBytes[3];
 8001a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5c:	330a      	adds	r3, #10
 8001a5e:	7afa      	ldrb	r2, [r7, #11]
 8001a60:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'B';
 8001a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a64:	330b      	adds	r3, #11
 8001a66:	2242      	movs	r2, #66	@ 0x42
 8001a68:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xBrake.ucBytes[0];
 8001a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	793a      	ldrb	r2, [r7, #4]
 8001a70:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xBrake.ucBytes[1];
 8001a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a74:	330d      	adds	r3, #13
 8001a76:	797a      	ldrb	r2, [r7, #5]
 8001a78:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xBrake.ucBytes[2];
 8001a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7c:	330e      	adds	r3, #14
 8001a7e:	79ba      	ldrb	r2, [r7, #6]
 8001a80:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xBrake.ucBytes[3];
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	330f      	adds	r3, #15
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'H';
 8001a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8c:	3310      	adds	r3, #16
 8001a8e:	2248      	movs	r2, #72	@ 0x48
 8001a90:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.ucHandBrake;
 8001a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a94:	3311      	adds	r3, #17
 8001a96:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001a9a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = (unsigned char)'R';
 8001a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9e:	3312      	adds	r3, #18
 8001aa0:	2252      	movs	r2, #82	@ 0x52
 8001aa2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.ucReverse;
 8001aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa6:	3313      	adds	r3, #19
 8001aa8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001aac:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = (unsigned char)'G';
 8001aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab0:	3314      	adds	r3, #20
 8001ab2:	2247      	movs	r2, #71	@ 0x47
 8001ab4:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = xControlActionTx.ucGear;
 8001ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab8:	3315      	adds	r3, #21
 8001aba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001abe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = (unsigned char)'M';
 8001ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac2:	3316      	adds	r3, #22
 8001ac4:	224d      	movs	r2, #77	@ 0x4d
 8001ac6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.ucManualGearShift;
 8001ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aca:	3317      	adds	r3, #23
 8001acc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ad0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = (unsigned char)'$';
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	3318      	adds	r3, #24
 8001ad6:	2224      	movs	r2, #36	@ 0x24
 8001ad8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = (unsigned char)'\0';
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	3319      	adds	r3, #25
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	b004      	add	sp, #16
 8001aee:	4770      	bx	lr

08001af0 <ucGetVehicleStatusFromString>:
  * @param  ucStringRx: RX Message.
  * @param  ucSmState: State machine state.
  * @retval String casted in uc that will be send in serial.
  */
unsigned char ucGetVehicleStatusFromString(vehicle_status * xVehicleStatusRx, unsigned char * ucStringRx)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]

  unsigned int ucSmState = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]


  for(int i = 0; i < strlen((char * )ucStringRx); i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	e13c      	b.n	8001d7e <ucGetVehicleStatusFromString+0x28e>
  {
    switch (ucSmState)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b28      	cmp	r3, #40	@ 0x28
 8001b08:	f200 8133 	bhi.w	8001d72 <ucGetVehicleStatusFromString+0x282>
 8001b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <ucGetVehicleStatusFromString+0x24>)
 8001b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b12:	bf00      	nop
 8001b14:	08001bb9 	.word	0x08001bb9
 8001b18:	08001bcd 	.word	0x08001bcd
 8001b1c:	08001d73 	.word	0x08001d73
 8001b20:	08001d73 	.word	0x08001d73
 8001b24:	08001d73 	.word	0x08001d73
 8001b28:	08001d73 	.word	0x08001d73
 8001b2c:	08001d73 	.word	0x08001d73
 8001b30:	08001d73 	.word	0x08001d73
 8001b34:	08001d73 	.word	0x08001d73
 8001b38:	08001d73 	.word	0x08001d73
 8001b3c:	08001c89 	.word	0x08001c89
 8001b40:	08001c9b 	.word	0x08001c9b
 8001b44:	08001cad 	.word	0x08001cad
 8001b48:	08001cbf 	.word	0x08001cbf
 8001b4c:	08001d73 	.word	0x08001d73
 8001b50:	08001d73 	.word	0x08001d73
 8001b54:	08001d73 	.word	0x08001d73
 8001b58:	08001d73 	.word	0x08001d73
 8001b5c:	08001d73 	.word	0x08001d73
 8001b60:	08001d73 	.word	0x08001d73
 8001b64:	08001cd1 	.word	0x08001cd1
 8001b68:	08001ce3 	.word	0x08001ce3
 8001b6c:	08001cf5 	.word	0x08001cf5
 8001b70:	08001d07 	.word	0x08001d07
 8001b74:	08001d73 	.word	0x08001d73
 8001b78:	08001d73 	.word	0x08001d73
 8001b7c:	08001d73 	.word	0x08001d73
 8001b80:	08001d73 	.word	0x08001d73
 8001b84:	08001d73 	.word	0x08001d73
 8001b88:	08001d73 	.word	0x08001d73
 8001b8c:	08001d19 	.word	0x08001d19
 8001b90:	08001d2b 	.word	0x08001d2b
 8001b94:	08001d3d 	.word	0x08001d3d
 8001b98:	08001d4f 	.word	0x08001d4f
 8001b9c:	08001d73 	.word	0x08001d73
 8001ba0:	08001d73 	.word	0x08001d73
 8001ba4:	08001d73 	.word	0x08001d73
 8001ba8:	08001d73 	.word	0x08001d73
 8001bac:	08001d73 	.word	0x08001d73
 8001bb0:	08001d73 	.word	0x08001d73
 8001bb4:	08001d61 	.word	0x08001d61
    {
      case 0:
        if('#' == ucStringRx[i])
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b23      	cmp	r3, #35	@ 0x23
 8001bc2:	f040 80d8 	bne.w	8001d76 <ucGetVehicleStatusFromString+0x286>
        {
          ucSmState = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001bca:	e0d4      	b.n	8001d76 <ucGetVehicleStatusFromString+0x286>
      
      case 1:
        switch (ucStringRx[i])
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3b24      	subs	r3, #36	@ 0x24
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d854      	bhi.n	8001c84 <ucGetVehicleStatusFromString+0x194>
 8001bda:	a201      	add	r2, pc, #4	@ (adr r2, 8001be0 <ucGetVehicleStatusFromString+0xf0>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001c7d 	.word	0x08001c7d
 8001be4:	08001c85 	.word	0x08001c85
 8001be8:	08001c85 	.word	0x08001c85
 8001bec:	08001c85 	.word	0x08001c85
 8001bf0:	08001c85 	.word	0x08001c85
 8001bf4:	08001c85 	.word	0x08001c85
 8001bf8:	08001c85 	.word	0x08001c85
 8001bfc:	08001c85 	.word	0x08001c85
 8001c00:	08001c85 	.word	0x08001c85
 8001c04:	08001c85 	.word	0x08001c85
 8001c08:	08001c85 	.word	0x08001c85
 8001c0c:	08001c85 	.word	0x08001c85
 8001c10:	08001c85 	.word	0x08001c85
 8001c14:	08001c85 	.word	0x08001c85
 8001c18:	08001c85 	.word	0x08001c85
 8001c1c:	08001c85 	.word	0x08001c85
 8001c20:	08001c85 	.word	0x08001c85
 8001c24:	08001c85 	.word	0x08001c85
 8001c28:	08001c85 	.word	0x08001c85
 8001c2c:	08001c85 	.word	0x08001c85
 8001c30:	08001c85 	.word	0x08001c85
 8001c34:	08001c85 	.word	0x08001c85
 8001c38:	08001c85 	.word	0x08001c85
 8001c3c:	08001c85 	.word	0x08001c85
 8001c40:	08001c85 	.word	0x08001c85
 8001c44:	08001c85 	.word	0x08001c85
 8001c48:	08001c85 	.word	0x08001c85
 8001c4c:	08001c85 	.word	0x08001c85
 8001c50:	08001c85 	.word	0x08001c85
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001c6b 	.word	0x08001c6b
 8001c5c:	08001c71 	.word	0x08001c71
 8001c60:	08001c77 	.word	0x08001c77
        {
          case 'A':
            ucSmState = 10;
 8001c64:	230a      	movs	r3, #10
 8001c66:	60fb      	str	r3, [r7, #12]
            break;
 8001c68:	e00d      	b.n	8001c86 <ucGetVehicleStatusFromString+0x196>

          case 'B':
            ucSmState = 20;
 8001c6a:	2314      	movs	r3, #20
 8001c6c:	60fb      	str	r3, [r7, #12]
            break;
 8001c6e:	e00a      	b.n	8001c86 <ucGetVehicleStatusFromString+0x196>

          case 'C':
            ucSmState = 30;
 8001c70:	231e      	movs	r3, #30
 8001c72:	60fb      	str	r3, [r7, #12]
            break;
 8001c74:	e007      	b.n	8001c86 <ucGetVehicleStatusFromString+0x196>

          case 'D':
            ucSmState = 40;
 8001c76:	2328      	movs	r3, #40	@ 0x28
 8001c78:	60fb      	str	r3, [r7, #12]
            break;
 8001c7a:	e004      	b.n	8001c86 <ucGetVehicleStatusFromString+0x196>

          case '$':
            ucSmState = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
            return 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e085      	b.n	8001d90 <ucGetVehicleStatusFromString+0x2a0>
            break;
                
          default:
              break;
 8001c84:	bf00      	nop
        }
        break;
 8001c86:	e077      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 10:
        xVehicleStatusRx->xLongSpeed.ucBytes[0] = ucStringRx[i];
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	701a      	strb	r2, [r3, #0]
        ucSmState = 11;
 8001c94:	230b      	movs	r3, #11
 8001c96:	60fb      	str	r3, [r7, #12]
        break;
 8001c98:	e06e      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 11:
        xVehicleStatusRx->xLongSpeed.ucBytes[1] = ucStringRx[i];
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	705a      	strb	r2, [r3, #1]
        ucSmState = 12;
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	60fb      	str	r3, [r7, #12]
        break;
 8001caa:	e065      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 12:
        xVehicleStatusRx->xLongSpeed.ucBytes[2] = ucStringRx[i];
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	709a      	strb	r2, [r3, #2]
        ucSmState = 13;
 8001cb8:	230d      	movs	r3, #13
 8001cba:	60fb      	str	r3, [r7, #12]
        break;
 8001cbc:	e05c      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 13:
        xVehicleStatusRx->xLongSpeed.ucBytes[3] = ucStringRx[i];
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	70da      	strb	r2, [r3, #3]
        ucSmState = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
        break;
 8001cce:	e053      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 20:
        xVehicleStatusRx->xLatSpeed.ucBytes[0] = ucStringRx[i];
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	711a      	strb	r2, [r3, #4]
        ucSmState = 21;
 8001cdc:	2315      	movs	r3, #21
 8001cde:	60fb      	str	r3, [r7, #12]
        break;
 8001ce0:	e04a      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 21:
        xVehicleStatusRx->xLatSpeed.ucBytes[1] = ucStringRx[i];
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	715a      	strb	r2, [r3, #5]
        ucSmState = 22;
 8001cee:	2316      	movs	r3, #22
 8001cf0:	60fb      	str	r3, [r7, #12]
        break;
 8001cf2:	e041      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 22:
        xVehicleStatusRx->xLatSpeed.ucBytes[2] = ucStringRx[i];
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	719a      	strb	r2, [r3, #6]
        ucSmState = 23;
 8001d00:	2317      	movs	r3, #23
 8001d02:	60fb      	str	r3, [r7, #12]
        break;
 8001d04:	e038      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 23:
        xVehicleStatusRx->xLatSpeed.ucBytes[3] = ucStringRx[i];
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	71da      	strb	r2, [r3, #7]
        ucSmState = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
        break;
 8001d16:	e02f      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 30:
        xVehicleStatusRx->xHeadingRate.ucBytes[0] = ucStringRx[i];
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	721a      	strb	r2, [r3, #8]
        ucSmState = 31;
 8001d24:	231f      	movs	r3, #31
 8001d26:	60fb      	str	r3, [r7, #12]
        break;
 8001d28:	e026      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 31:
        xVehicleStatusRx->xHeadingRate.ucBytes[1] = ucStringRx[i];
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	725a      	strb	r2, [r3, #9]
        ucSmState = 32;
 8001d36:	2320      	movs	r3, #32
 8001d38:	60fb      	str	r3, [r7, #12]
        break;
 8001d3a:	e01d      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 32:
        xVehicleStatusRx->xHeadingRate.ucBytes[2] = ucStringRx[i];
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	729a      	strb	r2, [r3, #10]
        ucSmState = 33;
 8001d48:	2321      	movs	r3, #33	@ 0x21
 8001d4a:	60fb      	str	r3, [r7, #12]
        break;
 8001d4c:	e014      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 33:
        xVehicleStatusRx->xHeadingRate.ucBytes[3] = ucStringRx[i];
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	72da      	strb	r2, [r3, #11]
        ucSmState = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
        break;
 8001d5e:	e00b      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>

      case 40:
        xVehicleStatusRx->ucGear = ucStringRx[i];
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	731a      	strb	r2, [r3, #12]
        ucSmState = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
        break;
 8001d70:	e002      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>


      default:
          break;
 8001d72:	bf00      	nop
 8001d74:	e000      	b.n	8001d78 <ucGetVehicleStatusFromString+0x288>
        break;
 8001d76:	bf00      	nop
  for(int i = 0; i < strlen((char * )ucStringRx); i++)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f7fe fab8 	bl	80002f4 <strlen>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f63f aebb 	bhi.w	8001b04 <ucGetVehicleStatusFromString+0x14>
    }
  }
  return 0;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d9c:	f7ff fab0 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	@ (8001de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f010 fbe9 	bl	801259c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff f82f 	bl	8000e2c <main>
  bx  lr
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dd0:	240342e8 	.word	0x240342e8
  ldr r0, =_sdata
 8001dd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dd8:	240013ec 	.word	0x240013ec
  ldr r2, =_sidata
 8001ddc:	080143cc 	.word	0x080143cc
  ldr r2, =_sbss
 8001de0:	240013ec 	.word	0x240013ec
  ldr r4, =_ebss
 8001de4:	24033ce8 	.word	0x24033ce8

08001de8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC3_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df2:	2003      	movs	r0, #3
 8001df4:	f001 fc29 	bl	800364a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001df8:	f004 fb9a 	bl	8006530 <HAL_RCC_GetSysClockFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_Init+0x68>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	4913      	ldr	r1, [pc, #76]	@ (8001e58 <HAL_Init+0x6c>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_Init+0x68>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <HAL_Init+0x6c>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e5c <HAL_Init+0x70>)
 8001e2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e30:	4a0b      	ldr	r2, [pc, #44]	@ (8001e60 <HAL_Init+0x74>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e36:	200f      	movs	r0, #15
 8001e38:	f7ff f900 	bl	800103c <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e002      	b.n	8001e4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e46:	f7ff f8db 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	58024400 	.word	0x58024400
 8001e58:	080129c8 	.word	0x080129c8
 8001e5c:	24000004 	.word	0x24000004
 8001e60:	24000000 	.word	0x24000000

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2400000c 	.word	0x2400000c
 8001e88:	24002070 	.word	0x24002070

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	24002070 	.word	0x24002070

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2400000c 	.word	0x2400000c

08001eec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <HAL_GetREVID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	5c001000 	.word	0x5c001000

08001f04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3360      	adds	r3, #96	@ 0x60
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3360      	adds	r3, #96	@ 0x60
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	431a      	orrs	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]
  }
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3330      	adds	r3, #48	@ 0x30
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	4413      	add	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	211f      	movs	r1, #31
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 011f 	and.w	r1, r3, #31
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	60da      	str	r2, [r3, #12]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3314      	adds	r3, #20
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	0e5b      	lsrs	r3, r3, #25
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	4413      	add	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	0d1b      	lsrs	r3, r3, #20
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2107      	movs	r1, #7
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	401a      	ands	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	0d1b      	lsrs	r3, r3, #20
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	431a      	orrs	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002128:	43db      	mvns	r3, r3
 800212a:	401a      	ands	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0318 	and.w	r3, r3, #24
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002134:	40d9      	lsrs	r1, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	400b      	ands	r3, r1
 800213a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213e:	431a      	orrs	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	000fffff 	.word	0x000fffff

08002158 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 031f 	and.w	r3, r3, #31
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6093      	str	r3, [r2, #8]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	5fffffc0 	.word	0x5fffffc0

08002198 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	6fffffc0 	.word	0x6fffffc0

080021e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021fc:	d101      	bne.n	8002202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <LL_ADC_Enable+0x24>)
 800221e:	4013      	ands	r3, r2
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	7fffffc0 	.word	0x7fffffc0

08002238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <LL_ADC_IsEnabled+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_IsEnabled+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <LL_ADC_REG_StartConversion+0x24>)
 800226e:	4013      	ands	r3, r2
 8002270:	f043 0204 	orr.w	r2, r3, #4
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	7fffffc0 	.word	0x7fffffc0

08002288 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d101      	bne.n	80022a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e18f      	b.n	800260e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fe fa03 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff3f 	bl	8002198 <LL_ADC_IsDeepPowerDownEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff25 	bl	8002174 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff5a 	bl	80021e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d114      	bne.n	8002364 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff3e 	bl	80021c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002344:	4b87      	ldr	r3, [pc, #540]	@ (8002564 <HAL_ADC_Init+0x290>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	4a87      	ldr	r2, [pc, #540]	@ (8002568 <HAL_ADC_Init+0x294>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002356:	e002      	b.n	800235e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3b01      	subs	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff3d 	bl	80021e8 <LL_ADC_IsInternalRegulatorEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	f043 0210 	orr.w	r2, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff77 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 800239a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 8129 	bne.w	80025fc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 8125 	bne.w	80025fc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff36 	bl	8002238 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d136      	bne.n	8002440 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a65      	ldr	r2, [pc, #404]	@ (800256c <HAL_ADC_Init+0x298>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_ADC_Init+0x112>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a63      	ldr	r2, [pc, #396]	@ (8002570 <HAL_ADC_Init+0x29c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10e      	bne.n	8002404 <HAL_ADC_Init+0x130>
 80023e6:	4861      	ldr	r0, [pc, #388]	@ (800256c <HAL_ADC_Init+0x298>)
 80023e8:	f7ff ff26 	bl	8002238 <LL_ADC_IsEnabled>
 80023ec:	4604      	mov	r4, r0
 80023ee:	4860      	ldr	r0, [pc, #384]	@ (8002570 <HAL_ADC_Init+0x29c>)
 80023f0:	f7ff ff22 	bl	8002238 <LL_ADC_IsEnabled>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4323      	orrs	r3, r4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e008      	b.n	8002416 <HAL_ADC_Init+0x142>
 8002404:	485b      	ldr	r0, [pc, #364]	@ (8002574 <HAL_ADC_Init+0x2a0>)
 8002406:	f7ff ff17 	bl	8002238 <LL_ADC_IsEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d012      	beq.n	8002440 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a53      	ldr	r2, [pc, #332]	@ (800256c <HAL_ADC_Init+0x298>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_ADC_Init+0x15a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a51      	ldr	r2, [pc, #324]	@ (8002570 <HAL_ADC_Init+0x29c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0x15e>
 800242e:	4a52      	ldr	r2, [pc, #328]	@ (8002578 <HAL_ADC_Init+0x2a4>)
 8002430:	e000      	b.n	8002434 <HAL_ADC_Init+0x160>
 8002432:	4a52      	ldr	r2, [pc, #328]	@ (800257c <HAL_ADC_Init+0x2a8>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f7ff fd62 	bl	8001f04 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002440:	f7ff fd54 	bl	8001eec <HAL_GetREVID>
 8002444:	4603      	mov	r3, r0
 8002446:	f241 0203 	movw	r2, #4099	@ 0x1003
 800244a:	4293      	cmp	r3, r2
 800244c:	d914      	bls.n	8002478 <HAL_ADC_Init+0x1a4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d110      	bne.n	8002478 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7d5b      	ldrb	r3, [r3, #21]
 800245a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002460:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002466:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7f1b      	ldrb	r3, [r3, #28]
 800246c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800246e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002470:	f043 030c 	orr.w	r3, r3, #12
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	e00d      	b.n	8002494 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7d5b      	ldrb	r3, [r3, #21]
 800247c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002482:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002488:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7f1b      	ldrb	r3, [r3, #28]
 800248e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7f1b      	ldrb	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	045b      	lsls	r3, r3, #17
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <HAL_ADC_Init+0x2ac>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	69b9      	ldr	r1, [r7, #24]
 80024d6:	430b      	orrs	r3, r1
 80024d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fed2 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 80024e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fedf 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 80024f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d15f      	bne.n	80025b8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d15c      	bne.n	80025b8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7d1b      	ldrb	r3, [r3, #20]
 8002502:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <HAL_ADC_Init+0x2b0>)
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002526:	2b01      	cmp	r3, #1
 8002528:	d130      	bne.n	800258c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <HAL_ADC_Init+0x2b4>)
 8002538:	4013      	ands	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800253e:	3a01      	subs	r2, #1
 8002540:	0411      	lsls	r1, r2, #16
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800254c:	4311      	orrs	r1, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002552:	430a      	orrs	r2, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	e01c      	b.n	800259c <HAL_ADC_Init+0x2c8>
 8002562:	bf00      	nop
 8002564:	24000000 	.word	0x24000000
 8002568:	053e2d63 	.word	0x053e2d63
 800256c:	40022000 	.word	0x40022000
 8002570:	40022100 	.word	0x40022100
 8002574:	58026000 	.word	0x58026000
 8002578:	40022300 	.word	0x40022300
 800257c:	58026300 	.word	0x58026300
 8002580:	fff0c003 	.word	0xfff0c003
 8002584:	ffffbffc 	.word	0xffffbffc
 8002588:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fd8c 	bl	80030d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10c      	bne.n	80025da <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f023 010f 	bic.w	r1, r3, #15
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	1e5a      	subs	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d8:	e007      	b.n	80025ea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 020f 	bic.w	r2, r2, #15
 80025e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80025fa:	e007      	b.n	800260c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800260c:	7ffb      	ldrb	r3, [r7, #31]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	@ 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd90      	pop	{r4, r7, pc}
 8002616:	bf00      	nop

08002618 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a55      	ldr	r2, [pc, #340]	@ (8002780 <HAL_ADC_Start_DMA+0x168>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_ADC_Start_DMA+0x20>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a54      	ldr	r2, [pc, #336]	@ (8002784 <HAL_ADC_Start_DMA+0x16c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_ADC_Start_DMA+0x24>
 8002638:	4b53      	ldr	r3, [pc, #332]	@ (8002788 <HAL_ADC_Start_DMA+0x170>)
 800263a:	e000      	b.n	800263e <HAL_ADC_Start_DMA+0x26>
 800263c:	4b53      	ldr	r3, [pc, #332]	@ (800278c <HAL_ADC_Start_DMA+0x174>)
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fd8a 	bl	8002158 <LL_ADC_GetMultimode>
 8002644:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fe1c 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 808c 	bne.w	8002770 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_ADC_Start_DMA+0x4e>
 8002662:	2302      	movs	r3, #2
 8002664:	e087      	b.n	8002776 <HAL_ADC_Start_DMA+0x15e>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b05      	cmp	r3, #5
 8002678:	d002      	beq.n	8002680 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b09      	cmp	r3, #9
 800267e:	d170      	bne.n	8002762 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fc07 	bl	8002e94 <ADC_Enable>
 8002686:	4603      	mov	r3, r0
 8002688:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d163      	bne.n	8002758 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002694:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <HAL_ADC_Start_DMA+0x178>)
 8002696:	4013      	ands	r3, r2
 8002698:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a37      	ldr	r2, [pc, #220]	@ (8002784 <HAL_ADC_Start_DMA+0x16c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d002      	beq.n	80026b0 <HAL_ADC_Start_DMA+0x98>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_Start_DMA+0x9a>
 80026b0:	4b33      	ldr	r3, [pc, #204]	@ (8002780 <HAL_ADC_Start_DMA+0x168>)
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d002      	beq.n	80026c0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	f023 0206 	bic.w	r2, r3, #6
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80026e4:	e002      	b.n	80026ec <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f0:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <HAL_ADC_Start_DMA+0x17c>)
 80026f2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f8:	4a27      	ldr	r2, [pc, #156]	@ (8002798 <HAL_ADC_Start_DMA+0x180>)
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002700:	4a26      	ldr	r2, [pc, #152]	@ (800279c <HAL_ADC_Start_DMA+0x184>)
 8002702:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	221c      	movs	r2, #28
 800270a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0210 	orr.w	r2, r2, #16
 8002722:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f7ff fcaf 	bl	8002092 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3340      	adds	r3, #64	@ 0x40
 800273e:	4619      	mov	r1, r3
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f001 fb10 	bl	8003d68 <HAL_DMA_Start_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd85 	bl	8002260 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002756:	e00d      	b.n	8002774 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002760:	e008      	b.n	8002774 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800276e:	e001      	b.n	8002774 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002770:	2302      	movs	r3, #2
 8002772:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40022100 	.word	0x40022100
 8002788:	40022300 	.word	0x40022300
 800278c:	58026300 	.word	0x58026300
 8002790:	fffff0fe 	.word	0xfffff0fe
 8002794:	08002fa9 	.word	0x08002fa9
 8002798:	08003081 	.word	0x08003081
 800279c:	0800309d 	.word	0x0800309d

080027a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b0a1      	sub	sp, #132	@ 0x84
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a65      	ldr	r2, [pc, #404]	@ (800298c <HAL_ADC_ConfigChannel+0x1b0>)
 80027f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x2a>
 8002802:	2302      	movs	r3, #2
 8002804:	e32e      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x688>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fd38 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 8313 	bne.w	8002e46 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db2c      	blt.n	8002882 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002830:	2b00      	cmp	r3, #0
 8002832:	d108      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x6a>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2201      	movs	r2, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	e016      	b.n	8002874 <HAL_ADC_ConfigChannel+0x98>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002856:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2201      	movs	r2, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	69d1      	ldr	r1, [r2, #28]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	430b      	orrs	r3, r1
 8002880:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	f7ff fbd3 	bl	800203a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fcf5 	bl	8002288 <LL_ADC_REG_IsConversionOngoing>
 800289e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fd02 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 80028aa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 80b8 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 80b4 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f7ff fbf5 	bl	80020b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028ce:	4b30      	ldr	r3, [pc, #192]	@ (8002990 <HAL_ADC_ConfigChannel+0x1b4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80028d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028da:	d10b      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x118>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	e01d      	b.n	8002930 <HAL_ADC_ConfigChannel+0x154>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10b      	bne.n	800291a <HAL_ADC_ConfigChannel+0x13e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	e00a      	b.n	8002930 <HAL_ADC_ConfigChannel+0x154>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d02c      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002948:	f7ff fb10 	bl	8001f6c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6919      	ldr	r1, [r3, #16]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	7e5b      	ldrb	r3, [r3, #25]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x186>
 800295c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002960:	e000      	b.n	8002964 <HAL_ADC_ConfigChannel+0x188>
 8002962:	2300      	movs	r3, #0
 8002964:	461a      	mov	r2, r3
 8002966:	f7ff fb3a 	bl	8001fde <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6919      	ldr	r1, [r3, #16]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7e1b      	ldrb	r3, [r3, #24]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1a4>
 800297a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800297e:	e000      	b.n	8002982 <HAL_ADC_ConfigChannel+0x1a6>
 8002980:	2300      	movs	r3, #0
 8002982:	461a      	mov	r2, r3
 8002984:	f7ff fb12 	bl	8001fac <LL_ADC_SetDataRightShift>
 8002988:	e04c      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x248>
 800298a:	bf00      	nop
 800298c:	47ff0000 	.word	0x47ff0000
 8002990:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	069b      	lsls	r3, r3, #26
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d107      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029b6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	069b      	lsls	r3, r3, #26
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029da:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	069b      	lsls	r3, r3, #26
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029fe:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	069b      	lsls	r3, r3, #26
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d107      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a22:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fc05 	bl	8002238 <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 8211 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f7ff fb64 	bl	8002110 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4aa1      	ldr	r2, [pc, #644]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x4f8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	f040 812e 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x2a0>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e019      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x2d4>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	bf94      	ite	ls
 8002aaa:	2301      	movls	r3, #1
 8002aac:	2300      	movhi	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d079      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x2f4>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	069b      	lsls	r3, r3, #26
 8002aca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ace:	e015      	b.n	8002afc <HAL_ADC_ConfigChannel+0x320>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ae0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	069b      	lsls	r3, r3, #26
 8002af8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x340>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	e017      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x370>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	ea42 0103 	orr.w	r1, r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x396>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	051b      	lsls	r3, r3, #20
 8002b70:	e018      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x3c8>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e003      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	e07e      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x3e8>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	069b      	lsls	r3, r3, #26
 8002bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bc2:	e015      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x414>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	069b      	lsls	r3, r3, #26
 8002bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x434>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	3301      	adds	r3, #1
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	e017      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x464>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e003      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	ea42 0103 	orr.w	r1, r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x490>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	3b1e      	subs	r3, #30
 8002c64:	051b      	lsls	r3, r3, #20
 8002c66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	e01b      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x4c8>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	60fb      	str	r3, [r7, #12]
  return result;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e003      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 021f 	and.w	r2, r3, #31
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b1e      	subs	r3, #30
 8002c9e:	051b      	lsls	r3, r3, #20
 8002ca0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7ff fa04 	bl	80020b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f280 80cf 	bge.w	8002e58 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a06      	ldr	r2, [pc, #24]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x4fc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x4f2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a04      	ldr	r2, [pc, #16]	@ (8002cdc <HAL_ADC_ConfigChannel+0x500>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10a      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x508>
 8002cce:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x504>)
 8002cd0:	e009      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x50a>
 8002cd2:	bf00      	nop
 8002cd4:	47ff0000 	.word	0x47ff0000
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022100 	.word	0x40022100
 8002ce0:	40022300 	.word	0x40022300
 8002ce4:	4b61      	ldr	r3, [pc, #388]	@ (8002e6c <HAL_ADC_ConfigChannel+0x690>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff f932 	bl	8001f50 <LL_ADC_GetCommonPathInternalCh>
 8002cec:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e70 <HAL_ADC_ConfigChannel+0x694>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_ConfigChannel+0x526>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e74 <HAL_ADC_ConfigChannel+0x698>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10e      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x544>
 8002d02:	485b      	ldr	r0, [pc, #364]	@ (8002e70 <HAL_ADC_ConfigChannel+0x694>)
 8002d04:	f7ff fa98 	bl	8002238 <LL_ADC_IsEnabled>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	485a      	ldr	r0, [pc, #360]	@ (8002e74 <HAL_ADC_ConfigChannel+0x698>)
 8002d0c:	f7ff fa94 	bl	8002238 <LL_ADC_IsEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4323      	orrs	r3, r4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e008      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x556>
 8002d20:	4855      	ldr	r0, [pc, #340]	@ (8002e78 <HAL_ADC_ConfigChannel+0x69c>)
 8002d22:	f7ff fa89 	bl	8002238 <LL_ADC_IsEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d07d      	beq.n	8002e32 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a50      	ldr	r2, [pc, #320]	@ (8002e7c <HAL_ADC_ConfigChannel+0x6a0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d130      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x5c6>
 8002d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d12b      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e78 <HAL_ADC_ConfigChannel+0x69c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	f040 8081 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a45      	ldr	r2, [pc, #276]	@ (8002e70 <HAL_ADC_ConfigChannel+0x694>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0x58e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a43      	ldr	r2, [pc, #268]	@ (8002e74 <HAL_ADC_ConfigChannel+0x698>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x592>
 8002d6a:	4a45      	ldr	r2, [pc, #276]	@ (8002e80 <HAL_ADC_ConfigChannel+0x6a4>)
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x594>
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e6c <HAL_ADC_ConfigChannel+0x690>)
 8002d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7ff f8d6 	bl	8001f2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d7e:	4b41      	ldr	r3, [pc, #260]	@ (8002e84 <HAL_ADC_ConfigChannel+0x6a8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	4a40      	ldr	r2, [pc, #256]	@ (8002e88 <HAL_ADC_ConfigChannel+0x6ac>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	e05a      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a39      	ldr	r2, [pc, #228]	@ (8002e8c <HAL_ADC_ConfigChannel+0x6b0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d11e      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x60e>
 8002dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d119      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2f      	ldr	r2, [pc, #188]	@ (8002e78 <HAL_ADC_ConfigChannel+0x69c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d14b      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e70 <HAL_ADC_ConfigChannel+0x694>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x5f8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a29      	ldr	r2, [pc, #164]	@ (8002e74 <HAL_ADC_ConfigChannel+0x698>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x5fc>
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e80 <HAL_ADC_ConfigChannel+0x6a4>)
 8002dd6:	e000      	b.n	8002dda <HAL_ADC_ConfigChannel+0x5fe>
 8002dd8:	4a24      	ldr	r2, [pc, #144]	@ (8002e6c <HAL_ADC_ConfigChannel+0x690>)
 8002dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f7ff f8a1 	bl	8001f2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002de8:	e036      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a28      	ldr	r2, [pc, #160]	@ (8002e90 <HAL_ADC_ConfigChannel+0x6b4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d131      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
 8002df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d12c      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1d      	ldr	r2, [pc, #116]	@ (8002e78 <HAL_ADC_ConfigChannel+0x69c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d127      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <HAL_ADC_ConfigChannel+0x694>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_ADC_ConfigChannel+0x640>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a17      	ldr	r2, [pc, #92]	@ (8002e74 <HAL_ADC_ConfigChannel+0x698>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x644>
 8002e1c:	4a18      	ldr	r2, [pc, #96]	@ (8002e80 <HAL_ADC_ConfigChannel+0x6a4>)
 8002e1e:	e000      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x646>
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <HAL_ADC_ConfigChannel+0x690>)
 8002e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7ff f87d 	bl	8001f2a <LL_ADC_SetCommonPathInternalCh>
 8002e30:	e012      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e44:	e008      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3784      	adds	r7, #132	@ 0x84
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}
 8002e6c:	58026300 	.word	0x58026300
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40022100 	.word	0x40022100
 8002e78:	58026000 	.word	0x58026000
 8002e7c:	cb840000 	.word	0xcb840000
 8002e80:	40022300 	.word	0x40022300
 8002e84:	24000000 	.word	0x24000000
 8002e88:	053e2d63 	.word	0x053e2d63
 8002e8c:	c7520000 	.word	0xc7520000
 8002e90:	cfb80000 	.word	0xcfb80000

08002e94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f9c9 	bl	8002238 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d16e      	bne.n	8002f8a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <ADC_Enable+0x100>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	f043 0210 	orr.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e05a      	b.n	8002f8c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f998 	bl	8002210 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe ffd4 	bl	8001e8c <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <ADC_Enable+0x104>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <ADC_Enable+0x66>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	@ (8002f9c <ADC_Enable+0x108>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <ADC_Enable+0x6a>
 8002efa:	4b29      	ldr	r3, [pc, #164]	@ (8002fa0 <ADC_Enable+0x10c>)
 8002efc:	e000      	b.n	8002f00 <ADC_Enable+0x6c>
 8002efe:	4b29      	ldr	r3, [pc, #164]	@ (8002fa4 <ADC_Enable+0x110>)
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff f929 	bl	8002158 <LL_ADC_GetMultimode>
 8002f06:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <ADC_Enable+0x108>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d002      	beq.n	8002f18 <ADC_Enable+0x84>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	e000      	b.n	8002f1a <ADC_Enable+0x86>
 8002f18:	4b1f      	ldr	r3, [pc, #124]	@ (8002f98 <ADC_Enable+0x104>)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02c      	beq.n	8002f7c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d130      	bne.n	8002f8a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f28:	e028      	b.n	8002f7c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f982 	bl	8002238 <LL_ADC_IsEnabled>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f966 	bl	8002210 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f44:	f7fe ffa2 	bl	8001e8c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d914      	bls.n	8002f7c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d00d      	beq.n	8002f7c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f64:	f043 0210 	orr.w	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e007      	b.n	8002f8c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d1cf      	bne.n	8002f2a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	8000003f 	.word	0x8000003f
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	40022100 	.word	0x40022100
 8002fa0:	40022300 	.word	0x40022300
 8002fa4:	58026300 	.word	0x58026300

08002fa8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d14b      	bne.n	800305a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d021      	beq.n	8003020 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f817 	bl	8002014 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d032      	beq.n	8003052 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d12b      	bne.n	8003052 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11f      	bne.n	8003052 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
 800301e:	e018      	b.n	8003052 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d111      	bne.n	8003052 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff fba4 	bl	80027a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003058:	e00e      	b.n	8003078 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7ff fbae 	bl	80027c8 <HAL_ADC_ErrorCallback>
}
 800306c:	e004      	b.n	8003078 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fb90 	bl	80027b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ba:	f043 0204 	orr.w	r2, r3, #4
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff fb80 	bl	80027c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a7a      	ldr	r2, [pc, #488]	@ (80032c8 <ADC_ConfigureBoostMode+0x1f8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <ADC_ConfigureBoostMode+0x1c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a79      	ldr	r2, [pc, #484]	@ (80032cc <ADC_ConfigureBoostMode+0x1fc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d109      	bne.n	8003100 <ADC_ConfigureBoostMode+0x30>
 80030ec:	4b78      	ldr	r3, [pc, #480]	@ (80032d0 <ADC_ConfigureBoostMode+0x200>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e008      	b.n	8003112 <ADC_ConfigureBoostMode+0x42>
 8003100:	4b74      	ldr	r3, [pc, #464]	@ (80032d4 <ADC_ConfigureBoostMode+0x204>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01c      	beq.n	8003150 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003116:	f003 fb85 	bl	8006824 <HAL_RCC_GetHCLKFreq>
 800311a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003124:	d010      	beq.n	8003148 <ADC_ConfigureBoostMode+0x78>
 8003126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800312a:	d873      	bhi.n	8003214 <ADC_ConfigureBoostMode+0x144>
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d002      	beq.n	8003138 <ADC_ConfigureBoostMode+0x68>
 8003132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003136:	d16d      	bne.n	8003214 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	60fb      	str	r3, [r7, #12]
        break;
 8003146:	e068      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	60fb      	str	r3, [r7, #12]
        break;
 800314e:	e064      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003150:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	f004 fe0c 	bl	8007d74 <HAL_RCCEx_GetPeriphCLKFreq>
 800315c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003166:	d051      	beq.n	800320c <ADC_ConfigureBoostMode+0x13c>
 8003168:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800316c:	d854      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 800316e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003172:	d047      	beq.n	8003204 <ADC_ConfigureBoostMode+0x134>
 8003174:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003178:	d84e      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 800317a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800317e:	d03d      	beq.n	80031fc <ADC_ConfigureBoostMode+0x12c>
 8003180:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003184:	d848      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 8003186:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800318a:	d033      	beq.n	80031f4 <ADC_ConfigureBoostMode+0x124>
 800318c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003190:	d842      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 8003192:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003196:	d029      	beq.n	80031ec <ADC_ConfigureBoostMode+0x11c>
 8003198:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800319c:	d83c      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 800319e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80031a2:	d01a      	beq.n	80031da <ADC_ConfigureBoostMode+0x10a>
 80031a4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80031a8:	d836      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 80031aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80031ae:	d014      	beq.n	80031da <ADC_ConfigureBoostMode+0x10a>
 80031b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80031b4:	d830      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 80031b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ba:	d00e      	beq.n	80031da <ADC_ConfigureBoostMode+0x10a>
 80031bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c0:	d82a      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 80031c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031c6:	d008      	beq.n	80031da <ADC_ConfigureBoostMode+0x10a>
 80031c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031cc:	d824      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x148>
 80031ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031d2:	d002      	beq.n	80031da <ADC_ConfigureBoostMode+0x10a>
 80031d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031d8:	d11e      	bne.n	8003218 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0c9b      	lsrs	r3, r3, #18
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	60fb      	str	r3, [r7, #12]
        break;
 80031ea:	e016      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	60fb      	str	r3, [r7, #12]
        break;
 80031f2:	e012      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	60fb      	str	r3, [r7, #12]
        break;
 80031fa:	e00e      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	60fb      	str	r3, [r7, #12]
        break;
 8003202:	e00a      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	09db      	lsrs	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]
        break;
 800320a:	e006      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	60fb      	str	r3, [r7, #12]
        break;
 8003212:	e002      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003218:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800321a:	f7fe fe67 	bl	8001eec <HAL_GetREVID>
 800321e:	4603      	mov	r3, r0
 8003220:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003224:	4293      	cmp	r3, r2
 8003226:	d815      	bhi.n	8003254 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a2b      	ldr	r2, [pc, #172]	@ (80032d8 <ADC_ConfigureBoostMode+0x208>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d908      	bls.n	8003242 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800323e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003240:	e03e      	b.n	80032c0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	e035      	b.n	80032c0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a1f      	ldr	r2, [pc, #124]	@ (80032dc <ADC_ConfigureBoostMode+0x20c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d808      	bhi.n	8003274 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003270:	609a      	str	r2, [r3, #8]
}
 8003272:	e025      	b.n	80032c0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a1a      	ldr	r2, [pc, #104]	@ (80032e0 <ADC_ConfigureBoostMode+0x210>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d80a      	bhi.n	8003292 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	e016      	b.n	80032c0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a13      	ldr	r2, [pc, #76]	@ (80032e4 <ADC_ConfigureBoostMode+0x214>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d80a      	bhi.n	80032b0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ac:	609a      	str	r2, [r3, #8]
}
 80032ae:	e007      	b.n	80032c0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40022100 	.word	0x40022100
 80032d0:	40022300 	.word	0x40022300
 80032d4:	58026300 	.word	0x58026300
 80032d8:	01312d00 	.word	0x01312d00
 80032dc:	005f5e10 	.word	0x005f5e10
 80032e0:	00bebc20 	.word	0x00bebc20
 80032e4:	017d7840 	.word	0x017d7840

080032e8 <LL_ADC_IsEnabled>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <LL_ADC_IsEnabled+0x18>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <LL_ADC_IsEnabled+0x1a>
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_ADC_REG_IsConversionOngoing>:
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b04      	cmp	r3, #4
 8003320:	d101      	bne.n	8003326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b09f      	sub	sp, #124	@ 0x7c
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800334e:	2302      	movs	r3, #2
 8003350:	e0be      	b.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800335e:	2300      	movs	r3, #0
 8003360:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5c      	ldr	r2, [pc, #368]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d102      	bne.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800336c:	4b5b      	ldr	r3, [pc, #364]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	e001      	b.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e09d      	b.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ffb9 	bl	800330e <LL_ADC_REG_IsConversionOngoing>
 800339c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ffb3 	bl	800330e <LL_ADC_REG_IsConversionOngoing>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d17f      	bne.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d17c      	bne.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a47      	ldr	r2, [pc, #284]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a46      	ldr	r2, [pc, #280]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80033c8:	4b45      	ldr	r3, [pc, #276]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033ca:	e000      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80033cc:	4b45      	ldr	r3, [pc, #276]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d039      	beq.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80033d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a3a      	ldr	r2, [pc, #232]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a38      	ldr	r2, [pc, #224]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10e      	bne.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033fe:	4836      	ldr	r0, [pc, #216]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003400:	f7ff ff72 	bl	80032e8 <LL_ADC_IsEnabled>
 8003404:	4604      	mov	r4, r0
 8003406:	4835      	ldr	r0, [pc, #212]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003408:	f7ff ff6e 	bl	80032e8 <LL_ADC_IsEnabled>
 800340c:	4603      	mov	r3, r0
 800340e:	4323      	orrs	r3, r4
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e008      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800341c:	4832      	ldr	r0, [pc, #200]	@ (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800341e:	f7ff ff63 	bl	80032e8 <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d047      	beq.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003438:	4013      	ands	r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	6811      	ldr	r1, [r2, #0]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	6892      	ldr	r2, [r2, #8]
 8003442:	430a      	orrs	r2, r1
 8003444:	431a      	orrs	r2, r3
 8003446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003448:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800344a:	e03a      	b.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800344c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003456:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1d      	ldr	r2, [pc, #116]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10e      	bne.n	800348a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800346c:	481a      	ldr	r0, [pc, #104]	@ (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800346e:	f7ff ff3b 	bl	80032e8 <LL_ADC_IsEnabled>
 8003472:	4604      	mov	r4, r0
 8003474:	4819      	ldr	r0, [pc, #100]	@ (80034dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003476:	f7ff ff37 	bl	80032e8 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	4323      	orrs	r3, r4
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e008      	b.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800348a:	4817      	ldr	r0, [pc, #92]	@ (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800348c:	f7ff ff2c 	bl	80032e8 <LL_ADC_IsEnabled>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034aa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ac:	e009      	b.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80034c0:	e000      	b.n	80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034c2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	377c      	adds	r7, #124	@ 0x7c
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40022100 	.word	0x40022100
 80034e0:	40022300 	.word	0x40022300
 80034e4:	58026300 	.word	0x58026300
 80034e8:	58026000 	.word	0x58026000
 80034ec:	fffff0e0 	.word	0xfffff0e0

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <__NVIC_SetPriorityGrouping+0x40>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	4313      	orrs	r3, r2
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <__NVIC_SetPriorityGrouping+0x40>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00
 8003534:	05fa0000 	.word	0x05fa0000

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	@ (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800355e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003562:	2b00      	cmp	r3, #0
 8003564:	db0b      	blt.n	800357e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4907      	ldr	r1, [pc, #28]	@ (800358c <__NVIC_EnableIRQ+0x38>)
 800356e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2001      	movs	r0, #1
 8003576:	fa00 f202 	lsl.w	r2, r0, r2
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000e100 	.word	0xe000e100

08003590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800359c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db0a      	blt.n	80035ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	490c      	ldr	r1, [pc, #48]	@ (80035dc <__NVIC_SetPriority+0x4c>)
 80035aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	440b      	add	r3, r1
 80035b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b8:	e00a      	b.n	80035d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4908      	ldr	r1, [pc, #32]	@ (80035e0 <__NVIC_SetPriority+0x50>)
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3b04      	subs	r3, #4
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	761a      	strb	r2, [r3, #24]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000e100 	.word	0xe000e100
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	@ 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f1c3 0307 	rsb	r3, r3, #7
 80035fe:	2b04      	cmp	r3, #4
 8003600:	bf28      	it	cs
 8003602:	2304      	movcs	r3, #4
 8003604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3304      	adds	r3, #4
 800360a:	2b06      	cmp	r3, #6
 800360c:	d902      	bls.n	8003614 <NVIC_EncodePriority+0x30>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3b03      	subs	r3, #3
 8003612:	e000      	b.n	8003616 <NVIC_EncodePriority+0x32>
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	401a      	ands	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800362c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43d9      	mvns	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	4313      	orrs	r3, r2
         );
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	@ 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ff4c 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800366e:	f7ff ff63 	bl	8003538 <__NVIC_GetPriorityGrouping>
 8003672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	f7ff ffb3 	bl	80035e4 <NVIC_EncodePriority>
 800367e:	4602      	mov	r2, r0
 8003680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff82 	bl	8003590 <__NVIC_SetPriority>
}
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff56 	bl	8003554 <__NVIC_EnableIRQ>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036b8:	f7fe fbe8 	bl	8001e8c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e316      	b.n	8003cf6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a66      	ldr	r2, [pc, #408]	@ (8003868 <HAL_DMA_Init+0x1b8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d04a      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a65      	ldr	r2, [pc, #404]	@ (800386c <HAL_DMA_Init+0x1bc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d045      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a63      	ldr	r2, [pc, #396]	@ (8003870 <HAL_DMA_Init+0x1c0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d040      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a62      	ldr	r2, [pc, #392]	@ (8003874 <HAL_DMA_Init+0x1c4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d03b      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a60      	ldr	r2, [pc, #384]	@ (8003878 <HAL_DMA_Init+0x1c8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d036      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5f      	ldr	r2, [pc, #380]	@ (800387c <HAL_DMA_Init+0x1cc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d031      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5d      	ldr	r2, [pc, #372]	@ (8003880 <HAL_DMA_Init+0x1d0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d02c      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5c      	ldr	r2, [pc, #368]	@ (8003884 <HAL_DMA_Init+0x1d4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d027      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5a      	ldr	r2, [pc, #360]	@ (8003888 <HAL_DMA_Init+0x1d8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d022      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a59      	ldr	r2, [pc, #356]	@ (800388c <HAL_DMA_Init+0x1dc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d01d      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a57      	ldr	r2, [pc, #348]	@ (8003890 <HAL_DMA_Init+0x1e0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d018      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a56      	ldr	r2, [pc, #344]	@ (8003894 <HAL_DMA_Init+0x1e4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a54      	ldr	r2, [pc, #336]	@ (8003898 <HAL_DMA_Init+0x1e8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a53      	ldr	r2, [pc, #332]	@ (800389c <HAL_DMA_Init+0x1ec>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a51      	ldr	r2, [pc, #324]	@ (80038a0 <HAL_DMA_Init+0x1f0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_DMA_Init+0xb8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a50      	ldr	r2, [pc, #320]	@ (80038a4 <HAL_DMA_Init+0x1f4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d101      	bne.n	800376c <HAL_DMA_Init+0xbc>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_DMA_Init+0xbe>
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 813b 	beq.w	80039ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a37      	ldr	r2, [pc, #220]	@ (8003868 <HAL_DMA_Init+0x1b8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d04a      	beq.n	8003824 <HAL_DMA_Init+0x174>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a36      	ldr	r2, [pc, #216]	@ (800386c <HAL_DMA_Init+0x1bc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d045      	beq.n	8003824 <HAL_DMA_Init+0x174>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a34      	ldr	r2, [pc, #208]	@ (8003870 <HAL_DMA_Init+0x1c0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d040      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a33      	ldr	r2, [pc, #204]	@ (8003874 <HAL_DMA_Init+0x1c4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d03b      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a31      	ldr	r2, [pc, #196]	@ (8003878 <HAL_DMA_Init+0x1c8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d036      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a30      	ldr	r2, [pc, #192]	@ (800387c <HAL_DMA_Init+0x1cc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d031      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003880 <HAL_DMA_Init+0x1d0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02c      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003884 <HAL_DMA_Init+0x1d4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d027      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003888 <HAL_DMA_Init+0x1d8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d022      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2a      	ldr	r2, [pc, #168]	@ (800388c <HAL_DMA_Init+0x1dc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d01d      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a28      	ldr	r2, [pc, #160]	@ (8003890 <HAL_DMA_Init+0x1e0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d018      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <HAL_DMA_Init+0x1e4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d013      	beq.n	8003824 <HAL_DMA_Init+0x174>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a25      	ldr	r2, [pc, #148]	@ (8003898 <HAL_DMA_Init+0x1e8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00e      	beq.n	8003824 <HAL_DMA_Init+0x174>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a24      	ldr	r2, [pc, #144]	@ (800389c <HAL_DMA_Init+0x1ec>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_DMA_Init+0x174>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a22      	ldr	r2, [pc, #136]	@ (80038a0 <HAL_DMA_Init+0x1f0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_DMA_Init+0x174>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a21      	ldr	r2, [pc, #132]	@ (80038a4 <HAL_DMA_Init+0x1f4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <HAL_DMA_Init+0x186>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e007      	b.n	8003846 <HAL_DMA_Init+0x196>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003846:	e02f      	b.n	80038a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003848:	f7fe fb20 	bl	8001e8c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b05      	cmp	r3, #5
 8003854:	d928      	bls.n	80038a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2203      	movs	r2, #3
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e246      	b.n	8003cf6 <HAL_DMA_Init+0x646>
 8003868:	40020010 	.word	0x40020010
 800386c:	40020028 	.word	0x40020028
 8003870:	40020040 	.word	0x40020040
 8003874:	40020058 	.word	0x40020058
 8003878:	40020070 	.word	0x40020070
 800387c:	40020088 	.word	0x40020088
 8003880:	400200a0 	.word	0x400200a0
 8003884:	400200b8 	.word	0x400200b8
 8003888:	40020410 	.word	0x40020410
 800388c:	40020428 	.word	0x40020428
 8003890:	40020440 	.word	0x40020440
 8003894:	40020458 	.word	0x40020458
 8003898:	40020470 	.word	0x40020470
 800389c:	40020488 	.word	0x40020488
 80038a0:	400204a0 	.word	0x400204a0
 80038a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1c8      	bne.n	8003848 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4b83      	ldr	r3, [pc, #524]	@ (8003ad0 <HAL_DMA_Init+0x420>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80038ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d107      	bne.n	800390c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	4313      	orrs	r3, r2
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800390c:	4b71      	ldr	r3, [pc, #452]	@ (8003ad4 <HAL_DMA_Init+0x424>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b71      	ldr	r3, [pc, #452]	@ (8003ad8 <HAL_DMA_Init+0x428>)
 8003912:	4013      	ands	r3, r2
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003918:	d328      	bcc.n	800396c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b28      	cmp	r3, #40	@ 0x28
 8003920:	d903      	bls.n	800392a <HAL_DMA_Init+0x27a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b2e      	cmp	r3, #46	@ 0x2e
 8003928:	d917      	bls.n	800395a <HAL_DMA_Init+0x2aa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003930:	d903      	bls.n	800393a <HAL_DMA_Init+0x28a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b42      	cmp	r3, #66	@ 0x42
 8003938:	d90f      	bls.n	800395a <HAL_DMA_Init+0x2aa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b46      	cmp	r3, #70	@ 0x46
 8003940:	d903      	bls.n	800394a <HAL_DMA_Init+0x29a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b48      	cmp	r3, #72	@ 0x48
 8003948:	d907      	bls.n	800395a <HAL_DMA_Init+0x2aa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003950:	d905      	bls.n	800395e <HAL_DMA_Init+0x2ae>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b52      	cmp	r3, #82	@ 0x52
 8003958:	d801      	bhi.n	800395e <HAL_DMA_Init+0x2ae>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_DMA_Init+0x2b0>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800396a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	2b04      	cmp	r3, #4
 8003994:	d117      	bne.n	80039c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f001 fc09 	bl	80051c0 <DMA_CheckFifoParam>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2240      	movs	r2, #64	@ 0x40
 80039b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e197      	b.n	8003cf6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 fb44 	bl	800505c <DMA_CalcBaseAndBitshift>
 80039d4:	4603      	mov	r3, r0
 80039d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	223f      	movs	r2, #63	@ 0x3f
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e0cd      	b.n	8003b86 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3b      	ldr	r2, [pc, #236]	@ (8003adc <HAL_DMA_Init+0x42c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a39      	ldr	r2, [pc, #228]	@ (8003ae0 <HAL_DMA_Init+0x430>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01d      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a38      	ldr	r2, [pc, #224]	@ (8003ae4 <HAL_DMA_Init+0x434>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ae8 <HAL_DMA_Init+0x438>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a35      	ldr	r2, [pc, #212]	@ (8003aec <HAL_DMA_Init+0x43c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a33      	ldr	r2, [pc, #204]	@ (8003af0 <HAL_DMA_Init+0x440>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a32      	ldr	r2, [pc, #200]	@ (8003af4 <HAL_DMA_Init+0x444>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_Init+0x38a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a30      	ldr	r2, [pc, #192]	@ (8003af8 <HAL_DMA_Init+0x448>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_DMA_Init+0x38e>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_DMA_Init+0x390>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8097 	beq.w	8003b74 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <HAL_DMA_Init+0x42c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d021      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <HAL_DMA_Init+0x430>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01c      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ae4 <HAL_DMA_Init+0x434>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d017      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <HAL_DMA_Init+0x438>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d012      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1e      	ldr	r2, [pc, #120]	@ (8003aec <HAL_DMA_Init+0x43c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00d      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <HAL_DMA_Init+0x440>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d008      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <HAL_DMA_Init+0x444>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_Init+0x3e4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <HAL_DMA_Init+0x448>)
 8003a92:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_DMA_Init+0x44c>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d021      	beq.n	8003b00 <HAL_DMA_Init+0x450>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b80      	cmp	r3, #128	@ 0x80
 8003ac2:	d102      	bne.n	8003aca <HAL_DMA_Init+0x41a>
 8003ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ac8:	e01b      	b.n	8003b02 <HAL_DMA_Init+0x452>
 8003aca:	2300      	movs	r3, #0
 8003acc:	e019      	b.n	8003b02 <HAL_DMA_Init+0x452>
 8003ace:	bf00      	nop
 8003ad0:	fe10803f 	.word	0xfe10803f
 8003ad4:	5c001000 	.word	0x5c001000
 8003ad8:	ffff0000 	.word	0xffff0000
 8003adc:	58025408 	.word	0x58025408
 8003ae0:	5802541c 	.word	0x5802541c
 8003ae4:	58025430 	.word	0x58025430
 8003ae8:	58025444 	.word	0x58025444
 8003aec:	58025458 	.word	0x58025458
 8003af0:	5802546c 	.word	0x5802546c
 8003af4:	58025480 	.word	0x58025480
 8003af8:	58025494 	.word	0x58025494
 8003afc:	fffe000f 	.word	0xfffe000f
 8003b00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b6e      	ldr	r3, [pc, #440]	@ (8003d00 <HAL_DMA_Init+0x650>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d04 <HAL_DMA_Init+0x654>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 fa7f 	bl	800505c <DMA_CalcBaseAndBitshift>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	e008      	b.n	8003b86 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0b7      	b.n	8003cf6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8003d08 <HAL_DMA_Init+0x658>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d072      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a5d      	ldr	r2, [pc, #372]	@ (8003d0c <HAL_DMA_Init+0x65c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d06d      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003d10 <HAL_DMA_Init+0x660>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d068      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8003d14 <HAL_DMA_Init+0x664>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d063      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a59      	ldr	r2, [pc, #356]	@ (8003d18 <HAL_DMA_Init+0x668>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d05e      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a57      	ldr	r2, [pc, #348]	@ (8003d1c <HAL_DMA_Init+0x66c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d059      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a56      	ldr	r2, [pc, #344]	@ (8003d20 <HAL_DMA_Init+0x670>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d054      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	@ (8003d24 <HAL_DMA_Init+0x674>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d04f      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a53      	ldr	r2, [pc, #332]	@ (8003d28 <HAL_DMA_Init+0x678>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a51      	ldr	r2, [pc, #324]	@ (8003d2c <HAL_DMA_Init+0x67c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a50      	ldr	r2, [pc, #320]	@ (8003d30 <HAL_DMA_Init+0x680>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a4e      	ldr	r2, [pc, #312]	@ (8003d34 <HAL_DMA_Init+0x684>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a4d      	ldr	r2, [pc, #308]	@ (8003d38 <HAL_DMA_Init+0x688>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d3c <HAL_DMA_Init+0x68c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a4a      	ldr	r2, [pc, #296]	@ (8003d40 <HAL_DMA_Init+0x690>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a48      	ldr	r2, [pc, #288]	@ (8003d44 <HAL_DMA_Init+0x694>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a47      	ldr	r2, [pc, #284]	@ (8003d48 <HAL_DMA_Init+0x698>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a45      	ldr	r2, [pc, #276]	@ (8003d4c <HAL_DMA_Init+0x69c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a44      	ldr	r2, [pc, #272]	@ (8003d50 <HAL_DMA_Init+0x6a0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a42      	ldr	r2, [pc, #264]	@ (8003d54 <HAL_DMA_Init+0x6a4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a41      	ldr	r2, [pc, #260]	@ (8003d58 <HAL_DMA_Init+0x6a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d5c <HAL_DMA_Init+0x6ac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a3e      	ldr	r2, [pc, #248]	@ (8003d60 <HAL_DMA_Init+0x6b0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_Init+0x5c6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3c      	ldr	r2, [pc, #240]	@ (8003d64 <HAL_DMA_Init+0x6b4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_Init+0x5ca>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_DMA_Init+0x5cc>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d032      	beq.n	8003ce6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f001 fb19 	bl	80052b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b80      	cmp	r3, #128	@ 0x80
 8003c8c:	d102      	bne.n	8003c94 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ca8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d010      	beq.n	8003cd4 <HAL_DMA_Init+0x624>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d80c      	bhi.n	8003cd4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 fb96 	bl	80053ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e008      	b.n	8003ce6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	a7fdabf8 	.word	0xa7fdabf8
 8003d04:	cccccccd 	.word	0xcccccccd
 8003d08:	40020010 	.word	0x40020010
 8003d0c:	40020028 	.word	0x40020028
 8003d10:	40020040 	.word	0x40020040
 8003d14:	40020058 	.word	0x40020058
 8003d18:	40020070 	.word	0x40020070
 8003d1c:	40020088 	.word	0x40020088
 8003d20:	400200a0 	.word	0x400200a0
 8003d24:	400200b8 	.word	0x400200b8
 8003d28:	40020410 	.word	0x40020410
 8003d2c:	40020428 	.word	0x40020428
 8003d30:	40020440 	.word	0x40020440
 8003d34:	40020458 	.word	0x40020458
 8003d38:	40020470 	.word	0x40020470
 8003d3c:	40020488 	.word	0x40020488
 8003d40:	400204a0 	.word	0x400204a0
 8003d44:	400204b8 	.word	0x400204b8
 8003d48:	58025408 	.word	0x58025408
 8003d4c:	5802541c 	.word	0x5802541c
 8003d50:	58025430 	.word	0x58025430
 8003d54:	58025444 	.word	0x58025444
 8003d58:	58025458 	.word	0x58025458
 8003d5c:	5802546c 	.word	0x5802546c
 8003d60:	58025480 	.word	0x58025480
 8003d64:	58025494 	.word	0x58025494

08003d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e226      	b.n	80041d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_DMA_Start_IT+0x2a>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e21f      	b.n	80041d2 <HAL_DMA_Start_IT+0x46a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	f040 820a 	bne.w	80041bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a68      	ldr	r2, [pc, #416]	@ (8003f5c <HAL_DMA_Start_IT+0x1f4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d04a      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a66      	ldr	r2, [pc, #408]	@ (8003f60 <HAL_DMA_Start_IT+0x1f8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d045      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a65      	ldr	r2, [pc, #404]	@ (8003f64 <HAL_DMA_Start_IT+0x1fc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d040      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a63      	ldr	r2, [pc, #396]	@ (8003f68 <HAL_DMA_Start_IT+0x200>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03b      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a62      	ldr	r2, [pc, #392]	@ (8003f6c <HAL_DMA_Start_IT+0x204>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d036      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a60      	ldr	r2, [pc, #384]	@ (8003f70 <HAL_DMA_Start_IT+0x208>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d031      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f74 <HAL_DMA_Start_IT+0x20c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d02c      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a5d      	ldr	r2, [pc, #372]	@ (8003f78 <HAL_DMA_Start_IT+0x210>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d027      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003f7c <HAL_DMA_Start_IT+0x214>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5a      	ldr	r2, [pc, #360]	@ (8003f80 <HAL_DMA_Start_IT+0x218>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a59      	ldr	r2, [pc, #356]	@ (8003f84 <HAL_DMA_Start_IT+0x21c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a57      	ldr	r2, [pc, #348]	@ (8003f88 <HAL_DMA_Start_IT+0x220>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a56      	ldr	r2, [pc, #344]	@ (8003f8c <HAL_DMA_Start_IT+0x224>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a54      	ldr	r2, [pc, #336]	@ (8003f90 <HAL_DMA_Start_IT+0x228>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a53      	ldr	r2, [pc, #332]	@ (8003f94 <HAL_DMA_Start_IT+0x22c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_DMA_Start_IT+0xee>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a51      	ldr	r2, [pc, #324]	@ (8003f98 <HAL_DMA_Start_IT+0x230>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d108      	bne.n	8003e68 <HAL_DMA_Start_IT+0x100>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e007      	b.n	8003e78 <HAL_DMA_Start_IT+0x110>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 ff40 	bl	8004d04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a34      	ldr	r2, [pc, #208]	@ (8003f5c <HAL_DMA_Start_IT+0x1f4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d04a      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a33      	ldr	r2, [pc, #204]	@ (8003f60 <HAL_DMA_Start_IT+0x1f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d045      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a31      	ldr	r2, [pc, #196]	@ (8003f64 <HAL_DMA_Start_IT+0x1fc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d040      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a30      	ldr	r2, [pc, #192]	@ (8003f68 <HAL_DMA_Start_IT+0x200>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d03b      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f6c <HAL_DMA_Start_IT+0x204>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d036      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2d      	ldr	r2, [pc, #180]	@ (8003f70 <HAL_DMA_Start_IT+0x208>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d031      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f74 <HAL_DMA_Start_IT+0x20c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02c      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2a      	ldr	r2, [pc, #168]	@ (8003f78 <HAL_DMA_Start_IT+0x210>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d027      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a28      	ldr	r2, [pc, #160]	@ (8003f7c <HAL_DMA_Start_IT+0x214>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d022      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a27      	ldr	r2, [pc, #156]	@ (8003f80 <HAL_DMA_Start_IT+0x218>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d01d      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a25      	ldr	r2, [pc, #148]	@ (8003f84 <HAL_DMA_Start_IT+0x21c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d018      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a24      	ldr	r2, [pc, #144]	@ (8003f88 <HAL_DMA_Start_IT+0x220>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a22      	ldr	r2, [pc, #136]	@ (8003f8c <HAL_DMA_Start_IT+0x224>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <HAL_DMA_Start_IT+0x228>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1f      	ldr	r2, [pc, #124]	@ (8003f94 <HAL_DMA_Start_IT+0x22c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_DMA_Start_IT+0x1bc>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f98 <HAL_DMA_Start_IT+0x230>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_DMA_Start_IT+0x1c0>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_DMA_Start_IT+0x1c2>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d036      	beq.n	8003f9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 021e 	bic.w	r2, r3, #30
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0216 	orr.w	r2, r2, #22
 8003f40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03e      	beq.n	8003fc8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0208 	orr.w	r2, r2, #8
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e035      	b.n	8003fc8 <HAL_DMA_Start_IT+0x260>
 8003f5c:	40020010 	.word	0x40020010
 8003f60:	40020028 	.word	0x40020028
 8003f64:	40020040 	.word	0x40020040
 8003f68:	40020058 	.word	0x40020058
 8003f6c:	40020070 	.word	0x40020070
 8003f70:	40020088 	.word	0x40020088
 8003f74:	400200a0 	.word	0x400200a0
 8003f78:	400200b8 	.word	0x400200b8
 8003f7c:	40020410 	.word	0x40020410
 8003f80:	40020428 	.word	0x40020428
 8003f84:	40020440 	.word	0x40020440
 8003f88:	40020458 	.word	0x40020458
 8003f8c:	40020470 	.word	0x40020470
 8003f90:	40020488 	.word	0x40020488
 8003f94:	400204a0 	.word	0x400204a0
 8003f98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 020e 	bic.w	r2, r3, #14
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 020a 	orr.w	r2, r2, #10
 8003fae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0204 	orr.w	r2, r2, #4
 8003fc6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a83      	ldr	r2, [pc, #524]	@ (80041dc <HAL_DMA_Start_IT+0x474>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d072      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a82      	ldr	r2, [pc, #520]	@ (80041e0 <HAL_DMA_Start_IT+0x478>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d06d      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a80      	ldr	r2, [pc, #512]	@ (80041e4 <HAL_DMA_Start_IT+0x47c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d068      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7f      	ldr	r2, [pc, #508]	@ (80041e8 <HAL_DMA_Start_IT+0x480>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d063      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a7d      	ldr	r2, [pc, #500]	@ (80041ec <HAL_DMA_Start_IT+0x484>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d05e      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7c      	ldr	r2, [pc, #496]	@ (80041f0 <HAL_DMA_Start_IT+0x488>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d059      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7a      	ldr	r2, [pc, #488]	@ (80041f4 <HAL_DMA_Start_IT+0x48c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d054      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a79      	ldr	r2, [pc, #484]	@ (80041f8 <HAL_DMA_Start_IT+0x490>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d04f      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a77      	ldr	r2, [pc, #476]	@ (80041fc <HAL_DMA_Start_IT+0x494>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d04a      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a76      	ldr	r2, [pc, #472]	@ (8004200 <HAL_DMA_Start_IT+0x498>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d045      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a74      	ldr	r2, [pc, #464]	@ (8004204 <HAL_DMA_Start_IT+0x49c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d040      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a73      	ldr	r2, [pc, #460]	@ (8004208 <HAL_DMA_Start_IT+0x4a0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d03b      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a71      	ldr	r2, [pc, #452]	@ (800420c <HAL_DMA_Start_IT+0x4a4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d036      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a70      	ldr	r2, [pc, #448]	@ (8004210 <HAL_DMA_Start_IT+0x4a8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d031      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6e      	ldr	r2, [pc, #440]	@ (8004214 <HAL_DMA_Start_IT+0x4ac>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d02c      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6d      	ldr	r2, [pc, #436]	@ (8004218 <HAL_DMA_Start_IT+0x4b0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d027      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6b      	ldr	r2, [pc, #428]	@ (800421c <HAL_DMA_Start_IT+0x4b4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d022      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a6a      	ldr	r2, [pc, #424]	@ (8004220 <HAL_DMA_Start_IT+0x4b8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d01d      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a68      	ldr	r2, [pc, #416]	@ (8004224 <HAL_DMA_Start_IT+0x4bc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d018      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a67      	ldr	r2, [pc, #412]	@ (8004228 <HAL_DMA_Start_IT+0x4c0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a65      	ldr	r2, [pc, #404]	@ (800422c <HAL_DMA_Start_IT+0x4c4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00e      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a64      	ldr	r2, [pc, #400]	@ (8004230 <HAL_DMA_Start_IT+0x4c8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a62      	ldr	r2, [pc, #392]	@ (8004234 <HAL_DMA_Start_IT+0x4cc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_DMA_Start_IT+0x350>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a61      	ldr	r2, [pc, #388]	@ (8004238 <HAL_DMA_Start_IT+0x4d0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_DMA_Start_IT+0x354>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_DMA_Start_IT+0x356>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01a      	beq.n	80040f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a37      	ldr	r2, [pc, #220]	@ (80041dc <HAL_DMA_Start_IT+0x474>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d04a      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a36      	ldr	r2, [pc, #216]	@ (80041e0 <HAL_DMA_Start_IT+0x478>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d045      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a34      	ldr	r2, [pc, #208]	@ (80041e4 <HAL_DMA_Start_IT+0x47c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d040      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a33      	ldr	r2, [pc, #204]	@ (80041e8 <HAL_DMA_Start_IT+0x480>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d03b      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a31      	ldr	r2, [pc, #196]	@ (80041ec <HAL_DMA_Start_IT+0x484>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d036      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a30      	ldr	r2, [pc, #192]	@ (80041f0 <HAL_DMA_Start_IT+0x488>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d031      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2e      	ldr	r2, [pc, #184]	@ (80041f4 <HAL_DMA_Start_IT+0x48c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d02c      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2d      	ldr	r2, [pc, #180]	@ (80041f8 <HAL_DMA_Start_IT+0x490>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d027      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a2b      	ldr	r2, [pc, #172]	@ (80041fc <HAL_DMA_Start_IT+0x494>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d022      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2a      	ldr	r2, [pc, #168]	@ (8004200 <HAL_DMA_Start_IT+0x498>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d01d      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a28      	ldr	r2, [pc, #160]	@ (8004204 <HAL_DMA_Start_IT+0x49c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d018      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a27      	ldr	r2, [pc, #156]	@ (8004208 <HAL_DMA_Start_IT+0x4a0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a25      	ldr	r2, [pc, #148]	@ (800420c <HAL_DMA_Start_IT+0x4a4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00e      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a24      	ldr	r2, [pc, #144]	@ (8004210 <HAL_DMA_Start_IT+0x4a8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a22      	ldr	r2, [pc, #136]	@ (8004214 <HAL_DMA_Start_IT+0x4ac>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_DMA_Start_IT+0x430>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a21      	ldr	r2, [pc, #132]	@ (8004218 <HAL_DMA_Start_IT+0x4b0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d108      	bne.n	80041aa <HAL_DMA_Start_IT+0x442>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e012      	b.n	80041d0 <HAL_DMA_Start_IT+0x468>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e009      	b.n	80041d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40020010 	.word	0x40020010
 80041e0:	40020028 	.word	0x40020028
 80041e4:	40020040 	.word	0x40020040
 80041e8:	40020058 	.word	0x40020058
 80041ec:	40020070 	.word	0x40020070
 80041f0:	40020088 	.word	0x40020088
 80041f4:	400200a0 	.word	0x400200a0
 80041f8:	400200b8 	.word	0x400200b8
 80041fc:	40020410 	.word	0x40020410
 8004200:	40020428 	.word	0x40020428
 8004204:	40020440 	.word	0x40020440
 8004208:	40020458 	.word	0x40020458
 800420c:	40020470 	.word	0x40020470
 8004210:	40020488 	.word	0x40020488
 8004214:	400204a0 	.word	0x400204a0
 8004218:	400204b8 	.word	0x400204b8
 800421c:	58025408 	.word	0x58025408
 8004220:	5802541c 	.word	0x5802541c
 8004224:	58025430 	.word	0x58025430
 8004228:	58025444 	.word	0x58025444
 800422c:	58025458 	.word	0x58025458
 8004230:	5802546c 	.word	0x5802546c
 8004234:	58025480 	.word	0x58025480
 8004238:	58025494 	.word	0x58025494

0800423c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004244:	f7fd fe22 	bl	8001e8c <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e2dc      	b.n	800480e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d008      	beq.n	8004272 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2280      	movs	r2, #128	@ 0x80
 8004264:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e2cd      	b.n	800480e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a76      	ldr	r2, [pc, #472]	@ (8004450 <HAL_DMA_Abort+0x214>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d04a      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a74      	ldr	r2, [pc, #464]	@ (8004454 <HAL_DMA_Abort+0x218>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d045      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a73      	ldr	r2, [pc, #460]	@ (8004458 <HAL_DMA_Abort+0x21c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d040      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a71      	ldr	r2, [pc, #452]	@ (800445c <HAL_DMA_Abort+0x220>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d03b      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a70      	ldr	r2, [pc, #448]	@ (8004460 <HAL_DMA_Abort+0x224>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d036      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004464 <HAL_DMA_Abort+0x228>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d031      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004468 <HAL_DMA_Abort+0x22c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d02c      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6b      	ldr	r2, [pc, #428]	@ (800446c <HAL_DMA_Abort+0x230>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d027      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6a      	ldr	r2, [pc, #424]	@ (8004470 <HAL_DMA_Abort+0x234>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d022      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a68      	ldr	r2, [pc, #416]	@ (8004474 <HAL_DMA_Abort+0x238>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01d      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a67      	ldr	r2, [pc, #412]	@ (8004478 <HAL_DMA_Abort+0x23c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a65      	ldr	r2, [pc, #404]	@ (800447c <HAL_DMA_Abort+0x240>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a64      	ldr	r2, [pc, #400]	@ (8004480 <HAL_DMA_Abort+0x244>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a62      	ldr	r2, [pc, #392]	@ (8004484 <HAL_DMA_Abort+0x248>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a61      	ldr	r2, [pc, #388]	@ (8004488 <HAL_DMA_Abort+0x24c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_DMA_Abort+0xd6>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a5f      	ldr	r2, [pc, #380]	@ (800448c <HAL_DMA_Abort+0x250>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <HAL_DMA_Abort+0xda>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_DMA_Abort+0xdc>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 021e 	bic.w	r2, r2, #30
 800432a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800433a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e00a      	b.n	800435a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 020e 	bic.w	r2, r2, #14
 8004352:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3c      	ldr	r2, [pc, #240]	@ (8004450 <HAL_DMA_Abort+0x214>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d072      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3a      	ldr	r2, [pc, #232]	@ (8004454 <HAL_DMA_Abort+0x218>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d06d      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a39      	ldr	r2, [pc, #228]	@ (8004458 <HAL_DMA_Abort+0x21c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d068      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a37      	ldr	r2, [pc, #220]	@ (800445c <HAL_DMA_Abort+0x220>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d063      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a36      	ldr	r2, [pc, #216]	@ (8004460 <HAL_DMA_Abort+0x224>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d05e      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a34      	ldr	r2, [pc, #208]	@ (8004464 <HAL_DMA_Abort+0x228>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d059      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a33      	ldr	r2, [pc, #204]	@ (8004468 <HAL_DMA_Abort+0x22c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d054      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a31      	ldr	r2, [pc, #196]	@ (800446c <HAL_DMA_Abort+0x230>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d04f      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a30      	ldr	r2, [pc, #192]	@ (8004470 <HAL_DMA_Abort+0x234>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d04a      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004474 <HAL_DMA_Abort+0x238>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d045      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004478 <HAL_DMA_Abort+0x23c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d040      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2b      	ldr	r2, [pc, #172]	@ (800447c <HAL_DMA_Abort+0x240>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d03b      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004480 <HAL_DMA_Abort+0x244>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d036      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a28      	ldr	r2, [pc, #160]	@ (8004484 <HAL_DMA_Abort+0x248>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d031      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a27      	ldr	r2, [pc, #156]	@ (8004488 <HAL_DMA_Abort+0x24c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d02c      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a25      	ldr	r2, [pc, #148]	@ (800448c <HAL_DMA_Abort+0x250>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d027      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a24      	ldr	r2, [pc, #144]	@ (8004490 <HAL_DMA_Abort+0x254>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a22      	ldr	r2, [pc, #136]	@ (8004494 <HAL_DMA_Abort+0x258>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01d      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a21      	ldr	r2, [pc, #132]	@ (8004498 <HAL_DMA_Abort+0x25c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d018      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1f      	ldr	r2, [pc, #124]	@ (800449c <HAL_DMA_Abort+0x260>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1e      	ldr	r2, [pc, #120]	@ (80044a0 <HAL_DMA_Abort+0x264>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <HAL_DMA_Abort+0x268>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1b      	ldr	r2, [pc, #108]	@ (80044a8 <HAL_DMA_Abort+0x26c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_DMA_Abort+0x20e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	@ (80044ac <HAL_DMA_Abort+0x270>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d132      	bne.n	80044b0 <HAL_DMA_Abort+0x274>
 800444a:	2301      	movs	r3, #1
 800444c:	e031      	b.n	80044b2 <HAL_DMA_Abort+0x276>
 800444e:	bf00      	nop
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8
 8004490:	58025408 	.word	0x58025408
 8004494:	5802541c 	.word	0x5802541c
 8004498:	58025430 	.word	0x58025430
 800449c:	58025444 	.word	0x58025444
 80044a0:	58025458 	.word	0x58025458
 80044a4:	5802546c 	.word	0x5802546c
 80044a8:	58025480 	.word	0x58025480
 80044ac:	58025494 	.word	0x58025494
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004680 <HAL_DMA_Abort+0x444>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d04a      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004684 <HAL_DMA_Abort+0x448>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d045      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a6a      	ldr	r2, [pc, #424]	@ (8004688 <HAL_DMA_Abort+0x44c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d040      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a68      	ldr	r2, [pc, #416]	@ (800468c <HAL_DMA_Abort+0x450>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d03b      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a67      	ldr	r2, [pc, #412]	@ (8004690 <HAL_DMA_Abort+0x454>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d036      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a65      	ldr	r2, [pc, #404]	@ (8004694 <HAL_DMA_Abort+0x458>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d031      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a64      	ldr	r2, [pc, #400]	@ (8004698 <HAL_DMA_Abort+0x45c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d02c      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a62      	ldr	r2, [pc, #392]	@ (800469c <HAL_DMA_Abort+0x460>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d027      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a61      	ldr	r2, [pc, #388]	@ (80046a0 <HAL_DMA_Abort+0x464>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d022      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a5f      	ldr	r2, [pc, #380]	@ (80046a4 <HAL_DMA_Abort+0x468>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01d      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5e      	ldr	r2, [pc, #376]	@ (80046a8 <HAL_DMA_Abort+0x46c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d018      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a5c      	ldr	r2, [pc, #368]	@ (80046ac <HAL_DMA_Abort+0x470>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a5b      	ldr	r2, [pc, #364]	@ (80046b0 <HAL_DMA_Abort+0x474>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00e      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a59      	ldr	r2, [pc, #356]	@ (80046b4 <HAL_DMA_Abort+0x478>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a58      	ldr	r2, [pc, #352]	@ (80046b8 <HAL_DMA_Abort+0x47c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_DMA_Abort+0x32a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a56      	ldr	r2, [pc, #344]	@ (80046bc <HAL_DMA_Abort+0x480>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <HAL_DMA_Abort+0x33c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e007      	b.n	8004588 <HAL_DMA_Abort+0x34c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004588:	e013      	b.n	80045b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800458a:	f7fd fc7f 	bl	8001e8c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b05      	cmp	r3, #5
 8004596:	d90c      	bls.n	80045b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2203      	movs	r2, #3
 80045a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e12d      	b.n	800480e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004680 <HAL_DMA_Abort+0x444>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d04a      	beq.n	800465e <HAL_DMA_Abort+0x422>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004684 <HAL_DMA_Abort+0x448>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d045      	beq.n	800465e <HAL_DMA_Abort+0x422>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004688 <HAL_DMA_Abort+0x44c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d040      	beq.n	800465e <HAL_DMA_Abort+0x422>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2a      	ldr	r2, [pc, #168]	@ (800468c <HAL_DMA_Abort+0x450>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_DMA_Abort+0x422>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a29      	ldr	r2, [pc, #164]	@ (8004690 <HAL_DMA_Abort+0x454>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d036      	beq.n	800465e <HAL_DMA_Abort+0x422>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a27      	ldr	r2, [pc, #156]	@ (8004694 <HAL_DMA_Abort+0x458>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_DMA_Abort+0x422>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a26      	ldr	r2, [pc, #152]	@ (8004698 <HAL_DMA_Abort+0x45c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d02c      	beq.n	800465e <HAL_DMA_Abort+0x422>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a24      	ldr	r2, [pc, #144]	@ (800469c <HAL_DMA_Abort+0x460>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d027      	beq.n	800465e <HAL_DMA_Abort+0x422>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a23      	ldr	r2, [pc, #140]	@ (80046a0 <HAL_DMA_Abort+0x464>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_DMA_Abort+0x422>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <HAL_DMA_Abort+0x468>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_DMA_Abort+0x422>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a20      	ldr	r2, [pc, #128]	@ (80046a8 <HAL_DMA_Abort+0x46c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_DMA_Abort+0x422>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1e      	ldr	r2, [pc, #120]	@ (80046ac <HAL_DMA_Abort+0x470>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_DMA_Abort+0x422>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1d      	ldr	r2, [pc, #116]	@ (80046b0 <HAL_DMA_Abort+0x474>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_DMA_Abort+0x422>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1b      	ldr	r2, [pc, #108]	@ (80046b4 <HAL_DMA_Abort+0x478>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_DMA_Abort+0x422>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1a      	ldr	r2, [pc, #104]	@ (80046b8 <HAL_DMA_Abort+0x47c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_DMA_Abort+0x422>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a18      	ldr	r2, [pc, #96]	@ (80046bc <HAL_DMA_Abort+0x480>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <HAL_DMA_Abort+0x426>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_DMA_Abort+0x428>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02b      	beq.n	80046c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	223f      	movs	r2, #63	@ 0x3f
 8004678:	409a      	lsls	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	e02a      	b.n	80046d6 <HAL_DMA_Abort+0x49a>
 8004680:	40020010 	.word	0x40020010
 8004684:	40020028 	.word	0x40020028
 8004688:	40020040 	.word	0x40020040
 800468c:	40020058 	.word	0x40020058
 8004690:	40020070 	.word	0x40020070
 8004694:	40020088 	.word	0x40020088
 8004698:	400200a0 	.word	0x400200a0
 800469c:	400200b8 	.word	0x400200b8
 80046a0:	40020410 	.word	0x40020410
 80046a4:	40020428 	.word	0x40020428
 80046a8:	40020440 	.word	0x40020440
 80046ac:	40020458 	.word	0x40020458
 80046b0:	40020470 	.word	0x40020470
 80046b4:	40020488 	.word	0x40020488
 80046b8:	400204a0 	.word	0x400204a0
 80046bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2201      	movs	r2, #1
 80046d0:	409a      	lsls	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4f      	ldr	r2, [pc, #316]	@ (8004818 <HAL_DMA_Abort+0x5dc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d072      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a4d      	ldr	r2, [pc, #308]	@ (800481c <HAL_DMA_Abort+0x5e0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d06d      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004820 <HAL_DMA_Abort+0x5e4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d068      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004824 <HAL_DMA_Abort+0x5e8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d063      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a49      	ldr	r2, [pc, #292]	@ (8004828 <HAL_DMA_Abort+0x5ec>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d05e      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a47      	ldr	r2, [pc, #284]	@ (800482c <HAL_DMA_Abort+0x5f0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d059      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a46      	ldr	r2, [pc, #280]	@ (8004830 <HAL_DMA_Abort+0x5f4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d054      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a44      	ldr	r2, [pc, #272]	@ (8004834 <HAL_DMA_Abort+0x5f8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d04f      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a43      	ldr	r2, [pc, #268]	@ (8004838 <HAL_DMA_Abort+0x5fc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d04a      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a41      	ldr	r2, [pc, #260]	@ (800483c <HAL_DMA_Abort+0x600>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d045      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a40      	ldr	r2, [pc, #256]	@ (8004840 <HAL_DMA_Abort+0x604>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d040      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a3e      	ldr	r2, [pc, #248]	@ (8004844 <HAL_DMA_Abort+0x608>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d03b      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3d      	ldr	r2, [pc, #244]	@ (8004848 <HAL_DMA_Abort+0x60c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d036      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a3b      	ldr	r2, [pc, #236]	@ (800484c <HAL_DMA_Abort+0x610>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d031      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a3a      	ldr	r2, [pc, #232]	@ (8004850 <HAL_DMA_Abort+0x614>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d02c      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a38      	ldr	r2, [pc, #224]	@ (8004854 <HAL_DMA_Abort+0x618>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d027      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a37      	ldr	r2, [pc, #220]	@ (8004858 <HAL_DMA_Abort+0x61c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d022      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a35      	ldr	r2, [pc, #212]	@ (800485c <HAL_DMA_Abort+0x620>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01d      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a34      	ldr	r2, [pc, #208]	@ (8004860 <HAL_DMA_Abort+0x624>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d018      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a32      	ldr	r2, [pc, #200]	@ (8004864 <HAL_DMA_Abort+0x628>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a31      	ldr	r2, [pc, #196]	@ (8004868 <HAL_DMA_Abort+0x62c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2f      	ldr	r2, [pc, #188]	@ (800486c <HAL_DMA_Abort+0x630>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004870 <HAL_DMA_Abort+0x634>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_DMA_Abort+0x58a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004874 <HAL_DMA_Abort+0x638>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_DMA_Abort+0x58e>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_DMA_Abort+0x590>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80047d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00c      	beq.n	80047fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80047fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40020010 	.word	0x40020010
 800481c:	40020028 	.word	0x40020028
 8004820:	40020040 	.word	0x40020040
 8004824:	40020058 	.word	0x40020058
 8004828:	40020070 	.word	0x40020070
 800482c:	40020088 	.word	0x40020088
 8004830:	400200a0 	.word	0x400200a0
 8004834:	400200b8 	.word	0x400200b8
 8004838:	40020410 	.word	0x40020410
 800483c:	40020428 	.word	0x40020428
 8004840:	40020440 	.word	0x40020440
 8004844:	40020458 	.word	0x40020458
 8004848:	40020470 	.word	0x40020470
 800484c:	40020488 	.word	0x40020488
 8004850:	400204a0 	.word	0x400204a0
 8004854:	400204b8 	.word	0x400204b8
 8004858:	58025408 	.word	0x58025408
 800485c:	5802541c 	.word	0x5802541c
 8004860:	58025430 	.word	0x58025430
 8004864:	58025444 	.word	0x58025444
 8004868:	58025458 	.word	0x58025458
 800486c:	5802546c 	.word	0x5802546c
 8004870:	58025480 	.word	0x58025480
 8004874:	58025494 	.word	0x58025494

08004878 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e237      	b.n	8004cfa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d004      	beq.n	80048a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2280      	movs	r2, #128	@ 0x80
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e22c      	b.n	8004cfa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004a18 <HAL_DMA_Abort_IT+0x1a0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04a      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a5b      	ldr	r2, [pc, #364]	@ (8004a1c <HAL_DMA_Abort_IT+0x1a4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d045      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a59      	ldr	r2, [pc, #356]	@ (8004a20 <HAL_DMA_Abort_IT+0x1a8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d040      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a58      	ldr	r2, [pc, #352]	@ (8004a24 <HAL_DMA_Abort_IT+0x1ac>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d03b      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a56      	ldr	r2, [pc, #344]	@ (8004a28 <HAL_DMA_Abort_IT+0x1b0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d036      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a55      	ldr	r2, [pc, #340]	@ (8004a2c <HAL_DMA_Abort_IT+0x1b4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d031      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a53      	ldr	r2, [pc, #332]	@ (8004a30 <HAL_DMA_Abort_IT+0x1b8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02c      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a52      	ldr	r2, [pc, #328]	@ (8004a34 <HAL_DMA_Abort_IT+0x1bc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d027      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a50      	ldr	r2, [pc, #320]	@ (8004a38 <HAL_DMA_Abort_IT+0x1c0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d022      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4f      	ldr	r2, [pc, #316]	@ (8004a3c <HAL_DMA_Abort_IT+0x1c4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d01d      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4d      	ldr	r2, [pc, #308]	@ (8004a40 <HAL_DMA_Abort_IT+0x1c8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a4c      	ldr	r2, [pc, #304]	@ (8004a44 <HAL_DMA_Abort_IT+0x1cc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a48 <HAL_DMA_Abort_IT+0x1d0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a49      	ldr	r2, [pc, #292]	@ (8004a4c <HAL_DMA_Abort_IT+0x1d4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a47      	ldr	r2, [pc, #284]	@ (8004a50 <HAL_DMA_Abort_IT+0x1d8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_DMA_Abort_IT+0xc8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a46      	ldr	r2, [pc, #280]	@ (8004a54 <HAL_DMA_Abort_IT+0x1dc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_DMA_Abort_IT+0xcc>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_DMA_Abort_IT+0xce>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8086 	beq.w	8004a58 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2204      	movs	r2, #4
 8004950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2f      	ldr	r2, [pc, #188]	@ (8004a18 <HAL_DMA_Abort_IT+0x1a0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04a      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2e      	ldr	r2, [pc, #184]	@ (8004a1c <HAL_DMA_Abort_IT+0x1a4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d045      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a20 <HAL_DMA_Abort_IT+0x1a8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d040      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2b      	ldr	r2, [pc, #172]	@ (8004a24 <HAL_DMA_Abort_IT+0x1ac>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d03b      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a29      	ldr	r2, [pc, #164]	@ (8004a28 <HAL_DMA_Abort_IT+0x1b0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d036      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a28      	ldr	r2, [pc, #160]	@ (8004a2c <HAL_DMA_Abort_IT+0x1b4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d031      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a26      	ldr	r2, [pc, #152]	@ (8004a30 <HAL_DMA_Abort_IT+0x1b8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02c      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a25      	ldr	r2, [pc, #148]	@ (8004a34 <HAL_DMA_Abort_IT+0x1bc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d027      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a23      	ldr	r2, [pc, #140]	@ (8004a38 <HAL_DMA_Abort_IT+0x1c0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d022      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a22      	ldr	r2, [pc, #136]	@ (8004a3c <HAL_DMA_Abort_IT+0x1c4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d01d      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a20      	ldr	r2, [pc, #128]	@ (8004a40 <HAL_DMA_Abort_IT+0x1c8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d018      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a44 <HAL_DMA_Abort_IT+0x1cc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a48 <HAL_DMA_Abort_IT+0x1d0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1c      	ldr	r2, [pc, #112]	@ (8004a4c <HAL_DMA_Abort_IT+0x1d4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a50 <HAL_DMA_Abort_IT+0x1d8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_DMA_Abort_IT+0x17c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a19      	ldr	r2, [pc, #100]	@ (8004a54 <HAL_DMA_Abort_IT+0x1dc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d108      	bne.n	8004a06 <HAL_DMA_Abort_IT+0x18e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e178      	b.n	8004cf8 <HAL_DMA_Abort_IT+0x480>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0201 	bic.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e16f      	b.n	8004cf8 <HAL_DMA_Abort_IT+0x480>
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	40020028 	.word	0x40020028
 8004a20:	40020040 	.word	0x40020040
 8004a24:	40020058 	.word	0x40020058
 8004a28:	40020070 	.word	0x40020070
 8004a2c:	40020088 	.word	0x40020088
 8004a30:	400200a0 	.word	0x400200a0
 8004a34:	400200b8 	.word	0x400200b8
 8004a38:	40020410 	.word	0x40020410
 8004a3c:	40020428 	.word	0x40020428
 8004a40:	40020440 	.word	0x40020440
 8004a44:	40020458 	.word	0x40020458
 8004a48:	40020470 	.word	0x40020470
 8004a4c:	40020488 	.word	0x40020488
 8004a50:	400204a0 	.word	0x400204a0
 8004a54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 020e 	bic.w	r2, r2, #14
 8004a66:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a6c      	ldr	r2, [pc, #432]	@ (8004c20 <HAL_DMA_Abort_IT+0x3a8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d04a      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a6b      	ldr	r2, [pc, #428]	@ (8004c24 <HAL_DMA_Abort_IT+0x3ac>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d045      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a69      	ldr	r2, [pc, #420]	@ (8004c28 <HAL_DMA_Abort_IT+0x3b0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d040      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a68      	ldr	r2, [pc, #416]	@ (8004c2c <HAL_DMA_Abort_IT+0x3b4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d03b      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a66      	ldr	r2, [pc, #408]	@ (8004c30 <HAL_DMA_Abort_IT+0x3b8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d036      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a65      	ldr	r2, [pc, #404]	@ (8004c34 <HAL_DMA_Abort_IT+0x3bc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d031      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a63      	ldr	r2, [pc, #396]	@ (8004c38 <HAL_DMA_Abort_IT+0x3c0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d02c      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a62      	ldr	r2, [pc, #392]	@ (8004c3c <HAL_DMA_Abort_IT+0x3c4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d027      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a60      	ldr	r2, [pc, #384]	@ (8004c40 <HAL_DMA_Abort_IT+0x3c8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a5f      	ldr	r2, [pc, #380]	@ (8004c44 <HAL_DMA_Abort_IT+0x3cc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01d      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c48 <HAL_DMA_Abort_IT+0x3d0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a5c      	ldr	r2, [pc, #368]	@ (8004c4c <HAL_DMA_Abort_IT+0x3d4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8004c50 <HAL_DMA_Abort_IT+0x3d8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a59      	ldr	r2, [pc, #356]	@ (8004c54 <HAL_DMA_Abort_IT+0x3dc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a57      	ldr	r2, [pc, #348]	@ (8004c58 <HAL_DMA_Abort_IT+0x3e0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_DMA_Abort_IT+0x290>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a56      	ldr	r2, [pc, #344]	@ (8004c5c <HAL_DMA_Abort_IT+0x3e4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <HAL_DMA_Abort_IT+0x2a2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e007      	b.n	8004b2a <HAL_DMA_Abort_IT+0x2b2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c20 <HAL_DMA_Abort_IT+0x3a8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d072      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a3a      	ldr	r2, [pc, #232]	@ (8004c24 <HAL_DMA_Abort_IT+0x3ac>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d06d      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a39      	ldr	r2, [pc, #228]	@ (8004c28 <HAL_DMA_Abort_IT+0x3b0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d068      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a37      	ldr	r2, [pc, #220]	@ (8004c2c <HAL_DMA_Abort_IT+0x3b4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d063      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a36      	ldr	r2, [pc, #216]	@ (8004c30 <HAL_DMA_Abort_IT+0x3b8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d05e      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a34      	ldr	r2, [pc, #208]	@ (8004c34 <HAL_DMA_Abort_IT+0x3bc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d059      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a33      	ldr	r2, [pc, #204]	@ (8004c38 <HAL_DMA_Abort_IT+0x3c0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d054      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a31      	ldr	r2, [pc, #196]	@ (8004c3c <HAL_DMA_Abort_IT+0x3c4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d04f      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a30      	ldr	r2, [pc, #192]	@ (8004c40 <HAL_DMA_Abort_IT+0x3c8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d04a      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2e      	ldr	r2, [pc, #184]	@ (8004c44 <HAL_DMA_Abort_IT+0x3cc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d045      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2d      	ldr	r2, [pc, #180]	@ (8004c48 <HAL_DMA_Abort_IT+0x3d0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d040      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c4c <HAL_DMA_Abort_IT+0x3d4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d03b      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8004c50 <HAL_DMA_Abort_IT+0x3d8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d036      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a28      	ldr	r2, [pc, #160]	@ (8004c54 <HAL_DMA_Abort_IT+0x3dc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d031      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a27      	ldr	r2, [pc, #156]	@ (8004c58 <HAL_DMA_Abort_IT+0x3e0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d02c      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a25      	ldr	r2, [pc, #148]	@ (8004c5c <HAL_DMA_Abort_IT+0x3e4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d027      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a24      	ldr	r2, [pc, #144]	@ (8004c60 <HAL_DMA_Abort_IT+0x3e8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d022      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a22      	ldr	r2, [pc, #136]	@ (8004c64 <HAL_DMA_Abort_IT+0x3ec>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01d      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a21      	ldr	r2, [pc, #132]	@ (8004c68 <HAL_DMA_Abort_IT+0x3f0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d018      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1f      	ldr	r2, [pc, #124]	@ (8004c6c <HAL_DMA_Abort_IT+0x3f4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c70 <HAL_DMA_Abort_IT+0x3f8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1c      	ldr	r2, [pc, #112]	@ (8004c74 <HAL_DMA_Abort_IT+0x3fc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004c78 <HAL_DMA_Abort_IT+0x400>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x3a2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a19      	ldr	r2, [pc, #100]	@ (8004c7c <HAL_DMA_Abort_IT+0x404>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d132      	bne.n	8004c80 <HAL_DMA_Abort_IT+0x408>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e031      	b.n	8004c82 <HAL_DMA_Abort_IT+0x40a>
 8004c1e:	bf00      	nop
 8004c20:	40020010 	.word	0x40020010
 8004c24:	40020028 	.word	0x40020028
 8004c28:	40020040 	.word	0x40020040
 8004c2c:	40020058 	.word	0x40020058
 8004c30:	40020070 	.word	0x40020070
 8004c34:	40020088 	.word	0x40020088
 8004c38:	400200a0 	.word	0x400200a0
 8004c3c:	400200b8 	.word	0x400200b8
 8004c40:	40020410 	.word	0x40020410
 8004c44:	40020428 	.word	0x40020428
 8004c48:	40020440 	.word	0x40020440
 8004c4c:	40020458 	.word	0x40020458
 8004c50:	40020470 	.word	0x40020470
 8004c54:	40020488 	.word	0x40020488
 8004c58:	400204a0 	.word	0x400204a0
 8004c5c:	400204b8 	.word	0x400204b8
 8004c60:	58025408 	.word	0x58025408
 8004c64:	5802541c 	.word	0x5802541c
 8004c68:	58025430 	.word	0x58025430
 8004c6c:	58025444 	.word	0x58025444
 8004c70:	58025458 	.word	0x58025458
 8004c74:	5802546c 	.word	0x5802546c
 8004c78:	58025480 	.word	0x58025480
 8004c7c:	58025494 	.word	0x58025494
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d028      	beq.n	8004cd8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ccc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cd6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop

08004d04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7f      	ldr	r2, [pc, #508]	@ (8004f20 <DMA_SetConfig+0x21c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d072      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a7d      	ldr	r2, [pc, #500]	@ (8004f24 <DMA_SetConfig+0x220>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d06d      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7c      	ldr	r2, [pc, #496]	@ (8004f28 <DMA_SetConfig+0x224>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d068      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a7a      	ldr	r2, [pc, #488]	@ (8004f2c <DMA_SetConfig+0x228>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d063      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a79      	ldr	r2, [pc, #484]	@ (8004f30 <DMA_SetConfig+0x22c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d05e      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a77      	ldr	r2, [pc, #476]	@ (8004f34 <DMA_SetConfig+0x230>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d059      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a76      	ldr	r2, [pc, #472]	@ (8004f38 <DMA_SetConfig+0x234>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d054      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a74      	ldr	r2, [pc, #464]	@ (8004f3c <DMA_SetConfig+0x238>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d04f      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a73      	ldr	r2, [pc, #460]	@ (8004f40 <DMA_SetConfig+0x23c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d04a      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a71      	ldr	r2, [pc, #452]	@ (8004f44 <DMA_SetConfig+0x240>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d045      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a70      	ldr	r2, [pc, #448]	@ (8004f48 <DMA_SetConfig+0x244>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d040      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a6e      	ldr	r2, [pc, #440]	@ (8004f4c <DMA_SetConfig+0x248>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d03b      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a6d      	ldr	r2, [pc, #436]	@ (8004f50 <DMA_SetConfig+0x24c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d036      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a6b      	ldr	r2, [pc, #428]	@ (8004f54 <DMA_SetConfig+0x250>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a6a      	ldr	r2, [pc, #424]	@ (8004f58 <DMA_SetConfig+0x254>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02c      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a68      	ldr	r2, [pc, #416]	@ (8004f5c <DMA_SetConfig+0x258>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a67      	ldr	r2, [pc, #412]	@ (8004f60 <DMA_SetConfig+0x25c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a65      	ldr	r2, [pc, #404]	@ (8004f64 <DMA_SetConfig+0x260>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a64      	ldr	r2, [pc, #400]	@ (8004f68 <DMA_SetConfig+0x264>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a62      	ldr	r2, [pc, #392]	@ (8004f6c <DMA_SetConfig+0x268>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a61      	ldr	r2, [pc, #388]	@ (8004f70 <DMA_SetConfig+0x26c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5f      	ldr	r2, [pc, #380]	@ (8004f74 <DMA_SetConfig+0x270>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8004f78 <DMA_SetConfig+0x274>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <DMA_SetConfig+0x10a>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5c      	ldr	r2, [pc, #368]	@ (8004f7c <DMA_SetConfig+0x278>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <DMA_SetConfig+0x10e>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <DMA_SetConfig+0x110>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a39      	ldr	r2, [pc, #228]	@ (8004f20 <DMA_SetConfig+0x21c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d04a      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a38      	ldr	r2, [pc, #224]	@ (8004f24 <DMA_SetConfig+0x220>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d045      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a36      	ldr	r2, [pc, #216]	@ (8004f28 <DMA_SetConfig+0x224>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d040      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a35      	ldr	r2, [pc, #212]	@ (8004f2c <DMA_SetConfig+0x228>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d03b      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a33      	ldr	r2, [pc, #204]	@ (8004f30 <DMA_SetConfig+0x22c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d036      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a32      	ldr	r2, [pc, #200]	@ (8004f34 <DMA_SetConfig+0x230>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d031      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a30      	ldr	r2, [pc, #192]	@ (8004f38 <DMA_SetConfig+0x234>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d02c      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f3c <DMA_SetConfig+0x238>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d027      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2d      	ldr	r2, [pc, #180]	@ (8004f40 <DMA_SetConfig+0x23c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d022      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	@ (8004f44 <DMA_SetConfig+0x240>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d01d      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004f48 <DMA_SetConfig+0x244>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d018      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a29      	ldr	r2, [pc, #164]	@ (8004f4c <DMA_SetConfig+0x248>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <DMA_SetConfig+0x24c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00e      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a26      	ldr	r2, [pc, #152]	@ (8004f54 <DMA_SetConfig+0x250>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a24      	ldr	r2, [pc, #144]	@ (8004f58 <DMA_SetConfig+0x254>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <DMA_SetConfig+0x1d0>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a23      	ldr	r2, [pc, #140]	@ (8004f5c <DMA_SetConfig+0x258>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <DMA_SetConfig+0x1d4>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <DMA_SetConfig+0x1d6>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d059      	beq.n	8004f92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	223f      	movs	r2, #63	@ 0x3f
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004efc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d138      	bne.n	8004f80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f1e:	e086      	b.n	800502e <DMA_SetConfig+0x32a>
 8004f20:	40020010 	.word	0x40020010
 8004f24:	40020028 	.word	0x40020028
 8004f28:	40020040 	.word	0x40020040
 8004f2c:	40020058 	.word	0x40020058
 8004f30:	40020070 	.word	0x40020070
 8004f34:	40020088 	.word	0x40020088
 8004f38:	400200a0 	.word	0x400200a0
 8004f3c:	400200b8 	.word	0x400200b8
 8004f40:	40020410 	.word	0x40020410
 8004f44:	40020428 	.word	0x40020428
 8004f48:	40020440 	.word	0x40020440
 8004f4c:	40020458 	.word	0x40020458
 8004f50:	40020470 	.word	0x40020470
 8004f54:	40020488 	.word	0x40020488
 8004f58:	400204a0 	.word	0x400204a0
 8004f5c:	400204b8 	.word	0x400204b8
 8004f60:	58025408 	.word	0x58025408
 8004f64:	5802541c 	.word	0x5802541c
 8004f68:	58025430 	.word	0x58025430
 8004f6c:	58025444 	.word	0x58025444
 8004f70:	58025458 	.word	0x58025458
 8004f74:	5802546c 	.word	0x5802546c
 8004f78:	58025480 	.word	0x58025480
 8004f7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
}
 8004f90:	e04d      	b.n	800502e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a29      	ldr	r2, [pc, #164]	@ (800503c <DMA_SetConfig+0x338>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <DMA_SetConfig+0x2de>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a27      	ldr	r2, [pc, #156]	@ (8005040 <DMA_SetConfig+0x33c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01d      	beq.n	8004fe2 <DMA_SetConfig+0x2de>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a26      	ldr	r2, [pc, #152]	@ (8005044 <DMA_SetConfig+0x340>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d018      	beq.n	8004fe2 <DMA_SetConfig+0x2de>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a24      	ldr	r2, [pc, #144]	@ (8005048 <DMA_SetConfig+0x344>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <DMA_SetConfig+0x2de>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a23      	ldr	r2, [pc, #140]	@ (800504c <DMA_SetConfig+0x348>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <DMA_SetConfig+0x2de>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <DMA_SetConfig+0x34c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <DMA_SetConfig+0x2de>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <DMA_SetConfig+0x350>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <DMA_SetConfig+0x2de>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8005058 <DMA_SetConfig+0x354>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <DMA_SetConfig+0x2e2>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <DMA_SetConfig+0x2e4>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b40      	cmp	r3, #64	@ 0x40
 800500a:	d108      	bne.n	800501e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	60da      	str	r2, [r3, #12]
}
 800501c:	e007      	b.n	800502e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	58025408 	.word	0x58025408
 8005040:	5802541c 	.word	0x5802541c
 8005044:	58025430 	.word	0x58025430
 8005048:	58025444 	.word	0x58025444
 800504c:	58025458 	.word	0x58025458
 8005050:	5802546c 	.word	0x5802546c
 8005054:	58025480 	.word	0x58025480
 8005058:	58025494 	.word	0x58025494

0800505c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a42      	ldr	r2, [pc, #264]	@ (8005174 <DMA_CalcBaseAndBitshift+0x118>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d04a      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a41      	ldr	r2, [pc, #260]	@ (8005178 <DMA_CalcBaseAndBitshift+0x11c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d045      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a3f      	ldr	r2, [pc, #252]	@ (800517c <DMA_CalcBaseAndBitshift+0x120>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d040      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a3e      	ldr	r2, [pc, #248]	@ (8005180 <DMA_CalcBaseAndBitshift+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d03b      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a3c      	ldr	r2, [pc, #240]	@ (8005184 <DMA_CalcBaseAndBitshift+0x128>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d036      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3b      	ldr	r2, [pc, #236]	@ (8005188 <DMA_CalcBaseAndBitshift+0x12c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d031      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a39      	ldr	r2, [pc, #228]	@ (800518c <DMA_CalcBaseAndBitshift+0x130>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02c      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a38      	ldr	r2, [pc, #224]	@ (8005190 <DMA_CalcBaseAndBitshift+0x134>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d027      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a36      	ldr	r2, [pc, #216]	@ (8005194 <DMA_CalcBaseAndBitshift+0x138>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a35      	ldr	r2, [pc, #212]	@ (8005198 <DMA_CalcBaseAndBitshift+0x13c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01d      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a33      	ldr	r2, [pc, #204]	@ (800519c <DMA_CalcBaseAndBitshift+0x140>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a32      	ldr	r2, [pc, #200]	@ (80051a0 <DMA_CalcBaseAndBitshift+0x144>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a30      	ldr	r2, [pc, #192]	@ (80051a4 <DMA_CalcBaseAndBitshift+0x148>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2f      	ldr	r2, [pc, #188]	@ (80051a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2d      	ldr	r2, [pc, #180]	@ (80051ac <DMA_CalcBaseAndBitshift+0x150>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <DMA_CalcBaseAndBitshift+0xa8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2c      	ldr	r2, [pc, #176]	@ (80051b0 <DMA_CalcBaseAndBitshift+0x154>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d101      	bne.n	8005108 <DMA_CalcBaseAndBitshift+0xac>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <DMA_CalcBaseAndBitshift+0xae>
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d024      	beq.n	8005158 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3b10      	subs	r3, #16
 8005116:	4a27      	ldr	r2, [pc, #156]	@ (80051b4 <DMA_CalcBaseAndBitshift+0x158>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	4a24      	ldr	r2, [pc, #144]	@ (80051b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005128:	5cd3      	ldrb	r3, [r2, r3]
 800512a:	461a      	mov	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d908      	bls.n	8005148 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	4b1f      	ldr	r3, [pc, #124]	@ (80051bc <DMA_CalcBaseAndBitshift+0x160>)
 800513e:	4013      	ands	r3, r2
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	659a      	str	r2, [r3, #88]	@ 0x58
 8005146:	e00d      	b.n	8005164 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	4b1b      	ldr	r3, [pc, #108]	@ (80051bc <DMA_CalcBaseAndBitshift+0x160>)
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6593      	str	r3, [r2, #88]	@ 0x58
 8005156:	e005      	b.n	8005164 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40020010 	.word	0x40020010
 8005178:	40020028 	.word	0x40020028
 800517c:	40020040 	.word	0x40020040
 8005180:	40020058 	.word	0x40020058
 8005184:	40020070 	.word	0x40020070
 8005188:	40020088 	.word	0x40020088
 800518c:	400200a0 	.word	0x400200a0
 8005190:	400200b8 	.word	0x400200b8
 8005194:	40020410 	.word	0x40020410
 8005198:	40020428 	.word	0x40020428
 800519c:	40020440 	.word	0x40020440
 80051a0:	40020458 	.word	0x40020458
 80051a4:	40020470 	.word	0x40020470
 80051a8:	40020488 	.word	0x40020488
 80051ac:	400204a0 	.word	0x400204a0
 80051b0:	400204b8 	.word	0x400204b8
 80051b4:	aaaaaaab 	.word	0xaaaaaaab
 80051b8:	080129d8 	.word	0x080129d8
 80051bc:	fffffc00 	.word	0xfffffc00

080051c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d120      	bne.n	8005216 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d858      	bhi.n	800528e <DMA_CheckFifoParam+0xce>
 80051dc:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <DMA_CheckFifoParam+0x24>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005207 	.word	0x08005207
 80051ec:	080051f5 	.word	0x080051f5
 80051f0:	0800528f 	.word	0x0800528f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d048      	beq.n	8005292 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005204:	e045      	b.n	8005292 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800520e:	d142      	bne.n	8005296 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005214:	e03f      	b.n	8005296 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800521e:	d123      	bne.n	8005268 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	2b03      	cmp	r3, #3
 8005226:	d838      	bhi.n	800529a <DMA_CheckFifoParam+0xda>
 8005228:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <DMA_CheckFifoParam+0x70>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005241 	.word	0x08005241
 8005234:	08005247 	.word	0x08005247
 8005238:	08005241 	.word	0x08005241
 800523c:	08005259 	.word	0x08005259
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
        break;
 8005244:	e030      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d025      	beq.n	800529e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005256:	e022      	b.n	800529e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005260:	d11f      	bne.n	80052a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005266:	e01c      	b.n	80052a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	2b02      	cmp	r3, #2
 800526e:	d902      	bls.n	8005276 <DMA_CheckFifoParam+0xb6>
 8005270:	2b03      	cmp	r3, #3
 8005272:	d003      	beq.n	800527c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005274:	e018      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
        break;
 800527a:	e015      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00e      	beq.n	80052a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
    break;
 800528c:	e00b      	b.n	80052a6 <DMA_CheckFifoParam+0xe6>
        break;
 800528e:	bf00      	nop
 8005290:	e00a      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005292:	bf00      	nop
 8005294:	e008      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005296:	bf00      	nop
 8005298:	e006      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
        break;
 800529a:	bf00      	nop
 800529c:	e004      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
        break;
 800529e:	bf00      	nop
 80052a0:	e002      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
        break;
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <DMA_CheckFifoParam+0xe8>
    break;
 80052a6:	bf00      	nop
    }
  }

  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop

080052b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a38      	ldr	r2, [pc, #224]	@ (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a36      	ldr	r2, [pc, #216]	@ (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01d      	beq.n	8005316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a35      	ldr	r2, [pc, #212]	@ (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a33      	ldr	r2, [pc, #204]	@ (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a32      	ldr	r2, [pc, #200]	@ (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a30      	ldr	r2, [pc, #192]	@ (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2f      	ldr	r2, [pc, #188]	@ (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2d      	ldr	r2, [pc, #180]	@ (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01a      	beq.n	8005356 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3b08      	subs	r3, #8
 8005328:	4a28      	ldr	r2, [pc, #160]	@ (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4b26      	ldr	r3, [pc, #152]	@ (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a24      	ldr	r2, [pc, #144]	@ (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005344:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2201      	movs	r2, #1
 800534e:	409a      	lsls	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005354:	e024      	b.n	80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	3b10      	subs	r3, #16
 800535e:	4a1e      	ldr	r2, [pc, #120]	@ (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a1c      	ldr	r2, [pc, #112]	@ (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d806      	bhi.n	800537e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a1b      	ldr	r2, [pc, #108]	@ (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d902      	bls.n	800537e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3308      	adds	r3, #8
 800537c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4b18      	ldr	r3, [pc, #96]	@ (80053e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005390:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2201      	movs	r2, #1
 800539a:	409a      	lsls	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	58025408 	.word	0x58025408
 80053b0:	5802541c 	.word	0x5802541c
 80053b4:	58025430 	.word	0x58025430
 80053b8:	58025444 	.word	0x58025444
 80053bc:	58025458 	.word	0x58025458
 80053c0:	5802546c 	.word	0x5802546c
 80053c4:	58025480 	.word	0x58025480
 80053c8:	58025494 	.word	0x58025494
 80053cc:	cccccccd 	.word	0xcccccccd
 80053d0:	16009600 	.word	0x16009600
 80053d4:	58025880 	.word	0x58025880
 80053d8:	aaaaaaab 	.word	0xaaaaaaab
 80053dc:	400204b8 	.word	0x400204b8
 80053e0:	4002040f 	.word	0x4002040f
 80053e4:	10008200 	.word	0x10008200
 80053e8:	40020880 	.word	0x40020880

080053ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d04a      	beq.n	8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d847      	bhi.n	8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a25      	ldr	r2, [pc, #148]	@ (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d022      	beq.n	8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a24      	ldr	r2, [pc, #144]	@ (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d01d      	beq.n	8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a22      	ldr	r2, [pc, #136]	@ (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d018      	beq.n	8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a21      	ldr	r2, [pc, #132]	@ (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d013      	beq.n	8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1f      	ldr	r2, [pc, #124]	@ (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00e      	beq.n	8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1e      	ldr	r2, [pc, #120]	@ (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d009      	beq.n	8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1c      	ldr	r2, [pc, #112]	@ (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1b      	ldr	r2, [pc, #108]	@ (80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d101      	bne.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4b17      	ldr	r3, [pc, #92]	@ (80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	461a      	mov	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a15      	ldr	r2, [pc, #84]	@ (80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005474:	671a      	str	r2, [r3, #112]	@ 0x70
 8005476:	e009      	b.n	800548c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a11      	ldr	r2, [pc, #68]	@ (80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800548a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3b01      	subs	r3, #1
 8005490:	2201      	movs	r2, #1
 8005492:	409a      	lsls	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	58025408 	.word	0x58025408
 80054a8:	5802541c 	.word	0x5802541c
 80054ac:	58025430 	.word	0x58025430
 80054b0:	58025444 	.word	0x58025444
 80054b4:	58025458 	.word	0x58025458
 80054b8:	5802546c 	.word	0x5802546c
 80054bc:	58025480 	.word	0x58025480
 80054c0:	58025494 	.word	0x58025494
 80054c4:	1600963f 	.word	0x1600963f
 80054c8:	58025940 	.word	0x58025940
 80054cc:	1000823f 	.word	0x1000823f
 80054d0:	40020940 	.word	0x40020940

080054d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	@ 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054e2:	4b89      	ldr	r3, [pc, #548]	@ (8005708 <HAL_GPIO_Init+0x234>)
 80054e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054e6:	e194      	b.n	8005812 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2101      	movs	r1, #1
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	4013      	ands	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8186 	beq.w	800580c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d005      	beq.n	8005518 <HAL_GPIO_Init+0x44>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d130      	bne.n	800557a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	2203      	movs	r2, #3
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554e:	2201      	movs	r2, #1
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 0201 	and.w	r2, r3, #1
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4313      	orrs	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b03      	cmp	r3, #3
 8005584:	d017      	beq.n	80055b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	2203      	movs	r2, #3
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d123      	bne.n	800560a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	08da      	lsrs	r2, r3, #3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3208      	adds	r2, #8
 80055ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	220f      	movs	r2, #15
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	08da      	lsrs	r2, r3, #3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3208      	adds	r2, #8
 8005604:	69b9      	ldr	r1, [r7, #24]
 8005606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	2203      	movs	r2, #3
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4013      	ands	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f003 0203 	and.w	r2, r3, #3
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4313      	orrs	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80e0 	beq.w	800580c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800564c:	4b2f      	ldr	r3, [pc, #188]	@ (800570c <HAL_GPIO_Init+0x238>)
 800564e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005652:	4a2e      	ldr	r2, [pc, #184]	@ (800570c <HAL_GPIO_Init+0x238>)
 8005654:	f043 0302 	orr.w	r3, r3, #2
 8005658:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800565c:	4b2b      	ldr	r3, [pc, #172]	@ (800570c <HAL_GPIO_Init+0x238>)
 800565e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800566a:	4a29      	ldr	r2, [pc, #164]	@ (8005710 <HAL_GPIO_Init+0x23c>)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	089b      	lsrs	r3, r3, #2
 8005670:	3302      	adds	r3, #2
 8005672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	220f      	movs	r2, #15
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a20      	ldr	r2, [pc, #128]	@ (8005714 <HAL_GPIO_Init+0x240>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d052      	beq.n	800573c <HAL_GPIO_Init+0x268>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <HAL_GPIO_Init+0x244>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d031      	beq.n	8005702 <HAL_GPIO_Init+0x22e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <HAL_GPIO_Init+0x248>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d02b      	beq.n	80056fe <HAL_GPIO_Init+0x22a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_GPIO_Init+0x24c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d025      	beq.n	80056fa <HAL_GPIO_Init+0x226>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005724 <HAL_GPIO_Init+0x250>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01f      	beq.n	80056f6 <HAL_GPIO_Init+0x222>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005728 <HAL_GPIO_Init+0x254>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d019      	beq.n	80056f2 <HAL_GPIO_Init+0x21e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <HAL_GPIO_Init+0x258>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_GPIO_Init+0x21a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a19      	ldr	r2, [pc, #100]	@ (8005730 <HAL_GPIO_Init+0x25c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00d      	beq.n	80056ea <HAL_GPIO_Init+0x216>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <HAL_GPIO_Init+0x260>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <HAL_GPIO_Init+0x212>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a17      	ldr	r2, [pc, #92]	@ (8005738 <HAL_GPIO_Init+0x264>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d101      	bne.n	80056e2 <HAL_GPIO_Init+0x20e>
 80056de:	2309      	movs	r3, #9
 80056e0:	e02d      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056e2:	230a      	movs	r3, #10
 80056e4:	e02b      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056e6:	2308      	movs	r3, #8
 80056e8:	e029      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056ea:	2307      	movs	r3, #7
 80056ec:	e027      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056ee:	2306      	movs	r3, #6
 80056f0:	e025      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056f2:	2305      	movs	r3, #5
 80056f4:	e023      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056f6:	2304      	movs	r3, #4
 80056f8:	e021      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056fa:	2303      	movs	r3, #3
 80056fc:	e01f      	b.n	800573e <HAL_GPIO_Init+0x26a>
 80056fe:	2302      	movs	r3, #2
 8005700:	e01d      	b.n	800573e <HAL_GPIO_Init+0x26a>
 8005702:	2301      	movs	r3, #1
 8005704:	e01b      	b.n	800573e <HAL_GPIO_Init+0x26a>
 8005706:	bf00      	nop
 8005708:	58000080 	.word	0x58000080
 800570c:	58024400 	.word	0x58024400
 8005710:	58000400 	.word	0x58000400
 8005714:	58020000 	.word	0x58020000
 8005718:	58020400 	.word	0x58020400
 800571c:	58020800 	.word	0x58020800
 8005720:	58020c00 	.word	0x58020c00
 8005724:	58021000 	.word	0x58021000
 8005728:	58021400 	.word	0x58021400
 800572c:	58021800 	.word	0x58021800
 8005730:	58021c00 	.word	0x58021c00
 8005734:	58022000 	.word	0x58022000
 8005738:	58022400 	.word	0x58022400
 800573c:	2300      	movs	r3, #0
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	f002 0203 	and.w	r2, r2, #3
 8005744:	0092      	lsls	r2, r2, #2
 8005746:	4093      	lsls	r3, r2
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800574e:	4938      	ldr	r1, [pc, #224]	@ (8005830 <HAL_GPIO_Init+0x35c>)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	089b      	lsrs	r3, r3, #2
 8005754:	3302      	adds	r3, #2
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800575c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	43db      	mvns	r3, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4013      	ands	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800578a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	43db      	mvns	r3, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4013      	ands	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	43db      	mvns	r3, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	f47f ae63 	bne.w	80054e8 <HAL_GPIO_Init+0x14>
  }
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	3724      	adds	r7, #36	@ 0x24
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	58000400 	.word	0x58000400

08005834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
 8005840:	4613      	mov	r3, r2
 8005842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005844:	787b      	ldrb	r3, [r7, #1]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800584a:	887a      	ldrh	r2, [r7, #2]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005850:	e003      	b.n	800585a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005852:	887b      	ldrh	r3, [r7, #2]
 8005854:	041a      	lsls	r2, r3, #16
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	619a      	str	r2, [r3, #24]
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	4603      	mov	r3, r0
 800586e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005874:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	4618      	mov	r0, r3
 800588e:	f7fb f955 	bl	8000b3c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058a4:	4b19      	ldr	r3, [pc, #100]	@ (800590c <HAL_PWREx_ConfigSupply+0x70>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d00a      	beq.n	80058c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058b0:	4b16      	ldr	r3, [pc, #88]	@ (800590c <HAL_PWREx_ConfigSupply+0x70>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d001      	beq.n	80058c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e01f      	b.n	8005902 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e01d      	b.n	8005902 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058c6:	4b11      	ldr	r3, [pc, #68]	@ (800590c <HAL_PWREx_ConfigSupply+0x70>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f023 0207 	bic.w	r2, r3, #7
 80058ce:	490f      	ldr	r1, [pc, #60]	@ (800590c <HAL_PWREx_ConfigSupply+0x70>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058d6:	f7fc fad9 	bl	8001e8c <HAL_GetTick>
 80058da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058dc:	e009      	b.n	80058f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058de:	f7fc fad5 	bl	8001e8c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ec:	d901      	bls.n	80058f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e007      	b.n	8005902 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058f2:	4b06      	ldr	r3, [pc, #24]	@ (800590c <HAL_PWREx_ConfigSupply+0x70>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058fe:	d1ee      	bne.n	80058de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	58024800 	.word	0x58024800

08005910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	@ 0x30
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f000 bc48 	b.w	80061b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8088 	beq.w	8005a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005932:	4b99      	ldr	r3, [pc, #612]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800593a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800593c:	4b96      	ldr	r3, [pc, #600]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005944:	2b10      	cmp	r3, #16
 8005946:	d007      	beq.n	8005958 <HAL_RCC_OscConfig+0x48>
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	2b18      	cmp	r3, #24
 800594c:	d111      	bne.n	8005972 <HAL_RCC_OscConfig+0x62>
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d10c      	bne.n	8005972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005958:	4b8f      	ldr	r3, [pc, #572]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d06d      	beq.n	8005a40 <HAL_RCC_OscConfig+0x130>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d169      	bne.n	8005a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f000 bc21 	b.w	80061b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800597a:	d106      	bne.n	800598a <HAL_RCC_OscConfig+0x7a>
 800597c:	4b86      	ldr	r3, [pc, #536]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a85      	ldr	r2, [pc, #532]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e02e      	b.n	80059e8 <HAL_RCC_OscConfig+0xd8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10c      	bne.n	80059ac <HAL_RCC_OscConfig+0x9c>
 8005992:	4b81      	ldr	r3, [pc, #516]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a80      	ldr	r2, [pc, #512]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b7e      	ldr	r3, [pc, #504]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a7d      	ldr	r2, [pc, #500]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e01d      	b.n	80059e8 <HAL_RCC_OscConfig+0xd8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059b4:	d10c      	bne.n	80059d0 <HAL_RCC_OscConfig+0xc0>
 80059b6:	4b78      	ldr	r3, [pc, #480]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a77      	ldr	r2, [pc, #476]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b75      	ldr	r3, [pc, #468]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a74      	ldr	r2, [pc, #464]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e00b      	b.n	80059e8 <HAL_RCC_OscConfig+0xd8>
 80059d0:	4b71      	ldr	r3, [pc, #452]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a70      	ldr	r2, [pc, #448]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a6d      	ldr	r2, [pc, #436]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 80059e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fc fa4c 	bl	8001e8c <HAL_GetTick>
 80059f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f8:	f7fc fa48 	bl	8001e8c <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	@ 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e3d4      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a0a:	4b63      	ldr	r3, [pc, #396]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCC_OscConfig+0xe8>
 8005a16:	e014      	b.n	8005a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a18:	f7fc fa38 	bl	8001e8c <HAL_GetTick>
 8005a1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fc fa34 	bl	8001e8c <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	@ 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e3c0      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a32:	4b59      	ldr	r3, [pc, #356]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x110>
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80ca 	beq.w	8005be4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a50:	4b51      	ldr	r3, [pc, #324]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_RCC_OscConfig+0x166>
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	2b18      	cmp	r3, #24
 8005a6a:	d156      	bne.n	8005b1a <HAL_RCC_OscConfig+0x20a>
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d151      	bne.n	8005b1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a76:	4b48      	ldr	r3, [pc, #288]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_RCC_OscConfig+0x17e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e392      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a8e:	4b42      	ldr	r3, [pc, #264]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f023 0219 	bic.w	r2, r3, #25
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	493f      	ldr	r1, [pc, #252]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fc f9f4 	bl	8001e8c <HAL_GetTick>
 8005aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fc f9f0 	bl	8001e8c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e37c      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aba:	4b37      	ldr	r3, [pc, #220]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac6:	f7fc fa11 	bl	8001eec <HAL_GetREVID>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d817      	bhi.n	8005b04 <HAL_RCC_OscConfig+0x1f4>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b40      	cmp	r3, #64	@ 0x40
 8005ada:	d108      	bne.n	8005aee <HAL_RCC_OscConfig+0x1de>
 8005adc:	4b2e      	ldr	r3, [pc, #184]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aec:	e07a      	b.n	8005be4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aee:	4b2a      	ldr	r3, [pc, #168]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	031b      	lsls	r3, r3, #12
 8005afc:	4926      	ldr	r1, [pc, #152]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b02:	e06f      	b.n	8005be4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b04:	4b24      	ldr	r3, [pc, #144]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	4921      	ldr	r1, [pc, #132]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b18:	e064      	b.n	8005be4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d047      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b22:	4b1d      	ldr	r3, [pc, #116]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 0219 	bic.w	r2, r3, #25
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	491a      	ldr	r1, [pc, #104]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fc f9aa 	bl	8001e8c <HAL_GetTick>
 8005b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b3c:	f7fc f9a6 	bl	8001e8c <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e332      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b4e:	4b12      	ldr	r3, [pc, #72]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5a:	f7fc f9c7 	bl	8001eec <HAL_GetREVID>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d819      	bhi.n	8005b9c <HAL_RCC_OscConfig+0x28c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b40      	cmp	r3, #64	@ 0x40
 8005b6e:	d108      	bne.n	8005b82 <HAL_RCC_OscConfig+0x272>
 8005b70:	4b09      	ldr	r3, [pc, #36]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005b78:	4a07      	ldr	r2, [pc, #28]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7e:	6053      	str	r3, [r2, #4]
 8005b80:	e030      	b.n	8005be4 <HAL_RCC_OscConfig+0x2d4>
 8005b82:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	031b      	lsls	r3, r3, #12
 8005b90:	4901      	ldr	r1, [pc, #4]	@ (8005b98 <HAL_RCC_OscConfig+0x288>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	604b      	str	r3, [r1, #4]
 8005b96:	e025      	b.n	8005be4 <HAL_RCC_OscConfig+0x2d4>
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	4b9a      	ldr	r3, [pc, #616]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	061b      	lsls	r3, r3, #24
 8005baa:	4997      	ldr	r1, [pc, #604]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	604b      	str	r3, [r1, #4]
 8005bb0:	e018      	b.n	8005be4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb2:	4b95      	ldr	r3, [pc, #596]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a94      	ldr	r2, [pc, #592]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fc f965 	bl	8001e8c <HAL_GetTick>
 8005bc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc6:	f7fc f961 	bl	8001e8c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e2ed      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bd8:	4b8b      	ldr	r3, [pc, #556]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f0      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80a9 	beq.w	8005d44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf2:	4b85      	ldr	r3, [pc, #532]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bfc:	4b82      	ldr	r3, [pc, #520]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d007      	beq.n	8005c18 <HAL_RCC_OscConfig+0x308>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b18      	cmp	r3, #24
 8005c0c:	d13a      	bne.n	8005c84 <HAL_RCC_OscConfig+0x374>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d135      	bne.n	8005c84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c18:	4b7b      	ldr	r3, [pc, #492]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCC_OscConfig+0x320>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	2b80      	cmp	r3, #128	@ 0x80
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e2c1      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c30:	f7fc f95c 	bl	8001eec <HAL_GetREVID>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d817      	bhi.n	8005c6e <HAL_RCC_OscConfig+0x35e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d108      	bne.n	8005c58 <HAL_RCC_OscConfig+0x348>
 8005c46:	4b70      	ldr	r3, [pc, #448]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c56:	e075      	b.n	8005d44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c58:	4b6b      	ldr	r3, [pc, #428]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	069b      	lsls	r3, r3, #26
 8005c66:	4968      	ldr	r1, [pc, #416]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c6c:	e06a      	b.n	8005d44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c6e:	4b66      	ldr	r3, [pc, #408]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	4962      	ldr	r1, [pc, #392]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c82:	e05f      	b.n	8005d44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d042      	beq.n	8005d12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a5d      	ldr	r2, [pc, #372]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fc f8f8 	bl	8001e8c <HAL_GetTick>
 8005c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ca0:	f7fc f8f4 	bl	8001e8c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e280      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cb2:	4b55      	ldr	r3, [pc, #340]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cbe:	f7fc f915 	bl	8001eec <HAL_GetREVID>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d817      	bhi.n	8005cfc <HAL_RCC_OscConfig+0x3ec>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d108      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x3d6>
 8005cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005cde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ce2:	6053      	str	r3, [r2, #4]
 8005ce4:	e02e      	b.n	8005d44 <HAL_RCC_OscConfig+0x434>
 8005ce6:	4b48      	ldr	r3, [pc, #288]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	069b      	lsls	r3, r3, #26
 8005cf4:	4944      	ldr	r1, [pc, #272]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]
 8005cfa:	e023      	b.n	8005d44 <HAL_RCC_OscConfig+0x434>
 8005cfc:	4b42      	ldr	r3, [pc, #264]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	493f      	ldr	r1, [pc, #252]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60cb      	str	r3, [r1, #12]
 8005d10:	e018      	b.n	8005d44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d12:	4b3d      	ldr	r3, [pc, #244]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a3c      	ldr	r2, [pc, #240]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1e:	f7fc f8b5 	bl	8001e8c <HAL_GetTick>
 8005d22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d26:	f7fc f8b1 	bl	8001e8c <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e23d      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d38:	4b33      	ldr	r3, [pc, #204]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f0      	bne.n	8005d26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d036      	beq.n	8005dbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d019      	beq.n	8005d8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d58:	4b2b      	ldr	r3, [pc, #172]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d64:	f7fc f892 	bl	8001e8c <HAL_GetTick>
 8005d68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d6c:	f7fc f88e 	bl	8001e8c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e21a      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d7e:	4b22      	ldr	r3, [pc, #136]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x45c>
 8005d8a:	e018      	b.n	8005dbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d90:	4a1d      	ldr	r2, [pc, #116]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005d92:	f023 0301 	bic.w	r3, r3, #1
 8005d96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d98:	f7fc f878 	bl	8001e8c <HAL_GetTick>
 8005d9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005da0:	f7fc f874 	bl	8001e8c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e200      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005db2:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d039      	beq.n	8005e3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01c      	beq.n	8005e0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005dd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ddc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dde:	f7fc f855 	bl	8001e8c <HAL_GetTick>
 8005de2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005de6:	f7fc f851 	bl	8001e8c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e1dd      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005df8:	4b03      	ldr	r3, [pc, #12]	@ (8005e08 <HAL_RCC_OscConfig+0x4f8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x4d6>
 8005e04:	e01b      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005e06:	bf00      	nop
 8005e08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a9a      	ldr	r2, [pc, #616]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005e12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e18:	f7fc f838 	bl	8001e8c <HAL_GetTick>
 8005e1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e20:	f7fc f834 	bl	8001e8c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e1c0      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e32:	4b92      	ldr	r3, [pc, #584]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f0      	bne.n	8005e20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8081 	beq.w	8005f4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8006080 <HAL_RCC_OscConfig+0x770>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a8b      	ldr	r2, [pc, #556]	@ (8006080 <HAL_RCC_OscConfig+0x770>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e58:	f7fc f818 	bl	8001e8c <HAL_GetTick>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e60:	f7fc f814 	bl	8001e8c <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e1a0      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e72:	4b83      	ldr	r3, [pc, #524]	@ (8006080 <HAL_RCC_OscConfig+0x770>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d106      	bne.n	8005e94 <HAL_RCC_OscConfig+0x584>
 8005e86:	4b7d      	ldr	r3, [pc, #500]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e92:	e02d      	b.n	8005ef0 <HAL_RCC_OscConfig+0x5e0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10c      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x5a6>
 8005e9c:	4b77      	ldr	r3, [pc, #476]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea0:	4a76      	ldr	r2, [pc, #472]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea8:	4b74      	ldr	r3, [pc, #464]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	4a73      	ldr	r2, [pc, #460]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005eae:	f023 0304 	bic.w	r3, r3, #4
 8005eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eb4:	e01c      	b.n	8005ef0 <HAL_RCC_OscConfig+0x5e0>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x5c8>
 8005ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ec4:	f043 0304 	orr.w	r3, r3, #4
 8005ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eca:	4b6c      	ldr	r3, [pc, #432]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ece:	4a6b      	ldr	r2, [pc, #428]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed6:	e00b      	b.n	8005ef0 <HAL_RCC_OscConfig+0x5e0>
 8005ed8:	4b68      	ldr	r3, [pc, #416]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005edc:	4a67      	ldr	r2, [pc, #412]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee4:	4b65      	ldr	r3, [pc, #404]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee8:	4a64      	ldr	r2, [pc, #400]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005eea:	f023 0304 	bic.w	r3, r3, #4
 8005eee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fb ffc8 	bl	8001e8c <HAL_GetTick>
 8005efc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f00:	f7fb ffc4 	bl	8001e8c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e14e      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f16:	4b59      	ldr	r3, [pc, #356]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0ee      	beq.n	8005f00 <HAL_RCC_OscConfig+0x5f0>
 8005f22:	e014      	b.n	8005f4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f24:	f7fb ffb2 	bl	8001e8c <HAL_GetTick>
 8005f28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2c:	f7fb ffae 	bl	8001e8c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e138      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f42:	4b4e      	ldr	r3, [pc, #312]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ee      	bne.n	8005f2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 812d 	beq.w	80061b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f58:	4b48      	ldr	r3, [pc, #288]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f60:	2b18      	cmp	r3, #24
 8005f62:	f000 80bd 	beq.w	80060e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	f040 809e 	bne.w	80060ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f70:	4b42      	ldr	r3, [pc, #264]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a41      	ldr	r2, [pc, #260]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fb ff86 	bl	8001e8c <HAL_GetTick>
 8005f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fb ff82 	bl	8001e8c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e10e      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f96:	4b39      	ldr	r3, [pc, #228]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa2:	4b36      	ldr	r3, [pc, #216]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fa6:	4b37      	ldr	r3, [pc, #220]	@ (8006084 <HAL_RCC_OscConfig+0x774>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fb2:	0112      	lsls	r2, r2, #4
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	4931      	ldr	r1, [pc, #196]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	025b      	lsls	r3, r3, #9
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005fec:	4923      	ldr	r1, [pc, #140]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005ff2:	4b22      	ldr	r3, [pc, #136]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	4a21      	ldr	r2, [pc, #132]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006002:	4b21      	ldr	r3, [pc, #132]	@ (8006088 <HAL_RCC_OscConfig+0x778>)
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800600a:	00d2      	lsls	r2, r2, #3
 800600c:	491b      	ldr	r1, [pc, #108]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006012:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	f023 020c 	bic.w	r2, r3, #12
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	4917      	ldr	r1, [pc, #92]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006020:	4313      	orrs	r3, r2
 8006022:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006024:	4b15      	ldr	r3, [pc, #84]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	f023 0202 	bic.w	r2, r3, #2
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006030:	4912      	ldr	r1, [pc, #72]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006036:	4b11      	ldr	r3, [pc, #68]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	4a10      	ldr	r2, [pc, #64]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006040:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006042:	4b0e      	ldr	r3, [pc, #56]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006046:	4a0d      	ldr	r2, [pc, #52]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800604c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800604e:	4b0b      	ldr	r3, [pc, #44]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	4a0a      	ldr	r2, [pc, #40]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800605a:	4b08      	ldr	r3, [pc, #32]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	4a07      	ldr	r2, [pc, #28]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006066:	4b05      	ldr	r3, [pc, #20]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a04      	ldr	r2, [pc, #16]	@ (800607c <HAL_RCC_OscConfig+0x76c>)
 800606c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006072:	f7fb ff0b 	bl	8001e8c <HAL_GetTick>
 8006076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006078:	e011      	b.n	800609e <HAL_RCC_OscConfig+0x78e>
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	58024800 	.word	0x58024800
 8006084:	fffffc0c 	.word	0xfffffc0c
 8006088:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800608c:	f7fb fefe 	bl	8001e8c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e08a      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800609e:	4b47      	ldr	r3, [pc, #284]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0x77c>
 80060aa:	e082      	b.n	80061b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ac:	4b43      	ldr	r3, [pc, #268]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a42      	ldr	r2, [pc, #264]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80060b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fb fee8 	bl	8001e8c <HAL_GetTick>
 80060bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c0:	f7fb fee4 	bl	8001e8c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e070      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060d2:	4b3a      	ldr	r3, [pc, #232]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x7b0>
 80060de:	e068      	b.n	80061b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060e0:	4b36      	ldr	r3, [pc, #216]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060e6:	4b35      	ldr	r3, [pc, #212]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d031      	beq.n	8006158 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f003 0203 	and.w	r2, r3, #3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060fe:	429a      	cmp	r2, r3
 8006100:	d12a      	bne.n	8006158 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610e:	429a      	cmp	r2, r3
 8006110:	d122      	bne.n	8006158 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800611e:	429a      	cmp	r2, r3
 8006120:	d11a      	bne.n	8006158 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	0a5b      	lsrs	r3, r3, #9
 8006126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006130:	429a      	cmp	r2, r3
 8006132:	d111      	bne.n	8006158 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	0c1b      	lsrs	r3, r3, #16
 8006138:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006142:	429a      	cmp	r2, r3
 8006144:	d108      	bne.n	8006158 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	0e1b      	lsrs	r3, r3, #24
 800614a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006152:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006154:	429a      	cmp	r2, r3
 8006156:	d001      	beq.n	800615c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e02b      	b.n	80061b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800615c:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 800615e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006160:	08db      	lsrs	r3, r3, #3
 8006162:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006166:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	429a      	cmp	r2, r3
 8006170:	d01f      	beq.n	80061b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	4a11      	ldr	r2, [pc, #68]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800617e:	f7fb fe85 	bl	8001e8c <HAL_GetTick>
 8006182:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006184:	bf00      	nop
 8006186:	f7fb fe81 	bl	8001e8c <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	4293      	cmp	r3, r2
 8006190:	d0f9      	beq.n	8006186 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006192:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 8006194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006196:	4b0a      	ldr	r3, [pc, #40]	@ (80061c0 <HAL_RCC_OscConfig+0x8b0>)
 8006198:	4013      	ands	r3, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800619e:	00d2      	lsls	r2, r2, #3
 80061a0:	4906      	ldr	r1, [pc, #24]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061a6:	4b05      	ldr	r3, [pc, #20]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	4a04      	ldr	r2, [pc, #16]	@ (80061bc <HAL_RCC_OscConfig+0x8ac>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3730      	adds	r7, #48	@ 0x30
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	58024400 	.word	0x58024400
 80061c0:	ffff0007 	.word	0xffff0007

080061c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e19c      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061d8:	4b8a      	ldr	r3, [pc, #552]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d910      	bls.n	8006208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b87      	ldr	r3, [pc, #540]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f023 020f 	bic.w	r2, r3, #15
 80061ee:	4985      	ldr	r1, [pc, #532]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f6:	4b83      	ldr	r3, [pc, #524]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d001      	beq.n	8006208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e184      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d010      	beq.n	8006236 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	4b7b      	ldr	r3, [pc, #492]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006220:	429a      	cmp	r2, r3
 8006222:	d908      	bls.n	8006236 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006224:	4b78      	ldr	r3, [pc, #480]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	4975      	ldr	r1, [pc, #468]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006232:	4313      	orrs	r3, r2
 8006234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d010      	beq.n	8006264 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695a      	ldr	r2, [r3, #20]
 8006246:	4b70      	ldr	r3, [pc, #448]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800624e:	429a      	cmp	r2, r3
 8006250:	d908      	bls.n	8006264 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006252:	4b6d      	ldr	r3, [pc, #436]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	496a      	ldr	r1, [pc, #424]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006260:	4313      	orrs	r3, r2
 8006262:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b00      	cmp	r3, #0
 800626e:	d010      	beq.n	8006292 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	4b64      	ldr	r3, [pc, #400]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800627c:	429a      	cmp	r2, r3
 800627e:	d908      	bls.n	8006292 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006280:	4b61      	ldr	r3, [pc, #388]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	495e      	ldr	r1, [pc, #376]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 800628e:	4313      	orrs	r3, r2
 8006290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69da      	ldr	r2, [r3, #28]
 80062a2:	4b59      	ldr	r3, [pc, #356]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d908      	bls.n	80062c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062ae:	4b56      	ldr	r3, [pc, #344]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	4953      	ldr	r1, [pc, #332]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d010      	beq.n	80062ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	429a      	cmp	r2, r3
 80062da:	d908      	bls.n	80062ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f023 020f 	bic.w	r2, r3, #15
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4947      	ldr	r1, [pc, #284]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d055      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062fa:	4b43      	ldr	r3, [pc, #268]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	4940      	ldr	r1, [pc, #256]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006308:	4313      	orrs	r3, r2
 800630a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d107      	bne.n	8006324 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006314:	4b3c      	ldr	r3, [pc, #240]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d121      	bne.n	8006364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0f6      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d107      	bne.n	800633c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800632c:	4b36      	ldr	r3, [pc, #216]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d115      	bne.n	8006364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0ea      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d107      	bne.n	8006354 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006344:	4b30      	ldr	r3, [pc, #192]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0de      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006354:	4b2c      	ldr	r3, [pc, #176]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0d6      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006364:	4b28      	ldr	r3, [pc, #160]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f023 0207 	bic.w	r2, r3, #7
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4925      	ldr	r1, [pc, #148]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006372:	4313      	orrs	r3, r2
 8006374:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006376:	f7fb fd89 	bl	8001e8c <HAL_GetTick>
 800637a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637c:	e00a      	b.n	8006394 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800637e:	f7fb fd85 	bl	8001e8c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638c:	4293      	cmp	r3, r2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e0be      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006394:	4b1c      	ldr	r3, [pc, #112]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d1eb      	bne.n	800637e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d010      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	429a      	cmp	r2, r3
 80063c0:	d208      	bcs.n	80063d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c2:	4b11      	ldr	r3, [pc, #68]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f023 020f 	bic.w	r2, r3, #15
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	490e      	ldr	r1, [pc, #56]	@ (8006408 <HAL_RCC_ClockConfig+0x244>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d214      	bcs.n	800640c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b08      	ldr	r3, [pc, #32]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 020f 	bic.w	r2, r3, #15
 80063ea:	4906      	ldr	r1, [pc, #24]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b04      	ldr	r3, [pc, #16]	@ (8006404 <HAL_RCC_ClockConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d005      	beq.n	800640c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e086      	b.n	8006512 <HAL_RCC_ClockConfig+0x34e>
 8006404:	52002000 	.word	0x52002000
 8006408:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	4b3f      	ldr	r3, [pc, #252]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006424:	429a      	cmp	r2, r3
 8006426:	d208      	bcs.n	800643a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006428:	4b3c      	ldr	r3, [pc, #240]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	4939      	ldr	r1, [pc, #228]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 8006436:	4313      	orrs	r3, r2
 8006438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d010      	beq.n	8006468 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	4b34      	ldr	r3, [pc, #208]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006452:	429a      	cmp	r2, r3
 8006454:	d208      	bcs.n	8006468 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006456:	4b31      	ldr	r3, [pc, #196]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	492e      	ldr	r1, [pc, #184]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 8006464:	4313      	orrs	r3, r2
 8006466:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b00      	cmp	r3, #0
 8006472:	d010      	beq.n	8006496 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	4b28      	ldr	r3, [pc, #160]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006480:	429a      	cmp	r2, r3
 8006482:	d208      	bcs.n	8006496 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006484:	4b25      	ldr	r3, [pc, #148]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	4922      	ldr	r1, [pc, #136]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 8006492:	4313      	orrs	r3, r2
 8006494:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d010      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	4b1d      	ldr	r3, [pc, #116]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d208      	bcs.n	80064c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064b2:	4b1a      	ldr	r3, [pc, #104]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	4917      	ldr	r1, [pc, #92]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064c4:	f000 f834 	bl	8006530 <HAL_RCC_GetSysClockFreq>
 80064c8:	4602      	mov	r2, r0
 80064ca:	4b14      	ldr	r3, [pc, #80]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	4912      	ldr	r1, [pc, #72]	@ (8006520 <HAL_RCC_ClockConfig+0x35c>)
 80064d6:	5ccb      	ldrb	r3, [r1, r3]
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
 80064e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064e2:	4b0e      	ldr	r3, [pc, #56]	@ (800651c <HAL_RCC_ClockConfig+0x358>)
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006520 <HAL_RCC_ClockConfig+0x35c>)
 80064ec:	5cd3      	ldrb	r3, [r2, r3]
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
 80064f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006524 <HAL_RCC_ClockConfig+0x360>)
 80064fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006528 <HAL_RCC_ClockConfig+0x364>)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006502:	4b0a      	ldr	r3, [pc, #40]	@ (800652c <HAL_RCC_ClockConfig+0x368>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f7fa fd98 	bl	800103c <HAL_InitTick>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	58024400 	.word	0x58024400
 8006520:	080129c8 	.word	0x080129c8
 8006524:	24000004 	.word	0x24000004
 8006528:	24000000 	.word	0x24000000
 800652c:	24000008 	.word	0x24000008

08006530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	b089      	sub	sp, #36	@ 0x24
 8006534:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006536:	4bb3      	ldr	r3, [pc, #716]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800653e:	2b18      	cmp	r3, #24
 8006540:	f200 8155 	bhi.w	80067ee <HAL_RCC_GetSysClockFreq+0x2be>
 8006544:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080067ef 	.word	0x080067ef
 8006554:	080067ef 	.word	0x080067ef
 8006558:	080067ef 	.word	0x080067ef
 800655c:	080067ef 	.word	0x080067ef
 8006560:	080067ef 	.word	0x080067ef
 8006564:	080067ef 	.word	0x080067ef
 8006568:	080067ef 	.word	0x080067ef
 800656c:	080065d7 	.word	0x080065d7
 8006570:	080067ef 	.word	0x080067ef
 8006574:	080067ef 	.word	0x080067ef
 8006578:	080067ef 	.word	0x080067ef
 800657c:	080067ef 	.word	0x080067ef
 8006580:	080067ef 	.word	0x080067ef
 8006584:	080067ef 	.word	0x080067ef
 8006588:	080067ef 	.word	0x080067ef
 800658c:	080065dd 	.word	0x080065dd
 8006590:	080067ef 	.word	0x080067ef
 8006594:	080067ef 	.word	0x080067ef
 8006598:	080067ef 	.word	0x080067ef
 800659c:	080067ef 	.word	0x080067ef
 80065a0:	080067ef 	.word	0x080067ef
 80065a4:	080067ef 	.word	0x080067ef
 80065a8:	080067ef 	.word	0x080067ef
 80065ac:	080065e3 	.word	0x080065e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b0:	4b94      	ldr	r3, [pc, #592]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065bc:	4b91      	ldr	r3, [pc, #580]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	08db      	lsrs	r3, r3, #3
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	4a90      	ldr	r2, [pc, #576]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065ce:	e111      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065d2:	61bb      	str	r3, [r7, #24]
      break;
 80065d4:	e10e      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80065d6:	4b8d      	ldr	r3, [pc, #564]	@ (800680c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065d8:	61bb      	str	r3, [r7, #24]
      break;
 80065da:	e10b      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80065dc:	4b8c      	ldr	r3, [pc, #560]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065de:	61bb      	str	r3, [r7, #24]
      break;
 80065e0:	e108      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065e2:	4b88      	ldr	r3, [pc, #544]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80065ec:	4b85      	ldr	r3, [pc, #532]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065f8:	4b82      	ldr	r3, [pc, #520]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006602:	4b80      	ldr	r3, [pc, #512]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006606:	08db      	lsrs	r3, r3, #3
 8006608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80e1 	beq.w	80067e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b02      	cmp	r3, #2
 800662a:	f000 8083 	beq.w	8006734 <HAL_RCC_GetSysClockFreq+0x204>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b02      	cmp	r3, #2
 8006632:	f200 80a1 	bhi.w	8006778 <HAL_RCC_GetSysClockFreq+0x248>
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_RCC_GetSysClockFreq+0x114>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d056      	beq.n	80066f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006642:	e099      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006644:	4b6f      	ldr	r3, [pc, #444]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02d      	beq.n	80066ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006650:	4b6c      	ldr	r3, [pc, #432]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	08db      	lsrs	r3, r3, #3
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	4a6b      	ldr	r2, [pc, #428]	@ (8006808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
 8006660:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667a:	4b62      	ldr	r3, [pc, #392]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668a:	ed97 6a02 	vldr	s12, [r7, #8]
 800668e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006814 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800669e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066aa:	e087      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006818 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066be:	4b51      	ldr	r3, [pc, #324]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80066d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066ee:	e065      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800681c <HAL_RCC_GetSysClockFreq+0x2ec>
 80066fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006702:	4b40      	ldr	r3, [pc, #256]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006712:	ed97 6a02 	vldr	s12, [r7, #8]
 8006716:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800671a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006732:	e043      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006820 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006746:	4b2f      	ldr	r3, [pc, #188]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006756:	ed97 6a02 	vldr	s12, [r7, #8]
 800675a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800675e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800676a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006776:	e021      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800681c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678a:	4b1e      	ldr	r3, [pc, #120]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679a:	ed97 6a02 	vldr	s12, [r7, #8]
 800679e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80067bc:	4b11      	ldr	r3, [pc, #68]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c0:	0a5b      	lsrs	r3, r3, #9
 80067c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067c6:	3301      	adds	r3, #1
 80067c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e0:	ee17 3a90 	vmov	r3, s15
 80067e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80067e6:	e005      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61bb      	str	r3, [r7, #24]
      break;
 80067ec:	e002      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80067ee:	4b07      	ldr	r3, [pc, #28]	@ (800680c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067f0:	61bb      	str	r3, [r7, #24]
      break;
 80067f2:	bf00      	nop
  }

  return sysclockfreq;
 80067f4:	69bb      	ldr	r3, [r7, #24]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3724      	adds	r7, #36	@ 0x24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	58024400 	.word	0x58024400
 8006808:	03d09000 	.word	0x03d09000
 800680c:	003d0900 	.word	0x003d0900
 8006810:	007a1200 	.word	0x007a1200
 8006814:	46000000 	.word	0x46000000
 8006818:	4c742400 	.word	0x4c742400
 800681c:	4a742400 	.word	0x4a742400
 8006820:	4af42400 	.word	0x4af42400

08006824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800682a:	f7ff fe81 	bl	8006530 <HAL_RCC_GetSysClockFreq>
 800682e:	4602      	mov	r2, r0
 8006830:	4b10      	ldr	r3, [pc, #64]	@ (8006874 <HAL_RCC_GetHCLKFreq+0x50>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	490f      	ldr	r1, [pc, #60]	@ (8006878 <HAL_RCC_GetHCLKFreq+0x54>)
 800683c:	5ccb      	ldrb	r3, [r1, r3]
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	fa22 f303 	lsr.w	r3, r2, r3
 8006846:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006848:	4b0a      	ldr	r3, [pc, #40]	@ (8006874 <HAL_RCC_GetHCLKFreq+0x50>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <HAL_RCC_GetHCLKFreq+0x54>)
 8006852:	5cd3      	ldrb	r3, [r2, r3]
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	fa22 f303 	lsr.w	r3, r2, r3
 800685e:	4a07      	ldr	r2, [pc, #28]	@ (800687c <HAL_RCC_GetHCLKFreq+0x58>)
 8006860:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006862:	4a07      	ldr	r2, [pc, #28]	@ (8006880 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006868:	4b04      	ldr	r3, [pc, #16]	@ (800687c <HAL_RCC_GetHCLKFreq+0x58>)
 800686a:	681b      	ldr	r3, [r3, #0]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	58024400 	.word	0x58024400
 8006878:	080129c8 	.word	0x080129c8
 800687c:	24000004 	.word	0x24000004
 8006880:	24000000 	.word	0x24000000

08006884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006888:	f7ff ffcc 	bl	8006824 <HAL_RCC_GetHCLKFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4904      	ldr	r1, [pc, #16]	@ (80068ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	58024400 	.word	0x58024400
 80068ac:	080129c8 	.word	0x080129c8

080068b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068b4:	f7ff ffb6 	bl	8006824 <HAL_RCC_GetHCLKFreq>
 80068b8:	4602      	mov	r2, r0
 80068ba:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	0a1b      	lsrs	r3, r3, #8
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	4904      	ldr	r1, [pc, #16]	@ (80068d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068c6:	5ccb      	ldrb	r3, [r1, r3]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	58024400 	.word	0x58024400
 80068d8:	080129c8 	.word	0x080129c8

080068dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	223f      	movs	r2, #63	@ 0x3f
 80068ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006958 <HAL_RCC_GetClockConfig+0x7c>)
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0207 	and.w	r2, r3, #7
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80068f8:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <HAL_RCC_GetClockConfig+0x7c>)
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006904:	4b14      	ldr	r3, [pc, #80]	@ (8006958 <HAL_RCC_GetClockConfig+0x7c>)
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f003 020f 	and.w	r2, r3, #15
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006910:	4b11      	ldr	r3, [pc, #68]	@ (8006958 <HAL_RCC_GetClockConfig+0x7c>)
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800691c:	4b0e      	ldr	r3, [pc, #56]	@ (8006958 <HAL_RCC_GetClockConfig+0x7c>)
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006928:	4b0b      	ldr	r3, [pc, #44]	@ (8006958 <HAL_RCC_GetClockConfig+0x7c>)
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006934:	4b08      	ldr	r3, [pc, #32]	@ (8006958 <HAL_RCC_GetClockConfig+0x7c>)
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006940:	4b06      	ldr	r3, [pc, #24]	@ (800695c <HAL_RCC_GetClockConfig+0x80>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 020f 	and.w	r2, r3, #15
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	601a      	str	r2, [r3, #0]
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	58024400 	.word	0x58024400
 800695c:	52002000 	.word	0x52002000

08006960 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006964:	b0ca      	sub	sp, #296	@ 0x128
 8006966:	af00      	add	r7, sp, #0
 8006968:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800696c:	2300      	movs	r3, #0
 800696e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006972:	2300      	movs	r3, #0
 8006974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006984:	2500      	movs	r5, #0
 8006986:	ea54 0305 	orrs.w	r3, r4, r5
 800698a:	d049      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006996:	d02f      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006998:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800699c:	d828      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800699e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069a2:	d01a      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069a8:	d822      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80069ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069b2:	d007      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069b4:	e01c      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b6:	4bb8      	ldr	r3, [pc, #736]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	4ab7      	ldr	r2, [pc, #732]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069c2:	e01a      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	3308      	adds	r3, #8
 80069ca:	2102      	movs	r1, #2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f002 fb61 	bl	8009094 <RCCEx_PLL2_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069d8:	e00f      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	3328      	adds	r3, #40	@ 0x28
 80069e0:	2102      	movs	r1, #2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f002 fc08 	bl	80091f8 <RCCEx_PLL3_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069ee:	e004      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069f6:	e000      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a02:	4ba5      	ldr	r3, [pc, #660]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a10:	4aa1      	ldr	r2, [pc, #644]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a12:	430b      	orrs	r3, r1
 8006a14:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a16:	e003      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006a2c:	f04f 0900 	mov.w	r9, #0
 8006a30:	ea58 0309 	orrs.w	r3, r8, r9
 8006a34:	d047      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d82a      	bhi.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a40:	a201      	add	r2, pc, #4	@ (adr r2, 8006a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a5d 	.word	0x08006a5d
 8006a4c:	08006a6b 	.word	0x08006a6b
 8006a50:	08006a81 	.word	0x08006a81
 8006a54:	08006a9f 	.word	0x08006a9f
 8006a58:	08006a9f 	.word	0x08006a9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	4a8d      	ldr	r2, [pc, #564]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a68:	e01a      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6e:	3308      	adds	r3, #8
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f002 fb0e 	bl	8009094 <RCCEx_PLL2_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a7e:	e00f      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a84:	3328      	adds	r3, #40	@ 0x28
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f002 fbb5 	bl	80091f8 <RCCEx_PLL3_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a94:	e004      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aac:	f023 0107 	bic.w	r1, r3, #7
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab6:	4a78      	ldr	r2, [pc, #480]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8006abc:	e003      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006ad2:	f04f 0b00 	mov.w	fp, #0
 8006ad6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ada:	d04c      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae6:	d030      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aec:	d829      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006af0:	d02d      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006af4:	d825      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006af6:	2b80      	cmp	r3, #128	@ 0x80
 8006af8:	d018      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006afa:	2b80      	cmp	r3, #128	@ 0x80
 8006afc:	d821      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006b02:	2b40      	cmp	r3, #64	@ 0x40
 8006b04:	d007      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006b06:	e01c      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b08:	4b63      	ldr	r3, [pc, #396]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	4a62      	ldr	r2, [pc, #392]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b14:	e01c      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f002 fab8 	bl	8009094 <RCCEx_PLL2_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b2a:	e011      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	3328      	adds	r3, #40	@ 0x28
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f002 fb5f 	bl	80091f8 <RCCEx_PLL3_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b40:	e006      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b48:	e002      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b58:	4b4f      	ldr	r3, [pc, #316]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b66:	4a4c      	ldr	r2, [pc, #304]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b6c:	e003      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006b82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006b8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006b90:	460b      	mov	r3, r1
 8006b92:	4313      	orrs	r3, r2
 8006b94:	d053      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ba2:	d035      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ba4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ba8:	d82e      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006baa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bae:	d031      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006bb0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bb4:	d828      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bba:	d01a      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bc0:	d822      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bca:	d007      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006bcc:	e01c      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bce:	4b32      	ldr	r3, [pc, #200]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd2:	4a31      	ldr	r2, [pc, #196]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bda:	e01c      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be0:	3308      	adds	r3, #8
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f002 fa55 	bl	8009094 <RCCEx_PLL2_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006bf0:	e011      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	3328      	adds	r3, #40	@ 0x28
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f002 fafc 	bl	80091f8 <RCCEx_PLL3_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c06:	e006      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c0e:	e002      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c22:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d056      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c6a:	d038      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c70:	d831      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c76:	d034      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006c78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c7c:	d82b      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c82:	d01d      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c88:	d825      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d006      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c92:	d00a      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c94:	e01f      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c9c:	4ba2      	ldr	r3, [pc, #648]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	4aa1      	ldr	r2, [pc, #644]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ca8:	e01c      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	3308      	adds	r3, #8
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f002 f9ee 	bl	8009094 <RCCEx_PLL2_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cbe:	e011      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	3328      	adds	r3, #40	@ 0x28
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f002 fa95 	bl	80091f8 <RCCEx_PLL3_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cd4:	e006      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006cde:	bf00      	nop
 8006ce0:	e000      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006cec:	4b8e      	ldr	r3, [pc, #568]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006cfc:	4a8a      	ldr	r2, [pc, #552]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d26:	460b      	mov	r3, r1
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	d03a      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d32:	2b30      	cmp	r3, #48	@ 0x30
 8006d34:	d01f      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d36:	2b30      	cmp	r3, #48	@ 0x30
 8006d38:	d819      	bhi.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d00c      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d815      	bhi.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d019      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	d111      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4a:	4b77      	ldr	r3, [pc, #476]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	4a76      	ldr	r2, [pc, #472]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d56:	e011      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	2102      	movs	r1, #2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f002 f997 	bl	8009094 <RCCEx_PLL2_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d6c:	e006      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d74:	e002      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d76:	bf00      	nop
 8006d78:	e000      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d84:	4b68      	ldr	r3, [pc, #416]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d88:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d92:	4a65      	ldr	r2, [pc, #404]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d94:	430b      	orrs	r3, r1
 8006d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d98:	e003      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006dae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006db2:	2300      	movs	r3, #0
 8006db4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006db8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	d051      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dcc:	d035      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dd2:	d82e      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dd8:	d031      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006dda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dde:	d828      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006de4:	d01a      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dea:	d822      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df4:	d007      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006df6:	e01c      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df8:	4b4b      	ldr	r3, [pc, #300]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e04:	e01c      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f002 f940 	bl	8009094 <RCCEx_PLL2_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e1a:	e011      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	3328      	adds	r3, #40	@ 0x28
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f002 f9e7 	bl	80091f8 <RCCEx_PLL3_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e30:	e006      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e38:	e002      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e48:	4b37      	ldr	r3, [pc, #220]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e56:	4a34      	ldr	r2, [pc, #208]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e5c:	e003      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e76:	2300      	movs	r3, #0
 8006e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e80:	460b      	mov	r3, r1
 8006e82:	4313      	orrs	r3, r2
 8006e84:	d056      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e90:	d033      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006e92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e96:	d82c      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e9c:	d02f      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006e9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ea2:	d826      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ea4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ea8:	d02b      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006eaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006eae:	d820      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb4:	d012      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006eb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eba:	d81a      	bhi.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d022      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec4:	d115      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	3308      	adds	r3, #8
 8006ecc:	2101      	movs	r1, #1
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 f8e0 	bl	8009094 <RCCEx_PLL2_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006eda:	e015      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee0:	3328      	adds	r3, #40	@ 0x28
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f002 f987 	bl	80091f8 <RCCEx_PLL3_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e00a      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ef8:	e006      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006efa:	bf00      	nop
 8006efc:	e004      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006efe:	bf00      	nop
 8006f00:	e002      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f02:	bf00      	nop
 8006f04:	e000      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f10:	4b05      	ldr	r3, [pc, #20]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f1e:	4a02      	ldr	r2, [pc, #8]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f24:	e006      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006f26:	bf00      	nop
 8006f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d055      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f60:	d033      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f66:	d82c      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6c:	d02f      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f72:	d826      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f78:	d02b      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006f7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f7e:	d820      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f84:	d012      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f8a:	d81a      	bhi.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d022      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f94:	d115      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f002 f878 	bl	8009094 <RCCEx_PLL2_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006faa:	e015      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb0:	3328      	adds	r3, #40	@ 0x28
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 f91f 	bl	80091f8 <RCCEx_PLL3_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fc0:	e00a      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fc8:	e006      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fca:	bf00      	nop
 8006fcc:	e004      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fce:	bf00      	nop
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fd2:	bf00      	nop
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10b      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006fe0:	4ba3      	ldr	r3, [pc, #652]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ff0:	4a9f      	ldr	r2, [pc, #636]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ff6:	e003      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800700c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007010:	2300      	movs	r3, #0
 8007012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800701a:	460b      	mov	r3, r1
 800701c:	4313      	orrs	r3, r2
 800701e:	d037      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800702a:	d00e      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800702c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007030:	d816      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800703a:	d111      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703c:	4b8c      	ldr	r3, [pc, #560]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	4a8b      	ldr	r2, [pc, #556]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007048:	e00f      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704e:	3308      	adds	r3, #8
 8007050:	2101      	movs	r1, #1
 8007052:	4618      	mov	r0, r3
 8007054:	f002 f81e 	bl	8009094 <RCCEx_PLL2_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800705e:	e004      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007066:	e000      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007072:	4b7f      	ldr	r3, [pc, #508]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007076:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007080:	4a7b      	ldr	r2, [pc, #492]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007082:	430b      	orrs	r3, r1
 8007084:	6513      	str	r3, [r2, #80]	@ 0x50
 8007086:	e003      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800709c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	d039      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d81c      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80070ba:	a201      	add	r2, pc, #4	@ (adr r2, 80070c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070fd 	.word	0x080070fd
 80070c4:	080070d1 	.word	0x080070d1
 80070c8:	080070df 	.word	0x080070df
 80070cc:	080070fd 	.word	0x080070fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d0:	4b67      	ldr	r3, [pc, #412]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d4:	4a66      	ldr	r2, [pc, #408]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070dc:	e00f      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e2:	3308      	adds	r3, #8
 80070e4:	2102      	movs	r1, #2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 ffd4 	bl	8009094 <RCCEx_PLL2_Config>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070f2:	e004      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070fa:	e000      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80070fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007106:	4b5a      	ldr	r3, [pc, #360]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800710a:	f023 0103 	bic.w	r1, r3, #3
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007114:	4a56      	ldr	r2, [pc, #344]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007116:	430b      	orrs	r3, r1
 8007118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800711a:	e003      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007134:	2300      	movs	r3, #0
 8007136:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800713a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800713e:	460b      	mov	r3, r1
 8007140:	4313      	orrs	r3, r2
 8007142:	f000 809f 	beq.w	8007284 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007146:	4b4b      	ldr	r3, [pc, #300]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a4a      	ldr	r2, [pc, #296]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007152:	f7fa fe9b 	bl	8001e8c <HAL_GetTick>
 8007156:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800715a:	e00b      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800715c:	f7fa fe96 	bl	8001e8c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b64      	cmp	r3, #100	@ 0x64
 800716a:	d903      	bls.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007172:	e005      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007174:	4b3f      	ldr	r3, [pc, #252]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0ed      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007184:	2b00      	cmp	r3, #0
 8007186:	d179      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007188:	4b39      	ldr	r3, [pc, #228]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800718a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007194:	4053      	eors	r3, r2
 8007196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800719a:	2b00      	cmp	r3, #0
 800719c:	d015      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800719e:	4b34      	ldr	r3, [pc, #208]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071aa:	4b31      	ldr	r3, [pc, #196]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ae:	4a30      	ldr	r2, [pc, #192]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071b6:	4b2e      	ldr	r3, [pc, #184]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071c2:	4a2b      	ldr	r2, [pc, #172]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d6:	d118      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fa fe58 	bl	8001e8c <HAL_GetTick>
 80071dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071e0:	e00d      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e2:	f7fa fe53 	bl	8001e8c <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80071ec:	1ad2      	subs	r2, r2, r3
 80071ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d903      	bls.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80071fc:	e005      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0eb      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800720a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800720e:	2b00      	cmp	r3, #0
 8007210:	d129      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800721a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800721e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007222:	d10e      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007224:	4b12      	ldr	r3, [pc, #72]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007230:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007234:	091a      	lsrs	r2, r3, #4
 8007236:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007238:	4013      	ands	r3, r2
 800723a:	4a0d      	ldr	r2, [pc, #52]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800723c:	430b      	orrs	r3, r1
 800723e:	6113      	str	r3, [r2, #16]
 8007240:	e005      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007242:	4b0b      	ldr	r3, [pc, #44]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	4a0a      	ldr	r2, [pc, #40]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007248:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800724c:	6113      	str	r3, [r2, #16]
 800724e:	4b08      	ldr	r3, [pc, #32]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007250:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800725a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800725e:	4a04      	ldr	r2, [pc, #16]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007260:	430b      	orrs	r3, r1
 8007262:	6713      	str	r3, [r2, #112]	@ 0x70
 8007264:	e00e      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800726e:	e009      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007270:	58024400 	.word	0x58024400
 8007274:	58024800 	.word	0x58024800
 8007278:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f002 0301 	and.w	r3, r2, #1
 8007290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007294:	2300      	movs	r3, #0
 8007296:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800729a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800729e:	460b      	mov	r3, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	f000 8089 	beq.w	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072ac:	2b28      	cmp	r3, #40	@ 0x28
 80072ae:	d86b      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80072b0:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	08007391 	.word	0x08007391
 80072bc:	08007389 	.word	0x08007389
 80072c0:	08007389 	.word	0x08007389
 80072c4:	08007389 	.word	0x08007389
 80072c8:	08007389 	.word	0x08007389
 80072cc:	08007389 	.word	0x08007389
 80072d0:	08007389 	.word	0x08007389
 80072d4:	08007389 	.word	0x08007389
 80072d8:	0800735d 	.word	0x0800735d
 80072dc:	08007389 	.word	0x08007389
 80072e0:	08007389 	.word	0x08007389
 80072e4:	08007389 	.word	0x08007389
 80072e8:	08007389 	.word	0x08007389
 80072ec:	08007389 	.word	0x08007389
 80072f0:	08007389 	.word	0x08007389
 80072f4:	08007389 	.word	0x08007389
 80072f8:	08007373 	.word	0x08007373
 80072fc:	08007389 	.word	0x08007389
 8007300:	08007389 	.word	0x08007389
 8007304:	08007389 	.word	0x08007389
 8007308:	08007389 	.word	0x08007389
 800730c:	08007389 	.word	0x08007389
 8007310:	08007389 	.word	0x08007389
 8007314:	08007389 	.word	0x08007389
 8007318:	08007391 	.word	0x08007391
 800731c:	08007389 	.word	0x08007389
 8007320:	08007389 	.word	0x08007389
 8007324:	08007389 	.word	0x08007389
 8007328:	08007389 	.word	0x08007389
 800732c:	08007389 	.word	0x08007389
 8007330:	08007389 	.word	0x08007389
 8007334:	08007389 	.word	0x08007389
 8007338:	08007391 	.word	0x08007391
 800733c:	08007389 	.word	0x08007389
 8007340:	08007389 	.word	0x08007389
 8007344:	08007389 	.word	0x08007389
 8007348:	08007389 	.word	0x08007389
 800734c:	08007389 	.word	0x08007389
 8007350:	08007389 	.word	0x08007389
 8007354:	08007389 	.word	0x08007389
 8007358:	08007391 	.word	0x08007391
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007360:	3308      	adds	r3, #8
 8007362:	2101      	movs	r1, #1
 8007364:	4618      	mov	r0, r3
 8007366:	f001 fe95 	bl	8009094 <RCCEx_PLL2_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007370:	e00f      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007376:	3328      	adds	r3, #40	@ 0x28
 8007378:	2101      	movs	r1, #1
 800737a:	4618      	mov	r0, r3
 800737c:	f001 ff3c 	bl	80091f8 <RCCEx_PLL3_Config>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007386:	e004      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800738e:	e000      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10a      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800739a:	4bbf      	ldr	r3, [pc, #764]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800739c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800739e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80073a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073a8:	4abb      	ldr	r2, [pc, #748]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073aa:	430b      	orrs	r3, r1
 80073ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80073ae:	e003      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f002 0302 	and.w	r3, r2, #2
 80073c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073c8:	2300      	movs	r3, #0
 80073ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80073d2:	460b      	mov	r3, r1
 80073d4:	4313      	orrs	r3, r2
 80073d6:	d041      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d824      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80073e2:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007435 	.word	0x08007435
 80073ec:	08007401 	.word	0x08007401
 80073f0:	08007417 	.word	0x08007417
 80073f4:	08007435 	.word	0x08007435
 80073f8:	08007435 	.word	0x08007435
 80073fc:	08007435 	.word	0x08007435
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007404:	3308      	adds	r3, #8
 8007406:	2101      	movs	r1, #1
 8007408:	4618      	mov	r0, r3
 800740a:	f001 fe43 	bl	8009094 <RCCEx_PLL2_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007414:	e00f      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	3328      	adds	r3, #40	@ 0x28
 800741c:	2101      	movs	r1, #1
 800741e:	4618      	mov	r0, r3
 8007420:	f001 feea 	bl	80091f8 <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800742a:	e004      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007432:	e000      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800743e:	4b96      	ldr	r3, [pc, #600]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007442:	f023 0107 	bic.w	r1, r3, #7
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800744c:	4a92      	ldr	r2, [pc, #584]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800744e:	430b      	orrs	r3, r1
 8007450:	6553      	str	r3, [r2, #84]	@ 0x54
 8007452:	e003      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f002 0304 	and.w	r3, r2, #4
 8007468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800746c:	2300      	movs	r3, #0
 800746e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007472:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007476:	460b      	mov	r3, r1
 8007478:	4313      	orrs	r3, r2
 800747a:	d044      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007484:	2b05      	cmp	r3, #5
 8007486:	d825      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074dd 	.word	0x080074dd
 8007494:	080074a9 	.word	0x080074a9
 8007498:	080074bf 	.word	0x080074bf
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074dd 	.word	0x080074dd
 80074a4:	080074dd 	.word	0x080074dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	3308      	adds	r3, #8
 80074ae:	2101      	movs	r1, #1
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 fdef 	bl	8009094 <RCCEx_PLL2_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074bc:	e00f      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c2:	3328      	adds	r3, #40	@ 0x28
 80074c4:	2101      	movs	r1, #1
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 fe96 	bl	80091f8 <RCCEx_PLL3_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10b      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074e6:	4b6c      	ldr	r3, [pc, #432]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	f023 0107 	bic.w	r1, r3, #7
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074f6:	4a68      	ldr	r2, [pc, #416]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80074fc:	e003      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f002 0320 	and.w	r3, r2, #32
 8007512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007516:	2300      	movs	r3, #0
 8007518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800751c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007520:	460b      	mov	r3, r1
 8007522:	4313      	orrs	r3, r2
 8007524:	d055      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007532:	d033      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007538:	d82c      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	d02f      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007544:	d826      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800754a:	d02b      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800754c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007550:	d820      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007556:	d012      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800755c:	d81a      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d022      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007566:	d115      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756c:	3308      	adds	r3, #8
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f001 fd8f 	bl	8009094 <RCCEx_PLL2_Config>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800757c:	e015      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	3328      	adds	r3, #40	@ 0x28
 8007584:	2102      	movs	r1, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fe36 	bl	80091f8 <RCCEx_PLL3_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007592:	e00a      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800759a:	e006      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800759c:	bf00      	nop
 800759e:	e004      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075a0:	bf00      	nop
 80075a2:	e002      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10b      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075b2:	4b39      	ldr	r3, [pc, #228]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c2:	4a35      	ldr	r2, [pc, #212]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80075de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d058      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80075fe:	d033      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007600:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007604:	d82c      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800760a:	d02f      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800760c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007610:	d826      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007616:	d02b      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800761c:	d820      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800761e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007622:	d012      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007628:	d81a      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d022      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800762e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007632:	d115      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	3308      	adds	r3, #8
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fd29 	bl	8009094 <RCCEx_PLL2_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007648:	e015      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	3328      	adds	r3, #40	@ 0x28
 8007650:	2102      	movs	r1, #2
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fdd0 	bl	80091f8 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800765e:	e00a      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007666:	e006      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007668:	bf00      	nop
 800766a:	e004      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800766c:	bf00      	nop
 800766e:	e002      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10e      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800767e:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800768e:	4a02      	ldr	r2, [pc, #8]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007690:	430b      	orrs	r3, r1
 8007692:	6593      	str	r3, [r2, #88]	@ 0x58
 8007694:	e006      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80076b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80076be:	460b      	mov	r3, r1
 80076c0:	4313      	orrs	r3, r2
 80076c2:	d055      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80076d0:	d033      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80076d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80076d6:	d82c      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076dc:	d02f      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80076de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076e2:	d826      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80076e8:	d02b      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80076ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80076ee:	d820      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076f4:	d012      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80076f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076fa:	d81a      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d022      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007704:	d115      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	3308      	adds	r3, #8
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f001 fcc0 	bl	8009094 <RCCEx_PLL2_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800771a:	e015      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	3328      	adds	r3, #40	@ 0x28
 8007722:	2102      	movs	r1, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fd67 	bl	80091f8 <RCCEx_PLL3_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007730:	e00a      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007738:	e006      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800773a:	bf00      	nop
 800773c:	e004      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800773e:	bf00      	nop
 8007740:	e002      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007742:	bf00      	nop
 8007744:	e000      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10b      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007750:	4ba1      	ldr	r3, [pc, #644]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007754:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007760:	4a9d      	ldr	r2, [pc, #628]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007762:	430b      	orrs	r3, r1
 8007764:	6593      	str	r3, [r2, #88]	@ 0x58
 8007766:	e003      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f002 0308 	and.w	r3, r2, #8
 800777c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007780:	2300      	movs	r3, #0
 8007782:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007786:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800778a:	460b      	mov	r3, r1
 800778c:	4313      	orrs	r3, r2
 800778e:	d01e      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800779c:	d10c      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a2:	3328      	adds	r3, #40	@ 0x28
 80077a4:	2102      	movs	r1, #2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 fd26 	bl	80091f8 <RCCEx_PLL3_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077b8:	4b87      	ldr	r3, [pc, #540]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c8:	4a83      	ldr	r2, [pc, #524]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ca:	430b      	orrs	r3, r1
 80077cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f002 0310 	and.w	r3, r2, #16
 80077da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077de:	2300      	movs	r3, #0
 80077e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077e8:	460b      	mov	r3, r1
 80077ea:	4313      	orrs	r3, r2
 80077ec:	d01e      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077fa:	d10c      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007800:	3328      	adds	r3, #40	@ 0x28
 8007802:	2102      	movs	r1, #2
 8007804:	4618      	mov	r0, r3
 8007806:	f001 fcf7 	bl	80091f8 <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007816:	4b70      	ldr	r3, [pc, #448]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800781e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007826:	4a6c      	ldr	r2, [pc, #432]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007828:	430b      	orrs	r3, r1
 800782a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800783c:	2300      	movs	r3, #0
 800783e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007842:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007846:	460b      	mov	r3, r1
 8007848:	4313      	orrs	r3, r2
 800784a:	d03e      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007858:	d022      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800785a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800785e:	d81b      	bhi.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007868:	d00b      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800786a:	e015      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007870:	3308      	adds	r3, #8
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fc0d 	bl	8009094 <RCCEx_PLL2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007880:	e00f      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007886:	3328      	adds	r3, #40	@ 0x28
 8007888:	2102      	movs	r1, #2
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fcb4 	bl	80091f8 <RCCEx_PLL3_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007896:	e004      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80078a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078aa:	4b4b      	ldr	r3, [pc, #300]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078ba:	4a47      	ldr	r2, [pc, #284]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078bc:	430b      	orrs	r3, r1
 80078be:	6593      	str	r3, [r2, #88]	@ 0x58
 80078c0:	e003      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80078d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078d8:	2300      	movs	r3, #0
 80078da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80078e0:	460b      	mov	r3, r1
 80078e2:	4313      	orrs	r3, r2
 80078e4:	d03b      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80078e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078f2:	d01f      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80078f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078f8:	d818      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80078fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078fe:	d003      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007900:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007904:	d007      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007906:	e011      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007908:	4b33      	ldr	r3, [pc, #204]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800790a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790c:	4a32      	ldr	r2, [pc, #200]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800790e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007914:	e00f      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791a:	3328      	adds	r3, #40	@ 0x28
 800791c:	2101      	movs	r1, #1
 800791e:	4618      	mov	r0, r3
 8007920:	f001 fc6a 	bl	80091f8 <RCCEx_PLL3_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800792a:	e004      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007932:	e000      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800793e:	4b26      	ldr	r3, [pc, #152]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007942:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800794e:	4a22      	ldr	r2, [pc, #136]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007950:	430b      	orrs	r3, r1
 8007952:	6553      	str	r3, [r2, #84]	@ 0x54
 8007954:	e003      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800795a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800796a:	673b      	str	r3, [r7, #112]	@ 0x70
 800796c:	2300      	movs	r3, #0
 800796e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007970:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007974:	460b      	mov	r3, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	d034      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007988:	d007      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800798a:	e011      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800798c:	4b12      	ldr	r3, [pc, #72]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800798e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007990:	4a11      	ldr	r2, [pc, #68]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007998:	e00e      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799e:	3308      	adds	r3, #8
 80079a0:	2102      	movs	r1, #2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fb76 	bl	8009094 <RCCEx_PLL2_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079ae:	e003      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10d      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ce:	4a02      	ldr	r2, [pc, #8]	@ (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d0:	430b      	orrs	r3, r1
 80079d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079d4:	e006      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80079d6:	bf00      	nop
 80079d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80079f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079f2:	2300      	movs	r3, #0
 80079f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d00c      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	3328      	adds	r3, #40	@ 0x28
 8007a06:	2102      	movs	r1, #2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f001 fbf5 	bl	80091f8 <RCCEx_PLL3_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a28:	2300      	movs	r3, #0
 8007a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a30:	460b      	mov	r3, r1
 8007a32:	4313      	orrs	r3, r2
 8007a34:	d038      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a42:	d018      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a48:	d811      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a4e:	d014      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	d80b      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d011      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a5e:	d106      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a60:	4bc3      	ldr	r3, [pc, #780]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	4ac2      	ldr	r2, [pc, #776]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a6c:	e008      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a74:	e004      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10b      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a88:	4bb9      	ldr	r3, [pc, #740]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a98:	4ab5      	ldr	r2, [pc, #724]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a9e:	e003      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	d009      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ac4:	4baa      	ldr	r3, [pc, #680]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad2:	4aa7      	ldr	r2, [pc, #668]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007aee:	460b      	mov	r3, r1
 8007af0:	4313      	orrs	r3, r2
 8007af2:	d00a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007af4:	4b9e      	ldr	r3, [pc, #632]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b04:	4a9a      	ldr	r2, [pc, #616]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b18:	2300      	movs	r3, #0
 8007b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b20:	460b      	mov	r3, r1
 8007b22:	4313      	orrs	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b26:	4b92      	ldr	r3, [pc, #584]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b34:	4a8e      	ldr	r2, [pc, #568]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b36:	430b      	orrs	r3, r1
 8007b38:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b48:	2300      	movs	r3, #0
 8007b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d00e      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b56:	4b86      	ldr	r3, [pc, #536]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	4a85      	ldr	r2, [pc, #532]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b60:	6113      	str	r3, [r2, #16]
 8007b62:	4b83      	ldr	r3, [pc, #524]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b64:	6919      	ldr	r1, [r3, #16]
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b6e:	4a80      	ldr	r2, [pc, #512]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b82:	2300      	movs	r3, #0
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	d009      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b90:	4b77      	ldr	r3, [pc, #476]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b94:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9e:	4a74      	ldr	r2, [pc, #464]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bd0:	4a67      	ldr	r2, [pc, #412]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	2100      	movs	r1, #0
 8007be0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007be8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007bec:	460b      	mov	r3, r1
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	d011      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 fa4a 	bl	8009094 <RCCEx_PLL2_Config>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	6239      	str	r1, [r7, #32]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	d011      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	3308      	adds	r3, #8
 8007c38:	2101      	movs	r1, #1
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fa2a 	bl	8009094 <RCCEx_PLL2_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	2100      	movs	r1, #0
 8007c60:	61b9      	str	r1, [r7, #24]
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	d011      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c76:	3308      	adds	r3, #8
 8007c78:	2102      	movs	r1, #2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 fa0a 	bl	8009094 <RCCEx_PLL2_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6139      	str	r1, [r7, #16]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cac:	460b      	mov	r3, r1
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	d011      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb6:	3328      	adds	r3, #40	@ 0x28
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 fa9c 	bl	80091f8 <RCCEx_PLL3_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	2100      	movs	r1, #0
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cec:	460b      	mov	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	d011      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf6:	3328      	adds	r3, #40	@ 0x28
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fa7c 	bl	80091f8 <RCCEx_PLL3_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6039      	str	r1, [r7, #0]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	d011      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d36:	3328      	adds	r3, #40	@ 0x28
 8007d38:	2102      	movs	r1, #2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 fa5c 	bl	80091f8 <RCCEx_PLL3_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007d56:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e000      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d70:	58024400 	.word	0x58024400

08007d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b090      	sub	sp, #64	@ 0x40
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d82:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007d86:	430b      	orrs	r3, r1
 8007d88:	f040 8094 	bne.w	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007d8c:	4b9e      	ldr	r3, [pc, #632]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	f200 8087 	bhi.w	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007db9 	.word	0x08007db9
 8007da8:	08007de1 	.word	0x08007de1
 8007dac:	08007e09 	.word	0x08007e09
 8007db0:	08007ea5 	.word	0x08007ea5
 8007db4:	08007e31 	.word	0x08007e31
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007db8:	4b93      	ldr	r3, [pc, #588]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dc4:	d108      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f001 f810 	bl	8008df0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd4:	f000 bd45 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ddc:	f000 bd41 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007de0:	4b89      	ldr	r3, [pc, #548]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dec:	d108      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dee:	f107 0318 	add.w	r3, r7, #24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fd54 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dfc:	f000 bd31 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e04:	f000 bd2d 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e08:	4b7f      	ldr	r3, [pc, #508]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e14:	d108      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fe94 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e24:	f000 bd1d 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2c:	f000 bd19 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e30:	4b75      	ldr	r3, [pc, #468]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e38:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e3a:	4b73      	ldr	r3, [pc, #460]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e4c:	4b6e      	ldr	r3, [pc, #440]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	08db      	lsrs	r3, r3, #3
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	4a6d      	ldr	r2, [pc, #436]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e5e:	e01f      	b.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e60:	4b69      	ldr	r3, [pc, #420]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e6c:	d106      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e74:	d102      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e76:	4b66      	ldr	r3, [pc, #408]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e7a:	e011      	b.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e7c:	4b62      	ldr	r3, [pc, #392]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e88:	d106      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e90:	d102      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e92:	4b60      	ldr	r3, [pc, #384]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e96:	e003      	b.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e9c:	f000 bce1 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ea0:	f000 bcdf 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea8:	f000 bcdb 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb0:	f000 bcd7 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	f040 80ad 	bne.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007ec2:	4b51      	ldr	r3, [pc, #324]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007eca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed2:	d056      	beq.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eda:	f200 8090 	bhi.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee2:	f000 8088 	beq.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eea:	f200 8088 	bhi.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	2b80      	cmp	r3, #128	@ 0x80
 8007ef2:	d032      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	2b80      	cmp	r3, #128	@ 0x80
 8007ef8:	f200 8081 	bhi.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	2b40      	cmp	r3, #64	@ 0x40
 8007f06:	d014      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007f08:	e079      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f16:	d108      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 ff67 	bl	8008df0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f26:	f000 bc9c 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2e:	f000 bc98 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f32:	4b35      	ldr	r3, [pc, #212]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f3e:	d108      	bne.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f40:	f107 0318 	add.w	r3, r7, #24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fcab 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f4e:	f000 bc88 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f56:	f000 bc84 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f66:	d108      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fdeb 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f76:	f000 bc74 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f7e:	f000 bc70 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f82:	4b21      	ldr	r3, [pc, #132]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d10c      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	08db      	lsrs	r3, r3, #3
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	4a18      	ldr	r2, [pc, #96]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007faa:	fa22 f303 	lsr.w	r3, r2, r3
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fb0:	e01f      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fb2:	4b15      	ldr	r3, [pc, #84]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fbe:	d106      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fc6:	d102      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fc8:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fcc:	e011      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fce:	4b0e      	ldr	r3, [pc, #56]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fda:	d106      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe2:	d102      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe8:	e003      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fee:	f000 bc38 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ff2:	f000 bc36 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ff6:	4b08      	ldr	r3, [pc, #32]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ffa:	f000 bc32 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008002:	f000 bc2e 	b.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008006:	bf00      	nop
 8008008:	58024400 	.word	0x58024400
 800800c:	03d09000 	.word	0x03d09000
 8008010:	003d0900 	.word	0x003d0900
 8008014:	007a1200 	.word	0x007a1200
 8008018:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800801c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008020:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008024:	430b      	orrs	r3, r1
 8008026:	f040 809c 	bne.w	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800802a:	4b9e      	ldr	r3, [pc, #632]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800802c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800802e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008032:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800803a:	d054      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008042:	f200 808b 	bhi.w	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800804c:	f000 8083 	beq.w	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008056:	f200 8081 	bhi.w	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008060:	d02f      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008068:	d878      	bhi.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008076:	d012      	beq.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008078:	e070      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800807a:	4b8a      	ldr	r3, [pc, #552]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008082:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008086:	d107      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800808c:	4618      	mov	r0, r3
 800808e:	f000 feaf 	bl	8008df0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008096:	e3e4      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800809c:	e3e1      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800809e:	4b81      	ldr	r3, [pc, #516]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080aa:	d107      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ac:	f107 0318 	add.w	r3, r7, #24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fbf5 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ba:	e3d2      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c0:	e3cf      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080c2:	4b78      	ldr	r3, [pc, #480]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ce:	d107      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d0:	f107 030c 	add.w	r3, r7, #12
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fd37 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080de:	e3c0      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e4:	e3bd      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080e6:	4b6f      	ldr	r3, [pc, #444]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080f0:	4b6c      	ldr	r3, [pc, #432]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d10c      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80080fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008102:	4b68      	ldr	r3, [pc, #416]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	08db      	lsrs	r3, r3, #3
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	4a66      	ldr	r2, [pc, #408]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008114:	e01e      	b.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008116:	4b63      	ldr	r3, [pc, #396]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800811e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008122:	d106      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800812a:	d102      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800812c:	4b5f      	ldr	r3, [pc, #380]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008130:	e010      	b.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008132:	4b5c      	ldr	r3, [pc, #368]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800813e:	d106      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008146:	d102      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008148:	4b59      	ldr	r3, [pc, #356]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800814c:	e002      	b.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008152:	e386      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008154:	e385      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008156:	4b57      	ldr	r3, [pc, #348]	@ (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815a:	e382      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008160:	e37f      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008166:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800816a:	430b      	orrs	r3, r1
 800816c:	f040 80a7 	bne.w	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008170:	4b4c      	ldr	r3, [pc, #304]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008174:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008178:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008180:	d055      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008188:	f200 8096 	bhi.w	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800818c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008192:	f000 8084 	beq.w	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800819c:	f200 808c 	bhi.w	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a6:	d030      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ae:	f200 8083 	bhi.w	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d004      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081be:	d012      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80081c0:	e07a      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081c2:	4b38      	ldr	r3, [pc, #224]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ce:	d107      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fe0b 	bl	8008df0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081de:	e340      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e4:	e33d      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081e6:	4b2f      	ldr	r3, [pc, #188]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081f2:	d107      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f4:	f107 0318 	add.w	r3, r7, #24
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fb51 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008202:	e32e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008208:	e32b      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800820a:	4b26      	ldr	r3, [pc, #152]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008216:	d107      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008218:	f107 030c 	add.w	r3, r7, #12
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fc93 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008226:	e31c      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800822c:	e319      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800822e:	4b1d      	ldr	r3, [pc, #116]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008232:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008236:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008238:	4b1a      	ldr	r3, [pc, #104]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b04      	cmp	r3, #4
 8008242:	d10c      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800824a:	4b16      	ldr	r3, [pc, #88]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	08db      	lsrs	r3, r3, #3
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	4a14      	ldr	r2, [pc, #80]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008256:	fa22 f303 	lsr.w	r3, r2, r3
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800825c:	e01e      	b.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800825e:	4b11      	ldr	r3, [pc, #68]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800826a:	d106      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800826c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008272:	d102      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008274:	4b0d      	ldr	r3, [pc, #52]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008278:	e010      	b.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800827a:	4b0a      	ldr	r3, [pc, #40]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008286:	d106      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800828e:	d102      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008290:	4b07      	ldr	r3, [pc, #28]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008294:	e002      	b.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800829a:	e2e2      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800829c:	e2e1      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800829e:	4b05      	ldr	r3, [pc, #20]	@ (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a2:	e2de      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082a4:	58024400 	.word	0x58024400
 80082a8:	03d09000 	.word	0x03d09000
 80082ac:	003d0900 	.word	0x003d0900
 80082b0:	007a1200 	.word	0x007a1200
 80082b4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082bc:	e2d1      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80082be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082c2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80082c6:	430b      	orrs	r3, r1
 80082c8:	f040 809c 	bne.w	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80082cc:	4b93      	ldr	r3, [pc, #588]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80082d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082dc:	d054      	beq.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80082de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082e4:	f200 808b 	bhi.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082ee:	f000 8083 	beq.w	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082f8:	f200 8081 	bhi.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008302:	d02f      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800830a:	d878      	bhi.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008318:	d012      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800831a:	e070      	b.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800831c:	4b7f      	ldr	r3, [pc, #508]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008328:	d107      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800832a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fd5e 	bl	8008df0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008338:	e293      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833e:	e290      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008340:	4b76      	ldr	r3, [pc, #472]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800834c:	d107      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800834e:	f107 0318 	add.w	r3, r7, #24
 8008352:	4618      	mov	r0, r3
 8008354:	f000 faa4 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835c:	e281      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008362:	e27e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008364:	4b6d      	ldr	r3, [pc, #436]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800836c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008370:	d107      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008372:	f107 030c 	add.w	r3, r7, #12
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fbe6 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008380:	e26f      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008386:	e26c      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008388:	4b64      	ldr	r3, [pc, #400]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800838a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800838c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008392:	4b62      	ldr	r3, [pc, #392]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b04      	cmp	r3, #4
 800839c:	d10c      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800839e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083a4:	4b5d      	ldr	r3, [pc, #372]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	08db      	lsrs	r3, r3, #3
 80083aa:	f003 0303 	and.w	r3, r3, #3
 80083ae:	4a5c      	ldr	r2, [pc, #368]	@ (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80083b0:	fa22 f303 	lsr.w	r3, r2, r3
 80083b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083b6:	e01e      	b.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083b8:	4b58      	ldr	r3, [pc, #352]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083c4:	d106      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80083c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083cc:	d102      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083ce:	4b55      	ldr	r3, [pc, #340]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083d2:	e010      	b.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083d4:	4b51      	ldr	r3, [pc, #324]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e0:	d106      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80083e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e8:	d102      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ee:	e002      	b.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083f4:	e235      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083f6:	e234      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083f8:	4b4c      	ldr	r3, [pc, #304]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083fc:	e231      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008402:	e22e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008408:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800840c:	430b      	orrs	r3, r1
 800840e:	f040 808f 	bne.w	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008412:	4b42      	ldr	r3, [pc, #264]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008416:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800841a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008422:	d06b      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008426:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800842a:	d874      	bhi.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800842c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008432:	d056      	beq.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800843a:	d86c      	bhi.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008442:	d03b      	beq.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008446:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800844a:	d864      	bhi.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800844c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008452:	d021      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800845a:	d85c      	bhi.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d004      	beq.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008468:	d004      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800846a:	e054      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800846c:	f7fe fa0a 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 8008470:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008472:	e1f6      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008474:	4b29      	ldr	r3, [pc, #164]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800847c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008480:	d107      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008482:	f107 0318 	add.w	r3, r7, #24
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fa0a 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008490:	e1e7      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008496:	e1e4      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008498:	4b20      	ldr	r3, [pc, #128]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a4:	d107      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a6:	f107 030c 	add.w	r3, r7, #12
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fb4c 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b4:	e1d5      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ba:	e1d2      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084bc:	4b17      	ldr	r3, [pc, #92]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d109      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084c8:	4b14      	ldr	r3, [pc, #80]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	08db      	lsrs	r3, r3, #3
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	4a13      	ldr	r2, [pc, #76]	@ (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
 80084d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084da:	e1c2      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e0:	e1bf      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084e2:	4b0e      	ldr	r3, [pc, #56]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ee:	d102      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80084f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f4:	e1b5      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fa:	e1b2      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084fc:	4b07      	ldr	r3, [pc, #28]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008508:	d102      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800850a:	4b07      	ldr	r3, [pc, #28]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800850c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800850e:	e1a8      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008514:	e1a5      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800851a:	e1a2      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800851c:	58024400 	.word	0x58024400
 8008520:	03d09000 	.word	0x03d09000
 8008524:	003d0900 	.word	0x003d0900
 8008528:	007a1200 	.word	0x007a1200
 800852c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008534:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008538:	430b      	orrs	r3, r1
 800853a:	d173      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800853c:	4b9c      	ldr	r3, [pc, #624]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800853e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008544:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800854c:	d02f      	beq.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800854e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008554:	d863      	bhi.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800855c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008562:	d012      	beq.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008564:	e05b      	b.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008566:	4b92      	ldr	r3, [pc, #584]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800856e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008572:	d107      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008574:	f107 0318 	add.w	r3, r7, #24
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f991 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008582:	e16e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008588:	e16b      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800858a:	4b89      	ldr	r3, [pc, #548]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008596:	d107      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fad3 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a6:	e15c      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ac:	e159      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085ae:	4b80      	ldr	r3, [pc, #512]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085b8:	4b7d      	ldr	r3, [pc, #500]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d10c      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80085c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d109      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ca:	4b79      	ldr	r3, [pc, #484]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	08db      	lsrs	r3, r3, #3
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	4a77      	ldr	r2, [pc, #476]	@ (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80085d6:	fa22 f303 	lsr.w	r3, r2, r3
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085dc:	e01e      	b.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085de:	4b74      	ldr	r3, [pc, #464]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ea:	d106      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80085ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085f2:	d102      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085f4:	4b70      	ldr	r3, [pc, #448]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085f8:	e010      	b.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085fa:	4b6d      	ldr	r3, [pc, #436]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008606:	d106      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800860e:	d102      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008610:	4b6a      	ldr	r3, [pc, #424]	@ (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008614:	e002      	b.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800861a:	e122      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800861c:	e121      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008622:	e11e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008628:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800862c:	430b      	orrs	r3, r1
 800862e:	d133      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008630:	4b5f      	ldr	r3, [pc, #380]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008638:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800863a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008646:	d012      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008648:	e023      	b.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800864a:	4b59      	ldr	r3, [pc, #356]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008656:	d107      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fbc7 	bl	8008df0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008666:	e0fc      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866c:	e0f9      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800866e:	4b50      	ldr	r3, [pc, #320]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800867a:	d107      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867c:	f107 0318 	add.w	r3, r7, #24
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f90d 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868a:	e0ea      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008690:	e0e7      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008696:	e0e4      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80086a0:	430b      	orrs	r3, r1
 80086a2:	f040 808d 	bne.w	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80086a6:	4b42      	ldr	r3, [pc, #264]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80086ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086b6:	d06b      	beq.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80086b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086be:	d874      	bhi.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c6:	d056      	beq.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80086c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ce:	d86c      	bhi.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086d6:	d03b      	beq.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80086d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086de:	d864      	bhi.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086e6:	d021      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ee:	d85c      	bhi.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086fc:	d004      	beq.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80086fe:	e054      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008700:	f000 f8b8 	bl	8008874 <HAL_RCCEx_GetD3PCLK1Freq>
 8008704:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008706:	e0ac      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008708:	4b29      	ldr	r3, [pc, #164]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008714:	d107      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008716:	f107 0318 	add.w	r3, r7, #24
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f8c0 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008724:	e09d      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872a:	e09a      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800872c:	4b20      	ldr	r3, [pc, #128]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008738:	d107      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fa02 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008748:	e08b      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874e:	e088      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008750:	4b17      	ldr	r3, [pc, #92]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b04      	cmp	r3, #4
 800875a:	d109      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800875c:	4b14      	ldr	r3, [pc, #80]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	08db      	lsrs	r3, r3, #3
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	4a13      	ldr	r2, [pc, #76]	@ (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008768:	fa22 f303 	lsr.w	r3, r2, r3
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800876e:	e078      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008774:	e075      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008776:	4b0e      	ldr	r3, [pc, #56]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800877e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008782:	d102      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008788:	e06b      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800878e:	e068      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008790:	4b07      	ldr	r3, [pc, #28]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800879c:	d102      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800879e:	4b07      	ldr	r3, [pc, #28]	@ (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a2:	e05e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a8:	e05b      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ae:	e058      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087b0:	58024400 	.word	0x58024400
 80087b4:	03d09000 	.word	0x03d09000
 80087b8:	003d0900 	.word	0x003d0900
 80087bc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80087c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80087c8:	430b      	orrs	r3, r1
 80087ca:	d148      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80087cc:	4b27      	ldr	r3, [pc, #156]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087dc:	d02a      	beq.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80087de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087e4:	d838      	bhi.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80087e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087f2:	d00d      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80087f4:	e030      	b.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087f6:	4b1d      	ldr	r3, [pc, #116]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008802:	d102      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008804:	4b1a      	ldr	r3, [pc, #104]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008808:	e02b      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880e:	e028      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008810:	4b16      	ldr	r3, [pc, #88]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008818:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800881c:	d107      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800881e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fae4 	bl	8008df0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800882c:	e019      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008832:	e016      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008834:	4b0d      	ldr	r3, [pc, #52]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800883c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008840:	d107      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008842:	f107 0318 	add.w	r3, r7, #24
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f82a 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008850:	e007      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008856:	e004      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800885c:	e001      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008864:	4618      	mov	r0, r3
 8008866:	3740      	adds	r7, #64	@ 0x40
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58024400 	.word	0x58024400
 8008870:	007a1200 	.word	0x007a1200

08008874 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008878:	f7fd ffd4 	bl	8006824 <HAL_RCC_GetHCLKFreq>
 800887c:	4602      	mov	r2, r0
 800887e:	4b06      	ldr	r3, [pc, #24]	@ (8008898 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	091b      	lsrs	r3, r3, #4
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	4904      	ldr	r1, [pc, #16]	@ (800889c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800888a:	5ccb      	ldrb	r3, [r1, r3]
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008894:	4618      	mov	r0, r3
 8008896:	bd80      	pop	{r7, pc}
 8008898:	58024400 	.word	0x58024400
 800889c:	080129c8 	.word	0x080129c8

080088a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b089      	sub	sp, #36	@ 0x24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088a8:	4ba1      	ldr	r3, [pc, #644]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80088b2:	4b9f      	ldr	r3, [pc, #636]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b6:	0b1b      	lsrs	r3, r3, #12
 80088b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088be:	4b9c      	ldr	r3, [pc, #624]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c2:	091b      	lsrs	r3, r3, #4
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80088ca:	4b99      	ldr	r3, [pc, #612]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 8111 	beq.w	8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f000 8083 	beq.w	80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f200 80a1 	bhi.w	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d056      	beq.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800890a:	e099      	b.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800890c:	4b88      	ldr	r3, [pc, #544]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	d02d      	beq.n	8008974 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008918:	4b85      	ldr	r3, [pc, #532]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	08db      	lsrs	r3, r3, #3
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	4a84      	ldr	r2, [pc, #528]	@ (8008b34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
 8008928:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008942:	4b7b      	ldr	r3, [pc, #492]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008952:	ed97 6a03 	vldr	s12, [r7, #12]
 8008956:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800895a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008972:	e087      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b6a      	ldr	r3, [pc, #424]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a03 	vldr	s12, [r7, #12]
 800899a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089b6:	e065      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b59      	ldr	r3, [pc, #356]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089fa:	e043      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b48      	ldr	r3, [pc, #288]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3e:	e021      	b.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b37      	ldr	r3, [pc, #220]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008a84:	4b2a      	ldr	r3, [pc, #168]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a88:	0a5b      	lsrs	r3, r3, #9
 8008a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aaa:	ee17 2a90 	vmov	r2, s15
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab6:	0c1b      	lsrs	r3, r3, #16
 8008ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008abc:	ee07 3a90 	vmov	s15, r3
 8008ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad8:	ee17 2a90 	vmov	r2, s15
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ae0:	4b13      	ldr	r3, [pc, #76]	@ (8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	0e1b      	lsrs	r3, r3, #24
 8008ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b06:	ee17 2a90 	vmov	r2, s15
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b0e:	e008      	b.n	8008b22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	609a      	str	r2, [r3, #8]
}
 8008b22:	bf00      	nop
 8008b24:	3724      	adds	r7, #36	@ 0x24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	58024400 	.word	0x58024400
 8008b34:	03d09000 	.word	0x03d09000
 8008b38:	46000000 	.word	0x46000000
 8008b3c:	4c742400 	.word	0x4c742400
 8008b40:	4a742400 	.word	0x4a742400
 8008b44:	4af42400 	.word	0x4af42400

08008b48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b089      	sub	sp, #36	@ 0x24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b50:	4ba1      	ldr	r3, [pc, #644]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b5a:	4b9f      	ldr	r3, [pc, #636]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5e:	0d1b      	lsrs	r3, r3, #20
 8008b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b66:	4b9c      	ldr	r3, [pc, #624]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008b72:	4b99      	ldr	r3, [pc, #612]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b76:	08db      	lsrs	r3, r3, #3
 8008b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	fb02 f303 	mul.w	r3, r2, r3
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8111 	beq.w	8008db8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	f000 8083 	beq.w	8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	f200 80a1 	bhi.w	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d056      	beq.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008bb2:	e099      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bb4:	4b88      	ldr	r3, [pc, #544]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d02d      	beq.n	8008c1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bc0:	4b85      	ldr	r3, [pc, #532]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	4a84      	ldr	r2, [pc, #528]	@ (8008ddc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	ee07 3a90 	vmov	s15, r3
 8008bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bea:	4b7b      	ldr	r3, [pc, #492]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c1a:	e087      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c5e:	e065      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c72:	4b59      	ldr	r3, [pc, #356]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ca2:	e043      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b48      	ldr	r3, [pc, #288]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ce6:	e021      	b.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b37      	ldr	r3, [pc, #220]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d30:	0a5b      	lsrs	r3, r3, #9
 8008d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d52:	ee17 2a90 	vmov	r2, s15
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d80:	ee17 2a90 	vmov	r2, s15
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d88:	4b13      	ldr	r3, [pc, #76]	@ (8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8c:	0e1b      	lsrs	r3, r3, #24
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dae:	ee17 2a90 	vmov	r2, s15
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008db6:	e008      	b.n	8008dca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	609a      	str	r2, [r3, #8]
}
 8008dca:	bf00      	nop
 8008dcc:	3724      	adds	r7, #36	@ 0x24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	58024400 	.word	0x58024400
 8008ddc:	03d09000 	.word	0x03d09000
 8008de0:	46000000 	.word	0x46000000
 8008de4:	4c742400 	.word	0x4c742400
 8008de8:	4a742400 	.word	0x4a742400
 8008dec:	4af42400 	.word	0x4af42400

08008df0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b089      	sub	sp, #36	@ 0x24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008df8:	4ba0      	ldr	r3, [pc, #640]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e02:	4b9e      	ldr	r3, [pc, #632]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e06:	091b      	lsrs	r3, r3, #4
 8008e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e0e:	4b9b      	ldr	r3, [pc, #620]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e18:	4b98      	ldr	r3, [pc, #608]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e1c:	08db      	lsrs	r3, r3, #3
 8008e1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	fb02 f303 	mul.w	r3, r2, r3
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8111 	beq.w	800905e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	f000 8083 	beq.w	8008f4a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	f200 80a1 	bhi.w	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d056      	beq.n	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e58:	e099      	b.n	8008f8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e5a:	4b88      	ldr	r3, [pc, #544]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d02d      	beq.n	8008ec2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e66:	4b85      	ldr	r3, [pc, #532]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	08db      	lsrs	r3, r3, #3
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	4a83      	ldr	r2, [pc, #524]	@ (8009080 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e72:	fa22 f303 	lsr.w	r3, r2, r3
 8008e76:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	ee07 3a90 	vmov	s15, r3
 8008e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e90:	4b7a      	ldr	r3, [pc, #488]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ec0:	e087      	b.n	8008fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ecc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009088 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed4:	4b69      	ldr	r3, [pc, #420]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f04:	e065      	b.n	8008fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f10:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800908c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f18:	4b58      	ldr	r3, [pc, #352]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f28:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f48:	e043      	b.n	8008fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f54:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009090 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5c:	4b47      	ldr	r3, [pc, #284]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f70:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f8c:	e021      	b.n	8008fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	ee07 3a90 	vmov	s15, r3
 8008f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f98:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009088 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa0:	4b36      	ldr	r3, [pc, #216]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa8:	ee07 3a90 	vmov	s15, r3
 8008fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009084 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd6:	0a5b      	lsrs	r3, r3, #9
 8008fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ff8:	ee17 2a90 	vmov	r2, s15
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009000:	4b1e      	ldr	r3, [pc, #120]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009004:	0c1b      	lsrs	r3, r3, #16
 8009006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800901a:	edd7 6a07 	vldr	s13, [r7, #28]
 800901e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009026:	ee17 2a90 	vmov	r2, s15
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800902e:	4b13      	ldr	r3, [pc, #76]	@ (800907c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009032:	0e1b      	lsrs	r3, r3, #24
 8009034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009040:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009044:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009048:	edd7 6a07 	vldr	s13, [r7, #28]
 800904c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009054:	ee17 2a90 	vmov	r2, s15
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800905c:	e008      	b.n	8009070 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	609a      	str	r2, [r3, #8]
}
 8009070:	bf00      	nop
 8009072:	3724      	adds	r7, #36	@ 0x24
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	58024400 	.word	0x58024400
 8009080:	03d09000 	.word	0x03d09000
 8009084:	46000000 	.word	0x46000000
 8009088:	4c742400 	.word	0x4c742400
 800908c:	4a742400 	.word	0x4a742400
 8009090:	4af42400 	.word	0x4af42400

08009094 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090a2:	4b53      	ldr	r3, [pc, #332]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80090a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d101      	bne.n	80090b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e099      	b.n	80091e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090b2:	4b4f      	ldr	r3, [pc, #316]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a4e      	ldr	r2, [pc, #312]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80090b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090be:	f7f8 fee5 	bl	8001e8c <HAL_GetTick>
 80090c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090c4:	e008      	b.n	80090d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090c6:	f7f8 fee1 	bl	8001e8c <HAL_GetTick>
 80090ca:	4602      	mov	r2, r0
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d901      	bls.n	80090d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e086      	b.n	80091e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090d8:	4b45      	ldr	r3, [pc, #276]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f0      	bne.n	80090c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090e4:	4b42      	ldr	r3, [pc, #264]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	031b      	lsls	r3, r3, #12
 80090f2:	493f      	ldr	r1, [pc, #252]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	3b01      	subs	r3, #1
 8009108:	025b      	lsls	r3, r3, #9
 800910a:	b29b      	uxth	r3, r3
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	3b01      	subs	r3, #1
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	3b01      	subs	r3, #1
 8009122:	061b      	lsls	r3, r3, #24
 8009124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009128:	4931      	ldr	r1, [pc, #196]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 800912a:	4313      	orrs	r3, r2
 800912c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800912e:	4b30      	ldr	r3, [pc, #192]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	492d      	ldr	r1, [pc, #180]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 800913c:	4313      	orrs	r3, r2
 800913e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009140:	4b2b      	ldr	r3, [pc, #172]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	f023 0220 	bic.w	r2, r3, #32
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	4928      	ldr	r1, [pc, #160]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 800914e:	4313      	orrs	r3, r2
 8009150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009152:	4b27      	ldr	r3, [pc, #156]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009156:	4a26      	ldr	r2, [pc, #152]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009158:	f023 0310 	bic.w	r3, r3, #16
 800915c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800915e:	4b24      	ldr	r3, [pc, #144]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009162:	4b24      	ldr	r3, [pc, #144]	@ (80091f4 <RCCEx_PLL2_Config+0x160>)
 8009164:	4013      	ands	r3, r2
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	69d2      	ldr	r2, [r2, #28]
 800916a:	00d2      	lsls	r2, r2, #3
 800916c:	4920      	ldr	r1, [pc, #128]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 800916e:	4313      	orrs	r3, r2
 8009170:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009172:	4b1f      	ldr	r3, [pc, #124]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	4a1e      	ldr	r2, [pc, #120]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009178:	f043 0310 	orr.w	r3, r3, #16
 800917c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009184:	4b1a      	ldr	r3, [pc, #104]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 8009186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009188:	4a19      	ldr	r2, [pc, #100]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 800918a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800918e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009190:	e00f      	b.n	80091b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d106      	bne.n	80091a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009198:	4b15      	ldr	r3, [pc, #84]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 800919a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919c:	4a14      	ldr	r2, [pc, #80]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 800919e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091a4:	e005      	b.n	80091b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091a6:	4b12      	ldr	r3, [pc, #72]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80091a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091aa:	4a11      	ldr	r2, [pc, #68]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80091ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091b2:	4b0f      	ldr	r3, [pc, #60]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a0e      	ldr	r2, [pc, #56]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80091b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091be:	f7f8 fe65 	bl	8001e8c <HAL_GetTick>
 80091c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091c4:	e008      	b.n	80091d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091c6:	f7f8 fe61 	bl	8001e8c <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d901      	bls.n	80091d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e006      	b.n	80091e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091d8:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <RCCEx_PLL2_Config+0x15c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0f0      	beq.n	80091c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	58024400 	.word	0x58024400
 80091f4:	ffff0007 	.word	0xffff0007

080091f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009206:	4b53      	ldr	r3, [pc, #332]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 8009208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	2b03      	cmp	r3, #3
 8009210:	d101      	bne.n	8009216 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e099      	b.n	800934a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009216:	4b4f      	ldr	r3, [pc, #316]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a4e      	ldr	r2, [pc, #312]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 800921c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009222:	f7f8 fe33 	bl	8001e8c <HAL_GetTick>
 8009226:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009228:	e008      	b.n	800923c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800922a:	f7f8 fe2f 	bl	8001e8c <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	2b02      	cmp	r3, #2
 8009236:	d901      	bls.n	800923c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e086      	b.n	800934a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800923c:	4b45      	ldr	r3, [pc, #276]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1f0      	bne.n	800922a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009248:	4b42      	ldr	r3, [pc, #264]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 800924a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	051b      	lsls	r3, r3, #20
 8009256:	493f      	ldr	r1, [pc, #252]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 8009258:	4313      	orrs	r3, r2
 800925a:	628b      	str	r3, [r1, #40]	@ 0x28
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	3b01      	subs	r3, #1
 8009262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	3b01      	subs	r3, #1
 800926c:	025b      	lsls	r3, r3, #9
 800926e:	b29b      	uxth	r3, r3
 8009270:	431a      	orrs	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	3b01      	subs	r3, #1
 8009278:	041b      	lsls	r3, r3, #16
 800927a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	3b01      	subs	r3, #1
 8009286:	061b      	lsls	r3, r3, #24
 8009288:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800928c:	4931      	ldr	r1, [pc, #196]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 800928e:	4313      	orrs	r3, r2
 8009290:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009292:	4b30      	ldr	r3, [pc, #192]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 8009294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009296:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	492d      	ldr	r1, [pc, #180]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80092a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	4928      	ldr	r1, [pc, #160]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092b6:	4b27      	ldr	r3, [pc, #156]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ba:	4a26      	ldr	r2, [pc, #152]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80092c2:	4b24      	ldr	r3, [pc, #144]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092c6:	4b24      	ldr	r3, [pc, #144]	@ (8009358 <RCCEx_PLL3_Config+0x160>)
 80092c8:	4013      	ands	r3, r2
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	69d2      	ldr	r2, [r2, #28]
 80092ce:	00d2      	lsls	r2, r2, #3
 80092d0:	4920      	ldr	r1, [pc, #128]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092da:	4a1e      	ldr	r2, [pc, #120]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d106      	bne.n	80092f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	4a19      	ldr	r2, [pc, #100]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80092f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092f4:	e00f      	b.n	8009316 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d106      	bne.n	800930a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092fc:	4b15      	ldr	r3, [pc, #84]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 80092fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009300:	4a14      	ldr	r2, [pc, #80]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 8009302:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009308:	e005      	b.n	8009316 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800930a:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 800930c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930e:	4a11      	ldr	r2, [pc, #68]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 8009310:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009314:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009316:	4b0f      	ldr	r3, [pc, #60]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a0e      	ldr	r2, [pc, #56]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 800931c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009322:	f7f8 fdb3 	bl	8001e8c <HAL_GetTick>
 8009326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009328:	e008      	b.n	800933c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800932a:	f7f8 fdaf 	bl	8001e8c <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e006      	b.n	800934a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800933c:	4b05      	ldr	r3, [pc, #20]	@ (8009354 <RCCEx_PLL3_Config+0x15c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0f0      	beq.n	800932a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	58024400 	.word	0x58024400
 8009358:	ffff0007 	.word	0xffff0007

0800935c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e049      	b.n	8009402 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d106      	bne.n	8009388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f841 	bl	800940a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3304      	adds	r3, #4
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f000 f9e8 	bl	8009770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
	...

08009420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	d001      	beq.n	8009438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e054      	b.n	80094e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0201 	orr.w	r2, r2, #1
 800944e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a26      	ldr	r2, [pc, #152]	@ (80094f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d022      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0x80>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009462:	d01d      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0x80>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a22      	ldr	r2, [pc, #136]	@ (80094f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d018      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0x80>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a21      	ldr	r2, [pc, #132]	@ (80094f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d013      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0x80>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1f      	ldr	r2, [pc, #124]	@ (80094fc <HAL_TIM_Base_Start_IT+0xdc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00e      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0x80>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1e      	ldr	r2, [pc, #120]	@ (8009500 <HAL_TIM_Base_Start_IT+0xe0>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0x80>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a1c      	ldr	r2, [pc, #112]	@ (8009504 <HAL_TIM_Base_Start_IT+0xe4>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0x80>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a1b      	ldr	r2, [pc, #108]	@ (8009508 <HAL_TIM_Base_Start_IT+0xe8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d115      	bne.n	80094cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	4b19      	ldr	r3, [pc, #100]	@ (800950c <HAL_TIM_Base_Start_IT+0xec>)
 80094a8:	4013      	ands	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b06      	cmp	r3, #6
 80094b0:	d015      	beq.n	80094de <HAL_TIM_Base_Start_IT+0xbe>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094b8:	d011      	beq.n	80094de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f042 0201 	orr.w	r2, r2, #1
 80094c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ca:	e008      	b.n	80094de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0201 	orr.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e000      	b.n	80094e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	40010000 	.word	0x40010000
 80094f4:	40000400 	.word	0x40000400
 80094f8:	40000800 	.word	0x40000800
 80094fc:	40000c00 	.word	0x40000c00
 8009500:	40010400 	.word	0x40010400
 8009504:	40001800 	.word	0x40001800
 8009508:	40014000 	.word	0x40014000
 800950c:	00010007 	.word	0x00010007

08009510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 0302 	and.w	r3, r3, #2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d020      	beq.n	8009574 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01b      	beq.n	8009574 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0202 	mvn.w	r2, #2
 8009544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8e9 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 8009560:	e005      	b.n	800956e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f8db 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f8ec 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f003 0304 	and.w	r3, r3, #4
 800957a:	2b00      	cmp	r3, #0
 800957c:	d020      	beq.n	80095c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01b      	beq.n	80095c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0204 	mvn.w	r2, #4
 8009590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2202      	movs	r2, #2
 8009596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f8c3 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 80095ac:	e005      	b.n	80095ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f8b5 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f8c6 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d020      	beq.n	800960c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f003 0308 	and.w	r3, r3, #8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f06f 0208 	mvn.w	r2, #8
 80095dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2204      	movs	r2, #4
 80095e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f003 0303 	and.w	r3, r3, #3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f89d 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 80095f8:	e005      	b.n	8009606 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f88f 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f8a0 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b00      	cmp	r3, #0
 8009614:	d020      	beq.n	8009658 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01b      	beq.n	8009658 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0210 	mvn.w	r2, #16
 8009628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2208      	movs	r2, #8
 800962e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f877 	bl	8009732 <HAL_TIM_IC_CaptureCallback>
 8009644:	e005      	b.n	8009652 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f869 	bl	800971e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f87a 	bl	8009746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00c      	beq.n	800967c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f06f 0201 	mvn.w	r2, #1
 8009674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7f7 fcaa 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00c      	beq.n	80096aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009696:	2b00      	cmp	r3, #0
 8009698:	d007      	beq.n	80096aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80096a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f913 	bl	80098d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00c      	beq.n	80096ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d007      	beq.n	80096ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80096c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f90b 	bl	80098e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00c      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80096ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f834 	bl	800975a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00c      	beq.n	8009716 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f06f 0220 	mvn.w	r2, #32
 800970e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f8d3 	bl	80098bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a46      	ldr	r2, [pc, #280]	@ (800989c <TIM_Base_SetConfig+0x12c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d013      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978e:	d00f      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a43      	ldr	r2, [pc, #268]	@ (80098a0 <TIM_Base_SetConfig+0x130>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00b      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a42      	ldr	r2, [pc, #264]	@ (80098a4 <TIM_Base_SetConfig+0x134>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d007      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a41      	ldr	r2, [pc, #260]	@ (80098a8 <TIM_Base_SetConfig+0x138>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_Base_SetConfig+0x40>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a40      	ldr	r2, [pc, #256]	@ (80098ac <TIM_Base_SetConfig+0x13c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d108      	bne.n	80097c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a35      	ldr	r2, [pc, #212]	@ (800989c <TIM_Base_SetConfig+0x12c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d01f      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d0:	d01b      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a32      	ldr	r2, [pc, #200]	@ (80098a0 <TIM_Base_SetConfig+0x130>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d017      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a31      	ldr	r2, [pc, #196]	@ (80098a4 <TIM_Base_SetConfig+0x134>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d013      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a30      	ldr	r2, [pc, #192]	@ (80098a8 <TIM_Base_SetConfig+0x138>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00f      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a2f      	ldr	r2, [pc, #188]	@ (80098ac <TIM_Base_SetConfig+0x13c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00b      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a2e      	ldr	r2, [pc, #184]	@ (80098b0 <TIM_Base_SetConfig+0x140>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d007      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a2d      	ldr	r2, [pc, #180]	@ (80098b4 <TIM_Base_SetConfig+0x144>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d003      	beq.n	800980a <TIM_Base_SetConfig+0x9a>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a2c      	ldr	r2, [pc, #176]	@ (80098b8 <TIM_Base_SetConfig+0x148>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d108      	bne.n	800981c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4313      	orrs	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	4313      	orrs	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a16      	ldr	r2, [pc, #88]	@ (800989c <TIM_Base_SetConfig+0x12c>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00f      	beq.n	8009868 <TIM_Base_SetConfig+0xf8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a18      	ldr	r2, [pc, #96]	@ (80098ac <TIM_Base_SetConfig+0x13c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00b      	beq.n	8009868 <TIM_Base_SetConfig+0xf8>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a17      	ldr	r2, [pc, #92]	@ (80098b0 <TIM_Base_SetConfig+0x140>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d007      	beq.n	8009868 <TIM_Base_SetConfig+0xf8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a16      	ldr	r2, [pc, #88]	@ (80098b4 <TIM_Base_SetConfig+0x144>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_Base_SetConfig+0xf8>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a15      	ldr	r2, [pc, #84]	@ (80098b8 <TIM_Base_SetConfig+0x148>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d103      	bne.n	8009870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b01      	cmp	r3, #1
 8009880:	d105      	bne.n	800988e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f023 0201 	bic.w	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	611a      	str	r2, [r3, #16]
  }
}
 800988e:	bf00      	nop
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	40010000 	.word	0x40010000
 80098a0:	40000400 	.word	0x40000400
 80098a4:	40000800 	.word	0x40000800
 80098a8:	40000c00 	.word	0x40000c00
 80098ac:	40010400 	.word	0x40010400
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400
 80098b8:	40014800 	.word	0x40014800

080098bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e042      	b.n	8009990 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7f7 feaf 	bl	8001680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2224      	movs	r2, #36	@ 0x24
 8009926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0201 	bic.w	r2, r2, #1
 8009938:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 fb66 	bl	800b014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fdfb 	bl	800a544 <UART_SetConfig>
 800994e:	4603      	mov	r3, r0
 8009950:	2b01      	cmp	r3, #1
 8009952:	d101      	bne.n	8009958 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e01b      	b.n	8009990 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689a      	ldr	r2, [r3, #8]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0201 	orr.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 fbe5 	bl	800b158 <UART_CheckIdleState>
 800998e:	4603      	mov	r3, r0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08a      	sub	sp, #40	@ 0x28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	4613      	mov	r3, r2
 80099a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d167      	bne.n	8009a80 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <HAL_UART_Transmit_DMA+0x24>
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e060      	b.n	8009a82 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	88fa      	ldrh	r2, [r7, #6]
 80099ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	88fa      	ldrh	r2, [r7, #6]
 80099d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2221      	movs	r2, #33	@ 0x21
 80099e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d028      	beq.n	8009a40 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099f2:	4a26      	ldr	r2, [pc, #152]	@ (8009a8c <HAL_UART_Transmit_DMA+0xf4>)
 80099f4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099fa:	4a25      	ldr	r2, [pc, #148]	@ (8009a90 <HAL_UART_Transmit_DMA+0xf8>)
 80099fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a02:	4a24      	ldr	r2, [pc, #144]	@ (8009a94 <HAL_UART_Transmit_DMA+0xfc>)
 8009a04:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a16:	4619      	mov	r1, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3328      	adds	r3, #40	@ 0x28
 8009a1e:	461a      	mov	r2, r3
 8009a20:	88fb      	ldrh	r3, [r7, #6]
 8009a22:	f7fa f9a1 	bl	8003d68 <HAL_DMA_Start_IT>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2210      	movs	r2, #16
 8009a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2220      	movs	r2, #32
 8009a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e020      	b.n	8009a82 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2240      	movs	r2, #64	@ 0x40
 8009a46:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	613b      	str	r3, [r7, #16]
   return(result);
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3308      	adds	r3, #8
 8009a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a68:	623a      	str	r2, [r7, #32]
 8009a6a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6c:	69f9      	ldr	r1, [r7, #28]
 8009a6e:	6a3a      	ldr	r2, [r7, #32]
 8009a70:	e841 2300 	strex	r3, r2, [r1]
 8009a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e5      	bne.n	8009a48 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e000      	b.n	8009a82 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009a80:	2302      	movs	r3, #2
  }
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3728      	adds	r7, #40	@ 0x28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0800b625 	.word	0x0800b625
 8009a90:	0800b6bb 	.word	0x0800b6bb
 8009a94:	0800b83d 	.word	0x0800b83d

08009a98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	@ 0x28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	d137      	bne.n	8009b20 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <HAL_UART_Receive_DMA+0x24>
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e030      	b.n	8009b22 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a18      	ldr	r2, [pc, #96]	@ (8009b2c <HAL_UART_Receive_DMA+0x94>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d01f      	beq.n	8009b10 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d018      	beq.n	8009b10 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	613b      	str	r3, [r7, #16]
   return(result);
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	461a      	mov	r2, r3
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	623b      	str	r3, [r7, #32]
 8009afe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	69f9      	ldr	r1, [r7, #28]
 8009b02:	6a3a      	ldr	r2, [r7, #32]
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e6      	bne.n	8009ade <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b10:	88fb      	ldrh	r3, [r7, #6]
 8009b12:	461a      	mov	r2, r3
 8009b14:	68b9      	ldr	r1, [r7, #8]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f001 fc36 	bl	800b388 <UART_Start_Receive_DMA>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	e000      	b.n	8009b22 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b20:	2302      	movs	r3, #2
  }
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3728      	adds	r7, #40	@ 0x28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	58000c00 	.word	0x58000c00

08009b30 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b09d      	sub	sp, #116	@ 0x74
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b46:	66bb      	str	r3, [r7, #104]	@ 0x68

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b52:	2b80      	cmp	r3, #128	@ 0x80
 8009b54:	d11c      	bne.n	8009b90 <HAL_UART_DMAPause+0x60>
 8009b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b58:	2b21      	cmp	r3, #33	@ 0x21
 8009b5a:	d119      	bne.n	8009b90 <HAL_UART_DMAPause+0x60>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3308      	adds	r3, #8
 8009b62:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3308      	adds	r3, #8
 8009b7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b7c:	657a      	str	r2, [r7, #84]	@ 0x54
 8009b7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e5      	bne.n	8009b5c <HAL_UART_DMAPause+0x2c>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b9a:	2b40      	cmp	r3, #64	@ 0x40
 8009b9c:	d14f      	bne.n	8009c3e <HAL_UART_DMAPause+0x10e>
 8009b9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ba0:	2b22      	cmp	r3, #34	@ 0x22
 8009ba2:	d14c      	bne.n	8009c3e <HAL_UART_DMAPause+0x10e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bac:	e853 3f00 	ldrex	r3, [r3]
 8009bb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e6      	bne.n	8009ba4 <HAL_UART_DMAPause+0x74>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	f023 0301 	bic.w	r3, r3, #1
 8009bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e5      	bne.n	8009bd6 <HAL_UART_DMAPause+0xa6>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3308      	adds	r3, #8
 8009c28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c2a:	61ba      	str	r2, [r7, #24]
 8009c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6979      	ldr	r1, [r7, #20]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	613b      	str	r3, [r7, #16]
   return(result);
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e5      	bne.n	8009c0a <HAL_UART_DMAPause+0xda>
  }

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3774      	adds	r7, #116	@ 0x74
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b09b      	sub	sp, #108	@ 0x6c
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c5a:	2b21      	cmp	r3, #33	@ 0x21
 8009c5c:	d119      	bne.n	8009c92 <HAL_UART_DMAResume+0x46>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3308      	adds	r3, #8
 8009c64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c74:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009c7e:	657a      	str	r2, [r7, #84]	@ 0x54
 8009c80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e5      	bne.n	8009c5e <HAL_UART_DMAResume+0x12>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c98:	2b22      	cmp	r3, #34	@ 0x22
 8009c9a:	d154      	bne.n	8009d46 <HAL_UART_DMAResume+0xfa>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d018      	beq.n	8009cde <HAL_UART_DMAResume+0x92>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cca:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e6      	bne.n	8009cac <HAL_UART_DMAResume+0x60>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	f043 0301 	orr.w	r3, r3, #1
 8009cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3308      	adds	r3, #8
 8009cfc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e5      	bne.n	8009cde <HAL_UART_DMAResume+0x92>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3308      	adds	r3, #8
 8009d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d32:	61ba      	str	r2, [r7, #24]
 8009d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	6979      	ldr	r1, [r7, #20]
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e5      	bne.n	8009d12 <HAL_UART_DMAResume+0xc6>
  }

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	376c      	adds	r7, #108	@ 0x6c
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b0ba      	sub	sp, #232	@ 0xe8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009d7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009d82:	4013      	ands	r3, r2
 8009d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d11b      	bne.n	8009dc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d94:	f003 0320 	and.w	r3, r3, #32
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d015      	beq.n	8009dc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009da0:	f003 0320 	and.w	r3, r3, #32
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d009      	beq.n	8009dc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 8377 	beq.w	800a4ac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
      }
      return;
 8009dc6:	e371      	b.n	800a4ac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 8123 	beq.w	800a018 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009dd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800a00c <HAL_UART_IRQHandler+0x2b8>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d106      	bne.n	8009dec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009de2:	4b8b      	ldr	r3, [pc, #556]	@ (800a010 <HAL_UART_IRQHandler+0x2bc>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 8116 	beq.w	800a018 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d011      	beq.n	8009e1c <HAL_UART_IRQHandler+0xc8>
 8009df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e12:	f043 0201 	orr.w	r2, r3, #1
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d011      	beq.n	8009e4c <HAL_UART_IRQHandler+0xf8>
 8009e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2202      	movs	r2, #2
 8009e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e42:	f043 0204 	orr.w	r2, r3, #4
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d011      	beq.n	8009e7c <HAL_UART_IRQHandler+0x128>
 8009e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e72:	f043 0202 	orr.w	r2, r3, #2
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d017      	beq.n	8009eb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009e94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009e98:	4b5c      	ldr	r3, [pc, #368]	@ (800a00c <HAL_UART_IRQHandler+0x2b8>)
 8009e9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00b      	beq.n	8009eb8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2208      	movs	r2, #8
 8009ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eae:	f043 0208 	orr.w	r2, r3, #8
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d012      	beq.n	8009eea <HAL_UART_IRQHandler+0x196>
 8009ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00c      	beq.n	8009eea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee0:	f043 0220 	orr.w	r2, r3, #32
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 82dd 	beq.w	800a4b0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d013      	beq.n	8009f2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d105      	bne.n	8009f1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d007      	beq.n	8009f2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f3e:	2b40      	cmp	r3, #64	@ 0x40
 8009f40:	d005      	beq.n	8009f4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d054      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fb02 	bl	800b558 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5e:	2b40      	cmp	r3, #64	@ 0x40
 8009f60:	d146      	bne.n	8009ff0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1d9      	bne.n	8009f62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d017      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fbe:	4a15      	ldr	r2, [pc, #84]	@ (800a014 <HAL_UART_IRQHandler+0x2c0>)
 8009fc0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fa fc55 	bl	8004878 <HAL_DMA_Abort_IT>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d019      	beq.n	800a008 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe6:	e00f      	b.n	800a008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa95 	bl	800a518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fee:	e00b      	b.n	800a008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa91 	bl	800a518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff6:	e007      	b.n	800a008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fa8d 	bl	800a518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a006:	e253      	b.n	800a4b0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a008:	bf00      	nop
    return;
 800a00a:	e251      	b.n	800a4b0 <HAL_UART_IRQHandler+0x75c>
 800a00c:	10000001 	.word	0x10000001
 800a010:	04000120 	.word	0x04000120
 800a014:	0800b8bd 	.word	0x0800b8bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	f040 81e7 	bne.w	800a3f0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a026:	f003 0310 	and.w	r3, r3, #16
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 81e0 	beq.w	800a3f0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a034:	f003 0310 	and.w	r3, r3, #16
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 81d9 	beq.w	800a3f0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2210      	movs	r2, #16
 800a044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a050:	2b40      	cmp	r3, #64	@ 0x40
 800a052:	f040 8151 	bne.w	800a2f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a96      	ldr	r2, [pc, #600]	@ (800a2b8 <HAL_UART_IRQHandler+0x564>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d068      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a93      	ldr	r2, [pc, #588]	@ (800a2bc <HAL_UART_IRQHandler+0x568>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d061      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a91      	ldr	r2, [pc, #580]	@ (800a2c0 <HAL_UART_IRQHandler+0x56c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d05a      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a8e      	ldr	r2, [pc, #568]	@ (800a2c4 <HAL_UART_IRQHandler+0x570>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d053      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a8c      	ldr	r2, [pc, #560]	@ (800a2c8 <HAL_UART_IRQHandler+0x574>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d04c      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a89      	ldr	r2, [pc, #548]	@ (800a2cc <HAL_UART_IRQHandler+0x578>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d045      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a87      	ldr	r2, [pc, #540]	@ (800a2d0 <HAL_UART_IRQHandler+0x57c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d03e      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a84      	ldr	r2, [pc, #528]	@ (800a2d4 <HAL_UART_IRQHandler+0x580>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d037      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a82      	ldr	r2, [pc, #520]	@ (800a2d8 <HAL_UART_IRQHandler+0x584>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d030      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a7f      	ldr	r2, [pc, #508]	@ (800a2dc <HAL_UART_IRQHandler+0x588>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d029      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a7d      	ldr	r2, [pc, #500]	@ (800a2e0 <HAL_UART_IRQHandler+0x58c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d022      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a7a      	ldr	r2, [pc, #488]	@ (800a2e4 <HAL_UART_IRQHandler+0x590>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d01b      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a78      	ldr	r2, [pc, #480]	@ (800a2e8 <HAL_UART_IRQHandler+0x594>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d014      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a75      	ldr	r2, [pc, #468]	@ (800a2ec <HAL_UART_IRQHandler+0x598>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00d      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a73      	ldr	r2, [pc, #460]	@ (800a2f0 <HAL_UART_IRQHandler+0x59c>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d006      	beq.n	800a136 <HAL_UART_IRQHandler+0x3e2>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a70      	ldr	r2, [pc, #448]	@ (800a2f4 <HAL_UART_IRQHandler+0x5a0>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d106      	bne.n	800a144 <HAL_UART_IRQHandler+0x3f0>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	b29b      	uxth	r3, r3
 800a142:	e005      	b.n	800a150 <HAL_UART_IRQHandler+0x3fc>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 81ab 	beq.w	800a4b4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a164:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a168:	429a      	cmp	r2, r3
 800a16a:	f080 81a3 	bcs.w	800a4b4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a174:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a184:	f000 8087 	beq.w	800a296 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a194:	e853 3f00 	ldrex	r3, [r3]
 800a198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a19c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a1b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a1be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a1ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1da      	bne.n	800a188 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1e4:	f023 0301 	bic.w	r3, r3, #1
 800a1e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e1      	bne.n	800a1d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3308      	adds	r3, #8
 800a214:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a21e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3308      	adds	r3, #8
 800a22e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a232:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a234:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a238:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e3      	bne.n	800a20e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a264:	f023 0310 	bic.w	r3, r3, #16
 800a268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a276:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a278:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a27c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e4      	bne.n	800a254 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a290:	4618      	mov	r0, r3
 800a292:	f7f9 ffd3 	bl	800423c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2202      	movs	r2, #2
 800a29a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f93b 	bl	800a52c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2b6:	e0fd      	b.n	800a4b4 <HAL_UART_IRQHandler+0x760>
 800a2b8:	40020010 	.word	0x40020010
 800a2bc:	40020028 	.word	0x40020028
 800a2c0:	40020040 	.word	0x40020040
 800a2c4:	40020058 	.word	0x40020058
 800a2c8:	40020070 	.word	0x40020070
 800a2cc:	40020088 	.word	0x40020088
 800a2d0:	400200a0 	.word	0x400200a0
 800a2d4:	400200b8 	.word	0x400200b8
 800a2d8:	40020410 	.word	0x40020410
 800a2dc:	40020428 	.word	0x40020428
 800a2e0:	40020440 	.word	0x40020440
 800a2e4:	40020458 	.word	0x40020458
 800a2e8:	40020470 	.word	0x40020470
 800a2ec:	40020488 	.word	0x40020488
 800a2f0:	400204a0 	.word	0x400204a0
 800a2f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a304:	b29b      	uxth	r3, r3
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a312:	b29b      	uxth	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 80cf 	beq.w	800a4b8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a31a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 80ca 	beq.w	800a4b8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a338:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a346:	647b      	str	r3, [r7, #68]	@ 0x44
 800a348:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a34c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e4      	bne.n	800a324 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3308      	adds	r3, #8
 800a360:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	623b      	str	r3, [r7, #32]
   return(result);
 800a36a:	6a3a      	ldr	r2, [r7, #32]
 800a36c:	4b55      	ldr	r3, [pc, #340]	@ (800a4c4 <HAL_UART_IRQHandler+0x770>)
 800a36e:	4013      	ands	r3, r2
 800a370:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3308      	adds	r3, #8
 800a37a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a37e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a380:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a386:	e841 2300 	strex	r3, r2, [r1]
 800a38a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1e3      	bne.n	800a35a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2220      	movs	r2, #32
 800a396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f023 0310 	bic.w	r3, r3, #16
 800a3ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a3c8:	61fb      	str	r3, [r7, #28]
 800a3ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	69b9      	ldr	r1, [r7, #24]
 800a3ce:	69fa      	ldr	r2, [r7, #28]
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e4      	bne.n	800a3a6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f89f 	bl	800a52c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3ee:	e063      	b.n	800a4b8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00e      	beq.n	800a41a <HAL_UART_IRQHandler+0x6c6>
 800a3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a400:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d008      	beq.n	800a41a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fa93 	bl	800b93e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a418:	e051      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a41e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a422:	2b00      	cmp	r3, #0
 800a424:	d014      	beq.n	800a450 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d105      	bne.n	800a43e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d008      	beq.n	800a450 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a442:	2b00      	cmp	r3, #0
 800a444:	d03a      	beq.n	800a4bc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
    }
    return;
 800a44e:	e035      	b.n	800a4bc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d009      	beq.n	800a470 <HAL_UART_IRQHandler+0x71c>
 800a45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f001 fa3d 	bl	800b8e8 <UART_EndTransmit_IT>
    return;
 800a46e:	e026      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a474:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d009      	beq.n	800a490 <HAL_UART_IRQHandler+0x73c>
 800a47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a480:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fa6c 	bl	800b966 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a48e:	e016      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d010      	beq.n	800a4be <HAL_UART_IRQHandler+0x76a>
 800a49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	da0c      	bge.n	800a4be <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 fa54 	bl	800b952 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4aa:	e008      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
      return;
 800a4ac:	bf00      	nop
 800a4ae:	e006      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
    return;
 800a4b0:	bf00      	nop
 800a4b2:	e004      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
      return;
 800a4b4:	bf00      	nop
 800a4b6:	e002      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
      return;
 800a4b8:	bf00      	nop
 800a4ba:	e000      	b.n	800a4be <HAL_UART_IRQHandler+0x76a>
    return;
 800a4bc:	bf00      	nop
  }
}
 800a4be:	37e8      	adds	r7, #232	@ 0xe8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	effffffe 	.word	0xeffffffe

0800a4c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a548:	b092      	sub	sp, #72	@ 0x48
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	431a      	orrs	r2, r3
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	69db      	ldr	r3, [r3, #28]
 800a568:	4313      	orrs	r3, r2
 800a56a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4bbe      	ldr	r3, [pc, #760]	@ (800a86c <UART_SetConfig+0x328>)
 800a574:	4013      	ands	r3, r2
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a57c:	430b      	orrs	r3, r1
 800a57e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4ab3      	ldr	r2, [pc, #716]	@ (800a870 <UART_SetConfig+0x32c>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d004      	beq.n	800a5b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	4baf      	ldr	r3, [pc, #700]	@ (800a874 <UART_SetConfig+0x330>)
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	6812      	ldr	r2, [r2, #0]
 800a5be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5c0:	430b      	orrs	r3, r1
 800a5c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ca:	f023 010f 	bic.w	r1, r3, #15
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4aa6      	ldr	r2, [pc, #664]	@ (800a878 <UART_SetConfig+0x334>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d177      	bne.n	800a6d4 <UART_SetConfig+0x190>
 800a5e4:	4ba5      	ldr	r3, [pc, #660]	@ (800a87c <UART_SetConfig+0x338>)
 800a5e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5ec:	2b28      	cmp	r3, #40	@ 0x28
 800a5ee:	d86d      	bhi.n	800a6cc <UART_SetConfig+0x188>
 800a5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f8 <UART_SetConfig+0xb4>)
 800a5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f6:	bf00      	nop
 800a5f8:	0800a69d 	.word	0x0800a69d
 800a5fc:	0800a6cd 	.word	0x0800a6cd
 800a600:	0800a6cd 	.word	0x0800a6cd
 800a604:	0800a6cd 	.word	0x0800a6cd
 800a608:	0800a6cd 	.word	0x0800a6cd
 800a60c:	0800a6cd 	.word	0x0800a6cd
 800a610:	0800a6cd 	.word	0x0800a6cd
 800a614:	0800a6cd 	.word	0x0800a6cd
 800a618:	0800a6a5 	.word	0x0800a6a5
 800a61c:	0800a6cd 	.word	0x0800a6cd
 800a620:	0800a6cd 	.word	0x0800a6cd
 800a624:	0800a6cd 	.word	0x0800a6cd
 800a628:	0800a6cd 	.word	0x0800a6cd
 800a62c:	0800a6cd 	.word	0x0800a6cd
 800a630:	0800a6cd 	.word	0x0800a6cd
 800a634:	0800a6cd 	.word	0x0800a6cd
 800a638:	0800a6ad 	.word	0x0800a6ad
 800a63c:	0800a6cd 	.word	0x0800a6cd
 800a640:	0800a6cd 	.word	0x0800a6cd
 800a644:	0800a6cd 	.word	0x0800a6cd
 800a648:	0800a6cd 	.word	0x0800a6cd
 800a64c:	0800a6cd 	.word	0x0800a6cd
 800a650:	0800a6cd 	.word	0x0800a6cd
 800a654:	0800a6cd 	.word	0x0800a6cd
 800a658:	0800a6b5 	.word	0x0800a6b5
 800a65c:	0800a6cd 	.word	0x0800a6cd
 800a660:	0800a6cd 	.word	0x0800a6cd
 800a664:	0800a6cd 	.word	0x0800a6cd
 800a668:	0800a6cd 	.word	0x0800a6cd
 800a66c:	0800a6cd 	.word	0x0800a6cd
 800a670:	0800a6cd 	.word	0x0800a6cd
 800a674:	0800a6cd 	.word	0x0800a6cd
 800a678:	0800a6bd 	.word	0x0800a6bd
 800a67c:	0800a6cd 	.word	0x0800a6cd
 800a680:	0800a6cd 	.word	0x0800a6cd
 800a684:	0800a6cd 	.word	0x0800a6cd
 800a688:	0800a6cd 	.word	0x0800a6cd
 800a68c:	0800a6cd 	.word	0x0800a6cd
 800a690:	0800a6cd 	.word	0x0800a6cd
 800a694:	0800a6cd 	.word	0x0800a6cd
 800a698:	0800a6c5 	.word	0x0800a6c5
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e222      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e21e      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e21a      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a6b4:	2310      	movs	r3, #16
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e216      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a6bc:	2320      	movs	r3, #32
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c2:	e212      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a6c4:	2340      	movs	r3, #64	@ 0x40
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ca:	e20e      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a6cc:	2380      	movs	r3, #128	@ 0x80
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d2:	e20a      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a69      	ldr	r2, [pc, #420]	@ (800a880 <UART_SetConfig+0x33c>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d130      	bne.n	800a740 <UART_SetConfig+0x1fc>
 800a6de:	4b67      	ldr	r3, [pc, #412]	@ (800a87c <UART_SetConfig+0x338>)
 800a6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6e2:	f003 0307 	and.w	r3, r3, #7
 800a6e6:	2b05      	cmp	r3, #5
 800a6e8:	d826      	bhi.n	800a738 <UART_SetConfig+0x1f4>
 800a6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f0 <UART_SetConfig+0x1ac>)
 800a6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f0:	0800a709 	.word	0x0800a709
 800a6f4:	0800a711 	.word	0x0800a711
 800a6f8:	0800a719 	.word	0x0800a719
 800a6fc:	0800a721 	.word	0x0800a721
 800a700:	0800a729 	.word	0x0800a729
 800a704:	0800a731 	.word	0x0800a731
 800a708:	2300      	movs	r3, #0
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e1ec      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a710:	2304      	movs	r3, #4
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e1e8      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a718:	2308      	movs	r3, #8
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e1e4      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a720:	2310      	movs	r3, #16
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e1e0      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a728:	2320      	movs	r3, #32
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72e:	e1dc      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a730:	2340      	movs	r3, #64	@ 0x40
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a736:	e1d8      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a738:	2380      	movs	r3, #128	@ 0x80
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73e:	e1d4      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a4f      	ldr	r2, [pc, #316]	@ (800a884 <UART_SetConfig+0x340>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d130      	bne.n	800a7ac <UART_SetConfig+0x268>
 800a74a:	4b4c      	ldr	r3, [pc, #304]	@ (800a87c <UART_SetConfig+0x338>)
 800a74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	2b05      	cmp	r3, #5
 800a754:	d826      	bhi.n	800a7a4 <UART_SetConfig+0x260>
 800a756:	a201      	add	r2, pc, #4	@ (adr r2, 800a75c <UART_SetConfig+0x218>)
 800a758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75c:	0800a775 	.word	0x0800a775
 800a760:	0800a77d 	.word	0x0800a77d
 800a764:	0800a785 	.word	0x0800a785
 800a768:	0800a78d 	.word	0x0800a78d
 800a76c:	0800a795 	.word	0x0800a795
 800a770:	0800a79d 	.word	0x0800a79d
 800a774:	2300      	movs	r3, #0
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e1b6      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a77c:	2304      	movs	r3, #4
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e1b2      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a784:	2308      	movs	r3, #8
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e1ae      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a78c:	2310      	movs	r3, #16
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e1aa      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a794:	2320      	movs	r3, #32
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79a:	e1a6      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a79c:	2340      	movs	r3, #64	@ 0x40
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a2:	e1a2      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a7a4:	2380      	movs	r3, #128	@ 0x80
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	e19e      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a35      	ldr	r2, [pc, #212]	@ (800a888 <UART_SetConfig+0x344>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d130      	bne.n	800a818 <UART_SetConfig+0x2d4>
 800a7b6:	4b31      	ldr	r3, [pc, #196]	@ (800a87c <UART_SetConfig+0x338>)
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	2b05      	cmp	r3, #5
 800a7c0:	d826      	bhi.n	800a810 <UART_SetConfig+0x2cc>
 800a7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c8 <UART_SetConfig+0x284>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a7e1 	.word	0x0800a7e1
 800a7cc:	0800a7e9 	.word	0x0800a7e9
 800a7d0:	0800a7f1 	.word	0x0800a7f1
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a801 	.word	0x0800a801
 800a7dc:	0800a809 	.word	0x0800a809
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e180      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e17c      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e178      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e174      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a800:	2320      	movs	r3, #32
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e170      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a808:	2340      	movs	r3, #64	@ 0x40
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e16c      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a810:	2380      	movs	r3, #128	@ 0x80
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e168      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a1b      	ldr	r2, [pc, #108]	@ (800a88c <UART_SetConfig+0x348>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d142      	bne.n	800a8a8 <UART_SetConfig+0x364>
 800a822:	4b16      	ldr	r3, [pc, #88]	@ (800a87c <UART_SetConfig+0x338>)
 800a824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b05      	cmp	r3, #5
 800a82c:	d838      	bhi.n	800a8a0 <UART_SetConfig+0x35c>
 800a82e:	a201      	add	r2, pc, #4	@ (adr r2, 800a834 <UART_SetConfig+0x2f0>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a84d 	.word	0x0800a84d
 800a838:	0800a855 	.word	0x0800a855
 800a83c:	0800a85d 	.word	0x0800a85d
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a891 	.word	0x0800a891
 800a848:	0800a899 	.word	0x0800a899
 800a84c:	2300      	movs	r3, #0
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e14a      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a854:	2304      	movs	r3, #4
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e146      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a85c:	2308      	movs	r3, #8
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e142      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a864:	2310      	movs	r3, #16
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e13e      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a86c:	cfff69f3 	.word	0xcfff69f3
 800a870:	58000c00 	.word	0x58000c00
 800a874:	11fff4ff 	.word	0x11fff4ff
 800a878:	40011000 	.word	0x40011000
 800a87c:	58024400 	.word	0x58024400
 800a880:	40004400 	.word	0x40004400
 800a884:	40004800 	.word	0x40004800
 800a888:	40004c00 	.word	0x40004c00
 800a88c:	40005000 	.word	0x40005000
 800a890:	2320      	movs	r3, #32
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a896:	e128      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a898:	2340      	movs	r3, #64	@ 0x40
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89e:	e124      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a8a0:	2380      	movs	r3, #128	@ 0x80
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a6:	e120      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4acb      	ldr	r2, [pc, #812]	@ (800abdc <UART_SetConfig+0x698>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d176      	bne.n	800a9a0 <UART_SetConfig+0x45c>
 800a8b2:	4bcb      	ldr	r3, [pc, #812]	@ (800abe0 <UART_SetConfig+0x69c>)
 800a8b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8ba:	2b28      	cmp	r3, #40	@ 0x28
 800a8bc:	d86c      	bhi.n	800a998 <UART_SetConfig+0x454>
 800a8be:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c4 <UART_SetConfig+0x380>)
 800a8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c4:	0800a969 	.word	0x0800a969
 800a8c8:	0800a999 	.word	0x0800a999
 800a8cc:	0800a999 	.word	0x0800a999
 800a8d0:	0800a999 	.word	0x0800a999
 800a8d4:	0800a999 	.word	0x0800a999
 800a8d8:	0800a999 	.word	0x0800a999
 800a8dc:	0800a999 	.word	0x0800a999
 800a8e0:	0800a999 	.word	0x0800a999
 800a8e4:	0800a971 	.word	0x0800a971
 800a8e8:	0800a999 	.word	0x0800a999
 800a8ec:	0800a999 	.word	0x0800a999
 800a8f0:	0800a999 	.word	0x0800a999
 800a8f4:	0800a999 	.word	0x0800a999
 800a8f8:	0800a999 	.word	0x0800a999
 800a8fc:	0800a999 	.word	0x0800a999
 800a900:	0800a999 	.word	0x0800a999
 800a904:	0800a979 	.word	0x0800a979
 800a908:	0800a999 	.word	0x0800a999
 800a90c:	0800a999 	.word	0x0800a999
 800a910:	0800a999 	.word	0x0800a999
 800a914:	0800a999 	.word	0x0800a999
 800a918:	0800a999 	.word	0x0800a999
 800a91c:	0800a999 	.word	0x0800a999
 800a920:	0800a999 	.word	0x0800a999
 800a924:	0800a981 	.word	0x0800a981
 800a928:	0800a999 	.word	0x0800a999
 800a92c:	0800a999 	.word	0x0800a999
 800a930:	0800a999 	.word	0x0800a999
 800a934:	0800a999 	.word	0x0800a999
 800a938:	0800a999 	.word	0x0800a999
 800a93c:	0800a999 	.word	0x0800a999
 800a940:	0800a999 	.word	0x0800a999
 800a944:	0800a989 	.word	0x0800a989
 800a948:	0800a999 	.word	0x0800a999
 800a94c:	0800a999 	.word	0x0800a999
 800a950:	0800a999 	.word	0x0800a999
 800a954:	0800a999 	.word	0x0800a999
 800a958:	0800a999 	.word	0x0800a999
 800a95c:	0800a999 	.word	0x0800a999
 800a960:	0800a999 	.word	0x0800a999
 800a964:	0800a991 	.word	0x0800a991
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96e:	e0bc      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a970:	2304      	movs	r3, #4
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a976:	e0b8      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a978:	2308      	movs	r3, #8
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97e:	e0b4      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a980:	2310      	movs	r3, #16
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a986:	e0b0      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a988:	2320      	movs	r3, #32
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98e:	e0ac      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a990:	2340      	movs	r3, #64	@ 0x40
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a996:	e0a8      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a998:	2380      	movs	r3, #128	@ 0x80
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99e:	e0a4      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a8f      	ldr	r2, [pc, #572]	@ (800abe4 <UART_SetConfig+0x6a0>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d130      	bne.n	800aa0c <UART_SetConfig+0x4c8>
 800a9aa:	4b8d      	ldr	r3, [pc, #564]	@ (800abe0 <UART_SetConfig+0x69c>)
 800a9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	d826      	bhi.n	800aa04 <UART_SetConfig+0x4c0>
 800a9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9bc <UART_SetConfig+0x478>)
 800a9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9bc:	0800a9d5 	.word	0x0800a9d5
 800a9c0:	0800a9dd 	.word	0x0800a9dd
 800a9c4:	0800a9e5 	.word	0x0800a9e5
 800a9c8:	0800a9ed 	.word	0x0800a9ed
 800a9cc:	0800a9f5 	.word	0x0800a9f5
 800a9d0:	0800a9fd 	.word	0x0800a9fd
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9da:	e086      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a9dc:	2304      	movs	r3, #4
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e2:	e082      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a9e4:	2308      	movs	r3, #8
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ea:	e07e      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a9ec:	2310      	movs	r3, #16
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f2:	e07a      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a9f4:	2320      	movs	r3, #32
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fa:	e076      	b.n	800aaea <UART_SetConfig+0x5a6>
 800a9fc:	2340      	movs	r3, #64	@ 0x40
 800a9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa02:	e072      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa04:	2380      	movs	r3, #128	@ 0x80
 800aa06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0a:	e06e      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a75      	ldr	r2, [pc, #468]	@ (800abe8 <UART_SetConfig+0x6a4>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d130      	bne.n	800aa78 <UART_SetConfig+0x534>
 800aa16:	4b72      	ldr	r3, [pc, #456]	@ (800abe0 <UART_SetConfig+0x69c>)
 800aa18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	2b05      	cmp	r3, #5
 800aa20:	d826      	bhi.n	800aa70 <UART_SetConfig+0x52c>
 800aa22:	a201      	add	r2, pc, #4	@ (adr r2, 800aa28 <UART_SetConfig+0x4e4>)
 800aa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa28:	0800aa41 	.word	0x0800aa41
 800aa2c:	0800aa49 	.word	0x0800aa49
 800aa30:	0800aa51 	.word	0x0800aa51
 800aa34:	0800aa59 	.word	0x0800aa59
 800aa38:	0800aa61 	.word	0x0800aa61
 800aa3c:	0800aa69 	.word	0x0800aa69
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa46:	e050      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa48:	2304      	movs	r3, #4
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4e:	e04c      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa50:	2308      	movs	r3, #8
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa56:	e048      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa58:	2310      	movs	r3, #16
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5e:	e044      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa60:	2320      	movs	r3, #32
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa66:	e040      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa68:	2340      	movs	r3, #64	@ 0x40
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6e:	e03c      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa70:	2380      	movs	r3, #128	@ 0x80
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa76:	e038      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a5b      	ldr	r2, [pc, #364]	@ (800abec <UART_SetConfig+0x6a8>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d130      	bne.n	800aae4 <UART_SetConfig+0x5a0>
 800aa82:	4b57      	ldr	r3, [pc, #348]	@ (800abe0 <UART_SetConfig+0x69c>)
 800aa84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	2b05      	cmp	r3, #5
 800aa8c:	d826      	bhi.n	800aadc <UART_SetConfig+0x598>
 800aa8e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <UART_SetConfig+0x550>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aaad 	.word	0x0800aaad
 800aa98:	0800aab5 	.word	0x0800aab5
 800aa9c:	0800aabd 	.word	0x0800aabd
 800aaa0:	0800aac5 	.word	0x0800aac5
 800aaa4:	0800aacd 	.word	0x0800aacd
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	2302      	movs	r3, #2
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab2:	e01a      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aab4:	2304      	movs	r3, #4
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaba:	e016      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aabc:	2308      	movs	r3, #8
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac2:	e012      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aac4:	2310      	movs	r3, #16
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e00e      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aacc:	2320      	movs	r3, #32
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad2:	e00a      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aad4:	2340      	movs	r3, #64	@ 0x40
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aada:	e006      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aadc:	2380      	movs	r3, #128	@ 0x80
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e002      	b.n	800aaea <UART_SetConfig+0x5a6>
 800aae4:	2380      	movs	r3, #128	@ 0x80
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a3f      	ldr	r2, [pc, #252]	@ (800abec <UART_SetConfig+0x6a8>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	f040 80f8 	bne.w	800ace6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aaf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aafa:	2b20      	cmp	r3, #32
 800aafc:	dc46      	bgt.n	800ab8c <UART_SetConfig+0x648>
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	f2c0 8082 	blt.w	800ac08 <UART_SetConfig+0x6c4>
 800ab04:	3b02      	subs	r3, #2
 800ab06:	2b1e      	cmp	r3, #30
 800ab08:	d87e      	bhi.n	800ac08 <UART_SetConfig+0x6c4>
 800ab0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab10 <UART_SetConfig+0x5cc>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab93 	.word	0x0800ab93
 800ab14:	0800ac09 	.word	0x0800ac09
 800ab18:	0800ab9b 	.word	0x0800ab9b
 800ab1c:	0800ac09 	.word	0x0800ac09
 800ab20:	0800ac09 	.word	0x0800ac09
 800ab24:	0800ac09 	.word	0x0800ac09
 800ab28:	0800abab 	.word	0x0800abab
 800ab2c:	0800ac09 	.word	0x0800ac09
 800ab30:	0800ac09 	.word	0x0800ac09
 800ab34:	0800ac09 	.word	0x0800ac09
 800ab38:	0800ac09 	.word	0x0800ac09
 800ab3c:	0800ac09 	.word	0x0800ac09
 800ab40:	0800ac09 	.word	0x0800ac09
 800ab44:	0800ac09 	.word	0x0800ac09
 800ab48:	0800abbb 	.word	0x0800abbb
 800ab4c:	0800ac09 	.word	0x0800ac09
 800ab50:	0800ac09 	.word	0x0800ac09
 800ab54:	0800ac09 	.word	0x0800ac09
 800ab58:	0800ac09 	.word	0x0800ac09
 800ab5c:	0800ac09 	.word	0x0800ac09
 800ab60:	0800ac09 	.word	0x0800ac09
 800ab64:	0800ac09 	.word	0x0800ac09
 800ab68:	0800ac09 	.word	0x0800ac09
 800ab6c:	0800ac09 	.word	0x0800ac09
 800ab70:	0800ac09 	.word	0x0800ac09
 800ab74:	0800ac09 	.word	0x0800ac09
 800ab78:	0800ac09 	.word	0x0800ac09
 800ab7c:	0800ac09 	.word	0x0800ac09
 800ab80:	0800ac09 	.word	0x0800ac09
 800ab84:	0800ac09 	.word	0x0800ac09
 800ab88:	0800abfb 	.word	0x0800abfb
 800ab8c:	2b40      	cmp	r3, #64	@ 0x40
 800ab8e:	d037      	beq.n	800ac00 <UART_SetConfig+0x6bc>
 800ab90:	e03a      	b.n	800ac08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab92:	f7fd fe6f 	bl	8008874 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab98:	e03c      	b.n	800ac14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fd fe7e 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba8:	e034      	b.n	800ac14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abaa:	f107 0318 	add.w	r3, r7, #24
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fd ffca 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb8:	e02c      	b.n	800ac14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abba:	4b09      	ldr	r3, [pc, #36]	@ (800abe0 <UART_SetConfig+0x69c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d016      	beq.n	800abf4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abc6:	4b06      	ldr	r3, [pc, #24]	@ (800abe0 <UART_SetConfig+0x69c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	08db      	lsrs	r3, r3, #3
 800abcc:	f003 0303 	and.w	r3, r3, #3
 800abd0:	4a07      	ldr	r2, [pc, #28]	@ (800abf0 <UART_SetConfig+0x6ac>)
 800abd2:	fa22 f303 	lsr.w	r3, r2, r3
 800abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abd8:	e01c      	b.n	800ac14 <UART_SetConfig+0x6d0>
 800abda:	bf00      	nop
 800abdc:	40011400 	.word	0x40011400
 800abe0:	58024400 	.word	0x58024400
 800abe4:	40007800 	.word	0x40007800
 800abe8:	40007c00 	.word	0x40007c00
 800abec:	58000c00 	.word	0x58000c00
 800abf0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800abf4:	4b9d      	ldr	r3, [pc, #628]	@ (800ae6c <UART_SetConfig+0x928>)
 800abf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf8:	e00c      	b.n	800ac14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abfa:	4b9d      	ldr	r3, [pc, #628]	@ (800ae70 <UART_SetConfig+0x92c>)
 800abfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfe:	e009      	b.n	800ac14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac06:	e005      	b.n	800ac14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 81de 	beq.w	800afd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac20:	4a94      	ldr	r2, [pc, #592]	@ (800ae74 <UART_SetConfig+0x930>)
 800ac22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	4613      	mov	r3, r2
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	4413      	add	r3, r2
 800ac3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d305      	bcc.n	800ac4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d903      	bls.n	800ac54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac52:	e1c1      	b.n	800afd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac56:	2200      	movs	r2, #0
 800ac58:	60bb      	str	r3, [r7, #8]
 800ac5a:	60fa      	str	r2, [r7, #12]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac60:	4a84      	ldr	r2, [pc, #528]	@ (800ae74 <UART_SetConfig+0x930>)
 800ac62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2200      	movs	r2, #0
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	607a      	str	r2, [r7, #4]
 800ac6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac76:	f7f5 fb45 	bl	8000304 <__aeabi_uldivmod>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4610      	mov	r0, r2
 800ac80:	4619      	mov	r1, r3
 800ac82:	f04f 0200 	mov.w	r2, #0
 800ac86:	f04f 0300 	mov.w	r3, #0
 800ac8a:	020b      	lsls	r3, r1, #8
 800ac8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac90:	0202      	lsls	r2, r0, #8
 800ac92:	6979      	ldr	r1, [r7, #20]
 800ac94:	6849      	ldr	r1, [r1, #4]
 800ac96:	0849      	lsrs	r1, r1, #1
 800ac98:	2000      	movs	r0, #0
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	eb12 0804 	adds.w	r8, r2, r4
 800aca2:	eb43 0905 	adc.w	r9, r3, r5
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	469a      	mov	sl, r3
 800acae:	4693      	mov	fp, r2
 800acb0:	4652      	mov	r2, sl
 800acb2:	465b      	mov	r3, fp
 800acb4:	4640      	mov	r0, r8
 800acb6:	4649      	mov	r1, r9
 800acb8:	f7f5 fb24 	bl	8000304 <__aeabi_uldivmod>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4613      	mov	r3, r2
 800acc2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acca:	d308      	bcc.n	800acde <UART_SetConfig+0x79a>
 800accc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acd2:	d204      	bcs.n	800acde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acda:	60da      	str	r2, [r3, #12]
 800acdc:	e17c      	b.n	800afd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ace4:	e178      	b.n	800afd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acee:	f040 80c5 	bne.w	800ae7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800acf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acf6:	2b20      	cmp	r3, #32
 800acf8:	dc48      	bgt.n	800ad8c <UART_SetConfig+0x848>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	db7b      	blt.n	800adf6 <UART_SetConfig+0x8b2>
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	d879      	bhi.n	800adf6 <UART_SetConfig+0x8b2>
 800ad02:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <UART_SetConfig+0x7c4>)
 800ad04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad08:	0800ad93 	.word	0x0800ad93
 800ad0c:	0800ad9b 	.word	0x0800ad9b
 800ad10:	0800adf7 	.word	0x0800adf7
 800ad14:	0800adf7 	.word	0x0800adf7
 800ad18:	0800ada3 	.word	0x0800ada3
 800ad1c:	0800adf7 	.word	0x0800adf7
 800ad20:	0800adf7 	.word	0x0800adf7
 800ad24:	0800adf7 	.word	0x0800adf7
 800ad28:	0800adb3 	.word	0x0800adb3
 800ad2c:	0800adf7 	.word	0x0800adf7
 800ad30:	0800adf7 	.word	0x0800adf7
 800ad34:	0800adf7 	.word	0x0800adf7
 800ad38:	0800adf7 	.word	0x0800adf7
 800ad3c:	0800adf7 	.word	0x0800adf7
 800ad40:	0800adf7 	.word	0x0800adf7
 800ad44:	0800adf7 	.word	0x0800adf7
 800ad48:	0800adc3 	.word	0x0800adc3
 800ad4c:	0800adf7 	.word	0x0800adf7
 800ad50:	0800adf7 	.word	0x0800adf7
 800ad54:	0800adf7 	.word	0x0800adf7
 800ad58:	0800adf7 	.word	0x0800adf7
 800ad5c:	0800adf7 	.word	0x0800adf7
 800ad60:	0800adf7 	.word	0x0800adf7
 800ad64:	0800adf7 	.word	0x0800adf7
 800ad68:	0800adf7 	.word	0x0800adf7
 800ad6c:	0800adf7 	.word	0x0800adf7
 800ad70:	0800adf7 	.word	0x0800adf7
 800ad74:	0800adf7 	.word	0x0800adf7
 800ad78:	0800adf7 	.word	0x0800adf7
 800ad7c:	0800adf7 	.word	0x0800adf7
 800ad80:	0800adf7 	.word	0x0800adf7
 800ad84:	0800adf7 	.word	0x0800adf7
 800ad88:	0800ade9 	.word	0x0800ade9
 800ad8c:	2b40      	cmp	r3, #64	@ 0x40
 800ad8e:	d02e      	beq.n	800adee <UART_SetConfig+0x8aa>
 800ad90:	e031      	b.n	800adf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad92:	f7fb fd77 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 800ad96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad98:	e033      	b.n	800ae02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad9a:	f7fb fd89 	bl	80068b0 <HAL_RCC_GetPCLK2Freq>
 800ad9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ada0:	e02f      	b.n	800ae02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fd fd7a 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb0:	e027      	b.n	800ae02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb2:	f107 0318 	add.w	r3, r7, #24
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fd fec6 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adc0:	e01f      	b.n	800ae02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ae78 <UART_SetConfig+0x934>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d009      	beq.n	800ade2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adce:	4b2a      	ldr	r3, [pc, #168]	@ (800ae78 <UART_SetConfig+0x934>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	08db      	lsrs	r3, r3, #3
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	4a24      	ldr	r2, [pc, #144]	@ (800ae6c <UART_SetConfig+0x928>)
 800adda:	fa22 f303 	lsr.w	r3, r2, r3
 800adde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ade0:	e00f      	b.n	800ae02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ade2:	4b22      	ldr	r3, [pc, #136]	@ (800ae6c <UART_SetConfig+0x928>)
 800ade4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade6:	e00c      	b.n	800ae02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ade8:	4b21      	ldr	r3, [pc, #132]	@ (800ae70 <UART_SetConfig+0x92c>)
 800adea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adec:	e009      	b.n	800ae02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf4:	e005      	b.n	800ae02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80e7 	beq.w	800afd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0e:	4a19      	ldr	r2, [pc, #100]	@ (800ae74 <UART_SetConfig+0x930>)
 800ae10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae14:	461a      	mov	r2, r3
 800ae16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae1c:	005a      	lsls	r2, r3, #1
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	085b      	lsrs	r3, r3, #1
 800ae24:	441a      	add	r2, r3
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae32:	2b0f      	cmp	r3, #15
 800ae34:	d916      	bls.n	800ae64 <UART_SetConfig+0x920>
 800ae36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae3c:	d212      	bcs.n	800ae64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	f023 030f 	bic.w	r3, r3, #15
 800ae46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4a:	085b      	lsrs	r3, r3, #1
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae56:	4313      	orrs	r3, r2
 800ae58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae60:	60da      	str	r2, [r3, #12]
 800ae62:	e0b9      	b.n	800afd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae6a:	e0b5      	b.n	800afd8 <UART_SetConfig+0xa94>
 800ae6c:	03d09000 	.word	0x03d09000
 800ae70:	003d0900 	.word	0x003d0900
 800ae74:	080129e0 	.word	0x080129e0
 800ae78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae80:	2b20      	cmp	r3, #32
 800ae82:	dc49      	bgt.n	800af18 <UART_SetConfig+0x9d4>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	db7c      	blt.n	800af82 <UART_SetConfig+0xa3e>
 800ae88:	2b20      	cmp	r3, #32
 800ae8a:	d87a      	bhi.n	800af82 <UART_SetConfig+0xa3e>
 800ae8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae94 <UART_SetConfig+0x950>)
 800ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae92:	bf00      	nop
 800ae94:	0800af1f 	.word	0x0800af1f
 800ae98:	0800af27 	.word	0x0800af27
 800ae9c:	0800af83 	.word	0x0800af83
 800aea0:	0800af83 	.word	0x0800af83
 800aea4:	0800af2f 	.word	0x0800af2f
 800aea8:	0800af83 	.word	0x0800af83
 800aeac:	0800af83 	.word	0x0800af83
 800aeb0:	0800af83 	.word	0x0800af83
 800aeb4:	0800af3f 	.word	0x0800af3f
 800aeb8:	0800af83 	.word	0x0800af83
 800aebc:	0800af83 	.word	0x0800af83
 800aec0:	0800af83 	.word	0x0800af83
 800aec4:	0800af83 	.word	0x0800af83
 800aec8:	0800af83 	.word	0x0800af83
 800aecc:	0800af83 	.word	0x0800af83
 800aed0:	0800af83 	.word	0x0800af83
 800aed4:	0800af4f 	.word	0x0800af4f
 800aed8:	0800af83 	.word	0x0800af83
 800aedc:	0800af83 	.word	0x0800af83
 800aee0:	0800af83 	.word	0x0800af83
 800aee4:	0800af83 	.word	0x0800af83
 800aee8:	0800af83 	.word	0x0800af83
 800aeec:	0800af83 	.word	0x0800af83
 800aef0:	0800af83 	.word	0x0800af83
 800aef4:	0800af83 	.word	0x0800af83
 800aef8:	0800af83 	.word	0x0800af83
 800aefc:	0800af83 	.word	0x0800af83
 800af00:	0800af83 	.word	0x0800af83
 800af04:	0800af83 	.word	0x0800af83
 800af08:	0800af83 	.word	0x0800af83
 800af0c:	0800af83 	.word	0x0800af83
 800af10:	0800af83 	.word	0x0800af83
 800af14:	0800af75 	.word	0x0800af75
 800af18:	2b40      	cmp	r3, #64	@ 0x40
 800af1a:	d02e      	beq.n	800af7a <UART_SetConfig+0xa36>
 800af1c:	e031      	b.n	800af82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af1e:	f7fb fcb1 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 800af22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af24:	e033      	b.n	800af8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af26:	f7fb fcc3 	bl	80068b0 <HAL_RCC_GetPCLK2Freq>
 800af2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af2c:	e02f      	b.n	800af8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af32:	4618      	mov	r0, r3
 800af34:	f7fd fcb4 	bl	80088a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3c:	e027      	b.n	800af8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af3e:	f107 0318 	add.w	r3, r7, #24
 800af42:	4618      	mov	r0, r3
 800af44:	f7fd fe00 	bl	8008b48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af4c:	e01f      	b.n	800af8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af4e:	4b2d      	ldr	r3, [pc, #180]	@ (800b004 <UART_SetConfig+0xac0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0320 	and.w	r3, r3, #32
 800af56:	2b00      	cmp	r3, #0
 800af58:	d009      	beq.n	800af6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af5a:	4b2a      	ldr	r3, [pc, #168]	@ (800b004 <UART_SetConfig+0xac0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	08db      	lsrs	r3, r3, #3
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	4a28      	ldr	r2, [pc, #160]	@ (800b008 <UART_SetConfig+0xac4>)
 800af66:	fa22 f303 	lsr.w	r3, r2, r3
 800af6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af6c:	e00f      	b.n	800af8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800af6e:	4b26      	ldr	r3, [pc, #152]	@ (800b008 <UART_SetConfig+0xac4>)
 800af70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af72:	e00c      	b.n	800af8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af74:	4b25      	ldr	r3, [pc, #148]	@ (800b00c <UART_SetConfig+0xac8>)
 800af76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af78:	e009      	b.n	800af8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af80:	e005      	b.n	800af8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af8c:	bf00      	nop
    }

    if (pclk != 0U)
 800af8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af90:	2b00      	cmp	r3, #0
 800af92:	d021      	beq.n	800afd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af98:	4a1d      	ldr	r2, [pc, #116]	@ (800b010 <UART_SetConfig+0xacc>)
 800af9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af9e:	461a      	mov	r2, r3
 800afa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afa2:	fbb3 f2f2 	udiv	r2, r3, r2
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	085b      	lsrs	r3, r3, #1
 800afac:	441a      	add	r2, r3
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	2b0f      	cmp	r3, #15
 800afbc:	d909      	bls.n	800afd2 <UART_SetConfig+0xa8e>
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afc4:	d205      	bcs.n	800afd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc8:	b29a      	uxth	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	60da      	str	r2, [r3, #12]
 800afd0:	e002      	b.n	800afd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2201      	movs	r2, #1
 800afdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	2200      	movs	r2, #0
 800afec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2200      	movs	r2, #0
 800aff2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aff4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3748      	adds	r7, #72	@ 0x48
 800affc:	46bd      	mov	sp, r7
 800affe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b002:	bf00      	nop
 800b004:	58024400 	.word	0x58024400
 800b008:	03d09000 	.word	0x03d09000
 800b00c:	003d0900 	.word	0x003d0900
 800b010:	080129e0 	.word	0x080129e0

0800b014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b020:	f003 0308 	and.w	r3, r3, #8
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00a      	beq.n	800b03e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b086:	f003 0304 	and.w	r3, r3, #4
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d01a      	beq.n	800b12a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b10e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b112:	d10a      	bne.n	800b12a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	605a      	str	r2, [r3, #4]
  }
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b098      	sub	sp, #96	@ 0x60
 800b15c:	af02      	add	r7, sp, #8
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b168:	f7f6 fe90 	bl	8001e8c <HAL_GetTick>
 800b16c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0308 	and.w	r3, r3, #8
 800b178:	2b08      	cmp	r3, #8
 800b17a:	d12f      	bne.n	800b1dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b17c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b184:	2200      	movs	r2, #0
 800b186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f88e 	bl	800b2ac <UART_WaitOnFlagUntilTimeout>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d022      	beq.n	800b1dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1bc:	e841 2300 	strex	r3, r2, [r1]
 800b1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1e6      	bne.n	800b196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e063      	b.n	800b2a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d149      	bne.n	800b27e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f857 	bl	800b2ac <UART_WaitOnFlagUntilTimeout>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d03c      	beq.n	800b27e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	623b      	str	r3, [r7, #32]
   return(result);
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b222:	633b      	str	r3, [r7, #48]	@ 0x30
 800b224:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e6      	bne.n	800b204 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3308      	adds	r3, #8
 800b23c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	60fb      	str	r3, [r7, #12]
   return(result);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f023 0301 	bic.w	r3, r3, #1
 800b24c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b256:	61fa      	str	r2, [r7, #28]
 800b258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	69b9      	ldr	r1, [r7, #24]
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	e841 2300 	strex	r3, r2, [r1]
 800b262:	617b      	str	r3, [r7, #20]
   return(result);
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e5      	bne.n	800b236 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b27a:	2303      	movs	r3, #3
 800b27c:	e012      	b.n	800b2a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2220      	movs	r2, #32
 800b282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3758      	adds	r7, #88	@ 0x58
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2bc:	e04f      	b.n	800b35e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2c4:	d04b      	beq.n	800b35e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2c6:	f7f6 fde1 	bl	8001e8c <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d302      	bcc.n	800b2dc <UART_WaitOnFlagUntilTimeout+0x30>
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d101      	bne.n	800b2e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e04e      	b.n	800b37e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0304 	and.w	r3, r3, #4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d037      	beq.n	800b35e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b80      	cmp	r3, #128	@ 0x80
 800b2f2:	d034      	beq.n	800b35e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2b40      	cmp	r3, #64	@ 0x40
 800b2f8:	d031      	beq.n	800b35e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	2b08      	cmp	r3, #8
 800b306:	d110      	bne.n	800b32a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2208      	movs	r2, #8
 800b30e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f921 	bl	800b558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2208      	movs	r2, #8
 800b31a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e029      	b.n	800b37e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b338:	d111      	bne.n	800b35e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f907 	bl	800b558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e00f      	b.n	800b37e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69da      	ldr	r2, [r3, #28]
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	4013      	ands	r3, r2
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	bf0c      	ite	eq
 800b36e:	2301      	moveq	r3, #1
 800b370:	2300      	movne	r3, #0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	461a      	mov	r2, r3
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d0a0      	beq.n	800b2be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b096      	sub	sp, #88	@ 0x58
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	4613      	mov	r3, r2
 800b394:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	88fa      	ldrh	r2, [r7, #6]
 800b3a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2222      	movs	r2, #34	@ 0x22
 800b3b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d02d      	beq.n	800b41a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3c4:	4a40      	ldr	r2, [pc, #256]	@ (800b4c8 <UART_Start_Receive_DMA+0x140>)
 800b3c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ce:	4a3f      	ldr	r2, [pc, #252]	@ (800b4cc <UART_Start_Receive_DMA+0x144>)
 800b3d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3d8:	4a3d      	ldr	r2, [pc, #244]	@ (800b4d0 <UART_Start_Receive_DMA+0x148>)
 800b3da:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3324      	adds	r3, #36	@ 0x24
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	88fb      	ldrh	r3, [r7, #6]
 800b3fc:	f7f8 fcb4 	bl	8003d68 <HAL_DMA_Start_IT>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d009      	beq.n	800b41a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2210      	movs	r2, #16
 800b40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2220      	movs	r2, #32
 800b412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e051      	b.n	800b4be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d018      	beq.n	800b454 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b436:	657b      	str	r3, [r7, #84]	@ 0x54
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	461a      	mov	r2, r3
 800b43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b440:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b442:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b448:	e841 2300 	strex	r3, r2, [r1]
 800b44c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e6      	bne.n	800b422 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3308      	adds	r3, #8
 800b45a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	f043 0301 	orr.w	r3, r3, #1
 800b46a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3308      	adds	r3, #8
 800b472:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b474:	637a      	str	r2, [r7, #52]	@ 0x34
 800b476:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b47a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e5      	bne.n	800b454 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3308      	adds	r3, #8
 800b48e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	e853 3f00 	ldrex	r3, [r3]
 800b496:	613b      	str	r3, [r7, #16]
   return(result);
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4a8:	623a      	str	r2, [r7, #32]
 800b4aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	69f9      	ldr	r1, [r7, #28]
 800b4ae:	6a3a      	ldr	r2, [r7, #32]
 800b4b0:	e841 2300 	strex	r3, r2, [r1]
 800b4b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e5      	bne.n	800b488 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3758      	adds	r7, #88	@ 0x58
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	0800b6d7 	.word	0x0800b6d7
 800b4cc:	0800b7ff 	.word	0x0800b7ff
 800b4d0:	0800b83d 	.word	0x0800b83d

0800b4d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b08f      	sub	sp, #60	@ 0x3c
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e6      	bne.n	800b4dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3308      	adds	r3, #8
 800b514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	e853 3f00 	ldrex	r3, [r3]
 800b51c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b524:	633b      	str	r3, [r7, #48]	@ 0x30
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b52e:	61ba      	str	r2, [r7, #24]
 800b530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b532:	6979      	ldr	r1, [r7, #20]
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	e841 2300 	strex	r3, r2, [r1]
 800b53a:	613b      	str	r3, [r7, #16]
   return(result);
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1e5      	bne.n	800b50e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2220      	movs	r2, #32
 800b546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b54a:	bf00      	nop
 800b54c:	373c      	adds	r7, #60	@ 0x3c
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b558:	b480      	push	{r7}
 800b55a:	b095      	sub	sp, #84	@ 0x54
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b57e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b580:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e6      	bne.n	800b560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3308      	adds	r3, #8
 800b598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	4b1e      	ldr	r3, [pc, #120]	@ (800b620 <UART_EndRxTransfer+0xc8>)
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3308      	adds	r3, #8
 800b5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e5      	bne.n	800b592 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d118      	bne.n	800b600 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	e853 3f00 	ldrex	r3, [r3]
 800b5da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f023 0310 	bic.w	r3, r3, #16
 800b5e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	6979      	ldr	r1, [r7, #20]
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	e841 2300 	strex	r3, r2, [r1]
 800b5f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e6      	bne.n	800b5ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2220      	movs	r2, #32
 800b604:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b614:	bf00      	nop
 800b616:	3754      	adds	r7, #84	@ 0x54
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	effffffe 	.word	0xeffffffe

0800b624 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b090      	sub	sp, #64	@ 0x40
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b630:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b63a:	d037      	beq.n	800b6ac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63e:	2200      	movs	r2, #0
 800b640:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3308      	adds	r3, #8
 800b64a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	e853 3f00 	ldrex	r3, [r3]
 800b652:	623b      	str	r3, [r7, #32]
   return(result);
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b65a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3308      	adds	r3, #8
 800b662:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b664:	633a      	str	r2, [r7, #48]	@ 0x30
 800b666:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b66c:	e841 2300 	strex	r3, r2, [r1]
 800b670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e5      	bne.n	800b644 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	60fb      	str	r3, [r7, #12]
   return(result);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b68c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b696:	61fb      	str	r3, [r7, #28]
 800b698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	69b9      	ldr	r1, [r7, #24]
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e6      	bne.n	800b678 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6aa:	e002      	b.n	800b6b2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b6ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b6ae:	f7fe ff0b 	bl	800a4c8 <HAL_UART_TxCpltCallback>
}
 800b6b2:	bf00      	nop
 800b6b4:	3740      	adds	r7, #64	@ 0x40
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7fe ff07 	bl	800a4dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ce:	bf00      	nop
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b09c      	sub	sp, #112	@ 0x70
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6ec:	d071      	beq.n	800b7d2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b6ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fe:	e853 3f00 	ldrex	r3, [r3]
 800b702:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b70a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b70c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b714:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b716:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b718:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b71a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b71c:	e841 2300 	strex	r3, r2, [r1]
 800b720:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e6      	bne.n	800b6f6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3308      	adds	r3, #8
 800b72e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b732:	e853 3f00 	ldrex	r3, [r3]
 800b736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73a:	f023 0301 	bic.w	r3, r3, #1
 800b73e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b748:	647a      	str	r2, [r7, #68]	@ 0x44
 800b74a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b74e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b750:	e841 2300 	strex	r3, r2, [r1]
 800b754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e5      	bne.n	800b728 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b75c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3308      	adds	r3, #8
 800b762:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	e853 3f00 	ldrex	r3, [r3]
 800b76a:	623b      	str	r3, [r7, #32]
   return(result);
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b772:	663b      	str	r3, [r7, #96]	@ 0x60
 800b774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3308      	adds	r3, #8
 800b77a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b77c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e5      	bne.n	800b75c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b792:	2220      	movs	r2, #32
 800b794:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b79a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d118      	bne.n	800b7d2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f023 0310 	bic.w	r3, r3, #16
 800b7b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c2:	69b9      	ldr	r1, [r7, #24]
 800b7c4:	69fa      	ldr	r2, [r7, #28]
 800b7c6:	e841 2300 	strex	r3, r2, [r1]
 800b7ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1e6      	bne.n	800b7a0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d107      	bne.n	800b7f0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b7ea:	f7fe fe9f 	bl	800a52c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7ee:	e002      	b.n	800b7f6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b7f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b7f2:	f7fe fe7d 	bl	800a4f0 <HAL_UART_RxCpltCallback>
}
 800b7f6:	bf00      	nop
 800b7f8:	3770      	adds	r7, #112	@ 0x70
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2201      	movs	r2, #1
 800b810:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b816:	2b01      	cmp	r3, #1
 800b818:	d109      	bne.n	800b82e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b820:	085b      	lsrs	r3, r3, #1
 800b822:	b29b      	uxth	r3, r3
 800b824:	4619      	mov	r1, r3
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7fe fe80 	bl	800a52c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b82c:	e002      	b.n	800b834 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7fe fe68 	bl	800a504 <HAL_UART_RxHalfCpltCallback>
}
 800b834:	bf00      	nop
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b848:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b850:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b858:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b864:	2b80      	cmp	r3, #128	@ 0x80
 800b866:	d109      	bne.n	800b87c <UART_DMAError+0x40>
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	2b21      	cmp	r3, #33	@ 0x21
 800b86c:	d106      	bne.n	800b87c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	2200      	movs	r2, #0
 800b872:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b876:	6978      	ldr	r0, [r7, #20]
 800b878:	f7ff fe2c 	bl	800b4d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b886:	2b40      	cmp	r3, #64	@ 0x40
 800b888:	d109      	bne.n	800b89e <UART_DMAError+0x62>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b22      	cmp	r3, #34	@ 0x22
 800b88e:	d106      	bne.n	800b89e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2200      	movs	r2, #0
 800b894:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b898:	6978      	ldr	r0, [r7, #20]
 800b89a:	f7ff fe5d 	bl	800b558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8a4:	f043 0210 	orr.w	r2, r3, #16
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8ae:	6978      	ldr	r0, [r7, #20]
 800b8b0:	f7fe fe32 	bl	800a518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8b4:	bf00      	nop
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7fe fe1c 	bl	800a518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8e0:	bf00      	nop
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b088      	sub	sp, #32
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	e853 3f00 	ldrex	r3, [r3]
 800b8fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	61bb      	str	r3, [r7, #24]
 800b910:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	6979      	ldr	r1, [r7, #20]
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	613b      	str	r3, [r7, #16]
   return(result);
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e6      	bne.n	800b8f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2220      	movs	r2, #32
 800b926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7fe fdc9 	bl	800a4c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b936:	bf00      	nop
 800b938:	3720      	adds	r7, #32
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b93e:	b480      	push	{r7}
 800b940:	b083      	sub	sp, #12
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b946:	bf00      	nop
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b966:	b480      	push	{r7}
 800b968:	b083      	sub	sp, #12
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b96e:	bf00      	nop
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d101      	bne.n	800b990 <HAL_UARTEx_DisableFifoMode+0x16>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e027      	b.n	800b9e0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2224      	movs	r2, #36	@ 0x24
 800b99c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f022 0201 	bic.w	r2, r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b9be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2220      	movs	r2, #32
 800b9d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e02d      	b.n	800ba60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2224      	movs	r2, #36	@ 0x24
 800ba10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f84f 	bl	800bae4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2220      	movs	r2, #32
 800ba52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e02d      	b.n	800badc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2224      	movs	r2, #36	@ 0x24
 800ba8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f022 0201 	bic.w	r2, r2, #1
 800baa6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f811 	bl	800bae4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2220      	movs	r2, #32
 800bace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d108      	bne.n	800bb06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb04:	e031      	b.n	800bb6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb06:	2310      	movs	r3, #16
 800bb08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb0a:	2310      	movs	r3, #16
 800bb0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	0e5b      	lsrs	r3, r3, #25
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	0f5b      	lsrs	r3, r3, #29
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0307 	and.w	r3, r3, #7
 800bb2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
 800bb30:	7b3a      	ldrb	r2, [r7, #12]
 800bb32:	4911      	ldr	r1, [pc, #68]	@ (800bb78 <UARTEx_SetNbDataToProcess+0x94>)
 800bb34:	5c8a      	ldrb	r2, [r1, r2]
 800bb36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb3a:	7b3a      	ldrb	r2, [r7, #12]
 800bb3c:	490f      	ldr	r1, [pc, #60]	@ (800bb7c <UARTEx_SetNbDataToProcess+0x98>)
 800bb3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb40:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	7b7a      	ldrb	r2, [r7, #13]
 800bb50:	4909      	ldr	r1, [pc, #36]	@ (800bb78 <UARTEx_SetNbDataToProcess+0x94>)
 800bb52:	5c8a      	ldrb	r2, [r1, r2]
 800bb54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb58:	7b7a      	ldrb	r2, [r7, #13]
 800bb5a:	4908      	ldr	r1, [pc, #32]	@ (800bb7c <UARTEx_SetNbDataToProcess+0x98>)
 800bb5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb6a:	bf00      	nop
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	080129f8 	.word	0x080129f8
 800bb7c:	08012a00 	.word	0x08012a00

0800bb80 <__NVIC_SetPriority>:
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bb8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	db0a      	blt.n	800bbaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	490c      	ldr	r1, [pc, #48]	@ (800bbcc <__NVIC_SetPriority+0x4c>)
 800bb9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb9e:	0112      	lsls	r2, r2, #4
 800bba0:	b2d2      	uxtb	r2, r2
 800bba2:	440b      	add	r3, r1
 800bba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bba8:	e00a      	b.n	800bbc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	4908      	ldr	r1, [pc, #32]	@ (800bbd0 <__NVIC_SetPriority+0x50>)
 800bbb0:	88fb      	ldrh	r3, [r7, #6]
 800bbb2:	f003 030f 	and.w	r3, r3, #15
 800bbb6:	3b04      	subs	r3, #4
 800bbb8:	0112      	lsls	r2, r2, #4
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	440b      	add	r3, r1
 800bbbe:	761a      	strb	r2, [r3, #24]
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	e000e100 	.word	0xe000e100
 800bbd0:	e000ed00 	.word	0xe000ed00

0800bbd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bbd8:	4b05      	ldr	r3, [pc, #20]	@ (800bbf0 <SysTick_Handler+0x1c>)
 800bbda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bbdc:	f001 fea2 	bl	800d924 <xTaskGetSchedulerState>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d001      	beq.n	800bbea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bbe6:	f002 fe3f 	bl	800e868 <xPortSysTickHandler>
  }
}
 800bbea:	bf00      	nop
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	e000e010 	.word	0xe000e010

0800bbf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	f06f 0004 	mvn.w	r0, #4
 800bbfe:	f7ff ffbf 	bl	800bb80 <__NVIC_SetPriority>
#endif
}
 800bc02:	bf00      	nop
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc0e:	f3ef 8305 	mrs	r3, IPSR
 800bc12:	603b      	str	r3, [r7, #0]
  return(result);
 800bc14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc1a:	f06f 0305 	mvn.w	r3, #5
 800bc1e:	607b      	str	r3, [r7, #4]
 800bc20:	e00c      	b.n	800bc3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc22:	4b0a      	ldr	r3, [pc, #40]	@ (800bc4c <osKernelInitialize+0x44>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d105      	bne.n	800bc36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc2a:	4b08      	ldr	r3, [pc, #32]	@ (800bc4c <osKernelInitialize+0x44>)
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	607b      	str	r3, [r7, #4]
 800bc34:	e002      	b.n	800bc3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc3c:	687b      	ldr	r3, [r7, #4]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	24002074 	.word	0x24002074

0800bc50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc56:	f3ef 8305 	mrs	r3, IPSR
 800bc5a:	603b      	str	r3, [r7, #0]
  return(result);
 800bc5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc62:	f06f 0305 	mvn.w	r3, #5
 800bc66:	607b      	str	r3, [r7, #4]
 800bc68:	e010      	b.n	800bc8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc98 <osKernelStart+0x48>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d109      	bne.n	800bc86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc72:	f7ff ffbf 	bl	800bbf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc76:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <osKernelStart+0x48>)
 800bc78:	2202      	movs	r2, #2
 800bc7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc7c:	f001 f9ee 	bl	800d05c <vTaskStartScheduler>
      stat = osOK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	607b      	str	r3, [r7, #4]
 800bc84:	e002      	b.n	800bc8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc8c:	687b      	ldr	r3, [r7, #4]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	24002074 	.word	0x24002074

0800bc9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08e      	sub	sp, #56	@ 0x38
 800bca0:	af04      	add	r7, sp, #16
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcac:	f3ef 8305 	mrs	r3, IPSR
 800bcb0:	617b      	str	r3, [r7, #20]
  return(result);
 800bcb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d17e      	bne.n	800bdb6 <osThreadNew+0x11a>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d07b      	beq.n	800bdb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bcbe:	2380      	movs	r3, #128	@ 0x80
 800bcc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcc2:	2318      	movs	r3, #24
 800bcc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bcca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d045      	beq.n	800bd62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <osThreadNew+0x48>
        name = attr->name;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d008      	beq.n	800bd0a <osThreadNew+0x6e>
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	2b38      	cmp	r3, #56	@ 0x38
 800bcfc:	d805      	bhi.n	800bd0a <osThreadNew+0x6e>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <osThreadNew+0x72>
        return (NULL);
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e054      	b.n	800bdb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	089b      	lsrs	r3, r3, #2
 800bd1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00e      	beq.n	800bd44 <osThreadNew+0xa8>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	2ba7      	cmp	r3, #167	@ 0xa7
 800bd2c:	d90a      	bls.n	800bd44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d006      	beq.n	800bd44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d002      	beq.n	800bd44 <osThreadNew+0xa8>
        mem = 1;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	61bb      	str	r3, [r7, #24]
 800bd42:	e010      	b.n	800bd66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10c      	bne.n	800bd66 <osThreadNew+0xca>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d108      	bne.n	800bd66 <osThreadNew+0xca>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d104      	bne.n	800bd66 <osThreadNew+0xca>
          mem = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61bb      	str	r3, [r7, #24]
 800bd60:	e001      	b.n	800bd66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d110      	bne.n	800bd8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd74:	9202      	str	r2, [sp, #8]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6a3a      	ldr	r2, [r7, #32]
 800bd80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 ff76 	bl	800cc74 <xTaskCreateStatic>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	613b      	str	r3, [r7, #16]
 800bd8c:	e013      	b.n	800bdb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d110      	bne.n	800bdb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	f107 0310 	add.w	r3, r7, #16
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f000 ffc4 	bl	800cd34 <xTaskCreate>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d001      	beq.n	800bdb6 <osThreadNew+0x11a>
            hTask = NULL;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bdb6:	693b      	ldr	r3, [r7, #16]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3728      	adds	r7, #40	@ 0x28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af02      	add	r7, sp, #8
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <osThreadFlagsSet+0x1a>
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	da03      	bge.n	800bde2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800bdda:	f06f 0303 	mvn.w	r3, #3
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e035      	b.n	800be4e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800bde2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bde6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bde8:	f3ef 8305 	mrs	r3, IPSR
 800bdec:	613b      	str	r3, [r7, #16]
  return(result);
 800bdee:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d01f      	beq.n	800be34 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800bdf8:	f107 0308 	add.w	r3, r7, #8
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	2201      	movs	r2, #1
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6978      	ldr	r0, [r7, #20]
 800be06:	f001 fedd 	bl	800dbc4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800be0a:	f107 030c 	add.w	r3, r7, #12
 800be0e:	2200      	movs	r2, #0
 800be10:	9200      	str	r2, [sp, #0]
 800be12:	2200      	movs	r2, #0
 800be14:	2100      	movs	r1, #0
 800be16:	6978      	ldr	r0, [r7, #20]
 800be18:	f001 fed4 	bl	800dbc4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d015      	beq.n	800be4e <osThreadFlagsSet+0x8e>
 800be22:	4b0d      	ldr	r3, [pc, #52]	@ (800be58 <osThreadFlagsSet+0x98>)
 800be24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	e00c      	b.n	800be4e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800be34:	2300      	movs	r3, #0
 800be36:	2201      	movs	r2, #1
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6978      	ldr	r0, [r7, #20]
 800be3c:	f001 fe00 	bl	800da40 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800be40:	f107 030c 	add.w	r3, r7, #12
 800be44:	2200      	movs	r2, #0
 800be46:	2100      	movs	r1, #0
 800be48:	6978      	ldr	r0, [r7, #20]
 800be4a:	f001 fdf9 	bl	800da40 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800be4e:	68fb      	ldr	r3, [r7, #12]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	e000ed04 	.word	0xe000ed04

0800be5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be64:	f3ef 8305 	mrs	r3, IPSR
 800be68:	60bb      	str	r3, [r7, #8]
  return(result);
 800be6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <osDelay+0x1c>
    stat = osErrorISR;
 800be70:	f06f 0305 	mvn.w	r3, #5
 800be74:	60fb      	str	r3, [r7, #12]
 800be76:	e007      	b.n	800be88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be78:	2300      	movs	r3, #0
 800be7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <osDelay+0x2c>
      vTaskDelay(ticks);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f001 f8b4 	bl	800cff0 <vTaskDelay>
    }
  }

  return (stat);
 800be88:	68fb      	ldr	r3, [r7, #12]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800be92:	b580      	push	{r7, lr}
 800be94:	b088      	sub	sp, #32
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be9e:	f3ef 8305 	mrs	r3, IPSR
 800bea2:	60bb      	str	r3, [r7, #8]
  return(result);
 800bea4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d174      	bne.n	800bf94 <osMutexNew+0x102>
    if (attr != NULL) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	61bb      	str	r3, [r7, #24]
 800beb6:	e001      	b.n	800bebc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800beb8:	2300      	movs	r3, #0
 800beba:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <osMutexNew+0x3a>
      rmtx = 1U;
 800bec6:	2301      	movs	r3, #1
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	e001      	b.n	800bed0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800becc:	2300      	movs	r3, #0
 800bece:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	f003 0308 	and.w	r3, r3, #8
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d15c      	bne.n	800bf94 <osMutexNew+0x102>
      mem = -1;
 800beda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bede:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d015      	beq.n	800bf12 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d006      	beq.n	800befc <osMutexNew+0x6a>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	2b4f      	cmp	r3, #79	@ 0x4f
 800bef4:	d902      	bls.n	800befc <osMutexNew+0x6a>
          mem = 1;
 800bef6:	2301      	movs	r3, #1
 800bef8:	613b      	str	r3, [r7, #16]
 800befa:	e00c      	b.n	800bf16 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d108      	bne.n	800bf16 <osMutexNew+0x84>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d104      	bne.n	800bf16 <osMutexNew+0x84>
            mem = 0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	e001      	b.n	800bf16 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d112      	bne.n	800bf42 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d007      	beq.n	800bf32 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	4619      	mov	r1, r3
 800bf28:	2004      	movs	r0, #4
 800bf2a:	f000 fa98 	bl	800c45e <xQueueCreateMutexStatic>
 800bf2e:	61f8      	str	r0, [r7, #28]
 800bf30:	e016      	b.n	800bf60 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	4619      	mov	r1, r3
 800bf38:	2001      	movs	r0, #1
 800bf3a:	f000 fa90 	bl	800c45e <xQueueCreateMutexStatic>
 800bf3e:	61f8      	str	r0, [r7, #28]
 800bf40:	e00e      	b.n	800bf60 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10b      	bne.n	800bf60 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d004      	beq.n	800bf58 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bf4e:	2004      	movs	r0, #4
 800bf50:	f000 fa6d 	bl	800c42e <xQueueCreateMutex>
 800bf54:	61f8      	str	r0, [r7, #28]
 800bf56:	e003      	b.n	800bf60 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bf58:	2001      	movs	r0, #1
 800bf5a:	f000 fa68 	bl	800c42e <xQueueCreateMutex>
 800bf5e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00c      	beq.n	800bf80 <osMutexNew+0xee>
        if (attr != NULL) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <osMutexNew+0xe2>
          name = attr->name;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	e001      	b.n	800bf78 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800bf78:	68f9      	ldr	r1, [r7, #12]
 800bf7a:	69f8      	ldr	r0, [r7, #28]
 800bf7c:	f000 fe1c 	bl	800cbb8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d006      	beq.n	800bf94 <osMutexNew+0x102>
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f043 0301 	orr.w	r3, r3, #1
 800bf92:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bf94:	69fb      	ldr	r3, [r7, #28]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3720      	adds	r7, #32
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4a07      	ldr	r2, [pc, #28]	@ (800bfcc <vApplicationGetIdleTaskMemory+0x2c>)
 800bfb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4a06      	ldr	r2, [pc, #24]	@ (800bfd0 <vApplicationGetIdleTaskMemory+0x30>)
 800bfb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2280      	movs	r2, #128	@ 0x80
 800bfbc:	601a      	str	r2, [r3, #0]
}
 800bfbe:	bf00      	nop
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	24002078 	.word	0x24002078
 800bfd0:	24002120 	.word	0x24002120

0800bfd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4a07      	ldr	r2, [pc, #28]	@ (800c000 <vApplicationGetTimerTaskMemory+0x2c>)
 800bfe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	4a06      	ldr	r2, [pc, #24]	@ (800c004 <vApplicationGetTimerTaskMemory+0x30>)
 800bfea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bff2:	601a      	str	r2, [r3, #0]
}
 800bff4:	bf00      	nop
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	24002320 	.word	0x24002320
 800c004:	240023c8 	.word	0x240023c8

0800c008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f103 0208 	add.w	r2, r3, #8
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f103 0208 	add.w	r2, r3, #8
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f103 0208 	add.w	r2, r3, #8
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c056:	bf00      	nop
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c062:	b480      	push	{r7}
 800c064:	b085      	sub	sp, #20
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	689a      	ldr	r2, [r3, #8]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	601a      	str	r2, [r3, #0]
}
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b085      	sub	sp, #20
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0c0:	d103      	bne.n	800c0ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e00c      	b.n	800c0e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	e002      	b.n	800c0d8 <vListInsert+0x2e>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d2f6      	bcs.n	800c0d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	601a      	str	r2, [r3, #0]
}
 800c110:	bf00      	nop
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	6892      	ldr	r2, [r2, #8]
 800c132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	6852      	ldr	r2, [r2, #4]
 800c13c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	429a      	cmp	r2, r3
 800c146:	d103      	bne.n	800c150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	1e5a      	subs	r2, r3, #1
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10b      	bne.n	800c19c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c196:	bf00      	nop
 800c198:	bf00      	nop
 800c19a:	e7fd      	b.n	800c198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c19c:	f002 fad4 	bl	800e748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a8:	68f9      	ldr	r1, [r7, #12]
 800c1aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1ac:	fb01 f303 	mul.w	r3, r1, r3
 800c1b0:	441a      	add	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	68f9      	ldr	r1, [r7, #12]
 800c1d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1d2:	fb01 f303 	mul.w	r3, r1, r3
 800c1d6:	441a      	add	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	22ff      	movs	r2, #255	@ 0xff
 800c1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	22ff      	movs	r2, #255	@ 0xff
 800c1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d114      	bne.n	800c21c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01a      	beq.n	800c230 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3310      	adds	r3, #16
 800c1fe:	4618      	mov	r0, r3
 800c200:	f001 f9ca 	bl	800d598 <xTaskRemoveFromEventList>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d012      	beq.n	800c230 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c20a:	4b0d      	ldr	r3, [pc, #52]	@ (800c240 <xQueueGenericReset+0xd0>)
 800c20c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	e009      	b.n	800c230 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3310      	adds	r3, #16
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fef1 	bl	800c008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3324      	adds	r3, #36	@ 0x24
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7ff feec 	bl	800c008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c230:	f002 fabc 	bl	800e7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c234:	2301      	movs	r3, #1
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	e000ed04 	.word	0xe000ed04

0800c244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08e      	sub	sp, #56	@ 0x38
 800c248:	af02      	add	r7, sp, #8
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10b      	bne.n	800c270 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10b      	bne.n	800c28e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <xQueueGenericCreateStatic+0x56>
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <xQueueGenericCreateStatic+0x5a>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <xQueueGenericCreateStatic+0x5c>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10b      	bne.n	800c2bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	623b      	str	r3, [r7, #32]
}
 800c2b6:	bf00      	nop
 800c2b8:	bf00      	nop
 800c2ba:	e7fd      	b.n	800c2b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d102      	bne.n	800c2c8 <xQueueGenericCreateStatic+0x84>
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <xQueueGenericCreateStatic+0x88>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <xQueueGenericCreateStatic+0x8a>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10b      	bne.n	800c2ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	61fb      	str	r3, [r7, #28]
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop
 800c2e8:	e7fd      	b.n	800c2e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2ea:	2350      	movs	r3, #80	@ 0x50
 800c2ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2b50      	cmp	r3, #80	@ 0x50
 800c2f2:	d00b      	beq.n	800c30c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	61bb      	str	r3, [r7, #24]
}
 800c306:	bf00      	nop
 800c308:	bf00      	nop
 800c30a:	e7fd      	b.n	800c308 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c30c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00d      	beq.n	800c334 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c320:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f000 f840 	bl	800c3b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c336:	4618      	mov	r0, r3
 800c338:	3730      	adds	r7, #48	@ 0x30
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b08a      	sub	sp, #40	@ 0x28
 800c342:	af02      	add	r7, sp, #8
 800c344:	60f8      	str	r0, [r7, #12]
 800c346:	60b9      	str	r1, [r7, #8]
 800c348:	4613      	mov	r3, r2
 800c34a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10b      	bne.n	800c36a <xQueueGenericCreate+0x2c>
	__asm volatile
 800c352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c356:	f383 8811 	msr	BASEPRI, r3
 800c35a:	f3bf 8f6f 	isb	sy
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	613b      	str	r3, [r7, #16]
}
 800c364:	bf00      	nop
 800c366:	bf00      	nop
 800c368:	e7fd      	b.n	800c366 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	fb02 f303 	mul.w	r3, r2, r3
 800c372:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	3350      	adds	r3, #80	@ 0x50
 800c378:	4618      	mov	r0, r3
 800c37a:	f002 fb07 	bl	800e98c <pvPortMalloc>
 800c37e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d011      	beq.n	800c3aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	3350      	adds	r3, #80	@ 0x50
 800c38e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c398:	79fa      	ldrb	r2, [r7, #7]
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 f805 	bl	800c3b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3720      	adds	r7, #32
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d103      	bne.n	800c3d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	69ba      	ldr	r2, [r7, #24]
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	e002      	b.n	800c3d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	68ba      	ldr	r2, [r7, #8]
 800c3e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	69b8      	ldr	r0, [r7, #24]
 800c3e6:	f7ff fec3 	bl	800c170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	78fa      	ldrb	r2, [r7, #3]
 800c3ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3f2:	bf00      	nop
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00e      	beq.n	800c426 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c41a:	2300      	movs	r3, #0
 800c41c:	2200      	movs	r2, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 f837 	bl	800c494 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c426:	bf00      	nop
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b086      	sub	sp, #24
 800c432:	af00      	add	r7, sp, #0
 800c434:	4603      	mov	r3, r0
 800c436:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c438:	2301      	movs	r3, #1
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	2300      	movs	r3, #0
 800c43e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	461a      	mov	r2, r3
 800c444:	6939      	ldr	r1, [r7, #16]
 800c446:	6978      	ldr	r0, [r7, #20]
 800c448:	f7ff ff79 	bl	800c33e <xQueueGenericCreate>
 800c44c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff ffd3 	bl	800c3fa <prvInitialiseMutex>

		return xNewQueue;
 800c454:	68fb      	ldr	r3, [r7, #12]
	}
 800c456:	4618      	mov	r0, r3
 800c458:	3718      	adds	r7, #24
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b088      	sub	sp, #32
 800c462:	af02      	add	r7, sp, #8
 800c464:	4603      	mov	r3, r0
 800c466:	6039      	str	r1, [r7, #0]
 800c468:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c46a:	2301      	movs	r3, #1
 800c46c:	617b      	str	r3, [r7, #20]
 800c46e:	2300      	movs	r3, #0
 800c470:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c472:	79fb      	ldrb	r3, [r7, #7]
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2200      	movs	r2, #0
 800c47a:	6939      	ldr	r1, [r7, #16]
 800c47c:	6978      	ldr	r0, [r7, #20]
 800c47e:	f7ff fee1 	bl	800c244 <xQueueGenericCreateStatic>
 800c482:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7ff ffb8 	bl	800c3fa <prvInitialiseMutex>

		return xNewQueue;
 800c48a:	68fb      	ldr	r3, [r7, #12]
	}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3718      	adds	r7, #24
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08e      	sub	sp, #56	@ 0x38
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
 800c4a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10b      	bne.n	800c4c8 <xQueueGenericSend+0x34>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c4c2:	bf00      	nop
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d103      	bne.n	800c4d6 <xQueueGenericSend+0x42>
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <xQueueGenericSend+0x46>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e000      	b.n	800c4dc <xQueueGenericSend+0x48>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10b      	bne.n	800c4f8 <xQueueGenericSend+0x64>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d103      	bne.n	800c506 <xQueueGenericSend+0x72>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c502:	2b01      	cmp	r3, #1
 800c504:	d101      	bne.n	800c50a <xQueueGenericSend+0x76>
 800c506:	2301      	movs	r3, #1
 800c508:	e000      	b.n	800c50c <xQueueGenericSend+0x78>
 800c50a:	2300      	movs	r3, #0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10b      	bne.n	800c528 <xQueueGenericSend+0x94>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	623b      	str	r3, [r7, #32]
}
 800c522:	bf00      	nop
 800c524:	bf00      	nop
 800c526:	e7fd      	b.n	800c524 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c528:	f001 f9fc 	bl	800d924 <xTaskGetSchedulerState>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <xQueueGenericSend+0xa4>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <xQueueGenericSend+0xa8>
 800c538:	2301      	movs	r3, #1
 800c53a:	e000      	b.n	800c53e <xQueueGenericSend+0xaa>
 800c53c:	2300      	movs	r3, #0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10b      	bne.n	800c55a <xQueueGenericSend+0xc6>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	61fb      	str	r3, [r7, #28]
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
 800c558:	e7fd      	b.n	800c556 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c55a:	f002 f8f5 	bl	800e748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c566:	429a      	cmp	r2, r3
 800c568:	d302      	bcc.n	800c570 <xQueueGenericSend+0xdc>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d129      	bne.n	800c5c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c576:	f000 fa0f 	bl	800c998 <prvCopyDataToQueue>
 800c57a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c580:	2b00      	cmp	r3, #0
 800c582:	d010      	beq.n	800c5a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c586:	3324      	adds	r3, #36	@ 0x24
 800c588:	4618      	mov	r0, r3
 800c58a:	f001 f805 	bl	800d598 <xTaskRemoveFromEventList>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d013      	beq.n	800c5bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c594:	4b3f      	ldr	r3, [pc, #252]	@ (800c694 <xQueueGenericSend+0x200>)
 800c596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	e00a      	b.n	800c5bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d007      	beq.n	800c5bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c5ac:	4b39      	ldr	r3, [pc, #228]	@ (800c694 <xQueueGenericSend+0x200>)
 800c5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c5bc:	f002 f8f6 	bl	800e7ac <vPortExitCritical>
				return pdPASS;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e063      	b.n	800c68c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d103      	bne.n	800c5d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5ca:	f002 f8ef 	bl	800e7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e05c      	b.n	800c68c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d106      	bne.n	800c5e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5d8:	f107 0314 	add.w	r3, r7, #20
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f001 f83f 	bl	800d660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5e6:	f002 f8e1 	bl	800e7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5ea:	f000 fda7 	bl	800d13c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5ee:	f002 f8ab 	bl	800e748 <vPortEnterCritical>
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5f8:	b25b      	sxtb	r3, r3
 800c5fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5fe:	d103      	bne.n	800c608 <xQueueGenericSend+0x174>
 800c600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c602:	2200      	movs	r2, #0
 800c604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c60e:	b25b      	sxtb	r3, r3
 800c610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c614:	d103      	bne.n	800c61e <xQueueGenericSend+0x18a>
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c61e:	f002 f8c5 	bl	800e7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c622:	1d3a      	adds	r2, r7, #4
 800c624:	f107 0314 	add.w	r3, r7, #20
 800c628:	4611      	mov	r1, r2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f001 f82e 	bl	800d68c <xTaskCheckForTimeOut>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d124      	bne.n	800c680 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c638:	f000 faa6 	bl	800cb88 <prvIsQueueFull>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d018      	beq.n	800c674 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	3310      	adds	r3, #16
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	4611      	mov	r1, r2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 ff52 	bl	800d4f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c652:	f000 fa31 	bl	800cab8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c656:	f000 fd7f 	bl	800d158 <xTaskResumeAll>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f47f af7c 	bne.w	800c55a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c662:	4b0c      	ldr	r3, [pc, #48]	@ (800c694 <xQueueGenericSend+0x200>)
 800c664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	e772      	b.n	800c55a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c676:	f000 fa1f 	bl	800cab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c67a:	f000 fd6d 	bl	800d158 <xTaskResumeAll>
 800c67e:	e76c      	b.n	800c55a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c682:	f000 fa19 	bl	800cab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c686:	f000 fd67 	bl	800d158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c68a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3738      	adds	r7, #56	@ 0x38
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	e000ed04 	.word	0xe000ed04

0800c698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b090      	sub	sp, #64	@ 0x40
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10b      	bne.n	800c6c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	e7fd      	b.n	800c6c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d103      	bne.n	800c6d6 <xQueueGenericSendFromISR+0x3e>
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <xQueueGenericSendFromISR+0x42>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e000      	b.n	800c6dc <xQueueGenericSendFromISR+0x44>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10b      	bne.n	800c6f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6f2:	bf00      	nop
 800c6f4:	bf00      	nop
 800c6f6:	e7fd      	b.n	800c6f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d103      	bne.n	800c706 <xQueueGenericSendFromISR+0x6e>
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c702:	2b01      	cmp	r3, #1
 800c704:	d101      	bne.n	800c70a <xQueueGenericSendFromISR+0x72>
 800c706:	2301      	movs	r3, #1
 800c708:	e000      	b.n	800c70c <xQueueGenericSendFromISR+0x74>
 800c70a:	2300      	movs	r3, #0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10b      	bne.n	800c728 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	623b      	str	r3, [r7, #32]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c728:	f002 f8ee 	bl	800e908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c72c:	f3ef 8211 	mrs	r2, BASEPRI
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	61fa      	str	r2, [r7, #28]
 800c742:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c744:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c746:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c750:	429a      	cmp	r2, r3
 800c752:	d302      	bcc.n	800c75a <xQueueGenericSendFromISR+0xc2>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b02      	cmp	r3, #2
 800c758:	d12f      	bne.n	800c7ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c760:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c768:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c770:	f000 f912 	bl	800c998 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c774:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c77c:	d112      	bne.n	800c7a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c782:	2b00      	cmp	r3, #0
 800c784:	d016      	beq.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c788:	3324      	adds	r3, #36	@ 0x24
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 ff04 	bl	800d598 <xTaskRemoveFromEventList>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00e      	beq.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	e007      	b.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	b25a      	sxtb	r2, r3
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c7b8:	e001      	b.n	800c7be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c7c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3740      	adds	r7, #64	@ 0x40
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08c      	sub	sp, #48	@ 0x30
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10b      	bne.n	800c806 <xQueueReceive+0x32>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	623b      	str	r3, [r7, #32]
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	e7fd      	b.n	800c802 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d103      	bne.n	800c814 <xQueueReceive+0x40>
 800c80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <xQueueReceive+0x44>
 800c814:	2301      	movs	r3, #1
 800c816:	e000      	b.n	800c81a <xQueueReceive+0x46>
 800c818:	2300      	movs	r3, #0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10b      	bne.n	800c836 <xQueueReceive+0x62>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	61fb      	str	r3, [r7, #28]
}
 800c830:	bf00      	nop
 800c832:	bf00      	nop
 800c834:	e7fd      	b.n	800c832 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c836:	f001 f875 	bl	800d924 <xTaskGetSchedulerState>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <xQueueReceive+0x72>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <xQueueReceive+0x76>
 800c846:	2301      	movs	r3, #1
 800c848:	e000      	b.n	800c84c <xQueueReceive+0x78>
 800c84a:	2300      	movs	r3, #0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <xQueueReceive+0x94>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	61bb      	str	r3, [r7, #24]
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	e7fd      	b.n	800c864 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c868:	f001 ff6e 	bl	800e748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c870:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c874:	2b00      	cmp	r3, #0
 800c876:	d01f      	beq.n	800c8b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c87c:	f000 f8f6 	bl	800ca6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	1e5a      	subs	r2, r3, #1
 800c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c886:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00f      	beq.n	800c8b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c892:	3310      	adds	r3, #16
 800c894:	4618      	mov	r0, r3
 800c896:	f000 fe7f 	bl	800d598 <xTaskRemoveFromEventList>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d007      	beq.n	800c8b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c8a0:	4b3c      	ldr	r3, [pc, #240]	@ (800c994 <xQueueReceive+0x1c0>)
 800c8a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8b0:	f001 ff7c 	bl	800e7ac <vPortExitCritical>
				return pdPASS;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e069      	b.n	800c98c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d103      	bne.n	800c8c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8be:	f001 ff75 	bl	800e7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	e062      	b.n	800c98c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8cc:	f107 0310 	add.w	r3, r7, #16
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 fec5 	bl	800d660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8da:	f001 ff67 	bl	800e7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8de:	f000 fc2d 	bl	800d13c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8e2:	f001 ff31 	bl	800e748 <vPortEnterCritical>
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8f2:	d103      	bne.n	800c8fc <xQueueReceive+0x128>
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c902:	b25b      	sxtb	r3, r3
 800c904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c908:	d103      	bne.n	800c912 <xQueueReceive+0x13e>
 800c90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c912:	f001 ff4b 	bl	800e7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c916:	1d3a      	adds	r2, r7, #4
 800c918:	f107 0310 	add.w	r3, r7, #16
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 feb4 	bl	800d68c <xTaskCheckForTimeOut>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d123      	bne.n	800c972 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c92a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c92c:	f000 f916 	bl	800cb5c <prvIsQueueEmpty>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d017      	beq.n	800c966 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c938:	3324      	adds	r3, #36	@ 0x24
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 fdd8 	bl	800d4f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c946:	f000 f8b7 	bl	800cab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c94a:	f000 fc05 	bl	800d158 <xTaskResumeAll>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d189      	bne.n	800c868 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c954:	4b0f      	ldr	r3, [pc, #60]	@ (800c994 <xQueueReceive+0x1c0>)
 800c956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	e780      	b.n	800c868 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c968:	f000 f8a6 	bl	800cab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c96c:	f000 fbf4 	bl	800d158 <xTaskResumeAll>
 800c970:	e77a      	b.n	800c868 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c974:	f000 f8a0 	bl	800cab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c978:	f000 fbee 	bl	800d158 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c97e:	f000 f8ed 	bl	800cb5c <prvIsQueueEmpty>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	f43f af6f 	beq.w	800c868 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c98a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3730      	adds	r7, #48	@ 0x30
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	e000ed04 	.word	0xe000ed04

0800c998 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10d      	bne.n	800c9d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d14d      	bne.n	800ca5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 ffcc 	bl	800d960 <xTaskPriorityDisinherit>
 800c9c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	609a      	str	r2, [r3, #8]
 800c9d0:	e043      	b.n	800ca5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d119      	bne.n	800ca0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6858      	ldr	r0, [r3, #4]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	f005 fe01 	bl	80125ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9f0:	441a      	add	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	685a      	ldr	r2, [r3, #4]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d32b      	bcc.n	800ca5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	e026      	b.n	800ca5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	68d8      	ldr	r0, [r3, #12]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca14:	461a      	mov	r2, r3
 800ca16:	68b9      	ldr	r1, [r7, #8]
 800ca18:	f005 fde7 	bl	80125ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	68da      	ldr	r2, [r3, #12]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca24:	425b      	negs	r3, r3
 800ca26:	441a      	add	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68da      	ldr	r2, [r3, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d207      	bcs.n	800ca48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	689a      	ldr	r2, [r3, #8]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca40:	425b      	negs	r3, r3
 800ca42:	441a      	add	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d105      	bne.n	800ca5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d002      	beq.n	800ca5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	1c5a      	adds	r2, r3, #1
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca62:	697b      	ldr	r3, [r7, #20]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3718      	adds	r7, #24
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d018      	beq.n	800cab0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	68da      	ldr	r2, [r3, #12]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca86:	441a      	add	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	68da      	ldr	r2, [r3, #12]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d303      	bcc.n	800caa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68d9      	ldr	r1, [r3, #12]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa8:	461a      	mov	r2, r3
 800caaa:	6838      	ldr	r0, [r7, #0]
 800caac:	f005 fd9d 	bl	80125ea <memcpy>
	}
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cac0:	f001 fe42 	bl	800e748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cacc:	e011      	b.n	800caf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d012      	beq.n	800cafc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3324      	adds	r3, #36	@ 0x24
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 fd5c 	bl	800d598 <xTaskRemoveFromEventList>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cae6:	f000 fe35 	bl	800d754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800caea:	7bfb      	ldrb	r3, [r7, #15]
 800caec:	3b01      	subs	r3, #1
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	dce9      	bgt.n	800cace <prvUnlockQueue+0x16>
 800cafa:	e000      	b.n	800cafe <prvUnlockQueue+0x46>
					break;
 800cafc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	22ff      	movs	r2, #255	@ 0xff
 800cb02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb06:	f001 fe51 	bl	800e7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb0a:	f001 fe1d 	bl	800e748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb16:	e011      	b.n	800cb3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d012      	beq.n	800cb46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	3310      	adds	r3, #16
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 fd37 	bl	800d598 <xTaskRemoveFromEventList>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb30:	f000 fe10 	bl	800d754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	dce9      	bgt.n	800cb18 <prvUnlockQueue+0x60>
 800cb44:	e000      	b.n	800cb48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	22ff      	movs	r2, #255	@ 0xff
 800cb4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb50:	f001 fe2c 	bl	800e7ac <vPortExitCritical>
}
 800cb54:	bf00      	nop
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb64:	f001 fdf0 	bl	800e748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d102      	bne.n	800cb76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb70:	2301      	movs	r3, #1
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	e001      	b.n	800cb7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb7a:	f001 fe17 	bl	800e7ac <vPortExitCritical>

	return xReturn;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb90:	f001 fdda 	bl	800e748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d102      	bne.n	800cba6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cba0:	2301      	movs	r3, #1
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	e001      	b.n	800cbaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cba6:	2300      	movs	r3, #0
 800cba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbaa:	f001 fdff 	bl	800e7ac <vPortExitCritical>

	return xReturn;
 800cbae:	68fb      	ldr	r3, [r7, #12]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60fb      	str	r3, [r7, #12]
 800cbc6:	e014      	b.n	800cbf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbc8:	4a0f      	ldr	r2, [pc, #60]	@ (800cc08 <vQueueAddToRegistry+0x50>)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10b      	bne.n	800cbec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbd4:	490c      	ldr	r1, [pc, #48]	@ (800cc08 <vQueueAddToRegistry+0x50>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cbde:	4a0a      	ldr	r2, [pc, #40]	@ (800cc08 <vQueueAddToRegistry+0x50>)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	4413      	add	r3, r2
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cbea:	e006      	b.n	800cbfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	60fb      	str	r3, [r7, #12]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b07      	cmp	r3, #7
 800cbf6:	d9e7      	bls.n	800cbc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cbf8:	bf00      	nop
 800cbfa:	bf00      	nop
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	240027c8 	.word	0x240027c8

0800cc0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc1c:	f001 fd94 	bl	800e748 <vPortEnterCritical>
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc26:	b25b      	sxtb	r3, r3
 800cc28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc2c:	d103      	bne.n	800cc36 <vQueueWaitForMessageRestricted+0x2a>
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc3c:	b25b      	sxtb	r3, r3
 800cc3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc42:	d103      	bne.n	800cc4c <vQueueWaitForMessageRestricted+0x40>
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc4c:	f001 fdae 	bl	800e7ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d106      	bne.n	800cc66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	3324      	adds	r3, #36	@ 0x24
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 fc6d 	bl	800d540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc66:	6978      	ldr	r0, [r7, #20]
 800cc68:	f7ff ff26 	bl	800cab8 <prvUnlockQueue>
	}
 800cc6c:	bf00      	nop
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b08e      	sub	sp, #56	@ 0x38
 800cc78:	af04      	add	r7, sp, #16
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10b      	bne.n	800cca0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	623b      	str	r3, [r7, #32]
}
 800cc9a:	bf00      	nop
 800cc9c:	bf00      	nop
 800cc9e:	e7fd      	b.n	800cc9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10b      	bne.n	800ccbe <xTaskCreateStatic+0x4a>
	__asm volatile
 800cca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	61fb      	str	r3, [r7, #28]
}
 800ccb8:	bf00      	nop
 800ccba:	bf00      	nop
 800ccbc:	e7fd      	b.n	800ccba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccbe:	23a8      	movs	r3, #168	@ 0xa8
 800ccc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2ba8      	cmp	r3, #168	@ 0xa8
 800ccc6:	d00b      	beq.n	800cce0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ccc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	61bb      	str	r3, [r7, #24]
}
 800ccda:	bf00      	nop
 800ccdc:	bf00      	nop
 800ccde:	e7fd      	b.n	800ccdc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cce0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d01e      	beq.n	800cd26 <xTaskCreateStatic+0xb2>
 800cce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d01b      	beq.n	800cd26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccf6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd00:	2300      	movs	r3, #0
 800cd02:	9303      	str	r3, [sp, #12]
 800cd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd06:	9302      	str	r3, [sp, #8]
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	9301      	str	r3, [sp, #4]
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	68b9      	ldr	r1, [r7, #8]
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f000 f851 	bl	800cdc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd20:	f000 f8f6 	bl	800cf10 <prvAddNewTaskToReadyList>
 800cd24:	e001      	b.n	800cd2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd2a:	697b      	ldr	r3, [r7, #20]
	}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3728      	adds	r7, #40	@ 0x28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08c      	sub	sp, #48	@ 0x30
 800cd38:	af04      	add	r7, sp, #16
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	603b      	str	r3, [r7, #0]
 800cd40:	4613      	mov	r3, r2
 800cd42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd44:	88fb      	ldrh	r3, [r7, #6]
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f001 fe1f 	bl	800e98c <pvPortMalloc>
 800cd4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00e      	beq.n	800cd74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd56:	20a8      	movs	r0, #168	@ 0xa8
 800cd58:	f001 fe18 	bl	800e98c <pvPortMalloc>
 800cd5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d003      	beq.n	800cd6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd6a:	e005      	b.n	800cd78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd6c:	6978      	ldr	r0, [r7, #20]
 800cd6e:	f001 fedb 	bl	800eb28 <vPortFree>
 800cd72:	e001      	b.n	800cd78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d017      	beq.n	800cdae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd86:	88fa      	ldrh	r2, [r7, #6]
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9303      	str	r3, [sp, #12]
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	9302      	str	r3, [sp, #8]
 800cd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd92:	9301      	str	r3, [sp, #4]
 800cd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f000 f80f 	bl	800cdc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cda2:	69f8      	ldr	r0, [r7, #28]
 800cda4:	f000 f8b4 	bl	800cf10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	61bb      	str	r3, [r7, #24]
 800cdac:	e002      	b.n	800cdb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdb4:	69bb      	ldr	r3, [r7, #24]
	}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3720      	adds	r7, #32
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
	...

0800cdc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b088      	sub	sp, #32
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
 800cdcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	21a5      	movs	r1, #165	@ 0xa5
 800cdda:	f005 fb25 	bl	8012428 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cde8:	440b      	add	r3, r1
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	f023 0307 	bic.w	r3, r3, #7
 800cdf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	f003 0307 	and.w	r3, r3, #7
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00b      	beq.n	800ce1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	617b      	str	r3, [r7, #20]
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	e7fd      	b.n	800ce16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d01f      	beq.n	800ce60 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce20:	2300      	movs	r3, #0
 800ce22:	61fb      	str	r3, [r7, #28]
 800ce24:	e012      	b.n	800ce4c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	7819      	ldrb	r1, [r3, #0]
 800ce2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	4413      	add	r3, r2
 800ce34:	3334      	adds	r3, #52	@ 0x34
 800ce36:	460a      	mov	r2, r1
 800ce38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	4413      	add	r3, r2
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d006      	beq.n	800ce54 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	61fb      	str	r3, [r7, #28]
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	2b0f      	cmp	r3, #15
 800ce50:	d9e9      	bls.n	800ce26 <prvInitialiseNewTask+0x66>
 800ce52:	e000      	b.n	800ce56 <prvInitialiseNewTask+0x96>
			{
				break;
 800ce54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce5e:	e003      	b.n	800ce68 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	2b37      	cmp	r3, #55	@ 0x37
 800ce6c:	d901      	bls.n	800ce72 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce6e:	2337      	movs	r3, #55	@ 0x37
 800ce70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce80:	2200      	movs	r2, #0
 800ce82:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce86:	3304      	adds	r3, #4
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff f8dd 	bl	800c048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce90:	3318      	adds	r3, #24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff f8d8 	bl	800c048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ceae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec0:	3354      	adds	r3, #84	@ 0x54
 800cec2:	224c      	movs	r2, #76	@ 0x4c
 800cec4:	2100      	movs	r1, #0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f005 faae 	bl	8012428 <memset>
 800cecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cece:	4a0d      	ldr	r2, [pc, #52]	@ (800cf04 <prvInitialiseNewTask+0x144>)
 800ced0:	659a      	str	r2, [r3, #88]	@ 0x58
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	4a0c      	ldr	r2, [pc, #48]	@ (800cf08 <prvInitialiseNewTask+0x148>)
 800ced6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ced8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceda:	4a0c      	ldr	r2, [pc, #48]	@ (800cf0c <prvInitialiseNewTask+0x14c>)
 800cedc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	68f9      	ldr	r1, [r7, #12]
 800cee2:	69b8      	ldr	r0, [r7, #24]
 800cee4:	f001 fb02 	bl	800e4ec <pxPortInitialiseStack>
 800cee8:	4602      	mov	r2, r0
 800ceea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ceee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cefa:	bf00      	nop
 800cefc:	3720      	adds	r7, #32
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	24033ba4 	.word	0x24033ba4
 800cf08:	24033c0c 	.word	0x24033c0c
 800cf0c:	24033c74 	.word	0x24033c74

0800cf10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf18:	f001 fc16 	bl	800e748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf1c:	4b2d      	ldr	r3, [pc, #180]	@ (800cfd4 <prvAddNewTaskToReadyList+0xc4>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	3301      	adds	r3, #1
 800cf22:	4a2c      	ldr	r2, [pc, #176]	@ (800cfd4 <prvAddNewTaskToReadyList+0xc4>)
 800cf24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf26:	4b2c      	ldr	r3, [pc, #176]	@ (800cfd8 <prvAddNewTaskToReadyList+0xc8>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d109      	bne.n	800cf42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf2e:	4a2a      	ldr	r2, [pc, #168]	@ (800cfd8 <prvAddNewTaskToReadyList+0xc8>)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf34:	4b27      	ldr	r3, [pc, #156]	@ (800cfd4 <prvAddNewTaskToReadyList+0xc4>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d110      	bne.n	800cf5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf3c:	f000 fc2e 	bl	800d79c <prvInitialiseTaskLists>
 800cf40:	e00d      	b.n	800cf5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf42:	4b26      	ldr	r3, [pc, #152]	@ (800cfdc <prvAddNewTaskToReadyList+0xcc>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d109      	bne.n	800cf5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf4a:	4b23      	ldr	r3, [pc, #140]	@ (800cfd8 <prvAddNewTaskToReadyList+0xc8>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d802      	bhi.n	800cf5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf58:	4a1f      	ldr	r2, [pc, #124]	@ (800cfd8 <prvAddNewTaskToReadyList+0xc8>)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf5e:	4b20      	ldr	r3, [pc, #128]	@ (800cfe0 <prvAddNewTaskToReadyList+0xd0>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3301      	adds	r3, #1
 800cf64:	4a1e      	ldr	r2, [pc, #120]	@ (800cfe0 <prvAddNewTaskToReadyList+0xd0>)
 800cf66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf68:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe0 <prvAddNewTaskToReadyList+0xd0>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf74:	4b1b      	ldr	r3, [pc, #108]	@ (800cfe4 <prvAddNewTaskToReadyList+0xd4>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d903      	bls.n	800cf84 <prvAddNewTaskToReadyList+0x74>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf80:	4a18      	ldr	r2, [pc, #96]	@ (800cfe4 <prvAddNewTaskToReadyList+0xd4>)
 800cf82:	6013      	str	r3, [r2, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4a15      	ldr	r2, [pc, #84]	@ (800cfe8 <prvAddNewTaskToReadyList+0xd8>)
 800cf92:	441a      	add	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	f7ff f861 	bl	800c062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cfa0:	f001 fc04 	bl	800e7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cfa4:	4b0d      	ldr	r3, [pc, #52]	@ (800cfdc <prvAddNewTaskToReadyList+0xcc>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00e      	beq.n	800cfca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfac:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd8 <prvAddNewTaskToReadyList+0xc8>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d207      	bcs.n	800cfca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfba:	4b0c      	ldr	r3, [pc, #48]	@ (800cfec <prvAddNewTaskToReadyList+0xdc>)
 800cfbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfc0:	601a      	str	r2, [r3, #0]
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	24002cdc 	.word	0x24002cdc
 800cfd8:	24002808 	.word	0x24002808
 800cfdc:	24002ce8 	.word	0x24002ce8
 800cfe0:	24002cf8 	.word	0x24002cf8
 800cfe4:	24002ce4 	.word	0x24002ce4
 800cfe8:	2400280c 	.word	0x2400280c
 800cfec:	e000ed04 	.word	0xe000ed04

0800cff0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cff8:	2300      	movs	r3, #0
 800cffa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d018      	beq.n	800d034 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d002:	4b14      	ldr	r3, [pc, #80]	@ (800d054 <vTaskDelay+0x64>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00b      	beq.n	800d022 <vTaskDelay+0x32>
	__asm volatile
 800d00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	60bb      	str	r3, [r7, #8]
}
 800d01c:	bf00      	nop
 800d01e:	bf00      	nop
 800d020:	e7fd      	b.n	800d01e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d022:	f000 f88b 	bl	800d13c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d026:	2100      	movs	r1, #0
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 feb1 	bl	800dd90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d02e:	f000 f893 	bl	800d158 <xTaskResumeAll>
 800d032:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d107      	bne.n	800d04a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d03a:	4b07      	ldr	r3, [pc, #28]	@ (800d058 <vTaskDelay+0x68>)
 800d03c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d04a:	bf00      	nop
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	24002d04 	.word	0x24002d04
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08a      	sub	sp, #40	@ 0x28
 800d060:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d062:	2300      	movs	r3, #0
 800d064:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d066:	2300      	movs	r3, #0
 800d068:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d06a:	463a      	mov	r2, r7
 800d06c:	1d39      	adds	r1, r7, #4
 800d06e:	f107 0308 	add.w	r3, r7, #8
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe ff94 	bl	800bfa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d078:	6839      	ldr	r1, [r7, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	9202      	str	r2, [sp, #8]
 800d080:	9301      	str	r3, [sp, #4]
 800d082:	2300      	movs	r3, #0
 800d084:	9300      	str	r3, [sp, #0]
 800d086:	2300      	movs	r3, #0
 800d088:	460a      	mov	r2, r1
 800d08a:	4924      	ldr	r1, [pc, #144]	@ (800d11c <vTaskStartScheduler+0xc0>)
 800d08c:	4824      	ldr	r0, [pc, #144]	@ (800d120 <vTaskStartScheduler+0xc4>)
 800d08e:	f7ff fdf1 	bl	800cc74 <xTaskCreateStatic>
 800d092:	4603      	mov	r3, r0
 800d094:	4a23      	ldr	r2, [pc, #140]	@ (800d124 <vTaskStartScheduler+0xc8>)
 800d096:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d098:	4b22      	ldr	r3, [pc, #136]	@ (800d124 <vTaskStartScheduler+0xc8>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	e001      	b.n	800d0aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d102      	bne.n	800d0b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d0b0:	f000 fec2 	bl	800de38 <xTimerCreateTimerTask>
 800d0b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d11b      	bne.n	800d0f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	613b      	str	r3, [r7, #16]
}
 800d0ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d0d0:	4b15      	ldr	r3, [pc, #84]	@ (800d128 <vTaskStartScheduler+0xcc>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3354      	adds	r3, #84	@ 0x54
 800d0d6:	4a15      	ldr	r2, [pc, #84]	@ (800d12c <vTaskStartScheduler+0xd0>)
 800d0d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d0da:	4b15      	ldr	r3, [pc, #84]	@ (800d130 <vTaskStartScheduler+0xd4>)
 800d0dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d0e2:	4b14      	ldr	r3, [pc, #80]	@ (800d134 <vTaskStartScheduler+0xd8>)
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d0e8:	4b13      	ldr	r3, [pc, #76]	@ (800d138 <vTaskStartScheduler+0xdc>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d0ee:	f001 fa87 	bl	800e600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d0f2:	e00f      	b.n	800d114 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0fa:	d10b      	bne.n	800d114 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d100:	f383 8811 	msr	BASEPRI, r3
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	60fb      	str	r3, [r7, #12]
}
 800d10e:	bf00      	nop
 800d110:	bf00      	nop
 800d112:	e7fd      	b.n	800d110 <vTaskStartScheduler+0xb4>
}
 800d114:	bf00      	nop
 800d116:	3718      	adds	r7, #24
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	0801296c 	.word	0x0801296c
 800d120:	0800d76d 	.word	0x0800d76d
 800d124:	24002d00 	.word	0x24002d00
 800d128:	24002808 	.word	0x24002808
 800d12c:	2400139c 	.word	0x2400139c
 800d130:	24002cfc 	.word	0x24002cfc
 800d134:	24002ce8 	.word	0x24002ce8
 800d138:	24002ce0 	.word	0x24002ce0

0800d13c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d13c:	b480      	push	{r7}
 800d13e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d140:	4b04      	ldr	r3, [pc, #16]	@ (800d154 <vTaskSuspendAll+0x18>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	4a03      	ldr	r2, [pc, #12]	@ (800d154 <vTaskSuspendAll+0x18>)
 800d148:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d14a:	bf00      	nop
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	24002d04 	.word	0x24002d04

0800d158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d15e:	2300      	movs	r3, #0
 800d160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d162:	2300      	movs	r3, #0
 800d164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d166:	4b42      	ldr	r3, [pc, #264]	@ (800d270 <xTaskResumeAll+0x118>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10b      	bne.n	800d186 <xTaskResumeAll+0x2e>
	__asm volatile
 800d16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	603b      	str	r3, [r7, #0]
}
 800d180:	bf00      	nop
 800d182:	bf00      	nop
 800d184:	e7fd      	b.n	800d182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d186:	f001 fadf 	bl	800e748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d18a:	4b39      	ldr	r3, [pc, #228]	@ (800d270 <xTaskResumeAll+0x118>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3b01      	subs	r3, #1
 800d190:	4a37      	ldr	r2, [pc, #220]	@ (800d270 <xTaskResumeAll+0x118>)
 800d192:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d194:	4b36      	ldr	r3, [pc, #216]	@ (800d270 <xTaskResumeAll+0x118>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d162      	bne.n	800d262 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d19c:	4b35      	ldr	r3, [pc, #212]	@ (800d274 <xTaskResumeAll+0x11c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d05e      	beq.n	800d262 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1a4:	e02f      	b.n	800d206 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1a6:	4b34      	ldr	r3, [pc, #208]	@ (800d278 <xTaskResumeAll+0x120>)
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3318      	adds	r3, #24
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe ffb2 	bl	800c11c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe ffad 	bl	800c11c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c6:	4b2d      	ldr	r3, [pc, #180]	@ (800d27c <xTaskResumeAll+0x124>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d903      	bls.n	800d1d6 <xTaskResumeAll+0x7e>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d2:	4a2a      	ldr	r2, [pc, #168]	@ (800d27c <xTaskResumeAll+0x124>)
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1da:	4613      	mov	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4a27      	ldr	r2, [pc, #156]	@ (800d280 <xTaskResumeAll+0x128>)
 800d1e4:	441a      	add	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	f7fe ff38 	bl	800c062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1f6:	4b23      	ldr	r3, [pc, #140]	@ (800d284 <xTaskResumeAll+0x12c>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d302      	bcc.n	800d206 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d200:	4b21      	ldr	r3, [pc, #132]	@ (800d288 <xTaskResumeAll+0x130>)
 800d202:	2201      	movs	r2, #1
 800d204:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d206:	4b1c      	ldr	r3, [pc, #112]	@ (800d278 <xTaskResumeAll+0x120>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1cb      	bne.n	800d1a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d214:	f000 fb66 	bl	800d8e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d218:	4b1c      	ldr	r3, [pc, #112]	@ (800d28c <xTaskResumeAll+0x134>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d010      	beq.n	800d246 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d224:	f000 f846 	bl	800d2b4 <xTaskIncrementTick>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d22e:	4b16      	ldr	r3, [pc, #88]	@ (800d288 <xTaskResumeAll+0x130>)
 800d230:	2201      	movs	r2, #1
 800d232:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3b01      	subs	r3, #1
 800d238:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1f1      	bne.n	800d224 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d240:	4b12      	ldr	r3, [pc, #72]	@ (800d28c <xTaskResumeAll+0x134>)
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d246:	4b10      	ldr	r3, [pc, #64]	@ (800d288 <xTaskResumeAll+0x130>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d009      	beq.n	800d262 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d24e:	2301      	movs	r3, #1
 800d250:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d252:	4b0f      	ldr	r3, [pc, #60]	@ (800d290 <xTaskResumeAll+0x138>)
 800d254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d262:	f001 faa3 	bl	800e7ac <vPortExitCritical>

	return xAlreadyYielded;
 800d266:	68bb      	ldr	r3, [r7, #8]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	24002d04 	.word	0x24002d04
 800d274:	24002cdc 	.word	0x24002cdc
 800d278:	24002c9c 	.word	0x24002c9c
 800d27c:	24002ce4 	.word	0x24002ce4
 800d280:	2400280c 	.word	0x2400280c
 800d284:	24002808 	.word	0x24002808
 800d288:	24002cf0 	.word	0x24002cf0
 800d28c:	24002cec 	.word	0x24002cec
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d29a:	4b05      	ldr	r3, [pc, #20]	@ (800d2b0 <xTaskGetTickCount+0x1c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d2a0:	687b      	ldr	r3, [r7, #4]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	24002ce0 	.word	0x24002ce0

0800d2b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2be:	4b4f      	ldr	r3, [pc, #316]	@ (800d3fc <xTaskIncrementTick+0x148>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f040 8090 	bne.w	800d3e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d2c8:	4b4d      	ldr	r3, [pc, #308]	@ (800d400 <xTaskIncrementTick+0x14c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d2d0:	4a4b      	ldr	r2, [pc, #300]	@ (800d400 <xTaskIncrementTick+0x14c>)
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d121      	bne.n	800d320 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d2dc:	4b49      	ldr	r3, [pc, #292]	@ (800d404 <xTaskIncrementTick+0x150>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00b      	beq.n	800d2fe <xTaskIncrementTick+0x4a>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	603b      	str	r3, [r7, #0]
}
 800d2f8:	bf00      	nop
 800d2fa:	bf00      	nop
 800d2fc:	e7fd      	b.n	800d2fa <xTaskIncrementTick+0x46>
 800d2fe:	4b41      	ldr	r3, [pc, #260]	@ (800d404 <xTaskIncrementTick+0x150>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	4b40      	ldr	r3, [pc, #256]	@ (800d408 <xTaskIncrementTick+0x154>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a3e      	ldr	r2, [pc, #248]	@ (800d404 <xTaskIncrementTick+0x150>)
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	4a3e      	ldr	r2, [pc, #248]	@ (800d408 <xTaskIncrementTick+0x154>)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	4b3e      	ldr	r3, [pc, #248]	@ (800d40c <xTaskIncrementTick+0x158>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3301      	adds	r3, #1
 800d318:	4a3c      	ldr	r2, [pc, #240]	@ (800d40c <xTaskIncrementTick+0x158>)
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	f000 fae2 	bl	800d8e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d320:	4b3b      	ldr	r3, [pc, #236]	@ (800d410 <xTaskIncrementTick+0x15c>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	693a      	ldr	r2, [r7, #16]
 800d326:	429a      	cmp	r2, r3
 800d328:	d349      	bcc.n	800d3be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d32a:	4b36      	ldr	r3, [pc, #216]	@ (800d404 <xTaskIncrementTick+0x150>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d104      	bne.n	800d33e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d334:	4b36      	ldr	r3, [pc, #216]	@ (800d410 <xTaskIncrementTick+0x15c>)
 800d336:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d33a:	601a      	str	r2, [r3, #0]
					break;
 800d33c:	e03f      	b.n	800d3be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33e:	4b31      	ldr	r3, [pc, #196]	@ (800d404 <xTaskIncrementTick+0x150>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	429a      	cmp	r2, r3
 800d354:	d203      	bcs.n	800d35e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d356:	4a2e      	ldr	r2, [pc, #184]	@ (800d410 <xTaskIncrementTick+0x15c>)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d35c:	e02f      	b.n	800d3be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	3304      	adds	r3, #4
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe feda 	bl	800c11c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d004      	beq.n	800d37a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	3318      	adds	r3, #24
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fed1 	bl	800c11c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d37e:	4b25      	ldr	r3, [pc, #148]	@ (800d414 <xTaskIncrementTick+0x160>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	429a      	cmp	r2, r3
 800d384:	d903      	bls.n	800d38e <xTaskIncrementTick+0xda>
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d38a:	4a22      	ldr	r2, [pc, #136]	@ (800d414 <xTaskIncrementTick+0x160>)
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d392:	4613      	mov	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4a1f      	ldr	r2, [pc, #124]	@ (800d418 <xTaskIncrementTick+0x164>)
 800d39c:	441a      	add	r2, r3
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	f7fe fe5c 	bl	800c062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ae:	4b1b      	ldr	r3, [pc, #108]	@ (800d41c <xTaskIncrementTick+0x168>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d3b8      	bcc.n	800d32a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3bc:	e7b5      	b.n	800d32a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d3be:	4b17      	ldr	r3, [pc, #92]	@ (800d41c <xTaskIncrementTick+0x168>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3c4:	4914      	ldr	r1, [pc, #80]	@ (800d418 <xTaskIncrementTick+0x164>)
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	440b      	add	r3, r1
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d901      	bls.n	800d3da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d3da:	4b11      	ldr	r3, [pc, #68]	@ (800d420 <xTaskIncrementTick+0x16c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d007      	beq.n	800d3f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	e004      	b.n	800d3f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d424 <xTaskIncrementTick+0x170>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	4a0d      	ldr	r2, [pc, #52]	@ (800d424 <xTaskIncrementTick+0x170>)
 800d3f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d3f2:	697b      	ldr	r3, [r7, #20]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	24002d04 	.word	0x24002d04
 800d400:	24002ce0 	.word	0x24002ce0
 800d404:	24002c94 	.word	0x24002c94
 800d408:	24002c98 	.word	0x24002c98
 800d40c:	24002cf4 	.word	0x24002cf4
 800d410:	24002cfc 	.word	0x24002cfc
 800d414:	24002ce4 	.word	0x24002ce4
 800d418:	2400280c 	.word	0x2400280c
 800d41c:	24002808 	.word	0x24002808
 800d420:	24002cf0 	.word	0x24002cf0
 800d424:	24002cec 	.word	0x24002cec

0800d428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d42e:	4b2b      	ldr	r3, [pc, #172]	@ (800d4dc <vTaskSwitchContext+0xb4>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d436:	4b2a      	ldr	r3, [pc, #168]	@ (800d4e0 <vTaskSwitchContext+0xb8>)
 800d438:	2201      	movs	r2, #1
 800d43a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d43c:	e047      	b.n	800d4ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d43e:	4b28      	ldr	r3, [pc, #160]	@ (800d4e0 <vTaskSwitchContext+0xb8>)
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d444:	4b27      	ldr	r3, [pc, #156]	@ (800d4e4 <vTaskSwitchContext+0xbc>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	60fb      	str	r3, [r7, #12]
 800d44a:	e011      	b.n	800d470 <vTaskSwitchContext+0x48>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10b      	bne.n	800d46a <vTaskSwitchContext+0x42>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	607b      	str	r3, [r7, #4]
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop
 800d468:	e7fd      	b.n	800d466 <vTaskSwitchContext+0x3e>
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	3b01      	subs	r3, #1
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	491d      	ldr	r1, [pc, #116]	@ (800d4e8 <vTaskSwitchContext+0xc0>)
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	4613      	mov	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	440b      	add	r3, r1
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d0e3      	beq.n	800d44c <vTaskSwitchContext+0x24>
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	4613      	mov	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	4a16      	ldr	r2, [pc, #88]	@ (800d4e8 <vTaskSwitchContext+0xc0>)
 800d490:	4413      	add	r3, r2
 800d492:	60bb      	str	r3, [r7, #8]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	605a      	str	r2, [r3, #4]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d104      	bne.n	800d4b4 <vTaskSwitchContext+0x8c>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	605a      	str	r2, [r3, #4]
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	4a0c      	ldr	r2, [pc, #48]	@ (800d4ec <vTaskSwitchContext+0xc4>)
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	4a09      	ldr	r2, [pc, #36]	@ (800d4e4 <vTaskSwitchContext+0xbc>)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4c4:	4b09      	ldr	r3, [pc, #36]	@ (800d4ec <vTaskSwitchContext+0xc4>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3354      	adds	r3, #84	@ 0x54
 800d4ca:	4a09      	ldr	r2, [pc, #36]	@ (800d4f0 <vTaskSwitchContext+0xc8>)
 800d4cc:	6013      	str	r3, [r2, #0]
}
 800d4ce:	bf00      	nop
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	24002d04 	.word	0x24002d04
 800d4e0:	24002cf0 	.word	0x24002cf0
 800d4e4:	24002ce4 	.word	0x24002ce4
 800d4e8:	2400280c 	.word	0x2400280c
 800d4ec:	24002808 	.word	0x24002808
 800d4f0:	2400139c 	.word	0x2400139c

0800d4f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10b      	bne.n	800d51c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	60fb      	str	r3, [r7, #12]
}
 800d516:	bf00      	nop
 800d518:	bf00      	nop
 800d51a:	e7fd      	b.n	800d518 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d51c:	4b07      	ldr	r3, [pc, #28]	@ (800d53c <vTaskPlaceOnEventList+0x48>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3318      	adds	r3, #24
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7fe fdc0 	bl	800c0aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d52a:	2101      	movs	r1, #1
 800d52c:	6838      	ldr	r0, [r7, #0]
 800d52e:	f000 fc2f 	bl	800dd90 <prvAddCurrentTaskToDelayedList>
}
 800d532:	bf00      	nop
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	24002808 	.word	0x24002808

0800d540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10b      	bne.n	800d56a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	617b      	str	r3, [r7, #20]
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	e7fd      	b.n	800d566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d56a:	4b0a      	ldr	r3, [pc, #40]	@ (800d594 <vTaskPlaceOnEventListRestricted+0x54>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3318      	adds	r3, #24
 800d570:	4619      	mov	r1, r3
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f7fe fd75 	bl	800c062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d57e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d582:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	68b8      	ldr	r0, [r7, #8]
 800d588:	f000 fc02 	bl	800dd90 <prvAddCurrentTaskToDelayedList>
	}
 800d58c:	bf00      	nop
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	24002808 	.word	0x24002808

0800d598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10b      	bne.n	800d5c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	60fb      	str	r3, [r7, #12]
}
 800d5c0:	bf00      	nop
 800d5c2:	bf00      	nop
 800d5c4:	e7fd      	b.n	800d5c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	3318      	adds	r3, #24
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fe fda6 	bl	800c11c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d648 <xTaskRemoveFromEventList+0xb0>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d11d      	bne.n	800d614 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	3304      	adds	r3, #4
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fe fd9d 	bl	800c11c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5e6:	4b19      	ldr	r3, [pc, #100]	@ (800d64c <xTaskRemoveFromEventList+0xb4>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d903      	bls.n	800d5f6 <xTaskRemoveFromEventList+0x5e>
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f2:	4a16      	ldr	r2, [pc, #88]	@ (800d64c <xTaskRemoveFromEventList+0xb4>)
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4a13      	ldr	r2, [pc, #76]	@ (800d650 <xTaskRemoveFromEventList+0xb8>)
 800d604:	441a      	add	r2, r3
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	3304      	adds	r3, #4
 800d60a:	4619      	mov	r1, r3
 800d60c:	4610      	mov	r0, r2
 800d60e:	f7fe fd28 	bl	800c062 <vListInsertEnd>
 800d612:	e005      	b.n	800d620 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	3318      	adds	r3, #24
 800d618:	4619      	mov	r1, r3
 800d61a:	480e      	ldr	r0, [pc, #56]	@ (800d654 <xTaskRemoveFromEventList+0xbc>)
 800d61c:	f7fe fd21 	bl	800c062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d624:	4b0c      	ldr	r3, [pc, #48]	@ (800d658 <xTaskRemoveFromEventList+0xc0>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d905      	bls.n	800d63a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d62e:	2301      	movs	r3, #1
 800d630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d632:	4b0a      	ldr	r3, [pc, #40]	@ (800d65c <xTaskRemoveFromEventList+0xc4>)
 800d634:	2201      	movs	r2, #1
 800d636:	601a      	str	r2, [r3, #0]
 800d638:	e001      	b.n	800d63e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d63e:	697b      	ldr	r3, [r7, #20]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3718      	adds	r7, #24
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	24002d04 	.word	0x24002d04
 800d64c:	24002ce4 	.word	0x24002ce4
 800d650:	2400280c 	.word	0x2400280c
 800d654:	24002c9c 	.word	0x24002c9c
 800d658:	24002808 	.word	0x24002808
 800d65c:	24002cf0 	.word	0x24002cf0

0800d660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d668:	4b06      	ldr	r3, [pc, #24]	@ (800d684 <vTaskInternalSetTimeOutState+0x24>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d670:	4b05      	ldr	r3, [pc, #20]	@ (800d688 <vTaskInternalSetTimeOutState+0x28>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	605a      	str	r2, [r3, #4]
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	24002cf4 	.word	0x24002cf4
 800d688:	24002ce0 	.word	0x24002ce0

0800d68c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b088      	sub	sp, #32
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10b      	bne.n	800d6b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	613b      	str	r3, [r7, #16]
}
 800d6ae:	bf00      	nop
 800d6b0:	bf00      	nop
 800d6b2:	e7fd      	b.n	800d6b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10b      	bne.n	800d6d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6be:	f383 8811 	msr	BASEPRI, r3
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	f3bf 8f4f 	dsb	sy
 800d6ca:	60fb      	str	r3, [r7, #12]
}
 800d6cc:	bf00      	nop
 800d6ce:	bf00      	nop
 800d6d0:	e7fd      	b.n	800d6ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d6d2:	f001 f839 	bl	800e748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800d74c <xTaskCheckForTimeOut+0xc0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	69ba      	ldr	r2, [r7, #24]
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6ee:	d102      	bne.n	800d6f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	61fb      	str	r3, [r7, #28]
 800d6f4:	e023      	b.n	800d73e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	4b15      	ldr	r3, [pc, #84]	@ (800d750 <xTaskCheckForTimeOut+0xc4>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d007      	beq.n	800d712 <xTaskCheckForTimeOut+0x86>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	69ba      	ldr	r2, [r7, #24]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d302      	bcc.n	800d712 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d70c:	2301      	movs	r3, #1
 800d70e:	61fb      	str	r3, [r7, #28]
 800d710:	e015      	b.n	800d73e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d20b      	bcs.n	800d734 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	1ad2      	subs	r2, r2, r3
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7ff ff99 	bl	800d660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d72e:	2300      	movs	r3, #0
 800d730:	61fb      	str	r3, [r7, #28]
 800d732:	e004      	b.n	800d73e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	2200      	movs	r2, #0
 800d738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d73a:	2301      	movs	r3, #1
 800d73c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d73e:	f001 f835 	bl	800e7ac <vPortExitCritical>

	return xReturn;
 800d742:	69fb      	ldr	r3, [r7, #28]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3720      	adds	r7, #32
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	24002ce0 	.word	0x24002ce0
 800d750:	24002cf4 	.word	0x24002cf4

0800d754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d754:	b480      	push	{r7}
 800d756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d758:	4b03      	ldr	r3, [pc, #12]	@ (800d768 <vTaskMissedYield+0x14>)
 800d75a:	2201      	movs	r2, #1
 800d75c:	601a      	str	r2, [r3, #0]
}
 800d75e:	bf00      	nop
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	24002cf0 	.word	0x24002cf0

0800d76c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d774:	f000 f852 	bl	800d81c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d778:	4b06      	ldr	r3, [pc, #24]	@ (800d794 <prvIdleTask+0x28>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d9f9      	bls.n	800d774 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d780:	4b05      	ldr	r3, [pc, #20]	@ (800d798 <prvIdleTask+0x2c>)
 800d782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d790:	e7f0      	b.n	800d774 <prvIdleTask+0x8>
 800d792:	bf00      	nop
 800d794:	2400280c 	.word	0x2400280c
 800d798:	e000ed04 	.word	0xe000ed04

0800d79c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	607b      	str	r3, [r7, #4]
 800d7a6:	e00c      	b.n	800d7c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4a12      	ldr	r2, [pc, #72]	@ (800d7fc <prvInitialiseTaskLists+0x60>)
 800d7b4:	4413      	add	r3, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fc26 	bl	800c008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	607b      	str	r3, [r7, #4]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b37      	cmp	r3, #55	@ 0x37
 800d7c6:	d9ef      	bls.n	800d7a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d7c8:	480d      	ldr	r0, [pc, #52]	@ (800d800 <prvInitialiseTaskLists+0x64>)
 800d7ca:	f7fe fc1d 	bl	800c008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d7ce:	480d      	ldr	r0, [pc, #52]	@ (800d804 <prvInitialiseTaskLists+0x68>)
 800d7d0:	f7fe fc1a 	bl	800c008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d7d4:	480c      	ldr	r0, [pc, #48]	@ (800d808 <prvInitialiseTaskLists+0x6c>)
 800d7d6:	f7fe fc17 	bl	800c008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d7da:	480c      	ldr	r0, [pc, #48]	@ (800d80c <prvInitialiseTaskLists+0x70>)
 800d7dc:	f7fe fc14 	bl	800c008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d7e0:	480b      	ldr	r0, [pc, #44]	@ (800d810 <prvInitialiseTaskLists+0x74>)
 800d7e2:	f7fe fc11 	bl	800c008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d814 <prvInitialiseTaskLists+0x78>)
 800d7e8:	4a05      	ldr	r2, [pc, #20]	@ (800d800 <prvInitialiseTaskLists+0x64>)
 800d7ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d818 <prvInitialiseTaskLists+0x7c>)
 800d7ee:	4a05      	ldr	r2, [pc, #20]	@ (800d804 <prvInitialiseTaskLists+0x68>)
 800d7f0:	601a      	str	r2, [r3, #0]
}
 800d7f2:	bf00      	nop
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	2400280c 	.word	0x2400280c
 800d800:	24002c6c 	.word	0x24002c6c
 800d804:	24002c80 	.word	0x24002c80
 800d808:	24002c9c 	.word	0x24002c9c
 800d80c:	24002cb0 	.word	0x24002cb0
 800d810:	24002cc8 	.word	0x24002cc8
 800d814:	24002c94 	.word	0x24002c94
 800d818:	24002c98 	.word	0x24002c98

0800d81c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d822:	e019      	b.n	800d858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d824:	f000 ff90 	bl	800e748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d828:	4b10      	ldr	r3, [pc, #64]	@ (800d86c <prvCheckTasksWaitingTermination+0x50>)
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	3304      	adds	r3, #4
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe fc71 	bl	800c11c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d83a:	4b0d      	ldr	r3, [pc, #52]	@ (800d870 <prvCheckTasksWaitingTermination+0x54>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3b01      	subs	r3, #1
 800d840:	4a0b      	ldr	r2, [pc, #44]	@ (800d870 <prvCheckTasksWaitingTermination+0x54>)
 800d842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d844:	4b0b      	ldr	r3, [pc, #44]	@ (800d874 <prvCheckTasksWaitingTermination+0x58>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3b01      	subs	r3, #1
 800d84a:	4a0a      	ldr	r2, [pc, #40]	@ (800d874 <prvCheckTasksWaitingTermination+0x58>)
 800d84c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d84e:	f000 ffad 	bl	800e7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f810 	bl	800d878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d858:	4b06      	ldr	r3, [pc, #24]	@ (800d874 <prvCheckTasksWaitingTermination+0x58>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1e1      	bne.n	800d824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d860:	bf00      	nop
 800d862:	bf00      	nop
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	24002cb0 	.word	0x24002cb0
 800d870:	24002cdc 	.word	0x24002cdc
 800d874:	24002cc4 	.word	0x24002cc4

0800d878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3354      	adds	r3, #84	@ 0x54
 800d884:	4618      	mov	r0, r3
 800d886:	f004 fde7 	bl	8012458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d890:	2b00      	cmp	r3, #0
 800d892:	d108      	bne.n	800d8a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d898:	4618      	mov	r0, r3
 800d89a:	f001 f945 	bl	800eb28 <vPortFree>
				vPortFree( pxTCB );
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f001 f942 	bl	800eb28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d8a4:	e019      	b.n	800d8da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d103      	bne.n	800d8b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f001 f939 	bl	800eb28 <vPortFree>
	}
 800d8b6:	e010      	b.n	800d8da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d8be:	2b02      	cmp	r3, #2
 800d8c0:	d00b      	beq.n	800d8da <prvDeleteTCB+0x62>
	__asm volatile
 800d8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	60fb      	str	r3, [r7, #12]
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	e7fd      	b.n	800d8d6 <prvDeleteTCB+0x5e>
	}
 800d8da:	bf00      	nop
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800d91c <prvResetNextTaskUnblockTime+0x38>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d104      	bne.n	800d8fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d920 <prvResetNextTaskUnblockTime+0x3c>)
 800d8f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d8fc:	e008      	b.n	800d910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8fe:	4b07      	ldr	r3, [pc, #28]	@ (800d91c <prvResetNextTaskUnblockTime+0x38>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	4a04      	ldr	r2, [pc, #16]	@ (800d920 <prvResetNextTaskUnblockTime+0x3c>)
 800d90e:	6013      	str	r3, [r2, #0]
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	24002c94 	.word	0x24002c94
 800d920:	24002cfc 	.word	0x24002cfc

0800d924 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d92a:	4b0b      	ldr	r3, [pc, #44]	@ (800d958 <xTaskGetSchedulerState+0x34>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d102      	bne.n	800d938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d932:	2301      	movs	r3, #1
 800d934:	607b      	str	r3, [r7, #4]
 800d936:	e008      	b.n	800d94a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d938:	4b08      	ldr	r3, [pc, #32]	@ (800d95c <xTaskGetSchedulerState+0x38>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d102      	bne.n	800d946 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d940:	2302      	movs	r3, #2
 800d942:	607b      	str	r3, [r7, #4]
 800d944:	e001      	b.n	800d94a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d946:	2300      	movs	r3, #0
 800d948:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d94a:	687b      	ldr	r3, [r7, #4]
	}
 800d94c:	4618      	mov	r0, r3
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	24002ce8 	.word	0x24002ce8
 800d95c:	24002d04 	.word	0x24002d04

0800d960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d96c:	2300      	movs	r3, #0
 800d96e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d058      	beq.n	800da28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d976:	4b2f      	ldr	r3, [pc, #188]	@ (800da34 <xTaskPriorityDisinherit+0xd4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d00b      	beq.n	800d998 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	60fb      	str	r3, [r7, #12]
}
 800d992:	bf00      	nop
 800d994:	bf00      	nop
 800d996:	e7fd      	b.n	800d994 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10b      	bne.n	800d9b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	60bb      	str	r3, [r7, #8]
}
 800d9b2:	bf00      	nop
 800d9b4:	bf00      	nop
 800d9b6:	e7fd      	b.n	800d9b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9bc:	1e5a      	subs	r2, r3, #1
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d02c      	beq.n	800da28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d128      	bne.n	800da28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fe fb9e 	bl	800c11c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9f8:	4b0f      	ldr	r3, [pc, #60]	@ (800da38 <xTaskPriorityDisinherit+0xd8>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d903      	bls.n	800da08 <xTaskPriorityDisinherit+0xa8>
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da04:	4a0c      	ldr	r2, [pc, #48]	@ (800da38 <xTaskPriorityDisinherit+0xd8>)
 800da06:	6013      	str	r3, [r2, #0]
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da0c:	4613      	mov	r3, r2
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	4a09      	ldr	r2, [pc, #36]	@ (800da3c <xTaskPriorityDisinherit+0xdc>)
 800da16:	441a      	add	r2, r3
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	3304      	adds	r3, #4
 800da1c:	4619      	mov	r1, r3
 800da1e:	4610      	mov	r0, r2
 800da20:	f7fe fb1f 	bl	800c062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da24:	2301      	movs	r3, #1
 800da26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da28:	697b      	ldr	r3, [r7, #20]
	}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	24002808 	.word	0x24002808
 800da38:	24002ce4 	.word	0x24002ce4
 800da3c:	2400280c 	.word	0x2400280c

0800da40 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08a      	sub	sp, #40	@ 0x28
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	603b      	str	r3, [r7, #0]
 800da4c:	4613      	mov	r3, r2
 800da4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800da50:	2301      	movs	r3, #1
 800da52:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10b      	bne.n	800da72 <xTaskGenericNotify+0x32>
	__asm volatile
 800da5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5e:	f383 8811 	msr	BASEPRI, r3
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	61bb      	str	r3, [r7, #24]
}
 800da6c:	bf00      	nop
 800da6e:	bf00      	nop
 800da70:	e7fd      	b.n	800da6e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800da76:	f000 fe67 	bl	800e748 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d004      	beq.n	800da8a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800da8a:	6a3b      	ldr	r3, [r7, #32]
 800da8c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800da90:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	2202      	movs	r2, #2
 800da96:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	2b04      	cmp	r3, #4
 800da9e:	d82e      	bhi.n	800dafe <xTaskGenericNotify+0xbe>
 800daa0:	a201      	add	r2, pc, #4	@ (adr r2, 800daa8 <xTaskGenericNotify+0x68>)
 800daa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa6:	bf00      	nop
 800daa8:	0800db23 	.word	0x0800db23
 800daac:	0800dabd 	.word	0x0800dabd
 800dab0:	0800dacf 	.word	0x0800dacf
 800dab4:	0800dadf 	.word	0x0800dadf
 800dab8:	0800dae9 	.word	0x0800dae9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dabc:	6a3b      	ldr	r3, [r7, #32]
 800dabe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	431a      	orrs	r2, r3
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800dacc:	e02c      	b.n	800db28 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dad4:	1c5a      	adds	r2, r3, #1
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800dadc:	e024      	b.n	800db28 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800dade:	6a3b      	ldr	r3, [r7, #32]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800dae6:	e01f      	b.n	800db28 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dae8:	7ffb      	ldrb	r3, [r7, #31]
 800daea:	2b02      	cmp	r3, #2
 800daec:	d004      	beq.n	800daf8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800daf6:	e017      	b.n	800db28 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800daf8:	2300      	movs	r3, #0
 800dafa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800dafc:	e014      	b.n	800db28 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dafe:	6a3b      	ldr	r3, [r7, #32]
 800db00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800db04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db08:	d00d      	beq.n	800db26 <xTaskGenericNotify+0xe6>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0e:	f383 8811 	msr	BASEPRI, r3
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	f3bf 8f4f 	dsb	sy
 800db1a:	617b      	str	r3, [r7, #20]
}
 800db1c:	bf00      	nop
 800db1e:	bf00      	nop
 800db20:	e7fd      	b.n	800db1e <xTaskGenericNotify+0xde>
					break;
 800db22:	bf00      	nop
 800db24:	e000      	b.n	800db28 <xTaskGenericNotify+0xe8>

					break;
 800db26:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800db28:	7ffb      	ldrb	r3, [r7, #31]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d13b      	bne.n	800dba6 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	3304      	adds	r3, #4
 800db32:	4618      	mov	r0, r3
 800db34:	f7fe faf2 	bl	800c11c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800db38:	6a3b      	ldr	r3, [r7, #32]
 800db3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db3c:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb4 <xTaskGenericNotify+0x174>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	429a      	cmp	r2, r3
 800db42:	d903      	bls.n	800db4c <xTaskGenericNotify+0x10c>
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db48:	4a1a      	ldr	r2, [pc, #104]	@ (800dbb4 <xTaskGenericNotify+0x174>)
 800db4a:	6013      	str	r3, [r2, #0]
 800db4c:	6a3b      	ldr	r3, [r7, #32]
 800db4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db50:	4613      	mov	r3, r2
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4a17      	ldr	r2, [pc, #92]	@ (800dbb8 <xTaskGenericNotify+0x178>)
 800db5a:	441a      	add	r2, r3
 800db5c:	6a3b      	ldr	r3, [r7, #32]
 800db5e:	3304      	adds	r3, #4
 800db60:	4619      	mov	r1, r3
 800db62:	4610      	mov	r0, r2
 800db64:	f7fe fa7d 	bl	800c062 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800db68:	6a3b      	ldr	r3, [r7, #32]
 800db6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00b      	beq.n	800db88 <xTaskGenericNotify+0x148>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	613b      	str	r3, [r7, #16]
}
 800db82:	bf00      	nop
 800db84:	bf00      	nop
 800db86:	e7fd      	b.n	800db84 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dbbc <xTaskGenericNotify+0x17c>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db92:	429a      	cmp	r2, r3
 800db94:	d907      	bls.n	800dba6 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800db96:	4b0a      	ldr	r3, [pc, #40]	@ (800dbc0 <xTaskGenericNotify+0x180>)
 800db98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dba6:	f000 fe01 	bl	800e7ac <vPortExitCritical>

		return xReturn;
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3728      	adds	r7, #40	@ 0x28
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	24002ce4 	.word	0x24002ce4
 800dbb8:	2400280c 	.word	0x2400280c
 800dbbc:	24002808 	.word	0x24002808
 800dbc0:	e000ed04 	.word	0xe000ed04

0800dbc4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08e      	sub	sp, #56	@ 0x38
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	603b      	str	r3, [r7, #0]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10b      	bne.n	800dbf6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dbf0:	bf00      	nop
 800dbf2:	bf00      	nop
 800dbf4:	e7fd      	b.n	800dbf2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbf6:	f000 fe87 	bl	800e908 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800dbfe:	f3ef 8211 	mrs	r2, BASEPRI
 800dc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	623a      	str	r2, [r7, #32]
 800dc14:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800dc16:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc18:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d004      	beq.n	800dc2a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dc30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc36:	2202      	movs	r2, #2
 800dc38:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800dc3c:	79fb      	ldrb	r3, [r7, #7]
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	d82e      	bhi.n	800dca0 <xTaskGenericNotifyFromISR+0xdc>
 800dc42:	a201      	add	r2, pc, #4	@ (adr r2, 800dc48 <xTaskGenericNotifyFromISR+0x84>)
 800dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc48:	0800dcc5 	.word	0x0800dcc5
 800dc4c:	0800dc5d 	.word	0x0800dc5d
 800dc50:	0800dc6f 	.word	0x0800dc6f
 800dc54:	0800dc7f 	.word	0x0800dc7f
 800dc58:	0800dc89 	.word	0x0800dc89
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	431a      	orrs	r2, r3
 800dc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800dc6c:	e02d      	b.n	800dcca <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc74:	1c5a      	adds	r2, r3, #1
 800dc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800dc7c:	e025      	b.n	800dcca <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800dc86:	e020      	b.n	800dcca <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dc88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d004      	beq.n	800dc9a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dc98:	e017      	b.n	800dcca <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800dc9e:	e014      	b.n	800dcca <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcaa:	d00d      	beq.n	800dcc8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	61bb      	str	r3, [r7, #24]
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	e7fd      	b.n	800dcc0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800dcc4:	bf00      	nop
 800dcc6:	e000      	b.n	800dcca <xTaskGenericNotifyFromISR+0x106>
					break;
 800dcc8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dcca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d147      	bne.n	800dd62 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00b      	beq.n	800dcf2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	617b      	str	r3, [r7, #20]
}
 800dcec:	bf00      	nop
 800dcee:	bf00      	nop
 800dcf0:	e7fd      	b.n	800dcee <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcf2:	4b21      	ldr	r3, [pc, #132]	@ (800dd78 <xTaskGenericNotifyFromISR+0x1b4>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d11d      	bne.n	800dd36 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe fa0c 	bl	800c11c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd08:	4b1c      	ldr	r3, [pc, #112]	@ (800dd7c <xTaskGenericNotifyFromISR+0x1b8>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d903      	bls.n	800dd18 <xTaskGenericNotifyFromISR+0x154>
 800dd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd14:	4a19      	ldr	r2, [pc, #100]	@ (800dd7c <xTaskGenericNotifyFromISR+0x1b8>)
 800dd16:	6013      	str	r3, [r2, #0]
 800dd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4a16      	ldr	r2, [pc, #88]	@ (800dd80 <xTaskGenericNotifyFromISR+0x1bc>)
 800dd26:	441a      	add	r2, r3
 800dd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	4610      	mov	r0, r2
 800dd30:	f7fe f997 	bl	800c062 <vListInsertEnd>
 800dd34:	e005      	b.n	800dd42 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd38:	3318      	adds	r3, #24
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4811      	ldr	r0, [pc, #68]	@ (800dd84 <xTaskGenericNotifyFromISR+0x1c0>)
 800dd3e:	f7fe f990 	bl	800c062 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd46:	4b10      	ldr	r3, [pc, #64]	@ (800dd88 <xTaskGenericNotifyFromISR+0x1c4>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d908      	bls.n	800dd62 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800dd50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800dd56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd58:	2201      	movs	r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800dd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd8c <xTaskGenericNotifyFromISR+0x1c8>)
 800dd5e:	2201      	movs	r2, #1
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	f383 8811 	msr	BASEPRI, r3
}
 800dd6c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800dd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3738      	adds	r7, #56	@ 0x38
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	24002d04 	.word	0x24002d04
 800dd7c:	24002ce4 	.word	0x24002ce4
 800dd80:	2400280c 	.word	0x2400280c
 800dd84:	24002c9c 	.word	0x24002c9c
 800dd88:	24002808 	.word	0x24002808
 800dd8c:	24002cf0 	.word	0x24002cf0

0800dd90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd9a:	4b21      	ldr	r3, [pc, #132]	@ (800de20 <prvAddCurrentTaskToDelayedList+0x90>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dda0:	4b20      	ldr	r3, [pc, #128]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3304      	adds	r3, #4
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe f9b8 	bl	800c11c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ddb2:	d10a      	bne.n	800ddca <prvAddCurrentTaskToDelayedList+0x3a>
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d007      	beq.n	800ddca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddba:	4b1a      	ldr	r3, [pc, #104]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4819      	ldr	r0, [pc, #100]	@ (800de28 <prvAddCurrentTaskToDelayedList+0x98>)
 800ddc4:	f7fe f94d 	bl	800c062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddc8:	e026      	b.n	800de18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4413      	add	r3, r2
 800ddd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddd2:	4b14      	ldr	r3, [pc, #80]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d209      	bcs.n	800ddf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde2:	4b12      	ldr	r3, [pc, #72]	@ (800de2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	4b0f      	ldr	r3, [pc, #60]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f7fe f95b 	bl	800c0aa <vListInsert>
}
 800ddf4:	e010      	b.n	800de18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddf6:	4b0e      	ldr	r3, [pc, #56]	@ (800de30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	4b0a      	ldr	r3, [pc, #40]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3304      	adds	r3, #4
 800de00:	4619      	mov	r1, r3
 800de02:	4610      	mov	r0, r2
 800de04:	f7fe f951 	bl	800c0aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de08:	4b0a      	ldr	r3, [pc, #40]	@ (800de34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d202      	bcs.n	800de18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de12:	4a08      	ldr	r2, [pc, #32]	@ (800de34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	6013      	str	r3, [r2, #0]
}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	24002ce0 	.word	0x24002ce0
 800de24:	24002808 	.word	0x24002808
 800de28:	24002cc8 	.word	0x24002cc8
 800de2c:	24002c98 	.word	0x24002c98
 800de30:	24002c94 	.word	0x24002c94
 800de34:	24002cfc 	.word	0x24002cfc

0800de38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	@ 0x28
 800de3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de42:	f000 fb13 	bl	800e46c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de46:	4b1d      	ldr	r3, [pc, #116]	@ (800debc <xTimerCreateTimerTask+0x84>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d021      	beq.n	800de92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de52:	2300      	movs	r3, #0
 800de54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de56:	1d3a      	adds	r2, r7, #4
 800de58:	f107 0108 	add.w	r1, r7, #8
 800de5c:	f107 030c 	add.w	r3, r7, #12
 800de60:	4618      	mov	r0, r3
 800de62:	f7fe f8b7 	bl	800bfd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	9202      	str	r2, [sp, #8]
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	2302      	movs	r3, #2
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	460a      	mov	r2, r1
 800de78:	4911      	ldr	r1, [pc, #68]	@ (800dec0 <xTimerCreateTimerTask+0x88>)
 800de7a:	4812      	ldr	r0, [pc, #72]	@ (800dec4 <xTimerCreateTimerTask+0x8c>)
 800de7c:	f7fe fefa 	bl	800cc74 <xTaskCreateStatic>
 800de80:	4603      	mov	r3, r0
 800de82:	4a11      	ldr	r2, [pc, #68]	@ (800dec8 <xTimerCreateTimerTask+0x90>)
 800de84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de86:	4b10      	ldr	r3, [pc, #64]	@ (800dec8 <xTimerCreateTimerTask+0x90>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de8e:	2301      	movs	r3, #1
 800de90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10b      	bne.n	800deb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	613b      	str	r3, [r7, #16]
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	e7fd      	b.n	800deac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800deb0:	697b      	ldr	r3, [r7, #20]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3718      	adds	r7, #24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	24002d38 	.word	0x24002d38
 800dec0:	08012974 	.word	0x08012974
 800dec4:	0800e005 	.word	0x0800e005
 800dec8:	24002d3c 	.word	0x24002d3c

0800decc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b08a      	sub	sp, #40	@ 0x28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800deda:	2300      	movs	r3, #0
 800dedc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10b      	bne.n	800defc <xTimerGenericCommand+0x30>
	__asm volatile
 800dee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	623b      	str	r3, [r7, #32]
}
 800def6:	bf00      	nop
 800def8:	bf00      	nop
 800defa:	e7fd      	b.n	800def8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800defc:	4b19      	ldr	r3, [pc, #100]	@ (800df64 <xTimerGenericCommand+0x98>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d02a      	beq.n	800df5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2b05      	cmp	r3, #5
 800df14:	dc18      	bgt.n	800df48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df16:	f7ff fd05 	bl	800d924 <xTaskGetSchedulerState>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d109      	bne.n	800df34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df20:	4b10      	ldr	r3, [pc, #64]	@ (800df64 <xTimerGenericCommand+0x98>)
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	f107 0110 	add.w	r1, r7, #16
 800df28:	2300      	movs	r3, #0
 800df2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df2c:	f7fe fab2 	bl	800c494 <xQueueGenericSend>
 800df30:	6278      	str	r0, [r7, #36]	@ 0x24
 800df32:	e012      	b.n	800df5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df34:	4b0b      	ldr	r3, [pc, #44]	@ (800df64 <xTimerGenericCommand+0x98>)
 800df36:	6818      	ldr	r0, [r3, #0]
 800df38:	f107 0110 	add.w	r1, r7, #16
 800df3c:	2300      	movs	r3, #0
 800df3e:	2200      	movs	r2, #0
 800df40:	f7fe faa8 	bl	800c494 <xQueueGenericSend>
 800df44:	6278      	str	r0, [r7, #36]	@ 0x24
 800df46:	e008      	b.n	800df5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df48:	4b06      	ldr	r3, [pc, #24]	@ (800df64 <xTimerGenericCommand+0x98>)
 800df4a:	6818      	ldr	r0, [r3, #0]
 800df4c:	f107 0110 	add.w	r1, r7, #16
 800df50:	2300      	movs	r3, #0
 800df52:	683a      	ldr	r2, [r7, #0]
 800df54:	f7fe fba0 	bl	800c698 <xQueueGenericSendFromISR>
 800df58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3728      	adds	r7, #40	@ 0x28
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	24002d38 	.word	0x24002d38

0800df68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df72:	4b23      	ldr	r3, [pc, #140]	@ (800e000 <prvProcessExpiredTimer+0x98>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	3304      	adds	r3, #4
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe f8cb 	bl	800c11c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df8c:	f003 0304 	and.w	r3, r3, #4
 800df90:	2b00      	cmp	r3, #0
 800df92:	d023      	beq.n	800dfdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	699a      	ldr	r2, [r3, #24]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	18d1      	adds	r1, r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	6978      	ldr	r0, [r7, #20]
 800dfa2:	f000 f8d5 	bl	800e150 <prvInsertTimerInActiveList>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d020      	beq.n	800dfee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfac:	2300      	movs	r3, #0
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	6978      	ldr	r0, [r7, #20]
 800dfb8:	f7ff ff88 	bl	800decc <xTimerGenericCommand>
 800dfbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d114      	bne.n	800dfee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc8:	f383 8811 	msr	BASEPRI, r3
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	60fb      	str	r3, [r7, #12]
}
 800dfd6:	bf00      	nop
 800dfd8:	bf00      	nop
 800dfda:	e7fd      	b.n	800dfd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfe2:	f023 0301 	bic.w	r3, r3, #1
 800dfe6:	b2da      	uxtb	r2, r3
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	6978      	ldr	r0, [r7, #20]
 800dff4:	4798      	blx	r3
}
 800dff6:	bf00      	nop
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	24002d30 	.word	0x24002d30

0800e004 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e00c:	f107 0308 	add.w	r3, r7, #8
 800e010:	4618      	mov	r0, r3
 800e012:	f000 f859 	bl	800e0c8 <prvGetNextExpireTime>
 800e016:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	4619      	mov	r1, r3
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f000 f805 	bl	800e02c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e022:	f000 f8d7 	bl	800e1d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e026:	bf00      	nop
 800e028:	e7f0      	b.n	800e00c <prvTimerTask+0x8>
	...

0800e02c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e036:	f7ff f881 	bl	800d13c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e03a:	f107 0308 	add.w	r3, r7, #8
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f866 	bl	800e110 <prvSampleTimeNow>
 800e044:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d130      	bne.n	800e0ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10a      	bne.n	800e068 <prvProcessTimerOrBlockTask+0x3c>
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	429a      	cmp	r2, r3
 800e058:	d806      	bhi.n	800e068 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e05a:	f7ff f87d 	bl	800d158 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e05e:	68f9      	ldr	r1, [r7, #12]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff ff81 	bl	800df68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e066:	e024      	b.n	800e0b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d008      	beq.n	800e080 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e06e:	4b13      	ldr	r3, [pc, #76]	@ (800e0bc <prvProcessTimerOrBlockTask+0x90>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d101      	bne.n	800e07c <prvProcessTimerOrBlockTask+0x50>
 800e078:	2301      	movs	r3, #1
 800e07a:	e000      	b.n	800e07e <prvProcessTimerOrBlockTask+0x52>
 800e07c:	2300      	movs	r3, #0
 800e07e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e080:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c0 <prvProcessTimerOrBlockTask+0x94>)
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	1ad3      	subs	r3, r2, r3
 800e08a:	683a      	ldr	r2, [r7, #0]
 800e08c:	4619      	mov	r1, r3
 800e08e:	f7fe fdbd 	bl	800cc0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e092:	f7ff f861 	bl	800d158 <xTaskResumeAll>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10a      	bne.n	800e0b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e09c:	4b09      	ldr	r3, [pc, #36]	@ (800e0c4 <prvProcessTimerOrBlockTask+0x98>)
 800e09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	f3bf 8f6f 	isb	sy
}
 800e0ac:	e001      	b.n	800e0b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0ae:	f7ff f853 	bl	800d158 <xTaskResumeAll>
}
 800e0b2:	bf00      	nop
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	24002d34 	.word	0x24002d34
 800e0c0:	24002d38 	.word	0x24002d38
 800e0c4:	e000ed04 	.word	0xe000ed04

0800e0c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0d0:	4b0e      	ldr	r3, [pc, #56]	@ (800e10c <prvGetNextExpireTime+0x44>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <prvGetNextExpireTime+0x16>
 800e0da:	2201      	movs	r2, #1
 800e0dc:	e000      	b.n	800e0e0 <prvGetNextExpireTime+0x18>
 800e0de:	2200      	movs	r2, #0
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d105      	bne.n	800e0f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0ec:	4b07      	ldr	r3, [pc, #28]	@ (800e10c <prvGetNextExpireTime+0x44>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	60fb      	str	r3, [r7, #12]
 800e0f6:	e001      	b.n	800e0fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3714      	adds	r7, #20
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	24002d30 	.word	0x24002d30

0800e110 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e118:	f7ff f8bc 	bl	800d294 <xTaskGetTickCount>
 800e11c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e11e:	4b0b      	ldr	r3, [pc, #44]	@ (800e14c <prvSampleTimeNow+0x3c>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	429a      	cmp	r2, r3
 800e126:	d205      	bcs.n	800e134 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e128:	f000 f93a 	bl	800e3a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	601a      	str	r2, [r3, #0]
 800e132:	e002      	b.n	800e13a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e13a:	4a04      	ldr	r2, [pc, #16]	@ (800e14c <prvSampleTimeNow+0x3c>)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e140:	68fb      	ldr	r3, [r7, #12]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	24002d40 	.word	0x24002d40

0800e150 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
 800e15c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e15e:	2300      	movs	r3, #0
 800e160:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	68fa      	ldr	r2, [r7, #12]
 800e16c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	429a      	cmp	r2, r3
 800e174:	d812      	bhi.n	800e19c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	1ad2      	subs	r2, r2, r3
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	429a      	cmp	r2, r3
 800e182:	d302      	bcc.n	800e18a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e184:	2301      	movs	r3, #1
 800e186:	617b      	str	r3, [r7, #20]
 800e188:	e01b      	b.n	800e1c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e18a:	4b10      	ldr	r3, [pc, #64]	@ (800e1cc <prvInsertTimerInActiveList+0x7c>)
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3304      	adds	r3, #4
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f7fd ff88 	bl	800c0aa <vListInsert>
 800e19a:	e012      	b.n	800e1c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d206      	bcs.n	800e1b2 <prvInsertTimerInActiveList+0x62>
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d302      	bcc.n	800e1b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	617b      	str	r3, [r7, #20]
 800e1b0:	e007      	b.n	800e1c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1b2:	4b07      	ldr	r3, [pc, #28]	@ (800e1d0 <prvInsertTimerInActiveList+0x80>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	4610      	mov	r0, r2
 800e1be:	f7fd ff74 	bl	800c0aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1c2:	697b      	ldr	r3, [r7, #20]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	24002d34 	.word	0x24002d34
 800e1d0:	24002d30 	.word	0x24002d30

0800e1d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08e      	sub	sp, #56	@ 0x38
 800e1d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1da:	e0ce      	b.n	800e37a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	da19      	bge.n	800e216 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e1e2:	1d3b      	adds	r3, r7, #4
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10b      	bne.n	800e206 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	61fb      	str	r3, [r7, #28]
}
 800e200:	bf00      	nop
 800e202:	bf00      	nop
 800e204:	e7fd      	b.n	800e202 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e20c:	6850      	ldr	r0, [r2, #4]
 800e20e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e210:	6892      	ldr	r2, [r2, #8]
 800e212:	4611      	mov	r1, r2
 800e214:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f2c0 80ae 	blt.w	800e37a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e224:	695b      	ldr	r3, [r3, #20]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d004      	beq.n	800e234 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e22c:	3304      	adds	r3, #4
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd ff74 	bl	800c11c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e234:	463b      	mov	r3, r7
 800e236:	4618      	mov	r0, r3
 800e238:	f7ff ff6a 	bl	800e110 <prvSampleTimeNow>
 800e23c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b09      	cmp	r3, #9
 800e242:	f200 8097 	bhi.w	800e374 <prvProcessReceivedCommands+0x1a0>
 800e246:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <prvProcessReceivedCommands+0x78>)
 800e248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24c:	0800e275 	.word	0x0800e275
 800e250:	0800e275 	.word	0x0800e275
 800e254:	0800e275 	.word	0x0800e275
 800e258:	0800e2eb 	.word	0x0800e2eb
 800e25c:	0800e2ff 	.word	0x0800e2ff
 800e260:	0800e34b 	.word	0x0800e34b
 800e264:	0800e275 	.word	0x0800e275
 800e268:	0800e275 	.word	0x0800e275
 800e26c:	0800e2eb 	.word	0x0800e2eb
 800e270:	0800e2ff 	.word	0x0800e2ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e27a:	f043 0301 	orr.w	r3, r3, #1
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	18d1      	adds	r1, r2, r3
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e294:	f7ff ff5c 	bl	800e150 <prvInsertTimerInActiveList>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d06c      	beq.n	800e378 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a0:	6a1b      	ldr	r3, [r3, #32]
 800e2a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2ac:	f003 0304 	and.w	r3, r3, #4
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d061      	beq.n	800e378 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2b4:	68ba      	ldr	r2, [r7, #8]
 800e2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	441a      	add	r2, r3
 800e2bc:	2300      	movs	r3, #0
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2c6:	f7ff fe01 	bl	800decc <xTimerGenericCommand>
 800e2ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2cc:	6a3b      	ldr	r3, [r7, #32]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d152      	bne.n	800e378 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	61bb      	str	r3, [r7, #24]
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop
 800e2e8:	e7fd      	b.n	800e2e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2f0:	f023 0301 	bic.w	r3, r3, #1
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e2fc:	e03d      	b.n	800e37a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e304:	f043 0301 	orr.w	r3, r3, #1
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e310:	68ba      	ldr	r2, [r7, #8]
 800e312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e314:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e318:	699b      	ldr	r3, [r3, #24]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d10b      	bne.n	800e336 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e322:	f383 8811 	msr	BASEPRI, r3
 800e326:	f3bf 8f6f 	isb	sy
 800e32a:	f3bf 8f4f 	dsb	sy
 800e32e:	617b      	str	r3, [r7, #20]
}
 800e330:	bf00      	nop
 800e332:	bf00      	nop
 800e334:	e7fd      	b.n	800e332 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e338:	699a      	ldr	r2, [r3, #24]
 800e33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e33c:	18d1      	adds	r1, r2, r3
 800e33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e344:	f7ff ff04 	bl	800e150 <prvInsertTimerInActiveList>
					break;
 800e348:	e017      	b.n	800e37a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e350:	f003 0302 	and.w	r3, r3, #2
 800e354:	2b00      	cmp	r3, #0
 800e356:	d103      	bne.n	800e360 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e35a:	f000 fbe5 	bl	800eb28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e35e:	e00c      	b.n	800e37a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e366:	f023 0301 	bic.w	r3, r3, #1
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e372:	e002      	b.n	800e37a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e374:	bf00      	nop
 800e376:	e000      	b.n	800e37a <prvProcessReceivedCommands+0x1a6>
					break;
 800e378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e37a:	4b08      	ldr	r3, [pc, #32]	@ (800e39c <prvProcessReceivedCommands+0x1c8>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	1d39      	adds	r1, r7, #4
 800e380:	2200      	movs	r2, #0
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe fa26 	bl	800c7d4 <xQueueReceive>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f47f af26 	bne.w	800e1dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	3730      	adds	r7, #48	@ 0x30
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	24002d38 	.word	0x24002d38

0800e3a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3a6:	e049      	b.n	800e43c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3a8:	4b2e      	ldr	r3, [pc, #184]	@ (800e464 <prvSwitchTimerLists+0xc4>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3b2:	4b2c      	ldr	r3, [pc, #176]	@ (800e464 <prvSwitchTimerLists+0xc4>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fd feab 	bl	800c11c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6a1b      	ldr	r3, [r3, #32]
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3d4:	f003 0304 	and.w	r3, r3, #4
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d02f      	beq.n	800e43c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d90e      	bls.n	800e40c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3fa:	4b1a      	ldr	r3, [pc, #104]	@ (800e464 <prvSwitchTimerLists+0xc4>)
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	3304      	adds	r3, #4
 800e402:	4619      	mov	r1, r3
 800e404:	4610      	mov	r0, r2
 800e406:	f7fd fe50 	bl	800c0aa <vListInsert>
 800e40a:	e017      	b.n	800e43c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e40c:	2300      	movs	r3, #0
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	2300      	movs	r3, #0
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	2100      	movs	r1, #0
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7ff fd58 	bl	800decc <xTimerGenericCommand>
 800e41c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d10b      	bne.n	800e43c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e428:	f383 8811 	msr	BASEPRI, r3
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	603b      	str	r3, [r7, #0]
}
 800e436:	bf00      	nop
 800e438:	bf00      	nop
 800e43a:	e7fd      	b.n	800e438 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e43c:	4b09      	ldr	r3, [pc, #36]	@ (800e464 <prvSwitchTimerLists+0xc4>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1b0      	bne.n	800e3a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e446:	4b07      	ldr	r3, [pc, #28]	@ (800e464 <prvSwitchTimerLists+0xc4>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e44c:	4b06      	ldr	r3, [pc, #24]	@ (800e468 <prvSwitchTimerLists+0xc8>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a04      	ldr	r2, [pc, #16]	@ (800e464 <prvSwitchTimerLists+0xc4>)
 800e452:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e454:	4a04      	ldr	r2, [pc, #16]	@ (800e468 <prvSwitchTimerLists+0xc8>)
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	6013      	str	r3, [r2, #0]
}
 800e45a:	bf00      	nop
 800e45c:	3718      	adds	r7, #24
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	24002d30 	.word	0x24002d30
 800e468:	24002d34 	.word	0x24002d34

0800e46c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e472:	f000 f969 	bl	800e748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e476:	4b15      	ldr	r3, [pc, #84]	@ (800e4cc <prvCheckForValidListAndQueue+0x60>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d120      	bne.n	800e4c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e47e:	4814      	ldr	r0, [pc, #80]	@ (800e4d0 <prvCheckForValidListAndQueue+0x64>)
 800e480:	f7fd fdc2 	bl	800c008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e484:	4813      	ldr	r0, [pc, #76]	@ (800e4d4 <prvCheckForValidListAndQueue+0x68>)
 800e486:	f7fd fdbf 	bl	800c008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e48a:	4b13      	ldr	r3, [pc, #76]	@ (800e4d8 <prvCheckForValidListAndQueue+0x6c>)
 800e48c:	4a10      	ldr	r2, [pc, #64]	@ (800e4d0 <prvCheckForValidListAndQueue+0x64>)
 800e48e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e490:	4b12      	ldr	r3, [pc, #72]	@ (800e4dc <prvCheckForValidListAndQueue+0x70>)
 800e492:	4a10      	ldr	r2, [pc, #64]	@ (800e4d4 <prvCheckForValidListAndQueue+0x68>)
 800e494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e496:	2300      	movs	r3, #0
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	4b11      	ldr	r3, [pc, #68]	@ (800e4e0 <prvCheckForValidListAndQueue+0x74>)
 800e49c:	4a11      	ldr	r2, [pc, #68]	@ (800e4e4 <prvCheckForValidListAndQueue+0x78>)
 800e49e:	2110      	movs	r1, #16
 800e4a0:	200a      	movs	r0, #10
 800e4a2:	f7fd fecf 	bl	800c244 <xQueueGenericCreateStatic>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	4a08      	ldr	r2, [pc, #32]	@ (800e4cc <prvCheckForValidListAndQueue+0x60>)
 800e4aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4ac:	4b07      	ldr	r3, [pc, #28]	@ (800e4cc <prvCheckForValidListAndQueue+0x60>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d005      	beq.n	800e4c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4b4:	4b05      	ldr	r3, [pc, #20]	@ (800e4cc <prvCheckForValidListAndQueue+0x60>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	490b      	ldr	r1, [pc, #44]	@ (800e4e8 <prvCheckForValidListAndQueue+0x7c>)
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fb7c 	bl	800cbb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4c0:	f000 f974 	bl	800e7ac <vPortExitCritical>
}
 800e4c4:	bf00      	nop
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	24002d38 	.word	0x24002d38
 800e4d0:	24002d08 	.word	0x24002d08
 800e4d4:	24002d1c 	.word	0x24002d1c
 800e4d8:	24002d30 	.word	0x24002d30
 800e4dc:	24002d34 	.word	0x24002d34
 800e4e0:	24002de4 	.word	0x24002de4
 800e4e4:	24002d44 	.word	0x24002d44
 800e4e8:	0801297c 	.word	0x0801297c

0800e4ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	3b04      	subs	r3, #4
 800e4fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3b04      	subs	r3, #4
 800e50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	f023 0201 	bic.w	r2, r3, #1
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	3b04      	subs	r3, #4
 800e51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e51c:	4a0c      	ldr	r2, [pc, #48]	@ (800e550 <pxPortInitialiseStack+0x64>)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3b14      	subs	r3, #20
 800e526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3b04      	subs	r3, #4
 800e532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f06f 0202 	mvn.w	r2, #2
 800e53a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	3b20      	subs	r3, #32
 800e540:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e542:	68fb      	ldr	r3, [r7, #12]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3714      	adds	r7, #20
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr
 800e550:	0800e555 	.word	0x0800e555

0800e554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e55e:	4b13      	ldr	r3, [pc, #76]	@ (800e5ac <prvTaskExitError+0x58>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e566:	d00b      	beq.n	800e580 <prvTaskExitError+0x2c>
	__asm volatile
 800e568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e56c:	f383 8811 	msr	BASEPRI, r3
 800e570:	f3bf 8f6f 	isb	sy
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	60fb      	str	r3, [r7, #12]
}
 800e57a:	bf00      	nop
 800e57c:	bf00      	nop
 800e57e:	e7fd      	b.n	800e57c <prvTaskExitError+0x28>
	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	60bb      	str	r3, [r7, #8]
}
 800e592:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e594:	bf00      	nop
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d0fc      	beq.n	800e596 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e59c:	bf00      	nop
 800e59e:	bf00      	nop
 800e5a0:	3714      	adds	r7, #20
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	24000010 	.word	0x24000010

0800e5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5b0:	4b07      	ldr	r3, [pc, #28]	@ (800e5d0 <pxCurrentTCBConst2>)
 800e5b2:	6819      	ldr	r1, [r3, #0]
 800e5b4:	6808      	ldr	r0, [r1, #0]
 800e5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ba:	f380 8809 	msr	PSP, r0
 800e5be:	f3bf 8f6f 	isb	sy
 800e5c2:	f04f 0000 	mov.w	r0, #0
 800e5c6:	f380 8811 	msr	BASEPRI, r0
 800e5ca:	4770      	bx	lr
 800e5cc:	f3af 8000 	nop.w

0800e5d0 <pxCurrentTCBConst2>:
 800e5d0:	24002808 	.word	0x24002808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5d4:	bf00      	nop
 800e5d6:	bf00      	nop

0800e5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5d8:	4808      	ldr	r0, [pc, #32]	@ (800e5fc <prvPortStartFirstTask+0x24>)
 800e5da:	6800      	ldr	r0, [r0, #0]
 800e5dc:	6800      	ldr	r0, [r0, #0]
 800e5de:	f380 8808 	msr	MSP, r0
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8814 	msr	CONTROL, r0
 800e5ea:	b662      	cpsie	i
 800e5ec:	b661      	cpsie	f
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	df00      	svc	0
 800e5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5fa:	bf00      	nop
 800e5fc:	e000ed08 	.word	0xe000ed08

0800e600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e606:	4b47      	ldr	r3, [pc, #284]	@ (800e724 <xPortStartScheduler+0x124>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a47      	ldr	r2, [pc, #284]	@ (800e728 <xPortStartScheduler+0x128>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d10b      	bne.n	800e628 <xPortStartScheduler+0x28>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	613b      	str	r3, [r7, #16]
}
 800e622:	bf00      	nop
 800e624:	bf00      	nop
 800e626:	e7fd      	b.n	800e624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e628:	4b3e      	ldr	r3, [pc, #248]	@ (800e724 <xPortStartScheduler+0x124>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a3f      	ldr	r2, [pc, #252]	@ (800e72c <xPortStartScheduler+0x12c>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d10b      	bne.n	800e64a <xPortStartScheduler+0x4a>
	__asm volatile
 800e632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	60fb      	str	r3, [r7, #12]
}
 800e644:	bf00      	nop
 800e646:	bf00      	nop
 800e648:	e7fd      	b.n	800e646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e64a:	4b39      	ldr	r3, [pc, #228]	@ (800e730 <xPortStartScheduler+0x130>)
 800e64c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	b2db      	uxtb	r3, r3
 800e654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	22ff      	movs	r2, #255	@ 0xff
 800e65a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	b2db      	uxtb	r3, r3
 800e662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e664:	78fb      	ldrb	r3, [r7, #3]
 800e666:	b2db      	uxtb	r3, r3
 800e668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e66c:	b2da      	uxtb	r2, r3
 800e66e:	4b31      	ldr	r3, [pc, #196]	@ (800e734 <xPortStartScheduler+0x134>)
 800e670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e672:	4b31      	ldr	r3, [pc, #196]	@ (800e738 <xPortStartScheduler+0x138>)
 800e674:	2207      	movs	r2, #7
 800e676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e678:	e009      	b.n	800e68e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e67a:	4b2f      	ldr	r3, [pc, #188]	@ (800e738 <xPortStartScheduler+0x138>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	3b01      	subs	r3, #1
 800e680:	4a2d      	ldr	r2, [pc, #180]	@ (800e738 <xPortStartScheduler+0x138>)
 800e682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e684:	78fb      	ldrb	r3, [r7, #3]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	005b      	lsls	r3, r3, #1
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e68e:	78fb      	ldrb	r3, [r7, #3]
 800e690:	b2db      	uxtb	r3, r3
 800e692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e696:	2b80      	cmp	r3, #128	@ 0x80
 800e698:	d0ef      	beq.n	800e67a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e69a:	4b27      	ldr	r3, [pc, #156]	@ (800e738 <xPortStartScheduler+0x138>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f1c3 0307 	rsb	r3, r3, #7
 800e6a2:	2b04      	cmp	r3, #4
 800e6a4:	d00b      	beq.n	800e6be <xPortStartScheduler+0xbe>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	60bb      	str	r3, [r7, #8]
}
 800e6b8:	bf00      	nop
 800e6ba:	bf00      	nop
 800e6bc:	e7fd      	b.n	800e6ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6be:	4b1e      	ldr	r3, [pc, #120]	@ (800e738 <xPortStartScheduler+0x138>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	021b      	lsls	r3, r3, #8
 800e6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e738 <xPortStartScheduler+0x138>)
 800e6c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800e738 <xPortStartScheduler+0x138>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e6d0:	4a19      	ldr	r2, [pc, #100]	@ (800e738 <xPortStartScheduler+0x138>)
 800e6d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	b2da      	uxtb	r2, r3
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6dc:	4b17      	ldr	r3, [pc, #92]	@ (800e73c <xPortStartScheduler+0x13c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a16      	ldr	r2, [pc, #88]	@ (800e73c <xPortStartScheduler+0x13c>)
 800e6e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e6e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6e8:	4b14      	ldr	r3, [pc, #80]	@ (800e73c <xPortStartScheduler+0x13c>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a13      	ldr	r2, [pc, #76]	@ (800e73c <xPortStartScheduler+0x13c>)
 800e6ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e6f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6f4:	f000 f8da 	bl	800e8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6f8:	4b11      	ldr	r3, [pc, #68]	@ (800e740 <xPortStartScheduler+0x140>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6fe:	f000 f8f9 	bl	800e8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e702:	4b10      	ldr	r3, [pc, #64]	@ (800e744 <xPortStartScheduler+0x144>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a0f      	ldr	r2, [pc, #60]	@ (800e744 <xPortStartScheduler+0x144>)
 800e708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e70c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e70e:	f7ff ff63 	bl	800e5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e712:	f7fe fe89 	bl	800d428 <vTaskSwitchContext>
	prvTaskExitError();
 800e716:	f7ff ff1d 	bl	800e554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	e000ed00 	.word	0xe000ed00
 800e728:	410fc271 	.word	0x410fc271
 800e72c:	410fc270 	.word	0x410fc270
 800e730:	e000e400 	.word	0xe000e400
 800e734:	24002e34 	.word	0x24002e34
 800e738:	24002e38 	.word	0x24002e38
 800e73c:	e000ed20 	.word	0xe000ed20
 800e740:	24000010 	.word	0x24000010
 800e744:	e000ef34 	.word	0xe000ef34

0800e748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	607b      	str	r3, [r7, #4]
}
 800e760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e762:	4b10      	ldr	r3, [pc, #64]	@ (800e7a4 <vPortEnterCritical+0x5c>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	3301      	adds	r3, #1
 800e768:	4a0e      	ldr	r2, [pc, #56]	@ (800e7a4 <vPortEnterCritical+0x5c>)
 800e76a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e76c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7a4 <vPortEnterCritical+0x5c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d110      	bne.n	800e796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e774:	4b0c      	ldr	r3, [pc, #48]	@ (800e7a8 <vPortEnterCritical+0x60>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00b      	beq.n	800e796 <vPortEnterCritical+0x4e>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	603b      	str	r3, [r7, #0]
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	e7fd      	b.n	800e792 <vPortEnterCritical+0x4a>
	}
}
 800e796:	bf00      	nop
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	24000010 	.word	0x24000010
 800e7a8:	e000ed04 	.word	0xe000ed04

0800e7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7b2:	4b12      	ldr	r3, [pc, #72]	@ (800e7fc <vPortExitCritical+0x50>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10b      	bne.n	800e7d2 <vPortExitCritical+0x26>
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	607b      	str	r3, [r7, #4]
}
 800e7cc:	bf00      	nop
 800e7ce:	bf00      	nop
 800e7d0:	e7fd      	b.n	800e7ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e7fc <vPortExitCritical+0x50>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	4a08      	ldr	r2, [pc, #32]	@ (800e7fc <vPortExitCritical+0x50>)
 800e7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7dc:	4b07      	ldr	r3, [pc, #28]	@ (800e7fc <vPortExitCritical+0x50>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d105      	bne.n	800e7f0 <vPortExitCritical+0x44>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	f383 8811 	msr	BASEPRI, r3
}
 800e7ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	24000010 	.word	0x24000010

0800e800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e800:	f3ef 8009 	mrs	r0, PSP
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	4b15      	ldr	r3, [pc, #84]	@ (800e860 <pxCurrentTCBConst>)
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	f01e 0f10 	tst.w	lr, #16
 800e810:	bf08      	it	eq
 800e812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81a:	6010      	str	r0, [r2, #0]
 800e81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e824:	f380 8811 	msr	BASEPRI, r0
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f7fe fdfa 	bl	800d428 <vTaskSwitchContext>
 800e834:	f04f 0000 	mov.w	r0, #0
 800e838:	f380 8811 	msr	BASEPRI, r0
 800e83c:	bc09      	pop	{r0, r3}
 800e83e:	6819      	ldr	r1, [r3, #0]
 800e840:	6808      	ldr	r0, [r1, #0]
 800e842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e846:	f01e 0f10 	tst.w	lr, #16
 800e84a:	bf08      	it	eq
 800e84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e850:	f380 8809 	msr	PSP, r0
 800e854:	f3bf 8f6f 	isb	sy
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	f3af 8000 	nop.w

0800e860 <pxCurrentTCBConst>:
 800e860:	24002808 	.word	0x24002808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e864:	bf00      	nop
 800e866:	bf00      	nop

0800e868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	607b      	str	r3, [r7, #4]
}
 800e880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e882:	f7fe fd17 	bl	800d2b4 <xTaskIncrementTick>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e88c:	4b06      	ldr	r3, [pc, #24]	@ (800e8a8 <xPortSysTickHandler+0x40>)
 800e88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	2300      	movs	r3, #0
 800e896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f383 8811 	msr	BASEPRI, r3
}
 800e89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	e000ed04 	.word	0xe000ed04

0800e8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e0 <vPortSetupTimerInterrupt+0x34>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e4 <vPortSetupTimerInterrupt+0x38>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e8e8 <vPortSetupTimerInterrupt+0x3c>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a0a      	ldr	r2, [pc, #40]	@ (800e8ec <vPortSetupTimerInterrupt+0x40>)
 800e8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8c6:	099b      	lsrs	r3, r3, #6
 800e8c8:	4a09      	ldr	r2, [pc, #36]	@ (800e8f0 <vPortSetupTimerInterrupt+0x44>)
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8ce:	4b04      	ldr	r3, [pc, #16]	@ (800e8e0 <vPortSetupTimerInterrupt+0x34>)
 800e8d0:	2207      	movs	r2, #7
 800e8d2:	601a      	str	r2, [r3, #0]
}
 800e8d4:	bf00      	nop
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	e000e010 	.word	0xe000e010
 800e8e4:	e000e018 	.word	0xe000e018
 800e8e8:	24000000 	.word	0x24000000
 800e8ec:	10624dd3 	.word	0x10624dd3
 800e8f0:	e000e014 	.word	0xe000e014

0800e8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e904 <vPortEnableVFP+0x10>
 800e8f8:	6801      	ldr	r1, [r0, #0]
 800e8fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e8fe:	6001      	str	r1, [r0, #0]
 800e900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e902:	bf00      	nop
 800e904:	e000ed88 	.word	0xe000ed88

0800e908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e90e:	f3ef 8305 	mrs	r3, IPSR
 800e912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b0f      	cmp	r3, #15
 800e918:	d915      	bls.n	800e946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e91a:	4a18      	ldr	r2, [pc, #96]	@ (800e97c <vPortValidateInterruptPriority+0x74>)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	4413      	add	r3, r2
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e924:	4b16      	ldr	r3, [pc, #88]	@ (800e980 <vPortValidateInterruptPriority+0x78>)
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	7afa      	ldrb	r2, [r7, #11]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d20b      	bcs.n	800e946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	607b      	str	r3, [r7, #4]
}
 800e940:	bf00      	nop
 800e942:	bf00      	nop
 800e944:	e7fd      	b.n	800e942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e946:	4b0f      	ldr	r3, [pc, #60]	@ (800e984 <vPortValidateInterruptPriority+0x7c>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e94e:	4b0e      	ldr	r3, [pc, #56]	@ (800e988 <vPortValidateInterruptPriority+0x80>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	429a      	cmp	r2, r3
 800e954:	d90b      	bls.n	800e96e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	603b      	str	r3, [r7, #0]
}
 800e968:	bf00      	nop
 800e96a:	bf00      	nop
 800e96c:	e7fd      	b.n	800e96a <vPortValidateInterruptPriority+0x62>
	}
 800e96e:	bf00      	nop
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	e000e3f0 	.word	0xe000e3f0
 800e980:	24002e34 	.word	0x24002e34
 800e984:	e000ed0c 	.word	0xe000ed0c
 800e988:	24002e38 	.word	0x24002e38

0800e98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b08a      	sub	sp, #40	@ 0x28
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e994:	2300      	movs	r3, #0
 800e996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e998:	f7fe fbd0 	bl	800d13c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e99c:	4b5c      	ldr	r3, [pc, #368]	@ (800eb10 <pvPortMalloc+0x184>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9a4:	f000 f924 	bl	800ebf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9a8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb14 <pvPortMalloc+0x188>)
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f040 8095 	bne.w	800eae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01e      	beq.n	800e9fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9bc:	2208      	movs	r2, #8
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d015      	beq.n	800e9fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f023 0307 	bic.w	r3, r3, #7
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f003 0307 	and.w	r3, r3, #7
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00b      	beq.n	800e9fa <pvPortMalloc+0x6e>
	__asm volatile
 800e9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	617b      	str	r3, [r7, #20]
}
 800e9f4:	bf00      	nop
 800e9f6:	bf00      	nop
 800e9f8:	e7fd      	b.n	800e9f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d06f      	beq.n	800eae0 <pvPortMalloc+0x154>
 800ea00:	4b45      	ldr	r3, [pc, #276]	@ (800eb18 <pvPortMalloc+0x18c>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d86a      	bhi.n	800eae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea0a:	4b44      	ldr	r3, [pc, #272]	@ (800eb1c <pvPortMalloc+0x190>)
 800ea0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea0e:	4b43      	ldr	r3, [pc, #268]	@ (800eb1c <pvPortMalloc+0x190>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea14:	e004      	b.n	800ea20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d903      	bls.n	800ea32 <pvPortMalloc+0xa6>
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1f1      	bne.n	800ea16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea32:	4b37      	ldr	r3, [pc, #220]	@ (800eb10 <pvPortMalloc+0x184>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d051      	beq.n	800eae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2208      	movs	r2, #8
 800ea42:	4413      	add	r3, r2
 800ea44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea50:	685a      	ldr	r2, [r3, #4]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	1ad2      	subs	r2, r2, r3
 800ea56:	2308      	movs	r3, #8
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d920      	bls.n	800eaa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	4413      	add	r3, r2
 800ea64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	f003 0307 	and.w	r3, r3, #7
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00b      	beq.n	800ea88 <pvPortMalloc+0xfc>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	613b      	str	r3, [r7, #16]
}
 800ea82:	bf00      	nop
 800ea84:	bf00      	nop
 800ea86:	e7fd      	b.n	800ea84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	1ad2      	subs	r2, r2, r3
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea9a:	69b8      	ldr	r0, [r7, #24]
 800ea9c:	f000 f90c 	bl	800ecb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eaa0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb18 <pvPortMalloc+0x18c>)
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	4a1b      	ldr	r2, [pc, #108]	@ (800eb18 <pvPortMalloc+0x18c>)
 800eaac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eaae:	4b1a      	ldr	r3, [pc, #104]	@ (800eb18 <pvPortMalloc+0x18c>)
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb20 <pvPortMalloc+0x194>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d203      	bcs.n	800eac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaba:	4b17      	ldr	r3, [pc, #92]	@ (800eb18 <pvPortMalloc+0x18c>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4a18      	ldr	r2, [pc, #96]	@ (800eb20 <pvPortMalloc+0x194>)
 800eac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	4b13      	ldr	r3, [pc, #76]	@ (800eb14 <pvPortMalloc+0x188>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ead6:	4b13      	ldr	r3, [pc, #76]	@ (800eb24 <pvPortMalloc+0x198>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3301      	adds	r3, #1
 800eadc:	4a11      	ldr	r2, [pc, #68]	@ (800eb24 <pvPortMalloc+0x198>)
 800eade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eae0:	f7fe fb3a 	bl	800d158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	f003 0307 	and.w	r3, r3, #7
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00b      	beq.n	800eb06 <pvPortMalloc+0x17a>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	60fb      	str	r3, [r7, #12]
}
 800eb00:	bf00      	nop
 800eb02:	bf00      	nop
 800eb04:	e7fd      	b.n	800eb02 <pvPortMalloc+0x176>
	return pvReturn;
 800eb06:	69fb      	ldr	r3, [r7, #28]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3728      	adds	r7, #40	@ 0x28
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	24033b84 	.word	0x24033b84
 800eb14:	24033b98 	.word	0x24033b98
 800eb18:	24033b88 	.word	0x24033b88
 800eb1c:	24033b7c 	.word	0x24033b7c
 800eb20:	24033b8c 	.word	0x24033b8c
 800eb24:	24033b90 	.word	0x24033b90

0800eb28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b086      	sub	sp, #24
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d04f      	beq.n	800ebda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb3a:	2308      	movs	r3, #8
 800eb3c:	425b      	negs	r3, r3
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	4413      	add	r3, r2
 800eb42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	4b25      	ldr	r3, [pc, #148]	@ (800ebe4 <vPortFree+0xbc>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4013      	ands	r3, r2
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10b      	bne.n	800eb6e <vPortFree+0x46>
	__asm volatile
 800eb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	60fb      	str	r3, [r7, #12]
}
 800eb68:	bf00      	nop
 800eb6a:	bf00      	nop
 800eb6c:	e7fd      	b.n	800eb6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00b      	beq.n	800eb8e <vPortFree+0x66>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	60bb      	str	r3, [r7, #8]
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	e7fd      	b.n	800eb8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	4b14      	ldr	r3, [pc, #80]	@ (800ebe4 <vPortFree+0xbc>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4013      	ands	r3, r2
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d01e      	beq.n	800ebda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d11a      	bne.n	800ebda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	685a      	ldr	r2, [r3, #4]
 800eba8:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe4 <vPortFree+0xbc>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	43db      	mvns	r3, r3
 800ebae:	401a      	ands	r2, r3
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebb4:	f7fe fac2 	bl	800d13c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe8 <vPortFree+0xc0>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	4a09      	ldr	r2, [pc, #36]	@ (800ebe8 <vPortFree+0xc0>)
 800ebc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebc6:	6938      	ldr	r0, [r7, #16]
 800ebc8:	f000 f876 	bl	800ecb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ebcc:	4b07      	ldr	r3, [pc, #28]	@ (800ebec <vPortFree+0xc4>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	4a06      	ldr	r2, [pc, #24]	@ (800ebec <vPortFree+0xc4>)
 800ebd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ebd6:	f7fe fabf 	bl	800d158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebda:	bf00      	nop
 800ebdc:	3718      	adds	r7, #24
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	24033b98 	.word	0x24033b98
 800ebe8:	24033b88 	.word	0x24033b88
 800ebec:	24033b94 	.word	0x24033b94

0800ebf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebf6:	4b29      	ldr	r3, [pc, #164]	@ (800ec9c <prvHeapInit+0xac>)
 800ebf8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebfa:	4b29      	ldr	r3, [pc, #164]	@ (800eca0 <prvHeapInit+0xb0>)
 800ebfc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f003 0307 	and.w	r3, r3, #7
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00c      	beq.n	800ec22 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	3307      	adds	r3, #7
 800ec0c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f023 0307 	bic.w	r3, r3, #7
 800ec14:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	4a20      	ldr	r2, [pc, #128]	@ (800eca0 <prvHeapInit+0xb0>)
 800ec1e:	4413      	add	r3, r2
 800ec20:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec26:	4a1f      	ldr	r2, [pc, #124]	@ (800eca4 <prvHeapInit+0xb4>)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec2c:	4b1d      	ldr	r3, [pc, #116]	@ (800eca4 <prvHeapInit+0xb4>)
 800ec2e:	2200      	movs	r2, #0
 800ec30:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	4413      	add	r3, r2
 800ec38:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec3a:	2208      	movs	r2, #8
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	1a9b      	subs	r3, r3, r2
 800ec40:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f023 0307 	bic.w	r3, r3, #7
 800ec48:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	4a16      	ldr	r2, [pc, #88]	@ (800eca8 <prvHeapInit+0xb8>)
 800ec4e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec50:	4b15      	ldr	r3, [pc, #84]	@ (800eca8 <prvHeapInit+0xb8>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2200      	movs	r2, #0
 800ec56:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec58:	4b13      	ldr	r3, [pc, #76]	@ (800eca8 <prvHeapInit+0xb8>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	1ad2      	subs	r2, r2, r3
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eca8 <prvHeapInit+0xb8>)
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	4a0c      	ldr	r2, [pc, #48]	@ (800ecac <prvHeapInit+0xbc>)
 800ec7c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	4a0b      	ldr	r2, [pc, #44]	@ (800ecb0 <prvHeapInit+0xc0>)
 800ec84:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec86:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb4 <prvHeapInit+0xc4>)
 800ec88:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ec8c:	601a      	str	r2, [r3, #0]
}
 800ec8e:	bf00      	nop
 800ec90:	3714      	adds	r7, #20
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	00030d40 	.word	0x00030d40
 800eca0:	24002e3c 	.word	0x24002e3c
 800eca4:	24033b7c 	.word	0x24033b7c
 800eca8:	24033b84 	.word	0x24033b84
 800ecac:	24033b8c 	.word	0x24033b8c
 800ecb0:	24033b88 	.word	0x24033b88
 800ecb4:	24033b98 	.word	0x24033b98

0800ecb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecc0:	4b28      	ldr	r3, [pc, #160]	@ (800ed64 <prvInsertBlockIntoFreeList+0xac>)
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	e002      	b.n	800eccc <prvInsertBlockIntoFreeList+0x14>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	60fb      	str	r3, [r7, #12]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d8f7      	bhi.n	800ecc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	4413      	add	r3, r2
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d108      	bne.n	800ecfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	685a      	ldr	r2, [r3, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	441a      	add	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	441a      	add	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d118      	bne.n	800ed40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	4b15      	ldr	r3, [pc, #84]	@ (800ed68 <prvInsertBlockIntoFreeList+0xb0>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d00d      	beq.n	800ed36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	685a      	ldr	r2, [r3, #4]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	441a      	add	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	e008      	b.n	800ed48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed36:	4b0c      	ldr	r3, [pc, #48]	@ (800ed68 <prvInsertBlockIntoFreeList+0xb0>)
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	601a      	str	r2, [r3, #0]
 800ed3e:	e003      	b.n	800ed48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d002      	beq.n	800ed56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed56:	bf00      	nop
 800ed58:	3714      	adds	r7, #20
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	24033b7c 	.word	0x24033b7c
 800ed68:	24033b84 	.word	0x24033b84

0800ed6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800ed6c:	4a02      	ldr	r2, [pc, #8]	@ (800ed78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 800ed6e:	4b03      	ldr	r3, [pc, #12]	@ (800ed7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 800ed70:	6812      	ldr	r2, [r2, #0]
 800ed72:	601a      	str	r2, [r3, #0]
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	24000e0c 	.word	0x24000e0c
 800ed7c:	2400001c 	.word	0x2400001c

0800ed80 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 800ed80:	f002 bb96 	b.w	80114b0 <autoware_control_msgs__msg__Control__init>

0800ed84 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 800ed84:	f002 bbea 	b.w	801155c <autoware_control_msgs__msg__Control__fini>

0800ed88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	4c0c      	ldr	r4, [pc, #48]	@ (800edbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 800ed8c:	f001 f892 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ed90:	60e0      	str	r0, [r4, #12]
 800ed92:	f001 f88f 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ed96:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ed98:	f000 f81a 	bl	800edd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800ed9c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800eda0:	f000 f832 	bl	800ee08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800eda4:	4b06      	ldr	r3, [pc, #24]	@ (800edc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800eda6:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	b10a      	cbz	r2, 800edb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 800edae:	4804      	ldr	r0, [pc, #16]	@ (800edc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	4a04      	ldr	r2, [pc, #16]	@ (800edc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 800edb4:	4802      	ldr	r0, [pc, #8]	@ (800edc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800edb6:	6812      	ldr	r2, [r2, #0]
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	bd10      	pop	{r4, pc}
 800edbc:	24000028 	.word	0x24000028
 800edc0:	24000118 	.word	0x24000118
 800edc4:	24000e10 	.word	0x24000e10

0800edc8 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 800edc8:	f002 bbdc 	b.w	8011584 <autoware_control_msgs__msg__Lateral__init>

0800edcc <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 800edcc:	f002 bbfe 	b.w	80115cc <autoware_control_msgs__msg__Lateral__fini>

0800edd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800edd0:	b510      	push	{r4, lr}
 800edd2:	4c08      	ldr	r4, [pc, #32]	@ (800edf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 800edd4:	f001 f86e 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800edd8:	60e0      	str	r0, [r4, #12]
 800edda:	f001 f86b 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800edde:	4b06      	ldr	r3, [pc, #24]	@ (800edf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800ede0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	b10a      	cbz	r2, 800edea <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 800ede6:	4804      	ldr	r0, [pc, #16]	@ (800edf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800ede8:	bd10      	pop	{r4, pc}
 800edea:	4a04      	ldr	r2, [pc, #16]	@ (800edfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 800edec:	4802      	ldr	r0, [pc, #8]	@ (800edf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800edee:	6812      	ldr	r2, [r2, #0]
 800edf0:	601a      	str	r2, [r3, #0]
 800edf2:	bd10      	pop	{r4, pc}
 800edf4:	24000124 	.word	0x24000124
 800edf8:	24000250 	.word	0x24000250
 800edfc:	24000e10 	.word	0x24000e10

0800ee00 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 800ee00:	f002 bbf0 	b.w	80115e4 <autoware_control_msgs__msg__Longitudinal__init>

0800ee04 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 800ee04:	f002 bc12 	b.w	801162c <autoware_control_msgs__msg__Longitudinal__fini>

0800ee08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800ee08:	b510      	push	{r4, lr}
 800ee0a:	4c08      	ldr	r4, [pc, #32]	@ (800ee2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 800ee0c:	f001 f852 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ee10:	60e0      	str	r0, [r4, #12]
 800ee12:	f001 f84f 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ee16:	4b06      	ldr	r3, [pc, #24]	@ (800ee30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800ee18:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	b10a      	cbz	r2, 800ee22 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 800ee1e:	4804      	ldr	r0, [pc, #16]	@ (800ee30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800ee20:	bd10      	pop	{r4, pc}
 800ee22:	4a04      	ldr	r2, [pc, #16]	@ (800ee34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 800ee24:	4802      	ldr	r0, [pc, #8]	@ (800ee30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800ee26:	6812      	ldr	r2, [r2, #0]
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	bd10      	pop	{r4, pc}
 800ee2c:	2400025c 	.word	0x2400025c
 800ee30:	24000400 	.word	0x24000400
 800ee34:	24000e10 	.word	0x24000e10

0800ee38 <get_serialized_size_autoware_control_msgs__msg__Control>:
 800ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	b1c8      	cbz	r0, 800ee72 <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 800ee3e:	460f      	mov	r7, r1
 800ee40:	f001 f846 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800ee44:	4606      	mov	r6, r0
 800ee46:	f104 0008 	add.w	r0, r4, #8
 800ee4a:	443e      	add	r6, r7
 800ee4c:	4631      	mov	r1, r6
 800ee4e:	f001 f83f 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800ee52:	4605      	mov	r5, r0
 800ee54:	f104 0010 	add.w	r0, r4, #16
 800ee58:	4435      	add	r5, r6
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	f000 f8a2 	bl	800efa4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800ee60:	4601      	mov	r1, r0
 800ee62:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800ee66:	440d      	add	r5, r1
 800ee68:	4629      	mov	r1, r5
 800ee6a:	f000 f9a7 	bl	800f1bc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ee6e:	1bc0      	subs	r0, r0, r7
 800ee70:	4428      	add	r0, r5
 800ee72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee74 <_Control__cdr_deserialize>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	460c      	mov	r4, r1
 800ee78:	b329      	cbz	r1, 800eec6 <_Control__cdr_deserialize+0x52>
 800ee7a:	4605      	mov	r5, r0
 800ee7c:	f001 f88c 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ee80:	4603      	mov	r3, r0
 800ee82:	4621      	mov	r1, r4
 800ee84:	4628      	mov	r0, r5
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	4798      	blx	r3
 800ee8c:	f001 f884 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ee90:	4603      	mov	r3, r0
 800ee92:	f104 0108 	add.w	r1, r4, #8
 800ee96:	4628      	mov	r0, r5
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	4798      	blx	r3
 800ee9e:	f000 f95b 	bl	800f158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800eea2:	4603      	mov	r3, r0
 800eea4:	f104 0110 	add.w	r1, r4, #16
 800eea8:	4628      	mov	r0, r5
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	4798      	blx	r3
 800eeb0:	f000 fa28 	bl	800f304 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800eeba:	4628      	mov	r0, r5
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	4718      	bx	r3
 800eec6:	4608      	mov	r0, r1
 800eec8:	bd70      	pop	{r4, r5, r6, pc}
 800eeca:	bf00      	nop

0800eecc <_Control__cdr_serialize>:
 800eecc:	b338      	cbz	r0, 800ef1e <_Control__cdr_serialize+0x52>
 800eece:	b570      	push	{r4, r5, r6, lr}
 800eed0:	4604      	mov	r4, r0
 800eed2:	460d      	mov	r5, r1
 800eed4:	f001 f860 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eed8:	4603      	mov	r3, r0
 800eeda:	4629      	mov	r1, r5
 800eedc:	4620      	mov	r0, r4
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	4798      	blx	r3
 800eee4:	f001 f858 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eee8:	4603      	mov	r3, r0
 800eeea:	4629      	mov	r1, r5
 800eeec:	f104 0008 	add.w	r0, r4, #8
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	4798      	blx	r3
 800eef6:	f000 f92f 	bl	800f158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800eefa:	4603      	mov	r3, r0
 800eefc:	4629      	mov	r1, r5
 800eefe:	f104 0010 	add.w	r0, r4, #16
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	4798      	blx	r3
 800ef08:	f000 f9fc 	bl	800f304 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	4629      	mov	r1, r5
 800ef10:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	4718      	bx	r3
 800ef1e:	4770      	bx	lr

0800ef20 <_Control__get_serialized_size>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4604      	mov	r4, r0
 800ef24:	b1b8      	cbz	r0, 800ef56 <_Control__get_serialized_size+0x36>
 800ef26:	2100      	movs	r1, #0
 800ef28:	f000 ffd2 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800ef2c:	4605      	mov	r5, r0
 800ef2e:	f104 0008 	add.w	r0, r4, #8
 800ef32:	4629      	mov	r1, r5
 800ef34:	f000 ffcc 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800ef38:	4601      	mov	r1, r0
 800ef3a:	f104 0010 	add.w	r0, r4, #16
 800ef3e:	440d      	add	r5, r1
 800ef40:	4629      	mov	r1, r5
 800ef42:	f000 f82f 	bl	800efa4 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800ef46:	4601      	mov	r1, r0
 800ef48:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800ef4c:	440d      	add	r5, r1
 800ef4e:	4629      	mov	r1, r5
 800ef50:	f000 f934 	bl	800f1bc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ef54:	4428      	add	r0, r5
 800ef56:	bd38      	pop	{r3, r4, r5, pc}

0800ef58 <_Control__max_serialized_size>:
 800ef58:	b530      	push	{r4, r5, lr}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	2100      	movs	r1, #0
 800ef60:	f10d 0007 	add.w	r0, sp, #7
 800ef64:	f88d 3007 	strb.w	r3, [sp, #7]
 800ef68:	f001 f802 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	f10d 0007 	add.w	r0, sp, #7
 800ef72:	4621      	mov	r1, r4
 800ef74:	f000 fffc 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800ef78:	4605      	mov	r5, r0
 800ef7a:	f10d 0007 	add.w	r0, sp, #7
 800ef7e:	4425      	add	r5, r4
 800ef80:	4629      	mov	r1, r5
 800ef82:	f000 f8c7 	bl	800f114 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 800ef86:	4604      	mov	r4, r0
 800ef88:	f10d 0007 	add.w	r0, sp, #7
 800ef8c:	442c      	add	r4, r5
 800ef8e:	4621      	mov	r1, r4
 800ef90:	f000 f980 	bl	800f294 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ef94:	4420      	add	r0, r4
 800ef96:	b003      	add	sp, #12
 800ef98:	bd30      	pop	{r4, r5, pc}
 800ef9a:	bf00      	nop

0800ef9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800ef9c:	4800      	ldr	r0, [pc, #0]	@ (800efa0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 800ef9e:	4770      	bx	lr
 800efa0:	2400040c 	.word	0x2400040c

0800efa4 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 800efa4:	b5b0      	push	{r4, r5, r7, lr}
 800efa6:	4604      	mov	r4, r0
 800efa8:	b1f0      	cbz	r0, 800efe8 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 800efaa:	460d      	mov	r5, r1
 800efac:	f000 ff90 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800efb0:	4607      	mov	r7, r0
 800efb2:	f104 0008 	add.w	r0, r4, #8
 800efb6:	442f      	add	r7, r5
 800efb8:	f1c5 0501 	rsb	r5, r5, #1
 800efbc:	4639      	mov	r1, r7
 800efbe:	f000 ff87 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800efc2:	4407      	add	r7, r0
 800efc4:	2104      	movs	r1, #4
 800efc6:	4638      	mov	r0, r7
 800efc8:	f001 fea8 	bl	8010d1c <ucdr_alignment>
 800efcc:	2104      	movs	r1, #4
 800efce:	1844      	adds	r4, r0, r1
 800efd0:	443c      	add	r4, r7
 800efd2:	4620      	mov	r0, r4
 800efd4:	f001 fea2 	bl	8010d1c <ucdr_alignment>
 800efd8:	3004      	adds	r0, #4
 800efda:	2101      	movs	r1, #1
 800efdc:	4404      	add	r4, r0
 800efde:	4620      	mov	r0, r4
 800efe0:	f001 fe9c 	bl	8010d1c <ucdr_alignment>
 800efe4:	4428      	add	r0, r5
 800efe6:	4420      	add	r0, r4
 800efe8:	bdb0      	pop	{r4, r5, r7, pc}
 800efea:	bf00      	nop

0800efec <_Lateral__cdr_deserialize>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	460c      	mov	r4, r1
 800eff0:	b311      	cbz	r1, 800f038 <_Lateral__cdr_deserialize+0x4c>
 800eff2:	4605      	mov	r5, r0
 800eff4:	f000 ffd0 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eff8:	4603      	mov	r3, r0
 800effa:	4621      	mov	r1, r4
 800effc:	4628      	mov	r0, r5
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	4798      	blx	r3
 800f004:	f000 ffc8 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f008:	4603      	mov	r3, r0
 800f00a:	f104 0108 	add.w	r1, r4, #8
 800f00e:	4628      	mov	r0, r5
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	4798      	blx	r3
 800f016:	f104 0110 	add.w	r1, r4, #16
 800f01a:	4628      	mov	r0, r5
 800f01c:	f001 fc30 	bl	8010880 <ucdr_deserialize_float>
 800f020:	f104 0114 	add.w	r1, r4, #20
 800f024:	4628      	mov	r0, r5
 800f026:	f001 fc2b 	bl	8010880 <ucdr_deserialize_float>
 800f02a:	f104 0118 	add.w	r1, r4, #24
 800f02e:	4628      	mov	r0, r5
 800f030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f034:	f000 bfca 	b.w	800ffcc <ucdr_deserialize_bool>
 800f038:	4608      	mov	r0, r1
 800f03a:	bd38      	pop	{r3, r4, r5, pc}

0800f03c <_Lateral__cdr_serialize>:
 800f03c:	b318      	cbz	r0, 800f086 <_Lateral__cdr_serialize+0x4a>
 800f03e:	b538      	push	{r3, r4, r5, lr}
 800f040:	4604      	mov	r4, r0
 800f042:	460d      	mov	r5, r1
 800f044:	f000 ffa8 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f048:	4603      	mov	r3, r0
 800f04a:	4629      	mov	r1, r5
 800f04c:	4620      	mov	r0, r4
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	4798      	blx	r3
 800f054:	f000 ffa0 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f058:	4603      	mov	r3, r0
 800f05a:	4629      	mov	r1, r5
 800f05c:	f104 0008 	add.w	r0, r4, #8
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	4798      	blx	r3
 800f066:	ed94 0a04 	vldr	s0, [r4, #16]
 800f06a:	4628      	mov	r0, r5
 800f06c:	f001 fb70 	bl	8010750 <ucdr_serialize_float>
 800f070:	ed94 0a05 	vldr	s0, [r4, #20]
 800f074:	4628      	mov	r0, r5
 800f076:	f001 fb6b 	bl	8010750 <ucdr_serialize_float>
 800f07a:	7e21      	ldrb	r1, [r4, #24]
 800f07c:	4628      	mov	r0, r5
 800f07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f082:	f000 bf8d 	b.w	800ffa0 <ucdr_serialize_bool>
 800f086:	4770      	bx	lr

0800f088 <_Lateral__get_serialized_size>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4604      	mov	r4, r0
 800f08c:	b1d8      	cbz	r0, 800f0c6 <_Lateral__get_serialized_size+0x3e>
 800f08e:	2100      	movs	r1, #0
 800f090:	f000 ff1e 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f094:	4605      	mov	r5, r0
 800f096:	f104 0008 	add.w	r0, r4, #8
 800f09a:	4629      	mov	r1, r5
 800f09c:	f000 ff18 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f0a0:	4405      	add	r5, r0
 800f0a2:	2104      	movs	r1, #4
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f001 fe39 	bl	8010d1c <ucdr_alignment>
 800f0aa:	2104      	movs	r1, #4
 800f0ac:	4408      	add	r0, r1
 800f0ae:	1944      	adds	r4, r0, r5
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f001 fe33 	bl	8010d1c <ucdr_alignment>
 800f0b6:	3004      	adds	r0, #4
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	4404      	add	r4, r0
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f001 fe2d 	bl	8010d1c <ucdr_alignment>
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	4420      	add	r0, r4
 800f0c6:	bd38      	pop	{r3, r4, r5, pc}

0800f0c8 <_Lateral__max_serialized_size>:
 800f0c8:	b530      	push	{r4, r5, lr}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	2501      	movs	r5, #1
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	f10d 0007 	add.w	r0, sp, #7
 800f0d4:	f88d 5007 	strb.w	r5, [sp, #7]
 800f0d8:	f000 ff4a 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f0dc:	4604      	mov	r4, r0
 800f0de:	f10d 0007 	add.w	r0, sp, #7
 800f0e2:	4621      	mov	r1, r4
 800f0e4:	f000 ff44 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f0e8:	4404      	add	r4, r0
 800f0ea:	2104      	movs	r1, #4
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f001 fe15 	bl	8010d1c <ucdr_alignment>
 800f0f2:	2104      	movs	r1, #4
 800f0f4:	4408      	add	r0, r1
 800f0f6:	4404      	add	r4, r0
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f001 fe0f 	bl	8010d1c <ucdr_alignment>
 800f0fe:	3004      	adds	r0, #4
 800f100:	4629      	mov	r1, r5
 800f102:	4404      	add	r4, r0
 800f104:	4620      	mov	r0, r4
 800f106:	f001 fe09 	bl	8010d1c <ucdr_alignment>
 800f10a:	4428      	add	r0, r5
 800f10c:	4420      	add	r0, r4
 800f10e:	b003      	add	sp, #12
 800f110:	bd30      	pop	{r4, r5, pc}
 800f112:	bf00      	nop

0800f114 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 800f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f116:	2701      	movs	r7, #1
 800f118:	460c      	mov	r4, r1
 800f11a:	4606      	mov	r6, r0
 800f11c:	7007      	strb	r7, [r0, #0]
 800f11e:	f000 ff27 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f122:	4605      	mov	r5, r0
 800f124:	4630      	mov	r0, r6
 800f126:	4425      	add	r5, r4
 800f128:	1b3c      	subs	r4, r7, r4
 800f12a:	4629      	mov	r1, r5
 800f12c:	f000 ff20 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f130:	4405      	add	r5, r0
 800f132:	2104      	movs	r1, #4
 800f134:	4628      	mov	r0, r5
 800f136:	f001 fdf1 	bl	8010d1c <ucdr_alignment>
 800f13a:	2104      	movs	r1, #4
 800f13c:	4408      	add	r0, r1
 800f13e:	4405      	add	r5, r0
 800f140:	4628      	mov	r0, r5
 800f142:	f001 fdeb 	bl	8010d1c <ucdr_alignment>
 800f146:	3004      	adds	r0, #4
 800f148:	4639      	mov	r1, r7
 800f14a:	4405      	add	r5, r0
 800f14c:	4628      	mov	r0, r5
 800f14e:	f001 fde5 	bl	8010d1c <ucdr_alignment>
 800f152:	4420      	add	r0, r4
 800f154:	4428      	add	r0, r5
 800f156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800f158:	4800      	ldr	r0, [pc, #0]	@ (800f15c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 800f15a:	4770      	bx	lr
 800f15c:	24000434 	.word	0x24000434

0800f160 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	460c      	mov	r4, r1
 800f164:	4606      	mov	r6, r0
 800f166:	f000 feb3 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f16a:	4605      	mov	r5, r0
 800f16c:	f106 0008 	add.w	r0, r6, #8
 800f170:	4425      	add	r5, r4
 800f172:	f1c4 0401 	rsb	r4, r4, #1
 800f176:	4629      	mov	r1, r5
 800f178:	f000 feaa 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f17c:	4405      	add	r5, r0
 800f17e:	2104      	movs	r1, #4
 800f180:	4628      	mov	r0, r5
 800f182:	f001 fdcb 	bl	8010d1c <ucdr_alignment>
 800f186:	2104      	movs	r1, #4
 800f188:	4408      	add	r0, r1
 800f18a:	4405      	add	r5, r0
 800f18c:	4628      	mov	r0, r5
 800f18e:	f001 fdc5 	bl	8010d1c <ucdr_alignment>
 800f192:	2104      	movs	r1, #4
 800f194:	4408      	add	r0, r1
 800f196:	1946      	adds	r6, r0, r5
 800f198:	4630      	mov	r0, r6
 800f19a:	f001 fdbf 	bl	8010d1c <ucdr_alignment>
 800f19e:	1d05      	adds	r5, r0, #4
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	4435      	add	r5, r6
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f001 fdb9 	bl	8010d1c <ucdr_alignment>
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	4408      	add	r0, r1
 800f1ae:	4405      	add	r5, r0
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f001 fdb3 	bl	8010d1c <ucdr_alignment>
 800f1b6:	4420      	add	r0, r4
 800f1b8:	4428      	add	r0, r5
 800f1ba:	bd70      	pop	{r4, r5, r6, pc}

0800f1bc <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800f1bc:	b108      	cbz	r0, 800f1c2 <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 800f1be:	f7ff bfcf 	b.w	800f160 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800f1c2:	4770      	bx	lr

0800f1c4 <_Longitudinal__get_serialized_size>:
 800f1c4:	b110      	cbz	r0, 800f1cc <_Longitudinal__get_serialized_size+0x8>
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	f7ff bfca 	b.w	800f160 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop

0800f1d0 <_Longitudinal__cdr_deserialize>:
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	b361      	cbz	r1, 800f230 <_Longitudinal__cdr_deserialize+0x60>
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	f000 fede 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4621      	mov	r1, r4
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	4798      	blx	r3
 800f1e8:	f000 fed6 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	f104 0108 	add.w	r1, r4, #8
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	4798      	blx	r3
 800f1fa:	f104 0110 	add.w	r1, r4, #16
 800f1fe:	4628      	mov	r0, r5
 800f200:	f001 fb3e 	bl	8010880 <ucdr_deserialize_float>
 800f204:	f104 0114 	add.w	r1, r4, #20
 800f208:	4628      	mov	r0, r5
 800f20a:	f001 fb39 	bl	8010880 <ucdr_deserialize_float>
 800f20e:	f104 0118 	add.w	r1, r4, #24
 800f212:	4628      	mov	r0, r5
 800f214:	f001 fb34 	bl	8010880 <ucdr_deserialize_float>
 800f218:	f104 011c 	add.w	r1, r4, #28
 800f21c:	4628      	mov	r0, r5
 800f21e:	f000 fed5 	bl	800ffcc <ucdr_deserialize_bool>
 800f222:	f104 011d 	add.w	r1, r4, #29
 800f226:	4628      	mov	r0, r5
 800f228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f22c:	f000 bece 	b.w	800ffcc <ucdr_deserialize_bool>
 800f230:	4608      	mov	r0, r1
 800f232:	bd38      	pop	{r3, r4, r5, pc}

0800f234 <_Longitudinal__cdr_serialize>:
 800f234:	b360      	cbz	r0, 800f290 <_Longitudinal__cdr_serialize+0x5c>
 800f236:	b538      	push	{r3, r4, r5, lr}
 800f238:	4604      	mov	r4, r0
 800f23a:	460d      	mov	r5, r1
 800f23c:	f000 feac 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f240:	4603      	mov	r3, r0
 800f242:	4629      	mov	r1, r5
 800f244:	4620      	mov	r0, r4
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	4798      	blx	r3
 800f24c:	f000 fea4 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f250:	4603      	mov	r3, r0
 800f252:	4629      	mov	r1, r5
 800f254:	f104 0008 	add.w	r0, r4, #8
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	4798      	blx	r3
 800f25e:	ed94 0a04 	vldr	s0, [r4, #16]
 800f262:	4628      	mov	r0, r5
 800f264:	f001 fa74 	bl	8010750 <ucdr_serialize_float>
 800f268:	ed94 0a05 	vldr	s0, [r4, #20]
 800f26c:	4628      	mov	r0, r5
 800f26e:	f001 fa6f 	bl	8010750 <ucdr_serialize_float>
 800f272:	ed94 0a06 	vldr	s0, [r4, #24]
 800f276:	4628      	mov	r0, r5
 800f278:	f001 fa6a 	bl	8010750 <ucdr_serialize_float>
 800f27c:	7f21      	ldrb	r1, [r4, #28]
 800f27e:	4628      	mov	r0, r5
 800f280:	f000 fe8e 	bl	800ffa0 <ucdr_serialize_bool>
 800f284:	7f61      	ldrb	r1, [r4, #29]
 800f286:	4628      	mov	r0, r5
 800f288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f28c:	f000 be88 	b.w	800ffa0 <ucdr_serialize_bool>
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop

0800f294 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f296:	2701      	movs	r7, #1
 800f298:	460c      	mov	r4, r1
 800f29a:	4606      	mov	r6, r0
 800f29c:	7007      	strb	r7, [r0, #0]
 800f29e:	f000 fe67 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f2a2:	4605      	mov	r5, r0
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	4425      	add	r5, r4
 800f2a8:	1b3c      	subs	r4, r7, r4
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	f000 fe60 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f2b0:	4405      	add	r5, r0
 800f2b2:	2104      	movs	r1, #4
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	f001 fd31 	bl	8010d1c <ucdr_alignment>
 800f2ba:	2104      	movs	r1, #4
 800f2bc:	4408      	add	r0, r1
 800f2be:	4405      	add	r5, r0
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	f001 fd2b 	bl	8010d1c <ucdr_alignment>
 800f2c6:	2104      	movs	r1, #4
 800f2c8:	4408      	add	r0, r1
 800f2ca:	1946      	adds	r6, r0, r5
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f001 fd25 	bl	8010d1c <ucdr_alignment>
 800f2d2:	1d05      	adds	r5, r0, #4
 800f2d4:	4639      	mov	r1, r7
 800f2d6:	4435      	add	r5, r6
 800f2d8:	4628      	mov	r0, r5
 800f2da:	f001 fd1f 	bl	8010d1c <ucdr_alignment>
 800f2de:	4438      	add	r0, r7
 800f2e0:	4639      	mov	r1, r7
 800f2e2:	4405      	add	r5, r0
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f001 fd19 	bl	8010d1c <ucdr_alignment>
 800f2ea:	4420      	add	r0, r4
 800f2ec:	4428      	add	r0, r5
 800f2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f2f0 <_Longitudinal__max_serialized_size>:
 800f2f0:	b500      	push	{lr}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	f10d 0007 	add.w	r0, sp, #7
 800f2fa:	f7ff ffcb 	bl	800f294 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800f2fe:	b003      	add	sp, #12
 800f300:	f85d fb04 	ldr.w	pc, [sp], #4

0800f304 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800f304:	4800      	ldr	r0, [pc, #0]	@ (800f308 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 800f306:	4770      	bx	lr
 800f308:	2400045c 	.word	0x2400045c

0800f30c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f30c:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 800f30e:	4805      	ldr	r0, [pc, #20]	@ (800f324 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4905      	ldr	r1, [pc, #20]	@ (800f328 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 800f314:	4a05      	ldr	r2, [pc, #20]	@ (800f32c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f316:	6003      	str	r3, [r0, #0]
 800f318:	600b      	str	r3, [r1, #0]
 800f31a:	6013      	str	r3, [r2, #0]
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	24000e0c 	.word	0x24000e0c
 800f324:	240004a8 	.word	0x240004a8
 800f328:	240004b4 	.word	0x240004b4
 800f32c:	2400048c 	.word	0x2400048c

0800f330 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800f330:	4a02      	ldr	r2, [pc, #8]	@ (800f33c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 800f332:	4b03      	ldr	r3, [pc, #12]	@ (800f340 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 800f334:	6812      	ldr	r2, [r2, #0]
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	24000e0c 	.word	0x24000e0c
 800f340:	240004c8 	.word	0x240004c8

0800f344 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800f344:	4a02      	ldr	r2, [pc, #8]	@ (800f350 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 800f346:	4b03      	ldr	r3, [pc, #12]	@ (800f354 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 800f348:	6812      	ldr	r2, [r2, #0]
 800f34a:	601a      	str	r2, [r3, #0]
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	24000e0c 	.word	0x24000e0c
 800f354:	240004dc 	.word	0x240004dc

0800f358 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800f358:	4a02      	ldr	r2, [pc, #8]	@ (800f364 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 800f35a:	4b03      	ldr	r3, [pc, #12]	@ (800f368 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 800f35c:	6812      	ldr	r2, [r2, #0]
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	24000e0c 	.word	0x24000e0c
 800f368:	240004f0 	.word	0x240004f0

0800f36c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f36c:	4a02      	ldr	r2, [pc, #8]	@ (800f378 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 800f36e:	4b03      	ldr	r3, [pc, #12]	@ (800f37c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 800f370:	6812      	ldr	r2, [r2, #0]
 800f372:	601a      	str	r2, [r3, #0]
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	24000e0c 	.word	0x24000e0c
 800f37c:	24000504 	.word	0x24000504

0800f380 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f380:	4a02      	ldr	r2, [pc, #8]	@ (800f38c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 800f382:	4b03      	ldr	r3, [pc, #12]	@ (800f390 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 800f384:	6812      	ldr	r2, [r2, #0]
 800f386:	601a      	str	r2, [r3, #0]
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	24000e0c 	.word	0x24000e0c
 800f390:	24000518 	.word	0x24000518

0800f394 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800f394:	4a02      	ldr	r2, [pc, #8]	@ (800f3a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 800f396:	4b03      	ldr	r3, [pc, #12]	@ (800f3a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 800f398:	6812      	ldr	r2, [r2, #0]
 800f39a:	601a      	str	r2, [r3, #0]
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	24000e0c 	.word	0x24000e0c
 800f3a4:	2400052c 	.word	0x2400052c

0800f3a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f3a8:	4a02      	ldr	r2, [pc, #8]	@ (800f3b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 800f3aa:	4b03      	ldr	r3, [pc, #12]	@ (800f3b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 800f3ac:	6812      	ldr	r2, [r2, #0]
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	24000e0c 	.word	0x24000e0c
 800f3b8:	24000540 	.word	0x24000540

0800f3bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f3bc:	4a02      	ldr	r2, [pc, #8]	@ (800f3c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 800f3be:	4b03      	ldr	r3, [pc, #12]	@ (800f3cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 800f3c0:	6812      	ldr	r2, [r2, #0]
 800f3c2:	601a      	str	r2, [r3, #0]
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	24000e0c 	.word	0x24000e0c
 800f3cc:	24000554 	.word	0x24000554

0800f3d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800f3d0:	4a02      	ldr	r2, [pc, #8]	@ (800f3dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 800f3d2:	4b03      	ldr	r3, [pc, #12]	@ (800f3e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 800f3d4:	6812      	ldr	r2, [r2, #0]
 800f3d6:	601a      	str	r2, [r3, #0]
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	24000e0c 	.word	0x24000e0c
 800f3e0:	24000568 	.word	0x24000568

0800f3e4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 800f3e4:	f002 b92e 	b.w	8011644 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0800f3e8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 800f3e8:	f002 b93e 	b.w	8011668 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

0800f3ec <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 800f3ec:	f002 b940 	b.w	8011670 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

0800f3f0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 800f3f0:	f002 b942 	b.w	8011678 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

0800f3f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f3f4:	b508      	push	{r3, lr}
 800f3f6:	f000 fd5d 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f3fa:	4b06      	ldr	r3, [pc, #24]	@ (800f414 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f3fc:	4906      	ldr	r1, [pc, #24]	@ (800f418 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	60c8      	str	r0, [r1, #12]
 800f402:	b10a      	cbz	r2, 800f408 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 800f404:	4803      	ldr	r0, [pc, #12]	@ (800f414 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f406:	bd08      	pop	{r3, pc}
 800f408:	4a04      	ldr	r2, [pc, #16]	@ (800f41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 800f40a:	4802      	ldr	r0, [pc, #8]	@ (800f414 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800f40c:	6812      	ldr	r2, [r2, #0]
 800f40e:	601a      	str	r2, [r3, #0]
 800f410:	bd08      	pop	{r3, pc}
 800f412:	bf00      	nop
 800f414:	240005ec 	.word	0x240005ec
 800f418:	24000574 	.word	0x24000574
 800f41c:	24000e10 	.word	0x24000e10

0800f420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800f420:	4b04      	ldr	r3, [pc, #16]	@ (800f434 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	b10a      	cbz	r2, 800f42a <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 800f426:	4803      	ldr	r0, [pc, #12]	@ (800f434 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800f428:	4770      	bx	lr
 800f42a:	4a03      	ldr	r2, [pc, #12]	@ (800f438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 800f42c:	4801      	ldr	r0, [pc, #4]	@ (800f434 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800f42e:	6812      	ldr	r2, [r2, #0]
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	4770      	bx	lr
 800f434:	24000634 	.word	0x24000634
 800f438:	24000e10 	.word	0x24000e10

0800f43c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800f43c:	4b16      	ldr	r3, [pc, #88]	@ (800f498 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	b510      	push	{r4, lr}
 800f442:	b132      	cbz	r2, 800f452 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 800f444:	685c      	ldr	r4, [r3, #4]
 800f446:	68a3      	ldr	r3, [r4, #8]
 800f448:	b153      	cbz	r3, 800f460 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 800f44a:	68e3      	ldr	r3, [r4, #12]
 800f44c:	b1a3      	cbz	r3, 800f478 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 800f44e:	4812      	ldr	r0, [pc, #72]	@ (800f498 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800f450:	bd10      	pop	{r4, pc}
 800f452:	4a12      	ldr	r2, [pc, #72]	@ (800f49c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800f454:	685c      	ldr	r4, [r3, #4]
 800f456:	6812      	ldr	r2, [r2, #0]
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	68a3      	ldr	r3, [r4, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d1f4      	bne.n	800f44a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 800f460:	f000 fd28 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f464:	4b0e      	ldr	r3, [pc, #56]	@ (800f4a0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 800f466:	490f      	ldr	r1, [pc, #60]	@ (800f4a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	60c8      	str	r0, [r1, #12]
 800f46c:	b17a      	cbz	r2, 800f48e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	60a3      	str	r3, [r4, #8]
 800f472:	68e3      	ldr	r3, [r4, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1ea      	bne.n	800f44e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 800f478:	4b0b      	ldr	r3, [pc, #44]	@ (800f4a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	b11a      	cbz	r2, 800f486 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	4805      	ldr	r0, [pc, #20]	@ (800f498 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800f482:	60e3      	str	r3, [r4, #12]
 800f484:	bd10      	pop	{r4, pc}
 800f486:	4a05      	ldr	r2, [pc, #20]	@ (800f49c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800f488:	6812      	ldr	r2, [r2, #0]
 800f48a:	601a      	str	r2, [r3, #0]
 800f48c:	e7f7      	b.n	800f47e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 800f48e:	4a03      	ldr	r2, [pc, #12]	@ (800f49c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800f490:	6812      	ldr	r2, [r2, #0]
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	e7eb      	b.n	800f46e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 800f496:	bf00      	nop
 800f498:	24000650 	.word	0x24000650
 800f49c:	24000e10 	.word	0x24000e10
 800f4a0:	240005ec 	.word	0x240005ec
 800f4a4:	24000574 	.word	0x24000574
 800f4a8:	24000634 	.word	0x24000634

0800f4ac <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 800f4ac:	f002 b8e6 	b.w	801167c <autoware_vehicle_msgs__msg__ControlModeReport__init>

0800f4b0 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 800f4b0:	f002 b8f6 	b.w	80116a0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

0800f4b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800f4b4:	b508      	push	{r3, lr}
 800f4b6:	f000 fcfd 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f4ba:	4b06      	ldr	r3, [pc, #24]	@ (800f4d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800f4bc:	4906      	ldr	r1, [pc, #24]	@ (800f4d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	60c8      	str	r0, [r1, #12]
 800f4c2:	b10a      	cbz	r2, 800f4c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 800f4c4:	4803      	ldr	r0, [pc, #12]	@ (800f4d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800f4c6:	bd08      	pop	{r3, pc}
 800f4c8:	4a04      	ldr	r2, [pc, #16]	@ (800f4dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 800f4ca:	4802      	ldr	r0, [pc, #8]	@ (800f4d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800f4cc:	6812      	ldr	r2, [r2, #0]
 800f4ce:	601a      	str	r2, [r3, #0]
 800f4d0:	bd08      	pop	{r3, pc}
 800f4d2:	bf00      	nop
 800f4d4:	240006d4 	.word	0x240006d4
 800f4d8:	2400065c 	.word	0x2400065c
 800f4dc:	24000e10 	.word	0x24000e10

0800f4e0 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 800f4e0:	f002 b8e2 	b.w	80116a8 <autoware_vehicle_msgs__msg__GearCommand__init>

0800f4e4 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 800f4e4:	f002 b8f2 	b.w	80116cc <autoware_vehicle_msgs__msg__GearCommand__fini>

0800f4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800f4e8:	b508      	push	{r3, lr}
 800f4ea:	f000 fce3 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f4ee:	4b06      	ldr	r3, [pc, #24]	@ (800f508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800f4f0:	4906      	ldr	r1, [pc, #24]	@ (800f50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	60c8      	str	r0, [r1, #12]
 800f4f6:	b10a      	cbz	r2, 800f4fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 800f4f8:	4803      	ldr	r0, [pc, #12]	@ (800f508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800f4fa:	bd08      	pop	{r3, pc}
 800f4fc:	4a04      	ldr	r2, [pc, #16]	@ (800f510 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 800f4fe:	4802      	ldr	r0, [pc, #8]	@ (800f508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800f500:	6812      	ldr	r2, [r2, #0]
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	bd08      	pop	{r3, pc}
 800f506:	bf00      	nop
 800f508:	24000758 	.word	0x24000758
 800f50c:	240006e0 	.word	0x240006e0
 800f510:	24000e10 	.word	0x24000e10

0800f514 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 800f514:	f002 b8de 	b.w	80116d4 <autoware_vehicle_msgs__msg__GearReport__init>

0800f518 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 800f518:	f002 b8ee 	b.w	80116f8 <autoware_vehicle_msgs__msg__GearReport__fini>

0800f51c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800f51c:	b508      	push	{r3, lr}
 800f51e:	f000 fcc9 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f522:	4b06      	ldr	r3, [pc, #24]	@ (800f53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800f524:	4906      	ldr	r1, [pc, #24]	@ (800f540 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	60c8      	str	r0, [r1, #12]
 800f52a:	b10a      	cbz	r2, 800f530 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 800f52c:	4803      	ldr	r0, [pc, #12]	@ (800f53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800f52e:	bd08      	pop	{r3, pc}
 800f530:	4a04      	ldr	r2, [pc, #16]	@ (800f544 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 800f532:	4802      	ldr	r0, [pc, #8]	@ (800f53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800f534:	6812      	ldr	r2, [r2, #0]
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	bd08      	pop	{r3, pc}
 800f53a:	bf00      	nop
 800f53c:	240007dc 	.word	0x240007dc
 800f540:	24000764 	.word	0x24000764
 800f544:	24000e10 	.word	0x24000e10

0800f548 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 800f548:	f002 b8da 	b.w	8011700 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

0800f54c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 800f54c:	f002 b8ea 	b.w	8011724 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

0800f550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f550:	b508      	push	{r3, lr}
 800f552:	f000 fcaf 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f556:	4b06      	ldr	r3, [pc, #24]	@ (800f570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800f558:	4906      	ldr	r1, [pc, #24]	@ (800f574 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	60c8      	str	r0, [r1, #12]
 800f55e:	b10a      	cbz	r2, 800f564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 800f560:	4803      	ldr	r0, [pc, #12]	@ (800f570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800f562:	bd08      	pop	{r3, pc}
 800f564:	4a04      	ldr	r2, [pc, #16]	@ (800f578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 800f566:	4802      	ldr	r0, [pc, #8]	@ (800f570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800f568:	6812      	ldr	r2, [r2, #0]
 800f56a:	601a      	str	r2, [r3, #0]
 800f56c:	bd08      	pop	{r3, pc}
 800f56e:	bf00      	nop
 800f570:	24000860 	.word	0x24000860
 800f574:	240007e8 	.word	0x240007e8
 800f578:	24000e10 	.word	0x24000e10

0800f57c <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 800f57c:	f002 b8d6 	b.w	801172c <autoware_vehicle_msgs__msg__HazardLightsReport__init>

0800f580 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 800f580:	f002 b8e6 	b.w	8011750 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

0800f584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800f584:	b508      	push	{r3, lr}
 800f586:	f000 fc95 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f58a:	4b06      	ldr	r3, [pc, #24]	@ (800f5a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800f58c:	4906      	ldr	r1, [pc, #24]	@ (800f5a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	60c8      	str	r0, [r1, #12]
 800f592:	b10a      	cbz	r2, 800f598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 800f594:	4803      	ldr	r0, [pc, #12]	@ (800f5a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800f596:	bd08      	pop	{r3, pc}
 800f598:	4a04      	ldr	r2, [pc, #16]	@ (800f5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 800f59a:	4802      	ldr	r0, [pc, #8]	@ (800f5a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800f59c:	6812      	ldr	r2, [r2, #0]
 800f59e:	601a      	str	r2, [r3, #0]
 800f5a0:	bd08      	pop	{r3, pc}
 800f5a2:	bf00      	nop
 800f5a4:	240008e4 	.word	0x240008e4
 800f5a8:	2400086c 	.word	0x2400086c
 800f5ac:	24000e10 	.word	0x24000e10

0800f5b0 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 800f5b0:	f002 b8d2 	b.w	8011758 <autoware_vehicle_msgs__msg__SteeringReport__init>

0800f5b4 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 800f5b4:	f002 b8e2 	b.w	801177c <autoware_vehicle_msgs__msg__SteeringReport__fini>

0800f5b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800f5b8:	b508      	push	{r3, lr}
 800f5ba:	f000 fc7b 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f5be:	4b06      	ldr	r3, [pc, #24]	@ (800f5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f5c0:	4906      	ldr	r1, [pc, #24]	@ (800f5dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	60c8      	str	r0, [r1, #12]
 800f5c6:	b10a      	cbz	r2, 800f5cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 800f5c8:	4803      	ldr	r0, [pc, #12]	@ (800f5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f5ca:	bd08      	pop	{r3, pc}
 800f5cc:	4a04      	ldr	r2, [pc, #16]	@ (800f5e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 800f5ce:	4802      	ldr	r0, [pc, #8]	@ (800f5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800f5d0:	6812      	ldr	r2, [r2, #0]
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	bd08      	pop	{r3, pc}
 800f5d6:	bf00      	nop
 800f5d8:	24000968 	.word	0x24000968
 800f5dc:	240008f0 	.word	0x240008f0
 800f5e0:	24000e10 	.word	0x24000e10

0800f5e4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 800f5e4:	f002 b8ce 	b.w	8011784 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0800f5e8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 800f5e8:	f002 b8de 	b.w	80117a8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

0800f5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800f5ec:	b508      	push	{r3, lr}
 800f5ee:	f000 fc61 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f5f2:	4b06      	ldr	r3, [pc, #24]	@ (800f60c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f5f4:	4906      	ldr	r1, [pc, #24]	@ (800f610 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	60c8      	str	r0, [r1, #12]
 800f5fa:	b10a      	cbz	r2, 800f600 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 800f5fc:	4803      	ldr	r0, [pc, #12]	@ (800f60c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f5fe:	bd08      	pop	{r3, pc}
 800f600:	4a04      	ldr	r2, [pc, #16]	@ (800f614 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 800f602:	4802      	ldr	r0, [pc, #8]	@ (800f60c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800f604:	6812      	ldr	r2, [r2, #0]
 800f606:	601a      	str	r2, [r3, #0]
 800f608:	bd08      	pop	{r3, pc}
 800f60a:	bf00      	nop
 800f60c:	240009ec 	.word	0x240009ec
 800f610:	24000974 	.word	0x24000974
 800f614:	24000e10 	.word	0x24000e10

0800f618 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 800f618:	f002 b8ca 	b.w	80117b0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

0800f61c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 800f61c:	f002 b8da 	b.w	80117d4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

0800f620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800f620:	b508      	push	{r3, lr}
 800f622:	f000 fc47 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f626:	4b06      	ldr	r3, [pc, #24]	@ (800f640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f628:	4906      	ldr	r1, [pc, #24]	@ (800f644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	60c8      	str	r0, [r1, #12]
 800f62e:	b10a      	cbz	r2, 800f634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 800f630:	4803      	ldr	r0, [pc, #12]	@ (800f640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f632:	bd08      	pop	{r3, pc}
 800f634:	4a04      	ldr	r2, [pc, #16]	@ (800f648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 800f636:	4802      	ldr	r0, [pc, #8]	@ (800f640 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800f638:	6812      	ldr	r2, [r2, #0]
 800f63a:	601a      	str	r2, [r3, #0]
 800f63c:	bd08      	pop	{r3, pc}
 800f63e:	bf00      	nop
 800f640:	24000a70 	.word	0x24000a70
 800f644:	240009f8 	.word	0x240009f8
 800f648:	24000e10 	.word	0x24000e10

0800f64c <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 800f64c:	f002 b8c6 	b.w	80117dc <autoware_vehicle_msgs__msg__VelocityReport__init>

0800f650 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 800f650:	f002 b8d6 	b.w	8011800 <autoware_vehicle_msgs__msg__VelocityReport__fini>

0800f654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800f654:	b508      	push	{r3, lr}
 800f656:	f001 fc57 	bl	8010f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f65a:	4b06      	ldr	r3, [pc, #24]	@ (800f674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f65c:	4906      	ldr	r1, [pc, #24]	@ (800f678 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	60c8      	str	r0, [r1, #12]
 800f662:	b10a      	cbz	r2, 800f668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 800f664:	4803      	ldr	r0, [pc, #12]	@ (800f674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f666:	bd08      	pop	{r3, pc}
 800f668:	4a04      	ldr	r2, [pc, #16]	@ (800f67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 800f66a:	4802      	ldr	r0, [pc, #8]	@ (800f674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800f66c:	6812      	ldr	r2, [r2, #0]
 800f66e:	601a      	str	r2, [r3, #0]
 800f670:	bd08      	pop	{r3, pc}
 800f672:	bf00      	nop
 800f674:	24000b6c 	.word	0x24000b6c
 800f678:	24000a7c 	.word	0x24000a7c
 800f67c:	24000e10 	.word	0x24000e10

0800f680 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f680:	4800      	ldr	r0, [pc, #0]	@ (800f684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 800f682:	4770      	bx	lr
 800f684:	24000b94 	.word	0x24000b94

0800f688 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800f688:	4800      	ldr	r0, [pc, #0]	@ (800f68c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 800f68a:	4770      	bx	lr
 800f68c:	24000ba0 	.word	0x24000ba0

0800f690 <_ControlModeCommand_Response__max_serialized_size>:
 800f690:	2101      	movs	r1, #1
 800f692:	2000      	movs	r0, #0
 800f694:	b508      	push	{r3, lr}
 800f696:	f001 fb41 	bl	8010d1c <ucdr_alignment>
 800f69a:	3001      	adds	r0, #1
 800f69c:	bd08      	pop	{r3, pc}
 800f69e:	bf00      	nop

0800f6a0 <_ControlModeCommand_Response__cdr_deserialize>:
 800f6a0:	b109      	cbz	r1, 800f6a6 <_ControlModeCommand_Response__cdr_deserialize+0x6>
 800f6a2:	f000 bc93 	b.w	800ffcc <ucdr_deserialize_bool>
 800f6a6:	4608      	mov	r0, r1
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop

0800f6ac <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	b158      	cbz	r0, 800f6c8 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 800f6b0:	460d      	mov	r5, r1
 800f6b2:	f000 fc0d 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f6b6:	2101      	movs	r1, #1
 800f6b8:	182c      	adds	r4, r5, r0
 800f6ba:	f1c5 0501 	rsb	r5, r5, #1
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f001 fb2c 	bl	8010d1c <ucdr_alignment>
 800f6c4:	4428      	add	r0, r5
 800f6c6:	4420      	add	r0, r4
 800f6c8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ca:	bf00      	nop

0800f6cc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800f6cc:	b138      	cbz	r0, 800f6de <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 800f6ce:	b508      	push	{r3, lr}
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	2101      	movs	r1, #1
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f001 fb21 	bl	8010d1c <ucdr_alignment>
 800f6da:	3001      	adds	r0, #1
 800f6dc:	bd08      	pop	{r3, pc}
 800f6de:	4770      	bx	lr

0800f6e0 <_ControlModeCommand_Request__cdr_deserialize>:
 800f6e0:	b538      	push	{r3, r4, r5, lr}
 800f6e2:	460c      	mov	r4, r1
 800f6e4:	b179      	cbz	r1, 800f706 <_ControlModeCommand_Request__cdr_deserialize+0x26>
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	f000 fc56 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	4798      	blx	r3
 800f6f8:	f104 0108 	add.w	r1, r4, #8
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f702:	f000 bc91 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800f706:	4608      	mov	r0, r1
 800f708:	bd38      	pop	{r3, r4, r5, pc}
 800f70a:	bf00      	nop

0800f70c <_ControlModeCommand_Request__cdr_serialize>:
 800f70c:	b180      	cbz	r0, 800f730 <_ControlModeCommand_Request__cdr_serialize+0x24>
 800f70e:	b538      	push	{r3, r4, r5, lr}
 800f710:	4604      	mov	r4, r0
 800f712:	460d      	mov	r5, r1
 800f714:	f000 fc40 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f718:	4603      	mov	r3, r0
 800f71a:	4629      	mov	r1, r5
 800f71c:	4620      	mov	r0, r4
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	4798      	blx	r3
 800f724:	7a21      	ldrb	r1, [r4, #8]
 800f726:	4628      	mov	r0, r5
 800f728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72c:	f000 bc66 	b.w	800fffc <ucdr_serialize_uint8_t>
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop

0800f734 <_ControlModeCommand_Response__cdr_serialize>:
 800f734:	460a      	mov	r2, r1
 800f736:	b118      	cbz	r0, 800f740 <_ControlModeCommand_Response__cdr_serialize+0xc>
 800f738:	7801      	ldrb	r1, [r0, #0]
 800f73a:	4610      	mov	r0, r2
 800f73c:	f000 bc30 	b.w	800ffa0 <ucdr_serialize_bool>
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop

0800f744 <_ControlModeCommand_Response__get_serialized_size>:
 800f744:	b130      	cbz	r0, 800f754 <_ControlModeCommand_Response__get_serialized_size+0x10>
 800f746:	2101      	movs	r1, #1
 800f748:	2000      	movs	r0, #0
 800f74a:	b508      	push	{r3, lr}
 800f74c:	f001 fae6 	bl	8010d1c <ucdr_alignment>
 800f750:	3001      	adds	r0, #1
 800f752:	bd08      	pop	{r3, pc}
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop

0800f758 <_ControlModeCommand_Request__get_serialized_size>:
 800f758:	b150      	cbz	r0, 800f770 <_ControlModeCommand_Request__get_serialized_size+0x18>
 800f75a:	2100      	movs	r1, #0
 800f75c:	b510      	push	{r4, lr}
 800f75e:	f000 fbb7 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f762:	4604      	mov	r4, r0
 800f764:	2101      	movs	r1, #1
 800f766:	f001 fad9 	bl	8010d1c <ucdr_alignment>
 800f76a:	4420      	add	r0, r4
 800f76c:	3001      	adds	r0, #1
 800f76e:	bd10      	pop	{r4, pc}
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop

0800f774 <_ControlModeCommand_Request__max_serialized_size>:
 800f774:	b510      	push	{r4, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	2401      	movs	r4, #1
 800f77a:	2100      	movs	r1, #0
 800f77c:	f10d 0007 	add.w	r0, sp, #7
 800f780:	f88d 4007 	strb.w	r4, [sp, #7]
 800f784:	f000 fbf4 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f788:	4621      	mov	r1, r4
 800f78a:	4604      	mov	r4, r0
 800f78c:	f001 fac6 	bl	8010d1c <ucdr_alignment>
 800f790:	4420      	add	r0, r4
 800f792:	3001      	adds	r0, #1
 800f794:	b002      	add	sp, #8
 800f796:	bd10      	pop	{r4, pc}

0800f798 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800f798:	4800      	ldr	r0, [pc, #0]	@ (800f79c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 800f79a:	4770      	bx	lr
 800f79c:	24000b88 	.word	0x24000b88

0800f7a0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 800f7a0:	b538      	push	{r3, r4, r5, lr}
 800f7a2:	b158      	cbz	r0, 800f7bc <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 800f7a4:	460d      	mov	r5, r1
 800f7a6:	f000 fb93 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f7aa:	2101      	movs	r1, #1
 800f7ac:	182c      	adds	r4, r5, r0
 800f7ae:	f1c5 0501 	rsb	r5, r5, #1
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f001 fab2 	bl	8010d1c <ucdr_alignment>
 800f7b8:	4428      	add	r0, r5
 800f7ba:	4420      	add	r0, r4
 800f7bc:	bd38      	pop	{r3, r4, r5, pc}
 800f7be:	bf00      	nop

0800f7c0 <_ControlModeReport__cdr_deserialize>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	b179      	cbz	r1, 800f7e6 <_ControlModeReport__cdr_deserialize+0x26>
 800f7c6:	4605      	mov	r5, r0
 800f7c8:	f000 fbe6 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	68db      	ldr	r3, [r3, #12]
 800f7d6:	4798      	blx	r3
 800f7d8:	f104 0108 	add.w	r1, r4, #8
 800f7dc:	4628      	mov	r0, r5
 800f7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7e2:	f000 bc21 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ea:	bf00      	nop

0800f7ec <_ControlModeReport__cdr_serialize>:
 800f7ec:	b180      	cbz	r0, 800f810 <_ControlModeReport__cdr_serialize+0x24>
 800f7ee:	b538      	push	{r3, r4, r5, lr}
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	460d      	mov	r5, r1
 800f7f4:	f000 fbd0 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	4798      	blx	r3
 800f804:	7a21      	ldrb	r1, [r4, #8]
 800f806:	4628      	mov	r0, r5
 800f808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f80c:	f000 bbf6 	b.w	800fffc <ucdr_serialize_uint8_t>
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop

0800f814 <_ControlModeReport__get_serialized_size>:
 800f814:	b150      	cbz	r0, 800f82c <_ControlModeReport__get_serialized_size+0x18>
 800f816:	2100      	movs	r1, #0
 800f818:	b510      	push	{r4, lr}
 800f81a:	f000 fb59 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f81e:	4604      	mov	r4, r0
 800f820:	2101      	movs	r1, #1
 800f822:	f001 fa7b 	bl	8010d1c <ucdr_alignment>
 800f826:	4420      	add	r0, r4
 800f828:	3001      	adds	r0, #1
 800f82a:	bd10      	pop	{r4, pc}
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop

0800f830 <_ControlModeReport__max_serialized_size>:
 800f830:	b510      	push	{r4, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	2401      	movs	r4, #1
 800f836:	2100      	movs	r1, #0
 800f838:	f10d 0007 	add.w	r0, sp, #7
 800f83c:	f88d 4007 	strb.w	r4, [sp, #7]
 800f840:	f000 fb96 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f844:	4621      	mov	r1, r4
 800f846:	4604      	mov	r4, r0
 800f848:	f001 fa68 	bl	8010d1c <ucdr_alignment>
 800f84c:	4420      	add	r0, r4
 800f84e:	3001      	adds	r0, #1
 800f850:	b002      	add	sp, #8
 800f852:	bd10      	pop	{r4, pc}

0800f854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800f854:	4800      	ldr	r0, [pc, #0]	@ (800f858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 800f856:	4770      	bx	lr
 800f858:	24000be4 	.word	0x24000be4

0800f85c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	b158      	cbz	r0, 800f878 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 800f860:	460d      	mov	r5, r1
 800f862:	f000 fb35 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f866:	2101      	movs	r1, #1
 800f868:	182c      	adds	r4, r5, r0
 800f86a:	f1c5 0501 	rsb	r5, r5, #1
 800f86e:	4620      	mov	r0, r4
 800f870:	f001 fa54 	bl	8010d1c <ucdr_alignment>
 800f874:	4428      	add	r0, r5
 800f876:	4420      	add	r0, r4
 800f878:	bd38      	pop	{r3, r4, r5, pc}
 800f87a:	bf00      	nop

0800f87c <_GearCommand__cdr_deserialize>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	460c      	mov	r4, r1
 800f880:	b179      	cbz	r1, 800f8a2 <_GearCommand__cdr_deserialize+0x26>
 800f882:	4605      	mov	r5, r0
 800f884:	f000 fb88 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f888:	4603      	mov	r3, r0
 800f88a:	4621      	mov	r1, r4
 800f88c:	4628      	mov	r0, r5
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	4798      	blx	r3
 800f894:	f104 0108 	add.w	r1, r4, #8
 800f898:	4628      	mov	r0, r5
 800f89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f89e:	f000 bbc3 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800f8a2:	4608      	mov	r0, r1
 800f8a4:	bd38      	pop	{r3, r4, r5, pc}
 800f8a6:	bf00      	nop

0800f8a8 <_GearCommand__cdr_serialize>:
 800f8a8:	b180      	cbz	r0, 800f8cc <_GearCommand__cdr_serialize+0x24>
 800f8aa:	b538      	push	{r3, r4, r5, lr}
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	460d      	mov	r5, r1
 800f8b0:	f000 fb72 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	4798      	blx	r3
 800f8c0:	7a21      	ldrb	r1, [r4, #8]
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8c8:	f000 bb98 	b.w	800fffc <ucdr_serialize_uint8_t>
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop

0800f8d0 <_GearCommand__get_serialized_size>:
 800f8d0:	b150      	cbz	r0, 800f8e8 <_GearCommand__get_serialized_size+0x18>
 800f8d2:	2100      	movs	r1, #0
 800f8d4:	b510      	push	{r4, lr}
 800f8d6:	f000 fafb 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f8da:	4604      	mov	r4, r0
 800f8dc:	2101      	movs	r1, #1
 800f8de:	f001 fa1d 	bl	8010d1c <ucdr_alignment>
 800f8e2:	4420      	add	r0, r4
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	bd10      	pop	{r4, pc}
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop

0800f8ec <_GearCommand__max_serialized_size>:
 800f8ec:	b510      	push	{r4, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	2401      	movs	r4, #1
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	f10d 0007 	add.w	r0, sp, #7
 800f8f8:	f88d 4007 	strb.w	r4, [sp, #7]
 800f8fc:	f000 fb38 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f900:	4621      	mov	r1, r4
 800f902:	4604      	mov	r4, r0
 800f904:	f001 fa0a 	bl	8010d1c <ucdr_alignment>
 800f908:	4420      	add	r0, r4
 800f90a:	3001      	adds	r0, #1
 800f90c:	b002      	add	sp, #8
 800f90e:	bd10      	pop	{r4, pc}

0800f910 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800f910:	4800      	ldr	r0, [pc, #0]	@ (800f914 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 800f912:	4770      	bx	lr
 800f914:	24000c0c 	.word	0x24000c0c

0800f918 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	b158      	cbz	r0, 800f934 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 800f91c:	460d      	mov	r5, r1
 800f91e:	f000 fad7 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f922:	2101      	movs	r1, #1
 800f924:	182c      	adds	r4, r5, r0
 800f926:	f1c5 0501 	rsb	r5, r5, #1
 800f92a:	4620      	mov	r0, r4
 800f92c:	f001 f9f6 	bl	8010d1c <ucdr_alignment>
 800f930:	4428      	add	r0, r5
 800f932:	4420      	add	r0, r4
 800f934:	bd38      	pop	{r3, r4, r5, pc}
 800f936:	bf00      	nop

0800f938 <_GearReport__cdr_deserialize>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	460c      	mov	r4, r1
 800f93c:	b179      	cbz	r1, 800f95e <_GearReport__cdr_deserialize+0x26>
 800f93e:	4605      	mov	r5, r0
 800f940:	f000 fb2a 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f944:	4603      	mov	r3, r0
 800f946:	4621      	mov	r1, r4
 800f948:	4628      	mov	r0, r5
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	4798      	blx	r3
 800f950:	f104 0108 	add.w	r1, r4, #8
 800f954:	4628      	mov	r0, r5
 800f956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f95a:	f000 bb65 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800f95e:	4608      	mov	r0, r1
 800f960:	bd38      	pop	{r3, r4, r5, pc}
 800f962:	bf00      	nop

0800f964 <_GearReport__cdr_serialize>:
 800f964:	b180      	cbz	r0, 800f988 <_GearReport__cdr_serialize+0x24>
 800f966:	b538      	push	{r3, r4, r5, lr}
 800f968:	4604      	mov	r4, r0
 800f96a:	460d      	mov	r5, r1
 800f96c:	f000 fb14 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f970:	4603      	mov	r3, r0
 800f972:	4629      	mov	r1, r5
 800f974:	4620      	mov	r0, r4
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	4798      	blx	r3
 800f97c:	7a21      	ldrb	r1, [r4, #8]
 800f97e:	4628      	mov	r0, r5
 800f980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f984:	f000 bb3a 	b.w	800fffc <ucdr_serialize_uint8_t>
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop

0800f98c <_GearReport__get_serialized_size>:
 800f98c:	b150      	cbz	r0, 800f9a4 <_GearReport__get_serialized_size+0x18>
 800f98e:	2100      	movs	r1, #0
 800f990:	b510      	push	{r4, lr}
 800f992:	f000 fa9d 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f996:	4604      	mov	r4, r0
 800f998:	2101      	movs	r1, #1
 800f99a:	f001 f9bf 	bl	8010d1c <ucdr_alignment>
 800f99e:	4420      	add	r0, r4
 800f9a0:	3001      	adds	r0, #1
 800f9a2:	bd10      	pop	{r4, pc}
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop

0800f9a8 <_GearReport__max_serialized_size>:
 800f9a8:	b510      	push	{r4, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	2401      	movs	r4, #1
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	f10d 0007 	add.w	r0, sp, #7
 800f9b4:	f88d 4007 	strb.w	r4, [sp, #7]
 800f9b8:	f000 fada 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4604      	mov	r4, r0
 800f9c0:	f001 f9ac 	bl	8010d1c <ucdr_alignment>
 800f9c4:	4420      	add	r0, r4
 800f9c6:	3001      	adds	r0, #1
 800f9c8:	b002      	add	sp, #8
 800f9ca:	bd10      	pop	{r4, pc}

0800f9cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800f9cc:	4800      	ldr	r0, [pc, #0]	@ (800f9d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 800f9ce:	4770      	bx	lr
 800f9d0:	24000c34 	.word	0x24000c34

0800f9d4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800f9d4:	b538      	push	{r3, r4, r5, lr}
 800f9d6:	b158      	cbz	r0, 800f9f0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 800f9d8:	460d      	mov	r5, r1
 800f9da:	f000 fa79 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f9de:	2101      	movs	r1, #1
 800f9e0:	182c      	adds	r4, r5, r0
 800f9e2:	f1c5 0501 	rsb	r5, r5, #1
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f001 f998 	bl	8010d1c <ucdr_alignment>
 800f9ec:	4428      	add	r0, r5
 800f9ee:	4420      	add	r0, r4
 800f9f0:	bd38      	pop	{r3, r4, r5, pc}
 800f9f2:	bf00      	nop

0800f9f4 <_HazardLightsCommand__cdr_deserialize>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	460c      	mov	r4, r1
 800f9f8:	b179      	cbz	r1, 800fa1a <_HazardLightsCommand__cdr_deserialize+0x26>
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	f000 facc 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa00:	4603      	mov	r3, r0
 800fa02:	4621      	mov	r1, r4
 800fa04:	4628      	mov	r0, r5
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	4798      	blx	r3
 800fa0c:	f104 0108 	add.w	r1, r4, #8
 800fa10:	4628      	mov	r0, r5
 800fa12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa16:	f000 bb07 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800fa1a:	4608      	mov	r0, r1
 800fa1c:	bd38      	pop	{r3, r4, r5, pc}
 800fa1e:	bf00      	nop

0800fa20 <_HazardLightsCommand__cdr_serialize>:
 800fa20:	b180      	cbz	r0, 800fa44 <_HazardLightsCommand__cdr_serialize+0x24>
 800fa22:	b538      	push	{r3, r4, r5, lr}
 800fa24:	4604      	mov	r4, r0
 800fa26:	460d      	mov	r5, r1
 800fa28:	f000 fab6 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4620      	mov	r0, r4
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	4798      	blx	r3
 800fa38:	7a21      	ldrb	r1, [r4, #8]
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa40:	f000 badc 	b.w	800fffc <ucdr_serialize_uint8_t>
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop

0800fa48 <_HazardLightsCommand__get_serialized_size>:
 800fa48:	b150      	cbz	r0, 800fa60 <_HazardLightsCommand__get_serialized_size+0x18>
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	b510      	push	{r4, lr}
 800fa4e:	f000 fa3f 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fa52:	4604      	mov	r4, r0
 800fa54:	2101      	movs	r1, #1
 800fa56:	f001 f961 	bl	8010d1c <ucdr_alignment>
 800fa5a:	4420      	add	r0, r4
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	bd10      	pop	{r4, pc}
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop

0800fa64 <_HazardLightsCommand__max_serialized_size>:
 800fa64:	b510      	push	{r4, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	2401      	movs	r4, #1
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	f10d 0007 	add.w	r0, sp, #7
 800fa70:	f88d 4007 	strb.w	r4, [sp, #7]
 800fa74:	f000 fa7c 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800fa78:	4621      	mov	r1, r4
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	f001 f94e 	bl	8010d1c <ucdr_alignment>
 800fa80:	4420      	add	r0, r4
 800fa82:	3001      	adds	r0, #1
 800fa84:	b002      	add	sp, #8
 800fa86:	bd10      	pop	{r4, pc}

0800fa88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800fa88:	4800      	ldr	r0, [pc, #0]	@ (800fa8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 800fa8a:	4770      	bx	lr
 800fa8c:	24000c5c 	.word	0x24000c5c

0800fa90 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	b158      	cbz	r0, 800faac <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 800fa94:	460d      	mov	r5, r1
 800fa96:	f000 fa1b 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fa9a:	2101      	movs	r1, #1
 800fa9c:	182c      	adds	r4, r5, r0
 800fa9e:	f1c5 0501 	rsb	r5, r5, #1
 800faa2:	4620      	mov	r0, r4
 800faa4:	f001 f93a 	bl	8010d1c <ucdr_alignment>
 800faa8:	4428      	add	r0, r5
 800faaa:	4420      	add	r0, r4
 800faac:	bd38      	pop	{r3, r4, r5, pc}
 800faae:	bf00      	nop

0800fab0 <_HazardLightsReport__cdr_deserialize>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	460c      	mov	r4, r1
 800fab4:	b179      	cbz	r1, 800fad6 <_HazardLightsReport__cdr_deserialize+0x26>
 800fab6:	4605      	mov	r5, r0
 800fab8:	f000 fa6e 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fabc:	4603      	mov	r3, r0
 800fabe:	4621      	mov	r1, r4
 800fac0:	4628      	mov	r0, r5
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	4798      	blx	r3
 800fac8:	f104 0108 	add.w	r1, r4, #8
 800facc:	4628      	mov	r0, r5
 800face:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fad2:	f000 baa9 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800fad6:	4608      	mov	r0, r1
 800fad8:	bd38      	pop	{r3, r4, r5, pc}
 800fada:	bf00      	nop

0800fadc <_HazardLightsReport__cdr_serialize>:
 800fadc:	b180      	cbz	r0, 800fb00 <_HazardLightsReport__cdr_serialize+0x24>
 800fade:	b538      	push	{r3, r4, r5, lr}
 800fae0:	4604      	mov	r4, r0
 800fae2:	460d      	mov	r5, r1
 800fae4:	f000 fa58 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fae8:	4603      	mov	r3, r0
 800faea:	4629      	mov	r1, r5
 800faec:	4620      	mov	r0, r4
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	4798      	blx	r3
 800faf4:	7a21      	ldrb	r1, [r4, #8]
 800faf6:	4628      	mov	r0, r5
 800faf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fafc:	f000 ba7e 	b.w	800fffc <ucdr_serialize_uint8_t>
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop

0800fb04 <_HazardLightsReport__get_serialized_size>:
 800fb04:	b150      	cbz	r0, 800fb1c <_HazardLightsReport__get_serialized_size+0x18>
 800fb06:	2100      	movs	r1, #0
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	f000 f9e1 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fb0e:	4604      	mov	r4, r0
 800fb10:	2101      	movs	r1, #1
 800fb12:	f001 f903 	bl	8010d1c <ucdr_alignment>
 800fb16:	4420      	add	r0, r4
 800fb18:	3001      	adds	r0, #1
 800fb1a:	bd10      	pop	{r4, pc}
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop

0800fb20 <_HazardLightsReport__max_serialized_size>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	2401      	movs	r4, #1
 800fb26:	2100      	movs	r1, #0
 800fb28:	f10d 0007 	add.w	r0, sp, #7
 800fb2c:	f88d 4007 	strb.w	r4, [sp, #7]
 800fb30:	f000 fa1e 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800fb34:	4621      	mov	r1, r4
 800fb36:	4604      	mov	r4, r0
 800fb38:	f001 f8f0 	bl	8010d1c <ucdr_alignment>
 800fb3c:	4420      	add	r0, r4
 800fb3e:	3001      	adds	r0, #1
 800fb40:	b002      	add	sp, #8
 800fb42:	bd10      	pop	{r4, pc}

0800fb44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800fb44:	4800      	ldr	r0, [pc, #0]	@ (800fb48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 800fb46:	4770      	bx	lr
 800fb48:	24000c84 	.word	0x24000c84

0800fb4c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	b158      	cbz	r0, 800fb68 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 800fb50:	460d      	mov	r5, r1
 800fb52:	f000 f9bd 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fb56:	2104      	movs	r1, #4
 800fb58:	182c      	adds	r4, r5, r0
 800fb5a:	f1c5 0504 	rsb	r5, r5, #4
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f001 f8dc 	bl	8010d1c <ucdr_alignment>
 800fb64:	4428      	add	r0, r5
 800fb66:	4420      	add	r0, r4
 800fb68:	bd38      	pop	{r3, r4, r5, pc}
 800fb6a:	bf00      	nop

0800fb6c <_SteeringReport__cdr_deserialize>:
 800fb6c:	b538      	push	{r3, r4, r5, lr}
 800fb6e:	460c      	mov	r4, r1
 800fb70:	b179      	cbz	r1, 800fb92 <_SteeringReport__cdr_deserialize+0x26>
 800fb72:	4605      	mov	r5, r0
 800fb74:	f000 fa10 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	4798      	blx	r3
 800fb84:	f104 0108 	add.w	r1, r4, #8
 800fb88:	4628      	mov	r0, r5
 800fb8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb8e:	f000 be77 	b.w	8010880 <ucdr_deserialize_float>
 800fb92:	4608      	mov	r0, r1
 800fb94:	bd38      	pop	{r3, r4, r5, pc}
 800fb96:	bf00      	nop

0800fb98 <_SteeringReport__cdr_serialize>:
 800fb98:	b188      	cbz	r0, 800fbbe <_SteeringReport__cdr_serialize+0x26>
 800fb9a:	b538      	push	{r3, r4, r5, lr}
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	460d      	mov	r5, r1
 800fba0:	f000 f9fa 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fba4:	4603      	mov	r3, r0
 800fba6:	4629      	mov	r1, r5
 800fba8:	4620      	mov	r0, r4
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	4798      	blx	r3
 800fbb0:	ed94 0a02 	vldr	s0, [r4, #8]
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbba:	f000 bdc9 	b.w	8010750 <ucdr_serialize_float>
 800fbbe:	4770      	bx	lr

0800fbc0 <_SteeringReport__get_serialized_size>:
 800fbc0:	b150      	cbz	r0, 800fbd8 <_SteeringReport__get_serialized_size+0x18>
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	f000 f983 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fbca:	4604      	mov	r4, r0
 800fbcc:	2104      	movs	r1, #4
 800fbce:	f001 f8a5 	bl	8010d1c <ucdr_alignment>
 800fbd2:	4420      	add	r0, r4
 800fbd4:	3004      	adds	r0, #4
 800fbd6:	bd10      	pop	{r4, pc}
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop

0800fbdc <_SteeringReport__max_serialized_size>:
 800fbdc:	b510      	push	{r4, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	f10d 0007 	add.w	r0, sp, #7
 800fbe8:	f88d 3007 	strb.w	r3, [sp, #7]
 800fbec:	f000 f9c0 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	2104      	movs	r1, #4
 800fbf4:	f001 f892 	bl	8010d1c <ucdr_alignment>
 800fbf8:	4420      	add	r0, r4
 800fbfa:	3004      	adds	r0, #4
 800fbfc:	b002      	add	sp, #8
 800fbfe:	bd10      	pop	{r4, pc}

0800fc00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800fc00:	4800      	ldr	r0, [pc, #0]	@ (800fc04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 800fc02:	4770      	bx	lr
 800fc04:	24000cac 	.word	0x24000cac

0800fc08 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	b158      	cbz	r0, 800fc24 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 800fc0c:	460d      	mov	r5, r1
 800fc0e:	f000 f95f 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fc12:	2101      	movs	r1, #1
 800fc14:	182c      	adds	r4, r5, r0
 800fc16:	f1c5 0501 	rsb	r5, r5, #1
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f001 f87e 	bl	8010d1c <ucdr_alignment>
 800fc20:	4428      	add	r0, r5
 800fc22:	4420      	add	r0, r4
 800fc24:	bd38      	pop	{r3, r4, r5, pc}
 800fc26:	bf00      	nop

0800fc28 <_TurnIndicatorsCommand__cdr_deserialize>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	b179      	cbz	r1, 800fc4e <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 800fc2e:	4605      	mov	r5, r0
 800fc30:	f000 f9b2 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc34:	4603      	mov	r3, r0
 800fc36:	4621      	mov	r1, r4
 800fc38:	4628      	mov	r0, r5
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	4798      	blx	r3
 800fc40:	f104 0108 	add.w	r1, r4, #8
 800fc44:	4628      	mov	r0, r5
 800fc46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc4a:	f000 b9ed 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800fc4e:	4608      	mov	r0, r1
 800fc50:	bd38      	pop	{r3, r4, r5, pc}
 800fc52:	bf00      	nop

0800fc54 <_TurnIndicatorsCommand__cdr_serialize>:
 800fc54:	b180      	cbz	r0, 800fc78 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 800fc56:	b538      	push	{r3, r4, r5, lr}
 800fc58:	4604      	mov	r4, r0
 800fc5a:	460d      	mov	r5, r1
 800fc5c:	f000 f99c 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc60:	4603      	mov	r3, r0
 800fc62:	4629      	mov	r1, r5
 800fc64:	4620      	mov	r0, r4
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	4798      	blx	r3
 800fc6c:	7a21      	ldrb	r1, [r4, #8]
 800fc6e:	4628      	mov	r0, r5
 800fc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc74:	f000 b9c2 	b.w	800fffc <ucdr_serialize_uint8_t>
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop

0800fc7c <_TurnIndicatorsCommand__get_serialized_size>:
 800fc7c:	b150      	cbz	r0, 800fc94 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 800fc7e:	2100      	movs	r1, #0
 800fc80:	b510      	push	{r4, lr}
 800fc82:	f000 f925 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fc86:	4604      	mov	r4, r0
 800fc88:	2101      	movs	r1, #1
 800fc8a:	f001 f847 	bl	8010d1c <ucdr_alignment>
 800fc8e:	4420      	add	r0, r4
 800fc90:	3001      	adds	r0, #1
 800fc92:	bd10      	pop	{r4, pc}
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop

0800fc98 <_TurnIndicatorsCommand__max_serialized_size>:
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	2401      	movs	r4, #1
 800fc9e:	2100      	movs	r1, #0
 800fca0:	f10d 0007 	add.w	r0, sp, #7
 800fca4:	f88d 4007 	strb.w	r4, [sp, #7]
 800fca8:	f000 f962 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800fcac:	4621      	mov	r1, r4
 800fcae:	4604      	mov	r4, r0
 800fcb0:	f001 f834 	bl	8010d1c <ucdr_alignment>
 800fcb4:	4420      	add	r0, r4
 800fcb6:	3001      	adds	r0, #1
 800fcb8:	b002      	add	sp, #8
 800fcba:	bd10      	pop	{r4, pc}

0800fcbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800fcbc:	4800      	ldr	r0, [pc, #0]	@ (800fcc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 800fcbe:	4770      	bx	lr
 800fcc0:	24000cd4 	.word	0x24000cd4

0800fcc4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800fcc4:	b538      	push	{r3, r4, r5, lr}
 800fcc6:	b158      	cbz	r0, 800fce0 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 800fcc8:	460d      	mov	r5, r1
 800fcca:	f000 f901 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fcce:	2101      	movs	r1, #1
 800fcd0:	182c      	adds	r4, r5, r0
 800fcd2:	f1c5 0501 	rsb	r5, r5, #1
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f001 f820 	bl	8010d1c <ucdr_alignment>
 800fcdc:	4428      	add	r0, r5
 800fcde:	4420      	add	r0, r4
 800fce0:	bd38      	pop	{r3, r4, r5, pc}
 800fce2:	bf00      	nop

0800fce4 <_TurnIndicatorsReport__cdr_deserialize>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	460c      	mov	r4, r1
 800fce8:	b179      	cbz	r1, 800fd0a <_TurnIndicatorsReport__cdr_deserialize+0x26>
 800fcea:	4605      	mov	r5, r0
 800fcec:	f000 f954 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	4621      	mov	r1, r4
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	4798      	blx	r3
 800fcfc:	f104 0108 	add.w	r1, r4, #8
 800fd00:	4628      	mov	r0, r5
 800fd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd06:	f000 b98f 	b.w	8010028 <ucdr_deserialize_uint8_t>
 800fd0a:	4608      	mov	r0, r1
 800fd0c:	bd38      	pop	{r3, r4, r5, pc}
 800fd0e:	bf00      	nop

0800fd10 <_TurnIndicatorsReport__cdr_serialize>:
 800fd10:	b180      	cbz	r0, 800fd34 <_TurnIndicatorsReport__cdr_serialize+0x24>
 800fd12:	b538      	push	{r3, r4, r5, lr}
 800fd14:	4604      	mov	r4, r0
 800fd16:	460d      	mov	r5, r1
 800fd18:	f000 f93e 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	4629      	mov	r1, r5
 800fd20:	4620      	mov	r0, r4
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	4798      	blx	r3
 800fd28:	7a21      	ldrb	r1, [r4, #8]
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd30:	f000 b964 	b.w	800fffc <ucdr_serialize_uint8_t>
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop

0800fd38 <_TurnIndicatorsReport__get_serialized_size>:
 800fd38:	b150      	cbz	r0, 800fd50 <_TurnIndicatorsReport__get_serialized_size+0x18>
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	b510      	push	{r4, lr}
 800fd3e:	f000 f8c7 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fd42:	4604      	mov	r4, r0
 800fd44:	2101      	movs	r1, #1
 800fd46:	f000 ffe9 	bl	8010d1c <ucdr_alignment>
 800fd4a:	4420      	add	r0, r4
 800fd4c:	3001      	adds	r0, #1
 800fd4e:	bd10      	pop	{r4, pc}
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop

0800fd54 <_TurnIndicatorsReport__max_serialized_size>:
 800fd54:	b510      	push	{r4, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	2401      	movs	r4, #1
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	f10d 0007 	add.w	r0, sp, #7
 800fd60:	f88d 4007 	strb.w	r4, [sp, #7]
 800fd64:	f000 f904 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	f000 ffd6 	bl	8010d1c <ucdr_alignment>
 800fd70:	4420      	add	r0, r4
 800fd72:	3001      	adds	r0, #1
 800fd74:	b002      	add	sp, #8
 800fd76:	bd10      	pop	{r4, pc}

0800fd78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800fd78:	4800      	ldr	r0, [pc, #0]	@ (800fd7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 800fd7a:	4770      	bx	lr
 800fd7c:	24000cfc 	.word	0x24000cfc

0800fd80 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 800fd80:	b1c8      	cbz	r0, 800fdb6 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 800fd82:	b570      	push	{r4, r5, r6, lr}
 800fd84:	460d      	mov	r5, r1
 800fd86:	f001 f8e3 	bl	8010f50 <get_serialized_size_std_msgs__msg__Header>
 800fd8a:	2104      	movs	r1, #4
 800fd8c:	182e      	adds	r6, r5, r0
 800fd8e:	f1c5 0504 	rsb	r5, r5, #4
 800fd92:	4630      	mov	r0, r6
 800fd94:	f000 ffc2 	bl	8010d1c <ucdr_alignment>
 800fd98:	2104      	movs	r1, #4
 800fd9a:	1844      	adds	r4, r0, r1
 800fd9c:	4434      	add	r4, r6
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 ffbc 	bl	8010d1c <ucdr_alignment>
 800fda4:	2104      	movs	r1, #4
 800fda6:	4408      	add	r0, r1
 800fda8:	4404      	add	r4, r0
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f000 ffb6 	bl	8010d1c <ucdr_alignment>
 800fdb0:	4428      	add	r0, r5
 800fdb2:	4420      	add	r0, r4
 800fdb4:	bd70      	pop	{r4, r5, r6, pc}
 800fdb6:	4770      	bx	lr

0800fdb8 <_VelocityReport__cdr_deserialize>:
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	460c      	mov	r4, r1
 800fdbc:	b1c9      	cbz	r1, 800fdf2 <_VelocityReport__cdr_deserialize+0x3a>
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	f001 f94a 	bl	8011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	4628      	mov	r0, r5
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	4798      	blx	r3
 800fdd0:	f104 0114 	add.w	r1, r4, #20
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	f000 fd53 	bl	8010880 <ucdr_deserialize_float>
 800fdda:	f104 0118 	add.w	r1, r4, #24
 800fdde:	4628      	mov	r0, r5
 800fde0:	f000 fd4e 	bl	8010880 <ucdr_deserialize_float>
 800fde4:	f104 011c 	add.w	r1, r4, #28
 800fde8:	4628      	mov	r0, r5
 800fdea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdee:	f000 bd47 	b.w	8010880 <ucdr_deserialize_float>
 800fdf2:	4608      	mov	r0, r1
 800fdf4:	bd38      	pop	{r3, r4, r5, pc}
 800fdf6:	bf00      	nop

0800fdf8 <_VelocityReport__cdr_serialize>:
 800fdf8:	b1d8      	cbz	r0, 800fe32 <_VelocityReport__cdr_serialize+0x3a>
 800fdfa:	b538      	push	{r3, r4, r5, lr}
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	460d      	mov	r5, r1
 800fe00:	f001 f92a 	bl	8011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800fe04:	4603      	mov	r3, r0
 800fe06:	4629      	mov	r1, r5
 800fe08:	4620      	mov	r0, r4
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	4798      	blx	r3
 800fe10:	ed94 0a05 	vldr	s0, [r4, #20]
 800fe14:	4628      	mov	r0, r5
 800fe16:	f000 fc9b 	bl	8010750 <ucdr_serialize_float>
 800fe1a:	ed94 0a06 	vldr	s0, [r4, #24]
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 fc96 	bl	8010750 <ucdr_serialize_float>
 800fe24:	ed94 0a07 	vldr	s0, [r4, #28]
 800fe28:	4628      	mov	r0, r5
 800fe2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe2e:	f000 bc8f 	b.w	8010750 <ucdr_serialize_float>
 800fe32:	4770      	bx	lr

0800fe34 <_VelocityReport__get_serialized_size>:
 800fe34:	b1b0      	cbz	r0, 800fe64 <_VelocityReport__get_serialized_size+0x30>
 800fe36:	2100      	movs	r1, #0
 800fe38:	b510      	push	{r4, lr}
 800fe3a:	f001 f889 	bl	8010f50 <get_serialized_size_std_msgs__msg__Header>
 800fe3e:	4604      	mov	r4, r0
 800fe40:	2104      	movs	r1, #4
 800fe42:	f000 ff6b 	bl	8010d1c <ucdr_alignment>
 800fe46:	2104      	movs	r1, #4
 800fe48:	4420      	add	r0, r4
 800fe4a:	1844      	adds	r4, r0, r1
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 ff65 	bl	8010d1c <ucdr_alignment>
 800fe52:	2104      	movs	r1, #4
 800fe54:	4408      	add	r0, r1
 800fe56:	4404      	add	r4, r0
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f000 ff5f 	bl	8010d1c <ucdr_alignment>
 800fe5e:	3004      	adds	r0, #4
 800fe60:	4420      	add	r0, r4
 800fe62:	bd10      	pop	{r4, pc}
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop

0800fe68 <_VelocityReport__max_serialized_size>:
 800fe68:	b510      	push	{r4, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	2100      	movs	r1, #0
 800fe70:	f10d 0007 	add.w	r0, sp, #7
 800fe74:	f88d 3007 	strb.w	r3, [sp, #7]
 800fe78:	f001 f8e4 	bl	8011044 <max_serialized_size_std_msgs__msg__Header>
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	2104      	movs	r1, #4
 800fe80:	f000 ff4c 	bl	8010d1c <ucdr_alignment>
 800fe84:	2104      	movs	r1, #4
 800fe86:	4420      	add	r0, r4
 800fe88:	1844      	adds	r4, r0, r1
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f000 ff46 	bl	8010d1c <ucdr_alignment>
 800fe90:	2104      	movs	r1, #4
 800fe92:	4408      	add	r0, r1
 800fe94:	4404      	add	r4, r0
 800fe96:	4620      	mov	r0, r4
 800fe98:	f000 ff40 	bl	8010d1c <ucdr_alignment>
 800fe9c:	3004      	adds	r0, #4
 800fe9e:	4420      	add	r0, r4
 800fea0:	b002      	add	sp, #8
 800fea2:	bd10      	pop	{r4, pc}

0800fea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800fea4:	4800      	ldr	r0, [pc, #0]	@ (800fea8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 800fea6:	4770      	bx	lr
 800fea8:	24000d24 	.word	0x24000d24

0800feac <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800feac:	f001 bcac 	b.w	8011808 <builtin_interfaces__msg__Time__init>

0800feb0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800feb0:	f001 bcae 	b.w	8011810 <builtin_interfaces__msg__Time__fini>

0800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800feb4:	4b04      	ldr	r3, [pc, #16]	@ (800fec8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	b10a      	cbz	r2, 800febe <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800feba:	4803      	ldr	r0, [pc, #12]	@ (800fec8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800febc:	4770      	bx	lr
 800febe:	4a03      	ldr	r2, [pc, #12]	@ (800fecc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800fec0:	4801      	ldr	r0, [pc, #4]	@ (800fec8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fec2:	6812      	ldr	r2, [r2, #0]
 800fec4:	601a      	str	r2, [r3, #0]
 800fec6:	4770      	bx	lr
 800fec8:	24000dc4 	.word	0x24000dc4
 800fecc:	24000e10 	.word	0x24000e10

0800fed0 <get_serialized_size_builtin_interfaces__msg__Time>:
 800fed0:	b180      	cbz	r0, 800fef4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800fed2:	b538      	push	{r3, r4, r5, lr}
 800fed4:	460d      	mov	r5, r1
 800fed6:	2104      	movs	r1, #4
 800fed8:	4628      	mov	r0, r5
 800feda:	f000 ff1f 	bl	8010d1c <ucdr_alignment>
 800fede:	1d2b      	adds	r3, r5, #4
 800fee0:	f1c5 0504 	rsb	r5, r5, #4
 800fee4:	2104      	movs	r1, #4
 800fee6:	181c      	adds	r4, r3, r0
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 ff17 	bl	8010d1c <ucdr_alignment>
 800feee:	4428      	add	r0, r5
 800fef0:	4420      	add	r0, r4
 800fef2:	bd38      	pop	{r3, r4, r5, pc}
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop

0800fef8 <_Time__cdr_deserialize>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	460c      	mov	r4, r1
 800fefc:	b141      	cbz	r1, 800ff10 <_Time__cdr_deserialize+0x18>
 800fefe:	4605      	mov	r5, r0
 800ff00:	f000 fb96 	bl	8010630 <ucdr_deserialize_int32_t>
 800ff04:	1d21      	adds	r1, r4, #4
 800ff06:	4628      	mov	r0, r5
 800ff08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff0c:	f000 b9d2 	b.w	80102b4 <ucdr_deserialize_uint32_t>
 800ff10:	4608      	mov	r0, r1
 800ff12:	bd38      	pop	{r3, r4, r5, pc}

0800ff14 <_Time__cdr_serialize>:
 800ff14:	b160      	cbz	r0, 800ff30 <_Time__cdr_serialize+0x1c>
 800ff16:	b538      	push	{r3, r4, r5, lr}
 800ff18:	460d      	mov	r5, r1
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	6801      	ldr	r1, [r0, #0]
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f000 faee 	bl	8010500 <ucdr_serialize_int32_t>
 800ff24:	6861      	ldr	r1, [r4, #4]
 800ff26:	4628      	mov	r0, r5
 800ff28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff2c:	f000 b892 	b.w	8010054 <ucdr_serialize_uint32_t>
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop

0800ff34 <_Time__get_serialized_size>:
 800ff34:	b160      	cbz	r0, 800ff50 <_Time__get_serialized_size+0x1c>
 800ff36:	2104      	movs	r1, #4
 800ff38:	2000      	movs	r0, #0
 800ff3a:	b510      	push	{r4, lr}
 800ff3c:	f000 feee 	bl	8010d1c <ucdr_alignment>
 800ff40:	2104      	movs	r1, #4
 800ff42:	1844      	adds	r4, r0, r1
 800ff44:	4620      	mov	r0, r4
 800ff46:	f000 fee9 	bl	8010d1c <ucdr_alignment>
 800ff4a:	3004      	adds	r0, #4
 800ff4c:	4420      	add	r0, r4
 800ff4e:	bd10      	pop	{r4, pc}
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop

0800ff54 <_Time__max_serialized_size>:
 800ff54:	b510      	push	{r4, lr}
 800ff56:	2104      	movs	r1, #4
 800ff58:	2000      	movs	r0, #0
 800ff5a:	f000 fedf 	bl	8010d1c <ucdr_alignment>
 800ff5e:	2104      	movs	r1, #4
 800ff60:	1844      	adds	r4, r0, r1
 800ff62:	4620      	mov	r0, r4
 800ff64:	f000 feda 	bl	8010d1c <ucdr_alignment>
 800ff68:	3004      	adds	r0, #4
 800ff6a:	4420      	add	r0, r4
 800ff6c:	bd10      	pop	{r4, pc}
 800ff6e:	bf00      	nop

0800ff70 <max_serialized_size_builtin_interfaces__msg__Time>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	460c      	mov	r4, r1
 800ff74:	2301      	movs	r3, #1
 800ff76:	2104      	movs	r1, #4
 800ff78:	1d25      	adds	r5, r4, #4
 800ff7a:	7003      	strb	r3, [r0, #0]
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f1c4 0404 	rsb	r4, r4, #4
 800ff82:	f000 fecb 	bl	8010d1c <ucdr_alignment>
 800ff86:	4405      	add	r5, r0
 800ff88:	2104      	movs	r1, #4
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	f000 fec6 	bl	8010d1c <ucdr_alignment>
 800ff90:	4420      	add	r0, r4
 800ff92:	4428      	add	r0, r5
 800ff94:	bd38      	pop	{r3, r4, r5, pc}
 800ff96:	bf00      	nop

0800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ff98:	4800      	ldr	r0, [pc, #0]	@ (800ff9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ff9a:	4770      	bx	lr
 800ff9c:	24000dd0 	.word	0x24000dd0

0800ffa0 <ucdr_serialize_bool>:
 800ffa0:	b538      	push	{r3, r4, r5, lr}
 800ffa2:	460d      	mov	r5, r1
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	f000 fe9c 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 800ffac:	b148      	cbz	r0, 800ffc2 <ucdr_serialize_bool+0x22>
 800ffae:	68a3      	ldr	r3, [r4, #8]
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	701d      	strb	r5, [r3, #0]
 800ffb4:	68a2      	ldr	r2, [r4, #8]
 800ffb6:	6923      	ldr	r3, [r4, #16]
 800ffb8:	440a      	add	r2, r1
 800ffba:	7561      	strb	r1, [r4, #21]
 800ffbc:	440b      	add	r3, r1
 800ffbe:	60a2      	str	r2, [r4, #8]
 800ffc0:	6123      	str	r3, [r4, #16]
 800ffc2:	7da0      	ldrb	r0, [r4, #22]
 800ffc4:	f080 0001 	eor.w	r0, r0, #1
 800ffc8:	bd38      	pop	{r3, r4, r5, pc}
 800ffca:	bf00      	nop

0800ffcc <ucdr_deserialize_bool>:
 800ffcc:	b538      	push	{r3, r4, r5, lr}
 800ffce:	460d      	mov	r5, r1
 800ffd0:	2101      	movs	r1, #1
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	f000 fe86 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 800ffd8:	b160      	cbz	r0, 800fff4 <ucdr_deserialize_bool+0x28>
 800ffda:	68a2      	ldr	r2, [r4, #8]
 800ffdc:	2101      	movs	r1, #1
 800ffde:	6923      	ldr	r3, [r4, #16]
 800ffe0:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ffe4:	440b      	add	r3, r1
 800ffe6:	3800      	subs	r0, #0
 800ffe8:	bf18      	it	ne
 800ffea:	2001      	movne	r0, #1
 800ffec:	7028      	strb	r0, [r5, #0]
 800ffee:	60a2      	str	r2, [r4, #8]
 800fff0:	6123      	str	r3, [r4, #16]
 800fff2:	7561      	strb	r1, [r4, #21]
 800fff4:	7da0      	ldrb	r0, [r4, #22]
 800fff6:	f080 0001 	eor.w	r0, r0, #1
 800fffa:	bd38      	pop	{r3, r4, r5, pc}

0800fffc <ucdr_serialize_uint8_t>:
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	460d      	mov	r5, r1
 8010000:	2101      	movs	r1, #1
 8010002:	4604      	mov	r4, r0
 8010004:	f000 fe6e 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010008:	b148      	cbz	r0, 801001e <ucdr_serialize_uint8_t+0x22>
 801000a:	68a3      	ldr	r3, [r4, #8]
 801000c:	2101      	movs	r1, #1
 801000e:	701d      	strb	r5, [r3, #0]
 8010010:	68a2      	ldr	r2, [r4, #8]
 8010012:	6923      	ldr	r3, [r4, #16]
 8010014:	440a      	add	r2, r1
 8010016:	7561      	strb	r1, [r4, #21]
 8010018:	440b      	add	r3, r1
 801001a:	60a2      	str	r2, [r4, #8]
 801001c:	6123      	str	r3, [r4, #16]
 801001e:	7da0      	ldrb	r0, [r4, #22]
 8010020:	f080 0001 	eor.w	r0, r0, #1
 8010024:	bd38      	pop	{r3, r4, r5, pc}
 8010026:	bf00      	nop

08010028 <ucdr_deserialize_uint8_t>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	460d      	mov	r5, r1
 801002c:	2101      	movs	r1, #1
 801002e:	4604      	mov	r4, r0
 8010030:	f000 fe58 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010034:	b150      	cbz	r0, 801004c <ucdr_deserialize_uint8_t+0x24>
 8010036:	68a3      	ldr	r3, [r4, #8]
 8010038:	2101      	movs	r1, #1
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	702b      	strb	r3, [r5, #0]
 801003e:	68a2      	ldr	r2, [r4, #8]
 8010040:	6923      	ldr	r3, [r4, #16]
 8010042:	440a      	add	r2, r1
 8010044:	7561      	strb	r1, [r4, #21]
 8010046:	440b      	add	r3, r1
 8010048:	60a2      	str	r2, [r4, #8]
 801004a:	6123      	str	r3, [r4, #16]
 801004c:	7da0      	ldrb	r0, [r4, #22]
 801004e:	f080 0001 	eor.w	r0, r0, #1
 8010052:	bd38      	pop	{r3, r4, r5, pc}

08010054 <ucdr_serialize_uint32_t>:
 8010054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010058:	b082      	sub	sp, #8
 801005a:	4604      	mov	r4, r0
 801005c:	9101      	str	r1, [sp, #4]
 801005e:	2104      	movs	r1, #4
 8010060:	f000 fe64 	bl	8010d2c <ucdr_buffer_alignment>
 8010064:	4601      	mov	r1, r0
 8010066:	4620      	mov	r0, r4
 8010068:	7d67      	ldrb	r7, [r4, #21]
 801006a:	f000 fea3 	bl	8010db4 <ucdr_advance_buffer>
 801006e:	2104      	movs	r1, #4
 8010070:	4620      	mov	r0, r4
 8010072:	f000 fe2b 	bl	8010ccc <ucdr_check_buffer_available_for>
 8010076:	2800      	cmp	r0, #0
 8010078:	d139      	bne.n	80100ee <ucdr_serialize_uint32_t+0x9a>
 801007a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801007e:	42ab      	cmp	r3, r5
 8010080:	d930      	bls.n	80100e4 <ucdr_serialize_uint32_t+0x90>
 8010082:	1b5e      	subs	r6, r3, r5
 8010084:	60a3      	str	r3, [r4, #8]
 8010086:	6923      	ldr	r3, [r4, #16]
 8010088:	4620      	mov	r0, r4
 801008a:	f1c6 0804 	rsb	r8, r6, #4
 801008e:	4433      	add	r3, r6
 8010090:	4641      	mov	r1, r8
 8010092:	6123      	str	r3, [r4, #16]
 8010094:	f000 fe26 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010098:	2800      	cmp	r0, #0
 801009a:	d04c      	beq.n	8010136 <ucdr_serialize_uint32_t+0xe2>
 801009c:	7d23      	ldrb	r3, [r4, #20]
 801009e:	2b01      	cmp	r3, #1
 80100a0:	d063      	beq.n	801016a <ucdr_serialize_uint32_t+0x116>
 80100a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80100a6:	702b      	strb	r3, [r5, #0]
 80100a8:	2e00      	cmp	r6, #0
 80100aa:	d051      	beq.n	8010150 <ucdr_serialize_uint32_t+0xfc>
 80100ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80100b0:	2e01      	cmp	r6, #1
 80100b2:	706b      	strb	r3, [r5, #1]
 80100b4:	d050      	beq.n	8010158 <ucdr_serialize_uint32_t+0x104>
 80100b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80100ba:	2e02      	cmp	r6, #2
 80100bc:	70ab      	strb	r3, [r5, #2]
 80100be:	d04f      	beq.n	8010160 <ucdr_serialize_uint32_t+0x10c>
 80100c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80100c4:	70eb      	strb	r3, [r5, #3]
 80100c6:	6923      	ldr	r3, [r4, #16]
 80100c8:	2104      	movs	r1, #4
 80100ca:	68a2      	ldr	r2, [r4, #8]
 80100cc:	3304      	adds	r3, #4
 80100ce:	7da0      	ldrb	r0, [r4, #22]
 80100d0:	4442      	add	r2, r8
 80100d2:	7561      	strb	r1, [r4, #21]
 80100d4:	1b9e      	subs	r6, r3, r6
 80100d6:	f080 0001 	eor.w	r0, r0, #1
 80100da:	60a2      	str	r2, [r4, #8]
 80100dc:	6126      	str	r6, [r4, #16]
 80100de:	b002      	add	sp, #8
 80100e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e4:	2104      	movs	r1, #4
 80100e6:	4620      	mov	r0, r4
 80100e8:	f000 fdfc 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 80100ec:	b1d0      	cbz	r0, 8010124 <ucdr_serialize_uint32_t+0xd0>
 80100ee:	7d23      	ldrb	r3, [r4, #20]
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	68a3      	ldr	r3, [r4, #8]
 80100f4:	d01c      	beq.n	8010130 <ucdr_serialize_uint32_t+0xdc>
 80100f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80100fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100fe:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010102:	7018      	strb	r0, [r3, #0]
 8010104:	68a3      	ldr	r3, [r4, #8]
 8010106:	705a      	strb	r2, [r3, #1]
 8010108:	68a3      	ldr	r3, [r4, #8]
 801010a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801010e:	7099      	strb	r1, [r3, #2]
 8010110:	68a3      	ldr	r3, [r4, #8]
 8010112:	70da      	strb	r2, [r3, #3]
 8010114:	2104      	movs	r1, #4
 8010116:	68a2      	ldr	r2, [r4, #8]
 8010118:	6923      	ldr	r3, [r4, #16]
 801011a:	440a      	add	r2, r1
 801011c:	7561      	strb	r1, [r4, #21]
 801011e:	440b      	add	r3, r1
 8010120:	60a2      	str	r2, [r4, #8]
 8010122:	6123      	str	r3, [r4, #16]
 8010124:	7da0      	ldrb	r0, [r4, #22]
 8010126:	f080 0001 	eor.w	r0, r0, #1
 801012a:	b002      	add	sp, #8
 801012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010130:	9a01      	ldr	r2, [sp, #4]
 8010132:	601a      	str	r2, [r3, #0]
 8010134:	e7ee      	b.n	8010114 <ucdr_serialize_uint32_t+0xc0>
 8010136:	68a2      	ldr	r2, [r4, #8]
 8010138:	6923      	ldr	r3, [r4, #16]
 801013a:	7da0      	ldrb	r0, [r4, #22]
 801013c:	1b92      	subs	r2, r2, r6
 801013e:	1b9b      	subs	r3, r3, r6
 8010140:	7567      	strb	r7, [r4, #21]
 8010142:	f080 0001 	eor.w	r0, r0, #1
 8010146:	60a2      	str	r2, [r4, #8]
 8010148:	6123      	str	r3, [r4, #16]
 801014a:	b002      	add	sp, #8
 801014c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010150:	68a3      	ldr	r3, [r4, #8]
 8010152:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010156:	701a      	strb	r2, [r3, #0]
 8010158:	68a3      	ldr	r3, [r4, #8]
 801015a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801015e:	701a      	strb	r2, [r3, #0]
 8010160:	68a3      	ldr	r3, [r4, #8]
 8010162:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010166:	701a      	strb	r2, [r3, #0]
 8010168:	e7ad      	b.n	80100c6 <ucdr_serialize_uint32_t+0x72>
 801016a:	4628      	mov	r0, r5
 801016c:	ad01      	add	r5, sp, #4
 801016e:	4632      	mov	r2, r6
 8010170:	4629      	mov	r1, r5
 8010172:	f002 fa3a 	bl	80125ea <memcpy>
 8010176:	4642      	mov	r2, r8
 8010178:	19a9      	adds	r1, r5, r6
 801017a:	68a0      	ldr	r0, [r4, #8]
 801017c:	f002 fa35 	bl	80125ea <memcpy>
 8010180:	e7a1      	b.n	80100c6 <ucdr_serialize_uint32_t+0x72>
 8010182:	bf00      	nop

08010184 <ucdr_serialize_endian_uint32_t>:
 8010184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010188:	4604      	mov	r4, r0
 801018a:	b083      	sub	sp, #12
 801018c:	460d      	mov	r5, r1
 801018e:	2104      	movs	r1, #4
 8010190:	9201      	str	r2, [sp, #4]
 8010192:	f000 fdcb 	bl	8010d2c <ucdr_buffer_alignment>
 8010196:	4601      	mov	r1, r0
 8010198:	4620      	mov	r0, r4
 801019a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801019e:	f000 fe09 	bl	8010db4 <ucdr_advance_buffer>
 80101a2:	2104      	movs	r1, #4
 80101a4:	4620      	mov	r0, r4
 80101a6:	f000 fd91 	bl	8010ccc <ucdr_check_buffer_available_for>
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d138      	bne.n	8010220 <ucdr_serialize_endian_uint32_t+0x9c>
 80101ae:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80101b2:	42b7      	cmp	r7, r6
 80101b4:	d92f      	bls.n	8010216 <ucdr_serialize_endian_uint32_t+0x92>
 80101b6:	6923      	ldr	r3, [r4, #16]
 80101b8:	4620      	mov	r0, r4
 80101ba:	60a7      	str	r7, [r4, #8]
 80101bc:	1bbf      	subs	r7, r7, r6
 80101be:	443b      	add	r3, r7
 80101c0:	f1c7 0904 	rsb	r9, r7, #4
 80101c4:	6123      	str	r3, [r4, #16]
 80101c6:	4649      	mov	r1, r9
 80101c8:	f000 fd8c 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d04a      	beq.n	8010266 <ucdr_serialize_endian_uint32_t+0xe2>
 80101d0:	2d01      	cmp	r5, #1
 80101d2:	d063      	beq.n	801029c <ucdr_serialize_endian_uint32_t+0x118>
 80101d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101d8:	7033      	strb	r3, [r6, #0]
 80101da:	2f00      	cmp	r7, #0
 80101dc:	d051      	beq.n	8010282 <ucdr_serialize_endian_uint32_t+0xfe>
 80101de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101e2:	2f01      	cmp	r7, #1
 80101e4:	7073      	strb	r3, [r6, #1]
 80101e6:	d050      	beq.n	801028a <ucdr_serialize_endian_uint32_t+0x106>
 80101e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101ec:	2f02      	cmp	r7, #2
 80101ee:	70b3      	strb	r3, [r6, #2]
 80101f0:	d04f      	beq.n	8010292 <ucdr_serialize_endian_uint32_t+0x10e>
 80101f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101f6:	70f3      	strb	r3, [r6, #3]
 80101f8:	6923      	ldr	r3, [r4, #16]
 80101fa:	2104      	movs	r1, #4
 80101fc:	68a2      	ldr	r2, [r4, #8]
 80101fe:	7da0      	ldrb	r0, [r4, #22]
 8010200:	3304      	adds	r3, #4
 8010202:	444a      	add	r2, r9
 8010204:	7561      	strb	r1, [r4, #21]
 8010206:	1bdb      	subs	r3, r3, r7
 8010208:	f080 0001 	eor.w	r0, r0, #1
 801020c:	60a2      	str	r2, [r4, #8]
 801020e:	6123      	str	r3, [r4, #16]
 8010210:	b003      	add	sp, #12
 8010212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010216:	2104      	movs	r1, #4
 8010218:	4620      	mov	r0, r4
 801021a:	f000 fd63 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 801021e:	b1c8      	cbz	r0, 8010254 <ucdr_serialize_endian_uint32_t+0xd0>
 8010220:	2d01      	cmp	r5, #1
 8010222:	68a3      	ldr	r3, [r4, #8]
 8010224:	d01c      	beq.n	8010260 <ucdr_serialize_endian_uint32_t+0xdc>
 8010226:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801022a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801022e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010232:	7018      	strb	r0, [r3, #0]
 8010234:	68a3      	ldr	r3, [r4, #8]
 8010236:	705a      	strb	r2, [r3, #1]
 8010238:	68a3      	ldr	r3, [r4, #8]
 801023a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801023e:	7099      	strb	r1, [r3, #2]
 8010240:	68a3      	ldr	r3, [r4, #8]
 8010242:	70da      	strb	r2, [r3, #3]
 8010244:	2104      	movs	r1, #4
 8010246:	68a2      	ldr	r2, [r4, #8]
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	440a      	add	r2, r1
 801024c:	7561      	strb	r1, [r4, #21]
 801024e:	440b      	add	r3, r1
 8010250:	60a2      	str	r2, [r4, #8]
 8010252:	6123      	str	r3, [r4, #16]
 8010254:	7da0      	ldrb	r0, [r4, #22]
 8010256:	f080 0001 	eor.w	r0, r0, #1
 801025a:	b003      	add	sp, #12
 801025c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010260:	9a01      	ldr	r2, [sp, #4]
 8010262:	601a      	str	r2, [r3, #0]
 8010264:	e7ee      	b.n	8010244 <ucdr_serialize_endian_uint32_t+0xc0>
 8010266:	68a2      	ldr	r2, [r4, #8]
 8010268:	6923      	ldr	r3, [r4, #16]
 801026a:	7da0      	ldrb	r0, [r4, #22]
 801026c:	1bd2      	subs	r2, r2, r7
 801026e:	1bdb      	subs	r3, r3, r7
 8010270:	f884 8015 	strb.w	r8, [r4, #21]
 8010274:	f080 0001 	eor.w	r0, r0, #1
 8010278:	60a2      	str	r2, [r4, #8]
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	b003      	add	sp, #12
 801027e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010282:	68a3      	ldr	r3, [r4, #8]
 8010284:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010288:	701a      	strb	r2, [r3, #0]
 801028a:	68a3      	ldr	r3, [r4, #8]
 801028c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	68a3      	ldr	r3, [r4, #8]
 8010294:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010298:	701a      	strb	r2, [r3, #0]
 801029a:	e7ad      	b.n	80101f8 <ucdr_serialize_endian_uint32_t+0x74>
 801029c:	ad01      	add	r5, sp, #4
 801029e:	463a      	mov	r2, r7
 80102a0:	4630      	mov	r0, r6
 80102a2:	4629      	mov	r1, r5
 80102a4:	f002 f9a1 	bl	80125ea <memcpy>
 80102a8:	464a      	mov	r2, r9
 80102aa:	19e9      	adds	r1, r5, r7
 80102ac:	68a0      	ldr	r0, [r4, #8]
 80102ae:	f002 f99c 	bl	80125ea <memcpy>
 80102b2:	e7a1      	b.n	80101f8 <ucdr_serialize_endian_uint32_t+0x74>

080102b4 <ucdr_deserialize_uint32_t>:
 80102b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102b8:	4604      	mov	r4, r0
 80102ba:	460d      	mov	r5, r1
 80102bc:	2104      	movs	r1, #4
 80102be:	f000 fd35 	bl	8010d2c <ucdr_buffer_alignment>
 80102c2:	4601      	mov	r1, r0
 80102c4:	4620      	mov	r0, r4
 80102c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80102ca:	f000 fd73 	bl	8010db4 <ucdr_advance_buffer>
 80102ce:	2104      	movs	r1, #4
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 fcfb 	bl	8010ccc <ucdr_check_buffer_available_for>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d138      	bne.n	801034c <ucdr_deserialize_uint32_t+0x98>
 80102da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80102de:	42b7      	cmp	r7, r6
 80102e0:	d92f      	bls.n	8010342 <ucdr_deserialize_uint32_t+0x8e>
 80102e2:	6923      	ldr	r3, [r4, #16]
 80102e4:	4620      	mov	r0, r4
 80102e6:	60a7      	str	r7, [r4, #8]
 80102e8:	1bbf      	subs	r7, r7, r6
 80102ea:	443b      	add	r3, r7
 80102ec:	f1c7 0904 	rsb	r9, r7, #4
 80102f0:	6123      	str	r3, [r4, #16]
 80102f2:	4649      	mov	r1, r9
 80102f4:	f000 fcf6 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d046      	beq.n	801038a <ucdr_deserialize_uint32_t+0xd6>
 80102fc:	7d23      	ldrb	r3, [r4, #20]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d05c      	beq.n	80103bc <ucdr_deserialize_uint32_t+0x108>
 8010302:	78f3      	ldrb	r3, [r6, #3]
 8010304:	702b      	strb	r3, [r5, #0]
 8010306:	2f00      	cmp	r7, #0
 8010308:	d04c      	beq.n	80103a4 <ucdr_deserialize_uint32_t+0xf0>
 801030a:	78b3      	ldrb	r3, [r6, #2]
 801030c:	2f01      	cmp	r7, #1
 801030e:	706b      	strb	r3, [r5, #1]
 8010310:	f105 0302 	add.w	r3, r5, #2
 8010314:	d04a      	beq.n	80103ac <ucdr_deserialize_uint32_t+0xf8>
 8010316:	7873      	ldrb	r3, [r6, #1]
 8010318:	2f02      	cmp	r7, #2
 801031a:	70ab      	strb	r3, [r5, #2]
 801031c:	f105 0303 	add.w	r3, r5, #3
 8010320:	d048      	beq.n	80103b4 <ucdr_deserialize_uint32_t+0x100>
 8010322:	7833      	ldrb	r3, [r6, #0]
 8010324:	70eb      	strb	r3, [r5, #3]
 8010326:	6923      	ldr	r3, [r4, #16]
 8010328:	2104      	movs	r1, #4
 801032a:	68a2      	ldr	r2, [r4, #8]
 801032c:	3304      	adds	r3, #4
 801032e:	7da0      	ldrb	r0, [r4, #22]
 8010330:	444a      	add	r2, r9
 8010332:	7561      	strb	r1, [r4, #21]
 8010334:	1bdb      	subs	r3, r3, r7
 8010336:	f080 0001 	eor.w	r0, r0, #1
 801033a:	60a2      	str	r2, [r4, #8]
 801033c:	6123      	str	r3, [r4, #16]
 801033e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010342:	2104      	movs	r1, #4
 8010344:	4620      	mov	r0, r4
 8010346:	f000 fccd 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 801034a:	b1b0      	cbz	r0, 801037a <ucdr_deserialize_uint32_t+0xc6>
 801034c:	7d23      	ldrb	r3, [r4, #20]
 801034e:	2b01      	cmp	r3, #1
 8010350:	68a3      	ldr	r3, [r4, #8]
 8010352:	d017      	beq.n	8010384 <ucdr_deserialize_uint32_t+0xd0>
 8010354:	78db      	ldrb	r3, [r3, #3]
 8010356:	702b      	strb	r3, [r5, #0]
 8010358:	68a3      	ldr	r3, [r4, #8]
 801035a:	789b      	ldrb	r3, [r3, #2]
 801035c:	706b      	strb	r3, [r5, #1]
 801035e:	68a3      	ldr	r3, [r4, #8]
 8010360:	785b      	ldrb	r3, [r3, #1]
 8010362:	70ab      	strb	r3, [r5, #2]
 8010364:	68a3      	ldr	r3, [r4, #8]
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	70eb      	strb	r3, [r5, #3]
 801036a:	2104      	movs	r1, #4
 801036c:	68a2      	ldr	r2, [r4, #8]
 801036e:	6923      	ldr	r3, [r4, #16]
 8010370:	440a      	add	r2, r1
 8010372:	7561      	strb	r1, [r4, #21]
 8010374:	440b      	add	r3, r1
 8010376:	60a2      	str	r2, [r4, #8]
 8010378:	6123      	str	r3, [r4, #16]
 801037a:	7da0      	ldrb	r0, [r4, #22]
 801037c:	f080 0001 	eor.w	r0, r0, #1
 8010380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	602b      	str	r3, [r5, #0]
 8010388:	e7ef      	b.n	801036a <ucdr_deserialize_uint32_t+0xb6>
 801038a:	68a2      	ldr	r2, [r4, #8]
 801038c:	6923      	ldr	r3, [r4, #16]
 801038e:	1bd2      	subs	r2, r2, r7
 8010390:	7da0      	ldrb	r0, [r4, #22]
 8010392:	1bdb      	subs	r3, r3, r7
 8010394:	f884 8015 	strb.w	r8, [r4, #21]
 8010398:	f080 0001 	eor.w	r0, r0, #1
 801039c:	60a2      	str	r2, [r4, #8]
 801039e:	6123      	str	r3, [r4, #16]
 80103a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a4:	68a3      	ldr	r3, [r4, #8]
 80103a6:	789b      	ldrb	r3, [r3, #2]
 80103a8:	706b      	strb	r3, [r5, #1]
 80103aa:	1cab      	adds	r3, r5, #2
 80103ac:	68a2      	ldr	r2, [r4, #8]
 80103ae:	7852      	ldrb	r2, [r2, #1]
 80103b0:	f803 2b01 	strb.w	r2, [r3], #1
 80103b4:	68a2      	ldr	r2, [r4, #8]
 80103b6:	7812      	ldrb	r2, [r2, #0]
 80103b8:	701a      	strb	r2, [r3, #0]
 80103ba:	e7b4      	b.n	8010326 <ucdr_deserialize_uint32_t+0x72>
 80103bc:	4631      	mov	r1, r6
 80103be:	463a      	mov	r2, r7
 80103c0:	4628      	mov	r0, r5
 80103c2:	f002 f912 	bl	80125ea <memcpy>
 80103c6:	464a      	mov	r2, r9
 80103c8:	19e8      	adds	r0, r5, r7
 80103ca:	68a1      	ldr	r1, [r4, #8]
 80103cc:	f002 f90d 	bl	80125ea <memcpy>
 80103d0:	e7a9      	b.n	8010326 <ucdr_deserialize_uint32_t+0x72>
 80103d2:	bf00      	nop

080103d4 <ucdr_deserialize_endian_uint32_t>:
 80103d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d8:	4604      	mov	r4, r0
 80103da:	460e      	mov	r6, r1
 80103dc:	2104      	movs	r1, #4
 80103de:	4615      	mov	r5, r2
 80103e0:	f000 fca4 	bl	8010d2c <ucdr_buffer_alignment>
 80103e4:	4601      	mov	r1, r0
 80103e6:	4620      	mov	r0, r4
 80103e8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80103ec:	f000 fce2 	bl	8010db4 <ucdr_advance_buffer>
 80103f0:	2104      	movs	r1, #4
 80103f2:	4620      	mov	r0, r4
 80103f4:	f000 fc6a 	bl	8010ccc <ucdr_check_buffer_available_for>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d13c      	bne.n	8010476 <ucdr_deserialize_endian_uint32_t+0xa2>
 80103fc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010400:	42bb      	cmp	r3, r7
 8010402:	d933      	bls.n	801046c <ucdr_deserialize_endian_uint32_t+0x98>
 8010404:	eba3 0907 	sub.w	r9, r3, r7
 8010408:	60a3      	str	r3, [r4, #8]
 801040a:	6923      	ldr	r3, [r4, #16]
 801040c:	4620      	mov	r0, r4
 801040e:	f1c9 0a04 	rsb	sl, r9, #4
 8010412:	444b      	add	r3, r9
 8010414:	4651      	mov	r1, sl
 8010416:	6123      	str	r3, [r4, #16]
 8010418:	f000 fc64 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 801041c:	2800      	cmp	r0, #0
 801041e:	d048      	beq.n	80104b2 <ucdr_deserialize_endian_uint32_t+0xde>
 8010420:	2e01      	cmp	r6, #1
 8010422:	d061      	beq.n	80104e8 <ucdr_deserialize_endian_uint32_t+0x114>
 8010424:	78fb      	ldrb	r3, [r7, #3]
 8010426:	702b      	strb	r3, [r5, #0]
 8010428:	f1b9 0f00 	cmp.w	r9, #0
 801042c:	d050      	beq.n	80104d0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801042e:	78bb      	ldrb	r3, [r7, #2]
 8010430:	f1b9 0f01 	cmp.w	r9, #1
 8010434:	706b      	strb	r3, [r5, #1]
 8010436:	f105 0302 	add.w	r3, r5, #2
 801043a:	d04d      	beq.n	80104d8 <ucdr_deserialize_endian_uint32_t+0x104>
 801043c:	787b      	ldrb	r3, [r7, #1]
 801043e:	f1b9 0f02 	cmp.w	r9, #2
 8010442:	70ab      	strb	r3, [r5, #2]
 8010444:	f105 0303 	add.w	r3, r5, #3
 8010448:	d04a      	beq.n	80104e0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801044a:	783b      	ldrb	r3, [r7, #0]
 801044c:	70eb      	strb	r3, [r5, #3]
 801044e:	6923      	ldr	r3, [r4, #16]
 8010450:	2104      	movs	r1, #4
 8010452:	68a2      	ldr	r2, [r4, #8]
 8010454:	3304      	adds	r3, #4
 8010456:	7da0      	ldrb	r0, [r4, #22]
 8010458:	4452      	add	r2, sl
 801045a:	7561      	strb	r1, [r4, #21]
 801045c:	eba3 0309 	sub.w	r3, r3, r9
 8010460:	f080 0001 	eor.w	r0, r0, #1
 8010464:	60a2      	str	r2, [r4, #8]
 8010466:	6123      	str	r3, [r4, #16]
 8010468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801046c:	2104      	movs	r1, #4
 801046e:	4620      	mov	r0, r4
 8010470:	f000 fc38 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010474:	b1a8      	cbz	r0, 80104a2 <ucdr_deserialize_endian_uint32_t+0xce>
 8010476:	2e01      	cmp	r6, #1
 8010478:	68a3      	ldr	r3, [r4, #8]
 801047a:	d017      	beq.n	80104ac <ucdr_deserialize_endian_uint32_t+0xd8>
 801047c:	78db      	ldrb	r3, [r3, #3]
 801047e:	702b      	strb	r3, [r5, #0]
 8010480:	68a3      	ldr	r3, [r4, #8]
 8010482:	789b      	ldrb	r3, [r3, #2]
 8010484:	706b      	strb	r3, [r5, #1]
 8010486:	68a3      	ldr	r3, [r4, #8]
 8010488:	785b      	ldrb	r3, [r3, #1]
 801048a:	70ab      	strb	r3, [r5, #2]
 801048c:	68a3      	ldr	r3, [r4, #8]
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	70eb      	strb	r3, [r5, #3]
 8010492:	2104      	movs	r1, #4
 8010494:	68a2      	ldr	r2, [r4, #8]
 8010496:	6923      	ldr	r3, [r4, #16]
 8010498:	440a      	add	r2, r1
 801049a:	7561      	strb	r1, [r4, #21]
 801049c:	440b      	add	r3, r1
 801049e:	60a2      	str	r2, [r4, #8]
 80104a0:	6123      	str	r3, [r4, #16]
 80104a2:	7da0      	ldrb	r0, [r4, #22]
 80104a4:	f080 0001 	eor.w	r0, r0, #1
 80104a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	602b      	str	r3, [r5, #0]
 80104b0:	e7ef      	b.n	8010492 <ucdr_deserialize_endian_uint32_t+0xbe>
 80104b2:	68a2      	ldr	r2, [r4, #8]
 80104b4:	6923      	ldr	r3, [r4, #16]
 80104b6:	eba2 0209 	sub.w	r2, r2, r9
 80104ba:	7da0      	ldrb	r0, [r4, #22]
 80104bc:	eba3 0309 	sub.w	r3, r3, r9
 80104c0:	f884 8015 	strb.w	r8, [r4, #21]
 80104c4:	f080 0001 	eor.w	r0, r0, #1
 80104c8:	60a2      	str	r2, [r4, #8]
 80104ca:	6123      	str	r3, [r4, #16]
 80104cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104d0:	68a3      	ldr	r3, [r4, #8]
 80104d2:	789b      	ldrb	r3, [r3, #2]
 80104d4:	706b      	strb	r3, [r5, #1]
 80104d6:	1cab      	adds	r3, r5, #2
 80104d8:	68a2      	ldr	r2, [r4, #8]
 80104da:	7852      	ldrb	r2, [r2, #1]
 80104dc:	f803 2b01 	strb.w	r2, [r3], #1
 80104e0:	68a2      	ldr	r2, [r4, #8]
 80104e2:	7812      	ldrb	r2, [r2, #0]
 80104e4:	701a      	strb	r2, [r3, #0]
 80104e6:	e7b2      	b.n	801044e <ucdr_deserialize_endian_uint32_t+0x7a>
 80104e8:	4639      	mov	r1, r7
 80104ea:	464a      	mov	r2, r9
 80104ec:	4628      	mov	r0, r5
 80104ee:	f002 f87c 	bl	80125ea <memcpy>
 80104f2:	4652      	mov	r2, sl
 80104f4:	eb05 0009 	add.w	r0, r5, r9
 80104f8:	68a1      	ldr	r1, [r4, #8]
 80104fa:	f002 f876 	bl	80125ea <memcpy>
 80104fe:	e7a6      	b.n	801044e <ucdr_deserialize_endian_uint32_t+0x7a>

08010500 <ucdr_serialize_int32_t>:
 8010500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010504:	b082      	sub	sp, #8
 8010506:	4604      	mov	r4, r0
 8010508:	9101      	str	r1, [sp, #4]
 801050a:	2104      	movs	r1, #4
 801050c:	f000 fc0e 	bl	8010d2c <ucdr_buffer_alignment>
 8010510:	4601      	mov	r1, r0
 8010512:	4620      	mov	r0, r4
 8010514:	7d67      	ldrb	r7, [r4, #21]
 8010516:	f000 fc4d 	bl	8010db4 <ucdr_advance_buffer>
 801051a:	2104      	movs	r1, #4
 801051c:	4620      	mov	r0, r4
 801051e:	f000 fbd5 	bl	8010ccc <ucdr_check_buffer_available_for>
 8010522:	2800      	cmp	r0, #0
 8010524:	d139      	bne.n	801059a <ucdr_serialize_int32_t+0x9a>
 8010526:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801052a:	42ab      	cmp	r3, r5
 801052c:	d930      	bls.n	8010590 <ucdr_serialize_int32_t+0x90>
 801052e:	1b5e      	subs	r6, r3, r5
 8010530:	60a3      	str	r3, [r4, #8]
 8010532:	6923      	ldr	r3, [r4, #16]
 8010534:	4620      	mov	r0, r4
 8010536:	f1c6 0804 	rsb	r8, r6, #4
 801053a:	4433      	add	r3, r6
 801053c:	4641      	mov	r1, r8
 801053e:	6123      	str	r3, [r4, #16]
 8010540:	f000 fbd0 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010544:	2800      	cmp	r0, #0
 8010546:	d04c      	beq.n	80105e2 <ucdr_serialize_int32_t+0xe2>
 8010548:	7d23      	ldrb	r3, [r4, #20]
 801054a:	2b01      	cmp	r3, #1
 801054c:	d063      	beq.n	8010616 <ucdr_serialize_int32_t+0x116>
 801054e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010552:	702b      	strb	r3, [r5, #0]
 8010554:	2e00      	cmp	r6, #0
 8010556:	d051      	beq.n	80105fc <ucdr_serialize_int32_t+0xfc>
 8010558:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801055c:	2e01      	cmp	r6, #1
 801055e:	706b      	strb	r3, [r5, #1]
 8010560:	d050      	beq.n	8010604 <ucdr_serialize_int32_t+0x104>
 8010562:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010566:	2e02      	cmp	r6, #2
 8010568:	70ab      	strb	r3, [r5, #2]
 801056a:	d04f      	beq.n	801060c <ucdr_serialize_int32_t+0x10c>
 801056c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010570:	70eb      	strb	r3, [r5, #3]
 8010572:	6923      	ldr	r3, [r4, #16]
 8010574:	2104      	movs	r1, #4
 8010576:	68a2      	ldr	r2, [r4, #8]
 8010578:	3304      	adds	r3, #4
 801057a:	7da0      	ldrb	r0, [r4, #22]
 801057c:	4442      	add	r2, r8
 801057e:	7561      	strb	r1, [r4, #21]
 8010580:	1b9e      	subs	r6, r3, r6
 8010582:	f080 0001 	eor.w	r0, r0, #1
 8010586:	60a2      	str	r2, [r4, #8]
 8010588:	6126      	str	r6, [r4, #16]
 801058a:	b002      	add	sp, #8
 801058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010590:	2104      	movs	r1, #4
 8010592:	4620      	mov	r0, r4
 8010594:	f000 fba6 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010598:	b1d0      	cbz	r0, 80105d0 <ucdr_serialize_int32_t+0xd0>
 801059a:	7d23      	ldrb	r3, [r4, #20]
 801059c:	2b01      	cmp	r3, #1
 801059e:	68a3      	ldr	r3, [r4, #8]
 80105a0:	d01c      	beq.n	80105dc <ucdr_serialize_int32_t+0xdc>
 80105a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80105a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80105aa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80105ae:	7018      	strb	r0, [r3, #0]
 80105b0:	68a3      	ldr	r3, [r4, #8]
 80105b2:	705a      	strb	r2, [r3, #1]
 80105b4:	68a3      	ldr	r3, [r4, #8]
 80105b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80105ba:	7099      	strb	r1, [r3, #2]
 80105bc:	68a3      	ldr	r3, [r4, #8]
 80105be:	70da      	strb	r2, [r3, #3]
 80105c0:	2104      	movs	r1, #4
 80105c2:	68a2      	ldr	r2, [r4, #8]
 80105c4:	6923      	ldr	r3, [r4, #16]
 80105c6:	440a      	add	r2, r1
 80105c8:	7561      	strb	r1, [r4, #21]
 80105ca:	440b      	add	r3, r1
 80105cc:	60a2      	str	r2, [r4, #8]
 80105ce:	6123      	str	r3, [r4, #16]
 80105d0:	7da0      	ldrb	r0, [r4, #22]
 80105d2:	f080 0001 	eor.w	r0, r0, #1
 80105d6:	b002      	add	sp, #8
 80105d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105dc:	9a01      	ldr	r2, [sp, #4]
 80105de:	601a      	str	r2, [r3, #0]
 80105e0:	e7ee      	b.n	80105c0 <ucdr_serialize_int32_t+0xc0>
 80105e2:	68a2      	ldr	r2, [r4, #8]
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	7da0      	ldrb	r0, [r4, #22]
 80105e8:	1b92      	subs	r2, r2, r6
 80105ea:	1b9b      	subs	r3, r3, r6
 80105ec:	7567      	strb	r7, [r4, #21]
 80105ee:	f080 0001 	eor.w	r0, r0, #1
 80105f2:	60a2      	str	r2, [r4, #8]
 80105f4:	6123      	str	r3, [r4, #16]
 80105f6:	b002      	add	sp, #8
 80105f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105fc:	68a3      	ldr	r3, [r4, #8]
 80105fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010602:	701a      	strb	r2, [r3, #0]
 8010604:	68a3      	ldr	r3, [r4, #8]
 8010606:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801060a:	701a      	strb	r2, [r3, #0]
 801060c:	68a3      	ldr	r3, [r4, #8]
 801060e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010612:	701a      	strb	r2, [r3, #0]
 8010614:	e7ad      	b.n	8010572 <ucdr_serialize_int32_t+0x72>
 8010616:	4628      	mov	r0, r5
 8010618:	ad01      	add	r5, sp, #4
 801061a:	4632      	mov	r2, r6
 801061c:	4629      	mov	r1, r5
 801061e:	f001 ffe4 	bl	80125ea <memcpy>
 8010622:	4642      	mov	r2, r8
 8010624:	19a9      	adds	r1, r5, r6
 8010626:	68a0      	ldr	r0, [r4, #8]
 8010628:	f001 ffdf 	bl	80125ea <memcpy>
 801062c:	e7a1      	b.n	8010572 <ucdr_serialize_int32_t+0x72>
 801062e:	bf00      	nop

08010630 <ucdr_deserialize_int32_t>:
 8010630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010634:	4604      	mov	r4, r0
 8010636:	460d      	mov	r5, r1
 8010638:	2104      	movs	r1, #4
 801063a:	f000 fb77 	bl	8010d2c <ucdr_buffer_alignment>
 801063e:	4601      	mov	r1, r0
 8010640:	4620      	mov	r0, r4
 8010642:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010646:	f000 fbb5 	bl	8010db4 <ucdr_advance_buffer>
 801064a:	2104      	movs	r1, #4
 801064c:	4620      	mov	r0, r4
 801064e:	f000 fb3d 	bl	8010ccc <ucdr_check_buffer_available_for>
 8010652:	2800      	cmp	r0, #0
 8010654:	d138      	bne.n	80106c8 <ucdr_deserialize_int32_t+0x98>
 8010656:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801065a:	42b7      	cmp	r7, r6
 801065c:	d92f      	bls.n	80106be <ucdr_deserialize_int32_t+0x8e>
 801065e:	6923      	ldr	r3, [r4, #16]
 8010660:	4620      	mov	r0, r4
 8010662:	60a7      	str	r7, [r4, #8]
 8010664:	1bbf      	subs	r7, r7, r6
 8010666:	443b      	add	r3, r7
 8010668:	f1c7 0904 	rsb	r9, r7, #4
 801066c:	6123      	str	r3, [r4, #16]
 801066e:	4649      	mov	r1, r9
 8010670:	f000 fb38 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010674:	2800      	cmp	r0, #0
 8010676:	d046      	beq.n	8010706 <ucdr_deserialize_int32_t+0xd6>
 8010678:	7d23      	ldrb	r3, [r4, #20]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d05c      	beq.n	8010738 <ucdr_deserialize_int32_t+0x108>
 801067e:	78f3      	ldrb	r3, [r6, #3]
 8010680:	702b      	strb	r3, [r5, #0]
 8010682:	2f00      	cmp	r7, #0
 8010684:	d04c      	beq.n	8010720 <ucdr_deserialize_int32_t+0xf0>
 8010686:	78b3      	ldrb	r3, [r6, #2]
 8010688:	2f01      	cmp	r7, #1
 801068a:	706b      	strb	r3, [r5, #1]
 801068c:	f105 0302 	add.w	r3, r5, #2
 8010690:	d04a      	beq.n	8010728 <ucdr_deserialize_int32_t+0xf8>
 8010692:	7873      	ldrb	r3, [r6, #1]
 8010694:	2f02      	cmp	r7, #2
 8010696:	70ab      	strb	r3, [r5, #2]
 8010698:	f105 0303 	add.w	r3, r5, #3
 801069c:	d048      	beq.n	8010730 <ucdr_deserialize_int32_t+0x100>
 801069e:	7833      	ldrb	r3, [r6, #0]
 80106a0:	70eb      	strb	r3, [r5, #3]
 80106a2:	6923      	ldr	r3, [r4, #16]
 80106a4:	2104      	movs	r1, #4
 80106a6:	68a2      	ldr	r2, [r4, #8]
 80106a8:	3304      	adds	r3, #4
 80106aa:	7da0      	ldrb	r0, [r4, #22]
 80106ac:	444a      	add	r2, r9
 80106ae:	7561      	strb	r1, [r4, #21]
 80106b0:	1bdb      	subs	r3, r3, r7
 80106b2:	f080 0001 	eor.w	r0, r0, #1
 80106b6:	60a2      	str	r2, [r4, #8]
 80106b8:	6123      	str	r3, [r4, #16]
 80106ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106be:	2104      	movs	r1, #4
 80106c0:	4620      	mov	r0, r4
 80106c2:	f000 fb0f 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 80106c6:	b1b0      	cbz	r0, 80106f6 <ucdr_deserialize_int32_t+0xc6>
 80106c8:	7d23      	ldrb	r3, [r4, #20]
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	68a3      	ldr	r3, [r4, #8]
 80106ce:	d017      	beq.n	8010700 <ucdr_deserialize_int32_t+0xd0>
 80106d0:	78db      	ldrb	r3, [r3, #3]
 80106d2:	702b      	strb	r3, [r5, #0]
 80106d4:	68a3      	ldr	r3, [r4, #8]
 80106d6:	789b      	ldrb	r3, [r3, #2]
 80106d8:	706b      	strb	r3, [r5, #1]
 80106da:	68a3      	ldr	r3, [r4, #8]
 80106dc:	785b      	ldrb	r3, [r3, #1]
 80106de:	70ab      	strb	r3, [r5, #2]
 80106e0:	68a3      	ldr	r3, [r4, #8]
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	70eb      	strb	r3, [r5, #3]
 80106e6:	2104      	movs	r1, #4
 80106e8:	68a2      	ldr	r2, [r4, #8]
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	440a      	add	r2, r1
 80106ee:	7561      	strb	r1, [r4, #21]
 80106f0:	440b      	add	r3, r1
 80106f2:	60a2      	str	r2, [r4, #8]
 80106f4:	6123      	str	r3, [r4, #16]
 80106f6:	7da0      	ldrb	r0, [r4, #22]
 80106f8:	f080 0001 	eor.w	r0, r0, #1
 80106fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	602b      	str	r3, [r5, #0]
 8010704:	e7ef      	b.n	80106e6 <ucdr_deserialize_int32_t+0xb6>
 8010706:	68a2      	ldr	r2, [r4, #8]
 8010708:	6923      	ldr	r3, [r4, #16]
 801070a:	1bd2      	subs	r2, r2, r7
 801070c:	7da0      	ldrb	r0, [r4, #22]
 801070e:	1bdb      	subs	r3, r3, r7
 8010710:	f884 8015 	strb.w	r8, [r4, #21]
 8010714:	f080 0001 	eor.w	r0, r0, #1
 8010718:	60a2      	str	r2, [r4, #8]
 801071a:	6123      	str	r3, [r4, #16]
 801071c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010720:	68a3      	ldr	r3, [r4, #8]
 8010722:	789b      	ldrb	r3, [r3, #2]
 8010724:	706b      	strb	r3, [r5, #1]
 8010726:	1cab      	adds	r3, r5, #2
 8010728:	68a2      	ldr	r2, [r4, #8]
 801072a:	7852      	ldrb	r2, [r2, #1]
 801072c:	f803 2b01 	strb.w	r2, [r3], #1
 8010730:	68a2      	ldr	r2, [r4, #8]
 8010732:	7812      	ldrb	r2, [r2, #0]
 8010734:	701a      	strb	r2, [r3, #0]
 8010736:	e7b4      	b.n	80106a2 <ucdr_deserialize_int32_t+0x72>
 8010738:	4631      	mov	r1, r6
 801073a:	463a      	mov	r2, r7
 801073c:	4628      	mov	r0, r5
 801073e:	f001 ff54 	bl	80125ea <memcpy>
 8010742:	464a      	mov	r2, r9
 8010744:	19e8      	adds	r0, r5, r7
 8010746:	68a1      	ldr	r1, [r4, #8]
 8010748:	f001 ff4f 	bl	80125ea <memcpy>
 801074c:	e7a9      	b.n	80106a2 <ucdr_deserialize_int32_t+0x72>
 801074e:	bf00      	nop

08010750 <ucdr_serialize_float>:
 8010750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010754:	4604      	mov	r4, r0
 8010756:	b082      	sub	sp, #8
 8010758:	2104      	movs	r1, #4
 801075a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801075e:	f000 fae5 	bl	8010d2c <ucdr_buffer_alignment>
 8010762:	4601      	mov	r1, r0
 8010764:	4620      	mov	r0, r4
 8010766:	7d67      	ldrb	r7, [r4, #21]
 8010768:	f000 fb24 	bl	8010db4 <ucdr_advance_buffer>
 801076c:	2104      	movs	r1, #4
 801076e:	4620      	mov	r0, r4
 8010770:	f000 faac 	bl	8010ccc <ucdr_check_buffer_available_for>
 8010774:	2800      	cmp	r0, #0
 8010776:	d139      	bne.n	80107ec <ucdr_serialize_float+0x9c>
 8010778:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801077c:	42ab      	cmp	r3, r5
 801077e:	d930      	bls.n	80107e2 <ucdr_serialize_float+0x92>
 8010780:	1b5e      	subs	r6, r3, r5
 8010782:	60a3      	str	r3, [r4, #8]
 8010784:	6923      	ldr	r3, [r4, #16]
 8010786:	4620      	mov	r0, r4
 8010788:	f1c6 0804 	rsb	r8, r6, #4
 801078c:	4433      	add	r3, r6
 801078e:	4641      	mov	r1, r8
 8010790:	6123      	str	r3, [r4, #16]
 8010792:	f000 faa7 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010796:	2800      	cmp	r0, #0
 8010798:	d04c      	beq.n	8010834 <ucdr_serialize_float+0xe4>
 801079a:	7d23      	ldrb	r3, [r4, #20]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d063      	beq.n	8010868 <ucdr_serialize_float+0x118>
 80107a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107a4:	702b      	strb	r3, [r5, #0]
 80107a6:	2e00      	cmp	r6, #0
 80107a8:	d051      	beq.n	801084e <ucdr_serialize_float+0xfe>
 80107aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80107ae:	2e01      	cmp	r6, #1
 80107b0:	706b      	strb	r3, [r5, #1]
 80107b2:	d050      	beq.n	8010856 <ucdr_serialize_float+0x106>
 80107b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80107b8:	2e02      	cmp	r6, #2
 80107ba:	70ab      	strb	r3, [r5, #2]
 80107bc:	d04f      	beq.n	801085e <ucdr_serialize_float+0x10e>
 80107be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80107c2:	70eb      	strb	r3, [r5, #3]
 80107c4:	6923      	ldr	r3, [r4, #16]
 80107c6:	2104      	movs	r1, #4
 80107c8:	68a2      	ldr	r2, [r4, #8]
 80107ca:	3304      	adds	r3, #4
 80107cc:	7da0      	ldrb	r0, [r4, #22]
 80107ce:	4442      	add	r2, r8
 80107d0:	7561      	strb	r1, [r4, #21]
 80107d2:	1b9e      	subs	r6, r3, r6
 80107d4:	f080 0001 	eor.w	r0, r0, #1
 80107d8:	60a2      	str	r2, [r4, #8]
 80107da:	6126      	str	r6, [r4, #16]
 80107dc:	b002      	add	sp, #8
 80107de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e2:	2104      	movs	r1, #4
 80107e4:	4620      	mov	r0, r4
 80107e6:	f000 fa7d 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 80107ea:	b1d0      	cbz	r0, 8010822 <ucdr_serialize_float+0xd2>
 80107ec:	7d23      	ldrb	r3, [r4, #20]
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	68a3      	ldr	r3, [r4, #8]
 80107f2:	d01c      	beq.n	801082e <ucdr_serialize_float+0xde>
 80107f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80107f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80107fc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010800:	7018      	strb	r0, [r3, #0]
 8010802:	68a3      	ldr	r3, [r4, #8]
 8010804:	705a      	strb	r2, [r3, #1]
 8010806:	68a3      	ldr	r3, [r4, #8]
 8010808:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801080c:	7099      	strb	r1, [r3, #2]
 801080e:	68a3      	ldr	r3, [r4, #8]
 8010810:	70da      	strb	r2, [r3, #3]
 8010812:	2104      	movs	r1, #4
 8010814:	68a2      	ldr	r2, [r4, #8]
 8010816:	6923      	ldr	r3, [r4, #16]
 8010818:	440a      	add	r2, r1
 801081a:	7561      	strb	r1, [r4, #21]
 801081c:	440b      	add	r3, r1
 801081e:	60a2      	str	r2, [r4, #8]
 8010820:	6123      	str	r3, [r4, #16]
 8010822:	7da0      	ldrb	r0, [r4, #22]
 8010824:	f080 0001 	eor.w	r0, r0, #1
 8010828:	b002      	add	sp, #8
 801082a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801082e:	9a01      	ldr	r2, [sp, #4]
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	e7ee      	b.n	8010812 <ucdr_serialize_float+0xc2>
 8010834:	68a2      	ldr	r2, [r4, #8]
 8010836:	6923      	ldr	r3, [r4, #16]
 8010838:	7da0      	ldrb	r0, [r4, #22]
 801083a:	1b92      	subs	r2, r2, r6
 801083c:	1b9b      	subs	r3, r3, r6
 801083e:	7567      	strb	r7, [r4, #21]
 8010840:	f080 0001 	eor.w	r0, r0, #1
 8010844:	60a2      	str	r2, [r4, #8]
 8010846:	6123      	str	r3, [r4, #16]
 8010848:	b002      	add	sp, #8
 801084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084e:	68a3      	ldr	r3, [r4, #8]
 8010850:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010854:	701a      	strb	r2, [r3, #0]
 8010856:	68a3      	ldr	r3, [r4, #8]
 8010858:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801085c:	701a      	strb	r2, [r3, #0]
 801085e:	68a3      	ldr	r3, [r4, #8]
 8010860:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	e7ad      	b.n	80107c4 <ucdr_serialize_float+0x74>
 8010868:	4628      	mov	r0, r5
 801086a:	ad01      	add	r5, sp, #4
 801086c:	4632      	mov	r2, r6
 801086e:	4629      	mov	r1, r5
 8010870:	f001 febb 	bl	80125ea <memcpy>
 8010874:	4642      	mov	r2, r8
 8010876:	19a9      	adds	r1, r5, r6
 8010878:	68a0      	ldr	r0, [r4, #8]
 801087a:	f001 feb6 	bl	80125ea <memcpy>
 801087e:	e7a1      	b.n	80107c4 <ucdr_serialize_float+0x74>

08010880 <ucdr_deserialize_float>:
 8010880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010884:	4604      	mov	r4, r0
 8010886:	460d      	mov	r5, r1
 8010888:	2104      	movs	r1, #4
 801088a:	f000 fa4f 	bl	8010d2c <ucdr_buffer_alignment>
 801088e:	4601      	mov	r1, r0
 8010890:	4620      	mov	r0, r4
 8010892:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010896:	f000 fa8d 	bl	8010db4 <ucdr_advance_buffer>
 801089a:	2104      	movs	r1, #4
 801089c:	4620      	mov	r0, r4
 801089e:	f000 fa15 	bl	8010ccc <ucdr_check_buffer_available_for>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d138      	bne.n	8010918 <ucdr_deserialize_float+0x98>
 80108a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80108aa:	42b7      	cmp	r7, r6
 80108ac:	d92f      	bls.n	801090e <ucdr_deserialize_float+0x8e>
 80108ae:	6923      	ldr	r3, [r4, #16]
 80108b0:	4620      	mov	r0, r4
 80108b2:	60a7      	str	r7, [r4, #8]
 80108b4:	1bbf      	subs	r7, r7, r6
 80108b6:	443b      	add	r3, r7
 80108b8:	f1c7 0904 	rsb	r9, r7, #4
 80108bc:	6123      	str	r3, [r4, #16]
 80108be:	4649      	mov	r1, r9
 80108c0:	f000 fa10 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d046      	beq.n	8010956 <ucdr_deserialize_float+0xd6>
 80108c8:	7d23      	ldrb	r3, [r4, #20]
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d05c      	beq.n	8010988 <ucdr_deserialize_float+0x108>
 80108ce:	78f3      	ldrb	r3, [r6, #3]
 80108d0:	702b      	strb	r3, [r5, #0]
 80108d2:	2f00      	cmp	r7, #0
 80108d4:	d04c      	beq.n	8010970 <ucdr_deserialize_float+0xf0>
 80108d6:	78b3      	ldrb	r3, [r6, #2]
 80108d8:	2f01      	cmp	r7, #1
 80108da:	706b      	strb	r3, [r5, #1]
 80108dc:	f105 0302 	add.w	r3, r5, #2
 80108e0:	d04a      	beq.n	8010978 <ucdr_deserialize_float+0xf8>
 80108e2:	7873      	ldrb	r3, [r6, #1]
 80108e4:	2f02      	cmp	r7, #2
 80108e6:	70ab      	strb	r3, [r5, #2]
 80108e8:	f105 0303 	add.w	r3, r5, #3
 80108ec:	d048      	beq.n	8010980 <ucdr_deserialize_float+0x100>
 80108ee:	7833      	ldrb	r3, [r6, #0]
 80108f0:	70eb      	strb	r3, [r5, #3]
 80108f2:	6923      	ldr	r3, [r4, #16]
 80108f4:	2104      	movs	r1, #4
 80108f6:	68a2      	ldr	r2, [r4, #8]
 80108f8:	3304      	adds	r3, #4
 80108fa:	7da0      	ldrb	r0, [r4, #22]
 80108fc:	444a      	add	r2, r9
 80108fe:	7561      	strb	r1, [r4, #21]
 8010900:	1bdb      	subs	r3, r3, r7
 8010902:	f080 0001 	eor.w	r0, r0, #1
 8010906:	60a2      	str	r2, [r4, #8]
 8010908:	6123      	str	r3, [r4, #16]
 801090a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801090e:	2104      	movs	r1, #4
 8010910:	4620      	mov	r0, r4
 8010912:	f000 f9e7 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010916:	b1b0      	cbz	r0, 8010946 <ucdr_deserialize_float+0xc6>
 8010918:	7d23      	ldrb	r3, [r4, #20]
 801091a:	2b01      	cmp	r3, #1
 801091c:	68a3      	ldr	r3, [r4, #8]
 801091e:	d017      	beq.n	8010950 <ucdr_deserialize_float+0xd0>
 8010920:	78db      	ldrb	r3, [r3, #3]
 8010922:	702b      	strb	r3, [r5, #0]
 8010924:	68a3      	ldr	r3, [r4, #8]
 8010926:	789b      	ldrb	r3, [r3, #2]
 8010928:	706b      	strb	r3, [r5, #1]
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	785b      	ldrb	r3, [r3, #1]
 801092e:	70ab      	strb	r3, [r5, #2]
 8010930:	68a3      	ldr	r3, [r4, #8]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	70eb      	strb	r3, [r5, #3]
 8010936:	2104      	movs	r1, #4
 8010938:	68a2      	ldr	r2, [r4, #8]
 801093a:	6923      	ldr	r3, [r4, #16]
 801093c:	440a      	add	r2, r1
 801093e:	7561      	strb	r1, [r4, #21]
 8010940:	440b      	add	r3, r1
 8010942:	60a2      	str	r2, [r4, #8]
 8010944:	6123      	str	r3, [r4, #16]
 8010946:	7da0      	ldrb	r0, [r4, #22]
 8010948:	f080 0001 	eor.w	r0, r0, #1
 801094c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	602b      	str	r3, [r5, #0]
 8010954:	e7ef      	b.n	8010936 <ucdr_deserialize_float+0xb6>
 8010956:	68a2      	ldr	r2, [r4, #8]
 8010958:	6923      	ldr	r3, [r4, #16]
 801095a:	1bd2      	subs	r2, r2, r7
 801095c:	7da0      	ldrb	r0, [r4, #22]
 801095e:	1bdb      	subs	r3, r3, r7
 8010960:	f884 8015 	strb.w	r8, [r4, #21]
 8010964:	f080 0001 	eor.w	r0, r0, #1
 8010968:	60a2      	str	r2, [r4, #8]
 801096a:	6123      	str	r3, [r4, #16]
 801096c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010970:	68a3      	ldr	r3, [r4, #8]
 8010972:	789b      	ldrb	r3, [r3, #2]
 8010974:	706b      	strb	r3, [r5, #1]
 8010976:	1cab      	adds	r3, r5, #2
 8010978:	68a2      	ldr	r2, [r4, #8]
 801097a:	7852      	ldrb	r2, [r2, #1]
 801097c:	f803 2b01 	strb.w	r2, [r3], #1
 8010980:	68a2      	ldr	r2, [r4, #8]
 8010982:	7812      	ldrb	r2, [r2, #0]
 8010984:	701a      	strb	r2, [r3, #0]
 8010986:	e7b4      	b.n	80108f2 <ucdr_deserialize_float+0x72>
 8010988:	4631      	mov	r1, r6
 801098a:	463a      	mov	r2, r7
 801098c:	4628      	mov	r0, r5
 801098e:	f001 fe2c 	bl	80125ea <memcpy>
 8010992:	464a      	mov	r2, r9
 8010994:	19e8      	adds	r0, r5, r7
 8010996:	68a1      	ldr	r1, [r4, #8]
 8010998:	f001 fe27 	bl	80125ea <memcpy>
 801099c:	e7a9      	b.n	80108f2 <ucdr_deserialize_float+0x72>
 801099e:	bf00      	nop

080109a0 <ucdr_serialize_double>:
 80109a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a4:	4604      	mov	r4, r0
 80109a6:	b082      	sub	sp, #8
 80109a8:	2108      	movs	r1, #8
 80109aa:	ed8d 0b00 	vstr	d0, [sp]
 80109ae:	f000 f9bd 	bl	8010d2c <ucdr_buffer_alignment>
 80109b2:	4601      	mov	r1, r0
 80109b4:	4620      	mov	r0, r4
 80109b6:	7d67      	ldrb	r7, [r4, #21]
 80109b8:	f000 f9fc 	bl	8010db4 <ucdr_advance_buffer>
 80109bc:	2108      	movs	r1, #8
 80109be:	4620      	mov	r0, r4
 80109c0:	f000 f984 	bl	8010ccc <ucdr_check_buffer_available_for>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d14e      	bne.n	8010a66 <ucdr_serialize_double+0xc6>
 80109c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80109cc:	42ab      	cmp	r3, r5
 80109ce:	d945      	bls.n	8010a5c <ucdr_serialize_double+0xbc>
 80109d0:	1b5e      	subs	r6, r3, r5
 80109d2:	60a3      	str	r3, [r4, #8]
 80109d4:	6923      	ldr	r3, [r4, #16]
 80109d6:	4620      	mov	r0, r4
 80109d8:	f1c6 0808 	rsb	r8, r6, #8
 80109dc:	4433      	add	r3, r6
 80109de:	4641      	mov	r1, r8
 80109e0:	6123      	str	r3, [r4, #16]
 80109e2:	f000 f97f 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d074      	beq.n	8010ad4 <ucdr_serialize_double+0x134>
 80109ea:	7d23      	ldrb	r3, [r4, #20]
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	f000 809b 	beq.w	8010b28 <ucdr_serialize_double+0x188>
 80109f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80109f6:	702b      	strb	r3, [r5, #0]
 80109f8:	2e00      	cmp	r6, #0
 80109fa:	d078      	beq.n	8010aee <ucdr_serialize_double+0x14e>
 80109fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010a00:	2e01      	cmp	r6, #1
 8010a02:	706b      	strb	r3, [r5, #1]
 8010a04:	d077      	beq.n	8010af6 <ucdr_serialize_double+0x156>
 8010a06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010a0a:	2e02      	cmp	r6, #2
 8010a0c:	70ab      	strb	r3, [r5, #2]
 8010a0e:	d076      	beq.n	8010afe <ucdr_serialize_double+0x15e>
 8010a10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a14:	2e03      	cmp	r6, #3
 8010a16:	70eb      	strb	r3, [r5, #3]
 8010a18:	d075      	beq.n	8010b06 <ucdr_serialize_double+0x166>
 8010a1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010a1e:	2e04      	cmp	r6, #4
 8010a20:	712b      	strb	r3, [r5, #4]
 8010a22:	d074      	beq.n	8010b0e <ucdr_serialize_double+0x16e>
 8010a24:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010a28:	2e05      	cmp	r6, #5
 8010a2a:	716b      	strb	r3, [r5, #5]
 8010a2c:	d073      	beq.n	8010b16 <ucdr_serialize_double+0x176>
 8010a2e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010a32:	2e06      	cmp	r6, #6
 8010a34:	71ab      	strb	r3, [r5, #6]
 8010a36:	d072      	beq.n	8010b1e <ucdr_serialize_double+0x17e>
 8010a38:	f89d 3000 	ldrb.w	r3, [sp]
 8010a3c:	71eb      	strb	r3, [r5, #7]
 8010a3e:	6923      	ldr	r3, [r4, #16]
 8010a40:	2108      	movs	r1, #8
 8010a42:	68a2      	ldr	r2, [r4, #8]
 8010a44:	3308      	adds	r3, #8
 8010a46:	7da0      	ldrb	r0, [r4, #22]
 8010a48:	4442      	add	r2, r8
 8010a4a:	7561      	strb	r1, [r4, #21]
 8010a4c:	1b9e      	subs	r6, r3, r6
 8010a4e:	f080 0001 	eor.w	r0, r0, #1
 8010a52:	60a2      	str	r2, [r4, #8]
 8010a54:	6126      	str	r6, [r4, #16]
 8010a56:	b002      	add	sp, #8
 8010a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a5c:	2108      	movs	r1, #8
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f000 f940 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010a64:	b350      	cbz	r0, 8010abc <ucdr_serialize_double+0x11c>
 8010a66:	7d23      	ldrb	r3, [r4, #20]
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d02d      	beq.n	8010ac8 <ucdr_serialize_double+0x128>
 8010a6c:	68a3      	ldr	r3, [r4, #8]
 8010a6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010a72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a76:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010a7a:	7018      	strb	r0, [r3, #0]
 8010a7c:	68a3      	ldr	r3, [r4, #8]
 8010a7e:	705a      	strb	r2, [r3, #1]
 8010a80:	68a3      	ldr	r3, [r4, #8]
 8010a82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010a86:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010a8a:	7099      	strb	r1, [r3, #2]
 8010a8c:	68a3      	ldr	r3, [r4, #8]
 8010a8e:	70da      	strb	r2, [r3, #3]
 8010a90:	68a3      	ldr	r3, [r4, #8]
 8010a92:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010a96:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010a9a:	7118      	strb	r0, [r3, #4]
 8010a9c:	68a3      	ldr	r3, [r4, #8]
 8010a9e:	715a      	strb	r2, [r3, #5]
 8010aa0:	68a3      	ldr	r3, [r4, #8]
 8010aa2:	f89d 2000 	ldrb.w	r2, [sp]
 8010aa6:	7199      	strb	r1, [r3, #6]
 8010aa8:	68a3      	ldr	r3, [r4, #8]
 8010aaa:	71da      	strb	r2, [r3, #7]
 8010aac:	2108      	movs	r1, #8
 8010aae:	68a2      	ldr	r2, [r4, #8]
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	440a      	add	r2, r1
 8010ab4:	7561      	strb	r1, [r4, #21]
 8010ab6:	440b      	add	r3, r1
 8010ab8:	60a2      	str	r2, [r4, #8]
 8010aba:	6123      	str	r3, [r4, #16]
 8010abc:	7da0      	ldrb	r0, [r4, #22]
 8010abe:	f080 0001 	eor.w	r0, r0, #1
 8010ac2:	b002      	add	sp, #8
 8010ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac8:	466b      	mov	r3, sp
 8010aca:	68a2      	ldr	r2, [r4, #8]
 8010acc:	cb03      	ldmia	r3!, {r0, r1}
 8010ace:	6010      	str	r0, [r2, #0]
 8010ad0:	6051      	str	r1, [r2, #4]
 8010ad2:	e7eb      	b.n	8010aac <ucdr_serialize_double+0x10c>
 8010ad4:	68a2      	ldr	r2, [r4, #8]
 8010ad6:	6923      	ldr	r3, [r4, #16]
 8010ad8:	7da0      	ldrb	r0, [r4, #22]
 8010ada:	1b92      	subs	r2, r2, r6
 8010adc:	1b9b      	subs	r3, r3, r6
 8010ade:	7567      	strb	r7, [r4, #21]
 8010ae0:	f080 0001 	eor.w	r0, r0, #1
 8010ae4:	60a2      	str	r2, [r4, #8]
 8010ae6:	6123      	str	r3, [r4, #16]
 8010ae8:	b002      	add	sp, #8
 8010aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aee:	68a3      	ldr	r3, [r4, #8]
 8010af0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010af4:	701a      	strb	r2, [r3, #0]
 8010af6:	68a3      	ldr	r3, [r4, #8]
 8010af8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010afc:	701a      	strb	r2, [r3, #0]
 8010afe:	68a3      	ldr	r3, [r4, #8]
 8010b00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010b04:	701a      	strb	r2, [r3, #0]
 8010b06:	68a3      	ldr	r3, [r4, #8]
 8010b08:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010b0c:	701a      	strb	r2, [r3, #0]
 8010b0e:	68a3      	ldr	r3, [r4, #8]
 8010b10:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010b14:	701a      	strb	r2, [r3, #0]
 8010b16:	68a3      	ldr	r3, [r4, #8]
 8010b18:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010b1c:	701a      	strb	r2, [r3, #0]
 8010b1e:	68a3      	ldr	r3, [r4, #8]
 8010b20:	f89d 2000 	ldrb.w	r2, [sp]
 8010b24:	701a      	strb	r2, [r3, #0]
 8010b26:	e78a      	b.n	8010a3e <ucdr_serialize_double+0x9e>
 8010b28:	4628      	mov	r0, r5
 8010b2a:	466d      	mov	r5, sp
 8010b2c:	4632      	mov	r2, r6
 8010b2e:	4629      	mov	r1, r5
 8010b30:	f001 fd5b 	bl	80125ea <memcpy>
 8010b34:	4642      	mov	r2, r8
 8010b36:	19a9      	adds	r1, r5, r6
 8010b38:	68a0      	ldr	r0, [r4, #8]
 8010b3a:	f001 fd56 	bl	80125ea <memcpy>
 8010b3e:	e77e      	b.n	8010a3e <ucdr_serialize_double+0x9e>

08010b40 <ucdr_deserialize_double>:
 8010b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b44:	4604      	mov	r4, r0
 8010b46:	460d      	mov	r5, r1
 8010b48:	2108      	movs	r1, #8
 8010b4a:	f000 f8ef 	bl	8010d2c <ucdr_buffer_alignment>
 8010b4e:	4601      	mov	r1, r0
 8010b50:	4620      	mov	r0, r4
 8010b52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010b56:	f000 f92d 	bl	8010db4 <ucdr_advance_buffer>
 8010b5a:	2108      	movs	r1, #8
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	f000 f8b5 	bl	8010ccc <ucdr_check_buffer_available_for>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d151      	bne.n	8010c0a <ucdr_deserialize_double+0xca>
 8010b66:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010b6a:	42be      	cmp	r6, r7
 8010b6c:	d948      	bls.n	8010c00 <ucdr_deserialize_double+0xc0>
 8010b6e:	6923      	ldr	r3, [r4, #16]
 8010b70:	4620      	mov	r0, r4
 8010b72:	60a6      	str	r6, [r4, #8]
 8010b74:	1bf6      	subs	r6, r6, r7
 8010b76:	4433      	add	r3, r6
 8010b78:	f1c6 0908 	rsb	r9, r6, #8
 8010b7c:	6123      	str	r3, [r4, #16]
 8010b7e:	4649      	mov	r1, r9
 8010b80:	f000 f8b0 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	d06d      	beq.n	8010c64 <ucdr_deserialize_double+0x124>
 8010b88:	7d23      	ldrb	r3, [r4, #20]
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	f000 8093 	beq.w	8010cb6 <ucdr_deserialize_double+0x176>
 8010b90:	79fb      	ldrb	r3, [r7, #7]
 8010b92:	702b      	strb	r3, [r5, #0]
 8010b94:	2e00      	cmp	r6, #0
 8010b96:	d072      	beq.n	8010c7e <ucdr_deserialize_double+0x13e>
 8010b98:	79bb      	ldrb	r3, [r7, #6]
 8010b9a:	2e01      	cmp	r6, #1
 8010b9c:	706b      	strb	r3, [r5, #1]
 8010b9e:	f105 0302 	add.w	r3, r5, #2
 8010ba2:	d070      	beq.n	8010c86 <ucdr_deserialize_double+0x146>
 8010ba4:	797b      	ldrb	r3, [r7, #5]
 8010ba6:	2e02      	cmp	r6, #2
 8010ba8:	70ab      	strb	r3, [r5, #2]
 8010baa:	f105 0303 	add.w	r3, r5, #3
 8010bae:	d06e      	beq.n	8010c8e <ucdr_deserialize_double+0x14e>
 8010bb0:	793b      	ldrb	r3, [r7, #4]
 8010bb2:	2e03      	cmp	r6, #3
 8010bb4:	70eb      	strb	r3, [r5, #3]
 8010bb6:	f105 0304 	add.w	r3, r5, #4
 8010bba:	d06c      	beq.n	8010c96 <ucdr_deserialize_double+0x156>
 8010bbc:	78fb      	ldrb	r3, [r7, #3]
 8010bbe:	2e04      	cmp	r6, #4
 8010bc0:	712b      	strb	r3, [r5, #4]
 8010bc2:	f105 0305 	add.w	r3, r5, #5
 8010bc6:	d06a      	beq.n	8010c9e <ucdr_deserialize_double+0x15e>
 8010bc8:	78bb      	ldrb	r3, [r7, #2]
 8010bca:	2e05      	cmp	r6, #5
 8010bcc:	716b      	strb	r3, [r5, #5]
 8010bce:	f105 0306 	add.w	r3, r5, #6
 8010bd2:	d068      	beq.n	8010ca6 <ucdr_deserialize_double+0x166>
 8010bd4:	787b      	ldrb	r3, [r7, #1]
 8010bd6:	2e06      	cmp	r6, #6
 8010bd8:	71ab      	strb	r3, [r5, #6]
 8010bda:	f105 0307 	add.w	r3, r5, #7
 8010bde:	d066      	beq.n	8010cae <ucdr_deserialize_double+0x16e>
 8010be0:	783b      	ldrb	r3, [r7, #0]
 8010be2:	71eb      	strb	r3, [r5, #7]
 8010be4:	6923      	ldr	r3, [r4, #16]
 8010be6:	2108      	movs	r1, #8
 8010be8:	68a2      	ldr	r2, [r4, #8]
 8010bea:	3308      	adds	r3, #8
 8010bec:	7da0      	ldrb	r0, [r4, #22]
 8010bee:	444a      	add	r2, r9
 8010bf0:	7561      	strb	r1, [r4, #21]
 8010bf2:	1b9e      	subs	r6, r3, r6
 8010bf4:	f080 0001 	eor.w	r0, r0, #1
 8010bf8:	60a2      	str	r2, [r4, #8]
 8010bfa:	6126      	str	r6, [r4, #16]
 8010bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c00:	2108      	movs	r1, #8
 8010c02:	4620      	mov	r0, r4
 8010c04:	f000 f86e 	bl	8010ce4 <ucdr_check_final_buffer_behavior>
 8010c08:	b310      	cbz	r0, 8010c50 <ucdr_deserialize_double+0x110>
 8010c0a:	7d23      	ldrb	r3, [r4, #20]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	68a3      	ldr	r3, [r4, #8]
 8010c10:	d023      	beq.n	8010c5a <ucdr_deserialize_double+0x11a>
 8010c12:	79db      	ldrb	r3, [r3, #7]
 8010c14:	702b      	strb	r3, [r5, #0]
 8010c16:	68a3      	ldr	r3, [r4, #8]
 8010c18:	799b      	ldrb	r3, [r3, #6]
 8010c1a:	706b      	strb	r3, [r5, #1]
 8010c1c:	68a3      	ldr	r3, [r4, #8]
 8010c1e:	795b      	ldrb	r3, [r3, #5]
 8010c20:	70ab      	strb	r3, [r5, #2]
 8010c22:	68a3      	ldr	r3, [r4, #8]
 8010c24:	791b      	ldrb	r3, [r3, #4]
 8010c26:	70eb      	strb	r3, [r5, #3]
 8010c28:	68a3      	ldr	r3, [r4, #8]
 8010c2a:	78db      	ldrb	r3, [r3, #3]
 8010c2c:	712b      	strb	r3, [r5, #4]
 8010c2e:	68a3      	ldr	r3, [r4, #8]
 8010c30:	789b      	ldrb	r3, [r3, #2]
 8010c32:	716b      	strb	r3, [r5, #5]
 8010c34:	68a3      	ldr	r3, [r4, #8]
 8010c36:	785b      	ldrb	r3, [r3, #1]
 8010c38:	71ab      	strb	r3, [r5, #6]
 8010c3a:	68a3      	ldr	r3, [r4, #8]
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	71eb      	strb	r3, [r5, #7]
 8010c40:	2108      	movs	r1, #8
 8010c42:	68a2      	ldr	r2, [r4, #8]
 8010c44:	6923      	ldr	r3, [r4, #16]
 8010c46:	440a      	add	r2, r1
 8010c48:	7561      	strb	r1, [r4, #21]
 8010c4a:	440b      	add	r3, r1
 8010c4c:	60a2      	str	r2, [r4, #8]
 8010c4e:	6123      	str	r3, [r4, #16]
 8010c50:	7da0      	ldrb	r0, [r4, #22]
 8010c52:	f080 0001 	eor.w	r0, r0, #1
 8010c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	602a      	str	r2, [r5, #0]
 8010c60:	606b      	str	r3, [r5, #4]
 8010c62:	e7ed      	b.n	8010c40 <ucdr_deserialize_double+0x100>
 8010c64:	68a2      	ldr	r2, [r4, #8]
 8010c66:	6923      	ldr	r3, [r4, #16]
 8010c68:	1b92      	subs	r2, r2, r6
 8010c6a:	7da0      	ldrb	r0, [r4, #22]
 8010c6c:	1b9b      	subs	r3, r3, r6
 8010c6e:	f884 8015 	strb.w	r8, [r4, #21]
 8010c72:	f080 0001 	eor.w	r0, r0, #1
 8010c76:	60a2      	str	r2, [r4, #8]
 8010c78:	6123      	str	r3, [r4, #16]
 8010c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c7e:	68a3      	ldr	r3, [r4, #8]
 8010c80:	799b      	ldrb	r3, [r3, #6]
 8010c82:	706b      	strb	r3, [r5, #1]
 8010c84:	1cab      	adds	r3, r5, #2
 8010c86:	68a2      	ldr	r2, [r4, #8]
 8010c88:	7952      	ldrb	r2, [r2, #5]
 8010c8a:	f803 2b01 	strb.w	r2, [r3], #1
 8010c8e:	68a2      	ldr	r2, [r4, #8]
 8010c90:	7912      	ldrb	r2, [r2, #4]
 8010c92:	f803 2b01 	strb.w	r2, [r3], #1
 8010c96:	68a2      	ldr	r2, [r4, #8]
 8010c98:	78d2      	ldrb	r2, [r2, #3]
 8010c9a:	f803 2b01 	strb.w	r2, [r3], #1
 8010c9e:	68a2      	ldr	r2, [r4, #8]
 8010ca0:	7892      	ldrb	r2, [r2, #2]
 8010ca2:	f803 2b01 	strb.w	r2, [r3], #1
 8010ca6:	68a2      	ldr	r2, [r4, #8]
 8010ca8:	7852      	ldrb	r2, [r2, #1]
 8010caa:	f803 2b01 	strb.w	r2, [r3], #1
 8010cae:	68a2      	ldr	r2, [r4, #8]
 8010cb0:	7812      	ldrb	r2, [r2, #0]
 8010cb2:	701a      	strb	r2, [r3, #0]
 8010cb4:	e796      	b.n	8010be4 <ucdr_deserialize_double+0xa4>
 8010cb6:	4639      	mov	r1, r7
 8010cb8:	4632      	mov	r2, r6
 8010cba:	4628      	mov	r0, r5
 8010cbc:	f001 fc95 	bl	80125ea <memcpy>
 8010cc0:	464a      	mov	r2, r9
 8010cc2:	19a8      	adds	r0, r5, r6
 8010cc4:	68a1      	ldr	r1, [r4, #8]
 8010cc6:	f001 fc90 	bl	80125ea <memcpy>
 8010cca:	e78b      	b.n	8010be4 <ucdr_deserialize_double+0xa4>

08010ccc <ucdr_check_buffer_available_for>:
 8010ccc:	7d83      	ldrb	r3, [r0, #22]
 8010cce:	b93b      	cbnz	r3, 8010ce0 <ucdr_check_buffer_available_for+0x14>
 8010cd0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010cd4:	4419      	add	r1, r3
 8010cd6:	4288      	cmp	r0, r1
 8010cd8:	bf34      	ite	cc
 8010cda:	2000      	movcc	r0, #0
 8010cdc:	2001      	movcs	r0, #1
 8010cde:	4770      	bx	lr
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	4770      	bx	lr

08010ce4 <ucdr_check_final_buffer_behavior>:
 8010ce4:	7d83      	ldrb	r3, [r0, #22]
 8010ce6:	b943      	cbnz	r3, 8010cfa <ucdr_check_final_buffer_behavior+0x16>
 8010ce8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010cec:	b510      	push	{r4, lr}
 8010cee:	4291      	cmp	r1, r2
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	d205      	bcs.n	8010d00 <ucdr_check_final_buffer_behavior+0x1c>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	bd10      	pop	{r4, pc}
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	4770      	bx	lr
 8010d00:	6982      	ldr	r2, [r0, #24]
 8010d02:	b13a      	cbz	r2, 8010d14 <ucdr_check_final_buffer_behavior+0x30>
 8010d04:	69c1      	ldr	r1, [r0, #28]
 8010d06:	4790      	blx	r2
 8010d08:	f080 0301 	eor.w	r3, r0, #1
 8010d0c:	75a0      	strb	r0, [r4, #22]
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	4618      	mov	r0, r3
 8010d12:	bd10      	pop	{r4, pc}
 8010d14:	2001      	movs	r0, #1
 8010d16:	75a0      	strb	r0, [r4, #22]
 8010d18:	e7fa      	b.n	8010d10 <ucdr_check_final_buffer_behavior+0x2c>
 8010d1a:	bf00      	nop

08010d1c <ucdr_alignment>:
 8010d1c:	fbb0 f2f1 	udiv	r2, r0, r1
 8010d20:	fb02 0011 	mls	r0, r2, r1, r0
 8010d24:	1e4b      	subs	r3, r1, #1
 8010d26:	1a08      	subs	r0, r1, r0
 8010d28:	4018      	ands	r0, r3
 8010d2a:	4770      	bx	lr

08010d2c <ucdr_buffer_alignment>:
 8010d2c:	7d43      	ldrb	r3, [r0, #21]
 8010d2e:	428b      	cmp	r3, r1
 8010d30:	d209      	bcs.n	8010d46 <ucdr_buffer_alignment+0x1a>
 8010d32:	6903      	ldr	r3, [r0, #16]
 8010d34:	1e4a      	subs	r2, r1, #1
 8010d36:	fbb3 f0f1 	udiv	r0, r3, r1
 8010d3a:	fb01 3010 	mls	r0, r1, r0, r3
 8010d3e:	1a09      	subs	r1, r1, r0
 8010d40:	ea01 0002 	and.w	r0, r1, r2
 8010d44:	4770      	bx	lr
 8010d46:	2000      	movs	r0, #0
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop

08010d4c <ucdr_align_to>:
 8010d4c:	b538      	push	{r3, r4, r5, lr}
 8010d4e:	4604      	mov	r4, r0
 8010d50:	460d      	mov	r5, r1
 8010d52:	f7ff ffeb 	bl	8010d2c <ucdr_buffer_alignment>
 8010d56:	68a3      	ldr	r3, [r4, #8]
 8010d58:	7565      	strb	r5, [r4, #21]
 8010d5a:	181a      	adds	r2, r3, r0
 8010d5c:	6923      	ldr	r3, [r4, #16]
 8010d5e:	4418      	add	r0, r3
 8010d60:	6863      	ldr	r3, [r4, #4]
 8010d62:	4293      	cmp	r3, r2
 8010d64:	6120      	str	r0, [r4, #16]
 8010d66:	bf28      	it	cs
 8010d68:	4613      	movcs	r3, r2
 8010d6a:	60a3      	str	r3, [r4, #8]
 8010d6c:	bd38      	pop	{r3, r4, r5, pc}
 8010d6e:	bf00      	nop

08010d70 <ucdr_buffer_remaining>:
 8010d70:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010d74:	1a10      	subs	r0, r2, r0
 8010d76:	4770      	bx	lr

08010d78 <ucdr_check_final_buffer_behavior_array>:
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	7d83      	ldrb	r3, [r0, #22]
 8010d7c:	b9a3      	cbnz	r3, 8010da8 <ucdr_check_final_buffer_behavior_array+0x30>
 8010d7e:	4604      	mov	r4, r0
 8010d80:	460d      	mov	r5, r1
 8010d82:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d300      	bcc.n	8010d8c <ucdr_check_final_buffer_behavior_array+0x14>
 8010d8a:	b931      	cbnz	r1, 8010d9a <ucdr_check_final_buffer_behavior_array+0x22>
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f7ff ffef 	bl	8010d70 <ucdr_buffer_remaining>
 8010d92:	42a8      	cmp	r0, r5
 8010d94:	bf28      	it	cs
 8010d96:	4628      	movcs	r0, r5
 8010d98:	bd38      	pop	{r3, r4, r5, pc}
 8010d9a:	6983      	ldr	r3, [r0, #24]
 8010d9c:	b133      	cbz	r3, 8010dac <ucdr_check_final_buffer_behavior_array+0x34>
 8010d9e:	69c1      	ldr	r1, [r0, #28]
 8010da0:	4798      	blx	r3
 8010da2:	75a0      	strb	r0, [r4, #22]
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d0f1      	beq.n	8010d8c <ucdr_check_final_buffer_behavior_array+0x14>
 8010da8:	2000      	movs	r0, #0
 8010daa:	bd38      	pop	{r3, r4, r5, pc}
 8010dac:	2301      	movs	r3, #1
 8010dae:	7583      	strb	r3, [r0, #22]
 8010db0:	e7fa      	b.n	8010da8 <ucdr_check_final_buffer_behavior_array+0x30>
 8010db2:	bf00      	nop

08010db4 <ucdr_advance_buffer>:
 8010db4:	b538      	push	{r3, r4, r5, lr}
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff ff87 	bl	8010ccc <ucdr_check_buffer_available_for>
 8010dbe:	b178      	cbz	r0, 8010de0 <ucdr_advance_buffer+0x2c>
 8010dc0:	6923      	ldr	r3, [r4, #16]
 8010dc2:	68a2      	ldr	r2, [r4, #8]
 8010dc4:	442b      	add	r3, r5
 8010dc6:	442a      	add	r2, r5
 8010dc8:	6123      	str	r3, [r4, #16]
 8010dca:	2301      	movs	r3, #1
 8010dcc:	60a2      	str	r2, [r4, #8]
 8010dce:	7563      	strb	r3, [r4, #21]
 8010dd0:	bd38      	pop	{r3, r4, r5, pc}
 8010dd2:	68a2      	ldr	r2, [r4, #8]
 8010dd4:	1a2d      	subs	r5, r5, r0
 8010dd6:	6923      	ldr	r3, [r4, #16]
 8010dd8:	4402      	add	r2, r0
 8010dda:	4418      	add	r0, r3
 8010ddc:	60a2      	str	r2, [r4, #8]
 8010dde:	6120      	str	r0, [r4, #16]
 8010de0:	4629      	mov	r1, r5
 8010de2:	2201      	movs	r2, #1
 8010de4:	4620      	mov	r0, r4
 8010de6:	f7ff ffc7 	bl	8010d78 <ucdr_check_final_buffer_behavior_array>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	d1f1      	bne.n	8010dd2 <ucdr_advance_buffer+0x1e>
 8010dee:	2301      	movs	r3, #1
 8010df0:	7563      	strb	r3, [r4, #21]
 8010df2:	bd38      	pop	{r3, r4, r5, pc}

08010df4 <__default_zero_allocate>:
 8010df4:	f001 b802 	b.w	8011dfc <calloc>

08010df8 <__default_reallocate>:
 8010df8:	f001 b8ec 	b.w	8011fd4 <realloc>

08010dfc <__default_deallocate>:
 8010dfc:	f001 b834 	b.w	8011e68 <free>

08010e00 <__default_allocate>:
 8010e00:	f001 b82a 	b.w	8011e58 <malloc>

08010e04 <rcutils_get_default_allocator>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	4c05      	ldr	r4, [pc, #20]	@ (8010e1c <rcutils_get_default_allocator+0x18>)
 8010e08:	4686      	mov	lr, r0
 8010e0a:	4684      	mov	ip, r0
 8010e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	4670      	mov	r0, lr
 8010e16:	f8cc 3000 	str.w	r3, [ip]
 8010e1a:	bd10      	pop	{r4, pc}
 8010e1c:	24000df8 	.word	0x24000df8

08010e20 <get_message_typesupport_handle_function>:
 8010e20:	b510      	push	{r4, lr}
 8010e22:	4604      	mov	r4, r0
 8010e24:	6800      	ldr	r0, [r0, #0]
 8010e26:	f7ef fa5b 	bl	80002e0 <strcmp>
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	bf0c      	ite	eq
 8010e2e:	4620      	moveq	r0, r4
 8010e30:	2000      	movne	r0, #0
 8010e32:	bd10      	pop	{r4, pc}

08010e34 <get_service_typesupport_handle_function>:
 8010e34:	b510      	push	{r4, lr}
 8010e36:	4604      	mov	r4, r0
 8010e38:	6800      	ldr	r0, [r0, #0]
 8010e3a:	f7ef fa51 	bl	80002e0 <strcmp>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	bf0c      	ite	eq
 8010e42:	4620      	moveq	r0, r4
 8010e44:	2000      	movne	r0, #0
 8010e46:	bd10      	pop	{r4, pc}

08010e48 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4c:	6805      	ldr	r5, [r0, #0]
 8010e4e:	4604      	mov	r4, r0
 8010e50:	460e      	mov	r6, r1
 8010e52:	4628      	mov	r0, r5
 8010e54:	f7ef fa44 	bl	80002e0 <strcmp>
 8010e58:	b1c8      	cbz	r0, 8010e8e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8010e5a:	4b11      	ldr	r3, [pc, #68]	@ (8010ea0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	429d      	cmp	r5, r3
 8010e60:	d112      	bne.n	8010e88 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010e62:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010e66:	f8d8 4000 	ldr.w	r4, [r8]
 8010e6a:	b16c      	cbz	r4, 8010e88 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010e6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010e70:	2700      	movs	r7, #0
 8010e72:	3d04      	subs	r5, #4
 8010e74:	4631      	mov	r1, r6
 8010e76:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010e7a:	f7ef fa31 	bl	80002e0 <strcmp>
 8010e7e:	00bb      	lsls	r3, r7, #2
 8010e80:	b140      	cbz	r0, 8010e94 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8010e82:	3701      	adds	r7, #1
 8010e84:	42bc      	cmp	r4, r7
 8010e86:	d1f5      	bne.n	8010e74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e8e:	4620      	mov	r0, r4
 8010e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9c:	58d3      	ldr	r3, [r2, r3]
 8010e9e:	4718      	bx	r3
 8010ea0:	24000e0c 	.word	0x24000e0c

08010ea4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8010ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea8:	6805      	ldr	r5, [r0, #0]
 8010eaa:	4604      	mov	r4, r0
 8010eac:	460e      	mov	r6, r1
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f7ef fa16 	bl	80002e0 <strcmp>
 8010eb4:	b1c8      	cbz	r0, 8010eea <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8010eb6:	4b11      	ldr	r3, [pc, #68]	@ (8010efc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	429d      	cmp	r5, r3
 8010ebc:	d112      	bne.n	8010ee4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8010ebe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010ec2:	f8d8 4000 	ldr.w	r4, [r8]
 8010ec6:	b16c      	cbz	r4, 8010ee4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8010ec8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010ecc:	2700      	movs	r7, #0
 8010ece:	3d04      	subs	r5, #4
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010ed6:	f7ef fa03 	bl	80002e0 <strcmp>
 8010eda:	00bb      	lsls	r3, r7, #2
 8010edc:	b140      	cbz	r0, 8010ef0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8010ede:	3701      	adds	r7, #1
 8010ee0:	42bc      	cmp	r4, r7
 8010ee2:	d1f5      	bne.n	8010ed0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eea:	4620      	mov	r0, r4
 8010eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef8:	58d3      	ldr	r3, [r2, r3]
 8010efa:	4718      	bx	r3
 8010efc:	24000e0c 	.word	0x24000e0c

08010f00 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8010f00:	f000 bcb4 	b.w	801186c <std_msgs__msg__Header__init>

08010f04 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8010f04:	f000 bcd6 	b.w	80118b4 <std_msgs__msg__Header__fini>

08010f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010f08:	b508      	push	{r3, lr}
 8010f0a:	f7fe ffd3 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f0e:	4b06      	ldr	r3, [pc, #24]	@ (8010f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010f10:	4906      	ldr	r1, [pc, #24]	@ (8010f2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	60c8      	str	r0, [r1, #12]
 8010f16:	b10a      	cbz	r2, 8010f1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8010f18:	4803      	ldr	r0, [pc, #12]	@ (8010f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010f1a:	bd08      	pop	{r3, pc}
 8010f1c:	4a04      	ldr	r2, [pc, #16]	@ (8010f30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8010f1e:	4802      	ldr	r0, [pc, #8]	@ (8010f28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010f20:	6812      	ldr	r2, [r2, #0]
 8010f22:	601a      	str	r2, [r3, #0]
 8010f24:	bd08      	pop	{r3, pc}
 8010f26:	bf00      	nop
 8010f28:	24000e8c 	.word	0x24000e8c
 8010f2c:	24000e14 	.word	0x24000e14
 8010f30:	24000e10 	.word	0x24000e10

08010f34 <_Header__max_serialized_size>:
 8010f34:	b500      	push	{lr}
 8010f36:	b083      	sub	sp, #12
 8010f38:	2301      	movs	r3, #1
 8010f3a:	2100      	movs	r1, #0
 8010f3c:	f10d 0007 	add.w	r0, sp, #7
 8010f40:	f88d 3007 	strb.w	r3, [sp, #7]
 8010f44:	f7ff f814 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f48:	b003      	add	sp, #12
 8010f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f4e:	bf00      	nop

08010f50 <get_serialized_size_std_msgs__msg__Header>:
 8010f50:	b570      	push	{r4, r5, r6, lr}
 8010f52:	4605      	mov	r5, r0
 8010f54:	b168      	cbz	r0, 8010f72 <get_serialized_size_std_msgs__msg__Header+0x22>
 8010f56:	460c      	mov	r4, r1
 8010f58:	f7fe ffba 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f5c:	2104      	movs	r1, #4
 8010f5e:	1826      	adds	r6, r4, r0
 8010f60:	f1c4 0405 	rsb	r4, r4, #5
 8010f64:	4630      	mov	r0, r6
 8010f66:	f7ff fed9 	bl	8010d1c <ucdr_alignment>
 8010f6a:	68e9      	ldr	r1, [r5, #12]
 8010f6c:	440c      	add	r4, r1
 8010f6e:	4404      	add	r4, r0
 8010f70:	19a0      	adds	r0, r4, r6
 8010f72:	bd70      	pop	{r4, r5, r6, pc}

08010f74 <_Header__cdr_deserialize>:
 8010f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f76:	460c      	mov	r4, r1
 8010f78:	b083      	sub	sp, #12
 8010f7a:	b1e9      	cbz	r1, 8010fb8 <_Header__cdr_deserialize+0x44>
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	f7ff f80b 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f82:	4603      	mov	r3, r0
 8010f84:	4621      	mov	r1, r4
 8010f86:	4630      	mov	r0, r6
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	4798      	blx	r3
 8010f8e:	6927      	ldr	r7, [r4, #16]
 8010f90:	ab01      	add	r3, sp, #4
 8010f92:	68a1      	ldr	r1, [r4, #8]
 8010f94:	463a      	mov	r2, r7
 8010f96:	4630      	mov	r0, r6
 8010f98:	f000 fc4e 	bl	8011838 <ucdr_deserialize_sequence_char>
 8010f9c:	9b01      	ldr	r3, [sp, #4]
 8010f9e:	4605      	mov	r5, r0
 8010fa0:	b920      	cbnz	r0, 8010fac <_Header__cdr_deserialize+0x38>
 8010fa2:	429f      	cmp	r7, r3
 8010fa4:	d30c      	bcc.n	8010fc0 <_Header__cdr_deserialize+0x4c>
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	b003      	add	sp, #12
 8010faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fac:	b103      	cbz	r3, 8010fb0 <_Header__cdr_deserialize+0x3c>
 8010fae:	3b01      	subs	r3, #1
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	60e3      	str	r3, [r4, #12]
 8010fb4:	b003      	add	sp, #12
 8010fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fb8:	460d      	mov	r5, r1
 8010fba:	4628      	mov	r0, r5
 8010fbc:	b003      	add	sp, #12
 8010fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	75b5      	strb	r5, [r6, #22]
 8010fc6:	7571      	strb	r1, [r6, #21]
 8010fc8:	60e5      	str	r5, [r4, #12]
 8010fca:	f7ff febf 	bl	8010d4c <ucdr_align_to>
 8010fce:	4630      	mov	r0, r6
 8010fd0:	9901      	ldr	r1, [sp, #4]
 8010fd2:	f7ff feef 	bl	8010db4 <ucdr_advance_buffer>
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	b003      	add	sp, #12
 8010fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fdc <_Header__cdr_serialize>:
 8010fdc:	b308      	cbz	r0, 8011022 <_Header__cdr_serialize+0x46>
 8010fde:	b570      	push	{r4, r5, r6, lr}
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	460d      	mov	r5, r1
 8010fe4:	f7fe ffd8 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	4629      	mov	r1, r5
 8010fec:	4620      	mov	r0, r4
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	4798      	blx	r3
 8010ff4:	68a6      	ldr	r6, [r4, #8]
 8010ff6:	b15e      	cbz	r6, 8011010 <_Header__cdr_serialize+0x34>
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7ef f97b 	bl	80002f4 <strlen>
 8010ffe:	4603      	mov	r3, r0
 8011000:	1c42      	adds	r2, r0, #1
 8011002:	4631      	mov	r1, r6
 8011004:	4628      	mov	r0, r5
 8011006:	60e3      	str	r3, [r4, #12]
 8011008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801100c:	f000 bc02 	b.w	8011814 <ucdr_serialize_sequence_char>
 8011010:	4633      	mov	r3, r6
 8011012:	4632      	mov	r2, r6
 8011014:	4631      	mov	r1, r6
 8011016:	4628      	mov	r0, r5
 8011018:	60e3      	str	r3, [r4, #12]
 801101a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801101e:	f000 bbf9 	b.w	8011814 <ucdr_serialize_sequence_char>
 8011022:	4770      	bx	lr

08011024 <_Header__get_serialized_size>:
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	4604      	mov	r4, r0
 8011028:	b150      	cbz	r0, 8011040 <_Header__get_serialized_size+0x1c>
 801102a:	2100      	movs	r1, #0
 801102c:	f7fe ff50 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011030:	2104      	movs	r1, #4
 8011032:	4605      	mov	r5, r0
 8011034:	f7ff fe72 	bl	8010d1c <ucdr_alignment>
 8011038:	68e2      	ldr	r2, [r4, #12]
 801103a:	3205      	adds	r2, #5
 801103c:	1953      	adds	r3, r2, r5
 801103e:	4418      	add	r0, r3
 8011040:	bd38      	pop	{r3, r4, r5, pc}
 8011042:	bf00      	nop

08011044 <max_serialized_size_std_msgs__msg__Header>:
 8011044:	2301      	movs	r3, #1
 8011046:	b510      	push	{r4, lr}
 8011048:	7003      	strb	r3, [r0, #0]
 801104a:	4604      	mov	r4, r0
 801104c:	f7fe ff90 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 8011050:	2300      	movs	r3, #0
 8011052:	7023      	strb	r3, [r4, #0]
 8011054:	bd10      	pop	{r4, pc}
 8011056:	bf00      	nop

08011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011058:	4800      	ldr	r0, [pc, #0]	@ (801105c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801105a:	4770      	bx	lr
 801105c:	24000e98 	.word	0x24000e98

08011060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011060:	4a02      	ldr	r2, [pc, #8]	@ (801106c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8011062:	4b03      	ldr	r3, [pc, #12]	@ (8011070 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8011064:	6812      	ldr	r2, [r2, #0]
 8011066:	601a      	str	r2, [r3, #0]
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	24000e0c 	.word	0x24000e0c
 8011070:	24000ec8 	.word	0x24000ec8

08011074 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011074:	4a02      	ldr	r2, [pc, #8]	@ (8011080 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8011076:	4b03      	ldr	r3, [pc, #12]	@ (8011084 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8011078:	6812      	ldr	r2, [r2, #0]
 801107a:	601a      	str	r2, [r3, #0]
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	24000e0c 	.word	0x24000e0c
 8011084:	24000edc 	.word	0x24000edc

08011088 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011088:	4a02      	ldr	r2, [pc, #8]	@ (8011094 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801108a:	4b03      	ldr	r3, [pc, #12]	@ (8011098 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 801108c:	6812      	ldr	r2, [r2, #0]
 801108e:	601a      	str	r2, [r3, #0]
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop
 8011094:	24000e0c 	.word	0x24000e0c
 8011098:	24000ef0 	.word	0x24000ef0

0801109c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801109c:	4a02      	ldr	r2, [pc, #8]	@ (80110a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 801109e:	4b03      	ldr	r3, [pc, #12]	@ (80110ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 80110a0:	6812      	ldr	r2, [r2, #0]
 80110a2:	601a      	str	r2, [r3, #0]
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop
 80110a8:	24000e0c 	.word	0x24000e0c
 80110ac:	24000f04 	.word	0x24000f04

080110b0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 80110b0:	f000 bc0c 	b.w	80118cc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

080110b4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 80110b4:	f000 bc2e 	b.w	8011914 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

080110b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80110b8:	b510      	push	{r4, lr}
 80110ba:	4c08      	ldr	r4, [pc, #32]	@ (80110dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 80110bc:	f7ff ff24 	bl	8010f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80110c0:	60e0      	str	r0, [r4, #12]
 80110c2:	f000 fc93 	bl	80119ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80110c6:	4b06      	ldr	r3, [pc, #24]	@ (80110e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80110c8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	b10a      	cbz	r2, 80110d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 80110ce:	4804      	ldr	r0, [pc, #16]	@ (80110e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80110d0:	bd10      	pop	{r4, pc}
 80110d2:	4a04      	ldr	r2, [pc, #16]	@ (80110e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80110d4:	4802      	ldr	r0, [pc, #8]	@ (80110e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80110d6:	6812      	ldr	r2, [r2, #0]
 80110d8:	601a      	str	r2, [r3, #0]
 80110da:	bd10      	pop	{r4, pc}
 80110dc:	24000f10 	.word	0x24000f10
 80110e0:	24000f88 	.word	0x24000f88
 80110e4:	24000e10 	.word	0x24000e10

080110e8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80110e8:	f000 bc20 	b.w	801192c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080110ec <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80110ec:	f000 bc42 	b.w	8011974 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

080110f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80110f0:	b510      	push	{r4, lr}
 80110f2:	4c08      	ldr	r4, [pc, #32]	@ (8011114 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 80110f4:	f7ff ff08 	bl	8010f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80110f8:	60e0      	str	r0, [r4, #12]
 80110fa:	f000 fc89 	bl	8011a10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80110fe:	4b06      	ldr	r3, [pc, #24]	@ (8011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8011100:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	b10a      	cbz	r2, 801110a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8011106:	4804      	ldr	r0, [pc, #16]	@ (8011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8011108:	bd10      	pop	{r4, pc}
 801110a:	4a04      	ldr	r2, [pc, #16]	@ (801111c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 801110c:	4802      	ldr	r0, [pc, #8]	@ (8011118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 801110e:	6812      	ldr	r2, [r2, #0]
 8011110:	601a      	str	r2, [r3, #0]
 8011112:	bd10      	pop	{r4, pc}
 8011114:	24000f94 	.word	0x24000f94
 8011118:	2400100c 	.word	0x2400100c
 801111c:	24000e10 	.word	0x24000e10

08011120 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8011120:	f000 bc34 	b.w	801198c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08011124 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8011124:	f000 bc44 	b.w	80119b0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08011128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011128:	b508      	push	{r3, lr}
 801112a:	f7fe fec3 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801112e:	4b06      	ldr	r3, [pc, #24]	@ (8011148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8011130:	4906      	ldr	r1, [pc, #24]	@ (801114c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	60c8      	str	r0, [r1, #12]
 8011136:	b10a      	cbz	r2, 801113c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8011138:	4803      	ldr	r0, [pc, #12]	@ (8011148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801113a:	bd08      	pop	{r3, pc}
 801113c:	4a04      	ldr	r2, [pc, #16]	@ (8011150 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 801113e:	4802      	ldr	r0, [pc, #8]	@ (8011148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8011140:	6812      	ldr	r2, [r2, #0]
 8011142:	601a      	str	r2, [r3, #0]
 8011144:	bd08      	pop	{r3, pc}
 8011146:	bf00      	nop
 8011148:	24001090 	.word	0x24001090
 801114c:	24001018 	.word	0x24001018
 8011150:	24000e10 	.word	0x24000e10

08011154 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8011154:	f000 bc30 	b.w	80119b8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08011158 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8011158:	f000 bc40 	b.w	80119dc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

0801115c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801115c:	b508      	push	{r3, lr}
 801115e:	f7fe fea9 	bl	800feb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011162:	4b06      	ldr	r3, [pc, #24]	@ (801117c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011164:	4906      	ldr	r1, [pc, #24]	@ (8011180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	60c8      	str	r0, [r1, #12]
 801116a:	b10a      	cbz	r2, 8011170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 801116c:	4803      	ldr	r0, [pc, #12]	@ (801117c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801116e:	bd08      	pop	{r3, pc}
 8011170:	4a04      	ldr	r2, [pc, #16]	@ (8011184 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8011172:	4802      	ldr	r0, [pc, #8]	@ (801117c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011174:	6812      	ldr	r2, [r2, #0]
 8011176:	601a      	str	r2, [r3, #0]
 8011178:	bd08      	pop	{r3, pc}
 801117a:	bf00      	nop
 801117c:	24001114 	.word	0x24001114
 8011180:	2400109c 	.word	0x2400109c
 8011184:	24000e10 	.word	0x24000e10

08011188 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011188:	b538      	push	{r3, r4, r5, lr}
 801118a:	4604      	mov	r4, r0
 801118c:	b150      	cbz	r0, 80111a4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 801118e:	460d      	mov	r5, r1
 8011190:	f7ff fede 	bl	8010f50 <get_serialized_size_std_msgs__msg__Header>
 8011194:	4603      	mov	r3, r0
 8011196:	f104 0018 	add.w	r0, r4, #24
 801119a:	461c      	mov	r4, r3
 801119c:	18e9      	adds	r1, r5, r3
 801119e:	f000 fc45 	bl	8011a2c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80111a2:	4420      	add	r0, r4
 80111a4:	bd38      	pop	{r3, r4, r5, pc}
 80111a6:	bf00      	nop

080111a8 <_ActuationCommandStamped__cdr_deserialize>:
 80111a8:	b570      	push	{r4, r5, r6, lr}
 80111aa:	460c      	mov	r4, r1
 80111ac:	b199      	cbz	r1, 80111d6 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 80111ae:	4605      	mov	r5, r0
 80111b0:	f7ff ff52 	bl	8011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80111b4:	4603      	mov	r3, r0
 80111b6:	4621      	mov	r1, r4
 80111b8:	4628      	mov	r0, r5
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	4798      	blx	r3
 80111c0:	f000 fcbc 	bl	8011b3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80111c4:	4603      	mov	r3, r0
 80111c6:	f104 0118 	add.w	r1, r4, #24
 80111ca:	4628      	mov	r0, r5
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	4718      	bx	r3
 80111d6:	4608      	mov	r0, r1
 80111d8:	bd70      	pop	{r4, r5, r6, pc}
 80111da:	bf00      	nop

080111dc <_ActuationCommandStamped__cdr_serialize>:
 80111dc:	b510      	push	{r4, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	9101      	str	r1, [sp, #4]
 80111e2:	b1a0      	cbz	r0, 801120e <_ActuationCommandStamped__cdr_serialize+0x32>
 80111e4:	4604      	mov	r4, r0
 80111e6:	f7ff ff37 	bl	8011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80111ea:	4603      	mov	r3, r0
 80111ec:	9901      	ldr	r1, [sp, #4]
 80111ee:	4620      	mov	r0, r4
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	4798      	blx	r3
 80111f6:	f000 fca1 	bl	8011b3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80111fa:	4603      	mov	r3, r0
 80111fc:	9901      	ldr	r1, [sp, #4]
 80111fe:	f104 0018 	add.w	r0, r4, #24
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	b002      	add	sp, #8
 8011208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801120c:	4718      	bx	r3
 801120e:	b002      	add	sp, #8
 8011210:	bd10      	pop	{r4, pc}
 8011212:	bf00      	nop

08011214 <_ActuationCommandStamped__get_serialized_size>:
 8011214:	b510      	push	{r4, lr}
 8011216:	4604      	mov	r4, r0
 8011218:	b148      	cbz	r0, 801122e <_ActuationCommandStamped__get_serialized_size+0x1a>
 801121a:	2100      	movs	r1, #0
 801121c:	f7ff fe98 	bl	8010f50 <get_serialized_size_std_msgs__msg__Header>
 8011220:	4601      	mov	r1, r0
 8011222:	f104 0018 	add.w	r0, r4, #24
 8011226:	460c      	mov	r4, r1
 8011228:	f000 fc00 	bl	8011a2c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801122c:	4420      	add	r0, r4
 801122e:	bd10      	pop	{r4, pc}

08011230 <_ActuationCommandStamped__max_serialized_size>:
 8011230:	b510      	push	{r4, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	2301      	movs	r3, #1
 8011236:	2100      	movs	r1, #0
 8011238:	f10d 0007 	add.w	r0, sp, #7
 801123c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011240:	f7ff ff00 	bl	8011044 <max_serialized_size_std_msgs__msg__Header>
 8011244:	4604      	mov	r4, r0
 8011246:	f10d 0007 	add.w	r0, sp, #7
 801124a:	4621      	mov	r1, r4
 801124c:	f000 fc5c 	bl	8011b08 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8011250:	4420      	add	r0, r4
 8011252:	b002      	add	sp, #8
 8011254:	bd10      	pop	{r4, pc}
 8011256:	bf00      	nop

08011258 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011258:	4800      	ldr	r0, [pc, #0]	@ (801125c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 801125a:	4770      	bx	lr
 801125c:	24001120 	.word	0x24001120

08011260 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011260:	b538      	push	{r3, r4, r5, lr}
 8011262:	4604      	mov	r4, r0
 8011264:	b150      	cbz	r0, 801127c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8011266:	460d      	mov	r5, r1
 8011268:	f7ff fe72 	bl	8010f50 <get_serialized_size_std_msgs__msg__Header>
 801126c:	4603      	mov	r3, r0
 801126e:	f104 0018 	add.w	r0, r4, #24
 8011272:	461c      	mov	r4, r3
 8011274:	18e9      	adds	r1, r5, r3
 8011276:	f000 fc65 	bl	8011b44 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801127a:	4420      	add	r0, r4
 801127c:	bd38      	pop	{r3, r4, r5, pc}
 801127e:	bf00      	nop

08011280 <_ActuationStatusStamped__cdr_deserialize>:
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	460c      	mov	r4, r1
 8011284:	b199      	cbz	r1, 80112ae <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8011286:	4605      	mov	r5, r0
 8011288:	f7ff fee6 	bl	8011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801128c:	4603      	mov	r3, r0
 801128e:	4621      	mov	r1, r4
 8011290:	4628      	mov	r0, r5
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	4798      	blx	r3
 8011298:	f000 fcdc 	bl	8011c54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801129c:	4603      	mov	r3, r0
 801129e:	f104 0118 	add.w	r1, r4, #24
 80112a2:	4628      	mov	r0, r5
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	4718      	bx	r3
 80112ae:	4608      	mov	r0, r1
 80112b0:	bd70      	pop	{r4, r5, r6, pc}
 80112b2:	bf00      	nop

080112b4 <_ActuationStatusStamped__cdr_serialize>:
 80112b4:	b510      	push	{r4, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	9101      	str	r1, [sp, #4]
 80112ba:	b1a0      	cbz	r0, 80112e6 <_ActuationStatusStamped__cdr_serialize+0x32>
 80112bc:	4604      	mov	r4, r0
 80112be:	f7ff fecb 	bl	8011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80112c2:	4603      	mov	r3, r0
 80112c4:	9901      	ldr	r1, [sp, #4]
 80112c6:	4620      	mov	r0, r4
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	689b      	ldr	r3, [r3, #8]
 80112cc:	4798      	blx	r3
 80112ce:	f000 fcc1 	bl	8011c54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80112d2:	4603      	mov	r3, r0
 80112d4:	9901      	ldr	r1, [sp, #4]
 80112d6:	f104 0018 	add.w	r0, r4, #24
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	b002      	add	sp, #8
 80112e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112e4:	4718      	bx	r3
 80112e6:	b002      	add	sp, #8
 80112e8:	bd10      	pop	{r4, pc}
 80112ea:	bf00      	nop

080112ec <_ActuationStatusStamped__get_serialized_size>:
 80112ec:	b510      	push	{r4, lr}
 80112ee:	4604      	mov	r4, r0
 80112f0:	b148      	cbz	r0, 8011306 <_ActuationStatusStamped__get_serialized_size+0x1a>
 80112f2:	2100      	movs	r1, #0
 80112f4:	f7ff fe2c 	bl	8010f50 <get_serialized_size_std_msgs__msg__Header>
 80112f8:	4601      	mov	r1, r0
 80112fa:	f104 0018 	add.w	r0, r4, #24
 80112fe:	460c      	mov	r4, r1
 8011300:	f000 fc20 	bl	8011b44 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011304:	4420      	add	r0, r4
 8011306:	bd10      	pop	{r4, pc}

08011308 <_ActuationStatusStamped__max_serialized_size>:
 8011308:	b510      	push	{r4, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	2301      	movs	r3, #1
 801130e:	2100      	movs	r1, #0
 8011310:	f10d 0007 	add.w	r0, sp, #7
 8011314:	f88d 3007 	strb.w	r3, [sp, #7]
 8011318:	f7ff fe94 	bl	8011044 <max_serialized_size_std_msgs__msg__Header>
 801131c:	4604      	mov	r4, r0
 801131e:	f10d 0007 	add.w	r0, sp, #7
 8011322:	4621      	mov	r1, r4
 8011324:	f000 fc7c 	bl	8011c20 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011328:	4420      	add	r0, r4
 801132a:	b002      	add	sp, #8
 801132c:	bd10      	pop	{r4, pc}
 801132e:	bf00      	nop

08011330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011330:	4800      	ldr	r0, [pc, #0]	@ (8011334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8011332:	4770      	bx	lr
 8011334:	24001148 	.word	0x24001148

08011338 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	b158      	cbz	r0, 8011354 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 801133c:	460d      	mov	r5, r1
 801133e:	f7fe fdc7 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011342:	2104      	movs	r1, #4
 8011344:	182c      	adds	r4, r5, r0
 8011346:	f1c5 0504 	rsb	r5, r5, #4
 801134a:	4620      	mov	r0, r4
 801134c:	f7ff fce6 	bl	8010d1c <ucdr_alignment>
 8011350:	4428      	add	r0, r5
 8011352:	4420      	add	r0, r4
 8011354:	bd38      	pop	{r3, r4, r5, pc}
 8011356:	bf00      	nop

08011358 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	460c      	mov	r4, r1
 801135c:	b179      	cbz	r1, 801137e <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 801135e:	4605      	mov	r5, r0
 8011360:	f7fe fe1a 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011364:	4603      	mov	r3, r0
 8011366:	4621      	mov	r1, r4
 8011368:	4628      	mov	r0, r5
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	4798      	blx	r3
 8011370:	f104 0108 	add.w	r1, r4, #8
 8011374:	4628      	mov	r0, r5
 8011376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801137a:	f7ff ba81 	b.w	8010880 <ucdr_deserialize_float>
 801137e:	4608      	mov	r0, r1
 8011380:	bd38      	pop	{r3, r4, r5, pc}
 8011382:	bf00      	nop

08011384 <_SteeringWheelStatusStamped__cdr_serialize>:
 8011384:	b188      	cbz	r0, 80113aa <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8011386:	b538      	push	{r3, r4, r5, lr}
 8011388:	4604      	mov	r4, r0
 801138a:	460d      	mov	r5, r1
 801138c:	f7fe fe04 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011390:	4603      	mov	r3, r0
 8011392:	4629      	mov	r1, r5
 8011394:	4620      	mov	r0, r4
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	4798      	blx	r3
 801139c:	ed94 0a02 	vldr	s0, [r4, #8]
 80113a0:	4628      	mov	r0, r5
 80113a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113a6:	f7ff b9d3 	b.w	8010750 <ucdr_serialize_float>
 80113aa:	4770      	bx	lr

080113ac <_SteeringWheelStatusStamped__get_serialized_size>:
 80113ac:	b150      	cbz	r0, 80113c4 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 80113ae:	2100      	movs	r1, #0
 80113b0:	b510      	push	{r4, lr}
 80113b2:	f7fe fd8d 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 80113b6:	4604      	mov	r4, r0
 80113b8:	2104      	movs	r1, #4
 80113ba:	f7ff fcaf 	bl	8010d1c <ucdr_alignment>
 80113be:	4420      	add	r0, r4
 80113c0:	3004      	adds	r0, #4
 80113c2:	bd10      	pop	{r4, pc}
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop

080113c8 <_SteeringWheelStatusStamped__max_serialized_size>:
 80113c8:	b510      	push	{r4, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	2301      	movs	r3, #1
 80113ce:	2100      	movs	r1, #0
 80113d0:	f10d 0007 	add.w	r0, sp, #7
 80113d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80113d8:	f7fe fdca 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 80113dc:	4604      	mov	r4, r0
 80113de:	2104      	movs	r1, #4
 80113e0:	f7ff fc9c 	bl	8010d1c <ucdr_alignment>
 80113e4:	4420      	add	r0, r4
 80113e6:	3004      	adds	r0, #4
 80113e8:	b002      	add	sp, #8
 80113ea:	bd10      	pop	{r4, pc}

080113ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80113ec:	4800      	ldr	r0, [pc, #0]	@ (80113f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 80113ee:	4770      	bx	lr
 80113f0:	24001170 	.word	0x24001170

080113f4 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80113f4:	b538      	push	{r3, r4, r5, lr}
 80113f6:	b158      	cbz	r0, 8011410 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 80113f8:	460d      	mov	r5, r1
 80113fa:	f7fe fd69 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 80113fe:	2101      	movs	r1, #1
 8011400:	182c      	adds	r4, r5, r0
 8011402:	f1c5 0501 	rsb	r5, r5, #1
 8011406:	4620      	mov	r0, r4
 8011408:	f7ff fc88 	bl	8010d1c <ucdr_alignment>
 801140c:	4428      	add	r0, r5
 801140e:	4420      	add	r0, r4
 8011410:	bd38      	pop	{r3, r4, r5, pc}
 8011412:	bf00      	nop

08011414 <_VehicleEmergencyStamped__cdr_deserialize>:
 8011414:	b538      	push	{r3, r4, r5, lr}
 8011416:	460c      	mov	r4, r1
 8011418:	b179      	cbz	r1, 801143a <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 801141a:	4605      	mov	r5, r0
 801141c:	f7fe fdbc 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011420:	4603      	mov	r3, r0
 8011422:	4621      	mov	r1, r4
 8011424:	4628      	mov	r0, r5
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	4798      	blx	r3
 801142c:	f104 0108 	add.w	r1, r4, #8
 8011430:	4628      	mov	r0, r5
 8011432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011436:	f7fe bdc9 	b.w	800ffcc <ucdr_deserialize_bool>
 801143a:	4608      	mov	r0, r1
 801143c:	bd38      	pop	{r3, r4, r5, pc}
 801143e:	bf00      	nop

08011440 <_VehicleEmergencyStamped__cdr_serialize>:
 8011440:	b180      	cbz	r0, 8011464 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8011442:	b538      	push	{r3, r4, r5, lr}
 8011444:	4604      	mov	r4, r0
 8011446:	460d      	mov	r5, r1
 8011448:	f7fe fda6 	bl	800ff98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801144c:	4603      	mov	r3, r0
 801144e:	4629      	mov	r1, r5
 8011450:	4620      	mov	r0, r4
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	689b      	ldr	r3, [r3, #8]
 8011456:	4798      	blx	r3
 8011458:	7a21      	ldrb	r1, [r4, #8]
 801145a:	4628      	mov	r0, r5
 801145c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011460:	f7fe bd9e 	b.w	800ffa0 <ucdr_serialize_bool>
 8011464:	4770      	bx	lr
 8011466:	bf00      	nop

08011468 <_VehicleEmergencyStamped__get_serialized_size>:
 8011468:	b150      	cbz	r0, 8011480 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 801146a:	2100      	movs	r1, #0
 801146c:	b510      	push	{r4, lr}
 801146e:	f7fe fd2f 	bl	800fed0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011472:	4604      	mov	r4, r0
 8011474:	2101      	movs	r1, #1
 8011476:	f7ff fc51 	bl	8010d1c <ucdr_alignment>
 801147a:	4420      	add	r0, r4
 801147c:	3001      	adds	r0, #1
 801147e:	bd10      	pop	{r4, pc}
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop

08011484 <_VehicleEmergencyStamped__max_serialized_size>:
 8011484:	b510      	push	{r4, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	2401      	movs	r4, #1
 801148a:	2100      	movs	r1, #0
 801148c:	f10d 0007 	add.w	r0, sp, #7
 8011490:	f88d 4007 	strb.w	r4, [sp, #7]
 8011494:	f7fe fd6c 	bl	800ff70 <max_serialized_size_builtin_interfaces__msg__Time>
 8011498:	4621      	mov	r1, r4
 801149a:	4604      	mov	r4, r0
 801149c:	f7ff fc3e 	bl	8010d1c <ucdr_alignment>
 80114a0:	4420      	add	r0, r4
 80114a2:	3001      	adds	r0, #1
 80114a4:	b002      	add	sp, #8
 80114a6:	bd10      	pop	{r4, pc}

080114a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80114a8:	4800      	ldr	r0, [pc, #0]	@ (80114ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 80114aa:	4770      	bx	lr
 80114ac:	24001198 	.word	0x24001198

080114b0 <autoware_control_msgs__msg__Control__init>:
 80114b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b4:	4605      	mov	r5, r0
 80114b6:	b3c0      	cbz	r0, 801152a <autoware_control_msgs__msg__Control__init+0x7a>
 80114b8:	f000 f9a6 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80114bc:	4604      	mov	r4, r0
 80114be:	b310      	cbz	r0, 8011506 <autoware_control_msgs__msg__Control__init+0x56>
 80114c0:	f105 0608 	add.w	r6, r5, #8
 80114c4:	4630      	mov	r0, r6
 80114c6:	f000 f99f 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80114ca:	4604      	mov	r4, r0
 80114cc:	2800      	cmp	r0, #0
 80114ce:	d040      	beq.n	8011552 <autoware_control_msgs__msg__Control__init+0xa2>
 80114d0:	f105 0710 	add.w	r7, r5, #16
 80114d4:	4638      	mov	r0, r7
 80114d6:	f000 f855 	bl	8011584 <autoware_control_msgs__msg__Lateral__init>
 80114da:	4604      	mov	r4, r0
 80114dc:	b348      	cbz	r0, 8011532 <autoware_control_msgs__msg__Control__init+0x82>
 80114de:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80114e2:	4640      	mov	r0, r8
 80114e4:	f000 f87e 	bl	80115e4 <autoware_control_msgs__msg__Longitudinal__init>
 80114e8:	4604      	mov	r4, r0
 80114ea:	b9d8      	cbnz	r0, 8011524 <autoware_control_msgs__msg__Control__init+0x74>
 80114ec:	4628      	mov	r0, r5
 80114ee:	f000 f98f 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80114f2:	4630      	mov	r0, r6
 80114f4:	f000 f98c 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80114f8:	4638      	mov	r0, r7
 80114fa:	f000 f867 	bl	80115cc <autoware_control_msgs__msg__Lateral__fini>
 80114fe:	4640      	mov	r0, r8
 8011500:	f000 f894 	bl	801162c <autoware_control_msgs__msg__Longitudinal__fini>
 8011504:	e00e      	b.n	8011524 <autoware_control_msgs__msg__Control__init+0x74>
 8011506:	4628      	mov	r0, r5
 8011508:	f000 f982 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 801150c:	f105 0008 	add.w	r0, r5, #8
 8011510:	f000 f97e 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011514:	f105 0010 	add.w	r0, r5, #16
 8011518:	f000 f858 	bl	80115cc <autoware_control_msgs__msg__Lateral__fini>
 801151c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8011520:	f000 f884 	bl	801162c <autoware_control_msgs__msg__Longitudinal__fini>
 8011524:	4620      	mov	r0, r4
 8011526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152a:	4604      	mov	r4, r0
 801152c:	4620      	mov	r0, r4
 801152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011532:	4628      	mov	r0, r5
 8011534:	f000 f96c 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011538:	4630      	mov	r0, r6
 801153a:	f000 f969 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 801153e:	4638      	mov	r0, r7
 8011540:	f000 f844 	bl	80115cc <autoware_control_msgs__msg__Lateral__fini>
 8011544:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8011548:	f000 f870 	bl	801162c <autoware_control_msgs__msg__Longitudinal__fini>
 801154c:	4620      	mov	r0, r4
 801154e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011552:	4628      	mov	r0, r5
 8011554:	f000 f95c 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011558:	4630      	mov	r0, r6
 801155a:	e7d9      	b.n	8011510 <autoware_control_msgs__msg__Control__init+0x60>

0801155c <autoware_control_msgs__msg__Control__fini>:
 801155c:	b188      	cbz	r0, 8011582 <autoware_control_msgs__msg__Control__fini+0x26>
 801155e:	b510      	push	{r4, lr}
 8011560:	4604      	mov	r4, r0
 8011562:	f000 f955 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011566:	f104 0008 	add.w	r0, r4, #8
 801156a:	f000 f951 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 801156e:	f104 0010 	add.w	r0, r4, #16
 8011572:	f000 f82b 	bl	80115cc <autoware_control_msgs__msg__Lateral__fini>
 8011576:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801157a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801157e:	f000 b855 	b.w	801162c <autoware_control_msgs__msg__Longitudinal__fini>
 8011582:	4770      	bx	lr

08011584 <autoware_control_msgs__msg__Lateral__init>:
 8011584:	b570      	push	{r4, r5, r6, lr}
 8011586:	4605      	mov	r5, r0
 8011588:	b1a8      	cbz	r0, 80115b6 <autoware_control_msgs__msg__Lateral__init+0x32>
 801158a:	f000 f93d 	bl	8011808 <builtin_interfaces__msg__Time__init>
 801158e:	4604      	mov	r4, r0
 8011590:	b140      	cbz	r0, 80115a4 <autoware_control_msgs__msg__Lateral__init+0x20>
 8011592:	f105 0608 	add.w	r6, r5, #8
 8011596:	4630      	mov	r0, r6
 8011598:	f000 f936 	bl	8011808 <builtin_interfaces__msg__Time__init>
 801159c:	4604      	mov	r4, r0
 801159e:	b168      	cbz	r0, 80115bc <autoware_control_msgs__msg__Lateral__init+0x38>
 80115a0:	4620      	mov	r0, r4
 80115a2:	bd70      	pop	{r4, r5, r6, pc}
 80115a4:	4628      	mov	r0, r5
 80115a6:	f000 f933 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80115aa:	f105 0008 	add.w	r0, r5, #8
 80115ae:	f000 f92f 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80115b2:	4620      	mov	r0, r4
 80115b4:	bd70      	pop	{r4, r5, r6, pc}
 80115b6:	4604      	mov	r4, r0
 80115b8:	4620      	mov	r0, r4
 80115ba:	bd70      	pop	{r4, r5, r6, pc}
 80115bc:	4628      	mov	r0, r5
 80115be:	f000 f927 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80115c2:	4630      	mov	r0, r6
 80115c4:	f000 f924 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80115c8:	e7ea      	b.n	80115a0 <autoware_control_msgs__msg__Lateral__init+0x1c>
 80115ca:	bf00      	nop

080115cc <autoware_control_msgs__msg__Lateral__fini>:
 80115cc:	b148      	cbz	r0, 80115e2 <autoware_control_msgs__msg__Lateral__fini+0x16>
 80115ce:	b510      	push	{r4, lr}
 80115d0:	4604      	mov	r4, r0
 80115d2:	f000 f91d 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80115d6:	f104 0008 	add.w	r0, r4, #8
 80115da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115de:	f000 b917 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80115e2:	4770      	bx	lr

080115e4 <autoware_control_msgs__msg__Longitudinal__init>:
 80115e4:	b570      	push	{r4, r5, r6, lr}
 80115e6:	4605      	mov	r5, r0
 80115e8:	b1a8      	cbz	r0, 8011616 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 80115ea:	f000 f90d 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80115ee:	4604      	mov	r4, r0
 80115f0:	b140      	cbz	r0, 8011604 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 80115f2:	f105 0608 	add.w	r6, r5, #8
 80115f6:	4630      	mov	r0, r6
 80115f8:	f000 f906 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80115fc:	4604      	mov	r4, r0
 80115fe:	b168      	cbz	r0, 801161c <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8011600:	4620      	mov	r0, r4
 8011602:	bd70      	pop	{r4, r5, r6, pc}
 8011604:	4628      	mov	r0, r5
 8011606:	f000 f903 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 801160a:	f105 0008 	add.w	r0, r5, #8
 801160e:	f000 f8ff 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011612:	4620      	mov	r0, r4
 8011614:	bd70      	pop	{r4, r5, r6, pc}
 8011616:	4604      	mov	r4, r0
 8011618:	4620      	mov	r0, r4
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	4628      	mov	r0, r5
 801161e:	f000 f8f7 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011622:	4630      	mov	r0, r6
 8011624:	f000 f8f4 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011628:	e7ea      	b.n	8011600 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 801162a:	bf00      	nop

0801162c <autoware_control_msgs__msg__Longitudinal__fini>:
 801162c:	b148      	cbz	r0, 8011642 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 801162e:	b510      	push	{r4, lr}
 8011630:	4604      	mov	r4, r0
 8011632:	f000 f8ed 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011636:	f104 0008 	add.w	r0, r4, #8
 801163a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801163e:	f000 b8e7 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 8011642:	4770      	bx	lr

08011644 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8011644:	b538      	push	{r3, r4, r5, lr}
 8011646:	4604      	mov	r4, r0
 8011648:	b128      	cbz	r0, 8011656 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 801164a:	f000 f8dd 	bl	8011808 <builtin_interfaces__msg__Time__init>
 801164e:	4605      	mov	r5, r0
 8011650:	b120      	cbz	r0, 801165c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8011652:	4628      	mov	r0, r5
 8011654:	bd38      	pop	{r3, r4, r5, pc}
 8011656:	4605      	mov	r5, r0
 8011658:	4628      	mov	r0, r5
 801165a:	bd38      	pop	{r3, r4, r5, pc}
 801165c:	4620      	mov	r0, r4
 801165e:	f000 f8d7 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011662:	4628      	mov	r0, r5
 8011664:	bd38      	pop	{r3, r4, r5, pc}
 8011666:	bf00      	nop

08011668 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8011668:	b108      	cbz	r0, 801166e <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 801166a:	f000 b8d1 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 801166e:	4770      	bx	lr

08011670 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8011670:	3800      	subs	r0, #0
 8011672:	bf18      	it	ne
 8011674:	2001      	movne	r0, #1
 8011676:	4770      	bx	lr

08011678 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop

0801167c <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	4604      	mov	r4, r0
 8011680:	b128      	cbz	r0, 801168e <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8011682:	f000 f8c1 	bl	8011808 <builtin_interfaces__msg__Time__init>
 8011686:	4605      	mov	r5, r0
 8011688:	b120      	cbz	r0, 8011694 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 801168a:	4628      	mov	r0, r5
 801168c:	bd38      	pop	{r3, r4, r5, pc}
 801168e:	4605      	mov	r5, r0
 8011690:	4628      	mov	r0, r5
 8011692:	bd38      	pop	{r3, r4, r5, pc}
 8011694:	4620      	mov	r0, r4
 8011696:	f000 f8bb 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 801169a:	4628      	mov	r0, r5
 801169c:	bd38      	pop	{r3, r4, r5, pc}
 801169e:	bf00      	nop

080116a0 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 80116a0:	b108      	cbz	r0, 80116a6 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 80116a2:	f000 b8b5 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80116a6:	4770      	bx	lr

080116a8 <autoware_vehicle_msgs__msg__GearCommand__init>:
 80116a8:	b538      	push	{r3, r4, r5, lr}
 80116aa:	4604      	mov	r4, r0
 80116ac:	b128      	cbz	r0, 80116ba <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 80116ae:	f000 f8ab 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80116b2:	4605      	mov	r5, r0
 80116b4:	b120      	cbz	r0, 80116c0 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 80116b6:	4628      	mov	r0, r5
 80116b8:	bd38      	pop	{r3, r4, r5, pc}
 80116ba:	4605      	mov	r5, r0
 80116bc:	4628      	mov	r0, r5
 80116be:	bd38      	pop	{r3, r4, r5, pc}
 80116c0:	4620      	mov	r0, r4
 80116c2:	f000 f8a5 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80116c6:	4628      	mov	r0, r5
 80116c8:	bd38      	pop	{r3, r4, r5, pc}
 80116ca:	bf00      	nop

080116cc <autoware_vehicle_msgs__msg__GearCommand__fini>:
 80116cc:	b108      	cbz	r0, 80116d2 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 80116ce:	f000 b89f 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80116d2:	4770      	bx	lr

080116d4 <autoware_vehicle_msgs__msg__GearReport__init>:
 80116d4:	b538      	push	{r3, r4, r5, lr}
 80116d6:	4604      	mov	r4, r0
 80116d8:	b128      	cbz	r0, 80116e6 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 80116da:	f000 f895 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80116de:	4605      	mov	r5, r0
 80116e0:	b120      	cbz	r0, 80116ec <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 80116e2:	4628      	mov	r0, r5
 80116e4:	bd38      	pop	{r3, r4, r5, pc}
 80116e6:	4605      	mov	r5, r0
 80116e8:	4628      	mov	r0, r5
 80116ea:	bd38      	pop	{r3, r4, r5, pc}
 80116ec:	4620      	mov	r0, r4
 80116ee:	f000 f88f 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80116f2:	4628      	mov	r0, r5
 80116f4:	bd38      	pop	{r3, r4, r5, pc}
 80116f6:	bf00      	nop

080116f8 <autoware_vehicle_msgs__msg__GearReport__fini>:
 80116f8:	b108      	cbz	r0, 80116fe <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 80116fa:	f000 b889 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80116fe:	4770      	bx	lr

08011700 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8011700:	b538      	push	{r3, r4, r5, lr}
 8011702:	4604      	mov	r4, r0
 8011704:	b128      	cbz	r0, 8011712 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8011706:	f000 f87f 	bl	8011808 <builtin_interfaces__msg__Time__init>
 801170a:	4605      	mov	r5, r0
 801170c:	b120      	cbz	r0, 8011718 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 801170e:	4628      	mov	r0, r5
 8011710:	bd38      	pop	{r3, r4, r5, pc}
 8011712:	4605      	mov	r5, r0
 8011714:	4628      	mov	r0, r5
 8011716:	bd38      	pop	{r3, r4, r5, pc}
 8011718:	4620      	mov	r0, r4
 801171a:	f000 f879 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 801171e:	4628      	mov	r0, r5
 8011720:	bd38      	pop	{r3, r4, r5, pc}
 8011722:	bf00      	nop

08011724 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8011724:	b108      	cbz	r0, 801172a <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8011726:	f000 b873 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 801172a:	4770      	bx	lr

0801172c <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 801172c:	b538      	push	{r3, r4, r5, lr}
 801172e:	4604      	mov	r4, r0
 8011730:	b128      	cbz	r0, 801173e <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8011732:	f000 f869 	bl	8011808 <builtin_interfaces__msg__Time__init>
 8011736:	4605      	mov	r5, r0
 8011738:	b120      	cbz	r0, 8011744 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 801173a:	4628      	mov	r0, r5
 801173c:	bd38      	pop	{r3, r4, r5, pc}
 801173e:	4605      	mov	r5, r0
 8011740:	4628      	mov	r0, r5
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	4620      	mov	r0, r4
 8011746:	f000 f863 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 801174a:	4628      	mov	r0, r5
 801174c:	bd38      	pop	{r3, r4, r5, pc}
 801174e:	bf00      	nop

08011750 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8011750:	b108      	cbz	r0, 8011756 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8011752:	f000 b85d 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 8011756:	4770      	bx	lr

08011758 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8011758:	b538      	push	{r3, r4, r5, lr}
 801175a:	4604      	mov	r4, r0
 801175c:	b128      	cbz	r0, 801176a <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 801175e:	f000 f853 	bl	8011808 <builtin_interfaces__msg__Time__init>
 8011762:	4605      	mov	r5, r0
 8011764:	b120      	cbz	r0, 8011770 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8011766:	4628      	mov	r0, r5
 8011768:	bd38      	pop	{r3, r4, r5, pc}
 801176a:	4605      	mov	r5, r0
 801176c:	4628      	mov	r0, r5
 801176e:	bd38      	pop	{r3, r4, r5, pc}
 8011770:	4620      	mov	r0, r4
 8011772:	f000 f84d 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011776:	4628      	mov	r0, r5
 8011778:	bd38      	pop	{r3, r4, r5, pc}
 801177a:	bf00      	nop

0801177c <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 801177c:	b108      	cbz	r0, 8011782 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 801177e:	f000 b847 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 8011782:	4770      	bx	lr

08011784 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8011784:	b538      	push	{r3, r4, r5, lr}
 8011786:	4604      	mov	r4, r0
 8011788:	b128      	cbz	r0, 8011796 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 801178a:	f000 f83d 	bl	8011808 <builtin_interfaces__msg__Time__init>
 801178e:	4605      	mov	r5, r0
 8011790:	b120      	cbz	r0, 801179c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8011792:	4628      	mov	r0, r5
 8011794:	bd38      	pop	{r3, r4, r5, pc}
 8011796:	4605      	mov	r5, r0
 8011798:	4628      	mov	r0, r5
 801179a:	bd38      	pop	{r3, r4, r5, pc}
 801179c:	4620      	mov	r0, r4
 801179e:	f000 f837 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80117a2:	4628      	mov	r0, r5
 80117a4:	bd38      	pop	{r3, r4, r5, pc}
 80117a6:	bf00      	nop

080117a8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 80117a8:	b108      	cbz	r0, 80117ae <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 80117aa:	f000 b831 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80117ae:	4770      	bx	lr

080117b0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 80117b0:	b538      	push	{r3, r4, r5, lr}
 80117b2:	4604      	mov	r4, r0
 80117b4:	b128      	cbz	r0, 80117c2 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 80117b6:	f000 f827 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80117ba:	4605      	mov	r5, r0
 80117bc:	b120      	cbz	r0, 80117c8 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 80117be:	4628      	mov	r0, r5
 80117c0:	bd38      	pop	{r3, r4, r5, pc}
 80117c2:	4605      	mov	r5, r0
 80117c4:	4628      	mov	r0, r5
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	4620      	mov	r0, r4
 80117ca:	f000 f821 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80117ce:	4628      	mov	r0, r5
 80117d0:	bd38      	pop	{r3, r4, r5, pc}
 80117d2:	bf00      	nop

080117d4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 80117d4:	b108      	cbz	r0, 80117da <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 80117d6:	f000 b81b 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80117da:	4770      	bx	lr

080117dc <autoware_vehicle_msgs__msg__VelocityReport__init>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4604      	mov	r4, r0
 80117e0:	b128      	cbz	r0, 80117ee <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 80117e2:	f000 f843 	bl	801186c <std_msgs__msg__Header__init>
 80117e6:	4605      	mov	r5, r0
 80117e8:	b120      	cbz	r0, 80117f4 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 80117ea:	4628      	mov	r0, r5
 80117ec:	bd38      	pop	{r3, r4, r5, pc}
 80117ee:	4605      	mov	r5, r0
 80117f0:	4628      	mov	r0, r5
 80117f2:	bd38      	pop	{r3, r4, r5, pc}
 80117f4:	4620      	mov	r0, r4
 80117f6:	f000 f85d 	bl	80118b4 <std_msgs__msg__Header__fini>
 80117fa:	4628      	mov	r0, r5
 80117fc:	bd38      	pop	{r3, r4, r5, pc}
 80117fe:	bf00      	nop

08011800 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8011800:	b108      	cbz	r0, 8011806 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8011802:	f000 b857 	b.w	80118b4 <std_msgs__msg__Header__fini>
 8011806:	4770      	bx	lr

08011808 <builtin_interfaces__msg__Time__init>:
 8011808:	3800      	subs	r0, #0
 801180a:	bf18      	it	ne
 801180c:	2001      	movne	r0, #1
 801180e:	4770      	bx	lr

08011810 <builtin_interfaces__msg__Time__fini>:
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop

08011814 <ucdr_serialize_sequence_char>:
 8011814:	b570      	push	{r4, r5, r6, lr}
 8011816:	4615      	mov	r5, r2
 8011818:	460e      	mov	r6, r1
 801181a:	7d01      	ldrb	r1, [r0, #20]
 801181c:	4604      	mov	r4, r0
 801181e:	f7fe fcb1 	bl	8010184 <ucdr_serialize_endian_uint32_t>
 8011822:	b90d      	cbnz	r5, 8011828 <ucdr_serialize_sequence_char+0x14>
 8011824:	2001      	movs	r0, #1
 8011826:	bd70      	pop	{r4, r5, r6, pc}
 8011828:	462b      	mov	r3, r5
 801182a:	4632      	mov	r2, r6
 801182c:	7d21      	ldrb	r1, [r4, #20]
 801182e:	4620      	mov	r0, r4
 8011830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011834:	f000 ba12 	b.w	8011c5c <ucdr_serialize_endian_array_char>

08011838 <ucdr_deserialize_sequence_char>:
 8011838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801183c:	461d      	mov	r5, r3
 801183e:	4616      	mov	r6, r2
 8011840:	460f      	mov	r7, r1
 8011842:	461a      	mov	r2, r3
 8011844:	7d01      	ldrb	r1, [r0, #20]
 8011846:	4604      	mov	r4, r0
 8011848:	f7fe fdc4 	bl	80103d4 <ucdr_deserialize_endian_uint32_t>
 801184c:	682b      	ldr	r3, [r5, #0]
 801184e:	429e      	cmp	r6, r3
 8011850:	d201      	bcs.n	8011856 <ucdr_deserialize_sequence_char+0x1e>
 8011852:	2201      	movs	r2, #1
 8011854:	75a2      	strb	r2, [r4, #22]
 8011856:	b913      	cbnz	r3, 801185e <ucdr_deserialize_sequence_char+0x26>
 8011858:	2001      	movs	r0, #1
 801185a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801185e:	463a      	mov	r2, r7
 8011860:	7d21      	ldrb	r1, [r4, #20]
 8011862:	4620      	mov	r0, r4
 8011864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011868:	f000 ba2a 	b.w	8011cc0 <ucdr_deserialize_endian_array_char>

0801186c <std_msgs__msg__Header__init>:
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	4605      	mov	r5, r0
 8011870:	b1a8      	cbz	r0, 801189e <std_msgs__msg__Header__init+0x32>
 8011872:	f7ff ffc9 	bl	8011808 <builtin_interfaces__msg__Time__init>
 8011876:	4604      	mov	r4, r0
 8011878:	b140      	cbz	r0, 801188c <std_msgs__msg__Header__init+0x20>
 801187a:	f105 0608 	add.w	r6, r5, #8
 801187e:	4630      	mov	r0, r6
 8011880:	f000 fa52 	bl	8011d28 <rosidl_runtime_c__String__init>
 8011884:	4604      	mov	r4, r0
 8011886:	b168      	cbz	r0, 80118a4 <std_msgs__msg__Header__init+0x38>
 8011888:	4620      	mov	r0, r4
 801188a:	bd70      	pop	{r4, r5, r6, pc}
 801188c:	4628      	mov	r0, r5
 801188e:	f7ff ffbf 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 8011892:	f105 0008 	add.w	r0, r5, #8
 8011896:	f000 fa5d 	bl	8011d54 <rosidl_runtime_c__String__fini>
 801189a:	4620      	mov	r0, r4
 801189c:	bd70      	pop	{r4, r5, r6, pc}
 801189e:	4604      	mov	r4, r0
 80118a0:	4620      	mov	r0, r4
 80118a2:	bd70      	pop	{r4, r5, r6, pc}
 80118a4:	4628      	mov	r0, r5
 80118a6:	f7ff ffb3 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80118aa:	4630      	mov	r0, r6
 80118ac:	f000 fa52 	bl	8011d54 <rosidl_runtime_c__String__fini>
 80118b0:	e7ea      	b.n	8011888 <std_msgs__msg__Header__init+0x1c>
 80118b2:	bf00      	nop

080118b4 <std_msgs__msg__Header__fini>:
 80118b4:	b148      	cbz	r0, 80118ca <std_msgs__msg__Header__fini+0x16>
 80118b6:	b510      	push	{r4, lr}
 80118b8:	4604      	mov	r4, r0
 80118ba:	f7ff ffa9 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80118be:	f104 0008 	add.w	r0, r4, #8
 80118c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118c6:	f000 ba45 	b.w	8011d54 <rosidl_runtime_c__String__fini>
 80118ca:	4770      	bx	lr

080118cc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	4605      	mov	r5, r0
 80118d0:	b1a8      	cbz	r0, 80118fe <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 80118d2:	f7ff ffcb 	bl	801186c <std_msgs__msg__Header__init>
 80118d6:	4604      	mov	r4, r0
 80118d8:	b140      	cbz	r0, 80118ec <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 80118da:	f105 0618 	add.w	r6, r5, #24
 80118de:	4630      	mov	r0, r6
 80118e0:	f000 fa80 	bl	8011de4 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 80118e4:	4604      	mov	r4, r0
 80118e6:	b168      	cbz	r0, 8011904 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 80118e8:	4620      	mov	r0, r4
 80118ea:	bd70      	pop	{r4, r5, r6, pc}
 80118ec:	4628      	mov	r0, r5
 80118ee:	f7ff ffe1 	bl	80118b4 <std_msgs__msg__Header__fini>
 80118f2:	f105 0018 	add.w	r0, r5, #24
 80118f6:	f000 fa79 	bl	8011dec <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 80118fa:	4620      	mov	r0, r4
 80118fc:	bd70      	pop	{r4, r5, r6, pc}
 80118fe:	4604      	mov	r4, r0
 8011900:	4620      	mov	r0, r4
 8011902:	bd70      	pop	{r4, r5, r6, pc}
 8011904:	4628      	mov	r0, r5
 8011906:	f7ff ffd5 	bl	80118b4 <std_msgs__msg__Header__fini>
 801190a:	4630      	mov	r0, r6
 801190c:	f000 fa6e 	bl	8011dec <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8011910:	e7ea      	b.n	80118e8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8011912:	bf00      	nop

08011914 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8011914:	b148      	cbz	r0, 801192a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8011916:	b510      	push	{r4, lr}
 8011918:	4604      	mov	r4, r0
 801191a:	f7ff ffcb 	bl	80118b4 <std_msgs__msg__Header__fini>
 801191e:	f104 0018 	add.w	r0, r4, #24
 8011922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011926:	f000 ba61 	b.w	8011dec <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801192a:	4770      	bx	lr

0801192c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801192c:	b570      	push	{r4, r5, r6, lr}
 801192e:	4605      	mov	r5, r0
 8011930:	b1a8      	cbz	r0, 801195e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8011932:	f7ff ff9b 	bl	801186c <std_msgs__msg__Header__init>
 8011936:	4604      	mov	r4, r0
 8011938:	b140      	cbz	r0, 801194c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801193a:	f105 0618 	add.w	r6, r5, #24
 801193e:	4630      	mov	r0, r6
 8011940:	f000 fa56 	bl	8011df0 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8011944:	4604      	mov	r4, r0
 8011946:	b168      	cbz	r0, 8011964 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8011948:	4620      	mov	r0, r4
 801194a:	bd70      	pop	{r4, r5, r6, pc}
 801194c:	4628      	mov	r0, r5
 801194e:	f7ff ffb1 	bl	80118b4 <std_msgs__msg__Header__fini>
 8011952:	f105 0018 	add.w	r0, r5, #24
 8011956:	f000 fa4f 	bl	8011df8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801195a:	4620      	mov	r0, r4
 801195c:	bd70      	pop	{r4, r5, r6, pc}
 801195e:	4604      	mov	r4, r0
 8011960:	4620      	mov	r0, r4
 8011962:	bd70      	pop	{r4, r5, r6, pc}
 8011964:	4628      	mov	r0, r5
 8011966:	f7ff ffa5 	bl	80118b4 <std_msgs__msg__Header__fini>
 801196a:	4630      	mov	r0, r6
 801196c:	f000 fa44 	bl	8011df8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8011970:	e7ea      	b.n	8011948 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8011972:	bf00      	nop

08011974 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8011974:	b148      	cbz	r0, 801198a <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8011976:	b510      	push	{r4, lr}
 8011978:	4604      	mov	r4, r0
 801197a:	f7ff ff9b 	bl	80118b4 <std_msgs__msg__Header__fini>
 801197e:	f104 0018 	add.w	r0, r4, #24
 8011982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011986:	f000 ba37 	b.w	8011df8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801198a:	4770      	bx	lr

0801198c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	b128      	cbz	r0, 801199e <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8011992:	f7ff ff39 	bl	8011808 <builtin_interfaces__msg__Time__init>
 8011996:	4605      	mov	r5, r0
 8011998:	b120      	cbz	r0, 80119a4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801199a:	4628      	mov	r0, r5
 801199c:	bd38      	pop	{r3, r4, r5, pc}
 801199e:	4605      	mov	r5, r0
 80119a0:	4628      	mov	r0, r5
 80119a2:	bd38      	pop	{r3, r4, r5, pc}
 80119a4:	4620      	mov	r0, r4
 80119a6:	f7ff ff33 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80119aa:	4628      	mov	r0, r5
 80119ac:	bd38      	pop	{r3, r4, r5, pc}
 80119ae:	bf00      	nop

080119b0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 80119b0:	b108      	cbz	r0, 80119b6 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 80119b2:	f7ff bf2d 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80119b6:	4770      	bx	lr

080119b8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4604      	mov	r4, r0
 80119bc:	b128      	cbz	r0, 80119ca <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 80119be:	f7ff ff23 	bl	8011808 <builtin_interfaces__msg__Time__init>
 80119c2:	4605      	mov	r5, r0
 80119c4:	b120      	cbz	r0, 80119d0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 80119c6:	4628      	mov	r0, r5
 80119c8:	bd38      	pop	{r3, r4, r5, pc}
 80119ca:	4605      	mov	r5, r0
 80119cc:	4628      	mov	r0, r5
 80119ce:	bd38      	pop	{r3, r4, r5, pc}
 80119d0:	4620      	mov	r0, r4
 80119d2:	f7ff ff1d 	bl	8011810 <builtin_interfaces__msg__Time__fini>
 80119d6:	4628      	mov	r0, r5
 80119d8:	bd38      	pop	{r3, r4, r5, pc}
 80119da:	bf00      	nop

080119dc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 80119dc:	b108      	cbz	r0, 80119e2 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 80119de:	f7ff bf17 	b.w	8011810 <builtin_interfaces__msg__Time__fini>
 80119e2:	4770      	bx	lr

080119e4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 80119e4:	f000 b9fe 	b.w	8011de4 <tier4_vehicle_msgs__msg__ActuationCommand__init>

080119e8 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 80119e8:	f000 ba00 	b.w	8011dec <tier4_vehicle_msgs__msg__ActuationCommand__fini>

080119ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 80119ec:	4b04      	ldr	r3, [pc, #16]	@ (8011a00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	b10a      	cbz	r2, 80119f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 80119f2:	4803      	ldr	r0, [pc, #12]	@ (8011a00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 80119f4:	4770      	bx	lr
 80119f6:	4a03      	ldr	r2, [pc, #12]	@ (8011a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 80119f8:	4801      	ldr	r0, [pc, #4]	@ (8011a00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 80119fa:	6812      	ldr	r2, [r2, #0]
 80119fc:	601a      	str	r2, [r3, #0]
 80119fe:	4770      	bx	lr
 8011a00:	24001274 	.word	0x24001274
 8011a04:	24000e10 	.word	0x24000e10

08011a08 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8011a08:	f000 b9f2 	b.w	8011df0 <tier4_vehicle_msgs__msg__ActuationStatus__init>

08011a0c <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 8011a0c:	f000 b9f4 	b.w	8011df8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08011a10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8011a10:	4b04      	ldr	r3, [pc, #16]	@ (8011a24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	b10a      	cbz	r2, 8011a1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8011a16:	4803      	ldr	r0, [pc, #12]	@ (8011a24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8011a18:	4770      	bx	lr
 8011a1a:	4a03      	ldr	r2, [pc, #12]	@ (8011a28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 8011a1c:	4801      	ldr	r0, [pc, #4]	@ (8011a24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8011a1e:	6812      	ldr	r2, [r2, #0]
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	4770      	bx	lr
 8011a24:	24001334 	.word	0x24001334
 8011a28:	24000e10 	.word	0x24000e10

08011a2c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8011a2c:	b1b8      	cbz	r0, 8011a5e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 8011a2e:	b538      	push	{r3, r4, r5, lr}
 8011a30:	460d      	mov	r5, r1
 8011a32:	2108      	movs	r1, #8
 8011a34:	4628      	mov	r0, r5
 8011a36:	f7ff f971 	bl	8010d1c <ucdr_alignment>
 8011a3a:	f105 0308 	add.w	r3, r5, #8
 8011a3e:	2108      	movs	r1, #8
 8011a40:	f1c5 0508 	rsb	r5, r5, #8
 8011a44:	181c      	adds	r4, r3, r0
 8011a46:	4620      	mov	r0, r4
 8011a48:	f7ff f968 	bl	8010d1c <ucdr_alignment>
 8011a4c:	2108      	movs	r1, #8
 8011a4e:	4408      	add	r0, r1
 8011a50:	4404      	add	r4, r0
 8011a52:	4620      	mov	r0, r4
 8011a54:	f7ff f962 	bl	8010d1c <ucdr_alignment>
 8011a58:	4428      	add	r0, r5
 8011a5a:	4420      	add	r0, r4
 8011a5c:	bd38      	pop	{r3, r4, r5, pc}
 8011a5e:	4770      	bx	lr

08011a60 <_ActuationCommand__cdr_deserialize>:
 8011a60:	b538      	push	{r3, r4, r5, lr}
 8011a62:	460c      	mov	r4, r1
 8011a64:	b171      	cbz	r1, 8011a84 <_ActuationCommand__cdr_deserialize+0x24>
 8011a66:	4605      	mov	r5, r0
 8011a68:	f7ff f86a 	bl	8010b40 <ucdr_deserialize_double>
 8011a6c:	f104 0108 	add.w	r1, r4, #8
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7ff f865 	bl	8010b40 <ucdr_deserialize_double>
 8011a76:	f104 0110 	add.w	r1, r4, #16
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a80:	f7ff b85e 	b.w	8010b40 <ucdr_deserialize_double>
 8011a84:	4608      	mov	r0, r1
 8011a86:	bd38      	pop	{r3, r4, r5, pc}

08011a88 <_ActuationCommand__cdr_serialize>:
 8011a88:	b198      	cbz	r0, 8011ab2 <_ActuationCommand__cdr_serialize+0x2a>
 8011a8a:	b538      	push	{r3, r4, r5, lr}
 8011a8c:	460d      	mov	r5, r1
 8011a8e:	4604      	mov	r4, r0
 8011a90:	ed90 0b00 	vldr	d0, [r0]
 8011a94:	4608      	mov	r0, r1
 8011a96:	f7fe ff83 	bl	80109a0 <ucdr_serialize_double>
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	ed94 0b02 	vldr	d0, [r4, #8]
 8011aa0:	f7fe ff7e 	bl	80109a0 <ucdr_serialize_double>
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	ed94 0b04 	vldr	d0, [r4, #16]
 8011aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aae:	f7fe bf77 	b.w	80109a0 <ucdr_serialize_double>
 8011ab2:	4770      	bx	lr

08011ab4 <_ActuationCommand__get_serialized_size>:
 8011ab4:	b190      	cbz	r0, 8011adc <_ActuationCommand__get_serialized_size+0x28>
 8011ab6:	2108      	movs	r1, #8
 8011ab8:	2000      	movs	r0, #0
 8011aba:	b510      	push	{r4, lr}
 8011abc:	f7ff f92e 	bl	8010d1c <ucdr_alignment>
 8011ac0:	2108      	movs	r1, #8
 8011ac2:	1844      	adds	r4, r0, r1
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	f7ff f929 	bl	8010d1c <ucdr_alignment>
 8011aca:	2108      	movs	r1, #8
 8011acc:	4408      	add	r0, r1
 8011ace:	4404      	add	r4, r0
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7ff f923 	bl	8010d1c <ucdr_alignment>
 8011ad6:	3008      	adds	r0, #8
 8011ad8:	4420      	add	r0, r4
 8011ada:	bd10      	pop	{r4, pc}
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop

08011ae0 <_ActuationCommand__max_serialized_size>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	2108      	movs	r1, #8
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	f7ff f919 	bl	8010d1c <ucdr_alignment>
 8011aea:	2108      	movs	r1, #8
 8011aec:	1845      	adds	r5, r0, r1
 8011aee:	4628      	mov	r0, r5
 8011af0:	f7ff f914 	bl	8010d1c <ucdr_alignment>
 8011af4:	2108      	movs	r1, #8
 8011af6:	1844      	adds	r4, r0, r1
 8011af8:	442c      	add	r4, r5
 8011afa:	4620      	mov	r0, r4
 8011afc:	f7ff f90e 	bl	8010d1c <ucdr_alignment>
 8011b00:	3008      	adds	r0, #8
 8011b02:	4420      	add	r0, r4
 8011b04:	bd38      	pop	{r3, r4, r5, pc}
 8011b06:	bf00      	nop

08011b08 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	2108      	movs	r1, #8
 8011b10:	f104 0508 	add.w	r5, r4, #8
 8011b14:	7003      	strb	r3, [r0, #0]
 8011b16:	4620      	mov	r0, r4
 8011b18:	f1c4 0408 	rsb	r4, r4, #8
 8011b1c:	f7ff f8fe 	bl	8010d1c <ucdr_alignment>
 8011b20:	1946      	adds	r6, r0, r5
 8011b22:	2108      	movs	r1, #8
 8011b24:	4630      	mov	r0, r6
 8011b26:	f7ff f8f9 	bl	8010d1c <ucdr_alignment>
 8011b2a:	2108      	movs	r1, #8
 8011b2c:	1845      	adds	r5, r0, r1
 8011b2e:	4435      	add	r5, r6
 8011b30:	4628      	mov	r0, r5
 8011b32:	f7ff f8f3 	bl	8010d1c <ucdr_alignment>
 8011b36:	4420      	add	r0, r4
 8011b38:	4428      	add	r0, r5
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}

08011b3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8011b3c:	4800      	ldr	r0, [pc, #0]	@ (8011b40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 8011b3e:	4770      	bx	lr
 8011b40:	24001340 	.word	0x24001340

08011b44 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8011b44:	b1b8      	cbz	r0, 8011b76 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8011b46:	b538      	push	{r3, r4, r5, lr}
 8011b48:	460d      	mov	r5, r1
 8011b4a:	2108      	movs	r1, #8
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	f7ff f8e5 	bl	8010d1c <ucdr_alignment>
 8011b52:	f105 0308 	add.w	r3, r5, #8
 8011b56:	2108      	movs	r1, #8
 8011b58:	f1c5 0508 	rsb	r5, r5, #8
 8011b5c:	181c      	adds	r4, r3, r0
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f7ff f8dc 	bl	8010d1c <ucdr_alignment>
 8011b64:	2108      	movs	r1, #8
 8011b66:	4408      	add	r0, r1
 8011b68:	4404      	add	r4, r0
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f7ff f8d6 	bl	8010d1c <ucdr_alignment>
 8011b70:	4428      	add	r0, r5
 8011b72:	4420      	add	r0, r4
 8011b74:	bd38      	pop	{r3, r4, r5, pc}
 8011b76:	4770      	bx	lr

08011b78 <_ActuationStatus__cdr_deserialize>:
 8011b78:	b538      	push	{r3, r4, r5, lr}
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	b171      	cbz	r1, 8011b9c <_ActuationStatus__cdr_deserialize+0x24>
 8011b7e:	4605      	mov	r5, r0
 8011b80:	f7fe ffde 	bl	8010b40 <ucdr_deserialize_double>
 8011b84:	f104 0108 	add.w	r1, r4, #8
 8011b88:	4628      	mov	r0, r5
 8011b8a:	f7fe ffd9 	bl	8010b40 <ucdr_deserialize_double>
 8011b8e:	f104 0110 	add.w	r1, r4, #16
 8011b92:	4628      	mov	r0, r5
 8011b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b98:	f7fe bfd2 	b.w	8010b40 <ucdr_deserialize_double>
 8011b9c:	4608      	mov	r0, r1
 8011b9e:	bd38      	pop	{r3, r4, r5, pc}

08011ba0 <_ActuationStatus__cdr_serialize>:
 8011ba0:	b198      	cbz	r0, 8011bca <_ActuationStatus__cdr_serialize+0x2a>
 8011ba2:	b538      	push	{r3, r4, r5, lr}
 8011ba4:	460d      	mov	r5, r1
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	ed90 0b00 	vldr	d0, [r0]
 8011bac:	4608      	mov	r0, r1
 8011bae:	f7fe fef7 	bl	80109a0 <ucdr_serialize_double>
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	ed94 0b02 	vldr	d0, [r4, #8]
 8011bb8:	f7fe fef2 	bl	80109a0 <ucdr_serialize_double>
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	ed94 0b04 	vldr	d0, [r4, #16]
 8011bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bc6:	f7fe beeb 	b.w	80109a0 <ucdr_serialize_double>
 8011bca:	4770      	bx	lr

08011bcc <_ActuationStatus__get_serialized_size>:
 8011bcc:	b190      	cbz	r0, 8011bf4 <_ActuationStatus__get_serialized_size+0x28>
 8011bce:	2108      	movs	r1, #8
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	b510      	push	{r4, lr}
 8011bd4:	f7ff f8a2 	bl	8010d1c <ucdr_alignment>
 8011bd8:	2108      	movs	r1, #8
 8011bda:	1844      	adds	r4, r0, r1
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f7ff f89d 	bl	8010d1c <ucdr_alignment>
 8011be2:	2108      	movs	r1, #8
 8011be4:	4408      	add	r0, r1
 8011be6:	4404      	add	r4, r0
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7ff f897 	bl	8010d1c <ucdr_alignment>
 8011bee:	3008      	adds	r0, #8
 8011bf0:	4420      	add	r0, r4
 8011bf2:	bd10      	pop	{r4, pc}
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop

08011bf8 <_ActuationStatus__max_serialized_size>:
 8011bf8:	b538      	push	{r3, r4, r5, lr}
 8011bfa:	2108      	movs	r1, #8
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	f7ff f88d 	bl	8010d1c <ucdr_alignment>
 8011c02:	2108      	movs	r1, #8
 8011c04:	1845      	adds	r5, r0, r1
 8011c06:	4628      	mov	r0, r5
 8011c08:	f7ff f888 	bl	8010d1c <ucdr_alignment>
 8011c0c:	2108      	movs	r1, #8
 8011c0e:	1844      	adds	r4, r0, r1
 8011c10:	442c      	add	r4, r5
 8011c12:	4620      	mov	r0, r4
 8011c14:	f7ff f882 	bl	8010d1c <ucdr_alignment>
 8011c18:	3008      	adds	r0, #8
 8011c1a:	4420      	add	r0, r4
 8011c1c:	bd38      	pop	{r3, r4, r5, pc}
 8011c1e:	bf00      	nop

08011c20 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	460c      	mov	r4, r1
 8011c24:	2301      	movs	r3, #1
 8011c26:	2108      	movs	r1, #8
 8011c28:	f104 0508 	add.w	r5, r4, #8
 8011c2c:	7003      	strb	r3, [r0, #0]
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f1c4 0408 	rsb	r4, r4, #8
 8011c34:	f7ff f872 	bl	8010d1c <ucdr_alignment>
 8011c38:	1946      	adds	r6, r0, r5
 8011c3a:	2108      	movs	r1, #8
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	f7ff f86d 	bl	8010d1c <ucdr_alignment>
 8011c42:	2108      	movs	r1, #8
 8011c44:	1845      	adds	r5, r0, r1
 8011c46:	4435      	add	r5, r6
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f7ff f867 	bl	8010d1c <ucdr_alignment>
 8011c4e:	4420      	add	r0, r4
 8011c50:	4428      	add	r0, r5
 8011c52:	bd70      	pop	{r4, r5, r6, pc}

08011c54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8011c54:	4800      	ldr	r0, [pc, #0]	@ (8011c58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8011c56:	4770      	bx	lr
 8011c58:	24001368 	.word	0x24001368

08011c5c <ucdr_serialize_endian_array_char>:
 8011c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c60:	4619      	mov	r1, r3
 8011c62:	461f      	mov	r7, r3
 8011c64:	4605      	mov	r5, r0
 8011c66:	4690      	mov	r8, r2
 8011c68:	f7ff f830 	bl	8010ccc <ucdr_check_buffer_available_for>
 8011c6c:	b9e0      	cbnz	r0, 8011ca8 <ucdr_serialize_endian_array_char+0x4c>
 8011c6e:	463e      	mov	r6, r7
 8011c70:	e00b      	b.n	8011c8a <ucdr_serialize_endian_array_char+0x2e>
 8011c72:	4441      	add	r1, r8
 8011c74:	68a8      	ldr	r0, [r5, #8]
 8011c76:	4622      	mov	r2, r4
 8011c78:	1b36      	subs	r6, r6, r4
 8011c7a:	f000 fcb6 	bl	80125ea <memcpy>
 8011c7e:	68ab      	ldr	r3, [r5, #8]
 8011c80:	6928      	ldr	r0, [r5, #16]
 8011c82:	4423      	add	r3, r4
 8011c84:	4420      	add	r0, r4
 8011c86:	60ab      	str	r3, [r5, #8]
 8011c88:	6128      	str	r0, [r5, #16]
 8011c8a:	4631      	mov	r1, r6
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	4628      	mov	r0, r5
 8011c90:	f7ff f872 	bl	8010d78 <ucdr_check_final_buffer_behavior_array>
 8011c94:	1bb9      	subs	r1, r7, r6
 8011c96:	4604      	mov	r4, r0
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d1ea      	bne.n	8011c72 <ucdr_serialize_endian_array_char+0x16>
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	7da8      	ldrb	r0, [r5, #22]
 8011ca0:	756b      	strb	r3, [r5, #21]
 8011ca2:	4058      	eors	r0, r3
 8011ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca8:	463a      	mov	r2, r7
 8011caa:	4641      	mov	r1, r8
 8011cac:	68a8      	ldr	r0, [r5, #8]
 8011cae:	f000 fc9c 	bl	80125ea <memcpy>
 8011cb2:	68aa      	ldr	r2, [r5, #8]
 8011cb4:	692b      	ldr	r3, [r5, #16]
 8011cb6:	443a      	add	r2, r7
 8011cb8:	443b      	add	r3, r7
 8011cba:	60aa      	str	r2, [r5, #8]
 8011cbc:	612b      	str	r3, [r5, #16]
 8011cbe:	e7ed      	b.n	8011c9c <ucdr_serialize_endian_array_char+0x40>

08011cc0 <ucdr_deserialize_endian_array_char>:
 8011cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	461f      	mov	r7, r3
 8011cc8:	4605      	mov	r5, r0
 8011cca:	4690      	mov	r8, r2
 8011ccc:	f7fe fffe 	bl	8010ccc <ucdr_check_buffer_available_for>
 8011cd0:	b9e8      	cbnz	r0, 8011d0e <ucdr_deserialize_endian_array_char+0x4e>
 8011cd2:	463e      	mov	r6, r7
 8011cd4:	e00c      	b.n	8011cf0 <ucdr_deserialize_endian_array_char+0x30>
 8011cd6:	eb08 0003 	add.w	r0, r8, r3
 8011cda:	68a9      	ldr	r1, [r5, #8]
 8011cdc:	4622      	mov	r2, r4
 8011cde:	1b36      	subs	r6, r6, r4
 8011ce0:	f000 fc83 	bl	80125ea <memcpy>
 8011ce4:	68ab      	ldr	r3, [r5, #8]
 8011ce6:	6928      	ldr	r0, [r5, #16]
 8011ce8:	4423      	add	r3, r4
 8011cea:	4420      	add	r0, r4
 8011cec:	60ab      	str	r3, [r5, #8]
 8011cee:	6128      	str	r0, [r5, #16]
 8011cf0:	4631      	mov	r1, r6
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f7ff f83f 	bl	8010d78 <ucdr_check_final_buffer_behavior_array>
 8011cfa:	1bbb      	subs	r3, r7, r6
 8011cfc:	4604      	mov	r4, r0
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	d1e9      	bne.n	8011cd6 <ucdr_deserialize_endian_array_char+0x16>
 8011d02:	2301      	movs	r3, #1
 8011d04:	7da8      	ldrb	r0, [r5, #22]
 8011d06:	756b      	strb	r3, [r5, #21]
 8011d08:	4058      	eors	r0, r3
 8011d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d0e:	463a      	mov	r2, r7
 8011d10:	68a9      	ldr	r1, [r5, #8]
 8011d12:	4640      	mov	r0, r8
 8011d14:	f000 fc69 	bl	80125ea <memcpy>
 8011d18:	68aa      	ldr	r2, [r5, #8]
 8011d1a:	692b      	ldr	r3, [r5, #16]
 8011d1c:	443a      	add	r2, r7
 8011d1e:	443b      	add	r3, r7
 8011d20:	60aa      	str	r2, [r5, #8]
 8011d22:	612b      	str	r3, [r5, #16]
 8011d24:	e7ed      	b.n	8011d02 <ucdr_deserialize_endian_array_char+0x42>
 8011d26:	bf00      	nop

08011d28 <rosidl_runtime_c__String__init>:
 8011d28:	b510      	push	{r4, lr}
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	b086      	sub	sp, #24
 8011d2e:	b170      	cbz	r0, 8011d4e <rosidl_runtime_c__String__init+0x26>
 8011d30:	a801      	add	r0, sp, #4
 8011d32:	f7ff f867 	bl	8010e04 <rcutils_get_default_allocator>
 8011d36:	9b01      	ldr	r3, [sp, #4]
 8011d38:	9905      	ldr	r1, [sp, #20]
 8011d3a:	2001      	movs	r0, #1
 8011d3c:	4798      	blx	r3
 8011d3e:	6020      	str	r0, [r4, #0]
 8011d40:	b128      	cbz	r0, 8011d4e <rosidl_runtime_c__String__init+0x26>
 8011d42:	2100      	movs	r1, #0
 8011d44:	2201      	movs	r2, #1
 8011d46:	7001      	strb	r1, [r0, #0]
 8011d48:	4610      	mov	r0, r2
 8011d4a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011d4e:	b006      	add	sp, #24
 8011d50:	bd10      	pop	{r4, pc}
 8011d52:	bf00      	nop

08011d54 <rosidl_runtime_c__String__fini>:
 8011d54:	b320      	cbz	r0, 8011da0 <rosidl_runtime_c__String__fini+0x4c>
 8011d56:	6803      	ldr	r3, [r0, #0]
 8011d58:	b510      	push	{r4, lr}
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	b086      	sub	sp, #24
 8011d5e:	b173      	cbz	r3, 8011d7e <rosidl_runtime_c__String__fini+0x2a>
 8011d60:	6883      	ldr	r3, [r0, #8]
 8011d62:	b1f3      	cbz	r3, 8011da2 <rosidl_runtime_c__String__fini+0x4e>
 8011d64:	a801      	add	r0, sp, #4
 8011d66:	f7ff f84d 	bl	8010e04 <rcutils_get_default_allocator>
 8011d6a:	9b02      	ldr	r3, [sp, #8]
 8011d6c:	9905      	ldr	r1, [sp, #20]
 8011d6e:	6820      	ldr	r0, [r4, #0]
 8011d70:	4798      	blx	r3
 8011d72:	2300      	movs	r3, #0
 8011d74:	e9c4 3300 	strd	r3, r3, [r4]
 8011d78:	60a3      	str	r3, [r4, #8]
 8011d7a:	b006      	add	sp, #24
 8011d7c:	bd10      	pop	{r4, pc}
 8011d7e:	6843      	ldr	r3, [r0, #4]
 8011d80:	b9db      	cbnz	r3, 8011dba <rosidl_runtime_c__String__fini+0x66>
 8011d82:	6883      	ldr	r3, [r0, #8]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d0f8      	beq.n	8011d7a <rosidl_runtime_c__String__fini+0x26>
 8011d88:	4b12      	ldr	r3, [pc, #72]	@ (8011dd4 <rosidl_runtime_c__String__fini+0x80>)
 8011d8a:	2251      	movs	r2, #81	@ 0x51
 8011d8c:	2101      	movs	r1, #1
 8011d8e:	4812      	ldr	r0, [pc, #72]	@ (8011dd8 <rosidl_runtime_c__String__fini+0x84>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	f000 fa62 	bl	801225c <fwrite>
 8011d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d9c:	f000 f84a 	bl	8011e34 <exit>
 8011da0:	4770      	bx	lr
 8011da2:	4b0c      	ldr	r3, [pc, #48]	@ (8011dd4 <rosidl_runtime_c__String__fini+0x80>)
 8011da4:	224c      	movs	r2, #76	@ 0x4c
 8011da6:	2101      	movs	r1, #1
 8011da8:	480c      	ldr	r0, [pc, #48]	@ (8011ddc <rosidl_runtime_c__String__fini+0x88>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	68db      	ldr	r3, [r3, #12]
 8011dae:	f000 fa55 	bl	801225c <fwrite>
 8011db2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011db6:	f000 f83d 	bl	8011e34 <exit>
 8011dba:	4b06      	ldr	r3, [pc, #24]	@ (8011dd4 <rosidl_runtime_c__String__fini+0x80>)
 8011dbc:	224e      	movs	r2, #78	@ 0x4e
 8011dbe:	2101      	movs	r1, #1
 8011dc0:	4807      	ldr	r0, [pc, #28]	@ (8011de0 <rosidl_runtime_c__String__fini+0x8c>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	f000 fa49 	bl	801225c <fwrite>
 8011dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011dce:	f000 f831 	bl	8011e34 <exit>
 8011dd2:	bf00      	nop
 8011dd4:	2400139c 	.word	0x2400139c
 8011dd8:	0801432c 	.word	0x0801432c
 8011ddc:	0801428c 	.word	0x0801428c
 8011de0:	080142dc 	.word	0x080142dc

08011de4 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8011de4:	3800      	subs	r0, #0
 8011de6:	bf18      	it	ne
 8011de8:	2001      	movne	r0, #1
 8011dea:	4770      	bx	lr

08011dec <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8011dec:	4770      	bx	lr
 8011dee:	bf00      	nop

08011df0 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8011df0:	3800      	subs	r0, #0
 8011df2:	bf18      	it	ne
 8011df4:	2001      	movne	r0, #1
 8011df6:	4770      	bx	lr

08011df8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop

08011dfc <calloc>:
 8011dfc:	4b02      	ldr	r3, [pc, #8]	@ (8011e08 <calloc+0xc>)
 8011dfe:	460a      	mov	r2, r1
 8011e00:	4601      	mov	r1, r0
 8011e02:	6818      	ldr	r0, [r3, #0]
 8011e04:	f000 b802 	b.w	8011e0c <_calloc_r>
 8011e08:	2400139c 	.word	0x2400139c

08011e0c <_calloc_r>:
 8011e0c:	b570      	push	{r4, r5, r6, lr}
 8011e0e:	fba1 5402 	umull	r5, r4, r1, r2
 8011e12:	b93c      	cbnz	r4, 8011e24 <_calloc_r+0x18>
 8011e14:	4629      	mov	r1, r5
 8011e16:	f000 f851 	bl	8011ebc <_malloc_r>
 8011e1a:	4606      	mov	r6, r0
 8011e1c:	b928      	cbnz	r0, 8011e2a <_calloc_r+0x1e>
 8011e1e:	2600      	movs	r6, #0
 8011e20:	4630      	mov	r0, r6
 8011e22:	bd70      	pop	{r4, r5, r6, pc}
 8011e24:	220c      	movs	r2, #12
 8011e26:	6002      	str	r2, [r0, #0]
 8011e28:	e7f9      	b.n	8011e1e <_calloc_r+0x12>
 8011e2a:	462a      	mov	r2, r5
 8011e2c:	4621      	mov	r1, r4
 8011e2e:	f000 fafb 	bl	8012428 <memset>
 8011e32:	e7f5      	b.n	8011e20 <_calloc_r+0x14>

08011e34 <exit>:
 8011e34:	b508      	push	{r3, lr}
 8011e36:	4b06      	ldr	r3, [pc, #24]	@ (8011e50 <exit+0x1c>)
 8011e38:	4604      	mov	r4, r0
 8011e3a:	b113      	cbz	r3, 8011e42 <exit+0xe>
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	f3af 8000 	nop.w
 8011e42:	4b04      	ldr	r3, [pc, #16]	@ (8011e54 <exit+0x20>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	b103      	cbz	r3, 8011e4a <exit+0x16>
 8011e48:	4798      	blx	r3
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	f7ef f9aa 	bl	80011a4 <_exit>
 8011e50:	00000000 	.word	0x00000000
 8011e54:	24033cdc 	.word	0x24033cdc

08011e58 <malloc>:
 8011e58:	4b02      	ldr	r3, [pc, #8]	@ (8011e64 <malloc+0xc>)
 8011e5a:	4601      	mov	r1, r0
 8011e5c:	6818      	ldr	r0, [r3, #0]
 8011e5e:	f000 b82d 	b.w	8011ebc <_malloc_r>
 8011e62:	bf00      	nop
 8011e64:	2400139c 	.word	0x2400139c

08011e68 <free>:
 8011e68:	4b02      	ldr	r3, [pc, #8]	@ (8011e74 <free+0xc>)
 8011e6a:	4601      	mov	r1, r0
 8011e6c:	6818      	ldr	r0, [r3, #0]
 8011e6e:	f000 bbcb 	b.w	8012608 <_free_r>
 8011e72:	bf00      	nop
 8011e74:	2400139c 	.word	0x2400139c

08011e78 <sbrk_aligned>:
 8011e78:	b570      	push	{r4, r5, r6, lr}
 8011e7a:	4e0f      	ldr	r6, [pc, #60]	@ (8011eb8 <sbrk_aligned+0x40>)
 8011e7c:	460c      	mov	r4, r1
 8011e7e:	6831      	ldr	r1, [r6, #0]
 8011e80:	4605      	mov	r5, r0
 8011e82:	b911      	cbnz	r1, 8011e8a <sbrk_aligned+0x12>
 8011e84:	f000 fb62 	bl	801254c <_sbrk_r>
 8011e88:	6030      	str	r0, [r6, #0]
 8011e8a:	4621      	mov	r1, r4
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	f000 fb5d 	bl	801254c <_sbrk_r>
 8011e92:	1c43      	adds	r3, r0, #1
 8011e94:	d103      	bne.n	8011e9e <sbrk_aligned+0x26>
 8011e96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	bd70      	pop	{r4, r5, r6, pc}
 8011e9e:	1cc4      	adds	r4, r0, #3
 8011ea0:	f024 0403 	bic.w	r4, r4, #3
 8011ea4:	42a0      	cmp	r0, r4
 8011ea6:	d0f8      	beq.n	8011e9a <sbrk_aligned+0x22>
 8011ea8:	1a21      	subs	r1, r4, r0
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f000 fb4e 	bl	801254c <_sbrk_r>
 8011eb0:	3001      	adds	r0, #1
 8011eb2:	d1f2      	bne.n	8011e9a <sbrk_aligned+0x22>
 8011eb4:	e7ef      	b.n	8011e96 <sbrk_aligned+0x1e>
 8011eb6:	bf00      	nop
 8011eb8:	24033b9c 	.word	0x24033b9c

08011ebc <_malloc_r>:
 8011ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ec0:	1ccd      	adds	r5, r1, #3
 8011ec2:	f025 0503 	bic.w	r5, r5, #3
 8011ec6:	3508      	adds	r5, #8
 8011ec8:	2d0c      	cmp	r5, #12
 8011eca:	bf38      	it	cc
 8011ecc:	250c      	movcc	r5, #12
 8011ece:	2d00      	cmp	r5, #0
 8011ed0:	4606      	mov	r6, r0
 8011ed2:	db01      	blt.n	8011ed8 <_malloc_r+0x1c>
 8011ed4:	42a9      	cmp	r1, r5
 8011ed6:	d904      	bls.n	8011ee2 <_malloc_r+0x26>
 8011ed8:	230c      	movs	r3, #12
 8011eda:	6033      	str	r3, [r6, #0]
 8011edc:	2000      	movs	r0, #0
 8011ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011fb8 <_malloc_r+0xfc>
 8011ee6:	f000 f869 	bl	8011fbc <__malloc_lock>
 8011eea:	f8d8 3000 	ldr.w	r3, [r8]
 8011eee:	461c      	mov	r4, r3
 8011ef0:	bb44      	cbnz	r4, 8011f44 <_malloc_r+0x88>
 8011ef2:	4629      	mov	r1, r5
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	f7ff ffbf 	bl	8011e78 <sbrk_aligned>
 8011efa:	1c43      	adds	r3, r0, #1
 8011efc:	4604      	mov	r4, r0
 8011efe:	d158      	bne.n	8011fb2 <_malloc_r+0xf6>
 8011f00:	f8d8 4000 	ldr.w	r4, [r8]
 8011f04:	4627      	mov	r7, r4
 8011f06:	2f00      	cmp	r7, #0
 8011f08:	d143      	bne.n	8011f92 <_malloc_r+0xd6>
 8011f0a:	2c00      	cmp	r4, #0
 8011f0c:	d04b      	beq.n	8011fa6 <_malloc_r+0xea>
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	4639      	mov	r1, r7
 8011f12:	4630      	mov	r0, r6
 8011f14:	eb04 0903 	add.w	r9, r4, r3
 8011f18:	f000 fb18 	bl	801254c <_sbrk_r>
 8011f1c:	4581      	cmp	r9, r0
 8011f1e:	d142      	bne.n	8011fa6 <_malloc_r+0xea>
 8011f20:	6821      	ldr	r1, [r4, #0]
 8011f22:	1a6d      	subs	r5, r5, r1
 8011f24:	4629      	mov	r1, r5
 8011f26:	4630      	mov	r0, r6
 8011f28:	f7ff ffa6 	bl	8011e78 <sbrk_aligned>
 8011f2c:	3001      	adds	r0, #1
 8011f2e:	d03a      	beq.n	8011fa6 <_malloc_r+0xea>
 8011f30:	6823      	ldr	r3, [r4, #0]
 8011f32:	442b      	add	r3, r5
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	f8d8 3000 	ldr.w	r3, [r8]
 8011f3a:	685a      	ldr	r2, [r3, #4]
 8011f3c:	bb62      	cbnz	r2, 8011f98 <_malloc_r+0xdc>
 8011f3e:	f8c8 7000 	str.w	r7, [r8]
 8011f42:	e00f      	b.n	8011f64 <_malloc_r+0xa8>
 8011f44:	6822      	ldr	r2, [r4, #0]
 8011f46:	1b52      	subs	r2, r2, r5
 8011f48:	d420      	bmi.n	8011f8c <_malloc_r+0xd0>
 8011f4a:	2a0b      	cmp	r2, #11
 8011f4c:	d917      	bls.n	8011f7e <_malloc_r+0xc2>
 8011f4e:	1961      	adds	r1, r4, r5
 8011f50:	42a3      	cmp	r3, r4
 8011f52:	6025      	str	r5, [r4, #0]
 8011f54:	bf18      	it	ne
 8011f56:	6059      	strne	r1, [r3, #4]
 8011f58:	6863      	ldr	r3, [r4, #4]
 8011f5a:	bf08      	it	eq
 8011f5c:	f8c8 1000 	streq.w	r1, [r8]
 8011f60:	5162      	str	r2, [r4, r5]
 8011f62:	604b      	str	r3, [r1, #4]
 8011f64:	4630      	mov	r0, r6
 8011f66:	f000 f82f 	bl	8011fc8 <__malloc_unlock>
 8011f6a:	f104 000b 	add.w	r0, r4, #11
 8011f6e:	1d23      	adds	r3, r4, #4
 8011f70:	f020 0007 	bic.w	r0, r0, #7
 8011f74:	1ac2      	subs	r2, r0, r3
 8011f76:	bf1c      	itt	ne
 8011f78:	1a1b      	subne	r3, r3, r0
 8011f7a:	50a3      	strne	r3, [r4, r2]
 8011f7c:	e7af      	b.n	8011ede <_malloc_r+0x22>
 8011f7e:	6862      	ldr	r2, [r4, #4]
 8011f80:	42a3      	cmp	r3, r4
 8011f82:	bf0c      	ite	eq
 8011f84:	f8c8 2000 	streq.w	r2, [r8]
 8011f88:	605a      	strne	r2, [r3, #4]
 8011f8a:	e7eb      	b.n	8011f64 <_malloc_r+0xa8>
 8011f8c:	4623      	mov	r3, r4
 8011f8e:	6864      	ldr	r4, [r4, #4]
 8011f90:	e7ae      	b.n	8011ef0 <_malloc_r+0x34>
 8011f92:	463c      	mov	r4, r7
 8011f94:	687f      	ldr	r7, [r7, #4]
 8011f96:	e7b6      	b.n	8011f06 <_malloc_r+0x4a>
 8011f98:	461a      	mov	r2, r3
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	42a3      	cmp	r3, r4
 8011f9e:	d1fb      	bne.n	8011f98 <_malloc_r+0xdc>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	6053      	str	r3, [r2, #4]
 8011fa4:	e7de      	b.n	8011f64 <_malloc_r+0xa8>
 8011fa6:	230c      	movs	r3, #12
 8011fa8:	6033      	str	r3, [r6, #0]
 8011faa:	4630      	mov	r0, r6
 8011fac:	f000 f80c 	bl	8011fc8 <__malloc_unlock>
 8011fb0:	e794      	b.n	8011edc <_malloc_r+0x20>
 8011fb2:	6005      	str	r5, [r0, #0]
 8011fb4:	e7d6      	b.n	8011f64 <_malloc_r+0xa8>
 8011fb6:	bf00      	nop
 8011fb8:	24033ba0 	.word	0x24033ba0

08011fbc <__malloc_lock>:
 8011fbc:	4801      	ldr	r0, [pc, #4]	@ (8011fc4 <__malloc_lock+0x8>)
 8011fbe:	f000 bb12 	b.w	80125e6 <__retarget_lock_acquire_recursive>
 8011fc2:	bf00      	nop
 8011fc4:	24033ce4 	.word	0x24033ce4

08011fc8 <__malloc_unlock>:
 8011fc8:	4801      	ldr	r0, [pc, #4]	@ (8011fd0 <__malloc_unlock+0x8>)
 8011fca:	f000 bb0d 	b.w	80125e8 <__retarget_lock_release_recursive>
 8011fce:	bf00      	nop
 8011fd0:	24033ce4 	.word	0x24033ce4

08011fd4 <realloc>:
 8011fd4:	4b02      	ldr	r3, [pc, #8]	@ (8011fe0 <realloc+0xc>)
 8011fd6:	460a      	mov	r2, r1
 8011fd8:	4601      	mov	r1, r0
 8011fda:	6818      	ldr	r0, [r3, #0]
 8011fdc:	f000 b802 	b.w	8011fe4 <_realloc_r>
 8011fe0:	2400139c 	.word	0x2400139c

08011fe4 <_realloc_r>:
 8011fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe8:	4680      	mov	r8, r0
 8011fea:	4615      	mov	r5, r2
 8011fec:	460c      	mov	r4, r1
 8011fee:	b921      	cbnz	r1, 8011ffa <_realloc_r+0x16>
 8011ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	f7ff bf61 	b.w	8011ebc <_malloc_r>
 8011ffa:	b92a      	cbnz	r2, 8012008 <_realloc_r+0x24>
 8011ffc:	f000 fb04 	bl	8012608 <_free_r>
 8012000:	2400      	movs	r4, #0
 8012002:	4620      	mov	r0, r4
 8012004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012008:	f000 fb48 	bl	801269c <_malloc_usable_size_r>
 801200c:	4285      	cmp	r5, r0
 801200e:	4606      	mov	r6, r0
 8012010:	d802      	bhi.n	8012018 <_realloc_r+0x34>
 8012012:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012016:	d8f4      	bhi.n	8012002 <_realloc_r+0x1e>
 8012018:	4629      	mov	r1, r5
 801201a:	4640      	mov	r0, r8
 801201c:	f7ff ff4e 	bl	8011ebc <_malloc_r>
 8012020:	4607      	mov	r7, r0
 8012022:	2800      	cmp	r0, #0
 8012024:	d0ec      	beq.n	8012000 <_realloc_r+0x1c>
 8012026:	42b5      	cmp	r5, r6
 8012028:	462a      	mov	r2, r5
 801202a:	4621      	mov	r1, r4
 801202c:	bf28      	it	cs
 801202e:	4632      	movcs	r2, r6
 8012030:	f000 fadb 	bl	80125ea <memcpy>
 8012034:	4621      	mov	r1, r4
 8012036:	4640      	mov	r0, r8
 8012038:	f000 fae6 	bl	8012608 <_free_r>
 801203c:	463c      	mov	r4, r7
 801203e:	e7e0      	b.n	8012002 <_realloc_r+0x1e>

08012040 <std>:
 8012040:	2300      	movs	r3, #0
 8012042:	b510      	push	{r4, lr}
 8012044:	4604      	mov	r4, r0
 8012046:	e9c0 3300 	strd	r3, r3, [r0]
 801204a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801204e:	6083      	str	r3, [r0, #8]
 8012050:	8181      	strh	r1, [r0, #12]
 8012052:	6643      	str	r3, [r0, #100]	@ 0x64
 8012054:	81c2      	strh	r2, [r0, #14]
 8012056:	6183      	str	r3, [r0, #24]
 8012058:	4619      	mov	r1, r3
 801205a:	2208      	movs	r2, #8
 801205c:	305c      	adds	r0, #92	@ 0x5c
 801205e:	f000 f9e3 	bl	8012428 <memset>
 8012062:	4b0d      	ldr	r3, [pc, #52]	@ (8012098 <std+0x58>)
 8012064:	6263      	str	r3, [r4, #36]	@ 0x24
 8012066:	4b0d      	ldr	r3, [pc, #52]	@ (801209c <std+0x5c>)
 8012068:	62a3      	str	r3, [r4, #40]	@ 0x28
 801206a:	4b0d      	ldr	r3, [pc, #52]	@ (80120a0 <std+0x60>)
 801206c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801206e:	4b0d      	ldr	r3, [pc, #52]	@ (80120a4 <std+0x64>)
 8012070:	6323      	str	r3, [r4, #48]	@ 0x30
 8012072:	4b0d      	ldr	r3, [pc, #52]	@ (80120a8 <std+0x68>)
 8012074:	6224      	str	r4, [r4, #32]
 8012076:	429c      	cmp	r4, r3
 8012078:	d006      	beq.n	8012088 <std+0x48>
 801207a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801207e:	4294      	cmp	r4, r2
 8012080:	d002      	beq.n	8012088 <std+0x48>
 8012082:	33d0      	adds	r3, #208	@ 0xd0
 8012084:	429c      	cmp	r4, r3
 8012086:	d105      	bne.n	8012094 <std+0x54>
 8012088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801208c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012090:	f000 baa8 	b.w	80125e4 <__retarget_lock_init_recursive>
 8012094:	bd10      	pop	{r4, pc}
 8012096:	bf00      	nop
 8012098:	08012279 	.word	0x08012279
 801209c:	0801229b 	.word	0x0801229b
 80120a0:	080122d3 	.word	0x080122d3
 80120a4:	080122f7 	.word	0x080122f7
 80120a8:	24033ba4 	.word	0x24033ba4

080120ac <stdio_exit_handler>:
 80120ac:	4a02      	ldr	r2, [pc, #8]	@ (80120b8 <stdio_exit_handler+0xc>)
 80120ae:	4903      	ldr	r1, [pc, #12]	@ (80120bc <stdio_exit_handler+0x10>)
 80120b0:	4803      	ldr	r0, [pc, #12]	@ (80120c0 <stdio_exit_handler+0x14>)
 80120b2:	f000 b869 	b.w	8012188 <_fwalk_sglue>
 80120b6:	bf00      	nop
 80120b8:	24001390 	.word	0x24001390
 80120bc:	080127b5 	.word	0x080127b5
 80120c0:	240013a0 	.word	0x240013a0

080120c4 <cleanup_stdio>:
 80120c4:	6841      	ldr	r1, [r0, #4]
 80120c6:	4b0c      	ldr	r3, [pc, #48]	@ (80120f8 <cleanup_stdio+0x34>)
 80120c8:	4299      	cmp	r1, r3
 80120ca:	b510      	push	{r4, lr}
 80120cc:	4604      	mov	r4, r0
 80120ce:	d001      	beq.n	80120d4 <cleanup_stdio+0x10>
 80120d0:	f000 fb70 	bl	80127b4 <_fflush_r>
 80120d4:	68a1      	ldr	r1, [r4, #8]
 80120d6:	4b09      	ldr	r3, [pc, #36]	@ (80120fc <cleanup_stdio+0x38>)
 80120d8:	4299      	cmp	r1, r3
 80120da:	d002      	beq.n	80120e2 <cleanup_stdio+0x1e>
 80120dc:	4620      	mov	r0, r4
 80120de:	f000 fb69 	bl	80127b4 <_fflush_r>
 80120e2:	68e1      	ldr	r1, [r4, #12]
 80120e4:	4b06      	ldr	r3, [pc, #24]	@ (8012100 <cleanup_stdio+0x3c>)
 80120e6:	4299      	cmp	r1, r3
 80120e8:	d004      	beq.n	80120f4 <cleanup_stdio+0x30>
 80120ea:	4620      	mov	r0, r4
 80120ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120f0:	f000 bb60 	b.w	80127b4 <_fflush_r>
 80120f4:	bd10      	pop	{r4, pc}
 80120f6:	bf00      	nop
 80120f8:	24033ba4 	.word	0x24033ba4
 80120fc:	24033c0c 	.word	0x24033c0c
 8012100:	24033c74 	.word	0x24033c74

08012104 <global_stdio_init.part.0>:
 8012104:	b510      	push	{r4, lr}
 8012106:	4b0b      	ldr	r3, [pc, #44]	@ (8012134 <global_stdio_init.part.0+0x30>)
 8012108:	4c0b      	ldr	r4, [pc, #44]	@ (8012138 <global_stdio_init.part.0+0x34>)
 801210a:	4a0c      	ldr	r2, [pc, #48]	@ (801213c <global_stdio_init.part.0+0x38>)
 801210c:	601a      	str	r2, [r3, #0]
 801210e:	4620      	mov	r0, r4
 8012110:	2200      	movs	r2, #0
 8012112:	2104      	movs	r1, #4
 8012114:	f7ff ff94 	bl	8012040 <std>
 8012118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801211c:	2201      	movs	r2, #1
 801211e:	2109      	movs	r1, #9
 8012120:	f7ff ff8e 	bl	8012040 <std>
 8012124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012128:	2202      	movs	r2, #2
 801212a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801212e:	2112      	movs	r1, #18
 8012130:	f7ff bf86 	b.w	8012040 <std>
 8012134:	24033cdc 	.word	0x24033cdc
 8012138:	24033ba4 	.word	0x24033ba4
 801213c:	080120ad 	.word	0x080120ad

08012140 <__sfp_lock_acquire>:
 8012140:	4801      	ldr	r0, [pc, #4]	@ (8012148 <__sfp_lock_acquire+0x8>)
 8012142:	f000 ba50 	b.w	80125e6 <__retarget_lock_acquire_recursive>
 8012146:	bf00      	nop
 8012148:	24033ce5 	.word	0x24033ce5

0801214c <__sfp_lock_release>:
 801214c:	4801      	ldr	r0, [pc, #4]	@ (8012154 <__sfp_lock_release+0x8>)
 801214e:	f000 ba4b 	b.w	80125e8 <__retarget_lock_release_recursive>
 8012152:	bf00      	nop
 8012154:	24033ce5 	.word	0x24033ce5

08012158 <__sinit>:
 8012158:	b510      	push	{r4, lr}
 801215a:	4604      	mov	r4, r0
 801215c:	f7ff fff0 	bl	8012140 <__sfp_lock_acquire>
 8012160:	6a23      	ldr	r3, [r4, #32]
 8012162:	b11b      	cbz	r3, 801216c <__sinit+0x14>
 8012164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012168:	f7ff bff0 	b.w	801214c <__sfp_lock_release>
 801216c:	4b04      	ldr	r3, [pc, #16]	@ (8012180 <__sinit+0x28>)
 801216e:	6223      	str	r3, [r4, #32]
 8012170:	4b04      	ldr	r3, [pc, #16]	@ (8012184 <__sinit+0x2c>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1f5      	bne.n	8012164 <__sinit+0xc>
 8012178:	f7ff ffc4 	bl	8012104 <global_stdio_init.part.0>
 801217c:	e7f2      	b.n	8012164 <__sinit+0xc>
 801217e:	bf00      	nop
 8012180:	080120c5 	.word	0x080120c5
 8012184:	24033cdc 	.word	0x24033cdc

08012188 <_fwalk_sglue>:
 8012188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801218c:	4607      	mov	r7, r0
 801218e:	4688      	mov	r8, r1
 8012190:	4614      	mov	r4, r2
 8012192:	2600      	movs	r6, #0
 8012194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012198:	f1b9 0901 	subs.w	r9, r9, #1
 801219c:	d505      	bpl.n	80121aa <_fwalk_sglue+0x22>
 801219e:	6824      	ldr	r4, [r4, #0]
 80121a0:	2c00      	cmp	r4, #0
 80121a2:	d1f7      	bne.n	8012194 <_fwalk_sglue+0xc>
 80121a4:	4630      	mov	r0, r6
 80121a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121aa:	89ab      	ldrh	r3, [r5, #12]
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d907      	bls.n	80121c0 <_fwalk_sglue+0x38>
 80121b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121b4:	3301      	adds	r3, #1
 80121b6:	d003      	beq.n	80121c0 <_fwalk_sglue+0x38>
 80121b8:	4629      	mov	r1, r5
 80121ba:	4638      	mov	r0, r7
 80121bc:	47c0      	blx	r8
 80121be:	4306      	orrs	r6, r0
 80121c0:	3568      	adds	r5, #104	@ 0x68
 80121c2:	e7e9      	b.n	8012198 <_fwalk_sglue+0x10>

080121c4 <_fwrite_r>:
 80121c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121c8:	9c08      	ldr	r4, [sp, #32]
 80121ca:	468a      	mov	sl, r1
 80121cc:	4690      	mov	r8, r2
 80121ce:	fb02 f903 	mul.w	r9, r2, r3
 80121d2:	4606      	mov	r6, r0
 80121d4:	b118      	cbz	r0, 80121de <_fwrite_r+0x1a>
 80121d6:	6a03      	ldr	r3, [r0, #32]
 80121d8:	b90b      	cbnz	r3, 80121de <_fwrite_r+0x1a>
 80121da:	f7ff ffbd 	bl	8012158 <__sinit>
 80121de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80121e0:	07dd      	lsls	r5, r3, #31
 80121e2:	d405      	bmi.n	80121f0 <_fwrite_r+0x2c>
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	0598      	lsls	r0, r3, #22
 80121e8:	d402      	bmi.n	80121f0 <_fwrite_r+0x2c>
 80121ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80121ec:	f000 f9fb 	bl	80125e6 <__retarget_lock_acquire_recursive>
 80121f0:	89a3      	ldrh	r3, [r4, #12]
 80121f2:	0719      	lsls	r1, r3, #28
 80121f4:	d516      	bpl.n	8012224 <_fwrite_r+0x60>
 80121f6:	6923      	ldr	r3, [r4, #16]
 80121f8:	b1a3      	cbz	r3, 8012224 <_fwrite_r+0x60>
 80121fa:	2500      	movs	r5, #0
 80121fc:	454d      	cmp	r5, r9
 80121fe:	d01f      	beq.n	8012240 <_fwrite_r+0x7c>
 8012200:	68a7      	ldr	r7, [r4, #8]
 8012202:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8012206:	3f01      	subs	r7, #1
 8012208:	2f00      	cmp	r7, #0
 801220a:	60a7      	str	r7, [r4, #8]
 801220c:	da04      	bge.n	8012218 <_fwrite_r+0x54>
 801220e:	69a3      	ldr	r3, [r4, #24]
 8012210:	429f      	cmp	r7, r3
 8012212:	db0f      	blt.n	8012234 <_fwrite_r+0x70>
 8012214:	290a      	cmp	r1, #10
 8012216:	d00d      	beq.n	8012234 <_fwrite_r+0x70>
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	1c5a      	adds	r2, r3, #1
 801221c:	6022      	str	r2, [r4, #0]
 801221e:	7019      	strb	r1, [r3, #0]
 8012220:	3501      	adds	r5, #1
 8012222:	e7eb      	b.n	80121fc <_fwrite_r+0x38>
 8012224:	4621      	mov	r1, r4
 8012226:	4630      	mov	r0, r6
 8012228:	f000 f8a8 	bl	801237c <__swsetup_r>
 801222c:	2800      	cmp	r0, #0
 801222e:	d0e4      	beq.n	80121fa <_fwrite_r+0x36>
 8012230:	2500      	movs	r5, #0
 8012232:	e005      	b.n	8012240 <_fwrite_r+0x7c>
 8012234:	4622      	mov	r2, r4
 8012236:	4630      	mov	r0, r6
 8012238:	f000 f861 	bl	80122fe <__swbuf_r>
 801223c:	3001      	adds	r0, #1
 801223e:	d1ef      	bne.n	8012220 <_fwrite_r+0x5c>
 8012240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012242:	07da      	lsls	r2, r3, #31
 8012244:	d405      	bmi.n	8012252 <_fwrite_r+0x8e>
 8012246:	89a3      	ldrh	r3, [r4, #12]
 8012248:	059b      	lsls	r3, r3, #22
 801224a:	d402      	bmi.n	8012252 <_fwrite_r+0x8e>
 801224c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801224e:	f000 f9cb 	bl	80125e8 <__retarget_lock_release_recursive>
 8012252:	fbb5 f0f8 	udiv	r0, r5, r8
 8012256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801225c <fwrite>:
 801225c:	b507      	push	{r0, r1, r2, lr}
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	4613      	mov	r3, r2
 8012262:	460a      	mov	r2, r1
 8012264:	4601      	mov	r1, r0
 8012266:	4803      	ldr	r0, [pc, #12]	@ (8012274 <fwrite+0x18>)
 8012268:	6800      	ldr	r0, [r0, #0]
 801226a:	f7ff ffab 	bl	80121c4 <_fwrite_r>
 801226e:	b003      	add	sp, #12
 8012270:	f85d fb04 	ldr.w	pc, [sp], #4
 8012274:	2400139c 	.word	0x2400139c

08012278 <__sread>:
 8012278:	b510      	push	{r4, lr}
 801227a:	460c      	mov	r4, r1
 801227c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012280:	f000 f952 	bl	8012528 <_read_r>
 8012284:	2800      	cmp	r0, #0
 8012286:	bfab      	itete	ge
 8012288:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801228a:	89a3      	ldrhlt	r3, [r4, #12]
 801228c:	181b      	addge	r3, r3, r0
 801228e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012292:	bfac      	ite	ge
 8012294:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012296:	81a3      	strhlt	r3, [r4, #12]
 8012298:	bd10      	pop	{r4, pc}

0801229a <__swrite>:
 801229a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801229e:	461f      	mov	r7, r3
 80122a0:	898b      	ldrh	r3, [r1, #12]
 80122a2:	05db      	lsls	r3, r3, #23
 80122a4:	4605      	mov	r5, r0
 80122a6:	460c      	mov	r4, r1
 80122a8:	4616      	mov	r6, r2
 80122aa:	d505      	bpl.n	80122b8 <__swrite+0x1e>
 80122ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122b0:	2302      	movs	r3, #2
 80122b2:	2200      	movs	r2, #0
 80122b4:	f000 f926 	bl	8012504 <_lseek_r>
 80122b8:	89a3      	ldrh	r3, [r4, #12]
 80122ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80122c2:	81a3      	strh	r3, [r4, #12]
 80122c4:	4632      	mov	r2, r6
 80122c6:	463b      	mov	r3, r7
 80122c8:	4628      	mov	r0, r5
 80122ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122ce:	f000 b94d 	b.w	801256c <_write_r>

080122d2 <__sseek>:
 80122d2:	b510      	push	{r4, lr}
 80122d4:	460c      	mov	r4, r1
 80122d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122da:	f000 f913 	bl	8012504 <_lseek_r>
 80122de:	1c43      	adds	r3, r0, #1
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	bf15      	itete	ne
 80122e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80122e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80122ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80122ee:	81a3      	strheq	r3, [r4, #12]
 80122f0:	bf18      	it	ne
 80122f2:	81a3      	strhne	r3, [r4, #12]
 80122f4:	bd10      	pop	{r4, pc}

080122f6 <__sclose>:
 80122f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122fa:	f000 b89d 	b.w	8012438 <_close_r>

080122fe <__swbuf_r>:
 80122fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012300:	460e      	mov	r6, r1
 8012302:	4614      	mov	r4, r2
 8012304:	4605      	mov	r5, r0
 8012306:	b118      	cbz	r0, 8012310 <__swbuf_r+0x12>
 8012308:	6a03      	ldr	r3, [r0, #32]
 801230a:	b90b      	cbnz	r3, 8012310 <__swbuf_r+0x12>
 801230c:	f7ff ff24 	bl	8012158 <__sinit>
 8012310:	69a3      	ldr	r3, [r4, #24]
 8012312:	60a3      	str	r3, [r4, #8]
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	071a      	lsls	r2, r3, #28
 8012318:	d501      	bpl.n	801231e <__swbuf_r+0x20>
 801231a:	6923      	ldr	r3, [r4, #16]
 801231c:	b943      	cbnz	r3, 8012330 <__swbuf_r+0x32>
 801231e:	4621      	mov	r1, r4
 8012320:	4628      	mov	r0, r5
 8012322:	f000 f82b 	bl	801237c <__swsetup_r>
 8012326:	b118      	cbz	r0, 8012330 <__swbuf_r+0x32>
 8012328:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801232c:	4638      	mov	r0, r7
 801232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012330:	6823      	ldr	r3, [r4, #0]
 8012332:	6922      	ldr	r2, [r4, #16]
 8012334:	1a98      	subs	r0, r3, r2
 8012336:	6963      	ldr	r3, [r4, #20]
 8012338:	b2f6      	uxtb	r6, r6
 801233a:	4283      	cmp	r3, r0
 801233c:	4637      	mov	r7, r6
 801233e:	dc05      	bgt.n	801234c <__swbuf_r+0x4e>
 8012340:	4621      	mov	r1, r4
 8012342:	4628      	mov	r0, r5
 8012344:	f000 fa36 	bl	80127b4 <_fflush_r>
 8012348:	2800      	cmp	r0, #0
 801234a:	d1ed      	bne.n	8012328 <__swbuf_r+0x2a>
 801234c:	68a3      	ldr	r3, [r4, #8]
 801234e:	3b01      	subs	r3, #1
 8012350:	60a3      	str	r3, [r4, #8]
 8012352:	6823      	ldr	r3, [r4, #0]
 8012354:	1c5a      	adds	r2, r3, #1
 8012356:	6022      	str	r2, [r4, #0]
 8012358:	701e      	strb	r6, [r3, #0]
 801235a:	6962      	ldr	r2, [r4, #20]
 801235c:	1c43      	adds	r3, r0, #1
 801235e:	429a      	cmp	r2, r3
 8012360:	d004      	beq.n	801236c <__swbuf_r+0x6e>
 8012362:	89a3      	ldrh	r3, [r4, #12]
 8012364:	07db      	lsls	r3, r3, #31
 8012366:	d5e1      	bpl.n	801232c <__swbuf_r+0x2e>
 8012368:	2e0a      	cmp	r6, #10
 801236a:	d1df      	bne.n	801232c <__swbuf_r+0x2e>
 801236c:	4621      	mov	r1, r4
 801236e:	4628      	mov	r0, r5
 8012370:	f000 fa20 	bl	80127b4 <_fflush_r>
 8012374:	2800      	cmp	r0, #0
 8012376:	d0d9      	beq.n	801232c <__swbuf_r+0x2e>
 8012378:	e7d6      	b.n	8012328 <__swbuf_r+0x2a>
	...

0801237c <__swsetup_r>:
 801237c:	b538      	push	{r3, r4, r5, lr}
 801237e:	4b29      	ldr	r3, [pc, #164]	@ (8012424 <__swsetup_r+0xa8>)
 8012380:	4605      	mov	r5, r0
 8012382:	6818      	ldr	r0, [r3, #0]
 8012384:	460c      	mov	r4, r1
 8012386:	b118      	cbz	r0, 8012390 <__swsetup_r+0x14>
 8012388:	6a03      	ldr	r3, [r0, #32]
 801238a:	b90b      	cbnz	r3, 8012390 <__swsetup_r+0x14>
 801238c:	f7ff fee4 	bl	8012158 <__sinit>
 8012390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012394:	0719      	lsls	r1, r3, #28
 8012396:	d422      	bmi.n	80123de <__swsetup_r+0x62>
 8012398:	06da      	lsls	r2, r3, #27
 801239a:	d407      	bmi.n	80123ac <__swsetup_r+0x30>
 801239c:	2209      	movs	r2, #9
 801239e:	602a      	str	r2, [r5, #0]
 80123a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123a4:	81a3      	strh	r3, [r4, #12]
 80123a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123aa:	e033      	b.n	8012414 <__swsetup_r+0x98>
 80123ac:	0758      	lsls	r0, r3, #29
 80123ae:	d512      	bpl.n	80123d6 <__swsetup_r+0x5a>
 80123b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80123b2:	b141      	cbz	r1, 80123c6 <__swsetup_r+0x4a>
 80123b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123b8:	4299      	cmp	r1, r3
 80123ba:	d002      	beq.n	80123c2 <__swsetup_r+0x46>
 80123bc:	4628      	mov	r0, r5
 80123be:	f000 f923 	bl	8012608 <_free_r>
 80123c2:	2300      	movs	r3, #0
 80123c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80123c6:	89a3      	ldrh	r3, [r4, #12]
 80123c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80123cc:	81a3      	strh	r3, [r4, #12]
 80123ce:	2300      	movs	r3, #0
 80123d0:	6063      	str	r3, [r4, #4]
 80123d2:	6923      	ldr	r3, [r4, #16]
 80123d4:	6023      	str	r3, [r4, #0]
 80123d6:	89a3      	ldrh	r3, [r4, #12]
 80123d8:	f043 0308 	orr.w	r3, r3, #8
 80123dc:	81a3      	strh	r3, [r4, #12]
 80123de:	6923      	ldr	r3, [r4, #16]
 80123e0:	b94b      	cbnz	r3, 80123f6 <__swsetup_r+0x7a>
 80123e2:	89a3      	ldrh	r3, [r4, #12]
 80123e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80123e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123ec:	d003      	beq.n	80123f6 <__swsetup_r+0x7a>
 80123ee:	4621      	mov	r1, r4
 80123f0:	4628      	mov	r0, r5
 80123f2:	f000 fa2d 	bl	8012850 <__smakebuf_r>
 80123f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123fa:	f013 0201 	ands.w	r2, r3, #1
 80123fe:	d00a      	beq.n	8012416 <__swsetup_r+0x9a>
 8012400:	2200      	movs	r2, #0
 8012402:	60a2      	str	r2, [r4, #8]
 8012404:	6962      	ldr	r2, [r4, #20]
 8012406:	4252      	negs	r2, r2
 8012408:	61a2      	str	r2, [r4, #24]
 801240a:	6922      	ldr	r2, [r4, #16]
 801240c:	b942      	cbnz	r2, 8012420 <__swsetup_r+0xa4>
 801240e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012412:	d1c5      	bne.n	80123a0 <__swsetup_r+0x24>
 8012414:	bd38      	pop	{r3, r4, r5, pc}
 8012416:	0799      	lsls	r1, r3, #30
 8012418:	bf58      	it	pl
 801241a:	6962      	ldrpl	r2, [r4, #20]
 801241c:	60a2      	str	r2, [r4, #8]
 801241e:	e7f4      	b.n	801240a <__swsetup_r+0x8e>
 8012420:	2000      	movs	r0, #0
 8012422:	e7f7      	b.n	8012414 <__swsetup_r+0x98>
 8012424:	2400139c 	.word	0x2400139c

08012428 <memset>:
 8012428:	4402      	add	r2, r0
 801242a:	4603      	mov	r3, r0
 801242c:	4293      	cmp	r3, r2
 801242e:	d100      	bne.n	8012432 <memset+0xa>
 8012430:	4770      	bx	lr
 8012432:	f803 1b01 	strb.w	r1, [r3], #1
 8012436:	e7f9      	b.n	801242c <memset+0x4>

08012438 <_close_r>:
 8012438:	b538      	push	{r3, r4, r5, lr}
 801243a:	4d06      	ldr	r5, [pc, #24]	@ (8012454 <_close_r+0x1c>)
 801243c:	2300      	movs	r3, #0
 801243e:	4604      	mov	r4, r0
 8012440:	4608      	mov	r0, r1
 8012442:	602b      	str	r3, [r5, #0]
 8012444:	f7ee fef2 	bl	800122c <_close>
 8012448:	1c43      	adds	r3, r0, #1
 801244a:	d102      	bne.n	8012452 <_close_r+0x1a>
 801244c:	682b      	ldr	r3, [r5, #0]
 801244e:	b103      	cbz	r3, 8012452 <_close_r+0x1a>
 8012450:	6023      	str	r3, [r4, #0]
 8012452:	bd38      	pop	{r3, r4, r5, pc}
 8012454:	24033ce0 	.word	0x24033ce0

08012458 <_reclaim_reent>:
 8012458:	4b29      	ldr	r3, [pc, #164]	@ (8012500 <_reclaim_reent+0xa8>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	4283      	cmp	r3, r0
 801245e:	b570      	push	{r4, r5, r6, lr}
 8012460:	4604      	mov	r4, r0
 8012462:	d04b      	beq.n	80124fc <_reclaim_reent+0xa4>
 8012464:	69c3      	ldr	r3, [r0, #28]
 8012466:	b1ab      	cbz	r3, 8012494 <_reclaim_reent+0x3c>
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	b16b      	cbz	r3, 8012488 <_reclaim_reent+0x30>
 801246c:	2500      	movs	r5, #0
 801246e:	69e3      	ldr	r3, [r4, #28]
 8012470:	68db      	ldr	r3, [r3, #12]
 8012472:	5959      	ldr	r1, [r3, r5]
 8012474:	2900      	cmp	r1, #0
 8012476:	d13b      	bne.n	80124f0 <_reclaim_reent+0x98>
 8012478:	3504      	adds	r5, #4
 801247a:	2d80      	cmp	r5, #128	@ 0x80
 801247c:	d1f7      	bne.n	801246e <_reclaim_reent+0x16>
 801247e:	69e3      	ldr	r3, [r4, #28]
 8012480:	4620      	mov	r0, r4
 8012482:	68d9      	ldr	r1, [r3, #12]
 8012484:	f000 f8c0 	bl	8012608 <_free_r>
 8012488:	69e3      	ldr	r3, [r4, #28]
 801248a:	6819      	ldr	r1, [r3, #0]
 801248c:	b111      	cbz	r1, 8012494 <_reclaim_reent+0x3c>
 801248e:	4620      	mov	r0, r4
 8012490:	f000 f8ba 	bl	8012608 <_free_r>
 8012494:	6961      	ldr	r1, [r4, #20]
 8012496:	b111      	cbz	r1, 801249e <_reclaim_reent+0x46>
 8012498:	4620      	mov	r0, r4
 801249a:	f000 f8b5 	bl	8012608 <_free_r>
 801249e:	69e1      	ldr	r1, [r4, #28]
 80124a0:	b111      	cbz	r1, 80124a8 <_reclaim_reent+0x50>
 80124a2:	4620      	mov	r0, r4
 80124a4:	f000 f8b0 	bl	8012608 <_free_r>
 80124a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80124aa:	b111      	cbz	r1, 80124b2 <_reclaim_reent+0x5a>
 80124ac:	4620      	mov	r0, r4
 80124ae:	f000 f8ab 	bl	8012608 <_free_r>
 80124b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124b4:	b111      	cbz	r1, 80124bc <_reclaim_reent+0x64>
 80124b6:	4620      	mov	r0, r4
 80124b8:	f000 f8a6 	bl	8012608 <_free_r>
 80124bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80124be:	b111      	cbz	r1, 80124c6 <_reclaim_reent+0x6e>
 80124c0:	4620      	mov	r0, r4
 80124c2:	f000 f8a1 	bl	8012608 <_free_r>
 80124c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80124c8:	b111      	cbz	r1, 80124d0 <_reclaim_reent+0x78>
 80124ca:	4620      	mov	r0, r4
 80124cc:	f000 f89c 	bl	8012608 <_free_r>
 80124d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80124d2:	b111      	cbz	r1, 80124da <_reclaim_reent+0x82>
 80124d4:	4620      	mov	r0, r4
 80124d6:	f000 f897 	bl	8012608 <_free_r>
 80124da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80124dc:	b111      	cbz	r1, 80124e4 <_reclaim_reent+0x8c>
 80124de:	4620      	mov	r0, r4
 80124e0:	f000 f892 	bl	8012608 <_free_r>
 80124e4:	6a23      	ldr	r3, [r4, #32]
 80124e6:	b14b      	cbz	r3, 80124fc <_reclaim_reent+0xa4>
 80124e8:	4620      	mov	r0, r4
 80124ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124ee:	4718      	bx	r3
 80124f0:	680e      	ldr	r6, [r1, #0]
 80124f2:	4620      	mov	r0, r4
 80124f4:	f000 f888 	bl	8012608 <_free_r>
 80124f8:	4631      	mov	r1, r6
 80124fa:	e7bb      	b.n	8012474 <_reclaim_reent+0x1c>
 80124fc:	bd70      	pop	{r4, r5, r6, pc}
 80124fe:	bf00      	nop
 8012500:	2400139c 	.word	0x2400139c

08012504 <_lseek_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4d07      	ldr	r5, [pc, #28]	@ (8012524 <_lseek_r+0x20>)
 8012508:	4604      	mov	r4, r0
 801250a:	4608      	mov	r0, r1
 801250c:	4611      	mov	r1, r2
 801250e:	2200      	movs	r2, #0
 8012510:	602a      	str	r2, [r5, #0]
 8012512:	461a      	mov	r2, r3
 8012514:	f7ee feb1 	bl	800127a <_lseek>
 8012518:	1c43      	adds	r3, r0, #1
 801251a:	d102      	bne.n	8012522 <_lseek_r+0x1e>
 801251c:	682b      	ldr	r3, [r5, #0]
 801251e:	b103      	cbz	r3, 8012522 <_lseek_r+0x1e>
 8012520:	6023      	str	r3, [r4, #0]
 8012522:	bd38      	pop	{r3, r4, r5, pc}
 8012524:	24033ce0 	.word	0x24033ce0

08012528 <_read_r>:
 8012528:	b538      	push	{r3, r4, r5, lr}
 801252a:	4d07      	ldr	r5, [pc, #28]	@ (8012548 <_read_r+0x20>)
 801252c:	4604      	mov	r4, r0
 801252e:	4608      	mov	r0, r1
 8012530:	4611      	mov	r1, r2
 8012532:	2200      	movs	r2, #0
 8012534:	602a      	str	r2, [r5, #0]
 8012536:	461a      	mov	r2, r3
 8012538:	f7ee fe3f 	bl	80011ba <_read>
 801253c:	1c43      	adds	r3, r0, #1
 801253e:	d102      	bne.n	8012546 <_read_r+0x1e>
 8012540:	682b      	ldr	r3, [r5, #0]
 8012542:	b103      	cbz	r3, 8012546 <_read_r+0x1e>
 8012544:	6023      	str	r3, [r4, #0]
 8012546:	bd38      	pop	{r3, r4, r5, pc}
 8012548:	24033ce0 	.word	0x24033ce0

0801254c <_sbrk_r>:
 801254c:	b538      	push	{r3, r4, r5, lr}
 801254e:	4d06      	ldr	r5, [pc, #24]	@ (8012568 <_sbrk_r+0x1c>)
 8012550:	2300      	movs	r3, #0
 8012552:	4604      	mov	r4, r0
 8012554:	4608      	mov	r0, r1
 8012556:	602b      	str	r3, [r5, #0]
 8012558:	f7ee fe9c 	bl	8001294 <_sbrk>
 801255c:	1c43      	adds	r3, r0, #1
 801255e:	d102      	bne.n	8012566 <_sbrk_r+0x1a>
 8012560:	682b      	ldr	r3, [r5, #0]
 8012562:	b103      	cbz	r3, 8012566 <_sbrk_r+0x1a>
 8012564:	6023      	str	r3, [r4, #0]
 8012566:	bd38      	pop	{r3, r4, r5, pc}
 8012568:	24033ce0 	.word	0x24033ce0

0801256c <_write_r>:
 801256c:	b538      	push	{r3, r4, r5, lr}
 801256e:	4d07      	ldr	r5, [pc, #28]	@ (801258c <_write_r+0x20>)
 8012570:	4604      	mov	r4, r0
 8012572:	4608      	mov	r0, r1
 8012574:	4611      	mov	r1, r2
 8012576:	2200      	movs	r2, #0
 8012578:	602a      	str	r2, [r5, #0]
 801257a:	461a      	mov	r2, r3
 801257c:	f7ee fe3a 	bl	80011f4 <_write>
 8012580:	1c43      	adds	r3, r0, #1
 8012582:	d102      	bne.n	801258a <_write_r+0x1e>
 8012584:	682b      	ldr	r3, [r5, #0]
 8012586:	b103      	cbz	r3, 801258a <_write_r+0x1e>
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	bd38      	pop	{r3, r4, r5, pc}
 801258c:	24033ce0 	.word	0x24033ce0

08012590 <__errno>:
 8012590:	4b01      	ldr	r3, [pc, #4]	@ (8012598 <__errno+0x8>)
 8012592:	6818      	ldr	r0, [r3, #0]
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	2400139c 	.word	0x2400139c

0801259c <__libc_init_array>:
 801259c:	b570      	push	{r4, r5, r6, lr}
 801259e:	4d0d      	ldr	r5, [pc, #52]	@ (80125d4 <__libc_init_array+0x38>)
 80125a0:	4c0d      	ldr	r4, [pc, #52]	@ (80125d8 <__libc_init_array+0x3c>)
 80125a2:	1b64      	subs	r4, r4, r5
 80125a4:	10a4      	asrs	r4, r4, #2
 80125a6:	2600      	movs	r6, #0
 80125a8:	42a6      	cmp	r6, r4
 80125aa:	d109      	bne.n	80125c0 <__libc_init_array+0x24>
 80125ac:	4d0b      	ldr	r5, [pc, #44]	@ (80125dc <__libc_init_array+0x40>)
 80125ae:	4c0c      	ldr	r4, [pc, #48]	@ (80125e0 <__libc_init_array+0x44>)
 80125b0:	f000 f9ac 	bl	801290c <_init>
 80125b4:	1b64      	subs	r4, r4, r5
 80125b6:	10a4      	asrs	r4, r4, #2
 80125b8:	2600      	movs	r6, #0
 80125ba:	42a6      	cmp	r6, r4
 80125bc:	d105      	bne.n	80125ca <__libc_init_array+0x2e>
 80125be:	bd70      	pop	{r4, r5, r6, pc}
 80125c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80125c4:	4798      	blx	r3
 80125c6:	3601      	adds	r6, #1
 80125c8:	e7ee      	b.n	80125a8 <__libc_init_array+0xc>
 80125ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80125ce:	4798      	blx	r3
 80125d0:	3601      	adds	r6, #1
 80125d2:	e7f2      	b.n	80125ba <__libc_init_array+0x1e>
 80125d4:	08014388 	.word	0x08014388
 80125d8:	08014388 	.word	0x08014388
 80125dc:	08014388 	.word	0x08014388
 80125e0:	080143c8 	.word	0x080143c8

080125e4 <__retarget_lock_init_recursive>:
 80125e4:	4770      	bx	lr

080125e6 <__retarget_lock_acquire_recursive>:
 80125e6:	4770      	bx	lr

080125e8 <__retarget_lock_release_recursive>:
 80125e8:	4770      	bx	lr

080125ea <memcpy>:
 80125ea:	440a      	add	r2, r1
 80125ec:	4291      	cmp	r1, r2
 80125ee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80125f2:	d100      	bne.n	80125f6 <memcpy+0xc>
 80125f4:	4770      	bx	lr
 80125f6:	b510      	push	{r4, lr}
 80125f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012600:	4291      	cmp	r1, r2
 8012602:	d1f9      	bne.n	80125f8 <memcpy+0xe>
 8012604:	bd10      	pop	{r4, pc}
	...

08012608 <_free_r>:
 8012608:	b538      	push	{r3, r4, r5, lr}
 801260a:	4605      	mov	r5, r0
 801260c:	2900      	cmp	r1, #0
 801260e:	d041      	beq.n	8012694 <_free_r+0x8c>
 8012610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012614:	1f0c      	subs	r4, r1, #4
 8012616:	2b00      	cmp	r3, #0
 8012618:	bfb8      	it	lt
 801261a:	18e4      	addlt	r4, r4, r3
 801261c:	f7ff fcce 	bl	8011fbc <__malloc_lock>
 8012620:	4a1d      	ldr	r2, [pc, #116]	@ (8012698 <_free_r+0x90>)
 8012622:	6813      	ldr	r3, [r2, #0]
 8012624:	b933      	cbnz	r3, 8012634 <_free_r+0x2c>
 8012626:	6063      	str	r3, [r4, #4]
 8012628:	6014      	str	r4, [r2, #0]
 801262a:	4628      	mov	r0, r5
 801262c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012630:	f7ff bcca 	b.w	8011fc8 <__malloc_unlock>
 8012634:	42a3      	cmp	r3, r4
 8012636:	d908      	bls.n	801264a <_free_r+0x42>
 8012638:	6820      	ldr	r0, [r4, #0]
 801263a:	1821      	adds	r1, r4, r0
 801263c:	428b      	cmp	r3, r1
 801263e:	bf01      	itttt	eq
 8012640:	6819      	ldreq	r1, [r3, #0]
 8012642:	685b      	ldreq	r3, [r3, #4]
 8012644:	1809      	addeq	r1, r1, r0
 8012646:	6021      	streq	r1, [r4, #0]
 8012648:	e7ed      	b.n	8012626 <_free_r+0x1e>
 801264a:	461a      	mov	r2, r3
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	b10b      	cbz	r3, 8012654 <_free_r+0x4c>
 8012650:	42a3      	cmp	r3, r4
 8012652:	d9fa      	bls.n	801264a <_free_r+0x42>
 8012654:	6811      	ldr	r1, [r2, #0]
 8012656:	1850      	adds	r0, r2, r1
 8012658:	42a0      	cmp	r0, r4
 801265a:	d10b      	bne.n	8012674 <_free_r+0x6c>
 801265c:	6820      	ldr	r0, [r4, #0]
 801265e:	4401      	add	r1, r0
 8012660:	1850      	adds	r0, r2, r1
 8012662:	4283      	cmp	r3, r0
 8012664:	6011      	str	r1, [r2, #0]
 8012666:	d1e0      	bne.n	801262a <_free_r+0x22>
 8012668:	6818      	ldr	r0, [r3, #0]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	6053      	str	r3, [r2, #4]
 801266e:	4408      	add	r0, r1
 8012670:	6010      	str	r0, [r2, #0]
 8012672:	e7da      	b.n	801262a <_free_r+0x22>
 8012674:	d902      	bls.n	801267c <_free_r+0x74>
 8012676:	230c      	movs	r3, #12
 8012678:	602b      	str	r3, [r5, #0]
 801267a:	e7d6      	b.n	801262a <_free_r+0x22>
 801267c:	6820      	ldr	r0, [r4, #0]
 801267e:	1821      	adds	r1, r4, r0
 8012680:	428b      	cmp	r3, r1
 8012682:	bf04      	itt	eq
 8012684:	6819      	ldreq	r1, [r3, #0]
 8012686:	685b      	ldreq	r3, [r3, #4]
 8012688:	6063      	str	r3, [r4, #4]
 801268a:	bf04      	itt	eq
 801268c:	1809      	addeq	r1, r1, r0
 801268e:	6021      	streq	r1, [r4, #0]
 8012690:	6054      	str	r4, [r2, #4]
 8012692:	e7ca      	b.n	801262a <_free_r+0x22>
 8012694:	bd38      	pop	{r3, r4, r5, pc}
 8012696:	bf00      	nop
 8012698:	24033ba0 	.word	0x24033ba0

0801269c <_malloc_usable_size_r>:
 801269c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126a0:	1f18      	subs	r0, r3, #4
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	bfbc      	itt	lt
 80126a6:	580b      	ldrlt	r3, [r1, r0]
 80126a8:	18c0      	addlt	r0, r0, r3
 80126aa:	4770      	bx	lr

080126ac <__sflush_r>:
 80126ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b4:	0716      	lsls	r6, r2, #28
 80126b6:	4605      	mov	r5, r0
 80126b8:	460c      	mov	r4, r1
 80126ba:	d454      	bmi.n	8012766 <__sflush_r+0xba>
 80126bc:	684b      	ldr	r3, [r1, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dc02      	bgt.n	80126c8 <__sflush_r+0x1c>
 80126c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dd48      	ble.n	801275a <__sflush_r+0xae>
 80126c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126ca:	2e00      	cmp	r6, #0
 80126cc:	d045      	beq.n	801275a <__sflush_r+0xae>
 80126ce:	2300      	movs	r3, #0
 80126d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126d4:	682f      	ldr	r7, [r5, #0]
 80126d6:	6a21      	ldr	r1, [r4, #32]
 80126d8:	602b      	str	r3, [r5, #0]
 80126da:	d030      	beq.n	801273e <__sflush_r+0x92>
 80126dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126de:	89a3      	ldrh	r3, [r4, #12]
 80126e0:	0759      	lsls	r1, r3, #29
 80126e2:	d505      	bpl.n	80126f0 <__sflush_r+0x44>
 80126e4:	6863      	ldr	r3, [r4, #4]
 80126e6:	1ad2      	subs	r2, r2, r3
 80126e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126ea:	b10b      	cbz	r3, 80126f0 <__sflush_r+0x44>
 80126ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126ee:	1ad2      	subs	r2, r2, r3
 80126f0:	2300      	movs	r3, #0
 80126f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126f4:	6a21      	ldr	r1, [r4, #32]
 80126f6:	4628      	mov	r0, r5
 80126f8:	47b0      	blx	r6
 80126fa:	1c43      	adds	r3, r0, #1
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	d106      	bne.n	801270e <__sflush_r+0x62>
 8012700:	6829      	ldr	r1, [r5, #0]
 8012702:	291d      	cmp	r1, #29
 8012704:	d82b      	bhi.n	801275e <__sflush_r+0xb2>
 8012706:	4a2a      	ldr	r2, [pc, #168]	@ (80127b0 <__sflush_r+0x104>)
 8012708:	410a      	asrs	r2, r1
 801270a:	07d6      	lsls	r6, r2, #31
 801270c:	d427      	bmi.n	801275e <__sflush_r+0xb2>
 801270e:	2200      	movs	r2, #0
 8012710:	6062      	str	r2, [r4, #4]
 8012712:	04d9      	lsls	r1, r3, #19
 8012714:	6922      	ldr	r2, [r4, #16]
 8012716:	6022      	str	r2, [r4, #0]
 8012718:	d504      	bpl.n	8012724 <__sflush_r+0x78>
 801271a:	1c42      	adds	r2, r0, #1
 801271c:	d101      	bne.n	8012722 <__sflush_r+0x76>
 801271e:	682b      	ldr	r3, [r5, #0]
 8012720:	b903      	cbnz	r3, 8012724 <__sflush_r+0x78>
 8012722:	6560      	str	r0, [r4, #84]	@ 0x54
 8012724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012726:	602f      	str	r7, [r5, #0]
 8012728:	b1b9      	cbz	r1, 801275a <__sflush_r+0xae>
 801272a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801272e:	4299      	cmp	r1, r3
 8012730:	d002      	beq.n	8012738 <__sflush_r+0x8c>
 8012732:	4628      	mov	r0, r5
 8012734:	f7ff ff68 	bl	8012608 <_free_r>
 8012738:	2300      	movs	r3, #0
 801273a:	6363      	str	r3, [r4, #52]	@ 0x34
 801273c:	e00d      	b.n	801275a <__sflush_r+0xae>
 801273e:	2301      	movs	r3, #1
 8012740:	4628      	mov	r0, r5
 8012742:	47b0      	blx	r6
 8012744:	4602      	mov	r2, r0
 8012746:	1c50      	adds	r0, r2, #1
 8012748:	d1c9      	bne.n	80126de <__sflush_r+0x32>
 801274a:	682b      	ldr	r3, [r5, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d0c6      	beq.n	80126de <__sflush_r+0x32>
 8012750:	2b1d      	cmp	r3, #29
 8012752:	d001      	beq.n	8012758 <__sflush_r+0xac>
 8012754:	2b16      	cmp	r3, #22
 8012756:	d11e      	bne.n	8012796 <__sflush_r+0xea>
 8012758:	602f      	str	r7, [r5, #0]
 801275a:	2000      	movs	r0, #0
 801275c:	e022      	b.n	80127a4 <__sflush_r+0xf8>
 801275e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012762:	b21b      	sxth	r3, r3
 8012764:	e01b      	b.n	801279e <__sflush_r+0xf2>
 8012766:	690f      	ldr	r7, [r1, #16]
 8012768:	2f00      	cmp	r7, #0
 801276a:	d0f6      	beq.n	801275a <__sflush_r+0xae>
 801276c:	0793      	lsls	r3, r2, #30
 801276e:	680e      	ldr	r6, [r1, #0]
 8012770:	bf08      	it	eq
 8012772:	694b      	ldreq	r3, [r1, #20]
 8012774:	600f      	str	r7, [r1, #0]
 8012776:	bf18      	it	ne
 8012778:	2300      	movne	r3, #0
 801277a:	eba6 0807 	sub.w	r8, r6, r7
 801277e:	608b      	str	r3, [r1, #8]
 8012780:	f1b8 0f00 	cmp.w	r8, #0
 8012784:	dde9      	ble.n	801275a <__sflush_r+0xae>
 8012786:	6a21      	ldr	r1, [r4, #32]
 8012788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801278a:	4643      	mov	r3, r8
 801278c:	463a      	mov	r2, r7
 801278e:	4628      	mov	r0, r5
 8012790:	47b0      	blx	r6
 8012792:	2800      	cmp	r0, #0
 8012794:	dc08      	bgt.n	80127a8 <__sflush_r+0xfc>
 8012796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801279a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801279e:	81a3      	strh	r3, [r4, #12]
 80127a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	4407      	add	r7, r0
 80127aa:	eba8 0800 	sub.w	r8, r8, r0
 80127ae:	e7e7      	b.n	8012780 <__sflush_r+0xd4>
 80127b0:	dfbffffe 	.word	0xdfbffffe

080127b4 <_fflush_r>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	690b      	ldr	r3, [r1, #16]
 80127b8:	4605      	mov	r5, r0
 80127ba:	460c      	mov	r4, r1
 80127bc:	b913      	cbnz	r3, 80127c4 <_fflush_r+0x10>
 80127be:	2500      	movs	r5, #0
 80127c0:	4628      	mov	r0, r5
 80127c2:	bd38      	pop	{r3, r4, r5, pc}
 80127c4:	b118      	cbz	r0, 80127ce <_fflush_r+0x1a>
 80127c6:	6a03      	ldr	r3, [r0, #32]
 80127c8:	b90b      	cbnz	r3, 80127ce <_fflush_r+0x1a>
 80127ca:	f7ff fcc5 	bl	8012158 <__sinit>
 80127ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0f3      	beq.n	80127be <_fflush_r+0xa>
 80127d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127d8:	07d0      	lsls	r0, r2, #31
 80127da:	d404      	bmi.n	80127e6 <_fflush_r+0x32>
 80127dc:	0599      	lsls	r1, r3, #22
 80127de:	d402      	bmi.n	80127e6 <_fflush_r+0x32>
 80127e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127e2:	f7ff ff00 	bl	80125e6 <__retarget_lock_acquire_recursive>
 80127e6:	4628      	mov	r0, r5
 80127e8:	4621      	mov	r1, r4
 80127ea:	f7ff ff5f 	bl	80126ac <__sflush_r>
 80127ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127f0:	07da      	lsls	r2, r3, #31
 80127f2:	4605      	mov	r5, r0
 80127f4:	d4e4      	bmi.n	80127c0 <_fflush_r+0xc>
 80127f6:	89a3      	ldrh	r3, [r4, #12]
 80127f8:	059b      	lsls	r3, r3, #22
 80127fa:	d4e1      	bmi.n	80127c0 <_fflush_r+0xc>
 80127fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127fe:	f7ff fef3 	bl	80125e8 <__retarget_lock_release_recursive>
 8012802:	e7dd      	b.n	80127c0 <_fflush_r+0xc>

08012804 <__swhatbuf_r>:
 8012804:	b570      	push	{r4, r5, r6, lr}
 8012806:	460c      	mov	r4, r1
 8012808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801280c:	2900      	cmp	r1, #0
 801280e:	b096      	sub	sp, #88	@ 0x58
 8012810:	4615      	mov	r5, r2
 8012812:	461e      	mov	r6, r3
 8012814:	da0d      	bge.n	8012832 <__swhatbuf_r+0x2e>
 8012816:	89a3      	ldrh	r3, [r4, #12]
 8012818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801281c:	f04f 0100 	mov.w	r1, #0
 8012820:	bf14      	ite	ne
 8012822:	2340      	movne	r3, #64	@ 0x40
 8012824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012828:	2000      	movs	r0, #0
 801282a:	6031      	str	r1, [r6, #0]
 801282c:	602b      	str	r3, [r5, #0]
 801282e:	b016      	add	sp, #88	@ 0x58
 8012830:	bd70      	pop	{r4, r5, r6, pc}
 8012832:	466a      	mov	r2, sp
 8012834:	f000 f848 	bl	80128c8 <_fstat_r>
 8012838:	2800      	cmp	r0, #0
 801283a:	dbec      	blt.n	8012816 <__swhatbuf_r+0x12>
 801283c:	9901      	ldr	r1, [sp, #4]
 801283e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012846:	4259      	negs	r1, r3
 8012848:	4159      	adcs	r1, r3
 801284a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801284e:	e7eb      	b.n	8012828 <__swhatbuf_r+0x24>

08012850 <__smakebuf_r>:
 8012850:	898b      	ldrh	r3, [r1, #12]
 8012852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012854:	079d      	lsls	r5, r3, #30
 8012856:	4606      	mov	r6, r0
 8012858:	460c      	mov	r4, r1
 801285a:	d507      	bpl.n	801286c <__smakebuf_r+0x1c>
 801285c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012860:	6023      	str	r3, [r4, #0]
 8012862:	6123      	str	r3, [r4, #16]
 8012864:	2301      	movs	r3, #1
 8012866:	6163      	str	r3, [r4, #20]
 8012868:	b003      	add	sp, #12
 801286a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801286c:	ab01      	add	r3, sp, #4
 801286e:	466a      	mov	r2, sp
 8012870:	f7ff ffc8 	bl	8012804 <__swhatbuf_r>
 8012874:	9f00      	ldr	r7, [sp, #0]
 8012876:	4605      	mov	r5, r0
 8012878:	4639      	mov	r1, r7
 801287a:	4630      	mov	r0, r6
 801287c:	f7ff fb1e 	bl	8011ebc <_malloc_r>
 8012880:	b948      	cbnz	r0, 8012896 <__smakebuf_r+0x46>
 8012882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012886:	059a      	lsls	r2, r3, #22
 8012888:	d4ee      	bmi.n	8012868 <__smakebuf_r+0x18>
 801288a:	f023 0303 	bic.w	r3, r3, #3
 801288e:	f043 0302 	orr.w	r3, r3, #2
 8012892:	81a3      	strh	r3, [r4, #12]
 8012894:	e7e2      	b.n	801285c <__smakebuf_r+0xc>
 8012896:	89a3      	ldrh	r3, [r4, #12]
 8012898:	6020      	str	r0, [r4, #0]
 801289a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801289e:	81a3      	strh	r3, [r4, #12]
 80128a0:	9b01      	ldr	r3, [sp, #4]
 80128a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80128a6:	b15b      	cbz	r3, 80128c0 <__smakebuf_r+0x70>
 80128a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128ac:	4630      	mov	r0, r6
 80128ae:	f000 f81d 	bl	80128ec <_isatty_r>
 80128b2:	b128      	cbz	r0, 80128c0 <__smakebuf_r+0x70>
 80128b4:	89a3      	ldrh	r3, [r4, #12]
 80128b6:	f023 0303 	bic.w	r3, r3, #3
 80128ba:	f043 0301 	orr.w	r3, r3, #1
 80128be:	81a3      	strh	r3, [r4, #12]
 80128c0:	89a3      	ldrh	r3, [r4, #12]
 80128c2:	431d      	orrs	r5, r3
 80128c4:	81a5      	strh	r5, [r4, #12]
 80128c6:	e7cf      	b.n	8012868 <__smakebuf_r+0x18>

080128c8 <_fstat_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	4d07      	ldr	r5, [pc, #28]	@ (80128e8 <_fstat_r+0x20>)
 80128cc:	2300      	movs	r3, #0
 80128ce:	4604      	mov	r4, r0
 80128d0:	4608      	mov	r0, r1
 80128d2:	4611      	mov	r1, r2
 80128d4:	602b      	str	r3, [r5, #0]
 80128d6:	f7ee fcb5 	bl	8001244 <_fstat>
 80128da:	1c43      	adds	r3, r0, #1
 80128dc:	d102      	bne.n	80128e4 <_fstat_r+0x1c>
 80128de:	682b      	ldr	r3, [r5, #0]
 80128e0:	b103      	cbz	r3, 80128e4 <_fstat_r+0x1c>
 80128e2:	6023      	str	r3, [r4, #0]
 80128e4:	bd38      	pop	{r3, r4, r5, pc}
 80128e6:	bf00      	nop
 80128e8:	24033ce0 	.word	0x24033ce0

080128ec <_isatty_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4d06      	ldr	r5, [pc, #24]	@ (8012908 <_isatty_r+0x1c>)
 80128f0:	2300      	movs	r3, #0
 80128f2:	4604      	mov	r4, r0
 80128f4:	4608      	mov	r0, r1
 80128f6:	602b      	str	r3, [r5, #0]
 80128f8:	f7ee fcb4 	bl	8001264 <_isatty>
 80128fc:	1c43      	adds	r3, r0, #1
 80128fe:	d102      	bne.n	8012906 <_isatty_r+0x1a>
 8012900:	682b      	ldr	r3, [r5, #0]
 8012902:	b103      	cbz	r3, 8012906 <_isatty_r+0x1a>
 8012904:	6023      	str	r3, [r4, #0]
 8012906:	bd38      	pop	{r3, r4, r5, pc}
 8012908:	24033ce0 	.word	0x24033ce0

0801290c <_init>:
 801290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801290e:	bf00      	nop
 8012910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012912:	bc08      	pop	{r3}
 8012914:	469e      	mov	lr, r3
 8012916:	4770      	bx	lr

08012918 <_fini>:
 8012918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801291a:	bf00      	nop
 801291c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801291e:	bc08      	pop	{r3}
 8012920:	469e      	mov	lr, r3
 8012922:	4770      	bx	lr
