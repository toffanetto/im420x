
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020668  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002910  08020908  08020908  00021908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023218  08023218  00024218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08023220  08023220  00024220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08023260  08023260  00024260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013f0  24000000  08023264  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000681f0  240013f0  08024654  000263f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240695e0  08024654  000265e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000263f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002db08  00000000  00000000  0002641e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005912  00000000  00000000  00053f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f90  00000000  00000000  00059838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001840  00000000  00000000  0005b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042338  00000000  00000000  0005d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000309ff  00000000  00000000  0009f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00191f00  00000000  00000000  000cfd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  00261c3f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009200  00000000  00000000  00261cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0026aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013f0 	.word	0x240013f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080208f0 	.word	0x080208f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f4 	.word	0x240013f4
 80002dc:	080208f0 	.word	0x080208f0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f002 f8fc 	bl	80029c0 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f000 ffaf 	bl	8001730 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f003 f91f 	bl	8003a20 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f000 ffa2 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f002 fb5a 	bl	8002ec8 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f000 ff89 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f002 fb4c 	bl	8002ec8 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f000 ff7b 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400140c 	.word	0x2400140c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f01f f8dd 	bl	801fa34 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096.0;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fb04 	bl	8007ecc <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f000 ff31 	bl	8001730 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f006 f881 	bl	8006a2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f003 fa13 	bl	8003d9c <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f000 fed8 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001470 	.word	0x24001470
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00d fdae 	bl	800e514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00d fd1d 	bl	800e530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032230 	.word	0x24032230
 8000b28:	2403223c 	.word	0x2403223c
 8000b2c:	24032234 	.word	0x24032234
 8000b30:	24032228 	.word	0x24032228
 8000b34:	24032238 	.word	0x24032238

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00d fca6 	bl	800e514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00d fca8 	bl	800e530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403223c 	.word	0x2403223c
 8000bec:	24032234 	.word	0x24032234

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403223c 	.word	0x2403223c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00d fc6d 	bl	800e514 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f01f f800 	bl	801fc72 <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00d fc5a 	bl	800e530 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00d fc40 	bl	800e514 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00d fc36 	bl	800e530 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	240014e8 	.word	0x240014e8
 8000d84:	24032228 	.word	0x24032228
 8000d88:	24032230 	.word	0x24032230
 8000d8c:	24032238 	.word	0x24032238
 8000d90:	24032234 	.word	0x24032234
 8000d94:	2403223c 	.word	0x2403223c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032228 	.word	0x24032228
 8000e48:	24032230 	.word	0x24032230

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a17      	ldr	r2, [pc, #92]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MX_DMA_Init+0x6c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f002 ff5a 	bl	8003d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f002 ff71 	bl	8003d80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f002 ff52 	bl	8003d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f002 ff69 	bl	8003d80 <HAL_NVIC_EnableIRQ>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	58024400 	.word	0x58024400

08000ebc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed0:	4904      	ldr	r1, [pc, #16]	@ (8000ee4 <cubemx_transport_open+0x28>)
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f00a f896 	bl	800b004 <HAL_UART_Receive_DMA>
    return true;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24032240 	.word	0x24032240

08000ee8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ef6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f00a f8cf 	bl	800b09c <HAL_UART_DMAStop>
    return true;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f1c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d11b      	bne.n	8000f60 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f009 ffe7 	bl	800af04 <HAL_UART_Transmit_DMA>
 8000f36:	4603      	mov	r3, r0
 8000f38:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f3a:	e002      	b.n	8000f42 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f00c f979 	bl	800d234 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <cubemx_transport_write+0x4a>
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	2b20      	cmp	r3, #32
 8000f50:	d1f4      	bne.n	8000f3c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f52:	7cfb      	ldrb	r3, [r7, #19]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <cubemx_transport_write+0x54>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x5a>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e000      	b.n	8000f62 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f60:	2300      	movs	r3, #0
    }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f80:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f86:	b672      	cpsid	i
}
 8000f88:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5a      	ldr	r2, [pc, #360]	@ (80010fc <cubemx_transport_read+0x190>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d068      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a57      	ldr	r2, [pc, #348]	@ (8001100 <cubemx_transport_read+0x194>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d061      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a55      	ldr	r2, [pc, #340]	@ (8001104 <cubemx_transport_read+0x198>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d05a      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a52      	ldr	r2, [pc, #328]	@ (8001108 <cubemx_transport_read+0x19c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d053      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a50      	ldr	r2, [pc, #320]	@ (800110c <cubemx_transport_read+0x1a0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d04c      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8001110 <cubemx_transport_read+0x1a4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d045      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	@ (8001114 <cubemx_transport_read+0x1a8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d03e      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a48      	ldr	r2, [pc, #288]	@ (8001118 <cubemx_transport_read+0x1ac>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d037      	beq.n	800106a <cubemx_transport_read+0xfe>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a46      	ldr	r2, [pc, #280]	@ (800111c <cubemx_transport_read+0x1b0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d030      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a43      	ldr	r2, [pc, #268]	@ (8001120 <cubemx_transport_read+0x1b4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d029      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a41      	ldr	r2, [pc, #260]	@ (8001124 <cubemx_transport_read+0x1b8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d022      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a3e      	ldr	r2, [pc, #248]	@ (8001128 <cubemx_transport_read+0x1bc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01b      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a3c      	ldr	r2, [pc, #240]	@ (800112c <cubemx_transport_read+0x1c0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d014      	beq.n	800106a <cubemx_transport_read+0xfe>
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a39      	ldr	r2, [pc, #228]	@ (8001130 <cubemx_transport_read+0x1c4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <cubemx_transport_read+0xfe>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a37      	ldr	r2, [pc, #220]	@ (8001134 <cubemx_transport_read+0x1c8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d006      	beq.n	800106a <cubemx_transport_read+0xfe>
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a34      	ldr	r2, [pc, #208]	@ (8001138 <cubemx_transport_read+0x1cc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d107      	bne.n	800107a <cubemx_transport_read+0x10e>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001078:	e006      	b.n	8001088 <cubemx_transport_read+0x11c>
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001088:	4a2c      	ldr	r2, [pc, #176]	@ (800113c <cubemx_transport_read+0x1d0>)
 800108a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800108c:	b662      	cpsie	i
}
 800108e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	3301      	adds	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001096:	2001      	movs	r0, #1
 8001098:	f00c f8cc 	bl	800d234 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <cubemx_transport_read+0x1d4>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <cubemx_transport_read+0x1d0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d104      	bne.n	80010b2 <cubemx_transport_read+0x146>
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f6ff af6a 	blt.w	8000f86 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010b6:	e011      	b.n	80010dc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	440b      	add	r3, r1
 80010c2:	4920      	ldr	r1, [pc, #128]	@ (8001144 <cubemx_transport_read+0x1d8>)
 80010c4:	5c8a      	ldrb	r2, [r1, r2]
 80010c6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010d4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	3301      	adds	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <cubemx_transport_read+0x1d4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <cubemx_transport_read+0x1d0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d003      	beq.n	80010f0 <cubemx_transport_read+0x184>
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3e3      	bcc.n	80010b8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 80010f0:	69bb      	ldr	r3, [r7, #24]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020010 	.word	0x40020010
 8001100:	40020028 	.word	0x40020028
 8001104:	40020040 	.word	0x40020040
 8001108:	40020058 	.word	0x40020058
 800110c:	40020070 	.word	0x40020070
 8001110:	40020088 	.word	0x40020088
 8001114:	400200a0 	.word	0x400200a0
 8001118:	400200b8 	.word	0x400200b8
 800111c:	40020410 	.word	0x40020410
 8001120:	40020428 	.word	0x40020428
 8001124:	40020440 	.word	0x40020440
 8001128:	40020458 	.word	0x40020458
 800112c:	40020470 	.word	0x40020470
 8001130:	40020488 	.word	0x40020488
 8001134:	400204a0 	.word	0x400204a0
 8001138:	400204b8 	.word	0x400204b8
 800113c:	24032a44 	.word	0x24032a44
 8001140:	24032a40 	.word	0x24032a40
 8001144:	24032240 	.word	0x24032240

08001148 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 0);
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <control_cmd_callback+0x24>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	4a03      	ldr	r2, [pc, #12]	@ (800116c <control_cmd_callback+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	24032a60 	.word	0x24032a60

08001170 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 1);
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <gear_cmd_callback+0x24>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	4a03      	ldr	r2, [pc, #12]	@ (8001194 <gear_cmd_callback+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	24032a60 	.word	0x24032a60

08001198 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 2);
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <turn_indicators_cmd_callback+0x24>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	4a03      	ldr	r2, [pc, #12]	@ (80011bc <turn_indicators_cmd_callback+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	24032a60 	.word	0x24032a60

080011c0 <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 3);
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <hazard_lights_cmd_callback+0x24>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	4a03      	ldr	r2, [pc, #12]	@ (80011e4 <hazard_lights_cmd_callback+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	24032a60 	.word	0x24032a60

080011e8 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 4);
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <actuation_cmd_callback+0x24>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	4a03      	ldr	r2, [pc, #12]	@ (800120c <actuation_cmd_callback+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	24032a60 	.word	0x24032a60

08001210 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0x1 << 5);
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <emergency_callback+0x24>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	4a03      	ldr	r2, [pc, #12]	@ (8001234 <emergency_callback+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	24032a60 	.word	0x24032a60

08001238 <control_mode_cmd_callback>:
  * @brief  ROS service server callback to change the control mode and return a status about the change
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, void * xResponseMsg)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  // TODO Send threadflag to TaskControle


  //xResponseMsg = &control_mode_response_msg_;
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 8001258:	480e      	ldr	r0, [pc, #56]	@ (8001294 <MX_FREERTOS_Init+0x40>)
 800125a:	f00c f806 	bl	800d26a <osMutexNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <MX_FREERTOS_Init+0x44>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_FREERTOS_Init+0x48>)
 8001266:	f00c f800 	bl	800d26a <osMutexNew>
 800126a:	4603      	mov	r3, r0
 800126c:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <MX_FREERTOS_Init+0x4c>)
 800126e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <MX_FREERTOS_Init+0x50>)
 8001272:	2100      	movs	r1, #0
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <MX_FREERTOS_Init+0x54>)
 8001276:	f00b ff4b 	bl	800d110 <osThreadNew>
 800127a:	4603      	mov	r3, r0
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <MX_FREERTOS_Init+0x58>)
 800127e:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <MX_FREERTOS_Init+0x5c>)
 8001282:	2100      	movs	r1, #0
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <MX_FREERTOS_Init+0x60>)
 8001286:	f00b ff43 	bl	800d110 <osThreadNew>
 800128a:	4603      	mov	r3, r0
 800128c:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <MX_FREERTOS_Init+0x64>)
 800128e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08020be4 	.word	0x08020be4
 8001298:	24032a50 	.word	0x24032a50
 800129c:	08020bf4 	.word	0x08020bf4
 80012a0:	24032a54 	.word	0x24032a54
 80012a4:	08020b9c 	.word	0x08020b9c
 80012a8:	080021b9 	.word	0x080021b9
 80012ac:	24032a48 	.word	0x24032a48
 80012b0:	08020bc0 	.word	0x08020bc0
 80012b4:	08001741 	.word	0x08001741
 80012b8:	24032a4c 	.word	0x24032a4c

080012bc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	@ 0x38
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b9e      	ldr	r3, [pc, #632]	@ (800154c <MX_GPIO_Init+0x290>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	4a9c      	ldr	r2, [pc, #624]	@ (800154c <MX_GPIO_Init+0x290>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e2:	4b9a      	ldr	r3, [pc, #616]	@ (800154c <MX_GPIO_Init+0x290>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f0:	4b96      	ldr	r3, [pc, #600]	@ (800154c <MX_GPIO_Init+0x290>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	4a95      	ldr	r2, [pc, #596]	@ (800154c <MX_GPIO_Init+0x290>)
 80012f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001300:	4b92      	ldr	r3, [pc, #584]	@ (800154c <MX_GPIO_Init+0x290>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b8f      	ldr	r3, [pc, #572]	@ (800154c <MX_GPIO_Init+0x290>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001314:	4a8d      	ldr	r2, [pc, #564]	@ (800154c <MX_GPIO_Init+0x290>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131e:	4b8b      	ldr	r3, [pc, #556]	@ (800154c <MX_GPIO_Init+0x290>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b87      	ldr	r3, [pc, #540]	@ (800154c <MX_GPIO_Init+0x290>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	4a86      	ldr	r2, [pc, #536]	@ (800154c <MX_GPIO_Init+0x290>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133c:	4b83      	ldr	r3, [pc, #524]	@ (800154c <MX_GPIO_Init+0x290>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800134a:	4b80      	ldr	r3, [pc, #512]	@ (800154c <MX_GPIO_Init+0x290>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001350:	4a7e      	ldr	r2, [pc, #504]	@ (800154c <MX_GPIO_Init+0x290>)
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135a:	4b7c      	ldr	r3, [pc, #496]	@ (800154c <MX_GPIO_Init+0x290>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001368:	4b78      	ldr	r3, [pc, #480]	@ (800154c <MX_GPIO_Init+0x290>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	4a77      	ldr	r2, [pc, #476]	@ (800154c <MX_GPIO_Init+0x290>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001378:	4b74      	ldr	r3, [pc, #464]	@ (800154c <MX_GPIO_Init+0x290>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001386:	4b71      	ldr	r3, [pc, #452]	@ (800154c <MX_GPIO_Init+0x290>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	4a6f      	ldr	r2, [pc, #444]	@ (800154c <MX_GPIO_Init+0x290>)
 800138e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001396:	4b6d      	ldr	r3, [pc, #436]	@ (800154c <MX_GPIO_Init+0x290>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a4:	4b69      	ldr	r3, [pc, #420]	@ (800154c <MX_GPIO_Init+0x290>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	4a68      	ldr	r2, [pc, #416]	@ (800154c <MX_GPIO_Init+0x290>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b4:	4b65      	ldr	r3, [pc, #404]	@ (800154c <MX_GPIO_Init+0x290>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f244 0101 	movw	r1, #16385	@ 0x4001
 80013c8:	4861      	ldr	r0, [pc, #388]	@ (8001550 <MX_GPIO_Init+0x294>)
 80013ca:	f005 fcdf 	bl	8006d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013d4:	485f      	ldr	r0, [pc, #380]	@ (8001554 <MX_GPIO_Init+0x298>)
 80013d6:	f005 fcd9 	bl	8006d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2102      	movs	r1, #2
 80013de:	485e      	ldr	r0, [pc, #376]	@ (8001558 <MX_GPIO_Init+0x29c>)
 80013e0:	f005 fcd4 	bl	8006d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	4858      	ldr	r0, [pc, #352]	@ (800155c <MX_GPIO_Init+0x2a0>)
 80013fa:	f005 fb17 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80013fe:	2332      	movs	r3, #50	@ 0x32
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140e:	230b      	movs	r3, #11
 8001410:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4850      	ldr	r0, [pc, #320]	@ (800155c <MX_GPIO_Init+0x2a0>)
 800141a:	f005 fb07 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800141e:	2386      	movs	r3, #134	@ 0x86
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800142e:	230b      	movs	r3, #11
 8001430:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4849      	ldr	r0, [pc, #292]	@ (8001560 <MX_GPIO_Init+0x2a4>)
 800143a:	f005 faf7 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800143e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	483e      	ldr	r0, [pc, #248]	@ (8001550 <MX_GPIO_Init+0x294>)
 8001458:	f005 fae8 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 800145c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	483c      	ldr	r0, [pc, #240]	@ (8001564 <MX_GPIO_Init+0x2a8>)
 8001474:	f005 fada 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001478:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800148a:	230b      	movs	r3, #11
 800148c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	482e      	ldr	r0, [pc, #184]	@ (8001550 <MX_GPIO_Init+0x294>)
 8001496:	f005 fac9 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800149a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4828      	ldr	r0, [pc, #160]	@ (8001554 <MX_GPIO_Init+0x298>)
 80014b4:	f005 faba 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4826      	ldr	r0, [pc, #152]	@ (8001568 <MX_GPIO_Init+0x2ac>)
 80014ce:	f005 faad 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014d2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80014e4:	230a      	movs	r3, #10
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	481c      	ldr	r0, [pc, #112]	@ (8001560 <MX_GPIO_Init+0x2a4>)
 80014f0:	f005 fa9c 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80014f4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001506:	230b      	movs	r3, #11
 8001508:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4815      	ldr	r0, [pc, #84]	@ (8001568 <MX_GPIO_Init+0x2ac>)
 8001512:	f005 fa8b 	bl	8006a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001516:	2302      	movs	r3, #2
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	480a      	ldr	r0, [pc, #40]	@ (8001558 <MX_GPIO_Init+0x29c>)
 800152e:	f005 fa7d 	bl	8006a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2107      	movs	r1, #7
 8001536:	2028      	movs	r0, #40	@ 0x28
 8001538:	f002 fc08 	bl	8003d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800153c:	2028      	movs	r0, #40	@ 0x28
 800153e:	f002 fc1f 	bl	8003d80 <HAL_NVIC_EnableIRQ>

}
 8001542:	bf00      	nop
 8001544:	3738      	adds	r7, #56	@ 0x38
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	58024400 	.word	0x58024400
 8001550:	58020400 	.word	0x58020400
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58020800 	.word	0x58020800
 8001560:	58020000 	.word	0x58020000
 8001564:	58021400 	.word	0x58021400
 8001568:	58021800 	.word	0x58021800

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f000 ffd6 	bl	8002520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f81a 	bl	80015ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f7ff fea0 	bl	80012bc <MX_GPIO_Init>
  MX_DMA_Init();
 800157c:	f7ff fc66 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001580:	f000 fe4c 	bl	800221c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001584:	f7ff f8dc 	bl	8000740 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) ucADC1Buffer, 2);
 8001588:	2202      	movs	r2, #2
 800158a:	4906      	ldr	r1, [pc, #24]	@ (80015a4 <main+0x38>)
 800158c:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <main+0x3c>)
 800158e:	f001 fbb9 	bl	8002d04 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001592:	f00b fd73 	bl	800d07c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001596:	f7ff fe5d 	bl	8001254 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800159a:	f00b fd93 	bl	800d0c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800159e:	bf00      	nop
 80015a0:	e7fd      	b.n	800159e <main+0x32>
 80015a2:	bf00      	nop
 80015a4:	24032a58 	.word	0x24032a58
 80015a8:	2400140c 	.word	0x2400140c

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b09e      	sub	sp, #120	@ 0x78
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015b6:	224c      	movs	r2, #76	@ 0x4c
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f01e fa3a 	bl	801fa34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2220      	movs	r2, #32
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f01e fa33 	bl	801fa34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f005 fc1a 	bl	8006e08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <SystemClock_Config+0x154>)
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	4a48      	ldr	r2, [pc, #288]	@ (8001700 <SystemClock_Config+0x154>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015e4:	4b46      	ldr	r3, [pc, #280]	@ (8001700 <SystemClock_Config+0x154>)
 80015e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b45      	ldr	r3, [pc, #276]	@ (8001704 <SystemClock_Config+0x158>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a44      	ldr	r2, [pc, #272]	@ (8001704 <SystemClock_Config+0x158>)
 80015f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b42      	ldr	r3, [pc, #264]	@ (8001704 <SystemClock_Config+0x158>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001606:	bf00      	nop
 8001608:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <SystemClock_Config+0x158>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001614:	d1f8      	bne.n	8001608 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b3c      	ldr	r3, [pc, #240]	@ (8001708 <SystemClock_Config+0x15c>)
 8001618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800161c:	4a3a      	ldr	r2, [pc, #232]	@ (8001708 <SystemClock_Config+0x15c>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <SystemClock_Config+0x15c>)
 8001628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <SystemClock_Config+0x158>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a31      	ldr	r2, [pc, #196]	@ (8001704 <SystemClock_Config+0x158>)
 800163e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <SystemClock_Config+0x158>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <SystemClock_Config+0x154>)
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	4a2b      	ldr	r2, [pc, #172]	@ (8001700 <SystemClock_Config+0x154>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <SystemClock_Config+0x154>)
 800165c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001666:	bf00      	nop
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <SystemClock_Config+0x158>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001674:	d1f8      	bne.n	8001668 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8001676:	2310      	movs	r3, #16
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800167e:	2320      	movs	r3, #32
 8001680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8001686:	2301      	movs	r3, #1
 8001688:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800168a:	2301      	movs	r3, #1
 800168c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 800168e:	23f0      	movs	r3, #240	@ 0xf0
 8001690:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001692:	2302      	movs	r3, #2
 8001694:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001696:	2304      	movs	r3, #4
 8001698:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800169a:	2302      	movs	r3, #2
 800169c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800169e:	2308      	movs	r3, #8
 80016a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 fbe4 	bl	8006e7c <HAL_RCC_OscConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016ba:	f000 f839 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016be:	233f      	movs	r3, #63	@ 0x3f
 80016c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c2:	2303      	movs	r3, #3
 80016c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016ca:	2308      	movs	r3, #8
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ce:	2340      	movs	r3, #64	@ 0x40
 80016d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016d2:	2340      	movs	r3, #64	@ 0x40
 80016d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016dc:	2340      	movs	r3, #64	@ 0x40
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2104      	movs	r1, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 f822 	bl	8007730 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80016f2:	f000 f81d 	bl	8001730 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3778      	adds	r7, #120	@ 0x78
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	58000400 	.word	0x58000400
 8001704:	58024800 	.word	0x58024800
 8001708:	58024400 	.word	0x58024400

0800170c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800171e:	f000 ff3b 	bl	8002598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40001000 	.word	0x40001000

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <Error_Handler+0x8>
 800173c:	0000      	movs	r0, r0
	...

08001740 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void *argument)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 8001746:	af02      	add	r7, sp, #8
 8001748:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800174c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001750:	6018      	str	r0, [r3, #0]
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001752:	4bb1      	ldr	r3, [pc, #708]	@ (8001a18 <StartMicroAutoware+0x2d8>)
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	4bb1      	ldr	r3, [pc, #708]	@ (8001a1c <StartMicroAutoware+0x2dc>)
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4bb1      	ldr	r3, [pc, #708]	@ (8001a20 <StartMicroAutoware+0x2e0>)
 800175c:	4ab1      	ldr	r2, [pc, #708]	@ (8001a24 <StartMicroAutoware+0x2e4>)
 800175e:	49b2      	ldr	r1, [pc, #712]	@ (8001a28 <StartMicroAutoware+0x2e8>)
 8001760:	2001      	movs	r0, #1
 8001762:	f012 f8b1 	bl	80138c8 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001766:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800176a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800176e:	4618      	mov	r0, r3
 8001770:	f011 ffe4 	bl	801373c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001774:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001778:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800177c:	4aab      	ldr	r2, [pc, #684]	@ (8001a2c <StartMicroAutoware+0x2ec>)
 800177e:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001780:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001784:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001788:	4aa9      	ldr	r2, [pc, #676]	@ (8001a30 <StartMicroAutoware+0x2f0>)
 800178a:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 800178c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001790:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001794:	4aa7      	ldr	r2, [pc, #668]	@ (8001a34 <StartMicroAutoware+0x2f4>)
 8001796:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001798:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800179c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80017a0:	4aa5      	ldr	r2, [pc, #660]	@ (8001a38 <StartMicroAutoware+0x2f8>)
 80017a2:	60da      	str	r2, [r3, #12]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017a8:	4618      	mov	r0, r3
 80017aa:	f011 ffd5 	bl	8013758 <rcutils_set_default_allocator>
    //printf_("Error on default allocators (line %d)\n", __LINE__);
  }

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 80017ae:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017b2:	f5a3 741c 	sub.w	r4, r3, #624	@ 0x270
 80017b6:	463b      	mov	r3, r7
 80017b8:	4618      	mov	r0, r3
 80017ba:	f011 fb4f 	bl	8012e5c <rclc_executor_get_zero_initialized_executor>
 80017be:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017c2:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80017c6:	4620      	mov	r0, r4
 80017c8:	4619      	mov	r1, r3
 80017ca:	2388      	movs	r3, #136	@ 0x88
 80017cc:	461a      	mov	r2, r3
 80017ce:	f01e fa50 	bl	801fc72 <memcpy>

  allocator = rcl_get_default_allocator();
 80017d2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017d6:	f5a3 74f2 	sub.w	r4, r3, #484	@ 0x1e4
 80017da:	463b      	mov	r3, r7
 80017dc:	4618      	mov	r0, r3
 80017de:	f011 ffd9 	bl	8013794 <rcutils_get_default_allocator>
 80017e2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017e6:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80017ea:	461d      	mov	r5, r3
 80017ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f0:	682b      	ldr	r3, [r5, #0]
 80017f2:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 80017f4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80017f8:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	f011 fe5a 	bl	80134b8 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "", &support);
 8001804:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001808:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 800180c:	4a8b      	ldr	r2, [pc, #556]	@ (8001a3c <StartMicroAutoware+0x2fc>)
 800180e:	498c      	ldr	r1, [pc, #560]	@ (8001a40 <StartMicroAutoware+0x300>)
 8001810:	f011 fe9c 	bl	801354c <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001814:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001818:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800181c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001820:	2201      	movs	r2, #1
 8001822:	f011 fb25 	bl	8012e70 <rclc_executor_init>


  // create subscribers
  // TODO set QoS
  rclc_subscription_init_default(
 8001826:	f00e fb11 	bl	800fe4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 800182a:	4602      	mov	r2, r0
 800182c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001830:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001834:	4b83      	ldr	r3, [pc, #524]	@ (8001a44 <StartMicroAutoware+0x304>)
 8001836:	f011 ff3f 	bl	80136b8 <rclc_subscription_init_default>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd");

  rclc_subscription_init_default(
 800183a:	f00e fe1d 	bl	8010478 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 800183e:	4602      	mov	r2, r0
 8001840:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001844:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001848:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <StartMicroAutoware+0x308>)
 800184a:	f011 ff35 	bl	80136b8 <rclc_subscription_init_default>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd");

  rclc_subscription_init_default(
 800184e:	f00e fe8b 	bl	8010568 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001852:	4602      	mov	r2, r0
 8001854:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001858:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 800185c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a4c <StartMicroAutoware+0x30c>)
 800185e:	f011 ff2b 	bl	80136b8 <rclc_subscription_init_default>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd");

  rclc_subscription_init_default(
 8001862:	f00e fe39 	bl	80104d8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 8001866:	4602      	mov	r2, r0
 8001868:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800186c:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001870:	4b77      	ldr	r3, [pc, #476]	@ (8001a50 <StartMicroAutoware+0x310>)
 8001872:	f011 ff21 	bl	80136b8 <rclc_subscription_init_default>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd");

  rclc_subscription_init_default(
 8001876:	f012 f961 	bl	8013b3c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 800187a:	4602      	mov	r2, r0
 800187c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001880:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001884:	4b73      	ldr	r3, [pc, #460]	@ (8001a54 <StartMicroAutoware+0x314>)
 8001886:	f011 ff17 	bl	80136b8 <rclc_subscription_init_default>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd");

  rclc_subscription_init_default(
 800188a:	f012 f99f 	bl	8013bcc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 800188e:	4602      	mov	r2, r0
 8001890:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001894:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001898:	4b6f      	ldr	r3, [pc, #444]	@ (8001a58 <StartMicroAutoware+0x318>)
 800189a:	f011 ff0d 	bl	80136b8 <rclc_subscription_init_default>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd");

  // create publishers
  // TODO set QoS
  rclc_publisher_init_default(
 800189e:	f00e fdd3 	bl	8010448 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018a8:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 80018ac:	4b6b      	ldr	r3, [pc, #428]	@ (8001a5c <StartMicroAutoware+0x31c>)
 80018ae:	f011 fe8f 	bl	80135d0 <rclc_publisher_init_default>
		  	&control_mode_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
			"/vehicle/status/control_mode");

  rclc_publisher_init_default(
 80018b2:	f00e fe89 	bl	80105c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018bc:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 80018c0:	4b67      	ldr	r3, [pc, #412]	@ (8001a60 <StartMicroAutoware+0x320>)
 80018c2:	f011 fe85 	bl	80135d0 <rclc_publisher_init_default>
		  	&vehicle_twist_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
			"/vehicle/status/velocity_status");

  rclc_publisher_init_default(
 80018c6:	f00e fe37 	bl	8010538 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 80018ca:	4602      	mov	r2, r0
 80018cc:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018d0:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 80018d4:	4b63      	ldr	r3, [pc, #396]	@ (8001a64 <StartMicroAutoware+0x324>)
 80018d6:	f011 fe7b 	bl	80135d0 <rclc_publisher_init_default>
			&steering_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
			"/vehicle/status/steering_status");

  rclc_publisher_init_default(
 80018da:	f00e fde5 	bl	80104a8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 80018de:	4602      	mov	r2, r0
 80018e0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018e4:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 80018e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001a68 <StartMicroAutoware+0x328>)
 80018ea:	f011 fe71 	bl	80135d0 <rclc_publisher_init_default>
			&gear_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
			"/vehicle/status/gear_status");

  rclc_publisher_init_default(
 80018ee:	f00e fe53 	bl	8010598 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80018f8:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 80018fc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <StartMicroAutoware+0x32c>)
 80018fe:	f011 fe67 	bl	80135d0 <rclc_publisher_init_default>
			&turn_indicators_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
			"/vehicle/status/turn_indicators_status");

  rclc_publisher_init_default(
 8001902:	f00e fe01 	bl	8010508 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 8001906:	4602      	mov	r2, r0
 8001908:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800190c:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001910:	4b57      	ldr	r3, [pc, #348]	@ (8001a70 <StartMicroAutoware+0x330>)
 8001912:	f011 fe5d 	bl	80135d0 <rclc_publisher_init_default>
			&hazard_lights_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
			"/vehicle/status/hazard_lights_status");

  rclc_publisher_init_default(
 8001916:	f012 f929 	bl	8013b6c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 800191a:	4602      	mov	r2, r0
 800191c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001920:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001924:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <StartMicroAutoware+0x334>)
 8001926:	f011 fe53 	bl	80135d0 <rclc_publisher_init_default>
			&actuation_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
			"/vehicle/status/actuation_status");

  rclc_publisher_init_default(
 800192a:	f012 f937 	bl	8013b9c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 800192e:	4602      	mov	r2, r0
 8001930:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001934:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001938:	4b4f      	ldr	r3, [pc, #316]	@ (8001a78 <StartMicroAutoware+0x338>)
 800193a:	f011 fe49 	bl	80135d0 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
			"/vehicle/status/steering_wheel_status");

  // creating servers

  rclc_service_init_default(
 800193e:	f00e fd63 	bl	8010408 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 8001942:	4602      	mov	r2, r0
 8001944:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001948:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 800194c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a7c <StartMicroAutoware+0x33c>)
 800194e:	f011 fe79 	bl	8013644 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
			"/control/control_mode_request");


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001952:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001956:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 800195a:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <StartMicroAutoware+0x340>)
 8001964:	f011 fb00 	bl	8012f68 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8001968:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 800196c:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001970:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001974:	2300      	movs	r3, #0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <StartMicroAutoware+0x344>)
 800197a:	f011 faf5 	bl	8012f68 <rclc_executor_add_subscription>
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 800197e:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001982:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001986:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 800198a:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800198e:	4c3e      	ldr	r4, [pc, #248]	@ (8001a88 <StartMicroAutoware+0x348>)
 8001990:	9400      	str	r4, [sp, #0]
 8001992:	f011 fb27 	bl	8012fe4 <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 8001996:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 800199a:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 800199e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <StartMicroAutoware+0x34c>)
 80019a8:	f011 fade 	bl	8012f68 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 80019ac:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 80019b0:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80019b4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <StartMicroAutoware+0x350>)
 80019be:	f011 fad3 	bl	8012f68 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 80019c2:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 80019c6:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 80019ca:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4b30      	ldr	r3, [pc, #192]	@ (8001a94 <StartMicroAutoware+0x354>)
 80019d4:	f011 fac8 	bl	8012f68 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 80019d8:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 80019dc:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 80019e0:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a98 <StartMicroAutoware+0x358>)
 80019ea:	f011 fabd 	bl	8012f68 <rclc_executor_add_subscription>


  for (;;)
  {

    rclc_executor_spin_some(&executor, 1000 * (1000 * 1000)); // Spinning executor for 1s TODO set time in function of data rate.
 80019ee:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80019f2:	a307      	add	r3, pc, #28	@ (adr r3, 8001a10 <StartMicroAutoware+0x2d0>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	4608      	mov	r0, r1
 80019fa:	f011 fd23 	bl	8013444 <rclc_executor_spin_some>

    // Verify flags

	  // Pub mode change to autoware if needs

    if(0x00111111 == ucSubscribersRecieved)
 80019fe:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <StartMicroAutoware+0x35c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a27      	ldr	r2, [pc, #156]	@ (8001aa0 <StartMicroAutoware+0x360>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d1f2      	bne.n	80019ee <StartMicroAutoware+0x2ae>
	  // xControlAction

	  // Wait for flag
	  // Pub data

	  ucSubscribersRecieved = 0;
 8001a08:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <StartMicroAutoware+0x35c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    rclc_executor_spin_some(&executor, 1000 * (1000 * 1000)); // Spinning executor for 1s TODO set time in function of data rate.
 8001a0e:	e7ee      	b.n	80019ee <StartMicroAutoware+0x2ae>
 8001a10:	3b9aca00 	.word	0x3b9aca00
 8001a14:	00000000 	.word	0x00000000
 8001a18:	08000f6d 	.word	0x08000f6d
 8001a1c:	08000f09 	.word	0x08000f09
 8001a20:	08000ee9 	.word	0x08000ee9
 8001a24:	08000ebd 	.word	0x08000ebd
 8001a28:	24032ac0 	.word	0x24032ac0
 8001a2c:	08001aa5 	.word	0x08001aa5
 8001a30:	08001ae9 	.word	0x08001ae9
 8001a34:	08001b21 	.word	0x08001b21
 8001a38:	08001b8d 	.word	0x08001b8d
 8001a3c:	08020950 	.word	0x08020950
 8001a40:	08020954 	.word	0x08020954
 8001a44:	08020968 	.word	0x08020968
 8001a48:	08020988 	.word	0x08020988
 8001a4c:	080209a4 	.word	0x080209a4
 8001a50:	080209cc 	.word	0x080209cc
 8001a54:	080209f0 	.word	0x080209f0
 8001a58:	08020a10 	.word	0x08020a10
 8001a5c:	08020a30 	.word	0x08020a30
 8001a60:	08020a50 	.word	0x08020a50
 8001a64:	08020a70 	.word	0x08020a70
 8001a68:	08020a90 	.word	0x08020a90
 8001a6c:	08020aac 	.word	0x08020aac
 8001a70:	08020ad4 	.word	0x08020ad4
 8001a74:	08020afc 	.word	0x08020afc
 8001a78:	08020b20 	.word	0x08020b20
 8001a7c:	08020b48 	.word	0x08020b48
 8001a80:	08001149 	.word	0x08001149
 8001a84:	08001171 	.word	0x08001171
 8001a88:	08001239 	.word	0x08001239
 8001a8c:	08001199 	.word	0x08001199
 8001a90:	080011c1 	.word	0x080011c1
 8001a94:	080011e9 	.word	0x080011e9
 8001a98:	08001211 	.word	0x08001211
 8001a9c:	24032a60 	.word	0x24032a60
 8001aa0:	00111111 	.word	0x00111111

08001aa4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <microros_allocate+0x3c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <microros_allocate+0x3c>)
 8001abc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <microros_allocate+0x40>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <microros_allocate+0x40>)
 8001acc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe ff6a 	bl	80009a8 <pvPortMallocMicroROS>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	24032a64 	.word	0x24032a64
 8001ae4:	24032a68 	.word	0x24032a68

08001ae8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00c      	beq.n	8001b12 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff f879 	bl	8000bf0 <getBlockSize>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <microros_deallocate+0x34>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <microros_deallocate+0x34>)
 8001b0a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff f813 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	24032a68 	.word	0x24032a68

08001b20 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <microros_reallocate+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <microros_reallocate+0x64>)
 8001b3a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <microros_reallocate+0x68>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4413      	add	r3, r2
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <microros_reallocate+0x68>)
 8001b4a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001b52:	68b8      	ldr	r0, [r7, #8]
 8001b54:	f7fe ff28 	bl	80009a8 <pvPortMallocMicroROS>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	e00e      	b.n	8001b7a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff f847 	bl	8000bf0 <getBlockSize>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a08      	ldr	r2, [pc, #32]	@ (8001b88 <microros_reallocate+0x68>)
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <microros_reallocate+0x68>)
 8001b6e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7ff f85a 	bl	8000c2c <pvPortReallocMicroROS>
 8001b78:	4603      	mov	r3, r0
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	24032a64 	.word	0x24032a64
 8001b88:	24032a68 	.word	0x24032a68

08001b8c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <microros_zero_allocate+0x48>)
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <microros_zero_allocate+0x48>)
 8001baa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <microros_zero_allocate+0x4c>)
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <microros_zero_allocate+0x4c>)
 8001bbe:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff f85f 	bl	8000c86 <pvPortCallocMicroROS>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	24032a64 	.word	0x24032a64
 8001bd8:	24032a68 	.word	0x24032a68
 8001bdc:	00000000 	.word	0x00000000

08001be0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf6:	a320      	add	r3, pc, #128	@ (adr r3, 8001c78 <UTILS_NanosecondsToTimespec+0x98>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fbd8 	bl	80003b0 <__aeabi_ldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001c78 <UTILS_NanosecondsToTimespec+0x98>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fbcc 	bl	80003b0 <__aeabi_ldivmod>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da20      	bge.n	8001c66 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <UTILS_NanosecondsToTimespec+0x90>)
 8001c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c2e:	1712      	asrs	r2, r2, #28
 8001c30:	17db      	asrs	r3, r3, #31
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	17c8      	asrs	r0, r1, #31
 8001c42:	460c      	mov	r4, r1
 8001c44:	4605      	mov	r5, r0
 8001c46:	ebb2 0804 	subs.w	r8, r2, r4
 8001c4a:	eb63 0905 	sbc.w	r9, r3, r5
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4906      	ldr	r1, [pc, #24]	@ (8001c74 <UTILS_NanosecondsToTimespec+0x94>)
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	441a      	add	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
    }
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c70:	44b82fa1 	.word	0x44b82fa1
 8001c74:	3b9aca00 	.word	0x3b9aca00
 8001c78:	3b9aca00 	.word	0x3b9aca00
 8001c7c:	00000000 	.word	0x00000000

08001c80 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c84:	b08e      	sub	sp, #56	@ 0x38
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6278      	str	r0, [r7, #36]	@ 0x24
 8001c8a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001c8c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001c90:	2300      	movs	r3, #0
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f00c fec6 	bl	800ea38 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cae:	17da      	asrs	r2, r3, #31
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	61fa      	str	r2, [r7, #28]
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	69b9      	ldr	r1, [r7, #24]
 8001cbe:	000b      	movs	r3, r1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	461c      	mov	r4, r3
 8001ccc:	4615      	mov	r5, r2
 8001cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cd2:	1911      	adds	r1, r2, r4
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	416b      	adcs	r3, r5
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001cde:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001ce2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	f04f 0400 	mov.w	r4, #0
 8001cee:	f04f 0500 	mov.w	r5, #0
 8001cf2:	015d      	lsls	r5, r3, #5
 8001cf4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001cf8:	0154      	lsls	r4, r2, #5
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	ebb2 0800 	subs.w	r8, r2, r0
 8001d02:	eb63 0901 	sbc.w	r9, r3, r1
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001d12:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001d16:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	eb18 0a00 	adds.w	sl, r8, r0
 8001d22:	eb49 0b01 	adc.w	fp, r9, r1
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d32:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d36:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d3a:	ebb2 040a 	subs.w	r4, r2, sl
 8001d3e:	603c      	str	r4, [r7, #0]
 8001d40:	eb63 030b 	sbc.w	r3, r3, fp
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	181b      	adds	r3, r3, r0
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	462b      	mov	r3, r5
 8001d52:	eb41 0303 	adc.w	r3, r1, r3
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d5e:	f7ff ff3f 	bl	8001be0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	3738      	adds	r7, #56	@ 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <HAL_MspInit+0x38>)
 8001d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_MspInit+0x38>)
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d86:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_MspInit+0x38>)
 8001d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	210f      	movs	r1, #15
 8001d98:	f06f 0001 	mvn.w	r0, #1
 8001d9c:	f001 ffd6 	bl	8003d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58024400 	.word	0x58024400

08001dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b090      	sub	sp, #64	@ 0x40
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	d827      	bhi.n	8001e0a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	2036      	movs	r0, #54	@ 0x36
 8001dc0:	f001 ffc4 	bl	8003d4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dc4:	2036      	movs	r0, #54	@ 0x36
 8001dc6:	f001 ffdb 	bl	8003d80 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001dca:	4a29      	ldr	r2, [pc, #164]	@ (8001e70 <HAL_InitTick+0xc4>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dd0:	4b28      	ldr	r3, [pc, #160]	@ (8001e74 <HAL_InitTick+0xc8>)
 8001dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dd6:	4a27      	ldr	r2, [pc, #156]	@ (8001e74 <HAL_InitTick+0xc8>)
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <HAL_InitTick+0xc8>)
 8001de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dee:	f107 0210 	add.w	r2, r7, #16
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f006 f825 	bl	8007e48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_InitTick+0x6a>
 8001e08:	e001      	b.n	8001e0e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e02b      	b.n	8001e66 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e0e:	f005 ffef 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 8001e12:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001e14:	e004      	b.n	8001e20 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e16:	f005 ffeb 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e22:	4a15      	ldr	r2, [pc, #84]	@ (8001e78 <HAL_InitTick+0xcc>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <HAL_InitTick+0xd0>)
 8001e30:	4a13      	ldr	r2, [pc, #76]	@ (8001e80 <HAL_InitTick+0xd4>)
 8001e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_InitTick+0xd0>)
 8001e36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <HAL_InitTick+0xd0>)
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <HAL_InitTick+0xd0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <HAL_InitTick+0xd0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e4e:	480b      	ldr	r0, [pc, #44]	@ (8001e7c <HAL_InitTick+0xd0>)
 8001e50:	f008 fd3a 	bl	800a8c8 <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e5a:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <HAL_InitTick+0xd0>)
 8001e5c:	f008 fd96 	bl	800a98c <HAL_TIM_Base_Start_IT>
 8001e60:	4603      	mov	r3, r0
 8001e62:	e000      	b.n	8001e66 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3740      	adds	r7, #64	@ 0x40
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2400000c 	.word	0x2400000c
 8001e74:	58024400 	.word	0x58024400
 8001e78:	431bde83 	.word	0x431bde83
 8001e7c:	24032a6c 	.word	0x24032a6c
 8001e80:	40001000 	.word	0x40001000

08001e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <NMI_Handler+0x4>

08001e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <DMA1_Stream0_IRQHandler+0x10>)
 8001ec2:	f003 fa95 	bl	80053f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	24032b54 	.word	0x24032b54

08001ed0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ed6:	f003 fa8b 	bl	80053f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	24032bcc 	.word	0x24032bcc

08001ee4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <USART3_IRQHandler+0x10>)
 8001eea:	f009 f96d 	bl	800b1c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	24032ac0 	.word	0x24032ac0

08001ef8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8001efc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f00:	f004 ff5d 	bl	8006dbe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <TIM6_DAC_IRQHandler+0x10>)
 8001f0e:	f008 fdb5 	bl	800aa7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	24032a6c 	.word	0x24032a6c

08001f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return 1;
 8001f20:	2301      	movs	r3, #1
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_kill>:

int _kill(int pid, int sig)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f36:	f01d fe67 	bl	801fc08 <__errno>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2216      	movs	r2, #22
 8001f3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_exit>:

void _exit (int status)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ffe7 	bl	8001f2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f5e:	bf00      	nop
 8001f60:	e7fd      	b.n	8001f5e <_exit+0x12>

08001f62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e00a      	b.n	8001f8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f74:	f3af 8000 	nop.w
 8001f78:	4601      	mov	r1, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	60ba      	str	r2, [r7, #8]
 8001f80:	b2ca      	uxtb	r2, r1
 8001f82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	dbf0      	blt.n	8001f74 <_read+0x12>
  }

  return len;
 8001f92:	687b      	ldr	r3, [r7, #4]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e009      	b.n	8001fc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	60ba      	str	r2, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbf1      	blt.n	8001fae <_write+0x12>
  }
  return len;
 8001fca:	687b      	ldr	r3, [r7, #4]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_close>:

int _close(int file)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ffc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_isatty>:

int _isatty(int file)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f01d fdcc 	bl	801fc08 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	24080000 	.word	0x24080000
 800209c:	00000400 	.word	0x00000400
 80020a0:	24032abc 	.word	0x24032abc
 80020a4:	240695e0 	.word	0x240695e0

080020a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020ac:	4b37      	ldr	r3, [pc, #220]	@ (800218c <SystemInit+0xe4>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	4a36      	ldr	r2, [pc, #216]	@ (800218c <SystemInit+0xe4>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020bc:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <SystemInit+0xe8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d807      	bhi.n	80020d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020c8:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <SystemInit+0xe8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 030f 	bic.w	r3, r3, #15
 80020d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002190 <SystemInit+0xe8>)
 80020d2:	f043 0307 	orr.w	r3, r3, #7
 80020d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002194 <SystemInit+0xec>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002194 <SystemInit+0xec>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <SystemInit+0xec>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <SystemInit+0xec>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4929      	ldr	r1, [pc, #164]	@ (8002194 <SystemInit+0xec>)
 80020f0:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <SystemInit+0xf0>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <SystemInit+0xe8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002102:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <SystemInit+0xe8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 030f 	bic.w	r3, r3, #15
 800210a:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <SystemInit+0xe8>)
 800210c:	f043 0307 	orr.w	r3, r3, #7
 8002110:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <SystemInit+0xec>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002118:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <SystemInit+0xec>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <SystemInit+0xec>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <SystemInit+0xec>)
 8002126:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <SystemInit+0xf4>)
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <SystemInit+0xec>)
 800212c:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <SystemInit+0xf8>)
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <SystemInit+0xec>)
 8002132:	4a1c      	ldr	r2, [pc, #112]	@ (80021a4 <SystemInit+0xfc>)
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <SystemInit+0xec>)
 8002138:	2200      	movs	r2, #0
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <SystemInit+0xec>)
 800213e:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <SystemInit+0xfc>)
 8002140:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <SystemInit+0xec>)
 8002144:	2200      	movs	r2, #0
 8002146:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <SystemInit+0xec>)
 800214a:	4a16      	ldr	r2, [pc, #88]	@ (80021a4 <SystemInit+0xfc>)
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <SystemInit+0xec>)
 8002150:	2200      	movs	r2, #0
 8002152:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <SystemInit+0xec>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0e      	ldr	r2, [pc, #56]	@ (8002194 <SystemInit+0xec>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800215e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <SystemInit+0xec>)
 8002162:	2200      	movs	r2, #0
 8002164:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <SystemInit+0x100>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <SystemInit+0x104>)
 800216c:	4013      	ands	r3, r2
 800216e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002172:	d202      	bcs.n	800217a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <SystemInit+0x108>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <SystemInit+0x10c>)
 800217c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002180:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00
 8002190:	52002000 	.word	0x52002000
 8002194:	58024400 	.word	0x58024400
 8002198:	eaf6ed7f 	.word	0xeaf6ed7f
 800219c:	02020200 	.word	0x02020200
 80021a0:	01ff0000 	.word	0x01ff0000
 80021a4:	01010280 	.word	0x01010280
 80021a8:	5c001000 	.word	0x5c001000
 80021ac:	ffff0000 	.word	0xffff0000
 80021b0:	51008108 	.word	0x51008108
 80021b4:	52004000 	.word	0x52004000

080021b8 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  unsigned char ucControlMode;

  unsigned int uiX0 = 33970;
 80021c0:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  unsigned int uiXMin = 1057;
 80021c6:	f240 4321 	movw	r3, #1057	@ 0x421
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int uiXMax = 65535;
 80021cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
  unsigned int uiY0 = 33580;
 80021d2:	f248 332c 	movw	r3, #33580	@ 0x832c
 80021d6:	623b      	str	r3, [r7, #32]
  unsigned int uiYMin = 1062;
 80021d8:	f240 4326 	movw	r3, #1062	@ 0x426
 80021dc:	61fb      	str	r3, [r7, #28]
  unsigned int uiYMax = 65535;
 80021de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021e2:	61bb      	str	r3, [r7, #24]
  float fJoyXAxis;
  float fJoyYAxis;



  ucControlMode = AUTOWARE;
 80021e4:	2301      	movs	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {


    // Joystick read block -- START
    fJoyXAxis = fGetJoyPostition((unsigned int) ucADC1Buffer[0], uiX0, uiXMax, uiXMin);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <StartTaskControle+0x60>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021f2:	f000 f937 	bl	8002464 <fGetJoyPostition>
 80021f6:	ed87 0a04 	vstr	s0, [r7, #16]
	fJoyYAxis = fGetJoyPostition((unsigned int) ucADC1Buffer[1], uiY0, uiYMax, uiYMin);
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <StartTaskControle+0x60>)
 80021fc:	6858      	ldr	r0, [r3, #4]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	6a39      	ldr	r1, [r7, #32]
 8002204:	f000 f92e 	bl	8002464 <fGetJoyPostition>
 8002208:	ed87 0a03 	vstr	s0, [r7, #12]
	osDelay(20);
 800220c:	2014      	movs	r0, #20
 800220e:	f00b f811 	bl	800d234 <osDelay>
  {
 8002212:	bf00      	nop
 8002214:	e7e8      	b.n	80021e8 <StartTaskControle+0x30>
 8002216:	bf00      	nop
 8002218:	24032a58 	.word	0x24032a58

0800221c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002220:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002222:	4a23      	ldr	r2, [pc, #140]	@ (80022b0 <MX_USART3_UART_Init+0x94>)
 8002224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002228:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800222c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002264:	4811      	ldr	r0, [pc, #68]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002266:	f008 fdfd 	bl	800ae64 <HAL_UART_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002270:	f7ff fa5e 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002274:	2100      	movs	r1, #0
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 8002278:	f00a fdf2 	bl	800ce60 <HAL_UARTEx_SetTxFifoThreshold>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002282:	f7ff fa55 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002286:	2100      	movs	r1, #0
 8002288:	4808      	ldr	r0, [pc, #32]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 800228a:	f00a fe27 	bl	800cedc <HAL_UARTEx_SetRxFifoThreshold>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002294:	f7ff fa4c 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <MX_USART3_UART_Init+0x90>)
 800229a:	f00a fda8 	bl	800cdee <HAL_UARTEx_DisableFifoMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80022a4:	f7ff fa44 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	24032ac0 	.word	0x24032ac0
 80022b0:	40004800 	.word	0x40004800

080022b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0ba      	sub	sp, #232	@ 0xe8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	22c0      	movs	r2, #192	@ 0xc0
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f01d fbad 	bl	801fa34 <memset>
  if(uartHandle->Instance==USART3)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a5a      	ldr	r2, [pc, #360]	@ (8002448 <HAL_UART_MspInit+0x194>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	f040 80ad 	bne.w	8002440 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022e6:	f04f 0202 	mov.w	r2, #2
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	4618      	mov	r0, r3
 80022fe:	f005 fde5 	bl	8007ecc <HAL_RCCEx_PeriphCLKConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002308:	f7ff fa12 	bl	8001730 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800230c:	4b4f      	ldr	r3, [pc, #316]	@ (800244c <HAL_UART_MspInit+0x198>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002312:	4a4e      	ldr	r2, [pc, #312]	@ (800244c <HAL_UART_MspInit+0x198>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800231c:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <HAL_UART_MspInit+0x198>)
 800231e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	4b48      	ldr	r3, [pc, #288]	@ (800244c <HAL_UART_MspInit+0x198>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002330:	4a46      	ldr	r2, [pc, #280]	@ (800244c <HAL_UART_MspInit+0x198>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800233a:	4b44      	ldr	r3, [pc, #272]	@ (800244c <HAL_UART_MspInit+0x198>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002348:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800234c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002362:	2307      	movs	r3, #7
 8002364:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002368:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800236c:	4619      	mov	r1, r3
 800236e:	4838      	ldr	r0, [pc, #224]	@ (8002450 <HAL_UART_MspInit+0x19c>)
 8002370:	f004 fb5c 	bl	8006a2c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002374:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 8002376:	4a38      	ldr	r2, [pc, #224]	@ (8002458 <HAL_UART_MspInit+0x1a4>)
 8002378:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800237a:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 800237c:	222d      	movs	r2, #45	@ 0x2d
 800237e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002380:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b33      	ldr	r3, [pc, #204]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b31      	ldr	r3, [pc, #196]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 800238e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002392:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002394:	4b2f      	ldr	r3, [pc, #188]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800239a:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 80023a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023a6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 80023aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023b6:	4827      	ldr	r0, [pc, #156]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 80023b8:	f001 fcf0 	bl	8003d9c <HAL_DMA_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80023c2:	f7ff f9b5 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 80023ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80023ce:	4a21      	ldr	r2, [pc, #132]	@ (8002454 <HAL_UART_MspInit+0x1a0>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 80023d6:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <HAL_UART_MspInit+0x1ac>)
 80023d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 80023dc:	222e      	movs	r2, #46	@ 0x2e
 80023de:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 80023ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023fa:	4b18      	ldr	r3, [pc, #96]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002400:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 8002408:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800240c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 8002410:	2200      	movs	r2, #0
 8002412:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002414:	4811      	ldr	r0, [pc, #68]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 8002416:	f001 fcc1 	bl	8003d9c <HAL_DMA_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8002420:	f7ff f986 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a0d      	ldr	r2, [pc, #52]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 8002428:	67da      	str	r2, [r3, #124]	@ 0x7c
 800242a:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_UART_MspInit+0x1a8>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2108      	movs	r1, #8
 8002434:	2027      	movs	r0, #39	@ 0x27
 8002436:	f001 fc89 	bl	8003d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800243a:	2027      	movs	r0, #39	@ 0x27
 800243c:	f001 fca0 	bl	8003d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002440:	bf00      	nop
 8002442:	37e8      	adds	r7, #232	@ 0xe8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40004800 	.word	0x40004800
 800244c:	58024400 	.word	0x58024400
 8002450:	58020c00 	.word	0x58020c00
 8002454:	24032b54 	.word	0x24032b54
 8002458:	40020010 	.word	0x40020010
 800245c:	24032bcc 	.word	0x24032bcc
 8002460:	40020028 	.word	0x40020028

08002464 <fGetJoyPostition>:
  *         uiRefMax: Analog value for axis maximum limit.
  *         uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
	return (uiValue - uiRef0 > 0) ? (uiValue - uiRef0)/((float)(uiRefMax - uiRef0)) : (uiValue - uiRef0)/((float)(uiRef0 - uiRefMin));
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d010      	beq.n	800249c <fGetJoyPostition+0x38>
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249a:	e00f      	b.n	80024bc <fGetJoyPostition+0x58>
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80024bc:	eeb0 0a67 	vmov.f32	s0, s15
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d0:	f7ff fdea 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d4:	480c      	ldr	r0, [pc, #48]	@ (8002508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024d6:	490d      	ldr	r1, [pc, #52]	@ (800250c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fa:	f01d fb8b 	bl	801fc14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fe:	f7ff f835 	bl	800156c <main>
  bx  lr
 8002502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002504:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002508:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800250c:	240013f0 	.word	0x240013f0
  ldr r2, =_sidata
 8002510:	08023264 	.word	0x08023264
  ldr r2, =_sbss
 8002514:	240013f0 	.word	0x240013f0
  ldr r4, =_ebss
 8002518:	240695e0 	.word	0x240695e0

0800251c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC3_IRQHandler>
	...

08002520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002526:	2003      	movs	r0, #3
 8002528:	f001 fc05 	bl	8003d36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800252c:	f005 fab6 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_Init+0x68>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	4913      	ldr	r1, [pc, #76]	@ (800258c <HAL_Init+0x6c>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800254a:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <HAL_Init+0x68>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <HAL_Init+0x6c>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <HAL_Init+0x70>)
 8002562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002564:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <HAL_Init+0x74>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800256a:	200f      	movs	r0, #15
 800256c:	f7ff fc1e 	bl	8001dac <HAL_InitTick>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e002      	b.n	8002580 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800257a:	f7ff fbf9 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	58024400 	.word	0x58024400
 800258c:	08020c04 	.word	0x08020c04
 8002590:	24000008 	.word	0x24000008
 8002594:	24000004 	.word	0x24000004

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	24000010 	.word	0x24000010
 80025bc:	24032c44 	.word	0x24032c44

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	24032c44 	.word	0x24032c44

080025d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_GetREVID+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0c1b      	lsrs	r3, r3, #16
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	5c001000 	.word	0x5c001000

080025f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	609a      	str	r2, [r3, #8]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3360      	adds	r3, #96	@ 0x60
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	431a      	orrs	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	611a      	str	r2, [r3, #16]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3360      	adds	r3, #96	@ 0x60
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	601a      	str	r2, [r3, #0]
  }
}
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002726:	b480      	push	{r7}
 8002728:	b087      	sub	sp, #28
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3330      	adds	r3, #48	@ 0x30
 8002736:	461a      	mov	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	4413      	add	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	211f      	movs	r1, #31
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	f003 011f 	and.w	r1, r3, #31
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f023 0203 	bic.w	r2, r3, #3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3314      	adds	r3, #20
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0e5b      	lsrs	r3, r3, #25
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0d1b      	lsrs	r3, r3, #20
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2107      	movs	r1, #7
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	0d1b      	lsrs	r3, r3, #20
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002814:	43db      	mvns	r3, r3
 8002816:	401a      	ands	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0318 	and.w	r3, r3, #24
 800281e:	4908      	ldr	r1, [pc, #32]	@ (8002840 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002820:	40d9      	lsrs	r1, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	400b      	ands	r3, r1
 8002826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800282a:	431a      	orrs	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	000fffff 	.word	0x000fffff

08002844 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 031f 	and.w	r3, r3, #31
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <LL_ADC_DisableDeepPowerDown+0x20>)
 800286e:	4013      	ands	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6093      	str	r3, [r2, #8]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	5fffffc0 	.word	0x5fffffc0

08002884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002898:	d101      	bne.n	800289e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	6fffffc0 	.word	0x6fffffc0

080028d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028e8:	d101      	bne.n	80028ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <LL_ADC_Enable+0x24>)
 800290a:	4013      	ands	r3, r2
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	7fffffc0 	.word	0x7fffffc0

08002924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <LL_ADC_IsEnabled+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_ADC_IsEnabled+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <LL_ADC_REG_StartConversion+0x24>)
 800295a:	4013      	ands	r3, r2
 800295c:	f043 0204 	orr.w	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	7fffffc0 	.word	0x7fffffc0

08002974 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d101      	bne.n	800298c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d101      	bne.n	80029b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b089      	sub	sp, #36	@ 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e18f      	b.n	8002cfa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fd ff33 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff3f 	bl	8002884 <LL_ADC_IsDeepPowerDownEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff25 	bl	8002860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff5a 	bl	80028d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d114      	bne.n	8002a50 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff3e 	bl	80028ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a30:	4b87      	ldr	r3, [pc, #540]	@ (8002c50 <HAL_ADC_Init+0x290>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	4a87      	ldr	r2, [pc, #540]	@ (8002c54 <HAL_ADC_Init+0x294>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a42:	e002      	b.n	8002a4a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f9      	bne.n	8002a44 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff3d 	bl	80028d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a64:	f043 0210 	orr.w	r2, r3, #16
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff77 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002a86:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 8129 	bne.w	8002ce8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 8125 	bne.w	8002ce8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002aa6:	f043 0202 	orr.w	r2, r3, #2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff36 	bl	8002924 <LL_ADC_IsEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d136      	bne.n	8002b2c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a65      	ldr	r2, [pc, #404]	@ (8002c58 <HAL_ADC_Init+0x298>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_ADC_Init+0x112>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a63      	ldr	r2, [pc, #396]	@ (8002c5c <HAL_ADC_Init+0x29c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10e      	bne.n	8002af0 <HAL_ADC_Init+0x130>
 8002ad2:	4861      	ldr	r0, [pc, #388]	@ (8002c58 <HAL_ADC_Init+0x298>)
 8002ad4:	f7ff ff26 	bl	8002924 <LL_ADC_IsEnabled>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	4860      	ldr	r0, [pc, #384]	@ (8002c5c <HAL_ADC_Init+0x29c>)
 8002adc:	f7ff ff22 	bl	8002924 <LL_ADC_IsEnabled>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4323      	orrs	r3, r4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e008      	b.n	8002b02 <HAL_ADC_Init+0x142>
 8002af0:	485b      	ldr	r0, [pc, #364]	@ (8002c60 <HAL_ADC_Init+0x2a0>)
 8002af2:	f7ff ff17 	bl	8002924 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a53      	ldr	r2, [pc, #332]	@ (8002c58 <HAL_ADC_Init+0x298>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_ADC_Init+0x15a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a51      	ldr	r2, [pc, #324]	@ (8002c5c <HAL_ADC_Init+0x29c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Init+0x15e>
 8002b1a:	4a52      	ldr	r2, [pc, #328]	@ (8002c64 <HAL_ADC_Init+0x2a4>)
 8002b1c:	e000      	b.n	8002b20 <HAL_ADC_Init+0x160>
 8002b1e:	4a52      	ldr	r2, [pc, #328]	@ (8002c68 <HAL_ADC_Init+0x2a8>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f7ff fd62 	bl	80025f0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002b2c:	f7ff fd54 	bl	80025d8 <HAL_GetREVID>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d914      	bls.n	8002b64 <HAL_ADC_Init+0x1a4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d110      	bne.n	8002b64 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7d5b      	ldrb	r3, [r3, #21]
 8002b46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b4c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7f1b      	ldrb	r3, [r3, #28]
 8002b58:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b5a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b5c:	f043 030c 	orr.w	r3, r3, #12
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e00d      	b.n	8002b80 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7d5b      	ldrb	r3, [r3, #21]
 8002b68:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b6e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b74:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7f1b      	ldrb	r3, [r3, #28]
 8002b7a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7f1b      	ldrb	r3, [r3, #28]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d106      	bne.n	8002b96 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	045b      	lsls	r3, r3, #17
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c6c <HAL_ADC_Init+0x2ac>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fed2 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002bd0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fedf 	bl	800299a <LL_ADC_INJ_IsConversionOngoing>
 8002bdc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d15f      	bne.n	8002ca4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d15c      	bne.n	8002ca4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7d1b      	ldrb	r3, [r3, #20]
 8002bee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <HAL_ADC_Init+0x2b0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	69b9      	ldr	r1, [r7, #24]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d130      	bne.n	8002c78 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	4b14      	ldr	r3, [pc, #80]	@ (8002c74 <HAL_ADC_Init+0x2b4>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	0411      	lsls	r1, r2, #16
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c38:	4311      	orrs	r1, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	611a      	str	r2, [r3, #16]
 8002c4c:	e01c      	b.n	8002c88 <HAL_ADC_Init+0x2c8>
 8002c4e:	bf00      	nop
 8002c50:	24000004 	.word	0x24000004
 8002c54:	053e2d63 	.word	0x053e2d63
 8002c58:	40022000 	.word	0x40022000
 8002c5c:	40022100 	.word	0x40022100
 8002c60:	58026000 	.word	0x58026000
 8002c64:	40022300 	.word	0x40022300
 8002c68:	58026300 	.word	0x58026300
 8002c6c:	fff0c003 	.word	0xfff0c003
 8002c70:	ffffbffc 	.word	0xffffbffc
 8002c74:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fd8c 	bl	80037bc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10c      	bne.n	8002cc6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f023 010f 	bic.w	r1, r3, #15
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc4:	e007      	b.n	8002cd6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 020f 	bic.w	r2, r2, #15
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ce6:	e007      	b.n	8002cf8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	bf00      	nop

08002d04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a55      	ldr	r2, [pc, #340]	@ (8002e6c <HAL_ADC_Start_DMA+0x168>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_ADC_Start_DMA+0x20>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a54      	ldr	r2, [pc, #336]	@ (8002e70 <HAL_ADC_Start_DMA+0x16c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_Start_DMA+0x24>
 8002d24:	4b53      	ldr	r3, [pc, #332]	@ (8002e74 <HAL_ADC_Start_DMA+0x170>)
 8002d26:	e000      	b.n	8002d2a <HAL_ADC_Start_DMA+0x26>
 8002d28:	4b53      	ldr	r3, [pc, #332]	@ (8002e78 <HAL_ADC_Start_DMA+0x174>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fd8a 	bl	8002844 <LL_ADC_GetMultimode>
 8002d30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fe1c 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 808c 	bne.w	8002e5c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_Start_DMA+0x4e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e087      	b.n	8002e62 <HAL_ADC_Start_DMA+0x15e>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d002      	beq.n	8002d6c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b09      	cmp	r3, #9
 8002d6a:	d170      	bne.n	8002e4e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fc07 	bl	8003580 <ADC_Enable>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d163      	bne.n	8002e44 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d80:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <HAL_ADC_Start_DMA+0x178>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a37      	ldr	r2, [pc, #220]	@ (8002e70 <HAL_ADC_Start_DMA+0x16c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d002      	beq.n	8002d9c <HAL_ADC_Start_DMA+0x98>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e000      	b.n	8002d9e <HAL_ADC_Start_DMA+0x9a>
 8002d9c:	4b33      	ldr	r3, [pc, #204]	@ (8002e6c <HAL_ADC_Start_DMA+0x168>)
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d002      	beq.n	8002dac <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	f023 0206 	bic.w	r2, r3, #6
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd0:	e002      	b.n	8002dd8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ddc:	4a28      	ldr	r2, [pc, #160]	@ (8002e80 <HAL_ADC_Start_DMA+0x17c>)
 8002dde:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de4:	4a27      	ldr	r2, [pc, #156]	@ (8002e84 <HAL_ADC_Start_DMA+0x180>)
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dec:	4a26      	ldr	r2, [pc, #152]	@ (8002e88 <HAL_ADC_Start_DMA+0x184>)
 8002dee:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	221c      	movs	r2, #28
 8002df6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0210 	orr.w	r2, r2, #16
 8002e0e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f7ff fcaf 	bl	800277e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3340      	adds	r3, #64	@ 0x40
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f001 fb10 	bl	8004454 <HAL_DMA_Start_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fd85 	bl	800294c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e42:	e00d      	b.n	8002e60 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002e4c:	e008      	b.n	8002e60 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002e5a:	e001      	b.n	8002e60 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022100 	.word	0x40022100
 8002e74:	40022300 	.word	0x40022300
 8002e78:	58026300 	.word	0x58026300
 8002e7c:	fffff0fe 	.word	0xfffff0fe
 8002e80:	08003695 	.word	0x08003695
 8002e84:	0800376d 	.word	0x0800376d
 8002e88:	08003789 	.word	0x08003789

08002e8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b0a1      	sub	sp, #132	@ 0x84
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a65      	ldr	r2, [pc, #404]	@ (8003078 <HAL_ADC_ConfigChannel+0x1b0>)
 8002ee2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x2a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e32e      	b.n	8003550 <HAL_ADC_ConfigChannel+0x688>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fd38 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 8313 	bne.w	8003532 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db2c      	blt.n	8002f6e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x6a>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	e016      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x98>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f42:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e003      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	69d1      	ldr	r1, [r2, #28]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f7ff fbd3 	bl	8002726 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fcf5 	bl	8002974 <LL_ADC_REG_IsConversionOngoing>
 8002f8a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fd02 	bl	800299a <LL_ADC_INJ_IsConversionOngoing>
 8002f96:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 80b8 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 80b4 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f7ff fbf5 	bl	80027a4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fba:	4b30      	ldr	r3, [pc, #192]	@ (800307c <HAL_ADC_ConfigChannel+0x1b4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x118>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	e01d      	b.n	800301c <HAL_ADC_ConfigChannel+0x154>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x13e>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	e00a      	b.n	800301c <HAL_ADC_ConfigChannel+0x154>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d02c      	beq.n	8003080 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6919      	ldr	r1, [r3, #16]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003034:	f7ff fb10 	bl	8002658 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6919      	ldr	r1, [r3, #16]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	7e5b      	ldrb	r3, [r3, #25]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_ADC_ConfigChannel+0x186>
 8003048:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800304c:	e000      	b.n	8003050 <HAL_ADC_ConfigChannel+0x188>
 800304e:	2300      	movs	r3, #0
 8003050:	461a      	mov	r2, r3
 8003052:	f7ff fb3a 	bl	80026ca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	7e1b      	ldrb	r3, [r3, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d102      	bne.n	800306c <HAL_ADC_ConfigChannel+0x1a4>
 8003066:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800306a:	e000      	b.n	800306e <HAL_ADC_ConfigChannel+0x1a6>
 800306c:	2300      	movs	r3, #0
 800306e:	461a      	mov	r2, r3
 8003070:	f7ff fb12 	bl	8002698 <LL_ADC_SetDataRightShift>
 8003074:	e04c      	b.n	8003110 <HAL_ADC_ConfigChannel+0x248>
 8003076:	bf00      	nop
 8003078:	47ff0000 	.word	0x47ff0000
 800307c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003086:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030a2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030c6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	069b      	lsls	r3, r3, #26
 80030d8:	429a      	cmp	r2, r3
 80030da:	d107      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030ea:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	069b      	lsls	r3, r3, #26
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d107      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800310e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fc05 	bl	8002924 <LL_ADC_IsEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 8211 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	461a      	mov	r2, r3
 8003130:	f7ff fb64 	bl	80027fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4aa1      	ldr	r2, [pc, #644]	@ (80033c0 <HAL_ADC_ConfigChannel+0x4f8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f040 812e 	bne.w	800339c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x2a0>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	0e9b      	lsrs	r3, r3, #26
 8003156:	3301      	adds	r3, #1
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2b09      	cmp	r3, #9
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e019      	b.n	800319c <HAL_ADC_ConfigChannel+0x2d4>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800317a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e003      	b.n	800318c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2b09      	cmp	r3, #9
 8003194:	bf94      	ite	ls
 8003196:	2301      	movls	r3, #1
 8003198:	2300      	movhi	r3, #0
 800319a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800319c:	2b00      	cmp	r3, #0
 800319e:	d079      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x2f4>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	3301      	adds	r3, #1
 80031b4:	069b      	lsls	r3, r3, #26
 80031b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031ba:	e015      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x320>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80031d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	069b      	lsls	r3, r3, #26
 80031e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x340>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	3301      	adds	r3, #1
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	e017      	b.n	8003238 <HAL_ADC_ConfigChannel+0x370>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003218:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800321a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e003      	b.n	800322c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2101      	movs	r1, #1
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	ea42 0103 	orr.w	r1, r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_ADC_ConfigChannel+0x396>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	3301      	adds	r3, #1
 8003250:	f003 021f 	and.w	r2, r3, #31
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	051b      	lsls	r3, r3, #20
 800325c:	e018      	b.n	8003290 <HAL_ADC_ConfigChannel+0x3c8>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003276:	2320      	movs	r3, #32
 8003278:	e003      	b.n	8003282 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003290:	430b      	orrs	r3, r1
 8003292:	e07e      	b.n	8003392 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x3e8>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	069b      	lsls	r3, r3, #26
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ae:	e015      	b.n	80032dc <HAL_ADC_ConfigChannel+0x414>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80032c8:	2320      	movs	r3, #32
 80032ca:	e003      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80032cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x434>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	3301      	adds	r3, #1
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	e017      	b.n	800332c <HAL_ADC_ConfigChannel+0x464>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	61bb      	str	r3, [r7, #24]
  return result;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003314:	2320      	movs	r3, #32
 8003316:	e003      	b.n	8003320 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	3301      	adds	r3, #1
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	ea42 0103 	orr.w	r1, r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x490>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	3301      	adds	r3, #1
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	3b1e      	subs	r3, #30
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003356:	e01b      	b.n	8003390 <HAL_ADC_ConfigChannel+0x4c8>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	60fb      	str	r3, [r7, #12]
  return result;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e003      	b.n	800337c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f003 021f 	and.w	r2, r3, #31
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	3b1e      	subs	r3, #30
 800338a:	051b      	lsls	r3, r3, #20
 800338c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003390:	430b      	orrs	r3, r1
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	4619      	mov	r1, r3
 8003398:	f7ff fa04 	bl	80027a4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f280 80cf 	bge.w	8003544 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a06      	ldr	r2, [pc, #24]	@ (80033c4 <HAL_ADC_ConfigChannel+0x4fc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_ADC_ConfigChannel+0x4f2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a04      	ldr	r2, [pc, #16]	@ (80033c8 <HAL_ADC_ConfigChannel+0x500>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d10a      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x508>
 80033ba:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <HAL_ADC_ConfigChannel+0x504>)
 80033bc:	e009      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x50a>
 80033be:	bf00      	nop
 80033c0:	47ff0000 	.word	0x47ff0000
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40022100 	.word	0x40022100
 80033cc:	40022300 	.word	0x40022300
 80033d0:	4b61      	ldr	r3, [pc, #388]	@ (8003558 <HAL_ADC_ConfigChannel+0x690>)
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f932 	bl	800263c <LL_ADC_GetCommonPathInternalCh>
 80033d8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5f      	ldr	r2, [pc, #380]	@ (800355c <HAL_ADC_ConfigChannel+0x694>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x526>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003560 <HAL_ADC_ConfigChannel+0x698>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10e      	bne.n	800340c <HAL_ADC_ConfigChannel+0x544>
 80033ee:	485b      	ldr	r0, [pc, #364]	@ (800355c <HAL_ADC_ConfigChannel+0x694>)
 80033f0:	f7ff fa98 	bl	8002924 <LL_ADC_IsEnabled>
 80033f4:	4604      	mov	r4, r0
 80033f6:	485a      	ldr	r0, [pc, #360]	@ (8003560 <HAL_ADC_ConfigChannel+0x698>)
 80033f8:	f7ff fa94 	bl	8002924 <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	4323      	orrs	r3, r4
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e008      	b.n	800341e <HAL_ADC_ConfigChannel+0x556>
 800340c:	4855      	ldr	r0, [pc, #340]	@ (8003564 <HAL_ADC_ConfigChannel+0x69c>)
 800340e:	f7ff fa89 	bl	8002924 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d07d      	beq.n	800351e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a50      	ldr	r2, [pc, #320]	@ (8003568 <HAL_ADC_ConfigChannel+0x6a0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d130      	bne.n	800348e <HAL_ADC_ConfigChannel+0x5c6>
 800342c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800342e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12b      	bne.n	800348e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a4a      	ldr	r2, [pc, #296]	@ (8003564 <HAL_ADC_ConfigChannel+0x69c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	f040 8081 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a45      	ldr	r2, [pc, #276]	@ (800355c <HAL_ADC_ConfigChannel+0x694>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x58e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <HAL_ADC_ConfigChannel+0x698>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x592>
 8003456:	4a45      	ldr	r2, [pc, #276]	@ (800356c <HAL_ADC_ConfigChannel+0x6a4>)
 8003458:	e000      	b.n	800345c <HAL_ADC_ConfigChannel+0x594>
 800345a:	4a3f      	ldr	r2, [pc, #252]	@ (8003558 <HAL_ADC_ConfigChannel+0x690>)
 800345c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800345e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f7ff f8d6 	bl	8002616 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800346a:	4b41      	ldr	r3, [pc, #260]	@ (8003570 <HAL_ADC_ConfigChannel+0x6a8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	4a40      	ldr	r2, [pc, #256]	@ (8003574 <HAL_ADC_ConfigChannel+0x6ac>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	3301      	adds	r3, #1
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800347e:	e002      	b.n	8003486 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3b01      	subs	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800348c:	e05a      	b.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a39      	ldr	r2, [pc, #228]	@ (8003578 <HAL_ADC_ConfigChannel+0x6b0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d11e      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x60e>
 8003498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800349a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d119      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003564 <HAL_ADC_ConfigChannel+0x69c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d14b      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2a      	ldr	r2, [pc, #168]	@ (800355c <HAL_ADC_ConfigChannel+0x694>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_ADC_ConfigChannel+0x5f8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a29      	ldr	r2, [pc, #164]	@ (8003560 <HAL_ADC_ConfigChannel+0x698>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x5fc>
 80034c0:	4a2a      	ldr	r2, [pc, #168]	@ (800356c <HAL_ADC_ConfigChannel+0x6a4>)
 80034c2:	e000      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x5fe>
 80034c4:	4a24      	ldr	r2, [pc, #144]	@ (8003558 <HAL_ADC_ConfigChannel+0x690>)
 80034c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7ff f8a1 	bl	8002616 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d4:	e036      	b.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a28      	ldr	r2, [pc, #160]	@ (800357c <HAL_ADC_ConfigChannel+0x6b4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d131      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
 80034e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d12c      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <HAL_ADC_ConfigChannel+0x69c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d127      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a18      	ldr	r2, [pc, #96]	@ (800355c <HAL_ADC_ConfigChannel+0x694>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x640>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_ADC_ConfigChannel+0x698>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x644>
 8003508:	4a18      	ldr	r2, [pc, #96]	@ (800356c <HAL_ADC_ConfigChannel+0x6a4>)
 800350a:	e000      	b.n	800350e <HAL_ADC_ConfigChannel+0x646>
 800350c:	4a12      	ldr	r2, [pc, #72]	@ (8003558 <HAL_ADC_ConfigChannel+0x690>)
 800350e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7ff f87d 	bl	8002616 <LL_ADC_SetCommonPathInternalCh>
 800351c:	e012      	b.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003530:	e008      	b.n	8003544 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800354c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003550:	4618      	mov	r0, r3
 8003552:	3784      	adds	r7, #132	@ 0x84
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	58026300 	.word	0x58026300
 800355c:	40022000 	.word	0x40022000
 8003560:	40022100 	.word	0x40022100
 8003564:	58026000 	.word	0x58026000
 8003568:	cb840000 	.word	0xcb840000
 800356c:	40022300 	.word	0x40022300
 8003570:	24000004 	.word	0x24000004
 8003574:	053e2d63 	.word	0x053e2d63
 8003578:	c7520000 	.word	0xc7520000
 800357c:	cfb80000 	.word	0xcfb80000

08003580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f9c9 	bl	8002924 <LL_ADC_IsEnabled>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d16e      	bne.n	8003676 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	4b38      	ldr	r3, [pc, #224]	@ (8003680 <ADC_Enable+0x100>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	f043 0210 	orr.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e05a      	b.n	8003678 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f998 	bl	80028fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035cc:	f7fe fff8 	bl	80025c0 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <ADC_Enable+0x104>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <ADC_Enable+0x66>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a29      	ldr	r2, [pc, #164]	@ (8003688 <ADC_Enable+0x108>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <ADC_Enable+0x6a>
 80035e6:	4b29      	ldr	r3, [pc, #164]	@ (800368c <ADC_Enable+0x10c>)
 80035e8:	e000      	b.n	80035ec <ADC_Enable+0x6c>
 80035ea:	4b29      	ldr	r3, [pc, #164]	@ (8003690 <ADC_Enable+0x110>)
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f929 	bl	8002844 <LL_ADC_GetMultimode>
 80035f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <ADC_Enable+0x108>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d002      	beq.n	8003604 <ADC_Enable+0x84>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e000      	b.n	8003606 <ADC_Enable+0x86>
 8003604:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <ADC_Enable+0x104>)
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	4293      	cmp	r3, r2
 800360c:	d02c      	beq.n	8003668 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d130      	bne.n	8003676 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003614:	e028      	b.n	8003668 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f982 	bl	8002924 <LL_ADC_IsEnabled>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f966 	bl	80028fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003630:	f7fe ffc6 	bl	80025c0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d914      	bls.n	8003668 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d00d      	beq.n	8003668 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d1cf      	bne.n	8003616 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	8000003f 	.word	0x8000003f
 8003684:	40022000 	.word	0x40022000
 8003688:	40022100 	.word	0x40022100
 800368c:	40022300 	.word	0x40022300
 8003690:	58026300 	.word	0x58026300

08003694 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d14b      	bne.n	8003746 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d021      	beq.n	800370c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff f817 	bl	8002700 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d032      	beq.n	800373e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d12b      	bne.n	800373e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11f      	bne.n	800373e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54
 800370a:	e018      	b.n	800373e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d111      	bne.n	800373e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff fba4 	bl	8002e8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003744:	e00e      	b.n	8003764 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff fbae 	bl	8002eb4 <HAL_ADC_ErrorCallback>
}
 8003758:	e004      	b.n	8003764 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003778:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fb90 	bl	8002ea0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f7ff fb80 	bl	8002eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	@ (80039b4 <ADC_ConfigureBoostMode+0x1f8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <ADC_ConfigureBoostMode+0x1c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a79      	ldr	r2, [pc, #484]	@ (80039b8 <ADC_ConfigureBoostMode+0x1fc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d109      	bne.n	80037ec <ADC_ConfigureBoostMode+0x30>
 80037d8:	4b78      	ldr	r3, [pc, #480]	@ (80039bc <ADC_ConfigureBoostMode+0x200>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e008      	b.n	80037fe <ADC_ConfigureBoostMode+0x42>
 80037ec:	4b74      	ldr	r3, [pc, #464]	@ (80039c0 <ADC_ConfigureBoostMode+0x204>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01c      	beq.n	800383c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003802:	f004 fac5 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8003806:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003810:	d010      	beq.n	8003834 <ADC_ConfigureBoostMode+0x78>
 8003812:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003816:	d873      	bhi.n	8003900 <ADC_ConfigureBoostMode+0x144>
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381c:	d002      	beq.n	8003824 <ADC_ConfigureBoostMode+0x68>
 800381e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003822:	d16d      	bne.n	8003900 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	60fb      	str	r3, [r7, #12]
        break;
 8003832:	e068      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	60fb      	str	r3, [r7, #12]
        break;
 800383a:	e064      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800383c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003840:	f04f 0100 	mov.w	r1, #0
 8003844:	f005 fd4c 	bl	80092e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003848:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003852:	d051      	beq.n	80038f8 <ADC_ConfigureBoostMode+0x13c>
 8003854:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003858:	d854      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 800385a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800385e:	d047      	beq.n	80038f0 <ADC_ConfigureBoostMode+0x134>
 8003860:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003864:	d84e      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 8003866:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800386a:	d03d      	beq.n	80038e8 <ADC_ConfigureBoostMode+0x12c>
 800386c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003870:	d848      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 8003872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003876:	d033      	beq.n	80038e0 <ADC_ConfigureBoostMode+0x124>
 8003878:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800387c:	d842      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 800387e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003882:	d029      	beq.n	80038d8 <ADC_ConfigureBoostMode+0x11c>
 8003884:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003888:	d83c      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 800388a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800388e:	d01a      	beq.n	80038c6 <ADC_ConfigureBoostMode+0x10a>
 8003890:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003894:	d836      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 8003896:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800389a:	d014      	beq.n	80038c6 <ADC_ConfigureBoostMode+0x10a>
 800389c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80038a0:	d830      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 80038a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a6:	d00e      	beq.n	80038c6 <ADC_ConfigureBoostMode+0x10a>
 80038a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ac:	d82a      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 80038ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038b2:	d008      	beq.n	80038c6 <ADC_ConfigureBoostMode+0x10a>
 80038b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038b8:	d824      	bhi.n	8003904 <ADC_ConfigureBoostMode+0x148>
 80038ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038be:	d002      	beq.n	80038c6 <ADC_ConfigureBoostMode+0x10a>
 80038c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038c4:	d11e      	bne.n	8003904 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0c9b      	lsrs	r3, r3, #18
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	60fb      	str	r3, [r7, #12]
        break;
 80038d6:	e016      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
        break;
 80038de:	e012      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	60fb      	str	r3, [r7, #12]
        break;
 80038e6:	e00e      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	099b      	lsrs	r3, r3, #6
 80038ec:	60fb      	str	r3, [r7, #12]
        break;
 80038ee:	e00a      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	09db      	lsrs	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
        break;
 80038f6:	e006      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	60fb      	str	r3, [r7, #12]
        break;
 80038fe:	e002      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003904:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003906:	f7fe fe67 	bl	80025d8 <HAL_GetREVID>
 800390a:	4603      	mov	r3, r0
 800390c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003910:	4293      	cmp	r3, r2
 8003912:	d815      	bhi.n	8003940 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <ADC_ConfigureBoostMode+0x208>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d908      	bls.n	800392e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800392a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800392c:	e03e      	b.n	80039ac <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800393c:	609a      	str	r2, [r3, #8]
}
 800393e:	e035      	b.n	80039ac <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a1f      	ldr	r2, [pc, #124]	@ (80039c8 <ADC_ConfigureBoostMode+0x20c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d808      	bhi.n	8003960 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800395c:	609a      	str	r2, [r3, #8]
}
 800395e:	e025      	b.n	80039ac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a1a      	ldr	r2, [pc, #104]	@ (80039cc <ADC_ConfigureBoostMode+0x210>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d80a      	bhi.n	800397e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	e016      	b.n	80039ac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <ADC_ConfigureBoostMode+0x214>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d80a      	bhi.n	800399c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003998:	609a      	str	r2, [r3, #8]
}
 800399a:	e007      	b.n	80039ac <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40022100 	.word	0x40022100
 80039bc:	40022300 	.word	0x40022300
 80039c0:	58026300 	.word	0x58026300
 80039c4:	01312d00 	.word	0x01312d00
 80039c8:	005f5e10 	.word	0x005f5e10
 80039cc:	00bebc20 	.word	0x00bebc20
 80039d0:	017d7840 	.word	0x017d7840

080039d4 <LL_ADC_IsEnabled>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <LL_ADC_IsEnabled+0x18>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <LL_ADC_IsEnabled+0x1a>
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_REG_IsConversionOngoing>:
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d101      	bne.n	8003a12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b09f      	sub	sp, #124	@ 0x7c
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0be      	b.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5c      	ldr	r2, [pc, #368]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a58:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	e001      	b.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e09d      	b.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ffb9 	bl	80039fa <LL_ADC_REG_IsConversionOngoing>
 8003a88:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ffb3 	bl	80039fa <LL_ADC_REG_IsConversionOngoing>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d17f      	bne.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d17c      	bne.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a47      	ldr	r2, [pc, #284]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a46      	ldr	r2, [pc, #280]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003ab4:	4b45      	ldr	r3, [pc, #276]	@ (8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ab6:	e000      	b.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003ab8:	4b45      	ldr	r3, [pc, #276]	@ (8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003aba:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d039      	beq.n	8003b38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a38      	ldr	r2, [pc, #224]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10e      	bne.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003aea:	4836      	ldr	r0, [pc, #216]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003aec:	f7ff ff72 	bl	80039d4 <LL_ADC_IsEnabled>
 8003af0:	4604      	mov	r4, r0
 8003af2:	4835      	ldr	r0, [pc, #212]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003af4:	f7ff ff6e 	bl	80039d4 <LL_ADC_IsEnabled>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4323      	orrs	r3, r4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e008      	b.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003b08:	4832      	ldr	r0, [pc, #200]	@ (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b0a:	f7ff ff63 	bl	80039d4 <LL_ADC_IsEnabled>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d047      	beq.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6811      	ldr	r1, [r2, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	6892      	ldr	r2, [r2, #8]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b34:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b36:	e03a      	b.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10e      	bne.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003b58:	481a      	ldr	r0, [pc, #104]	@ (8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b5a:	f7ff ff3b 	bl	80039d4 <LL_ADC_IsEnabled>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4819      	ldr	r0, [pc, #100]	@ (8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b62:	f7ff ff37 	bl	80039d4 <LL_ADC_IsEnabled>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4323      	orrs	r3, r4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e008      	b.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b76:	4817      	ldr	r0, [pc, #92]	@ (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b78:	f7ff ff2c 	bl	80039d4 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bf0c      	ite	eq
 8003b82:	2301      	moveq	r3, #1
 8003b84:	2300      	movne	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d010      	beq.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b96:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b98:	e009      	b.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003bac:	e000      	b.n	8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bb8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	377c      	adds	r7, #124	@ 0x7c
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd90      	pop	{r4, r7, pc}
 8003bc4:	40022000 	.word	0x40022000
 8003bc8:	40022100 	.word	0x40022100
 8003bcc:	40022300 	.word	0x40022300
 8003bd0:	58026300 	.word	0x58026300
 8003bd4:	58026000 	.word	0x58026000
 8003bd8:	fffff0e0 	.word	0xfffff0e0

08003bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <__NVIC_SetPriorityGrouping+0x40>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0a:	4a04      	ldr	r2, [pc, #16]	@ (8003c1c <__NVIC_SetPriorityGrouping+0x40>)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	60d3      	str	r3, [r2, #12]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00
 8003c20:	05fa0000 	.word	0x05fa0000

08003c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <__NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f003 0307 	and.w	r3, r3, #7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db0b      	blt.n	8003c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4907      	ldr	r1, [pc, #28]	@ (8003c78 <__NVIC_EnableIRQ+0x38>)
 8003c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2001      	movs	r0, #1
 8003c62:	fa00 f202 	lsl.w	r2, r0, r2
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	@ (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	@ (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	@ 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	@ 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ff4c 	bl	8003bdc <__NVIC_SetPriorityGrouping>
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d5a:	f7ff ff63 	bl	8003c24 <__NVIC_GetPriorityGrouping>
 8003d5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	6978      	ldr	r0, [r7, #20]
 8003d66:	f7ff ffb3 	bl	8003cd0 <NVIC_EncodePriority>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff82 	bl	8003c7c <__NVIC_SetPriority>
}
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff56 	bl	8003c40 <__NVIC_EnableIRQ>
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7fe fc0c 	bl	80025c0 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e316      	b.n	80043e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a66      	ldr	r2, [pc, #408]	@ (8003f54 <HAL_DMA_Init+0x1b8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d04a      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a65      	ldr	r2, [pc, #404]	@ (8003f58 <HAL_DMA_Init+0x1bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d045      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a63      	ldr	r2, [pc, #396]	@ (8003f5c <HAL_DMA_Init+0x1c0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d040      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a62      	ldr	r2, [pc, #392]	@ (8003f60 <HAL_DMA_Init+0x1c4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d03b      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a60      	ldr	r2, [pc, #384]	@ (8003f64 <HAL_DMA_Init+0x1c8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d036      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a5f      	ldr	r2, [pc, #380]	@ (8003f68 <HAL_DMA_Init+0x1cc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d031      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f6c <HAL_DMA_Init+0x1d0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d02c      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8003f70 <HAL_DMA_Init+0x1d4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d027      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5a      	ldr	r2, [pc, #360]	@ (8003f74 <HAL_DMA_Init+0x1d8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a59      	ldr	r2, [pc, #356]	@ (8003f78 <HAL_DMA_Init+0x1dc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01d      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a57      	ldr	r2, [pc, #348]	@ (8003f7c <HAL_DMA_Init+0x1e0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a56      	ldr	r2, [pc, #344]	@ (8003f80 <HAL_DMA_Init+0x1e4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a54      	ldr	r2, [pc, #336]	@ (8003f84 <HAL_DMA_Init+0x1e8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a53      	ldr	r2, [pc, #332]	@ (8003f88 <HAL_DMA_Init+0x1ec>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a51      	ldr	r2, [pc, #324]	@ (8003f8c <HAL_DMA_Init+0x1f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_DMA_Init+0xb8>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a50      	ldr	r2, [pc, #320]	@ (8003f90 <HAL_DMA_Init+0x1f4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d101      	bne.n	8003e58 <HAL_DMA_Init+0xbc>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_DMA_Init+0xbe>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 813b 	beq.w	80040d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a37      	ldr	r2, [pc, #220]	@ (8003f54 <HAL_DMA_Init+0x1b8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04a      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a36      	ldr	r2, [pc, #216]	@ (8003f58 <HAL_DMA_Init+0x1bc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d045      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a34      	ldr	r2, [pc, #208]	@ (8003f5c <HAL_DMA_Init+0x1c0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a33      	ldr	r2, [pc, #204]	@ (8003f60 <HAL_DMA_Init+0x1c4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d03b      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a31      	ldr	r2, [pc, #196]	@ (8003f64 <HAL_DMA_Init+0x1c8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a30      	ldr	r2, [pc, #192]	@ (8003f68 <HAL_DMA_Init+0x1cc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f6c <HAL_DMA_Init+0x1d0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2d      	ldr	r2, [pc, #180]	@ (8003f70 <HAL_DMA_Init+0x1d4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d027      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f74 <HAL_DMA_Init+0x1d8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2a      	ldr	r2, [pc, #168]	@ (8003f78 <HAL_DMA_Init+0x1dc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a28      	ldr	r2, [pc, #160]	@ (8003f7c <HAL_DMA_Init+0x1e0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a27      	ldr	r2, [pc, #156]	@ (8003f80 <HAL_DMA_Init+0x1e4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a25      	ldr	r2, [pc, #148]	@ (8003f84 <HAL_DMA_Init+0x1e8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a24      	ldr	r2, [pc, #144]	@ (8003f88 <HAL_DMA_Init+0x1ec>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a22      	ldr	r2, [pc, #136]	@ (8003f8c <HAL_DMA_Init+0x1f0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_Init+0x174>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <HAL_DMA_Init+0x1f4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <HAL_DMA_Init+0x186>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e007      	b.n	8003f32 <HAL_DMA_Init+0x196>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f32:	e02f      	b.n	8003f94 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f34:	f7fe fb44 	bl	80025c0 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d928      	bls.n	8003f94 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e246      	b.n	80043e2 <HAL_DMA_Init+0x646>
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1c8      	bne.n	8003f34 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4b83      	ldr	r3, [pc, #524]	@ (80041bc <HAL_DMA_Init+0x420>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003fba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d107      	bne.n	8003ff8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003ff8:	4b71      	ldr	r3, [pc, #452]	@ (80041c0 <HAL_DMA_Init+0x424>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b71      	ldr	r3, [pc, #452]	@ (80041c4 <HAL_DMA_Init+0x428>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004004:	d328      	bcc.n	8004058 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b28      	cmp	r3, #40	@ 0x28
 800400c:	d903      	bls.n	8004016 <HAL_DMA_Init+0x27a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b2e      	cmp	r3, #46	@ 0x2e
 8004014:	d917      	bls.n	8004046 <HAL_DMA_Init+0x2aa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b3e      	cmp	r3, #62	@ 0x3e
 800401c:	d903      	bls.n	8004026 <HAL_DMA_Init+0x28a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b42      	cmp	r3, #66	@ 0x42
 8004024:	d90f      	bls.n	8004046 <HAL_DMA_Init+0x2aa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b46      	cmp	r3, #70	@ 0x46
 800402c:	d903      	bls.n	8004036 <HAL_DMA_Init+0x29a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b48      	cmp	r3, #72	@ 0x48
 8004034:	d907      	bls.n	8004046 <HAL_DMA_Init+0x2aa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b4e      	cmp	r3, #78	@ 0x4e
 800403c:	d905      	bls.n	800404a <HAL_DMA_Init+0x2ae>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b52      	cmp	r3, #82	@ 0x52
 8004044:	d801      	bhi.n	800404a <HAL_DMA_Init+0x2ae>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_DMA_Init+0x2b0>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004056:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	2b04      	cmp	r3, #4
 8004080:	d117      	bne.n	80040b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f002 fb3f 	bl	8006718 <DMA_CheckFifoParam>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e197      	b.n	80043e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f002 fa7a 	bl	80065b4 <DMA_CalcBaseAndBitshift>
 80040c0:	4603      	mov	r3, r0
 80040c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	223f      	movs	r2, #63	@ 0x3f
 80040ce:	409a      	lsls	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	e0cd      	b.n	8004272 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3b      	ldr	r2, [pc, #236]	@ (80041c8 <HAL_DMA_Init+0x42c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d022      	beq.n	8004126 <HAL_DMA_Init+0x38a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a39      	ldr	r2, [pc, #228]	@ (80041cc <HAL_DMA_Init+0x430>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01d      	beq.n	8004126 <HAL_DMA_Init+0x38a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a38      	ldr	r2, [pc, #224]	@ (80041d0 <HAL_DMA_Init+0x434>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d018      	beq.n	8004126 <HAL_DMA_Init+0x38a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <HAL_DMA_Init+0x438>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_DMA_Init+0x38a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a35      	ldr	r2, [pc, #212]	@ (80041d8 <HAL_DMA_Init+0x43c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_DMA_Init+0x38a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a33      	ldr	r2, [pc, #204]	@ (80041dc <HAL_DMA_Init+0x440>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_DMA_Init+0x38a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a32      	ldr	r2, [pc, #200]	@ (80041e0 <HAL_DMA_Init+0x444>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_DMA_Init+0x38a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a30      	ldr	r2, [pc, #192]	@ (80041e4 <HAL_DMA_Init+0x448>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d101      	bne.n	800412a <HAL_DMA_Init+0x38e>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_DMA_Init+0x390>
 800412a:	2300      	movs	r3, #0
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8097 	beq.w	8004260 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a24      	ldr	r2, [pc, #144]	@ (80041c8 <HAL_DMA_Init+0x42c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d021      	beq.n	8004180 <HAL_DMA_Init+0x3e4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a22      	ldr	r2, [pc, #136]	@ (80041cc <HAL_DMA_Init+0x430>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01c      	beq.n	8004180 <HAL_DMA_Init+0x3e4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a21      	ldr	r2, [pc, #132]	@ (80041d0 <HAL_DMA_Init+0x434>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d017      	beq.n	8004180 <HAL_DMA_Init+0x3e4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1f      	ldr	r2, [pc, #124]	@ (80041d4 <HAL_DMA_Init+0x438>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d012      	beq.n	8004180 <HAL_DMA_Init+0x3e4>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <HAL_DMA_Init+0x43c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00d      	beq.n	8004180 <HAL_DMA_Init+0x3e4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1c      	ldr	r2, [pc, #112]	@ (80041dc <HAL_DMA_Init+0x440>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d008      	beq.n	8004180 <HAL_DMA_Init+0x3e4>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <HAL_DMA_Init+0x444>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <HAL_DMA_Init+0x3e4>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a19      	ldr	r2, [pc, #100]	@ (80041e4 <HAL_DMA_Init+0x448>)
 800417e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <HAL_DMA_Init+0x44c>)
 800419c:	4013      	ands	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b40      	cmp	r3, #64	@ 0x40
 80041a6:	d021      	beq.n	80041ec <HAL_DMA_Init+0x450>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b80      	cmp	r3, #128	@ 0x80
 80041ae:	d102      	bne.n	80041b6 <HAL_DMA_Init+0x41a>
 80041b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041b4:	e01b      	b.n	80041ee <HAL_DMA_Init+0x452>
 80041b6:	2300      	movs	r3, #0
 80041b8:	e019      	b.n	80041ee <HAL_DMA_Init+0x452>
 80041ba:	bf00      	nop
 80041bc:	fe10803f 	.word	0xfe10803f
 80041c0:	5c001000 	.word	0x5c001000
 80041c4:	ffff0000 	.word	0xffff0000
 80041c8:	58025408 	.word	0x58025408
 80041cc:	5802541c 	.word	0x5802541c
 80041d0:	58025430 	.word	0x58025430
 80041d4:	58025444 	.word	0x58025444
 80041d8:	58025458 	.word	0x58025458
 80041dc:	5802546c 	.word	0x5802546c
 80041e0:	58025480 	.word	0x58025480
 80041e4:	58025494 	.word	0x58025494
 80041e8:	fffe000f 	.word	0xfffe000f
 80041ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68d2      	ldr	r2, [r2, #12]
 80041f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800420c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004214:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800421c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	4b6e      	ldr	r3, [pc, #440]	@ (80043ec <HAL_DMA_Init+0x650>)
 8004234:	4413      	add	r3, r2
 8004236:	4a6e      	ldr	r2, [pc, #440]	@ (80043f0 <HAL_DMA_Init+0x654>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	009a      	lsls	r2, r3, #2
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f002 f9b5 	bl	80065b4 <DMA_CalcBaseAndBitshift>
 800424a:	4603      	mov	r3, r0
 800424c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	e008      	b.n	8004272 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2240      	movs	r2, #64	@ 0x40
 8004264:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2203      	movs	r2, #3
 800426a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0b7      	b.n	80043e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5f      	ldr	r2, [pc, #380]	@ (80043f4 <HAL_DMA_Init+0x658>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d072      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a5d      	ldr	r2, [pc, #372]	@ (80043f8 <HAL_DMA_Init+0x65c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d06d      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a5c      	ldr	r2, [pc, #368]	@ (80043fc <HAL_DMA_Init+0x660>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d068      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5a      	ldr	r2, [pc, #360]	@ (8004400 <HAL_DMA_Init+0x664>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d063      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a59      	ldr	r2, [pc, #356]	@ (8004404 <HAL_DMA_Init+0x668>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d05e      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a57      	ldr	r2, [pc, #348]	@ (8004408 <HAL_DMA_Init+0x66c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d059      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a56      	ldr	r2, [pc, #344]	@ (800440c <HAL_DMA_Init+0x670>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d054      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a54      	ldr	r2, [pc, #336]	@ (8004410 <HAL_DMA_Init+0x674>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d04f      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a53      	ldr	r2, [pc, #332]	@ (8004414 <HAL_DMA_Init+0x678>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d04a      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a51      	ldr	r2, [pc, #324]	@ (8004418 <HAL_DMA_Init+0x67c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d045      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a50      	ldr	r2, [pc, #320]	@ (800441c <HAL_DMA_Init+0x680>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d040      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004420 <HAL_DMA_Init+0x684>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d03b      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a4d      	ldr	r2, [pc, #308]	@ (8004424 <HAL_DMA_Init+0x688>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d036      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004428 <HAL_DMA_Init+0x68c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d031      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a4a      	ldr	r2, [pc, #296]	@ (800442c <HAL_DMA_Init+0x690>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d02c      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a48      	ldr	r2, [pc, #288]	@ (8004430 <HAL_DMA_Init+0x694>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d027      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a47      	ldr	r2, [pc, #284]	@ (8004434 <HAL_DMA_Init+0x698>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a45      	ldr	r2, [pc, #276]	@ (8004438 <HAL_DMA_Init+0x69c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01d      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a44      	ldr	r2, [pc, #272]	@ (800443c <HAL_DMA_Init+0x6a0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a42      	ldr	r2, [pc, #264]	@ (8004440 <HAL_DMA_Init+0x6a4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a41      	ldr	r2, [pc, #260]	@ (8004444 <HAL_DMA_Init+0x6a8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3f      	ldr	r2, [pc, #252]	@ (8004448 <HAL_DMA_Init+0x6ac>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a3e      	ldr	r2, [pc, #248]	@ (800444c <HAL_DMA_Init+0x6b0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_DMA_Init+0x5c6>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3c      	ldr	r2, [pc, #240]	@ (8004450 <HAL_DMA_Init+0x6b4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_DMA_Init+0x5ca>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_DMA_Init+0x5cc>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d032      	beq.n	80043d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f002 fa4f 	bl	8006810 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d102      	bne.n	8004380 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004394:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d010      	beq.n	80043c0 <HAL_DMA_Init+0x624>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d80c      	bhi.n	80043c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f002 facc 	bl	8006944 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	e008      	b.n	80043d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	a7fdabf8 	.word	0xa7fdabf8
 80043f0:	cccccccd 	.word	0xcccccccd
 80043f4:	40020010 	.word	0x40020010
 80043f8:	40020028 	.word	0x40020028
 80043fc:	40020040 	.word	0x40020040
 8004400:	40020058 	.word	0x40020058
 8004404:	40020070 	.word	0x40020070
 8004408:	40020088 	.word	0x40020088
 800440c:	400200a0 	.word	0x400200a0
 8004410:	400200b8 	.word	0x400200b8
 8004414:	40020410 	.word	0x40020410
 8004418:	40020428 	.word	0x40020428
 800441c:	40020440 	.word	0x40020440
 8004420:	40020458 	.word	0x40020458
 8004424:	40020470 	.word	0x40020470
 8004428:	40020488 	.word	0x40020488
 800442c:	400204a0 	.word	0x400204a0
 8004430:	400204b8 	.word	0x400204b8
 8004434:	58025408 	.word	0x58025408
 8004438:	5802541c 	.word	0x5802541c
 800443c:	58025430 	.word	0x58025430
 8004440:	58025444 	.word	0x58025444
 8004444:	58025458 	.word	0x58025458
 8004448:	5802546c 	.word	0x5802546c
 800444c:	58025480 	.word	0x58025480
 8004450:	58025494 	.word	0x58025494

08004454 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e226      	b.n	80048be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_DMA_Start_IT+0x2a>
 800447a:	2302      	movs	r3, #2
 800447c:	e21f      	b.n	80048be <HAL_DMA_Start_IT+0x46a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 820a 	bne.w	80048a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a68      	ldr	r2, [pc, #416]	@ (8004648 <HAL_DMA_Start_IT+0x1f4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04a      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a66      	ldr	r2, [pc, #408]	@ (800464c <HAL_DMA_Start_IT+0x1f8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d045      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a65      	ldr	r2, [pc, #404]	@ (8004650 <HAL_DMA_Start_IT+0x1fc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d040      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a63      	ldr	r2, [pc, #396]	@ (8004654 <HAL_DMA_Start_IT+0x200>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d03b      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a62      	ldr	r2, [pc, #392]	@ (8004658 <HAL_DMA_Start_IT+0x204>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d036      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a60      	ldr	r2, [pc, #384]	@ (800465c <HAL_DMA_Start_IT+0x208>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d031      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004660 <HAL_DMA_Start_IT+0x20c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02c      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004664 <HAL_DMA_Start_IT+0x210>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d027      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004668 <HAL_DMA_Start_IT+0x214>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a5a      	ldr	r2, [pc, #360]	@ (800466c <HAL_DMA_Start_IT+0x218>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a59      	ldr	r2, [pc, #356]	@ (8004670 <HAL_DMA_Start_IT+0x21c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a57      	ldr	r2, [pc, #348]	@ (8004674 <HAL_DMA_Start_IT+0x220>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a56      	ldr	r2, [pc, #344]	@ (8004678 <HAL_DMA_Start_IT+0x224>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a54      	ldr	r2, [pc, #336]	@ (800467c <HAL_DMA_Start_IT+0x228>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a53      	ldr	r2, [pc, #332]	@ (8004680 <HAL_DMA_Start_IT+0x22c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_DMA_Start_IT+0xee>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a51      	ldr	r2, [pc, #324]	@ (8004684 <HAL_DMA_Start_IT+0x230>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <HAL_DMA_Start_IT+0x100>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e007      	b.n	8004564 <HAL_DMA_Start_IT+0x110>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f001 fe76 	bl	800625c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a34      	ldr	r2, [pc, #208]	@ (8004648 <HAL_DMA_Start_IT+0x1f4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d04a      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a33      	ldr	r2, [pc, #204]	@ (800464c <HAL_DMA_Start_IT+0x1f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d045      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a31      	ldr	r2, [pc, #196]	@ (8004650 <HAL_DMA_Start_IT+0x1fc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d040      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a30      	ldr	r2, [pc, #192]	@ (8004654 <HAL_DMA_Start_IT+0x200>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d03b      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2e      	ldr	r2, [pc, #184]	@ (8004658 <HAL_DMA_Start_IT+0x204>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d036      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2d      	ldr	r2, [pc, #180]	@ (800465c <HAL_DMA_Start_IT+0x208>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d031      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004660 <HAL_DMA_Start_IT+0x20c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d02c      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004664 <HAL_DMA_Start_IT+0x210>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d027      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a28      	ldr	r2, [pc, #160]	@ (8004668 <HAL_DMA_Start_IT+0x214>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d022      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a27      	ldr	r2, [pc, #156]	@ (800466c <HAL_DMA_Start_IT+0x218>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d01d      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a25      	ldr	r2, [pc, #148]	@ (8004670 <HAL_DMA_Start_IT+0x21c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d018      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a24      	ldr	r2, [pc, #144]	@ (8004674 <HAL_DMA_Start_IT+0x220>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a22      	ldr	r2, [pc, #136]	@ (8004678 <HAL_DMA_Start_IT+0x224>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00e      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	@ (800467c <HAL_DMA_Start_IT+0x228>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <HAL_DMA_Start_IT+0x22c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_DMA_Start_IT+0x1bc>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_DMA_Start_IT+0x230>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d101      	bne.n	8004614 <HAL_DMA_Start_IT+0x1c0>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_DMA_Start_IT+0x1c2>
 8004614:	2300      	movs	r3, #0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d036      	beq.n	8004688 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 021e 	bic.w	r2, r3, #30
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0216 	orr.w	r2, r2, #22
 800462c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d03e      	beq.n	80046b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0208 	orr.w	r2, r2, #8
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e035      	b.n	80046b4 <HAL_DMA_Start_IT+0x260>
 8004648:	40020010 	.word	0x40020010
 800464c:	40020028 	.word	0x40020028
 8004650:	40020040 	.word	0x40020040
 8004654:	40020058 	.word	0x40020058
 8004658:	40020070 	.word	0x40020070
 800465c:	40020088 	.word	0x40020088
 8004660:	400200a0 	.word	0x400200a0
 8004664:	400200b8 	.word	0x400200b8
 8004668:	40020410 	.word	0x40020410
 800466c:	40020428 	.word	0x40020428
 8004670:	40020440 	.word	0x40020440
 8004674:	40020458 	.word	0x40020458
 8004678:	40020470 	.word	0x40020470
 800467c:	40020488 	.word	0x40020488
 8004680:	400204a0 	.word	0x400204a0
 8004684:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 020e 	bic.w	r2, r3, #14
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 020a 	orr.w	r2, r2, #10
 800469a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0204 	orr.w	r2, r2, #4
 80046b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a83      	ldr	r2, [pc, #524]	@ (80048c8 <HAL_DMA_Start_IT+0x474>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d072      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a82      	ldr	r2, [pc, #520]	@ (80048cc <HAL_DMA_Start_IT+0x478>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d06d      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a80      	ldr	r2, [pc, #512]	@ (80048d0 <HAL_DMA_Start_IT+0x47c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d068      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7f      	ldr	r2, [pc, #508]	@ (80048d4 <HAL_DMA_Start_IT+0x480>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d063      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a7d      	ldr	r2, [pc, #500]	@ (80048d8 <HAL_DMA_Start_IT+0x484>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d05e      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a7c      	ldr	r2, [pc, #496]	@ (80048dc <HAL_DMA_Start_IT+0x488>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d059      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a7a      	ldr	r2, [pc, #488]	@ (80048e0 <HAL_DMA_Start_IT+0x48c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d054      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a79      	ldr	r2, [pc, #484]	@ (80048e4 <HAL_DMA_Start_IT+0x490>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04f      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a77      	ldr	r2, [pc, #476]	@ (80048e8 <HAL_DMA_Start_IT+0x494>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d04a      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a76      	ldr	r2, [pc, #472]	@ (80048ec <HAL_DMA_Start_IT+0x498>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d045      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a74      	ldr	r2, [pc, #464]	@ (80048f0 <HAL_DMA_Start_IT+0x49c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d040      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a73      	ldr	r2, [pc, #460]	@ (80048f4 <HAL_DMA_Start_IT+0x4a0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d03b      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a71      	ldr	r2, [pc, #452]	@ (80048f8 <HAL_DMA_Start_IT+0x4a4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d036      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a70      	ldr	r2, [pc, #448]	@ (80048fc <HAL_DMA_Start_IT+0x4a8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d031      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6e      	ldr	r2, [pc, #440]	@ (8004900 <HAL_DMA_Start_IT+0x4ac>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d02c      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6d      	ldr	r2, [pc, #436]	@ (8004904 <HAL_DMA_Start_IT+0x4b0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d027      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a6b      	ldr	r2, [pc, #428]	@ (8004908 <HAL_DMA_Start_IT+0x4b4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6a      	ldr	r2, [pc, #424]	@ (800490c <HAL_DMA_Start_IT+0x4b8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d01d      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a68      	ldr	r2, [pc, #416]	@ (8004910 <HAL_DMA_Start_IT+0x4bc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a67      	ldr	r2, [pc, #412]	@ (8004914 <HAL_DMA_Start_IT+0x4c0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a65      	ldr	r2, [pc, #404]	@ (8004918 <HAL_DMA_Start_IT+0x4c4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a64      	ldr	r2, [pc, #400]	@ (800491c <HAL_DMA_Start_IT+0x4c8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a62      	ldr	r2, [pc, #392]	@ (8004920 <HAL_DMA_Start_IT+0x4cc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_DMA_Start_IT+0x350>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a61      	ldr	r2, [pc, #388]	@ (8004924 <HAL_DMA_Start_IT+0x4d0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_DMA_Start_IT+0x354>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_DMA_Start_IT+0x356>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01a      	beq.n	80047e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a37      	ldr	r2, [pc, #220]	@ (80048c8 <HAL_DMA_Start_IT+0x474>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d04a      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a36      	ldr	r2, [pc, #216]	@ (80048cc <HAL_DMA_Start_IT+0x478>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d045      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a34      	ldr	r2, [pc, #208]	@ (80048d0 <HAL_DMA_Start_IT+0x47c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d040      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a33      	ldr	r2, [pc, #204]	@ (80048d4 <HAL_DMA_Start_IT+0x480>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d03b      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a31      	ldr	r2, [pc, #196]	@ (80048d8 <HAL_DMA_Start_IT+0x484>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d036      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a30      	ldr	r2, [pc, #192]	@ (80048dc <HAL_DMA_Start_IT+0x488>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d031      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a2e      	ldr	r2, [pc, #184]	@ (80048e0 <HAL_DMA_Start_IT+0x48c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02c      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2d      	ldr	r2, [pc, #180]	@ (80048e4 <HAL_DMA_Start_IT+0x490>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d027      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2b      	ldr	r2, [pc, #172]	@ (80048e8 <HAL_DMA_Start_IT+0x494>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d022      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2a      	ldr	r2, [pc, #168]	@ (80048ec <HAL_DMA_Start_IT+0x498>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d01d      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a28      	ldr	r2, [pc, #160]	@ (80048f0 <HAL_DMA_Start_IT+0x49c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a27      	ldr	r2, [pc, #156]	@ (80048f4 <HAL_DMA_Start_IT+0x4a0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a25      	ldr	r2, [pc, #148]	@ (80048f8 <HAL_DMA_Start_IT+0x4a4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <HAL_DMA_Start_IT+0x4a8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a22      	ldr	r2, [pc, #136]	@ (8004900 <HAL_DMA_Start_IT+0x4ac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_DMA_Start_IT+0x430>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <HAL_DMA_Start_IT+0x4b0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d108      	bne.n	8004896 <HAL_DMA_Start_IT+0x442>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e012      	b.n	80048bc <HAL_DMA_Start_IT+0x468>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e009      	b.n	80048bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40020010 	.word	0x40020010
 80048cc:	40020028 	.word	0x40020028
 80048d0:	40020040 	.word	0x40020040
 80048d4:	40020058 	.word	0x40020058
 80048d8:	40020070 	.word	0x40020070
 80048dc:	40020088 	.word	0x40020088
 80048e0:	400200a0 	.word	0x400200a0
 80048e4:	400200b8 	.word	0x400200b8
 80048e8:	40020410 	.word	0x40020410
 80048ec:	40020428 	.word	0x40020428
 80048f0:	40020440 	.word	0x40020440
 80048f4:	40020458 	.word	0x40020458
 80048f8:	40020470 	.word	0x40020470
 80048fc:	40020488 	.word	0x40020488
 8004900:	400204a0 	.word	0x400204a0
 8004904:	400204b8 	.word	0x400204b8
 8004908:	58025408 	.word	0x58025408
 800490c:	5802541c 	.word	0x5802541c
 8004910:	58025430 	.word	0x58025430
 8004914:	58025444 	.word	0x58025444
 8004918:	58025458 	.word	0x58025458
 800491c:	5802546c 	.word	0x5802546c
 8004920:	58025480 	.word	0x58025480
 8004924:	58025494 	.word	0x58025494

08004928 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004930:	f7fd fe46 	bl	80025c0 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e2dc      	b.n	8004efa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d008      	beq.n	800495e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2280      	movs	r2, #128	@ 0x80
 8004950:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e2cd      	b.n	8004efa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a76      	ldr	r2, [pc, #472]	@ (8004b3c <HAL_DMA_Abort+0x214>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d04a      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a74      	ldr	r2, [pc, #464]	@ (8004b40 <HAL_DMA_Abort+0x218>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d045      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a73      	ldr	r2, [pc, #460]	@ (8004b44 <HAL_DMA_Abort+0x21c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d040      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a71      	ldr	r2, [pc, #452]	@ (8004b48 <HAL_DMA_Abort+0x220>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d03b      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a70      	ldr	r2, [pc, #448]	@ (8004b4c <HAL_DMA_Abort+0x224>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d036      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6e      	ldr	r2, [pc, #440]	@ (8004b50 <HAL_DMA_Abort+0x228>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d031      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6d      	ldr	r2, [pc, #436]	@ (8004b54 <HAL_DMA_Abort+0x22c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d02c      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b58 <HAL_DMA_Abort+0x230>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d027      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b5c <HAL_DMA_Abort+0x234>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a68      	ldr	r2, [pc, #416]	@ (8004b60 <HAL_DMA_Abort+0x238>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01d      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a67      	ldr	r2, [pc, #412]	@ (8004b64 <HAL_DMA_Abort+0x23c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a65      	ldr	r2, [pc, #404]	@ (8004b68 <HAL_DMA_Abort+0x240>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a64      	ldr	r2, [pc, #400]	@ (8004b6c <HAL_DMA_Abort+0x244>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a62      	ldr	r2, [pc, #392]	@ (8004b70 <HAL_DMA_Abort+0x248>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a61      	ldr	r2, [pc, #388]	@ (8004b74 <HAL_DMA_Abort+0x24c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_DMA_Abort+0xd6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5f      	ldr	r2, [pc, #380]	@ (8004b78 <HAL_DMA_Abort+0x250>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_DMA_Abort+0xda>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_DMA_Abort+0xdc>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d013      	beq.n	8004a30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 021e 	bic.w	r2, r2, #30
 8004a16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e00a      	b.n	8004a46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 020e 	bic.w	r2, r2, #14
 8004a3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b3c <HAL_DMA_Abort+0x214>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d072      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a3a      	ldr	r2, [pc, #232]	@ (8004b40 <HAL_DMA_Abort+0x218>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d06d      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a39      	ldr	r2, [pc, #228]	@ (8004b44 <HAL_DMA_Abort+0x21c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d068      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a37      	ldr	r2, [pc, #220]	@ (8004b48 <HAL_DMA_Abort+0x220>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d063      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a36      	ldr	r2, [pc, #216]	@ (8004b4c <HAL_DMA_Abort+0x224>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d05e      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a34      	ldr	r2, [pc, #208]	@ (8004b50 <HAL_DMA_Abort+0x228>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d059      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a33      	ldr	r2, [pc, #204]	@ (8004b54 <HAL_DMA_Abort+0x22c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d054      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a31      	ldr	r2, [pc, #196]	@ (8004b58 <HAL_DMA_Abort+0x230>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d04f      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a30      	ldr	r2, [pc, #192]	@ (8004b5c <HAL_DMA_Abort+0x234>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d04a      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b60 <HAL_DMA_Abort+0x238>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d045      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2d      	ldr	r2, [pc, #180]	@ (8004b64 <HAL_DMA_Abort+0x23c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d040      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b68 <HAL_DMA_Abort+0x240>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d03b      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b6c <HAL_DMA_Abort+0x244>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d036      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a28      	ldr	r2, [pc, #160]	@ (8004b70 <HAL_DMA_Abort+0x248>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d031      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a27      	ldr	r2, [pc, #156]	@ (8004b74 <HAL_DMA_Abort+0x24c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d02c      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a25      	ldr	r2, [pc, #148]	@ (8004b78 <HAL_DMA_Abort+0x250>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d027      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a24      	ldr	r2, [pc, #144]	@ (8004b7c <HAL_DMA_Abort+0x254>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d022      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a22      	ldr	r2, [pc, #136]	@ (8004b80 <HAL_DMA_Abort+0x258>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01d      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a21      	ldr	r2, [pc, #132]	@ (8004b84 <HAL_DMA_Abort+0x25c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d018      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <HAL_DMA_Abort+0x260>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	@ (8004b8c <HAL_DMA_Abort+0x264>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b90 <HAL_DMA_Abort+0x268>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1b      	ldr	r2, [pc, #108]	@ (8004b94 <HAL_DMA_Abort+0x26c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_DMA_Abort+0x20e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <HAL_DMA_Abort+0x270>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d132      	bne.n	8004b9c <HAL_DMA_Abort+0x274>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e031      	b.n	8004b9e <HAL_DMA_Abort+0x276>
 8004b3a:	bf00      	nop
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
 8004b7c:	58025408 	.word	0x58025408
 8004b80:	5802541c 	.word	0x5802541c
 8004b84:	58025430 	.word	0x58025430
 8004b88:	58025444 	.word	0x58025444
 8004b8c:	58025458 	.word	0x58025458
 8004b90:	5802546c 	.word	0x5802546c
 8004b94:	58025480 	.word	0x58025480
 8004b98:	58025494 	.word	0x58025494
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6d      	ldr	r2, [pc, #436]	@ (8004d6c <HAL_DMA_Abort+0x444>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6b      	ldr	r2, [pc, #428]	@ (8004d70 <HAL_DMA_Abort+0x448>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6a      	ldr	r2, [pc, #424]	@ (8004d74 <HAL_DMA_Abort+0x44c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a68      	ldr	r2, [pc, #416]	@ (8004d78 <HAL_DMA_Abort+0x450>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a67      	ldr	r2, [pc, #412]	@ (8004d7c <HAL_DMA_Abort+0x454>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a65      	ldr	r2, [pc, #404]	@ (8004d80 <HAL_DMA_Abort+0x458>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a64      	ldr	r2, [pc, #400]	@ (8004d84 <HAL_DMA_Abort+0x45c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a62      	ldr	r2, [pc, #392]	@ (8004d88 <HAL_DMA_Abort+0x460>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a61      	ldr	r2, [pc, #388]	@ (8004d8c <HAL_DMA_Abort+0x464>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5f      	ldr	r2, [pc, #380]	@ (8004d90 <HAL_DMA_Abort+0x468>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8004d94 <HAL_DMA_Abort+0x46c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5c      	ldr	r2, [pc, #368]	@ (8004d98 <HAL_DMA_Abort+0x470>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004d9c <HAL_DMA_Abort+0x474>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a59      	ldr	r2, [pc, #356]	@ (8004da0 <HAL_DMA_Abort+0x478>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a58      	ldr	r2, [pc, #352]	@ (8004da4 <HAL_DMA_Abort+0x47c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_Abort+0x32a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a56      	ldr	r2, [pc, #344]	@ (8004da8 <HAL_DMA_Abort+0x480>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d108      	bne.n	8004c64 <HAL_DMA_Abort+0x33c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e007      	b.n	8004c74 <HAL_DMA_Abort+0x34c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c74:	e013      	b.n	8004c9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c76:	f7fd fca3 	bl	80025c0 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d90c      	bls.n	8004c9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e12d      	b.n	8004efa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e5      	bne.n	8004c76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2f      	ldr	r2, [pc, #188]	@ (8004d6c <HAL_DMA_Abort+0x444>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d04a      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d70 <HAL_DMA_Abort+0x448>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d045      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d74 <HAL_DMA_Abort+0x44c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d040      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <HAL_DMA_Abort+0x450>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d03b      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a29      	ldr	r2, [pc, #164]	@ (8004d7c <HAL_DMA_Abort+0x454>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d036      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a27      	ldr	r2, [pc, #156]	@ (8004d80 <HAL_DMA_Abort+0x458>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d031      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a26      	ldr	r2, [pc, #152]	@ (8004d84 <HAL_DMA_Abort+0x45c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d02c      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a24      	ldr	r2, [pc, #144]	@ (8004d88 <HAL_DMA_Abort+0x460>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d027      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a23      	ldr	r2, [pc, #140]	@ (8004d8c <HAL_DMA_Abort+0x464>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d022      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a21      	ldr	r2, [pc, #132]	@ (8004d90 <HAL_DMA_Abort+0x468>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01d      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a20      	ldr	r2, [pc, #128]	@ (8004d94 <HAL_DMA_Abort+0x46c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d98 <HAL_DMA_Abort+0x470>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <HAL_DMA_Abort+0x474>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1b      	ldr	r2, [pc, #108]	@ (8004da0 <HAL_DMA_Abort+0x478>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004da4 <HAL_DMA_Abort+0x47c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_DMA_Abort+0x422>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a18      	ldr	r2, [pc, #96]	@ (8004da8 <HAL_DMA_Abort+0x480>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_DMA_Abort+0x426>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <HAL_DMA_Abort+0x428>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d02b      	beq.n	8004dac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	223f      	movs	r2, #63	@ 0x3f
 8004d64:	409a      	lsls	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	e02a      	b.n	8004dc2 <HAL_DMA_Abort+0x49a>
 8004d6c:	40020010 	.word	0x40020010
 8004d70:	40020028 	.word	0x40020028
 8004d74:	40020040 	.word	0x40020040
 8004d78:	40020058 	.word	0x40020058
 8004d7c:	40020070 	.word	0x40020070
 8004d80:	40020088 	.word	0x40020088
 8004d84:	400200a0 	.word	0x400200a0
 8004d88:	400200b8 	.word	0x400200b8
 8004d8c:	40020410 	.word	0x40020410
 8004d90:	40020428 	.word	0x40020428
 8004d94:	40020440 	.word	0x40020440
 8004d98:	40020458 	.word	0x40020458
 8004d9c:	40020470 	.word	0x40020470
 8004da0:	40020488 	.word	0x40020488
 8004da4:	400204a0 	.word	0x400204a0
 8004da8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2201      	movs	r2, #1
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8004f04 <HAL_DMA_Abort+0x5dc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d072      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8004f08 <HAL_DMA_Abort+0x5e0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d06d      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a4c      	ldr	r2, [pc, #304]	@ (8004f0c <HAL_DMA_Abort+0x5e4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d068      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a4a      	ldr	r2, [pc, #296]	@ (8004f10 <HAL_DMA_Abort+0x5e8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d063      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a49      	ldr	r2, [pc, #292]	@ (8004f14 <HAL_DMA_Abort+0x5ec>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d05e      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a47      	ldr	r2, [pc, #284]	@ (8004f18 <HAL_DMA_Abort+0x5f0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d059      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a46      	ldr	r2, [pc, #280]	@ (8004f1c <HAL_DMA_Abort+0x5f4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d054      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a44      	ldr	r2, [pc, #272]	@ (8004f20 <HAL_DMA_Abort+0x5f8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d04f      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a43      	ldr	r2, [pc, #268]	@ (8004f24 <HAL_DMA_Abort+0x5fc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d04a      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a41      	ldr	r2, [pc, #260]	@ (8004f28 <HAL_DMA_Abort+0x600>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d045      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a40      	ldr	r2, [pc, #256]	@ (8004f2c <HAL_DMA_Abort+0x604>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d040      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a3e      	ldr	r2, [pc, #248]	@ (8004f30 <HAL_DMA_Abort+0x608>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d03b      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f34 <HAL_DMA_Abort+0x60c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d036      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3b      	ldr	r2, [pc, #236]	@ (8004f38 <HAL_DMA_Abort+0x610>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d031      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a3a      	ldr	r2, [pc, #232]	@ (8004f3c <HAL_DMA_Abort+0x614>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d02c      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a38      	ldr	r2, [pc, #224]	@ (8004f40 <HAL_DMA_Abort+0x618>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d027      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a37      	ldr	r2, [pc, #220]	@ (8004f44 <HAL_DMA_Abort+0x61c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d022      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a35      	ldr	r2, [pc, #212]	@ (8004f48 <HAL_DMA_Abort+0x620>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01d      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a34      	ldr	r2, [pc, #208]	@ (8004f4c <HAL_DMA_Abort+0x624>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d018      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a32      	ldr	r2, [pc, #200]	@ (8004f50 <HAL_DMA_Abort+0x628>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a31      	ldr	r2, [pc, #196]	@ (8004f54 <HAL_DMA_Abort+0x62c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00e      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	@ (8004f58 <HAL_DMA_Abort+0x630>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8004f5c <HAL_DMA_Abort+0x634>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_DMA_Abort+0x58a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <HAL_DMA_Abort+0x638>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_DMA_Abort+0x58e>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_DMA_Abort+0x590>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d015      	beq.n	8004ee8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ec4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004edc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ee6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40020010 	.word	0x40020010
 8004f08:	40020028 	.word	0x40020028
 8004f0c:	40020040 	.word	0x40020040
 8004f10:	40020058 	.word	0x40020058
 8004f14:	40020070 	.word	0x40020070
 8004f18:	40020088 	.word	0x40020088
 8004f1c:	400200a0 	.word	0x400200a0
 8004f20:	400200b8 	.word	0x400200b8
 8004f24:	40020410 	.word	0x40020410
 8004f28:	40020428 	.word	0x40020428
 8004f2c:	40020440 	.word	0x40020440
 8004f30:	40020458 	.word	0x40020458
 8004f34:	40020470 	.word	0x40020470
 8004f38:	40020488 	.word	0x40020488
 8004f3c:	400204a0 	.word	0x400204a0
 8004f40:	400204b8 	.word	0x400204b8
 8004f44:	58025408 	.word	0x58025408
 8004f48:	5802541c 	.word	0x5802541c
 8004f4c:	58025430 	.word	0x58025430
 8004f50:	58025444 	.word	0x58025444
 8004f54:	58025458 	.word	0x58025458
 8004f58:	5802546c 	.word	0x5802546c
 8004f5c:	58025480 	.word	0x58025480
 8004f60:	58025494 	.word	0x58025494

08004f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e237      	b.n	80053e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d004      	beq.n	8004f8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2280      	movs	r2, #128	@ 0x80
 8004f86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e22c      	b.n	80053e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a5c      	ldr	r2, [pc, #368]	@ (8005104 <HAL_DMA_Abort_IT+0x1a0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d04a      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8005108 <HAL_DMA_Abort_IT+0x1a4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d045      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a59      	ldr	r2, [pc, #356]	@ (800510c <HAL_DMA_Abort_IT+0x1a8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d040      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a58      	ldr	r2, [pc, #352]	@ (8005110 <HAL_DMA_Abort_IT+0x1ac>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d03b      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a56      	ldr	r2, [pc, #344]	@ (8005114 <HAL_DMA_Abort_IT+0x1b0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d036      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a55      	ldr	r2, [pc, #340]	@ (8005118 <HAL_DMA_Abort_IT+0x1b4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d031      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a53      	ldr	r2, [pc, #332]	@ (800511c <HAL_DMA_Abort_IT+0x1b8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02c      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a52      	ldr	r2, [pc, #328]	@ (8005120 <HAL_DMA_Abort_IT+0x1bc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d027      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a50      	ldr	r2, [pc, #320]	@ (8005124 <HAL_DMA_Abort_IT+0x1c0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a4f      	ldr	r2, [pc, #316]	@ (8005128 <HAL_DMA_Abort_IT+0x1c4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01d      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800512c <HAL_DMA_Abort_IT+0x1c8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8005130 <HAL_DMA_Abort_IT+0x1cc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a4a      	ldr	r2, [pc, #296]	@ (8005134 <HAL_DMA_Abort_IT+0x1d0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a49      	ldr	r2, [pc, #292]	@ (8005138 <HAL_DMA_Abort_IT+0x1d4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a47      	ldr	r2, [pc, #284]	@ (800513c <HAL_DMA_Abort_IT+0x1d8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_DMA_Abort_IT+0xc8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a46      	ldr	r2, [pc, #280]	@ (8005140 <HAL_DMA_Abort_IT+0x1dc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_DMA_Abort_IT+0xcc>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_DMA_Abort_IT+0xce>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8086 	beq.w	8005144 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2204      	movs	r2, #4
 800503c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2f      	ldr	r2, [pc, #188]	@ (8005104 <HAL_DMA_Abort_IT+0x1a0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d04a      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2e      	ldr	r2, [pc, #184]	@ (8005108 <HAL_DMA_Abort_IT+0x1a4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d045      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a2c      	ldr	r2, [pc, #176]	@ (800510c <HAL_DMA_Abort_IT+0x1a8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d040      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2b      	ldr	r2, [pc, #172]	@ (8005110 <HAL_DMA_Abort_IT+0x1ac>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d03b      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a29      	ldr	r2, [pc, #164]	@ (8005114 <HAL_DMA_Abort_IT+0x1b0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d036      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a28      	ldr	r2, [pc, #160]	@ (8005118 <HAL_DMA_Abort_IT+0x1b4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d031      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a26      	ldr	r2, [pc, #152]	@ (800511c <HAL_DMA_Abort_IT+0x1b8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d02c      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a25      	ldr	r2, [pc, #148]	@ (8005120 <HAL_DMA_Abort_IT+0x1bc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d027      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a23      	ldr	r2, [pc, #140]	@ (8005124 <HAL_DMA_Abort_IT+0x1c0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a22      	ldr	r2, [pc, #136]	@ (8005128 <HAL_DMA_Abort_IT+0x1c4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d01d      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a20      	ldr	r2, [pc, #128]	@ (800512c <HAL_DMA_Abort_IT+0x1c8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005130 <HAL_DMA_Abort_IT+0x1cc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <HAL_DMA_Abort_IT+0x1d0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005138 <HAL_DMA_Abort_IT+0x1d4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1a      	ldr	r2, [pc, #104]	@ (800513c <HAL_DMA_Abort_IT+0x1d8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_Abort_IT+0x17c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <HAL_DMA_Abort_IT+0x1dc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d108      	bne.n	80050f2 <HAL_DMA_Abort_IT+0x18e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e178      	b.n	80053e4 <HAL_DMA_Abort_IT+0x480>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e16f      	b.n	80053e4 <HAL_DMA_Abort_IT+0x480>
 8005104:	40020010 	.word	0x40020010
 8005108:	40020028 	.word	0x40020028
 800510c:	40020040 	.word	0x40020040
 8005110:	40020058 	.word	0x40020058
 8005114:	40020070 	.word	0x40020070
 8005118:	40020088 	.word	0x40020088
 800511c:	400200a0 	.word	0x400200a0
 8005120:	400200b8 	.word	0x400200b8
 8005124:	40020410 	.word	0x40020410
 8005128:	40020428 	.word	0x40020428
 800512c:	40020440 	.word	0x40020440
 8005130:	40020458 	.word	0x40020458
 8005134:	40020470 	.word	0x40020470
 8005138:	40020488 	.word	0x40020488
 800513c:	400204a0 	.word	0x400204a0
 8005140:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 020e 	bic.w	r2, r2, #14
 8005152:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6c      	ldr	r2, [pc, #432]	@ (800530c <HAL_DMA_Abort_IT+0x3a8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d04a      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a6b      	ldr	r2, [pc, #428]	@ (8005310 <HAL_DMA_Abort_IT+0x3ac>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d045      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a69      	ldr	r2, [pc, #420]	@ (8005314 <HAL_DMA_Abort_IT+0x3b0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d040      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a68      	ldr	r2, [pc, #416]	@ (8005318 <HAL_DMA_Abort_IT+0x3b4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d03b      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a66      	ldr	r2, [pc, #408]	@ (800531c <HAL_DMA_Abort_IT+0x3b8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d036      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a65      	ldr	r2, [pc, #404]	@ (8005320 <HAL_DMA_Abort_IT+0x3bc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d031      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a63      	ldr	r2, [pc, #396]	@ (8005324 <HAL_DMA_Abort_IT+0x3c0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02c      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a62      	ldr	r2, [pc, #392]	@ (8005328 <HAL_DMA_Abort_IT+0x3c4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d027      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a60      	ldr	r2, [pc, #384]	@ (800532c <HAL_DMA_Abort_IT+0x3c8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005330 <HAL_DMA_Abort_IT+0x3cc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a5d      	ldr	r2, [pc, #372]	@ (8005334 <HAL_DMA_Abort_IT+0x3d0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a5c      	ldr	r2, [pc, #368]	@ (8005338 <HAL_DMA_Abort_IT+0x3d4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a5a      	ldr	r2, [pc, #360]	@ (800533c <HAL_DMA_Abort_IT+0x3d8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a59      	ldr	r2, [pc, #356]	@ (8005340 <HAL_DMA_Abort_IT+0x3dc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a57      	ldr	r2, [pc, #348]	@ (8005344 <HAL_DMA_Abort_IT+0x3e0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x290>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a56      	ldr	r2, [pc, #344]	@ (8005348 <HAL_DMA_Abort_IT+0x3e4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <HAL_DMA_Abort_IT+0x2a2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e007      	b.n	8005216 <HAL_DMA_Abort_IT+0x2b2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a3c      	ldr	r2, [pc, #240]	@ (800530c <HAL_DMA_Abort_IT+0x3a8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d072      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3a      	ldr	r2, [pc, #232]	@ (8005310 <HAL_DMA_Abort_IT+0x3ac>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d06d      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a39      	ldr	r2, [pc, #228]	@ (8005314 <HAL_DMA_Abort_IT+0x3b0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d068      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a37      	ldr	r2, [pc, #220]	@ (8005318 <HAL_DMA_Abort_IT+0x3b4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d063      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a36      	ldr	r2, [pc, #216]	@ (800531c <HAL_DMA_Abort_IT+0x3b8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d05e      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a34      	ldr	r2, [pc, #208]	@ (8005320 <HAL_DMA_Abort_IT+0x3bc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d059      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a33      	ldr	r2, [pc, #204]	@ (8005324 <HAL_DMA_Abort_IT+0x3c0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d054      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a31      	ldr	r2, [pc, #196]	@ (8005328 <HAL_DMA_Abort_IT+0x3c4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d04f      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a30      	ldr	r2, [pc, #192]	@ (800532c <HAL_DMA_Abort_IT+0x3c8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d04a      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2e      	ldr	r2, [pc, #184]	@ (8005330 <HAL_DMA_Abort_IT+0x3cc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d045      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2d      	ldr	r2, [pc, #180]	@ (8005334 <HAL_DMA_Abort_IT+0x3d0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d040      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2b      	ldr	r2, [pc, #172]	@ (8005338 <HAL_DMA_Abort_IT+0x3d4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d03b      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2a      	ldr	r2, [pc, #168]	@ (800533c <HAL_DMA_Abort_IT+0x3d8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d036      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a28      	ldr	r2, [pc, #160]	@ (8005340 <HAL_DMA_Abort_IT+0x3dc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d031      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a27      	ldr	r2, [pc, #156]	@ (8005344 <HAL_DMA_Abort_IT+0x3e0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d02c      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a25      	ldr	r2, [pc, #148]	@ (8005348 <HAL_DMA_Abort_IT+0x3e4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d027      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a24      	ldr	r2, [pc, #144]	@ (800534c <HAL_DMA_Abort_IT+0x3e8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d022      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a22      	ldr	r2, [pc, #136]	@ (8005350 <HAL_DMA_Abort_IT+0x3ec>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01d      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a21      	ldr	r2, [pc, #132]	@ (8005354 <HAL_DMA_Abort_IT+0x3f0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d018      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005358 <HAL_DMA_Abort_IT+0x3f4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <HAL_DMA_Abort_IT+0x3f8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005360 <HAL_DMA_Abort_IT+0x3fc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d009      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005364 <HAL_DMA_Abort_IT+0x400>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_DMA_Abort_IT+0x3a2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <HAL_DMA_Abort_IT+0x404>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d132      	bne.n	800536c <HAL_DMA_Abort_IT+0x408>
 8005306:	2301      	movs	r3, #1
 8005308:	e031      	b.n	800536e <HAL_DMA_Abort_IT+0x40a>
 800530a:	bf00      	nop
 800530c:	40020010 	.word	0x40020010
 8005310:	40020028 	.word	0x40020028
 8005314:	40020040 	.word	0x40020040
 8005318:	40020058 	.word	0x40020058
 800531c:	40020070 	.word	0x40020070
 8005320:	40020088 	.word	0x40020088
 8005324:	400200a0 	.word	0x400200a0
 8005328:	400200b8 	.word	0x400200b8
 800532c:	40020410 	.word	0x40020410
 8005330:	40020428 	.word	0x40020428
 8005334:	40020440 	.word	0x40020440
 8005338:	40020458 	.word	0x40020458
 800533c:	40020470 	.word	0x40020470
 8005340:	40020488 	.word	0x40020488
 8005344:	400204a0 	.word	0x400204a0
 8005348:	400204b8 	.word	0x400204b8
 800534c:	58025408 	.word	0x58025408
 8005350:	5802541c 	.word	0x5802541c
 8005354:	58025430 	.word	0x58025430
 8005358:	58025444 	.word	0x58025444
 800535c:	58025458 	.word	0x58025458
 8005360:	5802546c 	.word	0x5802546c
 8005364:	58025480 	.word	0x58025480
 8005368:	58025494 	.word	0x58025494
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d028      	beq.n	80053c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005380:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005386:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2201      	movs	r2, #1
 8005392:	409a      	lsls	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop

080053f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08a      	sub	sp, #40	@ 0x28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053fc:	4b67      	ldr	r3, [pc, #412]	@ (800559c <HAL_DMA_IRQHandler+0x1ac>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a67      	ldr	r2, [pc, #412]	@ (80055a0 <HAL_DMA_IRQHandler+0x1b0>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005414:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a5f      	ldr	r2, [pc, #380]	@ (80055a4 <HAL_DMA_IRQHandler+0x1b4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d04a      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a5d      	ldr	r2, [pc, #372]	@ (80055a8 <HAL_DMA_IRQHandler+0x1b8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d045      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a5c      	ldr	r2, [pc, #368]	@ (80055ac <HAL_DMA_IRQHandler+0x1bc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d040      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a5a      	ldr	r2, [pc, #360]	@ (80055b0 <HAL_DMA_IRQHandler+0x1c0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d03b      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a59      	ldr	r2, [pc, #356]	@ (80055b4 <HAL_DMA_IRQHandler+0x1c4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d036      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a57      	ldr	r2, [pc, #348]	@ (80055b8 <HAL_DMA_IRQHandler+0x1c8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d031      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a56      	ldr	r2, [pc, #344]	@ (80055bc <HAL_DMA_IRQHandler+0x1cc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d02c      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a54      	ldr	r2, [pc, #336]	@ (80055c0 <HAL_DMA_IRQHandler+0x1d0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d027      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a53      	ldr	r2, [pc, #332]	@ (80055c4 <HAL_DMA_IRQHandler+0x1d4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d022      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a51      	ldr	r2, [pc, #324]	@ (80055c8 <HAL_DMA_IRQHandler+0x1d8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01d      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a50      	ldr	r2, [pc, #320]	@ (80055cc <HAL_DMA_IRQHandler+0x1dc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d018      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a4e      	ldr	r2, [pc, #312]	@ (80055d0 <HAL_DMA_IRQHandler+0x1e0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4d      	ldr	r2, [pc, #308]	@ (80055d4 <HAL_DMA_IRQHandler+0x1e4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00e      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a4b      	ldr	r2, [pc, #300]	@ (80055d8 <HAL_DMA_IRQHandler+0x1e8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a4a      	ldr	r2, [pc, #296]	@ (80055dc <HAL_DMA_IRQHandler+0x1ec>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xd2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a48      	ldr	r2, [pc, #288]	@ (80055e0 <HAL_DMA_IRQHandler+0x1f0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d101      	bne.n	80054c6 <HAL_DMA_IRQHandler+0xd6>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_DMA_IRQHandler+0xd8>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 842b 	beq.w	8005d24 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2208      	movs	r2, #8
 80054d8:	409a      	lsls	r2, r3
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	4013      	ands	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80a2 	beq.w	8005628 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2e      	ldr	r2, [pc, #184]	@ (80055a4 <HAL_DMA_IRQHandler+0x1b4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04a      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2d      	ldr	r2, [pc, #180]	@ (80055a8 <HAL_DMA_IRQHandler+0x1b8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d045      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2b      	ldr	r2, [pc, #172]	@ (80055ac <HAL_DMA_IRQHandler+0x1bc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d040      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2a      	ldr	r2, [pc, #168]	@ (80055b0 <HAL_DMA_IRQHandler+0x1c0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03b      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a28      	ldr	r2, [pc, #160]	@ (80055b4 <HAL_DMA_IRQHandler+0x1c4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d036      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a27      	ldr	r2, [pc, #156]	@ (80055b8 <HAL_DMA_IRQHandler+0x1c8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d031      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <HAL_DMA_IRQHandler+0x1cc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02c      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a24      	ldr	r2, [pc, #144]	@ (80055c0 <HAL_DMA_IRQHandler+0x1d0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d027      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <HAL_DMA_IRQHandler+0x1d4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <HAL_DMA_IRQHandler+0x1d8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <HAL_DMA_IRQHandler+0x1dc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1e      	ldr	r2, [pc, #120]	@ (80055d0 <HAL_DMA_IRQHandler+0x1e0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <HAL_DMA_IRQHandler+0x1e4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	@ (80055d8 <HAL_DMA_IRQHandler+0x1e8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <HAL_DMA_IRQHandler+0x1ec>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_DMA_IRQHandler+0x194>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <HAL_DMA_IRQHandler+0x1f0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d12f      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x1f4>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	bf14      	ite	ne
 8005592:	2301      	movne	r3, #1
 8005594:	2300      	moveq	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	e02e      	b.n	80055f8 <HAL_DMA_IRQHandler+0x208>
 800559a:	bf00      	nop
 800559c:	24000004 	.word	0x24000004
 80055a0:	1b4e81b5 	.word	0x1b4e81b5
 80055a4:	40020010 	.word	0x40020010
 80055a8:	40020028 	.word	0x40020028
 80055ac:	40020040 	.word	0x40020040
 80055b0:	40020058 	.word	0x40020058
 80055b4:	40020070 	.word	0x40020070
 80055b8:	40020088 	.word	0x40020088
 80055bc:	400200a0 	.word	0x400200a0
 80055c0:	400200b8 	.word	0x400200b8
 80055c4:	40020410 	.word	0x40020410
 80055c8:	40020428 	.word	0x40020428
 80055cc:	40020440 	.word	0x40020440
 80055d0:	40020458 	.word	0x40020458
 80055d4:	40020470 	.word	0x40020470
 80055d8:	40020488 	.word	0x40020488
 80055dc:	400204a0 	.word	0x400204a0
 80055e0:	400204b8 	.word	0x400204b8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d015      	beq.n	8005628 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0204 	bic.w	r2, r2, #4
 800560a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2208      	movs	r2, #8
 8005616:	409a      	lsls	r2, r3
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005620:	f043 0201 	orr.w	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	fa22 f303 	lsr.w	r3, r2, r3
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d06e      	beq.n	800571c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a69      	ldr	r2, [pc, #420]	@ (80057e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d04a      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a67      	ldr	r2, [pc, #412]	@ (80057ec <HAL_DMA_IRQHandler+0x3fc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d045      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a66      	ldr	r2, [pc, #408]	@ (80057f0 <HAL_DMA_IRQHandler+0x400>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d040      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a64      	ldr	r2, [pc, #400]	@ (80057f4 <HAL_DMA_IRQHandler+0x404>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d03b      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a63      	ldr	r2, [pc, #396]	@ (80057f8 <HAL_DMA_IRQHandler+0x408>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d036      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a61      	ldr	r2, [pc, #388]	@ (80057fc <HAL_DMA_IRQHandler+0x40c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d031      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a60      	ldr	r2, [pc, #384]	@ (8005800 <HAL_DMA_IRQHandler+0x410>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d02c      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a5e      	ldr	r2, [pc, #376]	@ (8005804 <HAL_DMA_IRQHandler+0x414>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d027      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a5d      	ldr	r2, [pc, #372]	@ (8005808 <HAL_DMA_IRQHandler+0x418>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d022      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5b      	ldr	r2, [pc, #364]	@ (800580c <HAL_DMA_IRQHandler+0x41c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01d      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a5a      	ldr	r2, [pc, #360]	@ (8005810 <HAL_DMA_IRQHandler+0x420>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a58      	ldr	r2, [pc, #352]	@ (8005814 <HAL_DMA_IRQHandler+0x424>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a57      	ldr	r2, [pc, #348]	@ (8005818 <HAL_DMA_IRQHandler+0x428>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a55      	ldr	r2, [pc, #340]	@ (800581c <HAL_DMA_IRQHandler+0x42c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a54      	ldr	r2, [pc, #336]	@ (8005820 <HAL_DMA_IRQHandler+0x430>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_DMA_IRQHandler+0x2ee>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a52      	ldr	r2, [pc, #328]	@ (8005824 <HAL_DMA_IRQHandler+0x434>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10a      	bne.n	80056f4 <HAL_DMA_IRQHandler+0x304>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e003      	b.n	80056fc <HAL_DMA_IRQHandler+0x30c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2201      	movs	r2, #1
 800570a:	409a      	lsls	r2, r3
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005714:	f043 0202 	orr.w	r2, r3, #2
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2204      	movs	r2, #4
 8005726:	409a      	lsls	r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 808f 	beq.w	8005850 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2c      	ldr	r2, [pc, #176]	@ (80057e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04a      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2a      	ldr	r2, [pc, #168]	@ (80057ec <HAL_DMA_IRQHandler+0x3fc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a29      	ldr	r2, [pc, #164]	@ (80057f0 <HAL_DMA_IRQHandler+0x400>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d040      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a27      	ldr	r2, [pc, #156]	@ (80057f4 <HAL_DMA_IRQHandler+0x404>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d03b      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a26      	ldr	r2, [pc, #152]	@ (80057f8 <HAL_DMA_IRQHandler+0x408>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d036      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a24      	ldr	r2, [pc, #144]	@ (80057fc <HAL_DMA_IRQHandler+0x40c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d031      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a23      	ldr	r2, [pc, #140]	@ (8005800 <HAL_DMA_IRQHandler+0x410>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d02c      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a21      	ldr	r2, [pc, #132]	@ (8005804 <HAL_DMA_IRQHandler+0x414>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d027      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a20      	ldr	r2, [pc, #128]	@ (8005808 <HAL_DMA_IRQHandler+0x418>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1e      	ldr	r2, [pc, #120]	@ (800580c <HAL_DMA_IRQHandler+0x41c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <HAL_DMA_IRQHandler+0x420>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005814 <HAL_DMA_IRQHandler+0x424>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005818 <HAL_DMA_IRQHandler+0x428>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a18      	ldr	r2, [pc, #96]	@ (800581c <HAL_DMA_IRQHandler+0x42c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a17      	ldr	r2, [pc, #92]	@ (8005820 <HAL_DMA_IRQHandler+0x430>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x3e2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <HAL_DMA_IRQHandler+0x434>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d12a      	bne.n	8005828 <HAL_DMA_IRQHandler+0x438>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e023      	b.n	8005830 <HAL_DMA_IRQHandler+0x440>
 80057e8:	40020010 	.word	0x40020010
 80057ec:	40020028 	.word	0x40020028
 80057f0:	40020040 	.word	0x40020040
 80057f4:	40020058 	.word	0x40020058
 80057f8:	40020070 	.word	0x40020070
 80057fc:	40020088 	.word	0x40020088
 8005800:	400200a0 	.word	0x400200a0
 8005804:	400200b8 	.word	0x400200b8
 8005808:	40020410 	.word	0x40020410
 800580c:	40020428 	.word	0x40020428
 8005810:	40020440 	.word	0x40020440
 8005814:	40020458 	.word	0x40020458
 8005818:	40020470 	.word	0x40020470
 800581c:	40020488 	.word	0x40020488
 8005820:	400204a0 	.word	0x400204a0
 8005824:	400204b8 	.word	0x400204b8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2204      	movs	r2, #4
 800583e:	409a      	lsls	r2, r3
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005848:	f043 0204 	orr.w	r2, r3, #4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2210      	movs	r2, #16
 800585a:	409a      	lsls	r2, r3
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80a6 	beq.w	80059b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a85      	ldr	r2, [pc, #532]	@ (8005a80 <HAL_DMA_IRQHandler+0x690>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d04a      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a83      	ldr	r2, [pc, #524]	@ (8005a84 <HAL_DMA_IRQHandler+0x694>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d045      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a82      	ldr	r2, [pc, #520]	@ (8005a88 <HAL_DMA_IRQHandler+0x698>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d040      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a80      	ldr	r2, [pc, #512]	@ (8005a8c <HAL_DMA_IRQHandler+0x69c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a7f      	ldr	r2, [pc, #508]	@ (8005a90 <HAL_DMA_IRQHandler+0x6a0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d036      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a7d      	ldr	r2, [pc, #500]	@ (8005a94 <HAL_DMA_IRQHandler+0x6a4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005a98 <HAL_DMA_IRQHandler+0x6a8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a7a      	ldr	r2, [pc, #488]	@ (8005a9c <HAL_DMA_IRQHandler+0x6ac>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a79      	ldr	r2, [pc, #484]	@ (8005aa0 <HAL_DMA_IRQHandler+0x6b0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a77      	ldr	r2, [pc, #476]	@ (8005aa4 <HAL_DMA_IRQHandler+0x6b4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a76      	ldr	r2, [pc, #472]	@ (8005aa8 <HAL_DMA_IRQHandler+0x6b8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a74      	ldr	r2, [pc, #464]	@ (8005aac <HAL_DMA_IRQHandler+0x6bc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a73      	ldr	r2, [pc, #460]	@ (8005ab0 <HAL_DMA_IRQHandler+0x6c0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a71      	ldr	r2, [pc, #452]	@ (8005ab4 <HAL_DMA_IRQHandler+0x6c4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a70      	ldr	r2, [pc, #448]	@ (8005ab8 <HAL_DMA_IRQHandler+0x6c8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_IRQHandler+0x516>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a6e      	ldr	r2, [pc, #440]	@ (8005abc <HAL_DMA_IRQHandler+0x6cc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10a      	bne.n	800591c <HAL_DMA_IRQHandler+0x52c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e009      	b.n	8005930 <HAL_DMA_IRQHandler+0x540>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	bf14      	ite	ne
 800592a:	2301      	movne	r3, #1
 800592c:	2300      	moveq	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d03e      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2210      	movs	r2, #16
 800593e:	409a      	lsls	r2, r3
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d024      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
 8005970:	e01f      	b.n	80059b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01b      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	4798      	blx	r3
 8005982:	e016      	b.n	80059b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0208 	bic.w	r2, r2, #8
 80059a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2220      	movs	r2, #32
 80059bc:	409a      	lsls	r2, r3
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8110 	beq.w	8005be8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005a80 <HAL_DMA_IRQHandler+0x690>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d04a      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a84 <HAL_DMA_IRQHandler+0x694>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d045      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a29      	ldr	r2, [pc, #164]	@ (8005a88 <HAL_DMA_IRQHandler+0x698>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d040      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a28      	ldr	r2, [pc, #160]	@ (8005a8c <HAL_DMA_IRQHandler+0x69c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d03b      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <HAL_DMA_IRQHandler+0x6a0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d036      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a25      	ldr	r2, [pc, #148]	@ (8005a94 <HAL_DMA_IRQHandler+0x6a4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d031      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a23      	ldr	r2, [pc, #140]	@ (8005a98 <HAL_DMA_IRQHandler+0x6a8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d02c      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <HAL_DMA_IRQHandler+0x6ac>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d027      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	@ (8005aa0 <HAL_DMA_IRQHandler+0x6b0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d022      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa4 <HAL_DMA_IRQHandler+0x6b4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d01d      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa8 <HAL_DMA_IRQHandler+0x6b8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d018      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_DMA_IRQHandler+0x6bc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d013      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab0 <HAL_DMA_IRQHandler+0x6c0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00e      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a19      	ldr	r2, [pc, #100]	@ (8005ab4 <HAL_DMA_IRQHandler+0x6c4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <HAL_DMA_IRQHandler+0x6c8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x678>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <HAL_DMA_IRQHandler+0x6cc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d12b      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x6d0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	bf14      	ite	ne
 8005a76:	2301      	movne	r3, #1
 8005a78:	2300      	moveq	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	e02a      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x6e4>
 8005a7e:	bf00      	nop
 8005a80:	40020010 	.word	0x40020010
 8005a84:	40020028 	.word	0x40020028
 8005a88:	40020040 	.word	0x40020040
 8005a8c:	40020058 	.word	0x40020058
 8005a90:	40020070 	.word	0x40020070
 8005a94:	40020088 	.word	0x40020088
 8005a98:	400200a0 	.word	0x400200a0
 8005a9c:	400200b8 	.word	0x400200b8
 8005aa0:	40020410 	.word	0x40020410
 8005aa4:	40020428 	.word	0x40020428
 8005aa8:	40020440 	.word	0x40020440
 8005aac:	40020458 	.word	0x40020458
 8005ab0:	40020470 	.word	0x40020470
 8005ab4:	40020488 	.word	0x40020488
 8005ab8:	400204a0 	.word	0x400204a0
 8005abc:	400204b8 	.word	0x400204b8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bf14      	ite	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	2300      	moveq	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8087 	beq.w	8005be8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d139      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0216 	bic.w	r2, r2, #22
 8005b04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695a      	ldr	r2, [r3, #20]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <HAL_DMA_IRQHandler+0x736>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0208 	bic.w	r2, r2, #8
 8005b34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	223f      	movs	r2, #63	@ 0x3f
 8005b40:	409a      	lsls	r2, r3
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 834a 	beq.w	80061f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
          }
          return;
 8005b68:	e344      	b.n	80061f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d108      	bne.n	8005b98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d02c      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
 8005b96:	e027      	b.n	8005be8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d023      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
 8005ba8:	e01e      	b.n	8005be8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10f      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0210 	bic.w	r2, r2, #16
 8005bc6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8306 	beq.w	80061fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8088 	beq.w	8005d10 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2204      	movs	r2, #4
 8005c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a7a      	ldr	r2, [pc, #488]	@ (8005df8 <HAL_DMA_IRQHandler+0xa08>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d04a      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a79      	ldr	r2, [pc, #484]	@ (8005dfc <HAL_DMA_IRQHandler+0xa0c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d045      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a77      	ldr	r2, [pc, #476]	@ (8005e00 <HAL_DMA_IRQHandler+0xa10>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d040      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a76      	ldr	r2, [pc, #472]	@ (8005e04 <HAL_DMA_IRQHandler+0xa14>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d03b      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a74      	ldr	r2, [pc, #464]	@ (8005e08 <HAL_DMA_IRQHandler+0xa18>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d036      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a73      	ldr	r2, [pc, #460]	@ (8005e0c <HAL_DMA_IRQHandler+0xa1c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d031      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a71      	ldr	r2, [pc, #452]	@ (8005e10 <HAL_DMA_IRQHandler+0xa20>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d02c      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a70      	ldr	r2, [pc, #448]	@ (8005e14 <HAL_DMA_IRQHandler+0xa24>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d027      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8005e18 <HAL_DMA_IRQHandler+0xa28>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d022      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6d      	ldr	r2, [pc, #436]	@ (8005e1c <HAL_DMA_IRQHandler+0xa2c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d01d      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a6b      	ldr	r2, [pc, #428]	@ (8005e20 <HAL_DMA_IRQHandler+0xa30>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d018      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a6a      	ldr	r2, [pc, #424]	@ (8005e24 <HAL_DMA_IRQHandler+0xa34>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a68      	ldr	r2, [pc, #416]	@ (8005e28 <HAL_DMA_IRQHandler+0xa38>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00e      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a67      	ldr	r2, [pc, #412]	@ (8005e2c <HAL_DMA_IRQHandler+0xa3c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a65      	ldr	r2, [pc, #404]	@ (8005e30 <HAL_DMA_IRQHandler+0xa40>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x8b8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a64      	ldr	r2, [pc, #400]	@ (8005e34 <HAL_DMA_IRQHandler+0xa44>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d108      	bne.n	8005cba <HAL_DMA_IRQHandler+0x8ca>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e007      	b.n	8005cca <HAL_DMA_IRQHandler+0x8da>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d307      	bcc.n	8005ce6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f2      	bne.n	8005cca <HAL_DMA_IRQHandler+0x8da>
 8005ce4:	e000      	b.n	8005ce8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ce6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005cfe:	e003      	b.n	8005d08 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8272 	beq.w	80061fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	4798      	blx	r3
 8005d22:	e26c      	b.n	80061fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a43      	ldr	r2, [pc, #268]	@ (8005e38 <HAL_DMA_IRQHandler+0xa48>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x984>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a42      	ldr	r2, [pc, #264]	@ (8005e3c <HAL_DMA_IRQHandler+0xa4c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d01d      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x984>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a40      	ldr	r2, [pc, #256]	@ (8005e40 <HAL_DMA_IRQHandler+0xa50>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x984>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a3f      	ldr	r2, [pc, #252]	@ (8005e44 <HAL_DMA_IRQHandler+0xa54>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x984>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a3d      	ldr	r2, [pc, #244]	@ (8005e48 <HAL_DMA_IRQHandler+0xa58>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x984>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e4c <HAL_DMA_IRQHandler+0xa5c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x984>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3a      	ldr	r2, [pc, #232]	@ (8005e50 <HAL_DMA_IRQHandler+0xa60>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x984>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a39      	ldr	r2, [pc, #228]	@ (8005e54 <HAL_DMA_IRQHandler+0xa64>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d101      	bne.n	8005d78 <HAL_DMA_IRQHandler+0x988>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <HAL_DMA_IRQHandler+0x98a>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 823f 	beq.w	80061fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2204      	movs	r2, #4
 8005d92:	409a      	lsls	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80cd 	beq.w	8005f38 <HAL_DMA_IRQHandler+0xb48>
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80c7 	beq.w	8005f38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2204      	movs	r2, #4
 8005db4:	409a      	lsls	r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d049      	beq.n	8005e58 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8210 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de0:	e20a      	b.n	80061f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8206 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005df4:	e200      	b.n	80061f8 <HAL_DMA_IRQHandler+0xe08>
 8005df6:	bf00      	nop
 8005df8:	40020010 	.word	0x40020010
 8005dfc:	40020028 	.word	0x40020028
 8005e00:	40020040 	.word	0x40020040
 8005e04:	40020058 	.word	0x40020058
 8005e08:	40020070 	.word	0x40020070
 8005e0c:	40020088 	.word	0x40020088
 8005e10:	400200a0 	.word	0x400200a0
 8005e14:	400200b8 	.word	0x400200b8
 8005e18:	40020410 	.word	0x40020410
 8005e1c:	40020428 	.word	0x40020428
 8005e20:	40020440 	.word	0x40020440
 8005e24:	40020458 	.word	0x40020458
 8005e28:	40020470 	.word	0x40020470
 8005e2c:	40020488 	.word	0x40020488
 8005e30:	400204a0 	.word	0x400204a0
 8005e34:	400204b8 	.word	0x400204b8
 8005e38:	58025408 	.word	0x58025408
 8005e3c:	5802541c 	.word	0x5802541c
 8005e40:	58025430 	.word	0x58025430
 8005e44:	58025444 	.word	0x58025444
 8005e48:	58025458 	.word	0x58025458
 8005e4c:	5802546c 	.word	0x5802546c
 8005e50:	58025480 	.word	0x58025480
 8005e54:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d160      	bne.n	8005f24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7f      	ldr	r2, [pc, #508]	@ (8006064 <HAL_DMA_IRQHandler+0xc74>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d04a      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a7d      	ldr	r2, [pc, #500]	@ (8006068 <HAL_DMA_IRQHandler+0xc78>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d045      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800606c <HAL_DMA_IRQHandler+0xc7c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d040      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a7a      	ldr	r2, [pc, #488]	@ (8006070 <HAL_DMA_IRQHandler+0xc80>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d03b      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a79      	ldr	r2, [pc, #484]	@ (8006074 <HAL_DMA_IRQHandler+0xc84>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d036      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a77      	ldr	r2, [pc, #476]	@ (8006078 <HAL_DMA_IRQHandler+0xc88>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d031      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a76      	ldr	r2, [pc, #472]	@ (800607c <HAL_DMA_IRQHandler+0xc8c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d02c      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a74      	ldr	r2, [pc, #464]	@ (8006080 <HAL_DMA_IRQHandler+0xc90>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d027      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a73      	ldr	r2, [pc, #460]	@ (8006084 <HAL_DMA_IRQHandler+0xc94>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d022      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a71      	ldr	r2, [pc, #452]	@ (8006088 <HAL_DMA_IRQHandler+0xc98>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d01d      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a70      	ldr	r2, [pc, #448]	@ (800608c <HAL_DMA_IRQHandler+0xc9c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8006090 <HAL_DMA_IRQHandler+0xca0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6d      	ldr	r2, [pc, #436]	@ (8006094 <HAL_DMA_IRQHandler+0xca4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8006098 <HAL_DMA_IRQHandler+0xca8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800609c <HAL_DMA_IRQHandler+0xcac>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xb12>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a68      	ldr	r2, [pc, #416]	@ (80060a0 <HAL_DMA_IRQHandler+0xcb0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d108      	bne.n	8005f14 <HAL_DMA_IRQHandler+0xb24>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0208 	bic.w	r2, r2, #8
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e007      	b.n	8005f24 <HAL_DMA_IRQHandler+0xb34>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0204 	bic.w	r2, r2, #4
 8005f22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8165 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f36:	e15f      	b.n	80061f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2202      	movs	r2, #2
 8005f42:	409a      	lsls	r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80c5 	beq.w	80060d8 <HAL_DMA_IRQHandler+0xce8>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80bf 	beq.w	80060d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2202      	movs	r2, #2
 8005f64:	409a      	lsls	r2, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d018      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 813a 	beq.w	80061fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f90:	e134      	b.n	80061fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8130 	beq.w	80061fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fa4:	e12a      	b.n	80061fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 8089 	bne.w	80060c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8006064 <HAL_DMA_IRQHandler+0xc74>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d04a      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a29      	ldr	r2, [pc, #164]	@ (8006068 <HAL_DMA_IRQHandler+0xc78>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d045      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a28      	ldr	r2, [pc, #160]	@ (800606c <HAL_DMA_IRQHandler+0xc7c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d040      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a26      	ldr	r2, [pc, #152]	@ (8006070 <HAL_DMA_IRQHandler+0xc80>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d03b      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a25      	ldr	r2, [pc, #148]	@ (8006074 <HAL_DMA_IRQHandler+0xc84>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d036      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a23      	ldr	r2, [pc, #140]	@ (8006078 <HAL_DMA_IRQHandler+0xc88>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a22      	ldr	r2, [pc, #136]	@ (800607c <HAL_DMA_IRQHandler+0xc8c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d02c      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	@ (8006080 <HAL_DMA_IRQHandler+0xc90>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d027      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1f      	ldr	r2, [pc, #124]	@ (8006084 <HAL_DMA_IRQHandler+0xc94>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1d      	ldr	r2, [pc, #116]	@ (8006088 <HAL_DMA_IRQHandler+0xc98>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01d      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1c      	ldr	r2, [pc, #112]	@ (800608c <HAL_DMA_IRQHandler+0xc9c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1a      	ldr	r2, [pc, #104]	@ (8006090 <HAL_DMA_IRQHandler+0xca0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a19      	ldr	r2, [pc, #100]	@ (8006094 <HAL_DMA_IRQHandler+0xca4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a17      	ldr	r2, [pc, #92]	@ (8006098 <HAL_DMA_IRQHandler+0xca8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a16      	ldr	r2, [pc, #88]	@ (800609c <HAL_DMA_IRQHandler+0xcac>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_DMA_IRQHandler+0xc62>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a14      	ldr	r2, [pc, #80]	@ (80060a0 <HAL_DMA_IRQHandler+0xcb0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d128      	bne.n	80060a4 <HAL_DMA_IRQHandler+0xcb4>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0214 	bic.w	r2, r2, #20
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e027      	b.n	80060b4 <HAL_DMA_IRQHandler+0xcc4>
 8006064:	40020010 	.word	0x40020010
 8006068:	40020028 	.word	0x40020028
 800606c:	40020040 	.word	0x40020040
 8006070:	40020058 	.word	0x40020058
 8006074:	40020070 	.word	0x40020070
 8006078:	40020088 	.word	0x40020088
 800607c:	400200a0 	.word	0x400200a0
 8006080:	400200b8 	.word	0x400200b8
 8006084:	40020410 	.word	0x40020410
 8006088:	40020428 	.word	0x40020428
 800608c:	40020440 	.word	0x40020440
 8006090:	40020458 	.word	0x40020458
 8006094:	40020470 	.word	0x40020470
 8006098:	40020488 	.word	0x40020488
 800609c:	400204a0 	.word	0x400204a0
 80060a0:	400204b8 	.word	0x400204b8
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 020a 	bic.w	r2, r2, #10
 80060b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 8097 	beq.w	80061fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060d6:	e091      	b.n	80061fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2208      	movs	r2, #8
 80060e2:	409a      	lsls	r2, r3
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8088 	beq.w	80061fe <HAL_DMA_IRQHandler+0xe0e>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8082 	beq.w	80061fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a41      	ldr	r2, [pc, #260]	@ (8006204 <HAL_DMA_IRQHandler+0xe14>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d04a      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a3f      	ldr	r2, [pc, #252]	@ (8006208 <HAL_DMA_IRQHandler+0xe18>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d045      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a3e      	ldr	r2, [pc, #248]	@ (800620c <HAL_DMA_IRQHandler+0xe1c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d040      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a3c      	ldr	r2, [pc, #240]	@ (8006210 <HAL_DMA_IRQHandler+0xe20>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d03b      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a3b      	ldr	r2, [pc, #236]	@ (8006214 <HAL_DMA_IRQHandler+0xe24>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d036      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a39      	ldr	r2, [pc, #228]	@ (8006218 <HAL_DMA_IRQHandler+0xe28>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d031      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a38      	ldr	r2, [pc, #224]	@ (800621c <HAL_DMA_IRQHandler+0xe2c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d02c      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a36      	ldr	r2, [pc, #216]	@ (8006220 <HAL_DMA_IRQHandler+0xe30>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d027      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a35      	ldr	r2, [pc, #212]	@ (8006224 <HAL_DMA_IRQHandler+0xe34>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d022      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a33      	ldr	r2, [pc, #204]	@ (8006228 <HAL_DMA_IRQHandler+0xe38>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01d      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a32      	ldr	r2, [pc, #200]	@ (800622c <HAL_DMA_IRQHandler+0xe3c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d018      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a30      	ldr	r2, [pc, #192]	@ (8006230 <HAL_DMA_IRQHandler+0xe40>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2f      	ldr	r2, [pc, #188]	@ (8006234 <HAL_DMA_IRQHandler+0xe44>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00e      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a2d      	ldr	r2, [pc, #180]	@ (8006238 <HAL_DMA_IRQHandler+0xe48>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a2c      	ldr	r2, [pc, #176]	@ (800623c <HAL_DMA_IRQHandler+0xe4c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_DMA_IRQHandler+0xdaa>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a2a      	ldr	r2, [pc, #168]	@ (8006240 <HAL_DMA_IRQHandler+0xe50>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d108      	bne.n	80061ac <HAL_DMA_IRQHandler+0xdbc>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 021c 	bic.w	r2, r2, #28
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e007      	b.n	80061bc <HAL_DMA_IRQHandler+0xdcc>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 020e 	bic.w	r2, r2, #14
 80061ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2201      	movs	r2, #1
 80061c6:	409a      	lsls	r2, r3
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
 80061f2:	e004      	b.n	80061fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061f4:	bf00      	nop
 80061f6:	e002      	b.n	80061fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f8:	bf00      	nop
 80061fa:	e000      	b.n	80061fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061fe:	3728      	adds	r7, #40	@ 0x28
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40020010 	.word	0x40020010
 8006208:	40020028 	.word	0x40020028
 800620c:	40020040 	.word	0x40020040
 8006210:	40020058 	.word	0x40020058
 8006214:	40020070 	.word	0x40020070
 8006218:	40020088 	.word	0x40020088
 800621c:	400200a0 	.word	0x400200a0
 8006220:	400200b8 	.word	0x400200b8
 8006224:	40020410 	.word	0x40020410
 8006228:	40020428 	.word	0x40020428
 800622c:	40020440 	.word	0x40020440
 8006230:	40020458 	.word	0x40020458
 8006234:	40020470 	.word	0x40020470
 8006238:	40020488 	.word	0x40020488
 800623c:	400204a0 	.word	0x400204a0
 8006240:	400204b8 	.word	0x400204b8

08006244 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006274:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7f      	ldr	r2, [pc, #508]	@ (8006478 <DMA_SetConfig+0x21c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d072      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7d      	ldr	r2, [pc, #500]	@ (800647c <DMA_SetConfig+0x220>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d06d      	beq.n	8006366 <DMA_SetConfig+0x10a>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a7c      	ldr	r2, [pc, #496]	@ (8006480 <DMA_SetConfig+0x224>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d068      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a7a      	ldr	r2, [pc, #488]	@ (8006484 <DMA_SetConfig+0x228>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d063      	beq.n	8006366 <DMA_SetConfig+0x10a>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a79      	ldr	r2, [pc, #484]	@ (8006488 <DMA_SetConfig+0x22c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d05e      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a77      	ldr	r2, [pc, #476]	@ (800648c <DMA_SetConfig+0x230>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d059      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a76      	ldr	r2, [pc, #472]	@ (8006490 <DMA_SetConfig+0x234>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d054      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a74      	ldr	r2, [pc, #464]	@ (8006494 <DMA_SetConfig+0x238>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04f      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a73      	ldr	r2, [pc, #460]	@ (8006498 <DMA_SetConfig+0x23c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d04a      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a71      	ldr	r2, [pc, #452]	@ (800649c <DMA_SetConfig+0x240>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d045      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a70      	ldr	r2, [pc, #448]	@ (80064a0 <DMA_SetConfig+0x244>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d040      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a6e      	ldr	r2, [pc, #440]	@ (80064a4 <DMA_SetConfig+0x248>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d03b      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a6d      	ldr	r2, [pc, #436]	@ (80064a8 <DMA_SetConfig+0x24c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d036      	beq.n	8006366 <DMA_SetConfig+0x10a>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a6b      	ldr	r2, [pc, #428]	@ (80064ac <DMA_SetConfig+0x250>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d031      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a6a      	ldr	r2, [pc, #424]	@ (80064b0 <DMA_SetConfig+0x254>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d02c      	beq.n	8006366 <DMA_SetConfig+0x10a>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a68      	ldr	r2, [pc, #416]	@ (80064b4 <DMA_SetConfig+0x258>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d027      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a67      	ldr	r2, [pc, #412]	@ (80064b8 <DMA_SetConfig+0x25c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d022      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a65      	ldr	r2, [pc, #404]	@ (80064bc <DMA_SetConfig+0x260>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d01d      	beq.n	8006366 <DMA_SetConfig+0x10a>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a64      	ldr	r2, [pc, #400]	@ (80064c0 <DMA_SetConfig+0x264>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d018      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a62      	ldr	r2, [pc, #392]	@ (80064c4 <DMA_SetConfig+0x268>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <DMA_SetConfig+0x10a>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a61      	ldr	r2, [pc, #388]	@ (80064c8 <DMA_SetConfig+0x26c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00e      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5f      	ldr	r2, [pc, #380]	@ (80064cc <DMA_SetConfig+0x270>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d009      	beq.n	8006366 <DMA_SetConfig+0x10a>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a5e      	ldr	r2, [pc, #376]	@ (80064d0 <DMA_SetConfig+0x274>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <DMA_SetConfig+0x10a>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a5c      	ldr	r2, [pc, #368]	@ (80064d4 <DMA_SetConfig+0x278>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <DMA_SetConfig+0x10e>
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <DMA_SetConfig+0x110>
 800636a:	2300      	movs	r3, #0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006378:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800638a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a39      	ldr	r2, [pc, #228]	@ (8006478 <DMA_SetConfig+0x21c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d04a      	beq.n	800642c <DMA_SetConfig+0x1d0>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a38      	ldr	r2, [pc, #224]	@ (800647c <DMA_SetConfig+0x220>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d045      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a36      	ldr	r2, [pc, #216]	@ (8006480 <DMA_SetConfig+0x224>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d040      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a35      	ldr	r2, [pc, #212]	@ (8006484 <DMA_SetConfig+0x228>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d03b      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a33      	ldr	r2, [pc, #204]	@ (8006488 <DMA_SetConfig+0x22c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d036      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a32      	ldr	r2, [pc, #200]	@ (800648c <DMA_SetConfig+0x230>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d031      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a30      	ldr	r2, [pc, #192]	@ (8006490 <DMA_SetConfig+0x234>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d02c      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006494 <DMA_SetConfig+0x238>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d027      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006498 <DMA_SetConfig+0x23c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d022      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2c      	ldr	r2, [pc, #176]	@ (800649c <DMA_SetConfig+0x240>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d01d      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a2a      	ldr	r2, [pc, #168]	@ (80064a0 <DMA_SetConfig+0x244>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <DMA_SetConfig+0x1d0>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a29      	ldr	r2, [pc, #164]	@ (80064a4 <DMA_SetConfig+0x248>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <DMA_SetConfig+0x1d0>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a27      	ldr	r2, [pc, #156]	@ (80064a8 <DMA_SetConfig+0x24c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00e      	beq.n	800642c <DMA_SetConfig+0x1d0>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a26      	ldr	r2, [pc, #152]	@ (80064ac <DMA_SetConfig+0x250>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <DMA_SetConfig+0x1d0>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a24      	ldr	r2, [pc, #144]	@ (80064b0 <DMA_SetConfig+0x254>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <DMA_SetConfig+0x1d0>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a23      	ldr	r2, [pc, #140]	@ (80064b4 <DMA_SetConfig+0x258>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <DMA_SetConfig+0x1d4>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <DMA_SetConfig+0x1d6>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d059      	beq.n	80064ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	223f      	movs	r2, #63	@ 0x3f
 8006440:	409a      	lsls	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006454:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b40      	cmp	r3, #64	@ 0x40
 8006464:	d138      	bne.n	80064d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006476:	e086      	b.n	8006586 <DMA_SetConfig+0x32a>
 8006478:	40020010 	.word	0x40020010
 800647c:	40020028 	.word	0x40020028
 8006480:	40020040 	.word	0x40020040
 8006484:	40020058 	.word	0x40020058
 8006488:	40020070 	.word	0x40020070
 800648c:	40020088 	.word	0x40020088
 8006490:	400200a0 	.word	0x400200a0
 8006494:	400200b8 	.word	0x400200b8
 8006498:	40020410 	.word	0x40020410
 800649c:	40020428 	.word	0x40020428
 80064a0:	40020440 	.word	0x40020440
 80064a4:	40020458 	.word	0x40020458
 80064a8:	40020470 	.word	0x40020470
 80064ac:	40020488 	.word	0x40020488
 80064b0:	400204a0 	.word	0x400204a0
 80064b4:	400204b8 	.word	0x400204b8
 80064b8:	58025408 	.word	0x58025408
 80064bc:	5802541c 	.word	0x5802541c
 80064c0:	58025430 	.word	0x58025430
 80064c4:	58025444 	.word	0x58025444
 80064c8:	58025458 	.word	0x58025458
 80064cc:	5802546c 	.word	0x5802546c
 80064d0:	58025480 	.word	0x58025480
 80064d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]
}
 80064e8:	e04d      	b.n	8006586 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a29      	ldr	r2, [pc, #164]	@ (8006594 <DMA_SetConfig+0x338>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d022      	beq.n	800653a <DMA_SetConfig+0x2de>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a27      	ldr	r2, [pc, #156]	@ (8006598 <DMA_SetConfig+0x33c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d01d      	beq.n	800653a <DMA_SetConfig+0x2de>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a26      	ldr	r2, [pc, #152]	@ (800659c <DMA_SetConfig+0x340>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d018      	beq.n	800653a <DMA_SetConfig+0x2de>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a24      	ldr	r2, [pc, #144]	@ (80065a0 <DMA_SetConfig+0x344>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <DMA_SetConfig+0x2de>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a23      	ldr	r2, [pc, #140]	@ (80065a4 <DMA_SetConfig+0x348>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00e      	beq.n	800653a <DMA_SetConfig+0x2de>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a21      	ldr	r2, [pc, #132]	@ (80065a8 <DMA_SetConfig+0x34c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d009      	beq.n	800653a <DMA_SetConfig+0x2de>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a20      	ldr	r2, [pc, #128]	@ (80065ac <DMA_SetConfig+0x350>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <DMA_SetConfig+0x2de>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1e      	ldr	r2, [pc, #120]	@ (80065b0 <DMA_SetConfig+0x354>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d101      	bne.n	800653e <DMA_SetConfig+0x2e2>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <DMA_SetConfig+0x2e4>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d020      	beq.n	8006586 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	2201      	movs	r2, #1
 800654e:	409a      	lsls	r2, r3
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b40      	cmp	r3, #64	@ 0x40
 8006562:	d108      	bne.n	8006576 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	60da      	str	r2, [r3, #12]
}
 8006574:	e007      	b.n	8006586 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	60da      	str	r2, [r3, #12]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	58025408 	.word	0x58025408
 8006598:	5802541c 	.word	0x5802541c
 800659c:	58025430 	.word	0x58025430
 80065a0:	58025444 	.word	0x58025444
 80065a4:	58025458 	.word	0x58025458
 80065a8:	5802546c 	.word	0x5802546c
 80065ac:	58025480 	.word	0x58025480
 80065b0:	58025494 	.word	0x58025494

080065b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a42      	ldr	r2, [pc, #264]	@ (80066cc <DMA_CalcBaseAndBitshift+0x118>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d04a      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a41      	ldr	r2, [pc, #260]	@ (80066d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d045      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a3f      	ldr	r2, [pc, #252]	@ (80066d4 <DMA_CalcBaseAndBitshift+0x120>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d040      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a3e      	ldr	r2, [pc, #248]	@ (80066d8 <DMA_CalcBaseAndBitshift+0x124>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d03b      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a3c      	ldr	r2, [pc, #240]	@ (80066dc <DMA_CalcBaseAndBitshift+0x128>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d036      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a3b      	ldr	r2, [pc, #236]	@ (80066e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d031      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a39      	ldr	r2, [pc, #228]	@ (80066e4 <DMA_CalcBaseAndBitshift+0x130>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d02c      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a38      	ldr	r2, [pc, #224]	@ (80066e8 <DMA_CalcBaseAndBitshift+0x134>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d027      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a36      	ldr	r2, [pc, #216]	@ (80066ec <DMA_CalcBaseAndBitshift+0x138>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d022      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a35      	ldr	r2, [pc, #212]	@ (80066f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d01d      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a33      	ldr	r2, [pc, #204]	@ (80066f4 <DMA_CalcBaseAndBitshift+0x140>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d018      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a32      	ldr	r2, [pc, #200]	@ (80066f8 <DMA_CalcBaseAndBitshift+0x144>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d013      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a30      	ldr	r2, [pc, #192]	@ (80066fc <DMA_CalcBaseAndBitshift+0x148>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00e      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a2f      	ldr	r2, [pc, #188]	@ (8006700 <DMA_CalcBaseAndBitshift+0x14c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d009      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2d      	ldr	r2, [pc, #180]	@ (8006704 <DMA_CalcBaseAndBitshift+0x150>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <DMA_CalcBaseAndBitshift+0xa8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2c      	ldr	r2, [pc, #176]	@ (8006708 <DMA_CalcBaseAndBitshift+0x154>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d101      	bne.n	8006660 <DMA_CalcBaseAndBitshift+0xac>
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <DMA_CalcBaseAndBitshift+0xae>
 8006660:	2300      	movs	r3, #0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d024      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	3b10      	subs	r3, #16
 800666e:	4a27      	ldr	r2, [pc, #156]	@ (800670c <DMA_CalcBaseAndBitshift+0x158>)
 8006670:	fba2 2303 	umull	r2, r3, r2, r3
 8006674:	091b      	lsrs	r3, r3, #4
 8006676:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	4a24      	ldr	r2, [pc, #144]	@ (8006710 <DMA_CalcBaseAndBitshift+0x15c>)
 8006680:	5cd3      	ldrb	r3, [r2, r3]
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d908      	bls.n	80066a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	4b1f      	ldr	r3, [pc, #124]	@ (8006714 <DMA_CalcBaseAndBitshift+0x160>)
 8006696:	4013      	ands	r3, r2
 8006698:	1d1a      	adds	r2, r3, #4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	659a      	str	r2, [r3, #88]	@ 0x58
 800669e:	e00d      	b.n	80066bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006714 <DMA_CalcBaseAndBitshift+0x160>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ae:	e005      	b.n	80066bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40020010 	.word	0x40020010
 80066d0:	40020028 	.word	0x40020028
 80066d4:	40020040 	.word	0x40020040
 80066d8:	40020058 	.word	0x40020058
 80066dc:	40020070 	.word	0x40020070
 80066e0:	40020088 	.word	0x40020088
 80066e4:	400200a0 	.word	0x400200a0
 80066e8:	400200b8 	.word	0x400200b8
 80066ec:	40020410 	.word	0x40020410
 80066f0:	40020428 	.word	0x40020428
 80066f4:	40020440 	.word	0x40020440
 80066f8:	40020458 	.word	0x40020458
 80066fc:	40020470 	.word	0x40020470
 8006700:	40020488 	.word	0x40020488
 8006704:	400204a0 	.word	0x400204a0
 8006708:	400204b8 	.word	0x400204b8
 800670c:	aaaaaaab 	.word	0xaaaaaaab
 8006710:	08020c14 	.word	0x08020c14
 8006714:	fffffc00 	.word	0xfffffc00

08006718 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d120      	bne.n	800676e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	2b03      	cmp	r3, #3
 8006732:	d858      	bhi.n	80067e6 <DMA_CheckFifoParam+0xce>
 8006734:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <DMA_CheckFifoParam+0x24>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800675f 	.word	0x0800675f
 8006744:	0800674d 	.word	0x0800674d
 8006748:	080067e7 	.word	0x080067e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d048      	beq.n	80067ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800675c:	e045      	b.n	80067ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006766:	d142      	bne.n	80067ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800676c:	e03f      	b.n	80067ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006776:	d123      	bne.n	80067c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	2b03      	cmp	r3, #3
 800677e:	d838      	bhi.n	80067f2 <DMA_CheckFifoParam+0xda>
 8006780:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <DMA_CheckFifoParam+0x70>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	08006799 	.word	0x08006799
 800678c:	0800679f 	.word	0x0800679f
 8006790:	08006799 	.word	0x08006799
 8006794:	080067b1 	.word	0x080067b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	73fb      	strb	r3, [r7, #15]
        break;
 800679c:	e030      	b.n	8006800 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d025      	beq.n	80067f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ae:	e022      	b.n	80067f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067b8:	d11f      	bne.n	80067fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067be:	e01c      	b.n	80067fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d902      	bls.n	80067ce <DMA_CheckFifoParam+0xb6>
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d003      	beq.n	80067d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067cc:	e018      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
        break;
 80067d2:	e015      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
    break;
 80067e4:	e00b      	b.n	80067fe <DMA_CheckFifoParam+0xe6>
        break;
 80067e6:	bf00      	nop
 80067e8:	e00a      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
        break;
 80067ea:	bf00      	nop
 80067ec:	e008      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
        break;
 80067ee:	bf00      	nop
 80067f0:	e006      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
        break;
 80067f2:	bf00      	nop
 80067f4:	e004      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
        break;
 80067f6:	bf00      	nop
 80067f8:	e002      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
        break;
 80067fa:	bf00      	nop
 80067fc:	e000      	b.n	8006800 <DMA_CheckFifoParam+0xe8>
    break;
 80067fe:	bf00      	nop
    }
  }

  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop

08006810 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a38      	ldr	r2, [pc, #224]	@ (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a36      	ldr	r2, [pc, #216]	@ (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01d      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a35      	ldr	r2, [pc, #212]	@ (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d018      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a33      	ldr	r2, [pc, #204]	@ (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a32      	ldr	r2, [pc, #200]	@ (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a30      	ldr	r2, [pc, #192]	@ (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d009      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a2f      	ldr	r2, [pc, #188]	@ (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a2d      	ldr	r2, [pc, #180]	@ (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d101      	bne.n	8006872 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006872:	2300      	movs	r3, #0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01a      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	3b08      	subs	r3, #8
 8006880:	4a28      	ldr	r2, [pc, #160]	@ (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	091b      	lsrs	r3, r3, #4
 8006888:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4b26      	ldr	r3, [pc, #152]	@ (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a24      	ldr	r2, [pc, #144]	@ (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800689c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f003 031f 	and.w	r3, r3, #31
 80068a4:	2201      	movs	r2, #1
 80068a6:	409a      	lsls	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068ac:	e024      	b.n	80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	3b10      	subs	r3, #16
 80068b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	091b      	lsrs	r3, r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d806      	bhi.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d902      	bls.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3308      	adds	r3, #8
 80068d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4b18      	ldr	r3, [pc, #96]	@ (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a16      	ldr	r2, [pc, #88]	@ (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	58025408 	.word	0x58025408
 8006908:	5802541c 	.word	0x5802541c
 800690c:	58025430 	.word	0x58025430
 8006910:	58025444 	.word	0x58025444
 8006914:	58025458 	.word	0x58025458
 8006918:	5802546c 	.word	0x5802546c
 800691c:	58025480 	.word	0x58025480
 8006920:	58025494 	.word	0x58025494
 8006924:	cccccccd 	.word	0xcccccccd
 8006928:	16009600 	.word	0x16009600
 800692c:	58025880 	.word	0x58025880
 8006930:	aaaaaaab 	.word	0xaaaaaaab
 8006934:	400204b8 	.word	0x400204b8
 8006938:	4002040f 	.word	0x4002040f
 800693c:	10008200 	.word	0x10008200
 8006940:	40020880 	.word	0x40020880

08006944 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d04a      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d847      	bhi.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a25      	ldr	r2, [pc, #148]	@ (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d022      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a24      	ldr	r2, [pc, #144]	@ (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d01d      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a22      	ldr	r2, [pc, #136]	@ (8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d018      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a21      	ldr	r2, [pc, #132]	@ (8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d013      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00e      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1e      	ldr	r2, [pc, #120]	@ (8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d009      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d101      	bne.n	80069b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069b4:	2300      	movs	r3, #0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4b17      	ldr	r3, [pc, #92]	@ (8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a15      	ldr	r2, [pc, #84]	@ (8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80069ce:	e009      	b.n	80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4b14      	ldr	r3, [pc, #80]	@ (8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	461a      	mov	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a11      	ldr	r2, [pc, #68]	@ (8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	2201      	movs	r2, #1
 80069ea:	409a      	lsls	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	58025408 	.word	0x58025408
 8006a00:	5802541c 	.word	0x5802541c
 8006a04:	58025430 	.word	0x58025430
 8006a08:	58025444 	.word	0x58025444
 8006a0c:	58025458 	.word	0x58025458
 8006a10:	5802546c 	.word	0x5802546c
 8006a14:	58025480 	.word	0x58025480
 8006a18:	58025494 	.word	0x58025494
 8006a1c:	1600963f 	.word	0x1600963f
 8006a20:	58025940 	.word	0x58025940
 8006a24:	1000823f 	.word	0x1000823f
 8006a28:	40020940 	.word	0x40020940

08006a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	@ 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a3a:	4b89      	ldr	r3, [pc, #548]	@ (8006c60 <HAL_GPIO_Init+0x234>)
 8006a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a3e:	e194      	b.n	8006d6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	2101      	movs	r1, #1
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8186 	beq.w	8006d64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d005      	beq.n	8006a70 <HAL_GPIO_Init+0x44>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d130      	bne.n	8006ad2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	f003 0201 	and.w	r2, r3, #1
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d017      	beq.n	8006b0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	2203      	movs	r2, #3
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d123      	bne.n	8006b62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	08da      	lsrs	r2, r3, #3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3208      	adds	r2, #8
 8006b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	220f      	movs	r2, #15
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43db      	mvns	r3, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	08da      	lsrs	r2, r3, #3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3208      	adds	r2, #8
 8006b5c:	69b9      	ldr	r1, [r7, #24]
 8006b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f003 0203 	and.w	r2, r3, #3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 80e0 	beq.w	8006d64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8006c64 <HAL_GPIO_Init+0x238>)
 8006ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006baa:	4a2e      	ldr	r2, [pc, #184]	@ (8006c64 <HAL_GPIO_Init+0x238>)
 8006bac:	f043 0302 	orr.w	r3, r3, #2
 8006bb0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006c64 <HAL_GPIO_Init+0x238>)
 8006bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bc2:	4a29      	ldr	r2, [pc, #164]	@ (8006c68 <HAL_GPIO_Init+0x23c>)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	220f      	movs	r2, #15
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a20      	ldr	r2, [pc, #128]	@ (8006c6c <HAL_GPIO_Init+0x240>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d052      	beq.n	8006c94 <HAL_GPIO_Init+0x268>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8006c70 <HAL_GPIO_Init+0x244>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d031      	beq.n	8006c5a <HAL_GPIO_Init+0x22e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c74 <HAL_GPIO_Init+0x248>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d02b      	beq.n	8006c56 <HAL_GPIO_Init+0x22a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a1d      	ldr	r2, [pc, #116]	@ (8006c78 <HAL_GPIO_Init+0x24c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d025      	beq.n	8006c52 <HAL_GPIO_Init+0x226>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a1c      	ldr	r2, [pc, #112]	@ (8006c7c <HAL_GPIO_Init+0x250>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01f      	beq.n	8006c4e <HAL_GPIO_Init+0x222>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a1b      	ldr	r2, [pc, #108]	@ (8006c80 <HAL_GPIO_Init+0x254>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d019      	beq.n	8006c4a <HAL_GPIO_Init+0x21e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1a      	ldr	r2, [pc, #104]	@ (8006c84 <HAL_GPIO_Init+0x258>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <HAL_GPIO_Init+0x21a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a19      	ldr	r2, [pc, #100]	@ (8006c88 <HAL_GPIO_Init+0x25c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00d      	beq.n	8006c42 <HAL_GPIO_Init+0x216>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a18      	ldr	r2, [pc, #96]	@ (8006c8c <HAL_GPIO_Init+0x260>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <HAL_GPIO_Init+0x212>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a17      	ldr	r2, [pc, #92]	@ (8006c90 <HAL_GPIO_Init+0x264>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d101      	bne.n	8006c3a <HAL_GPIO_Init+0x20e>
 8006c36:	2309      	movs	r3, #9
 8006c38:	e02d      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	e02b      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	e029      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c42:	2307      	movs	r3, #7
 8006c44:	e027      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c46:	2306      	movs	r3, #6
 8006c48:	e025      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c4a:	2305      	movs	r3, #5
 8006c4c:	e023      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c4e:	2304      	movs	r3, #4
 8006c50:	e021      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c52:	2303      	movs	r3, #3
 8006c54:	e01f      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e01d      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e01b      	b.n	8006c96 <HAL_GPIO_Init+0x26a>
 8006c5e:	bf00      	nop
 8006c60:	58000080 	.word	0x58000080
 8006c64:	58024400 	.word	0x58024400
 8006c68:	58000400 	.word	0x58000400
 8006c6c:	58020000 	.word	0x58020000
 8006c70:	58020400 	.word	0x58020400
 8006c74:	58020800 	.word	0x58020800
 8006c78:	58020c00 	.word	0x58020c00
 8006c7c:	58021000 	.word	0x58021000
 8006c80:	58021400 	.word	0x58021400
 8006c84:	58021800 	.word	0x58021800
 8006c88:	58021c00 	.word	0x58021c00
 8006c8c:	58022000 	.word	0x58022000
 8006c90:	58022400 	.word	0x58022400
 8006c94:	2300      	movs	r3, #0
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	f002 0203 	and.w	r2, r2, #3
 8006c9c:	0092      	lsls	r2, r2, #2
 8006c9e:	4093      	lsls	r3, r2
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ca6:	4938      	ldr	r1, [pc, #224]	@ (8006d88 <HAL_GPIO_Init+0x35c>)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	3302      	adds	r3, #2
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	43db      	mvns	r3, r3
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	43db      	mvns	r3, r3
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4013      	ands	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f ae63 	bne.w	8006a40 <HAL_GPIO_Init+0x14>
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	bf00      	nop
 8006d7e:	3724      	adds	r7, #36	@ 0x24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	58000400 	.word	0x58000400

08006d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	807b      	strh	r3, [r7, #2]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d9c:	787b      	ldrb	r3, [r7, #1]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006da2:	887a      	ldrh	r2, [r7, #2]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006da8:	e003      	b.n	8006db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006daa:	887b      	ldrh	r3, [r7, #2]
 8006dac:	041a      	lsls	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	619a      	str	r2, [r3, #24]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d008      	beq.n	8006dea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 f804 	bl	8006df2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	4603      	mov	r3, r0
 8006dfa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e10:	4b19      	ldr	r3, [pc, #100]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d00a      	beq.n	8006e32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e1c:	4b16      	ldr	r3, [pc, #88]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d001      	beq.n	8006e2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e01f      	b.n	8006e6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e01d      	b.n	8006e6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e32:	4b11      	ldr	r3, [pc, #68]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f023 0207 	bic.w	r2, r3, #7
 8006e3a:	490f      	ldr	r1, [pc, #60]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e42:	f7fb fbbd 	bl	80025c0 <HAL_GetTick>
 8006e46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e48:	e009      	b.n	8006e5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e4a:	f7fb fbb9 	bl	80025c0 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e58:	d901      	bls.n	8006e5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e007      	b.n	8006e6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e5e:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e6a:	d1ee      	bne.n	8006e4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	58024800 	.word	0x58024800

08006e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08c      	sub	sp, #48	@ 0x30
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f000 bc48 	b.w	8007720 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8088 	beq.w	8006fae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e9e:	4b99      	ldr	r3, [pc, #612]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ea8:	4b96      	ldr	r3, [pc, #600]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d007      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x48>
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	2b18      	cmp	r3, #24
 8006eb8:	d111      	bne.n	8006ede <HAL_RCC_OscConfig+0x62>
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec4:	4b8f      	ldr	r3, [pc, #572]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d06d      	beq.n	8006fac <HAL_RCC_OscConfig+0x130>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d169      	bne.n	8006fac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f000 bc21 	b.w	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee6:	d106      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x7a>
 8006ee8:	4b86      	ldr	r3, [pc, #536]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a85      	ldr	r2, [pc, #532]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	e02e      	b.n	8006f54 <HAL_RCC_OscConfig+0xd8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10c      	bne.n	8006f18 <HAL_RCC_OscConfig+0x9c>
 8006efe:	4b81      	ldr	r3, [pc, #516]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a80      	ldr	r2, [pc, #512]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e01d      	b.n	8006f54 <HAL_RCC_OscConfig+0xd8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0xc0>
 8006f22:	4b78      	ldr	r3, [pc, #480]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a77      	ldr	r2, [pc, #476]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b75      	ldr	r3, [pc, #468]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a74      	ldr	r2, [pc, #464]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0xd8>
 8006f3c:	4b71      	ldr	r3, [pc, #452]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a70      	ldr	r2, [pc, #448]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b6e      	ldr	r3, [pc, #440]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a6d      	ldr	r2, [pc, #436]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d013      	beq.n	8006f84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5c:	f7fb fb30 	bl	80025c0 <HAL_GetTick>
 8006f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f64:	f7fb fb2c 	bl	80025c0 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b64      	cmp	r3, #100	@ 0x64
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e3d4      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f76:	4b63      	ldr	r3, [pc, #396]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f0      	beq.n	8006f64 <HAL_RCC_OscConfig+0xe8>
 8006f82:	e014      	b.n	8006fae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fb fb1c 	bl	80025c0 <HAL_GetTick>
 8006f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f8c:	f7fb fb18 	bl	80025c0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	@ 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e3c0      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f9e:	4b59      	ldr	r3, [pc, #356]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x110>
 8006faa:	e000      	b.n	8006fae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80ca 	beq.w	8007150 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fbc:	4b51      	ldr	r3, [pc, #324]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x166>
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	2b18      	cmp	r3, #24
 8006fd6:	d156      	bne.n	8007086 <HAL_RCC_OscConfig+0x20a>
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d151      	bne.n	8007086 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fe2:	4b48      	ldr	r3, [pc, #288]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_RCC_OscConfig+0x17e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e392      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ffa:	4b42      	ldr	r3, [pc, #264]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f023 0219 	bic.w	r2, r3, #25
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	493f      	ldr	r1, [pc, #252]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007008:	4313      	orrs	r3, r2
 800700a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700c:	f7fb fad8 	bl	80025c0 <HAL_GetTick>
 8007010:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007014:	f7fb fad4 	bl	80025c0 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e37c      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007026:	4b37      	ldr	r3, [pc, #220]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0f0      	beq.n	8007014 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007032:	f7fb fad1 	bl	80025d8 <HAL_GetREVID>
 8007036:	4603      	mov	r3, r0
 8007038:	f241 0203 	movw	r2, #4099	@ 0x1003
 800703c:	4293      	cmp	r3, r2
 800703e:	d817      	bhi.n	8007070 <HAL_RCC_OscConfig+0x1f4>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	d108      	bne.n	800705a <HAL_RCC_OscConfig+0x1de>
 8007048:	4b2e      	ldr	r3, [pc, #184]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007050:	4a2c      	ldr	r2, [pc, #176]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007056:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007058:	e07a      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800705a:	4b2a      	ldr	r3, [pc, #168]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	031b      	lsls	r3, r3, #12
 8007068:	4926      	ldr	r1, [pc, #152]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800706a:	4313      	orrs	r3, r2
 800706c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800706e:	e06f      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007070:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	4921      	ldr	r1, [pc, #132]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007080:	4313      	orrs	r3, r2
 8007082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007084:	e064      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d047      	beq.n	800711e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800708e:	4b1d      	ldr	r3, [pc, #116]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 0219 	bic.w	r2, r3, #25
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	491a      	ldr	r1, [pc, #104]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800709c:	4313      	orrs	r3, r2
 800709e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fb fa8e 	bl	80025c0 <HAL_GetTick>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fb fa8a 	bl	80025c0 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e332      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ba:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c6:	f7fb fa87 	bl	80025d8 <HAL_GetREVID>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d819      	bhi.n	8007108 <HAL_RCC_OscConfig+0x28c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b40      	cmp	r3, #64	@ 0x40
 80070da:	d108      	bne.n	80070ee <HAL_RCC_OscConfig+0x272>
 80070dc:	4b09      	ldr	r3, [pc, #36]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80070e4:	4a07      	ldr	r2, [pc, #28]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ea:	6053      	str	r3, [r2, #4]
 80070ec:	e030      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
 80070ee:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	031b      	lsls	r3, r3, #12
 80070fc:	4901      	ldr	r1, [pc, #4]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	604b      	str	r3, [r1, #4]
 8007102:	e025      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
 8007104:	58024400 	.word	0x58024400
 8007108:	4b9a      	ldr	r3, [pc, #616]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	061b      	lsls	r3, r3, #24
 8007116:	4997      	ldr	r1, [pc, #604]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007118:	4313      	orrs	r3, r2
 800711a:	604b      	str	r3, [r1, #4]
 800711c:	e018      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800711e:	4b95      	ldr	r3, [pc, #596]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a94      	ldr	r2, [pc, #592]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712a:	f7fb fa49 	bl	80025c0 <HAL_GetTick>
 800712e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007130:	e008      	b.n	8007144 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007132:	f7fb fa45 	bl	80025c0 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e2ed      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007144:	4b8b      	ldr	r3, [pc, #556]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f0      	bne.n	8007132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80a9 	beq.w	80072b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800715e:	4b85      	ldr	r3, [pc, #532]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007166:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007168:	4b82      	ldr	r3, [pc, #520]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d007      	beq.n	8007184 <HAL_RCC_OscConfig+0x308>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b18      	cmp	r3, #24
 8007178:	d13a      	bne.n	80071f0 <HAL_RCC_OscConfig+0x374>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d135      	bne.n	80071f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007184:	4b7b      	ldr	r3, [pc, #492]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_RCC_OscConfig+0x320>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	2b80      	cmp	r3, #128	@ 0x80
 8007196:	d001      	beq.n	800719c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e2c1      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800719c:	f7fb fa1c 	bl	80025d8 <HAL_GetREVID>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d817      	bhi.n	80071da <HAL_RCC_OscConfig+0x35e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d108      	bne.n	80071c4 <HAL_RCC_OscConfig+0x348>
 80071b2:	4b70      	ldr	r3, [pc, #448]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80071ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071c2:	e075      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071c4:	4b6b      	ldr	r3, [pc, #428]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	069b      	lsls	r3, r3, #26
 80071d2:	4968      	ldr	r1, [pc, #416]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071d8:	e06a      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071da:	4b66      	ldr	r3, [pc, #408]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	061b      	lsls	r3, r3, #24
 80071e8:	4962      	ldr	r1, [pc, #392]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ee:	e05f      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d042      	beq.n	800727e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071f8:	4b5e      	ldr	r3, [pc, #376]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a5d      	ldr	r2, [pc, #372]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fb f9dc 	bl	80025c0 <HAL_GetTick>
 8007208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800720c:	f7fb f9d8 	bl	80025c0 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e280      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800721e:	4b55      	ldr	r3, [pc, #340]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800722a:	f7fb f9d5 	bl	80025d8 <HAL_GetREVID>
 800722e:	4603      	mov	r3, r0
 8007230:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007234:	4293      	cmp	r3, r2
 8007236:	d817      	bhi.n	8007268 <HAL_RCC_OscConfig+0x3ec>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	2b20      	cmp	r3, #32
 800723e:	d108      	bne.n	8007252 <HAL_RCC_OscConfig+0x3d6>
 8007240:	4b4c      	ldr	r3, [pc, #304]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007248:	4a4a      	ldr	r2, [pc, #296]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800724a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800724e:	6053      	str	r3, [r2, #4]
 8007250:	e02e      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
 8007252:	4b48      	ldr	r3, [pc, #288]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	069b      	lsls	r3, r3, #26
 8007260:	4944      	ldr	r1, [pc, #272]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007262:	4313      	orrs	r3, r2
 8007264:	604b      	str	r3, [r1, #4]
 8007266:	e023      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
 8007268:	4b42      	ldr	r3, [pc, #264]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	061b      	lsls	r3, r3, #24
 8007276:	493f      	ldr	r1, [pc, #252]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007278:	4313      	orrs	r3, r2
 800727a:	60cb      	str	r3, [r1, #12]
 800727c:	e018      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800727e:	4b3d      	ldr	r3, [pc, #244]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3c      	ldr	r2, [pc, #240]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007284:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728a:	f7fb f999 	bl	80025c0 <HAL_GetTick>
 800728e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007290:	e008      	b.n	80072a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007292:	f7fb f995 	bl	80025c0 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e23d      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072a4:	4b33      	ldr	r3, [pc, #204]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f0      	bne.n	8007292 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d036      	beq.n	800732a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d0:	f7fb f976 	bl	80025c0 <HAL_GetTick>
 80072d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d8:	f7fb f972 	bl	80025c0 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e21a      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072ea:	4b22      	ldr	r3, [pc, #136]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0f0      	beq.n	80072d8 <HAL_RCC_OscConfig+0x45c>
 80072f6:	e018      	b.n	800732a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7fb f95c 	bl	80025c0 <HAL_GetTick>
 8007308:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800730c:	f7fb f958 	bl	80025c0 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e200      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800731e:	4b15      	ldr	r3, [pc, #84]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f0      	bne.n	800730c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d039      	beq.n	80073aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01c      	beq.n	8007378 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800733e:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a0c      	ldr	r2, [pc, #48]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007348:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800734a:	f7fb f939 	bl	80025c0 <HAL_GetTick>
 800734e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007350:	e008      	b.n	8007364 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007352:	f7fb f935 	bl	80025c0 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e1dd      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007364:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCC_OscConfig+0x4d6>
 8007370:	e01b      	b.n	80073aa <HAL_RCC_OscConfig+0x52e>
 8007372:	bf00      	nop
 8007374:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007378:	4b9b      	ldr	r3, [pc, #620]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a9a      	ldr	r2, [pc, #616]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800737e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007382:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007384:	f7fb f91c 	bl	80025c0 <HAL_GetTick>
 8007388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800738c:	f7fb f918 	bl	80025c0 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e1c0      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800739e:	4b92      	ldr	r3, [pc, #584]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 8081 	beq.w	80074ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073b8:	4b8c      	ldr	r3, [pc, #560]	@ (80075ec <HAL_RCC_OscConfig+0x770>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a8b      	ldr	r2, [pc, #556]	@ (80075ec <HAL_RCC_OscConfig+0x770>)
 80073be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073c4:	f7fb f8fc 	bl	80025c0 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073cc:	f7fb f8f8 	bl	80025c0 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b64      	cmp	r3, #100	@ 0x64
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e1a0      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073de:	4b83      	ldr	r3, [pc, #524]	@ (80075ec <HAL_RCC_OscConfig+0x770>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d106      	bne.n	8007400 <HAL_RCC_OscConfig+0x584>
 80073f2:	4b7d      	ldr	r3, [pc, #500]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80073f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f6:	4a7c      	ldr	r2, [pc, #496]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80073f8:	f043 0301 	orr.w	r3, r3, #1
 80073fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fe:	e02d      	b.n	800745c <HAL_RCC_OscConfig+0x5e0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10c      	bne.n	8007422 <HAL_RCC_OscConfig+0x5a6>
 8007408:	4b77      	ldr	r3, [pc, #476]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740c:	4a76      	ldr	r2, [pc, #472]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800740e:	f023 0301 	bic.w	r3, r3, #1
 8007412:	6713      	str	r3, [r2, #112]	@ 0x70
 8007414:	4b74      	ldr	r3, [pc, #464]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007418:	4a73      	ldr	r2, [pc, #460]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800741a:	f023 0304 	bic.w	r3, r3, #4
 800741e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007420:	e01c      	b.n	800745c <HAL_RCC_OscConfig+0x5e0>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b05      	cmp	r3, #5
 8007428:	d10c      	bne.n	8007444 <HAL_RCC_OscConfig+0x5c8>
 800742a:	4b6f      	ldr	r3, [pc, #444]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742e:	4a6e      	ldr	r2, [pc, #440]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007430:	f043 0304 	orr.w	r3, r3, #4
 8007434:	6713      	str	r3, [r2, #112]	@ 0x70
 8007436:	4b6c      	ldr	r3, [pc, #432]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743a:	4a6b      	ldr	r2, [pc, #428]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	6713      	str	r3, [r2, #112]	@ 0x70
 8007442:	e00b      	b.n	800745c <HAL_RCC_OscConfig+0x5e0>
 8007444:	4b68      	ldr	r3, [pc, #416]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007448:	4a67      	ldr	r2, [pc, #412]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007450:	4b65      	ldr	r3, [pc, #404]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007454:	4a64      	ldr	r2, [pc, #400]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007456:	f023 0304 	bic.w	r3, r3, #4
 800745a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d015      	beq.n	8007490 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007464:	f7fb f8ac 	bl	80025c0 <HAL_GetTick>
 8007468:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800746a:	e00a      	b.n	8007482 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746c:	f7fb f8a8 	bl	80025c0 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e14e      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007482:	4b59      	ldr	r3, [pc, #356]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0ee      	beq.n	800746c <HAL_RCC_OscConfig+0x5f0>
 800748e:	e014      	b.n	80074ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007490:	f7fb f896 	bl	80025c0 <HAL_GetTick>
 8007494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007496:	e00a      	b.n	80074ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007498:	f7fb f892 	bl	80025c0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e138      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074ae:	4b4e      	ldr	r3, [pc, #312]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1ee      	bne.n	8007498 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 812d 	beq.w	800771e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074c4:	4b48      	ldr	r3, [pc, #288]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074cc:	2b18      	cmp	r3, #24
 80074ce:	f000 80bd 	beq.w	800764c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	f040 809e 	bne.w	8007618 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074dc:	4b42      	ldr	r3, [pc, #264]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a41      	ldr	r2, [pc, #260]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e8:	f7fb f86a 	bl	80025c0 <HAL_GetTick>
 80074ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fb f866 	bl	80025c0 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e10e      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007502:	4b39      	ldr	r3, [pc, #228]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800750e:	4b36      	ldr	r3, [pc, #216]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007512:	4b37      	ldr	r3, [pc, #220]	@ (80075f0 <HAL_RCC_OscConfig+0x774>)
 8007514:	4013      	ands	r3, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800751e:	0112      	lsls	r2, r2, #4
 8007520:	430a      	orrs	r2, r1
 8007522:	4931      	ldr	r1, [pc, #196]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007524:	4313      	orrs	r3, r2
 8007526:	628b      	str	r3, [r1, #40]	@ 0x28
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	3b01      	subs	r3, #1
 800752e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007536:	3b01      	subs	r3, #1
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	b29b      	uxth	r3, r3
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	3b01      	subs	r3, #1
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	3b01      	subs	r3, #1
 8007552:	061b      	lsls	r3, r3, #24
 8007554:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007558:	4923      	ldr	r1, [pc, #140]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800755e:	4b22      	ldr	r3, [pc, #136]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	4a21      	ldr	r2, [pc, #132]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800756a:	4b1f      	ldr	r3, [pc, #124]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800756c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800756e:	4b21      	ldr	r3, [pc, #132]	@ (80075f4 <HAL_RCC_OscConfig+0x778>)
 8007570:	4013      	ands	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	491b      	ldr	r1, [pc, #108]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800757a:	4313      	orrs	r3, r2
 800757c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800757e:	4b1a      	ldr	r3, [pc, #104]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	f023 020c 	bic.w	r2, r3, #12
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	4917      	ldr	r1, [pc, #92]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007590:	4b15      	ldr	r3, [pc, #84]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	f023 0202 	bic.w	r2, r3, #2
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759c:	4912      	ldr	r1, [pc, #72]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075a2:	4b11      	ldr	r3, [pc, #68]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a6:	4a10      	ldr	r2, [pc, #64]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	4a0d      	ldr	r2, [pc, #52]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075ba:	4b0b      	ldr	r3, [pc, #44]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	4a0a      	ldr	r2, [pc, #40]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80075c6:	4b08      	ldr	r3, [pc, #32]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	4a07      	ldr	r2, [pc, #28]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075d2:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a04      	ldr	r2, [pc, #16]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fa ffef 	bl	80025c0 <HAL_GetTick>
 80075e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075e4:	e011      	b.n	800760a <HAL_RCC_OscConfig+0x78e>
 80075e6:	bf00      	nop
 80075e8:	58024400 	.word	0x58024400
 80075ec:	58024800 	.word	0x58024800
 80075f0:	fffffc0c 	.word	0xfffffc0c
 80075f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f8:	f7fa ffe2 	bl	80025c0 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e08a      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800760a:	4b47      	ldr	r3, [pc, #284]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCC_OscConfig+0x77c>
 8007616:	e082      	b.n	800771e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007618:	4b43      	ldr	r3, [pc, #268]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a42      	ldr	r2, [pc, #264]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800761e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fa ffcc 	bl	80025c0 <HAL_GetTick>
 8007628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800762c:	f7fa ffc8 	bl	80025c0 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e070      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763e:	4b3a      	ldr	r3, [pc, #232]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x7b0>
 800764a:	e068      	b.n	800771e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800764c:	4b36      	ldr	r3, [pc, #216]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007652:	4b35      	ldr	r3, [pc, #212]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	2b01      	cmp	r3, #1
 800765e:	d031      	beq.n	80076c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f003 0203 	and.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800766a:	429a      	cmp	r2, r3
 800766c:	d12a      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	091b      	lsrs	r3, r3, #4
 8007672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800767a:	429a      	cmp	r2, r3
 800767c:	d122      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007688:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800768a:	429a      	cmp	r2, r3
 800768c:	d11a      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	0a5b      	lsrs	r3, r3, #9
 8007692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800769c:	429a      	cmp	r2, r3
 800769e:	d111      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d108      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d001      	beq.n	80076c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e02b      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80076c8:	4b17      	ldr	r3, [pc, #92]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 80076ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076cc:	08db      	lsrs	r3, r3, #3
 80076ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d01f      	beq.n	800771e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80076de:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	4a11      	ldr	r2, [pc, #68]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 80076e4:	f023 0301 	bic.w	r3, r3, #1
 80076e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076ea:	f7fa ff69 	bl	80025c0 <HAL_GetTick>
 80076ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80076f0:	bf00      	nop
 80076f2:	f7fa ff65 	bl	80025c0 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d0f9      	beq.n	80076f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007702:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <HAL_RCC_OscConfig+0x8b0>)
 8007704:	4013      	ands	r3, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800770a:	00d2      	lsls	r2, r2, #3
 800770c:	4906      	ldr	r1, [pc, #24]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800770e:	4313      	orrs	r3, r2
 8007710:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007712:	4b05      	ldr	r3, [pc, #20]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007716:	4a04      	ldr	r2, [pc, #16]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007718:	f043 0301 	orr.w	r3, r3, #1
 800771c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3730      	adds	r7, #48	@ 0x30
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400
 800772c:	ffff0007 	.word	0xffff0007

08007730 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e19c      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007744:	4b8a      	ldr	r3, [pc, #552]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d910      	bls.n	8007774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007752:	4b87      	ldr	r3, [pc, #540]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f023 020f 	bic.w	r2, r3, #15
 800775a:	4985      	ldr	r1, [pc, #532]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	4313      	orrs	r3, r2
 8007760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007762:	4b83      	ldr	r3, [pc, #524]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d001      	beq.n	8007774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e184      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	4b7b      	ldr	r3, [pc, #492]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800778c:	429a      	cmp	r2, r3
 800778e:	d908      	bls.n	80077a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007790:	4b78      	ldr	r3, [pc, #480]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	4975      	ldr	r1, [pc, #468]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d010      	beq.n	80077d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	4b70      	ldr	r3, [pc, #448]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d908      	bls.n	80077d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077be:	4b6d      	ldr	r3, [pc, #436]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	496a      	ldr	r1, [pc, #424]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d010      	beq.n	80077fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699a      	ldr	r2, [r3, #24]
 80077e0:	4b64      	ldr	r3, [pc, #400]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d908      	bls.n	80077fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077ec:	4b61      	ldr	r3, [pc, #388]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	495e      	ldr	r1, [pc, #376]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d010      	beq.n	800782c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	4b59      	ldr	r3, [pc, #356]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007816:	429a      	cmp	r2, r3
 8007818:	d908      	bls.n	800782c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800781a:	4b56      	ldr	r3, [pc, #344]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	4953      	ldr	r1, [pc, #332]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007828:	4313      	orrs	r3, r2
 800782a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d010      	beq.n	800785a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	4b4d      	ldr	r3, [pc, #308]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	429a      	cmp	r2, r3
 8007846:	d908      	bls.n	800785a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007848:	4b4a      	ldr	r3, [pc, #296]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f023 020f 	bic.w	r2, r3, #15
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	4947      	ldr	r1, [pc, #284]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007856:	4313      	orrs	r3, r2
 8007858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d055      	beq.n	8007912 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007866:	4b43      	ldr	r3, [pc, #268]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4940      	ldr	r1, [pc, #256]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007874:	4313      	orrs	r3, r2
 8007876:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d107      	bne.n	8007890 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007880:	4b3c      	ldr	r3, [pc, #240]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d121      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e0f6      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b03      	cmp	r3, #3
 8007896:	d107      	bne.n	80078a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007898:	4b36      	ldr	r3, [pc, #216]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d115      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0ea      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d107      	bne.n	80078c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078b0:	4b30      	ldr	r3, [pc, #192]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0de      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078c0:	4b2c      	ldr	r3, [pc, #176]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0d6      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078d0:	4b28      	ldr	r3, [pc, #160]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f023 0207 	bic.w	r2, r3, #7
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4925      	ldr	r1, [pc, #148]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e2:	f7fa fe6d 	bl	80025c0 <HAL_GetTick>
 80078e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e8:	e00a      	b.n	8007900 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078ea:	f7fa fe69 	bl	80025c0 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e0be      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007900:	4b1c      	ldr	r3, [pc, #112]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	429a      	cmp	r2, r3
 8007910:	d1eb      	bne.n	80078ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d010      	beq.n	8007940 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	4b14      	ldr	r3, [pc, #80]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	429a      	cmp	r2, r3
 800792c:	d208      	bcs.n	8007940 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800792e:	4b11      	ldr	r3, [pc, #68]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f023 020f 	bic.w	r2, r3, #15
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	490e      	ldr	r1, [pc, #56]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800793c:	4313      	orrs	r3, r2
 800793e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007940:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d214      	bcs.n	8007978 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794e:	4b08      	ldr	r3, [pc, #32]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f023 020f 	bic.w	r2, r3, #15
 8007956:	4906      	ldr	r1, [pc, #24]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	4313      	orrs	r3, r2
 800795c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800795e:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d005      	beq.n	8007978 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e086      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
 8007970:	52002000 	.word	0x52002000
 8007974:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d010      	beq.n	80079a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	4b3f      	ldr	r3, [pc, #252]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007990:	429a      	cmp	r2, r3
 8007992:	d208      	bcs.n	80079a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007994:	4b3c      	ldr	r3, [pc, #240]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	4939      	ldr	r1, [pc, #228]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d010      	beq.n	80079d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695a      	ldr	r2, [r3, #20]
 80079b6:	4b34      	ldr	r3, [pc, #208]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079be:	429a      	cmp	r2, r3
 80079c0:	d208      	bcs.n	80079d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079c2:	4b31      	ldr	r3, [pc, #196]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	492e      	ldr	r1, [pc, #184]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	4b28      	ldr	r3, [pc, #160]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d208      	bcs.n	8007a02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079f0:	4b25      	ldr	r3, [pc, #148]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	4922      	ldr	r1, [pc, #136]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d010      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69da      	ldr	r2, [r3, #28]
 8007a12:	4b1d      	ldr	r3, [pc, #116]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d208      	bcs.n	8007a30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	4917      	ldr	r1, [pc, #92]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a30:	f000 f834 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b14      	ldr	r3, [pc, #80]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	4912      	ldr	r1, [pc, #72]	@ (8007a8c <HAL_RCC_ClockConfig+0x35c>)
 8007a42:	5ccb      	ldrb	r3, [r1, r3]
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	4a0d      	ldr	r2, [pc, #52]	@ (8007a8c <HAL_RCC_ClockConfig+0x35c>)
 8007a58:	5cd3      	ldrb	r3, [r2, r3]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
 8007a64:	4a0a      	ldr	r2, [pc, #40]	@ (8007a90 <HAL_RCC_ClockConfig+0x360>)
 8007a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a68:	4a0a      	ldr	r2, [pc, #40]	@ (8007a94 <HAL_RCC_ClockConfig+0x364>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <HAL_RCC_ClockConfig+0x368>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fa f99a 	bl	8001dac <HAL_InitTick>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	08020c04 	.word	0x08020c04
 8007a90:	24000008 	.word	0x24000008
 8007a94:	24000004 	.word	0x24000004
 8007a98:	2400000c 	.word	0x2400000c

08007a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b089      	sub	sp, #36	@ 0x24
 8007aa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aa2:	4bb3      	ldr	r3, [pc, #716]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aaa:	2b18      	cmp	r3, #24
 8007aac:	f200 8155 	bhi.w	8007d5a <HAL_RCC_GetSysClockFreq+0x2be>
 8007ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007b1d 	.word	0x08007b1d
 8007abc:	08007d5b 	.word	0x08007d5b
 8007ac0:	08007d5b 	.word	0x08007d5b
 8007ac4:	08007d5b 	.word	0x08007d5b
 8007ac8:	08007d5b 	.word	0x08007d5b
 8007acc:	08007d5b 	.word	0x08007d5b
 8007ad0:	08007d5b 	.word	0x08007d5b
 8007ad4:	08007d5b 	.word	0x08007d5b
 8007ad8:	08007b43 	.word	0x08007b43
 8007adc:	08007d5b 	.word	0x08007d5b
 8007ae0:	08007d5b 	.word	0x08007d5b
 8007ae4:	08007d5b 	.word	0x08007d5b
 8007ae8:	08007d5b 	.word	0x08007d5b
 8007aec:	08007d5b 	.word	0x08007d5b
 8007af0:	08007d5b 	.word	0x08007d5b
 8007af4:	08007d5b 	.word	0x08007d5b
 8007af8:	08007b49 	.word	0x08007b49
 8007afc:	08007d5b 	.word	0x08007d5b
 8007b00:	08007d5b 	.word	0x08007d5b
 8007b04:	08007d5b 	.word	0x08007d5b
 8007b08:	08007d5b 	.word	0x08007d5b
 8007b0c:	08007d5b 	.word	0x08007d5b
 8007b10:	08007d5b 	.word	0x08007d5b
 8007b14:	08007d5b 	.word	0x08007d5b
 8007b18:	08007b4f 	.word	0x08007b4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b1c:	4b94      	ldr	r3, [pc, #592]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d009      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b28:	4b91      	ldr	r3, [pc, #580]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	08db      	lsrs	r3, r3, #3
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	4a90      	ldr	r2, [pc, #576]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b3a:	e111      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b3c:	4b8d      	ldr	r3, [pc, #564]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b3e:	61bb      	str	r3, [r7, #24]
      break;
 8007b40:	e10e      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b42:	4b8d      	ldr	r3, [pc, #564]	@ (8007d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b44:	61bb      	str	r3, [r7, #24]
      break;
 8007b46:	e10b      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b48:	4b8c      	ldr	r3, [pc, #560]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b4a:	61bb      	str	r3, [r7, #24]
      break;
 8007b4c:	e108      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b4e:	4b88      	ldr	r3, [pc, #544]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b58:	4b85      	ldr	r3, [pc, #532]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5c:	091b      	lsrs	r3, r3, #4
 8007b5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b64:	4b82      	ldr	r3, [pc, #520]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b6e:	4b80      	ldr	r3, [pc, #512]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b72:	08db      	lsrs	r3, r3, #3
 8007b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80e1 	beq.w	8007d54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	f000 8083 	beq.w	8007ca0 <HAL_RCC_GetSysClockFreq+0x204>
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	f200 80a1 	bhi.w	8007ce4 <HAL_RCC_GetSysClockFreq+0x248>
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x114>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d056      	beq.n	8007c5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bae:	e099      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02d      	beq.n	8007c18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	08db      	lsrs	r3, r3, #3
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	4a6b      	ldr	r2, [pc, #428]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be6:	4b62      	ldr	r3, [pc, #392]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c16:	e087      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007d84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2a:	4b51      	ldr	r3, [pc, #324]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c5a:	e065      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007d88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6e:	4b40      	ldr	r3, [pc, #256]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c9e:	e043      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007caa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007d8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ce2:	e021      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007d88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d28:	4b11      	ldr	r3, [pc, #68]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2c:	0a5b      	lsrs	r3, r3, #9
 8007d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d32:	3301      	adds	r3, #1
 8007d34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d4c:	ee17 3a90 	vmov	r3, s15
 8007d50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d52:	e005      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]
      break;
 8007d58:	e002      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d5a:	4b07      	ldr	r3, [pc, #28]	@ (8007d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d5c:	61bb      	str	r3, [r7, #24]
      break;
 8007d5e:	bf00      	nop
  }

  return sysclockfreq;
 8007d60:	69bb      	ldr	r3, [r7, #24]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3724      	adds	r7, #36	@ 0x24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
 8007d74:	03d09000 	.word	0x03d09000
 8007d78:	003d0900 	.word	0x003d0900
 8007d7c:	007a1200 	.word	0x007a1200
 8007d80:	46000000 	.word	0x46000000
 8007d84:	4c742400 	.word	0x4c742400
 8007d88:	4a742400 	.word	0x4a742400
 8007d8c:	4af42400 	.word	0x4af42400

08007d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d96:	f7ff fe81 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	4b10      	ldr	r3, [pc, #64]	@ (8007de0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	0a1b      	lsrs	r3, r3, #8
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	490f      	ldr	r1, [pc, #60]	@ (8007de4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007da8:	5ccb      	ldrb	r3, [r1, r3]
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	fa22 f303 	lsr.w	r3, r2, r3
 8007db2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007db4:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	4a09      	ldr	r2, [pc, #36]	@ (8007de4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dbe:	5cd3      	ldrb	r3, [r2, r3]
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dca:	4a07      	ldr	r2, [pc, #28]	@ (8007de8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007dcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007dce:	4a07      	ldr	r2, [pc, #28]	@ (8007dec <HAL_RCC_GetHCLKFreq+0x5c>)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007dd4:	4b04      	ldr	r3, [pc, #16]	@ (8007de8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	58024400 	.word	0x58024400
 8007de4:	08020c04 	.word	0x08020c04
 8007de8:	24000008 	.word	0x24000008
 8007dec:	24000004 	.word	0x24000004

08007df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007df4:	f7ff ffcc 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	091b      	lsrs	r3, r3, #4
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	4904      	ldr	r1, [pc, #16]	@ (8007e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e06:	5ccb      	ldrb	r3, [r1, r3]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	58024400 	.word	0x58024400
 8007e18:	08020c04 	.word	0x08020c04

08007e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e20:	f7ff ffb6 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007e24:	4602      	mov	r2, r0
 8007e26:	4b06      	ldr	r3, [pc, #24]	@ (8007e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	0a1b      	lsrs	r3, r3, #8
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	4904      	ldr	r1, [pc, #16]	@ (8007e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e32:	5ccb      	ldrb	r3, [r1, r3]
 8007e34:	f003 031f 	and.w	r3, r3, #31
 8007e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	58024400 	.word	0x58024400
 8007e44:	08020c04 	.word	0x08020c04

08007e48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	223f      	movs	r2, #63	@ 0x3f
 8007e56:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e58:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <HAL_RCC_GetClockConfig+0x7c>)
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f003 0207 	and.w	r2, r3, #7
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007e64:	4b17      	ldr	r3, [pc, #92]	@ (8007ec4 <HAL_RCC_GetClockConfig+0x7c>)
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007e70:	4b14      	ldr	r3, [pc, #80]	@ (8007ec4 <HAL_RCC_GetClockConfig+0x7c>)
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	f003 020f 	and.w	r2, r3, #15
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007e7c:	4b11      	ldr	r3, [pc, #68]	@ (8007ec4 <HAL_RCC_GetClockConfig+0x7c>)
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007e88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec4 <HAL_RCC_GetClockConfig+0x7c>)
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007e94:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec4 <HAL_RCC_GetClockConfig+0x7c>)
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ea0:	4b08      	ldr	r3, [pc, #32]	@ (8007ec4 <HAL_RCC_GetClockConfig+0x7c>)
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <HAL_RCC_GetClockConfig+0x80>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 020f 	and.w	r2, r3, #15
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	601a      	str	r2, [r3, #0]
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	52002000 	.word	0x52002000

08007ecc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed0:	b0ca      	sub	sp, #296	@ 0x128
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	ea54 0305 	orrs.w	r3, r4, r5
 8007ef6:	d049      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007efe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f02:	d02f      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f08:	d828      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f0e:	d01a      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f14:	d822      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f1e:	d007      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f20:	e01c      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f22:	4bb8      	ldr	r3, [pc, #736]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f26:	4ab7      	ldr	r2, [pc, #732]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f2e:	e01a      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f34:	3308      	adds	r3, #8
 8007f36:	2102      	movs	r1, #2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 fb61 	bl	800a600 <RCCEx_PLL2_Config>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f44:	e00f      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	3328      	adds	r3, #40	@ 0x28
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 fc08 	bl	800a764 <RCCEx_PLL3_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f5a:	e004      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f62:	e000      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f6e:	4ba5      	ldr	r3, [pc, #660]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f7c:	4aa1      	ldr	r2, [pc, #644]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f82:	e003      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f98:	f04f 0900 	mov.w	r9, #0
 8007f9c:	ea58 0309 	orrs.w	r3, r8, r9
 8007fa0:	d047      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d82a      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007fac:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fd7 	.word	0x08007fd7
 8007fbc:	08007fed 	.word	0x08007fed
 8007fc0:	0800800b 	.word	0x0800800b
 8007fc4:	0800800b 	.word	0x0800800b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	4a8d      	ldr	r2, [pc, #564]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fd4:	e01a      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f002 fb0e 	bl	800a600 <RCCEx_PLL2_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fea:	e00f      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff0:	3328      	adds	r3, #40	@ 0x28
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f002 fbb5 	bl	800a764 <RCCEx_PLL3_Config>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008000:	e004      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008008:	e000      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800800a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008014:	4b7b      	ldr	r3, [pc, #492]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008018:	f023 0107 	bic.w	r1, r3, #7
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008022:	4a78      	ldr	r2, [pc, #480]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008024:	430b      	orrs	r3, r1
 8008026:	6513      	str	r3, [r2, #80]	@ 0x50
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800803e:	f04f 0b00 	mov.w	fp, #0
 8008042:	ea5a 030b 	orrs.w	r3, sl, fp
 8008046:	d04c      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800804e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008052:	d030      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008058:	d829      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800805a:	2bc0      	cmp	r3, #192	@ 0xc0
 800805c:	d02d      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800805e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008060:	d825      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008062:	2b80      	cmp	r3, #128	@ 0x80
 8008064:	d018      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008066:	2b80      	cmp	r3, #128	@ 0x80
 8008068:	d821      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800806e:	2b40      	cmp	r3, #64	@ 0x40
 8008070:	d007      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008072:	e01c      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008074:	4b63      	ldr	r3, [pc, #396]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	4a62      	ldr	r2, [pc, #392]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800807a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800807e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008080:	e01c      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	3308      	adds	r3, #8
 8008088:	2100      	movs	r1, #0
 800808a:	4618      	mov	r0, r3
 800808c:	f002 fab8 	bl	800a600 <RCCEx_PLL2_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008096:	e011      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809c:	3328      	adds	r3, #40	@ 0x28
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f002 fb5f 	bl	800a764 <RCCEx_PLL3_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080ac:	e006      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080b4:	e002      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80080c4:	4b4f      	ldr	r3, [pc, #316]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d2:	4a4c      	ldr	r2, [pc, #304]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80080d8:	e003      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80080ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80080f2:	2300      	movs	r3, #0
 80080f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80080f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80080fc:	460b      	mov	r3, r1
 80080fe:	4313      	orrs	r3, r2
 8008100:	d053      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008106:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800810a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800810e:	d035      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008110:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008114:	d82e      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008116:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800811a:	d031      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800811c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008120:	d828      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008126:	d01a      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800812c:	d822      	bhi.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008136:	d007      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008138:	e01c      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813a:	4b32      	ldr	r3, [pc, #200]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	4a31      	ldr	r2, [pc, #196]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008146:	e01c      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814c:	3308      	adds	r3, #8
 800814e:	2100      	movs	r1, #0
 8008150:	4618      	mov	r0, r3
 8008152:	f002 fa55 	bl	800a600 <RCCEx_PLL2_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800815c:	e011      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008162:	3328      	adds	r3, #40	@ 0x28
 8008164:	2100      	movs	r1, #0
 8008166:	4618      	mov	r0, r3
 8008168:	f002 fafc 	bl	800a764 <RCCEx_PLL3_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008172:	e006      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800817a:	e002      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800817c:	bf00      	nop
 800817e:	e000      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800818a:	4b1e      	ldr	r3, [pc, #120]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800818c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800818e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800819a:	4a1a      	ldr	r2, [pc, #104]	@ (8008204 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800819c:	430b      	orrs	r3, r1
 800819e:	6593      	str	r3, [r2, #88]	@ 0x58
 80081a0:	e003      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80081b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80081ba:	2300      	movs	r3, #0
 80081bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80081c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80081c4:	460b      	mov	r3, r1
 80081c6:	4313      	orrs	r3, r2
 80081c8:	d056      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081d6:	d038      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80081d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081dc:	d831      	bhi.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081e2:	d034      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80081e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081e8:	d82b      	bhi.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ee:	d01d      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80081f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081f4:	d825      	bhi.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d006      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80081fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081fe:	d00a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008200:	e01f      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008202:	bf00      	nop
 8008204:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008208:	4ba2      	ldr	r3, [pc, #648]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4aa1      	ldr	r2, [pc, #644]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800820e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008214:	e01c      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821a:	3308      	adds	r3, #8
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f002 f9ee 	bl	800a600 <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800822a:	e011      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008230:	3328      	adds	r3, #40	@ 0x28
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f002 fa95 	bl	800a764 <RCCEx_PLL3_Config>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008240:	e006      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008248:	e002      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800824e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10b      	bne.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008258:	4b8e      	ldr	r3, [pc, #568]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800825a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800825c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008268:	4a8a      	ldr	r2, [pc, #552]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800826a:	430b      	orrs	r3, r1
 800826c:	6593      	str	r3, [r2, #88]	@ 0x58
 800826e:	e003      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008284:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008288:	2300      	movs	r3, #0
 800828a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800828e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008292:	460b      	mov	r3, r1
 8008294:	4313      	orrs	r3, r2
 8008296:	d03a      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800829e:	2b30      	cmp	r3, #48	@ 0x30
 80082a0:	d01f      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80082a2:	2b30      	cmp	r3, #48	@ 0x30
 80082a4:	d819      	bhi.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	d00c      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d815      	bhi.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d019      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80082b2:	2b10      	cmp	r3, #16
 80082b4:	d111      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b6:	4b77      	ldr	r3, [pc, #476]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ba:	4a76      	ldr	r2, [pc, #472]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80082c2:	e011      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	3308      	adds	r3, #8
 80082ca:	2102      	movs	r1, #2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f002 f997 	bl	800a600 <RCCEx_PLL2_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80082d8:	e006      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082e0:	e002      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80082e2:	bf00      	nop
 80082e4:	e000      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80082e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082f0:	4b68      	ldr	r3, [pc, #416]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082fe:	4a65      	ldr	r2, [pc, #404]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008300:	430b      	orrs	r3, r1
 8008302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008304:	e003      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800830a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800831a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800831e:	2300      	movs	r3, #0
 8008320:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008324:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008328:	460b      	mov	r3, r1
 800832a:	4313      	orrs	r3, r2
 800832c:	d051      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008338:	d035      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800833a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800833e:	d82e      	bhi.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008340:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008344:	d031      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008346:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800834a:	d828      	bhi.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800834c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008350:	d01a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008356:	d822      	bhi.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800835c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008360:	d007      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008362:	e01c      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008364:	4b4b      	ldr	r3, [pc, #300]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008368:	4a4a      	ldr	r2, [pc, #296]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800836a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800836e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008370:	e01c      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008376:	3308      	adds	r3, #8
 8008378:	2100      	movs	r1, #0
 800837a:	4618      	mov	r0, r3
 800837c:	f002 f940 	bl	800a600 <RCCEx_PLL2_Config>
 8008380:	4603      	mov	r3, r0
 8008382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008386:	e011      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	3328      	adds	r3, #40	@ 0x28
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f002 f9e7 	bl	800a764 <RCCEx_PLL3_Config>
 8008396:	4603      	mov	r3, r0
 8008398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800839c:	e006      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083a4:	e002      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80083a6:	bf00      	nop
 80083a8:	e000      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80083aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083b4:	4b37      	ldr	r3, [pc, #220]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80083bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083c2:	4a34      	ldr	r2, [pc, #208]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083c4:	430b      	orrs	r3, r1
 80083c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80083c8:	e003      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80083de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083e2:	2300      	movs	r3, #0
 80083e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80083ec:	460b      	mov	r3, r1
 80083ee:	4313      	orrs	r3, r2
 80083f0:	d056      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083fc:	d033      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80083fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008402:	d82c      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008404:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008408:	d02f      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800840a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800840e:	d826      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008410:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008414:	d02b      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008416:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800841a:	d820      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800841c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008420:	d012      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008426:	d81a      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d022      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800842c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008430:	d115      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	3308      	adds	r3, #8
 8008438:	2101      	movs	r1, #1
 800843a:	4618      	mov	r0, r3
 800843c:	f002 f8e0 	bl	800a600 <RCCEx_PLL2_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008446:	e015      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844c:	3328      	adds	r3, #40	@ 0x28
 800844e:	2101      	movs	r1, #1
 8008450:	4618      	mov	r0, r3
 8008452:	f002 f987 	bl	800a764 <RCCEx_PLL3_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800845c:	e00a      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008464:	e006      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008466:	bf00      	nop
 8008468:	e004      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800846a:	bf00      	nop
 800846c:	e002      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800846e:	bf00      	nop
 8008470:	e000      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10d      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800847c:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800847e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008480:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800848a:	4a02      	ldr	r2, [pc, #8]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800848c:	430b      	orrs	r3, r1
 800848e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008490:	e006      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008492:	bf00      	nop
 8008494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800849c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80084ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084b0:	2300      	movs	r3, #0
 80084b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4313      	orrs	r3, r2
 80084be:	d055      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80084c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084cc:	d033      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80084ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084d2:	d82c      	bhi.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d8:	d02f      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084de:	d826      	bhi.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084e4:	d02b      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80084e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084ea:	d820      	bhi.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f0:	d012      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80084f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f6:	d81a      	bhi.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d022      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80084fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008500:	d115      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	3308      	adds	r3, #8
 8008508:	2101      	movs	r1, #1
 800850a:	4618      	mov	r0, r3
 800850c:	f002 f878 	bl	800a600 <RCCEx_PLL2_Config>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008516:	e015      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	3328      	adds	r3, #40	@ 0x28
 800851e:	2101      	movs	r1, #1
 8008520:	4618      	mov	r0, r3
 8008522:	f002 f91f 	bl	800a764 <RCCEx_PLL3_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800852c:	e00a      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008534:	e006      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008536:	bf00      	nop
 8008538:	e004      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800853a:	bf00      	nop
 800853c:	e002      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800853e:	bf00      	nop
 8008540:	e000      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10b      	bne.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800854c:	4ba3      	ldr	r3, [pc, #652]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800854e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008550:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800855c:	4a9f      	ldr	r2, [pc, #636]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800855e:	430b      	orrs	r3, r1
 8008560:	6593      	str	r3, [r2, #88]	@ 0x58
 8008562:	e003      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800857c:	2300      	movs	r3, #0
 800857e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008582:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008586:	460b      	mov	r3, r1
 8008588:	4313      	orrs	r3, r2
 800858a:	d037      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008596:	d00e      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800859c:	d816      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d018      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80085a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085a6:	d111      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a8:	4b8c      	ldr	r3, [pc, #560]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ac:	4a8b      	ldr	r2, [pc, #556]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085b4:	e00f      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ba:	3308      	adds	r3, #8
 80085bc:	2101      	movs	r1, #1
 80085be:	4618      	mov	r0, r3
 80085c0:	f002 f81e 	bl	800a600 <RCCEx_PLL2_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085ca:	e004      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085d2:	e000      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80085d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085de:	4b7f      	ldr	r3, [pc, #508]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ec:	4a7b      	ldr	r2, [pc, #492]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ee:	430b      	orrs	r3, r1
 80085f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80085f2:	e003      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008612:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d039      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008622:	2b03      	cmp	r3, #3
 8008624:	d81c      	bhi.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008626:	a201      	add	r2, pc, #4	@ (adr r2, 800862c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	08008669 	.word	0x08008669
 8008630:	0800863d 	.word	0x0800863d
 8008634:	0800864b 	.word	0x0800864b
 8008638:	08008669 	.word	0x08008669
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863c:	4b67      	ldr	r3, [pc, #412]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	4a66      	ldr	r2, [pc, #408]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008648:	e00f      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864e:	3308      	adds	r3, #8
 8008650:	2102      	movs	r1, #2
 8008652:	4618      	mov	r0, r3
 8008654:	f001 ffd4 	bl	800a600 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800865e:	e004      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008666:	e000      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008672:	4b5a      	ldr	r3, [pc, #360]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008676:	f023 0103 	bic.w	r1, r3, #3
 800867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008680:	4a56      	ldr	r2, [pc, #344]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008682:	430b      	orrs	r3, r1
 8008684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008686:	e003      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800869c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086a0:	2300      	movs	r3, #0
 80086a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80086aa:	460b      	mov	r3, r1
 80086ac:	4313      	orrs	r3, r2
 80086ae:	f000 809f 	beq.w	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086b2:	4b4b      	ldr	r3, [pc, #300]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a4a      	ldr	r2, [pc, #296]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086be:	f7f9 ff7f 	bl	80025c0 <HAL_GetTick>
 80086c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086c6:	e00b      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086c8:	f7f9 ff7a 	bl	80025c0 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b64      	cmp	r3, #100	@ 0x64
 80086d6:	d903      	bls.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086de:	e005      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086e0:	4b3f      	ldr	r3, [pc, #252]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0ed      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80086ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d179      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086f4:	4b39      	ldr	r3, [pc, #228]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008700:	4053      	eors	r3, r2
 8008702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008706:	2b00      	cmp	r3, #0
 8008708:	d015      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800870a:	4b34      	ldr	r3, [pc, #208]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800870c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800870e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008712:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008716:	4b31      	ldr	r3, [pc, #196]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871a:	4a30      	ldr	r2, [pc, #192]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800871c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008720:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008722:	4b2e      	ldr	r3, [pc, #184]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008726:	4a2d      	ldr	r2, [pc, #180]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800872c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800872e:	4a2b      	ldr	r2, [pc, #172]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008730:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008734:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800873e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008742:	d118      	bne.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7f9 ff3c 	bl	80025c0 <HAL_GetTick>
 8008748:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800874c:	e00d      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800874e:	f7f9 ff37 	bl	80025c0 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008758:	1ad2      	subs	r2, r2, r3
 800875a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800875e:	429a      	cmp	r2, r3
 8008760:	d903      	bls.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008768:	e005      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800876a:	4b1c      	ldr	r3, [pc, #112]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800876c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0eb      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800877a:	2b00      	cmp	r3, #0
 800877c:	d129      	bne.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800878a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800878e:	d10e      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008790:	4b12      	ldr	r3, [pc, #72]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087a0:	091a      	lsrs	r2, r3, #4
 80087a2:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	4a0d      	ldr	r2, [pc, #52]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6113      	str	r3, [r2, #16]
 80087ac:	e005      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80087ae:	4b0b      	ldr	r3, [pc, #44]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	4a0a      	ldr	r2, [pc, #40]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087b8:	6113      	str	r3, [r2, #16]
 80087ba:	4b08      	ldr	r3, [pc, #32]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ca:	4a04      	ldr	r2, [pc, #16]	@ (80087dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087cc:	430b      	orrs	r3, r1
 80087ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80087d0:	e00e      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80087da:	e009      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80087dc:	58024400 	.word	0x58024400
 80087e0:	58024800 	.word	0x58024800
 80087e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	f002 0301 	and.w	r3, r2, #1
 80087fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008800:	2300      	movs	r3, #0
 8008802:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008806:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800880a:	460b      	mov	r3, r1
 800880c:	4313      	orrs	r3, r2
 800880e:	f000 8089 	beq.w	8008924 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008818:	2b28      	cmp	r3, #40	@ 0x28
 800881a:	d86b      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800881c:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	080088fd 	.word	0x080088fd
 8008828:	080088f5 	.word	0x080088f5
 800882c:	080088f5 	.word	0x080088f5
 8008830:	080088f5 	.word	0x080088f5
 8008834:	080088f5 	.word	0x080088f5
 8008838:	080088f5 	.word	0x080088f5
 800883c:	080088f5 	.word	0x080088f5
 8008840:	080088f5 	.word	0x080088f5
 8008844:	080088c9 	.word	0x080088c9
 8008848:	080088f5 	.word	0x080088f5
 800884c:	080088f5 	.word	0x080088f5
 8008850:	080088f5 	.word	0x080088f5
 8008854:	080088f5 	.word	0x080088f5
 8008858:	080088f5 	.word	0x080088f5
 800885c:	080088f5 	.word	0x080088f5
 8008860:	080088f5 	.word	0x080088f5
 8008864:	080088df 	.word	0x080088df
 8008868:	080088f5 	.word	0x080088f5
 800886c:	080088f5 	.word	0x080088f5
 8008870:	080088f5 	.word	0x080088f5
 8008874:	080088f5 	.word	0x080088f5
 8008878:	080088f5 	.word	0x080088f5
 800887c:	080088f5 	.word	0x080088f5
 8008880:	080088f5 	.word	0x080088f5
 8008884:	080088fd 	.word	0x080088fd
 8008888:	080088f5 	.word	0x080088f5
 800888c:	080088f5 	.word	0x080088f5
 8008890:	080088f5 	.word	0x080088f5
 8008894:	080088f5 	.word	0x080088f5
 8008898:	080088f5 	.word	0x080088f5
 800889c:	080088f5 	.word	0x080088f5
 80088a0:	080088f5 	.word	0x080088f5
 80088a4:	080088fd 	.word	0x080088fd
 80088a8:	080088f5 	.word	0x080088f5
 80088ac:	080088f5 	.word	0x080088f5
 80088b0:	080088f5 	.word	0x080088f5
 80088b4:	080088f5 	.word	0x080088f5
 80088b8:	080088f5 	.word	0x080088f5
 80088bc:	080088f5 	.word	0x080088f5
 80088c0:	080088f5 	.word	0x080088f5
 80088c4:	080088fd 	.word	0x080088fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088cc:	3308      	adds	r3, #8
 80088ce:	2101      	movs	r1, #1
 80088d0:	4618      	mov	r0, r3
 80088d2:	f001 fe95 	bl	800a600 <RCCEx_PLL2_Config>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088dc:	e00f      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	3328      	adds	r3, #40	@ 0x28
 80088e4:	2101      	movs	r1, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 ff3c 	bl	800a764 <RCCEx_PLL3_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088f2:	e004      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088fa:	e000      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80088fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008906:	4bbf      	ldr	r3, [pc, #764]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008914:	4abb      	ldr	r2, [pc, #748]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008916:	430b      	orrs	r3, r1
 8008918:	6553      	str	r3, [r2, #84]	@ 0x54
 800891a:	e003      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f002 0302 	and.w	r3, r2, #2
 8008930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008934:	2300      	movs	r3, #0
 8008936:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800893a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800893e:	460b      	mov	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	d041      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800894a:	2b05      	cmp	r3, #5
 800894c:	d824      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800894e:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	080089a1 	.word	0x080089a1
 8008958:	0800896d 	.word	0x0800896d
 800895c:	08008983 	.word	0x08008983
 8008960:	080089a1 	.word	0x080089a1
 8008964:	080089a1 	.word	0x080089a1
 8008968:	080089a1 	.word	0x080089a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800896c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008970:	3308      	adds	r3, #8
 8008972:	2101      	movs	r1, #1
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fe43 	bl	800a600 <RCCEx_PLL2_Config>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008980:	e00f      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008986:	3328      	adds	r3, #40	@ 0x28
 8008988:	2101      	movs	r1, #1
 800898a:	4618      	mov	r0, r3
 800898c:	f001 feea 	bl	800a764 <RCCEx_PLL3_Config>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008996:	e004      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800899e:	e000      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80089a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089aa:	4b96      	ldr	r3, [pc, #600]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ae:	f023 0107 	bic.w	r1, r3, #7
 80089b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089b8:	4a92      	ldr	r2, [pc, #584]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089ba:	430b      	orrs	r3, r1
 80089bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80089be:	e003      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f002 0304 	and.w	r3, r2, #4
 80089d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4313      	orrs	r3, r2
 80089e6:	d044      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d825      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80089f4:	a201      	add	r2, pc, #4	@ (adr r2, 80089fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a49 	.word	0x08008a49
 8008a00:	08008a15 	.word	0x08008a15
 8008a04:	08008a2b 	.word	0x08008a2b
 8008a08:	08008a49 	.word	0x08008a49
 8008a0c:	08008a49 	.word	0x08008a49
 8008a10:	08008a49 	.word	0x08008a49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a18:	3308      	adds	r3, #8
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f001 fdef 	bl	800a600 <RCCEx_PLL2_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a28:	e00f      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2e:	3328      	adds	r3, #40	@ 0x28
 8008a30:	2101      	movs	r1, #1
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 fe96 	bl	800a764 <RCCEx_PLL3_Config>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a3e:	e004      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a46:	e000      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a52:	4b6c      	ldr	r3, [pc, #432]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a56:	f023 0107 	bic.w	r1, r3, #7
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a62:	4a68      	ldr	r2, [pc, #416]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a64:	430b      	orrs	r3, r1
 8008a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a68:	e003      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f002 0320 	and.w	r3, r2, #32
 8008a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a82:	2300      	movs	r3, #0
 8008a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	d055      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a9e:	d033      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008aa4:	d82c      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aaa:	d02f      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab0:	d826      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ab2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ab6:	d02b      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008ab8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008abc:	d820      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac2:	d012      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac8:	d81a      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d022      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad2:	d115      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad8:	3308      	adds	r3, #8
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 fd8f 	bl	800a600 <RCCEx_PLL2_Config>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ae8:	e015      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aee:	3328      	adds	r3, #40	@ 0x28
 8008af0:	2102      	movs	r1, #2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 fe36 	bl	800a764 <RCCEx_PLL3_Config>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008afe:	e00a      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b06:	e006      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b08:	bf00      	nop
 8008b0a:	e004      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b0c:	bf00      	nop
 8008b0e:	e002      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b10:	bf00      	nop
 8008b12:	e000      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10b      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b1e:	4b39      	ldr	r3, [pc, #228]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2e:	4a35      	ldr	r2, [pc, #212]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b34:	e003      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	d058      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b6a:	d033      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008b6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b70:	d82c      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b76:	d02f      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b7c:	d826      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b82:	d02b      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008b84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b88:	d820      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b8e:	d012      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b94:	d81a      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d022      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b9e:	d115      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fd29 	bl	800a600 <RCCEx_PLL2_Config>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bb4:	e015      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bba:	3328      	adds	r3, #40	@ 0x28
 8008bbc:	2102      	movs	r1, #2
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fdd0 	bl	800a764 <RCCEx_PLL3_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bca:	e00a      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bd2:	e006      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bd4:	bf00      	nop
 8008bd6:	e004      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bd8:	bf00      	nop
 8008bda:	e002      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bdc:	bf00      	nop
 8008bde:	e000      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10e      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bea:	4b06      	ldr	r3, [pc, #24]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bfa:	4a02      	ldr	r2, [pc, #8]	@ (8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c00:	e006      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008c02:	bf00      	nop
 8008c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c20:	2300      	movs	r3, #0
 8008c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	d055      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c3c:	d033      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008c3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c42:	d82c      	bhi.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c48:	d02f      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c4e:	d826      	bhi.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c54:	d02b      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008c56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c5a:	d820      	bhi.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c60:	d012      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008c62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c66:	d81a      	bhi.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d022      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c70:	d115      	bne.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c76:	3308      	adds	r3, #8
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 fcc0 	bl	800a600 <RCCEx_PLL2_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c86:	e015      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8c:	3328      	adds	r3, #40	@ 0x28
 8008c8e:	2102      	movs	r1, #2
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 fd67 	bl	800a764 <RCCEx_PLL3_Config>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c9c:	e00a      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ca4:	e006      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e004      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008caa:	bf00      	nop
 8008cac:	e002      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cae:	bf00      	nop
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10b      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ccc:	4a9d      	ldr	r2, [pc, #628]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd2:	e003      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f002 0308 	and.w	r3, r2, #8
 8008ce8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cf2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	d01e      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d08:	d10c      	bne.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0e:	3328      	adds	r3, #40	@ 0x28
 8008d10:	2102      	movs	r1, #2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f001 fd26 	bl	800a764 <RCCEx_PLL3_Config>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d24:	4b87      	ldr	r3, [pc, #540]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d34:	4a83      	ldr	r2, [pc, #524]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d36:	430b      	orrs	r3, r1
 8008d38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	f002 0310 	and.w	r3, r2, #16
 8008d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d54:	460b      	mov	r3, r1
 8008d56:	4313      	orrs	r3, r2
 8008d58:	d01e      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d66:	d10c      	bne.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	3328      	adds	r3, #40	@ 0x28
 8008d6e:	2102      	movs	r1, #2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 fcf7 	bl	800a764 <RCCEx_PLL3_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d82:	4b70      	ldr	r3, [pc, #448]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d92:	4a6c      	ldr	r2, [pc, #432]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008da4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008da8:	2300      	movs	r3, #0
 8008daa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008dae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008db2:	460b      	mov	r3, r1
 8008db4:	4313      	orrs	r3, r2
 8008db6:	d03e      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc4:	d022      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dca:	d81b      	bhi.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd4:	d00b      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008dd6:	e015      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ddc:	3308      	adds	r3, #8
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 fc0d 	bl	800a600 <RCCEx_PLL2_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dec:	e00f      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df2:	3328      	adds	r3, #40	@ 0x28
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 fcb4 	bl	800a764 <RCCEx_PLL3_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e02:	e004      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e0a:	e000      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e16:	4b4b      	ldr	r3, [pc, #300]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e26:	4a47      	ldr	r2, [pc, #284]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e2c:	e003      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e44:	2300      	movs	r3, #0
 8008e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	d03b      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e5e:	d01f      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008e60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e64:	d818      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e6a:	d003      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008e6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e70:	d007      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008e72:	e011      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e74:	4b33      	ldr	r3, [pc, #204]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e78:	4a32      	ldr	r2, [pc, #200]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e80:	e00f      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e86:	3328      	adds	r3, #40	@ 0x28
 8008e88:	2101      	movs	r1, #1
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 fc6a 	bl	800a764 <RCCEx_PLL3_Config>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e96:	e004      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e9e:	e000      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10b      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008eaa:	4b26      	ldr	r3, [pc, #152]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eba:	4a22      	ldr	r2, [pc, #136]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ebc:	430b      	orrs	r3, r1
 8008ebe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ec0:	e003      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008ed6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ed8:	2300      	movs	r3, #0
 8008eda:	677b      	str	r3, [r7, #116]	@ 0x74
 8008edc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	d034      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef4:	d007      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008ef6:	e011      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef8:	4b12      	ldr	r3, [pc, #72]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efc:	4a11      	ldr	r2, [pc, #68]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f04:	e00e      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	2102      	movs	r1, #2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fb76 	bl	800a600 <RCCEx_PLL2_Config>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f1a:	e003      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10d      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f2c:	4b05      	ldr	r3, [pc, #20]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3a:	4a02      	ldr	r2, [pc, #8]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f3c:	430b      	orrs	r3, r1
 8008f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f40:	e006      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f5e:	2300      	movs	r3, #0
 8008f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f66:	460b      	mov	r3, r1
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	d00c      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f70:	3328      	adds	r3, #40	@ 0x28
 8008f72:	2102      	movs	r1, #2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 fbf5 	bl	800a764 <RCCEx_PLL3_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f92:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f94:	2300      	movs	r3, #0
 8008f96:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	d038      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fae:	d018      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fb4:	d811      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fba:	d014      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc0:	d80b      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d011      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fca:	d106      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fcc:	4bc3      	ldr	r3, [pc, #780]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd0:	4ac2      	ldr	r2, [pc, #776]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008fd8:	e008      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fe0:	e004      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008fe2:	bf00      	nop
 8008fe4:	e002      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008fe6:	bf00      	nop
 8008fe8:	e000      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10b      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ff4:	4bb9      	ldr	r3, [pc, #740]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009004:	4ab5      	ldr	r2, [pc, #724]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009006:	430b      	orrs	r3, r1
 8009008:	6553      	str	r3, [r2, #84]	@ 0x54
 800900a:	e003      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009022:	2300      	movs	r3, #0
 8009024:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009026:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800902a:	460b      	mov	r3, r1
 800902c:	4313      	orrs	r3, r2
 800902e:	d009      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009030:	4baa      	ldr	r3, [pc, #680]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009034:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800903e:	4aa7      	ldr	r2, [pc, #668]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009040:	430b      	orrs	r3, r1
 8009042:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009050:	653b      	str	r3, [r7, #80]	@ 0x50
 8009052:	2300      	movs	r3, #0
 8009054:	657b      	str	r3, [r7, #84]	@ 0x54
 8009056:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800905a:	460b      	mov	r3, r1
 800905c:	4313      	orrs	r3, r2
 800905e:	d00a      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009060:	4b9e      	ldr	r3, [pc, #632]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009070:	4a9a      	ldr	r2, [pc, #616]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009072:	430b      	orrs	r3, r1
 8009074:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009084:	2300      	movs	r3, #0
 8009086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009088:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800908c:	460b      	mov	r3, r1
 800908e:	4313      	orrs	r3, r2
 8009090:	d009      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009092:	4b92      	ldr	r3, [pc, #584]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009096:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800909a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090a0:	4a8e      	ldr	r2, [pc, #568]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090a2:	430b      	orrs	r3, r1
 80090a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80090b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090b4:	2300      	movs	r3, #0
 80090b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80090b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80090bc:	460b      	mov	r3, r1
 80090be:	4313      	orrs	r3, r2
 80090c0:	d00e      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090c2:	4b86      	ldr	r3, [pc, #536]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	4a85      	ldr	r2, [pc, #532]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090cc:	6113      	str	r3, [r2, #16]
 80090ce:	4b83      	ldr	r3, [pc, #524]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090d0:	6919      	ldr	r1, [r3, #16]
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80090da:	4a80      	ldr	r2, [pc, #512]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80090ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090ee:	2300      	movs	r3, #0
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80090f6:	460b      	mov	r3, r1
 80090f8:	4313      	orrs	r3, r2
 80090fa:	d009      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090fc:	4b77      	ldr	r3, [pc, #476]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009100:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910a:	4a74      	ldr	r2, [pc, #464]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800910c:	430b      	orrs	r3, r1
 800910e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800911c:	633b      	str	r3, [r7, #48]	@ 0x30
 800911e:	2300      	movs	r3, #0
 8009120:	637b      	str	r3, [r7, #52]	@ 0x34
 8009122:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009126:	460b      	mov	r3, r1
 8009128:	4313      	orrs	r3, r2
 800912a:	d00a      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800912c:	4b6b      	ldr	r3, [pc, #428]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800912e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009130:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009138:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800913c:	4a67      	ldr	r2, [pc, #412]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800913e:	430b      	orrs	r3, r1
 8009140:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	2100      	movs	r1, #0
 800914c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009154:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009158:	460b      	mov	r3, r1
 800915a:	4313      	orrs	r3, r2
 800915c:	d011      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009162:	3308      	adds	r3, #8
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f001 fa4a 	bl	800a600 <RCCEx_PLL2_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800917e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	2100      	movs	r1, #0
 800918c:	6239      	str	r1, [r7, #32]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
 8009194:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009198:	460b      	mov	r3, r1
 800919a:	4313      	orrs	r3, r2
 800919c:	d011      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a2:	3308      	adds	r3, #8
 80091a4:	2101      	movs	r1, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 fa2a 	bl	800a600 <RCCEx_PLL2_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80091b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	2100      	movs	r1, #0
 80091cc:	61b9      	str	r1, [r7, #24]
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	61fb      	str	r3, [r7, #28]
 80091d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091d8:	460b      	mov	r3, r1
 80091da:	4313      	orrs	r3, r2
 80091dc:	d011      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e2:	3308      	adds	r3, #8
 80091e4:	2102      	movs	r1, #2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fa0a 	bl	800a600 <RCCEx_PLL2_Config>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80091f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	2100      	movs	r1, #0
 800920c:	6139      	str	r1, [r7, #16]
 800920e:	f003 0308 	and.w	r3, r3, #8
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009218:	460b      	mov	r3, r1
 800921a:	4313      	orrs	r3, r2
 800921c:	d011      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009222:	3328      	adds	r3, #40	@ 0x28
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f001 fa9c 	bl	800a764 <RCCEx_PLL3_Config>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	2100      	movs	r1, #0
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	f003 0310 	and.w	r3, r3, #16
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009258:	460b      	mov	r3, r1
 800925a:	4313      	orrs	r3, r2
 800925c:	d011      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009262:	3328      	adds	r3, #40	@ 0x28
 8009264:	2101      	movs	r1, #1
 8009266:	4618      	mov	r0, r3
 8009268:	f001 fa7c 	bl	800a764 <RCCEx_PLL3_Config>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800927e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	2100      	movs	r1, #0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	607b      	str	r3, [r7, #4]
 8009294:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009298:	460b      	mov	r3, r1
 800929a:	4313      	orrs	r3, r2
 800929c:	d011      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a2:	3328      	adds	r3, #40	@ 0x28
 80092a4:	2102      	movs	r1, #2
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 fa5c 	bl	800a764 <RCCEx_PLL3_Config>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80092c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e000      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80092d6:	46bd      	mov	sp, r7
 80092d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092dc:	58024400 	.word	0x58024400

080092e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b090      	sub	sp, #64	@ 0x40
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80092ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80092f2:	430b      	orrs	r3, r1
 80092f4:	f040 8094 	bne.w	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80092f8:	4b9e      	ldr	r3, [pc, #632]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	2b04      	cmp	r3, #4
 8009306:	f200 8087 	bhi.w	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800930a:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009325 	.word	0x08009325
 8009314:	0800934d 	.word	0x0800934d
 8009318:	08009375 	.word	0x08009375
 800931c:	08009411 	.word	0x08009411
 8009320:	0800939d 	.word	0x0800939d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009324:	4b93      	ldr	r3, [pc, #588]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800932c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009330:	d108      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009336:	4618      	mov	r0, r3
 8009338:	f001 f810 	bl	800a35c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800933c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009340:	f000 bd45 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009348:	f000 bd41 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800934c:	4b89      	ldr	r3, [pc, #548]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009358:	d108      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935a:	f107 0318 	add.w	r3, r7, #24
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fd54 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009368:	f000 bd31 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009370:	f000 bd2d 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009374:	4b7f      	ldr	r3, [pc, #508]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800937c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009380:	d108      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009382:	f107 030c 	add.w	r3, r7, #12
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fe94 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009390:	f000 bd1d 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009398:	f000 bd19 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800939c:	4b75      	ldr	r3, [pc, #468]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800939e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093a6:	4b73      	ldr	r3, [pc, #460]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d10c      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80093b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d109      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b8:	4b6e      	ldr	r3, [pc, #440]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	08db      	lsrs	r3, r3, #3
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	4a6d      	ldr	r2, [pc, #436]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093ca:	e01f      	b.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093cc:	4b69      	ldr	r3, [pc, #420]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d8:	d106      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80093da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093e0:	d102      	bne.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093e2:	4b66      	ldr	r3, [pc, #408]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80093e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093e6:	e011      	b.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093e8:	4b62      	ldr	r3, [pc, #392]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093f4:	d106      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80093f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fc:	d102      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093fe:	4b60      	ldr	r3, [pc, #384]	@ (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009402:	e003      	b.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009408:	f000 bce1 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800940c:	f000 bcdf 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009410:	4b5c      	ldr	r3, [pc, #368]	@ (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009414:	f000 bcdb 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941c:	f000 bcd7 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009424:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009428:	430b      	orrs	r3, r1
 800942a:	f040 80ad 	bne.w	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800942e:	4b51      	ldr	r3, [pc, #324]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009432:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009436:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800943e:	d056      	beq.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009446:	f200 8090 	bhi.w	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	2bc0      	cmp	r3, #192	@ 0xc0
 800944e:	f000 8088 	beq.w	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009454:	2bc0      	cmp	r3, #192	@ 0xc0
 8009456:	f200 8088 	bhi.w	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	2b80      	cmp	r3, #128	@ 0x80
 800945e:	d032      	beq.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	2b80      	cmp	r3, #128	@ 0x80
 8009464:	f200 8081 	bhi.w	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800946e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009470:	2b40      	cmp	r3, #64	@ 0x40
 8009472:	d014      	beq.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009474:	e079      	b.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009476:	4b3f      	ldr	r3, [pc, #252]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800947e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009482:	d108      	bne.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009488:	4618      	mov	r0, r3
 800948a:	f000 ff67 	bl	800a35c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800948e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009492:	f000 bc9c 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800949a:	f000 bc98 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800949e:	4b35      	ldr	r3, [pc, #212]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094aa:	d108      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ac:	f107 0318 	add.w	r3, r7, #24
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 fcab 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ba:	f000 bc88 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c2:	f000 bc84 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d2:	d108      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d4:	f107 030c 	add.w	r3, r7, #12
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 fdeb 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094e2:	f000 bc74 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ea:	f000 bc70 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094ee:	4b21      	ldr	r3, [pc, #132]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b04      	cmp	r3, #4
 8009502:	d10c      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800950a:	4b1a      	ldr	r3, [pc, #104]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	4a18      	ldr	r2, [pc, #96]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009516:	fa22 f303 	lsr.w	r3, r2, r3
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800951c:	e01f      	b.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800951e:	4b15      	ldr	r3, [pc, #84]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800952a:	d106      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800952c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009532:	d102      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009534:	4b11      	ldr	r3, [pc, #68]	@ (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009538:	e011      	b.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800953a:	4b0e      	ldr	r3, [pc, #56]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009546:	d106      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800954e:	d102      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009550:	4b0b      	ldr	r3, [pc, #44]	@ (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009554:	e003      	b.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800955a:	f000 bc38 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800955e:	f000 bc36 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009562:	4b08      	ldr	r3, [pc, #32]	@ (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009566:	f000 bc32 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800956e:	f000 bc2e 	b.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009572:	bf00      	nop
 8009574:	58024400 	.word	0x58024400
 8009578:	03d09000 	.word	0x03d09000
 800957c:	003d0900 	.word	0x003d0900
 8009580:	007a1200 	.word	0x007a1200
 8009584:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800958c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009590:	430b      	orrs	r3, r1
 8009592:	f040 809c 	bne.w	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009596:	4b9e      	ldr	r3, [pc, #632]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800959a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800959e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095a6:	d054      	beq.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80095a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095ae:	f200 808b 	bhi.w	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80095b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80095b8:	f000 8083 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80095bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80095c2:	f200 8081 	bhi.w	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095cc:	d02f      	beq.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095d4:	d878      	bhi.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095e2:	d012      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80095e4:	e070      	b.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095e6:	4b8a      	ldr	r3, [pc, #552]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095f2:	d107      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 feaf 	bl	800a35c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009602:	e3e4      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009608:	e3e1      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800960a:	4b81      	ldr	r3, [pc, #516]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009616:	d107      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009618:	f107 0318 	add.w	r3, r7, #24
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fbf5 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009626:	e3d2      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962c:	e3cf      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800962e:	4b78      	ldr	r3, [pc, #480]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800963a:	d107      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963c:	f107 030c 	add.w	r3, r7, #12
 8009640:	4618      	mov	r0, r3
 8009642:	f000 fd37 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800964a:	e3c0      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009650:	e3bd      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009652:	4b6f      	ldr	r3, [pc, #444]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009656:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800965c:	4b6c      	ldr	r3, [pc, #432]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b04      	cmp	r3, #4
 8009666:	d10c      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800966a:	2b00      	cmp	r3, #0
 800966c:	d109      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800966e:	4b68      	ldr	r3, [pc, #416]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	08db      	lsrs	r3, r3, #3
 8009674:	f003 0303 	and.w	r3, r3, #3
 8009678:	4a66      	ldr	r2, [pc, #408]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800967a:	fa22 f303 	lsr.w	r3, r2, r3
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009680:	e01e      	b.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009682:	4b63      	ldr	r3, [pc, #396]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800968a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800968e:	d106      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009692:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009696:	d102      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009698:	4b5f      	ldr	r3, [pc, #380]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800969a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800969c:	e010      	b.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800969e:	4b5c      	ldr	r3, [pc, #368]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096aa:	d106      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80096ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096b2:	d102      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096b4:	4b59      	ldr	r3, [pc, #356]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80096b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b8:	e002      	b.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096be:	e386      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096c0:	e385      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096c2:	4b57      	ldr	r3, [pc, #348]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80096c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c6:	e382      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096cc:	e37f      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80096ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80096d6:	430b      	orrs	r3, r1
 80096d8:	f040 80a7 	bne.w	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80096dc:	4b4c      	ldr	r3, [pc, #304]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80096e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80096e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096ec:	d055      	beq.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096f4:	f200 8096 	bhi.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80096f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80096fe:	f000 8084 	beq.w	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009708:	f200 808c 	bhi.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800970c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009712:	d030      	beq.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800971a:	f200 8083 	bhi.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800972a:	d012      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800972c:	e07a      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800972e:	4b38      	ldr	r3, [pc, #224]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009736:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800973a:	d107      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800973c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fe0b 	bl	800a35c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974a:	e340      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009750:	e33d      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009752:	4b2f      	ldr	r3, [pc, #188]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800975a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800975e:	d107      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009760:	f107 0318 	add.w	r3, r7, #24
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fb51 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800976e:	e32e      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009774:	e32b      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009776:	4b26      	ldr	r3, [pc, #152]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800977e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009782:	d107      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009784:	f107 030c 	add.w	r3, r7, #12
 8009788:	4618      	mov	r0, r3
 800978a:	f000 fc93 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009792:	e31c      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009798:	e319      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800979a:	4b1d      	ldr	r3, [pc, #116]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800979c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800979e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d10c      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80097b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097b6:	4b16      	ldr	r3, [pc, #88]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	08db      	lsrs	r3, r3, #3
 80097bc:	f003 0303 	and.w	r3, r3, #3
 80097c0:	4a14      	ldr	r2, [pc, #80]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80097c2:	fa22 f303 	lsr.w	r3, r2, r3
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097c8:	e01e      	b.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ca:	4b11      	ldr	r3, [pc, #68]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097d6:	d106      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80097d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097de:	d102      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80097e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e4:	e010      	b.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097f2:	d106      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80097f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097fa:	d102      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097fc:	4b07      	ldr	r3, [pc, #28]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80097fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009800:	e002      	b.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009806:	e2e2      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009808:	e2e1      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800980a:	4b05      	ldr	r3, [pc, #20]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800980c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800980e:	e2de      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009810:	58024400 	.word	0x58024400
 8009814:	03d09000 	.word	0x03d09000
 8009818:	003d0900 	.word	0x003d0900
 800981c:	007a1200 	.word	0x007a1200
 8009820:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009828:	e2d1      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800982a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800982e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009832:	430b      	orrs	r3, r1
 8009834:	f040 809c 	bne.w	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009838:	4b93      	ldr	r3, [pc, #588]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800983a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800983c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009840:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009844:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009848:	d054      	beq.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009850:	f200 808b 	bhi.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800985a:	f000 8083 	beq.w	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800985e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009860:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009864:	f200 8081 	bhi.w	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800986e:	d02f      	beq.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009876:	d878      	bhi.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800987e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009884:	d012      	beq.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009886:	e070      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009888:	4b7f      	ldr	r3, [pc, #508]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009890:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009894:	d107      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fd5e 	bl	800a35c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a4:	e293      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098aa:	e290      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098ac:	4b76      	ldr	r3, [pc, #472]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b8:	d107      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ba:	f107 0318 	add.w	r3, r7, #24
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 faa4 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c8:	e281      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ce:	e27e      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098d0:	4b6d      	ldr	r3, [pc, #436]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098dc:	d107      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098de:	f107 030c 	add.w	r3, r7, #12
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fbe6 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ec:	e26f      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f2:	e26c      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098f4:	4b64      	ldr	r3, [pc, #400]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098fe:	4b62      	ldr	r3, [pc, #392]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b04      	cmp	r3, #4
 8009908:	d10c      	bne.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009910:	4b5d      	ldr	r3, [pc, #372]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	08db      	lsrs	r3, r3, #3
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	4a5c      	ldr	r2, [pc, #368]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009922:	e01e      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009924:	4b58      	ldr	r3, [pc, #352]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800992c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009930:	d106      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009938:	d102      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800993a:	4b55      	ldr	r3, [pc, #340]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800993c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800993e:	e010      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009940:	4b51      	ldr	r3, [pc, #324]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009948:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800994c:	d106      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800994e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009954:	d102      	bne.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009956:	4b4f      	ldr	r3, [pc, #316]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800995a:	e002      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009960:	e235      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009962:	e234      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009964:	4b4c      	ldr	r3, [pc, #304]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009968:	e231      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996e:	e22e      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009974:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009978:	430b      	orrs	r3, r1
 800997a:	f040 808f 	bne.w	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800997e:	4b42      	ldr	r3, [pc, #264]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009982:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009986:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800998e:	d06b      	beq.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009992:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009996:	d874      	bhi.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800999e:	d056      	beq.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099a6:	d86c      	bhi.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80099a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099ae:	d03b      	beq.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099b6:	d864      	bhi.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099be:	d021      	beq.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80099c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099c6:	d85c      	bhi.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80099c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d004      	beq.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80099ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099d4:	d004      	beq.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80099d6:	e054      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80099d8:	f7fe fa0a 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 80099dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099de:	e1f6      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099e0:	4b29      	ldr	r3, [pc, #164]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ec:	d107      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ee:	f107 0318 	add.w	r3, r7, #24
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fa0a 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099fc:	e1e7      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a02:	e1e4      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a04:	4b20      	ldr	r3, [pc, #128]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a10:	d107      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a12:	f107 030c 	add.w	r3, r7, #12
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 fb4c 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a20:	e1d5      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a26:	e1d2      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a28:	4b17      	ldr	r3, [pc, #92]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d109      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a34:	4b14      	ldr	r3, [pc, #80]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	08db      	lsrs	r3, r3, #3
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	4a13      	ldr	r2, [pc, #76]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009a40:	fa22 f303 	lsr.w	r3, r2, r3
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a46:	e1c2      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4c:	e1bf      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a5a:	d102      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a60:	e1b5      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a66:	e1b2      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a68:	4b07      	ldr	r3, [pc, #28]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a74:	d102      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009a76:	4b07      	ldr	r3, [pc, #28]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a7a:	e1a8      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e1a5      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a86:	e1a2      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a88:	58024400 	.word	0x58024400
 8009a8c:	03d09000 	.word	0x03d09000
 8009a90:	003d0900 	.word	0x003d0900
 8009a94:	007a1200 	.word	0x007a1200
 8009a98:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	d173      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009aa8:	4b9c      	ldr	r3, [pc, #624]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009ab0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ab8:	d02f      	beq.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ac0:	d863      	bhi.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ace:	d012      	beq.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009ad0:	e05b      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ad2:	4b92      	ldr	r3, [pc, #584]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ade:	d107      	bne.n	8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae0:	f107 0318 	add.w	r3, r7, #24
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 f991 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aee:	e16e      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af4:	e16b      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009af6:	4b89      	ldr	r3, [pc, #548]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b02:	d107      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b04:	f107 030c 	add.w	r3, r7, #12
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fad3 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b12:	e15c      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b18:	e159      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b1a:	4b80      	ldr	r3, [pc, #512]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b24:	4b7d      	ldr	r3, [pc, #500]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d10c      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d109      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b36:	4b79      	ldr	r3, [pc, #484]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	08db      	lsrs	r3, r3, #3
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	4a77      	ldr	r2, [pc, #476]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009b42:	fa22 f303 	lsr.w	r3, r2, r3
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b48:	e01e      	b.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b4a:	4b74      	ldr	r3, [pc, #464]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b56:	d106      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b5e:	d102      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b60:	4b70      	ldr	r3, [pc, #448]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b64:	e010      	b.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b66:	4b6d      	ldr	r3, [pc, #436]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b72:	d106      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b7a:	d102      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b80:	e002      	b.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009b86:	e122      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b88:	e121      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b8e:	e11e      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b94:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	d133      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ba4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bb2:	d012      	beq.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009bb4:	e023      	b.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bb6:	4b59      	ldr	r3, [pc, #356]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bc2:	d107      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fbc7 	bl	800a35c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd2:	e0fc      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd8:	e0f9      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bda:	4b50      	ldr	r3, [pc, #320]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009be6:	d107      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be8:	f107 0318 	add.w	r3, r7, #24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f90d 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bf6:	e0ea      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bfc:	e0e7      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c02:	e0e4      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c08:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	f040 808d 	bne.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009c12:	4b42      	ldr	r3, [pc, #264]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c16:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009c1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c22:	d06b      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c2a:	d874      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c32:	d056      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c3a:	d86c      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c42:	d03b      	beq.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c4a:	d864      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c52:	d021      	beq.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c5a:	d85c      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d004      	beq.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c68:	d004      	beq.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009c6a:	e054      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009c6c:	f000 f8b8 	bl	8009de0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c72:	e0ac      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c74:	4b29      	ldr	r3, [pc, #164]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c80:	d107      	bne.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c82:	f107 0318 	add.w	r3, r7, #24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 f8c0 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c90:	e09d      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c96:	e09a      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c98:	4b20      	ldr	r3, [pc, #128]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ca4:	d107      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ca6:	f107 030c 	add.w	r3, r7, #12
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fa02 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cb4:	e08b      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cba:	e088      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009cbc:	4b17      	ldr	r3, [pc, #92]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d109      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cc8:	4b14      	ldr	r3, [pc, #80]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	08db      	lsrs	r3, r3, #3
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	4a13      	ldr	r2, [pc, #76]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cda:	e078      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce0:	e075      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cee:	d102      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf4:	e06b      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cfa:	e068      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009cfc:	4b07      	ldr	r3, [pc, #28]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d08:	d102      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009d0a:	4b07      	ldr	r3, [pc, #28]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d0e:	e05e      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e05b      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d1a:	e058      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	03d09000 	.word	0x03d09000
 8009d24:	003d0900 	.word	0x003d0900
 8009d28:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009d34:	430b      	orrs	r3, r1
 8009d36:	d148      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009d38:	4b27      	ldr	r3, [pc, #156]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d48:	d02a      	beq.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d50:	d838      	bhi.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d004      	beq.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d5e:	d00d      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009d60:	e030      	b.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009d62:	4b1d      	ldr	r3, [pc, #116]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d6e:	d102      	bne.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009d70:	4b1a      	ldr	r3, [pc, #104]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d74:	e02b      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d7a:	e028      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d7c:	4b16      	ldr	r3, [pc, #88]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d88:	d107      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fae4 	bl	800a35c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d98:	e019      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d9e:	e016      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009da0:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dac:	d107      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dae:	f107 0318 	add.w	r3, r7, #24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f82a 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dbc:	e007      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc2:	e004      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc8:	e001      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3740      	adds	r7, #64	@ 0x40
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	007a1200 	.word	0x007a1200

08009de0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009de4:	f7fd ffd4 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8009de8:	4602      	mov	r2, r0
 8009dea:	4b06      	ldr	r3, [pc, #24]	@ (8009e04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	091b      	lsrs	r3, r3, #4
 8009df0:	f003 0307 	and.w	r3, r3, #7
 8009df4:	4904      	ldr	r1, [pc, #16]	@ (8009e08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009df6:	5ccb      	ldrb	r3, [r1, r3]
 8009df8:	f003 031f 	and.w	r3, r3, #31
 8009dfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	58024400 	.word	0x58024400
 8009e08:	08020c04 	.word	0x08020c04

08009e0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b089      	sub	sp, #36	@ 0x24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e14:	4ba1      	ldr	r3, [pc, #644]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009e1e:	4b9f      	ldr	r3, [pc, #636]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e22:	0b1b      	lsrs	r3, r3, #12
 8009e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e2a:	4b9c      	ldr	r3, [pc, #624]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2e:	091b      	lsrs	r3, r3, #4
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009e36:	4b99      	ldr	r3, [pc, #612]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e3a:	08db      	lsrs	r3, r3, #3
 8009e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	fb02 f303 	mul.w	r3, r2, r3
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8111 	beq.w	800a07c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	f000 8083 	beq.w	8009f68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	f200 80a1 	bhi.w	8009fac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d056      	beq.n	8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009e76:	e099      	b.n	8009fac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e78:	4b88      	ldr	r3, [pc, #544]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0320 	and.w	r3, r3, #32
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d02d      	beq.n	8009ee0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e84:	4b85      	ldr	r3, [pc, #532]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	08db      	lsrs	r3, r3, #3
 8009e8a:	f003 0303 	and.w	r3, r3, #3
 8009e8e:	4a84      	ldr	r2, [pc, #528]	@ (800a0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009e90:	fa22 f303 	lsr.w	r3, r2, r3
 8009e94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eae:	4b7b      	ldr	r3, [pc, #492]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ede:	e087      	b.n	8009ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efa:	ee07 3a90 	vmov	s15, r3
 8009efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f22:	e065      	b.n	8009ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f36:	4b59      	ldr	r3, [pc, #356]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f66:	e043      	b.n	8009ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7a:	4b48      	ldr	r3, [pc, #288]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009faa:	e021      	b.n	8009ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fbe:	4b37      	ldr	r3, [pc, #220]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff4:	0a5b      	lsrs	r3, r3, #9
 8009ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a016:	ee17 2a90 	vmov	r2, s15
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a01e:	4b1f      	ldr	r3, [pc, #124]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a022:	0c1b      	lsrs	r3, r3, #16
 800a024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a028:	ee07 3a90 	vmov	s15, r3
 800a02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a030:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a034:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a038:	edd7 6a07 	vldr	s13, [r7, #28]
 800a03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a044:	ee17 2a90 	vmov	r2, s15
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a04c:	4b13      	ldr	r3, [pc, #76]	@ (800a09c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a04e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a050:	0e1b      	lsrs	r3, r3, #24
 800a052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a062:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a066:	edd7 6a07 	vldr	s13, [r7, #28]
 800a06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a072:	ee17 2a90 	vmov	r2, s15
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a07a:	e008      	b.n	800a08e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	609a      	str	r2, [r3, #8]
}
 800a08e:	bf00      	nop
 800a090:	3724      	adds	r7, #36	@ 0x24
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	58024400 	.word	0x58024400
 800a0a0:	03d09000 	.word	0x03d09000
 800a0a4:	46000000 	.word	0x46000000
 800a0a8:	4c742400 	.word	0x4c742400
 800a0ac:	4a742400 	.word	0x4a742400
 800a0b0:	4af42400 	.word	0x4af42400

0800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b089      	sub	sp, #36	@ 0x24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0bc:	4ba1      	ldr	r3, [pc, #644]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a0c6:	4b9f      	ldr	r3, [pc, #636]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ca:	0d1b      	lsrs	r3, r3, #20
 800a0cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a0d2:	4b9c      	ldr	r3, [pc, #624]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d6:	0a1b      	lsrs	r3, r3, #8
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a0de:	4b99      	ldr	r3, [pc, #612]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0e2:	08db      	lsrs	r3, r3, #3
 800a0e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	fb02 f303 	mul.w	r3, r2, r3
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8111 	beq.w	800a324 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b02      	cmp	r3, #2
 800a106:	f000 8083 	beq.w	800a210 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	f200 80a1 	bhi.w	800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d056      	beq.n	800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a11e:	e099      	b.n	800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a120:	4b88      	ldr	r3, [pc, #544]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d02d      	beq.n	800a188 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a12c:	4b85      	ldr	r3, [pc, #532]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	08db      	lsrs	r3, r3, #3
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	4a84      	ldr	r2, [pc, #528]	@ (800a348 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a138:	fa22 f303 	lsr.w	r3, r2, r3
 800a13c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	ee07 3a90 	vmov	s15, r3
 800a144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a156:	4b7b      	ldr	r3, [pc, #492]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a166:	ed97 6a03 	vldr	s12, [r7, #12]
 800a16a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a34c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a182:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a186:	e087      	b.n	800a298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a192:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a350 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19a:	4b6a      	ldr	r3, [pc, #424]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a34c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ca:	e065      	b.n	800a298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1de:	4b59      	ldr	r3, [pc, #356]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a34c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a20e:	e043      	b.n	800a298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a358 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a222:	4b48      	ldr	r3, [pc, #288]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a232:	ed97 6a03 	vldr	s12, [r7, #12]
 800a236:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a34c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a24e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a252:	e021      	b.n	800a298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	ee07 3a90 	vmov	s15, r3
 800a25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a266:	4b37      	ldr	r3, [pc, #220]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a276:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a34c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a296:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a298:	4b2a      	ldr	r3, [pc, #168]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a29c:	0a5b      	lsrs	r3, r3, #9
 800a29e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2be:	ee17 2a90 	vmov	r2, s15
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a2c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ca:	0c1b      	lsrs	r3, r3, #16
 800a2cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2d0:	ee07 3a90 	vmov	s15, r3
 800a2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ec:	ee17 2a90 	vmov	r2, s15
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a2f4:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f8:	0e1b      	lsrs	r3, r3, #24
 800a2fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2fe:	ee07 3a90 	vmov	s15, r3
 800a302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a30a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a30e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a31a:	ee17 2a90 	vmov	r2, s15
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a322:	e008      	b.n	800a336 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	609a      	str	r2, [r3, #8]
}
 800a336:	bf00      	nop
 800a338:	3724      	adds	r7, #36	@ 0x24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	58024400 	.word	0x58024400
 800a348:	03d09000 	.word	0x03d09000
 800a34c:	46000000 	.word	0x46000000
 800a350:	4c742400 	.word	0x4c742400
 800a354:	4a742400 	.word	0x4a742400
 800a358:	4af42400 	.word	0x4af42400

0800a35c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b089      	sub	sp, #36	@ 0x24
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a364:	4ba0      	ldr	r3, [pc, #640]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a36e:	4b9e      	ldr	r3, [pc, #632]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a372:	091b      	lsrs	r3, r3, #4
 800a374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a378:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a37a:	4b9b      	ldr	r3, [pc, #620]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a384:	4b98      	ldr	r3, [pc, #608]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a388:	08db      	lsrs	r3, r3, #3
 800a38a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	fb02 f303 	mul.w	r3, r2, r3
 800a394:	ee07 3a90 	vmov	s15, r3
 800a398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 8111 	beq.w	800a5ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	f000 8083 	beq.w	800a4b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	f200 80a1 	bhi.w	800a4fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d056      	beq.n	800a472 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a3c4:	e099      	b.n	800a4fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3c6:	4b88      	ldr	r3, [pc, #544]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0320 	and.w	r3, r3, #32
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d02d      	beq.n	800a42e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3d2:	4b85      	ldr	r3, [pc, #532]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	f003 0303 	and.w	r3, r3, #3
 800a3dc:	4a83      	ldr	r2, [pc, #524]	@ (800a5ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a3de:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	ee07 3a90 	vmov	s15, r3
 800a3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	ee07 3a90 	vmov	s15, r3
 800a3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fc:	4b7a      	ldr	r3, [pc, #488]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a404:	ee07 3a90 	vmov	s15, r3
 800a408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a410:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a424:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a428:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a42c:	e087      	b.n	800a53e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	ee07 3a90 	vmov	s15, r3
 800a434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a438:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a43c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a440:	4b69      	ldr	r3, [pc, #420]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a448:	ee07 3a90 	vmov	s15, r3
 800a44c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a450:	ed97 6a03 	vldr	s12, [r7, #12]
 800a454:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a45c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a470:	e065      	b.n	800a53e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	ee07 3a90 	vmov	s15, r3
 800a478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a484:	4b58      	ldr	r3, [pc, #352]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48c:	ee07 3a90 	vmov	s15, r3
 800a490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a494:	ed97 6a03 	vldr	s12, [r7, #12]
 800a498:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a49c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4b4:	e043      	b.n	800a53e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a5fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a4c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c8:	4b47      	ldr	r3, [pc, #284]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d0:	ee07 3a90 	vmov	s15, r3
 800a4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a4e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4f8:	e021      	b.n	800a53e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	ee07 3a90 	vmov	s15, r3
 800a500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a504:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50c:	4b36      	ldr	r3, [pc, #216]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a514:	ee07 3a90 	vmov	s15, r3
 800a518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a520:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a534:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a53c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a53e:	4b2a      	ldr	r3, [pc, #168]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a542:	0a5b      	lsrs	r3, r3, #9
 800a544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a554:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a558:	edd7 6a07 	vldr	s13, [r7, #28]
 800a55c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a564:	ee17 2a90 	vmov	r2, s15
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a56c:	4b1e      	ldr	r3, [pc, #120]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a56e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a570:	0c1b      	lsrs	r3, r3, #16
 800a572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a582:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a586:	edd7 6a07 	vldr	s13, [r7, #28]
 800a58a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a58e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a592:	ee17 2a90 	vmov	r2, s15
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a59a:	4b13      	ldr	r3, [pc, #76]	@ (800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a59e:	0e1b      	lsrs	r3, r3, #24
 800a5a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5a4:	ee07 3a90 	vmov	s15, r3
 800a5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5c0:	ee17 2a90 	vmov	r2, s15
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a5c8:	e008      	b.n	800a5dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	609a      	str	r2, [r3, #8]
}
 800a5dc:	bf00      	nop
 800a5de:	3724      	adds	r7, #36	@ 0x24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	58024400 	.word	0x58024400
 800a5ec:	03d09000 	.word	0x03d09000
 800a5f0:	46000000 	.word	0x46000000
 800a5f4:	4c742400 	.word	0x4c742400
 800a5f8:	4a742400 	.word	0x4a742400
 800a5fc:	4af42400 	.word	0x4af42400

0800a600 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a60e:	4b53      	ldr	r3, [pc, #332]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	2b03      	cmp	r3, #3
 800a618:	d101      	bne.n	800a61e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e099      	b.n	800a752 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a61e:	4b4f      	ldr	r3, [pc, #316]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a4e      	ldr	r2, [pc, #312]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a624:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a62a:	f7f7 ffc9 	bl	80025c0 <HAL_GetTick>
 800a62e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a630:	e008      	b.n	800a644 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a632:	f7f7 ffc5 	bl	80025c0 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d901      	bls.n	800a644 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e086      	b.n	800a752 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a644:	4b45      	ldr	r3, [pc, #276]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1f0      	bne.n	800a632 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a650:	4b42      	ldr	r3, [pc, #264]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a654:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	031b      	lsls	r3, r3, #12
 800a65e:	493f      	ldr	r1, [pc, #252]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a660:	4313      	orrs	r3, r2
 800a662:	628b      	str	r3, [r1, #40]	@ 0x28
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	3b01      	subs	r3, #1
 800a674:	025b      	lsls	r3, r3, #9
 800a676:	b29b      	uxth	r3, r3
 800a678:	431a      	orrs	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	3b01      	subs	r3, #1
 800a680:	041b      	lsls	r3, r3, #16
 800a682:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a686:	431a      	orrs	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	061b      	lsls	r3, r3, #24
 800a690:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a694:	4931      	ldr	r1, [pc, #196]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a696:	4313      	orrs	r3, r2
 800a698:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a69a:	4b30      	ldr	r3, [pc, #192]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	492d      	ldr	r1, [pc, #180]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a6ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b0:	f023 0220 	bic.w	r2, r3, #32
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	4928      	ldr	r1, [pc, #160]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a6be:	4b27      	ldr	r3, [pc, #156]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c2:	4a26      	ldr	r2, [pc, #152]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6c4:	f023 0310 	bic.w	r3, r3, #16
 800a6c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a6ca:	4b24      	ldr	r3, [pc, #144]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6ce:	4b24      	ldr	r3, [pc, #144]	@ (800a760 <RCCEx_PLL2_Config+0x160>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	69d2      	ldr	r2, [r2, #28]
 800a6d6:	00d2      	lsls	r2, r2, #3
 800a6d8:	4920      	ldr	r1, [pc, #128]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a6de:	4b1f      	ldr	r3, [pc, #124]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6e4:	f043 0310 	orr.w	r3, r3, #16
 800a6e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d106      	bne.n	800a6fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a6f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	4a19      	ldr	r2, [pc, #100]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a6f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6fc:	e00f      	b.n	800a71e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d106      	bne.n	800a712 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a704:	4b15      	ldr	r3, [pc, #84]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a708:	4a14      	ldr	r2, [pc, #80]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a70a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a70e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a710:	e005      	b.n	800a71e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a712:	4b12      	ldr	r3, [pc, #72]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a716:	4a11      	ldr	r2, [pc, #68]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a71c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a71e:	4b0f      	ldr	r3, [pc, #60]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a0e      	ldr	r2, [pc, #56]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a72a:	f7f7 ff49 	bl	80025c0 <HAL_GetTick>
 800a72e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a730:	e008      	b.n	800a744 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a732:	f7f7 ff45 	bl	80025c0 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e006      	b.n	800a752 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a744:	4b05      	ldr	r3, [pc, #20]	@ (800a75c <RCCEx_PLL2_Config+0x15c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0f0      	beq.n	800a732 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	58024400 	.word	0x58024400
 800a760:	ffff0007 	.word	0xffff0007

0800a764 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a772:	4b53      	ldr	r3, [pc, #332]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a776:	f003 0303 	and.w	r3, r3, #3
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d101      	bne.n	800a782 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e099      	b.n	800a8b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a782:	4b4f      	ldr	r3, [pc, #316]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a4e      	ldr	r2, [pc, #312]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a78c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a78e:	f7f7 ff17 	bl	80025c0 <HAL_GetTick>
 800a792:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a794:	e008      	b.n	800a7a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a796:	f7f7 ff13 	bl	80025c0 <HAL_GetTick>
 800a79a:	4602      	mov	r2, r0
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d901      	bls.n	800a7a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e086      	b.n	800a8b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7a8:	4b45      	ldr	r3, [pc, #276]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1f0      	bne.n	800a796 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a7b4:	4b42      	ldr	r3, [pc, #264]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a7b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	051b      	lsls	r3, r3, #20
 800a7c2:	493f      	ldr	r1, [pc, #252]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	025b      	lsls	r3, r3, #9
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	041b      	lsls	r3, r3, #16
 800a7e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	061b      	lsls	r3, r3, #24
 800a7f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a7f8:	4931      	ldr	r1, [pc, #196]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a7fe:	4b30      	ldr	r3, [pc, #192]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a802:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	492d      	ldr	r1, [pc, #180]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a810:	4b2b      	ldr	r3, [pc, #172]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a814:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	4928      	ldr	r1, [pc, #160]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a822:	4b27      	ldr	r3, [pc, #156]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a826:	4a26      	ldr	r2, [pc, #152]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a82c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a82e:	4b24      	ldr	r3, [pc, #144]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a832:	4b24      	ldr	r3, [pc, #144]	@ (800a8c4 <RCCEx_PLL3_Config+0x160>)
 800a834:	4013      	ands	r3, r2
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	69d2      	ldr	r2, [r2, #28]
 800a83a:	00d2      	lsls	r2, r2, #3
 800a83c:	4920      	ldr	r1, [pc, #128]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a842:	4b1f      	ldr	r3, [pc, #124]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a846:	4a1e      	ldr	r2, [pc, #120]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a84c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a854:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a858:	4a19      	ldr	r2, [pc, #100]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a85a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a85e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a860:	e00f      	b.n	800a882 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d106      	bne.n	800a876 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a868:	4b15      	ldr	r3, [pc, #84]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86c:	4a14      	ldr	r2, [pc, #80]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a86e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a874:	e005      	b.n	800a882 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a876:	4b12      	ldr	r3, [pc, #72]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87a:	4a11      	ldr	r2, [pc, #68]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a87c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a882:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a0e      	ldr	r2, [pc, #56]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a88c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a88e:	f7f7 fe97 	bl	80025c0 <HAL_GetTick>
 800a892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a894:	e008      	b.n	800a8a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a896:	f7f7 fe93 	bl	80025c0 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d901      	bls.n	800a8a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e006      	b.n	800a8b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8a8:	4b05      	ldr	r3, [pc, #20]	@ (800a8c0 <RCCEx_PLL3_Config+0x15c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0f0      	beq.n	800a896 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	58024400 	.word	0x58024400
 800a8c4:	ffff0007 	.word	0xffff0007

0800a8c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e049      	b.n	800a96e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f841 	bl	800a976 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f000 f9e8 	bl	800acdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
	...

0800a98c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d001      	beq.n	800a9a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e054      	b.n	800aa4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f042 0201 	orr.w	r2, r2, #1
 800a9ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a26      	ldr	r2, [pc, #152]	@ (800aa5c <HAL_TIM_Base_Start_IT+0xd0>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d022      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x80>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ce:	d01d      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x80>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a22      	ldr	r2, [pc, #136]	@ (800aa60 <HAL_TIM_Base_Start_IT+0xd4>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d018      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x80>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a21      	ldr	r2, [pc, #132]	@ (800aa64 <HAL_TIM_Base_Start_IT+0xd8>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d013      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x80>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a1f      	ldr	r2, [pc, #124]	@ (800aa68 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00e      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x80>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa6c <HAL_TIM_Base_Start_IT+0xe0>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d009      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x80>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a1c      	ldr	r2, [pc, #112]	@ (800aa70 <HAL_TIM_Base_Start_IT+0xe4>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d004      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x80>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a1b      	ldr	r2, [pc, #108]	@ (800aa74 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d115      	bne.n	800aa38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	4b19      	ldr	r3, [pc, #100]	@ (800aa78 <HAL_TIM_Base_Start_IT+0xec>)
 800aa14:	4013      	ands	r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b06      	cmp	r3, #6
 800aa1c:	d015      	beq.n	800aa4a <HAL_TIM_Base_Start_IT+0xbe>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa24:	d011      	beq.n	800aa4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f042 0201 	orr.w	r2, r2, #1
 800aa34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa36:	e008      	b.n	800aa4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f042 0201 	orr.w	r2, r2, #1
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	e000      	b.n	800aa4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010000 	.word	0x40010000
 800aa60:	40000400 	.word	0x40000400
 800aa64:	40000800 	.word	0x40000800
 800aa68:	40000c00 	.word	0x40000c00
 800aa6c:	40010400 	.word	0x40010400
 800aa70:	40001800 	.word	0x40001800
 800aa74:	40014000 	.word	0x40014000
 800aa78:	00010007 	.word	0x00010007

0800aa7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	f003 0302 	and.w	r3, r3, #2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d020      	beq.n	800aae0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f003 0302 	and.w	r3, r3, #2
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01b      	beq.n	800aae0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f06f 0202 	mvn.w	r2, #2
 800aab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d003      	beq.n	800aace <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f8e9 	bl	800ac9e <HAL_TIM_IC_CaptureCallback>
 800aacc:	e005      	b.n	800aada <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f8db 	bl	800ac8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f8ec 	bl	800acb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d020      	beq.n	800ab2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d01b      	beq.n	800ab2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f06f 0204 	mvn.w	r2, #4
 800aafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2202      	movs	r2, #2
 800ab02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f8c3 	bl	800ac9e <HAL_TIM_IC_CaptureCallback>
 800ab18:	e005      	b.n	800ab26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f8b5 	bl	800ac8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f8c6 	bl	800acb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f003 0308 	and.w	r3, r3, #8
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d020      	beq.n	800ab78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01b      	beq.n	800ab78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f06f 0208 	mvn.w	r2, #8
 800ab48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	f003 0303 	and.w	r3, r3, #3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f89d 	bl	800ac9e <HAL_TIM_IC_CaptureCallback>
 800ab64:	e005      	b.n	800ab72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f88f 	bl	800ac8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f8a0 	bl	800acb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 0310 	and.w	r3, r3, #16
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d020      	beq.n	800abc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d01b      	beq.n	800abc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f06f 0210 	mvn.w	r2, #16
 800ab94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2208      	movs	r2, #8
 800ab9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f877 	bl	800ac9e <HAL_TIM_IC_CaptureCallback>
 800abb0:	e005      	b.n	800abbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f869 	bl	800ac8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f87a 	bl	800acb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00c      	beq.n	800abe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f06f 0201 	mvn.w	r2, #1
 800abe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7f6 fd92 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d104      	bne.n	800abfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00c      	beq.n	800ac16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f913 	bl	800ae3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00c      	beq.n	800ac3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d007      	beq.n	800ac3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f90b 	bl	800ae50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00c      	beq.n	800ac5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d007      	beq.n	800ac5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f834 	bl	800acc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f003 0320 	and.w	r3, r3, #32
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00c      	beq.n	800ac82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d007      	beq.n	800ac82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f06f 0220 	mvn.w	r2, #32
 800ac7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f8d3 	bl	800ae28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac82:	bf00      	nop
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aca6:	bf00      	nop
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b083      	sub	sp, #12
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acce:	bf00      	nop
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
	...

0800acdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a46      	ldr	r2, [pc, #280]	@ (800ae08 <TIM_Base_SetConfig+0x12c>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d013      	beq.n	800ad1c <TIM_Base_SetConfig+0x40>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acfa:	d00f      	beq.n	800ad1c <TIM_Base_SetConfig+0x40>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a43      	ldr	r2, [pc, #268]	@ (800ae0c <TIM_Base_SetConfig+0x130>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d00b      	beq.n	800ad1c <TIM_Base_SetConfig+0x40>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a42      	ldr	r2, [pc, #264]	@ (800ae10 <TIM_Base_SetConfig+0x134>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d007      	beq.n	800ad1c <TIM_Base_SetConfig+0x40>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a41      	ldr	r2, [pc, #260]	@ (800ae14 <TIM_Base_SetConfig+0x138>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d003      	beq.n	800ad1c <TIM_Base_SetConfig+0x40>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a40      	ldr	r2, [pc, #256]	@ (800ae18 <TIM_Base_SetConfig+0x13c>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d108      	bne.n	800ad2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a35      	ldr	r2, [pc, #212]	@ (800ae08 <TIM_Base_SetConfig+0x12c>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d01f      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad3c:	d01b      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a32      	ldr	r2, [pc, #200]	@ (800ae0c <TIM_Base_SetConfig+0x130>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d017      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a31      	ldr	r2, [pc, #196]	@ (800ae10 <TIM_Base_SetConfig+0x134>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d013      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a30      	ldr	r2, [pc, #192]	@ (800ae14 <TIM_Base_SetConfig+0x138>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d00f      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a2f      	ldr	r2, [pc, #188]	@ (800ae18 <TIM_Base_SetConfig+0x13c>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d00b      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a2e      	ldr	r2, [pc, #184]	@ (800ae1c <TIM_Base_SetConfig+0x140>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d007      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a2d      	ldr	r2, [pc, #180]	@ (800ae20 <TIM_Base_SetConfig+0x144>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d003      	beq.n	800ad76 <TIM_Base_SetConfig+0x9a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a2c      	ldr	r2, [pc, #176]	@ (800ae24 <TIM_Base_SetConfig+0x148>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d108      	bne.n	800ad88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a16      	ldr	r2, [pc, #88]	@ (800ae08 <TIM_Base_SetConfig+0x12c>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d00f      	beq.n	800add4 <TIM_Base_SetConfig+0xf8>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a18      	ldr	r2, [pc, #96]	@ (800ae18 <TIM_Base_SetConfig+0x13c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00b      	beq.n	800add4 <TIM_Base_SetConfig+0xf8>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a17      	ldr	r2, [pc, #92]	@ (800ae1c <TIM_Base_SetConfig+0x140>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d007      	beq.n	800add4 <TIM_Base_SetConfig+0xf8>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a16      	ldr	r2, [pc, #88]	@ (800ae20 <TIM_Base_SetConfig+0x144>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d003      	beq.n	800add4 <TIM_Base_SetConfig+0xf8>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a15      	ldr	r2, [pc, #84]	@ (800ae24 <TIM_Base_SetConfig+0x148>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d103      	bne.n	800addc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	691a      	ldr	r2, [r3, #16]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b01      	cmp	r3, #1
 800adec:	d105      	bne.n	800adfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	f023 0201 	bic.w	r2, r3, #1
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	611a      	str	r2, [r3, #16]
  }
}
 800adfa:	bf00      	nop
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	40000400 	.word	0x40000400
 800ae10:	40000800 	.word	0x40000800
 800ae14:	40000c00 	.word	0x40000c00
 800ae18:	40010400 	.word	0x40010400
 800ae1c:	40014000 	.word	0x40014000
 800ae20:	40014400 	.word	0x40014400
 800ae24:	40014800 	.word	0x40014800

0800ae28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e042      	b.n	800aefc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d106      	bne.n	800ae8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7f7 fa13 	bl	80022b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2224      	movs	r2, #36	@ 0x24
 800ae92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0201 	bic.w	r2, r2, #1
 800aea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 faea 	bl	800c488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fd7f 	bl	800b9b8 <UART_SetConfig>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e01b      	b.n	800aefc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689a      	ldr	r2, [r3, #8]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f042 0201 	orr.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 fb69 	bl	800c5cc <UART_CheckIdleState>
 800aefa:	4603      	mov	r3, r0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08a      	sub	sp, #40	@ 0x28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	4613      	mov	r3, r2
 800af10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af18:	2b20      	cmp	r3, #32
 800af1a:	d167      	bne.n	800afec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <HAL_UART_Transmit_DMA+0x24>
 800af22:	88fb      	ldrh	r3, [r7, #6]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e060      	b.n	800afee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	88fa      	ldrh	r2, [r7, #6]
 800af36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	88fa      	ldrh	r2, [r7, #6]
 800af3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2221      	movs	r2, #33	@ 0x21
 800af4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af56:	2b00      	cmp	r3, #0
 800af58:	d028      	beq.n	800afac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af5e:	4a26      	ldr	r2, [pc, #152]	@ (800aff8 <HAL_UART_Transmit_DMA+0xf4>)
 800af60:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af66:	4a25      	ldr	r2, [pc, #148]	@ (800affc <HAL_UART_Transmit_DMA+0xf8>)
 800af68:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af6e:	4a24      	ldr	r2, [pc, #144]	@ (800b000 <HAL_UART_Transmit_DMA+0xfc>)
 800af70:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af76:	2200      	movs	r2, #0
 800af78:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af82:	4619      	mov	r1, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3328      	adds	r3, #40	@ 0x28
 800af8a:	461a      	mov	r2, r3
 800af8c:	88fb      	ldrh	r3, [r7, #6]
 800af8e:	f7f9 fa61 	bl	8004454 <HAL_DMA_Start_IT>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d009      	beq.n	800afac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2210      	movs	r2, #16
 800af9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e020      	b.n	800afee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2240      	movs	r2, #64	@ 0x40
 800afb2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3308      	adds	r3, #8
 800afba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	613b      	str	r3, [r7, #16]
   return(result);
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afca:	627b      	str	r3, [r7, #36]	@ 0x24
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3308      	adds	r3, #8
 800afd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afd4:	623a      	str	r2, [r7, #32]
 800afd6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	69f9      	ldr	r1, [r7, #28]
 800afda:	6a3a      	ldr	r2, [r7, #32]
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	61bb      	str	r3, [r7, #24]
   return(result);
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e5      	bne.n	800afb4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	e000      	b.n	800afee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800afec:	2302      	movs	r3, #2
  }
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3728      	adds	r7, #40	@ 0x28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	0800ca99 	.word	0x0800ca99
 800affc:	0800cb2f 	.word	0x0800cb2f
 800b000:	0800ccb1 	.word	0x0800ccb1

0800b004 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	@ 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4613      	mov	r3, r2
 800b010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b018:	2b20      	cmp	r3, #32
 800b01a:	d137      	bne.n	800b08c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d002      	beq.n	800b028 <HAL_UART_Receive_DMA+0x24>
 800b022:	88fb      	ldrh	r3, [r7, #6]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e030      	b.n	800b08e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a18      	ldr	r2, [pc, #96]	@ (800b098 <HAL_UART_Receive_DMA+0x94>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d01f      	beq.n	800b07c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d018      	beq.n	800b07c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	e853 3f00 	ldrex	r3, [r3]
 800b056:	613b      	str	r3, [r7, #16]
   return(result);
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b05e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	461a      	mov	r2, r3
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	623b      	str	r3, [r7, #32]
 800b06a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06c:	69f9      	ldr	r1, [r7, #28]
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	e841 2300 	strex	r3, r2, [r1]
 800b074:	61bb      	str	r3, [r7, #24]
   return(result);
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e6      	bne.n	800b04a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b07c:	88fb      	ldrh	r3, [r7, #6]
 800b07e:	461a      	mov	r2, r3
 800b080:	68b9      	ldr	r1, [r7, #8]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f001 fbba 	bl	800c7fc <UART_Start_Receive_DMA>
 800b088:	4603      	mov	r3, r0
 800b08a:	e000      	b.n	800b08e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b08c:	2302      	movs	r3, #2
  }
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3728      	adds	r7, #40	@ 0x28
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	58000c00 	.word	0x58000c00

0800b09c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b090      	sub	sp, #64	@ 0x40
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0be:	2b80      	cmp	r3, #128	@ 0x80
 800b0c0:	d139      	bne.n	800b136 <HAL_UART_DMAStop+0x9a>
 800b0c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c4:	2b21      	cmp	r3, #33	@ 0x21
 800b0c6:	d136      	bne.n	800b136 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b0ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0f0:	e841 2300 	strex	r3, r2, [r1]
 800b0f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e5      	bne.n	800b0c8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b100:	2b00      	cmp	r3, #0
 800b102:	d015      	beq.n	800b130 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f9 fc0d 	bl	8004928 <HAL_DMA_Abort>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00d      	beq.n	800b130 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fb f893 	bl	8006244 <HAL_DMA_GetError>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b20      	cmp	r3, #32
 800b122:	d105      	bne.n	800b130 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2210      	movs	r2, #16
 800b128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b12c:	2303      	movs	r3, #3
 800b12e:	e047      	b.n	800b1c0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f001 fc09 	bl	800c948 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b140:	2b40      	cmp	r3, #64	@ 0x40
 800b142:	d13c      	bne.n	800b1be <HAL_UART_DMAStop+0x122>
 800b144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b146:	2b22      	cmp	r3, #34	@ 0x22
 800b148:	d139      	bne.n	800b1be <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3308      	adds	r3, #8
 800b150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	e853 3f00 	ldrex	r3, [r3]
 800b158:	60bb      	str	r3, [r7, #8]
   return(result);
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b160:	633b      	str	r3, [r7, #48]	@ 0x30
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3308      	adds	r3, #8
 800b168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b16a:	61ba      	str	r2, [r7, #24]
 800b16c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16e:	6979      	ldr	r1, [r7, #20]
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	e841 2300 	strex	r3, r2, [r1]
 800b176:	613b      	str	r3, [r7, #16]
   return(result);
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e5      	bne.n	800b14a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b184:	2b00      	cmp	r3, #0
 800b186:	d017      	beq.n	800b1b8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f9 fbca 	bl	8004928 <HAL_DMA_Abort>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00e      	beq.n	800b1b8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fb f84f 	bl	8006244 <HAL_DMA_GetError>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	d105      	bne.n	800b1b8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e003      	b.n	800b1c0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f001 fc07 	bl	800c9cc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3740      	adds	r7, #64	@ 0x40
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b0ba      	sub	sp, #232	@ 0xe8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b1fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b200:	2b00      	cmp	r3, #0
 800b202:	d11b      	bne.n	800b23c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b208:	f003 0320 	and.w	r3, r3, #32
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d015      	beq.n	800b23c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b214:	f003 0320 	and.w	r3, r3, #32
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d105      	bne.n	800b228 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b21c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d009      	beq.n	800b23c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 8377 	beq.w	800b920 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	4798      	blx	r3
      }
      return;
 800b23a:	e371      	b.n	800b920 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b23c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 8123 	beq.w	800b48c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b246:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b24a:	4b8d      	ldr	r3, [pc, #564]	@ (800b480 <HAL_UART_IRQHandler+0x2b8>)
 800b24c:	4013      	ands	r3, r2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d106      	bne.n	800b260 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b256:	4b8b      	ldr	r3, [pc, #556]	@ (800b484 <HAL_UART_IRQHandler+0x2bc>)
 800b258:	4013      	ands	r3, r2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8116 	beq.w	800b48c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d011      	beq.n	800b290 <HAL_UART_IRQHandler+0xc8>
 800b26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00b      	beq.n	800b290 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2201      	movs	r2, #1
 800b27e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b286:	f043 0201 	orr.w	r2, r3, #1
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b294:	f003 0302 	and.w	r3, r3, #2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d011      	beq.n	800b2c0 <HAL_UART_IRQHandler+0xf8>
 800b29c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2b6:	f043 0204 	orr.w	r2, r3, #4
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d011      	beq.n	800b2f0 <HAL_UART_IRQHandler+0x128>
 800b2cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00b      	beq.n	800b2f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2204      	movs	r2, #4
 800b2de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e6:	f043 0202 	orr.w	r2, r3, #2
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f4:	f003 0308 	and.w	r3, r3, #8
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d017      	beq.n	800b32c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b300:	f003 0320 	and.w	r3, r3, #32
 800b304:	2b00      	cmp	r3, #0
 800b306:	d105      	bne.n	800b314 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b308:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b30c:	4b5c      	ldr	r3, [pc, #368]	@ (800b480 <HAL_UART_IRQHandler+0x2b8>)
 800b30e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00b      	beq.n	800b32c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2208      	movs	r2, #8
 800b31a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b322:	f043 0208 	orr.w	r2, r3, #8
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b334:	2b00      	cmp	r3, #0
 800b336:	d012      	beq.n	800b35e <HAL_UART_IRQHandler+0x196>
 800b338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b33c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00c      	beq.n	800b35e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b34c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b354:	f043 0220 	orr.w	r2, r3, #32
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 82dd 	beq.w	800b924 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	2b00      	cmp	r3, #0
 800b374:	d013      	beq.n	800b39e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d105      	bne.n	800b38e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d007      	beq.n	800b39e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b2:	2b40      	cmp	r3, #64	@ 0x40
 800b3b4:	d005      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b3ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d054      	beq.n	800b46c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 fb02 	bl	800c9cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d2:	2b40      	cmp	r3, #64	@ 0x40
 800b3d4:	d146      	bne.n	800b464 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3e4:	e853 3f00 	ldrex	r3, [r3]
 800b3e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b40e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b41a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1d9      	bne.n	800b3d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d017      	beq.n	800b45c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b432:	4a15      	ldr	r2, [pc, #84]	@ (800b488 <HAL_UART_IRQHandler+0x2c0>)
 800b434:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f9 fd91 	bl	8004f64 <HAL_DMA_Abort_IT>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d019      	beq.n	800b47c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b456:	4610      	mov	r0, r2
 800b458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b45a:	e00f      	b.n	800b47c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa95 	bl	800b98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b462:	e00b      	b.n	800b47c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fa91 	bl	800b98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46a:	e007      	b.n	800b47c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fa8d 	bl	800b98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b47a:	e253      	b.n	800b924 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b47c:	bf00      	nop
    return;
 800b47e:	e251      	b.n	800b924 <HAL_UART_IRQHandler+0x75c>
 800b480:	10000001 	.word	0x10000001
 800b484:	04000120 	.word	0x04000120
 800b488:	0800cd31 	.word	0x0800cd31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b490:	2b01      	cmp	r3, #1
 800b492:	f040 81e7 	bne.w	800b864 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b49a:	f003 0310 	and.w	r3, r3, #16
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 81e0 	beq.w	800b864 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4a8:	f003 0310 	and.w	r3, r3, #16
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 81d9 	beq.w	800b864 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2210      	movs	r2, #16
 800b4b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4c4:	2b40      	cmp	r3, #64	@ 0x40
 800b4c6:	f040 8151 	bne.w	800b76c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a96      	ldr	r2, [pc, #600]	@ (800b72c <HAL_UART_IRQHandler+0x564>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d068      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a93      	ldr	r2, [pc, #588]	@ (800b730 <HAL_UART_IRQHandler+0x568>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d061      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a91      	ldr	r2, [pc, #580]	@ (800b734 <HAL_UART_IRQHandler+0x56c>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d05a      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a8e      	ldr	r2, [pc, #568]	@ (800b738 <HAL_UART_IRQHandler+0x570>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d053      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a8c      	ldr	r2, [pc, #560]	@ (800b73c <HAL_UART_IRQHandler+0x574>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d04c      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a89      	ldr	r2, [pc, #548]	@ (800b740 <HAL_UART_IRQHandler+0x578>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d045      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a87      	ldr	r2, [pc, #540]	@ (800b744 <HAL_UART_IRQHandler+0x57c>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d03e      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a84      	ldr	r2, [pc, #528]	@ (800b748 <HAL_UART_IRQHandler+0x580>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d037      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a82      	ldr	r2, [pc, #520]	@ (800b74c <HAL_UART_IRQHandler+0x584>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d030      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a7f      	ldr	r2, [pc, #508]	@ (800b750 <HAL_UART_IRQHandler+0x588>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d029      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a7d      	ldr	r2, [pc, #500]	@ (800b754 <HAL_UART_IRQHandler+0x58c>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d022      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a7a      	ldr	r2, [pc, #488]	@ (800b758 <HAL_UART_IRQHandler+0x590>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d01b      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a78      	ldr	r2, [pc, #480]	@ (800b75c <HAL_UART_IRQHandler+0x594>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d014      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a75      	ldr	r2, [pc, #468]	@ (800b760 <HAL_UART_IRQHandler+0x598>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d00d      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a73      	ldr	r2, [pc, #460]	@ (800b764 <HAL_UART_IRQHandler+0x59c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d006      	beq.n	800b5aa <HAL_UART_IRQHandler+0x3e2>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a70      	ldr	r2, [pc, #448]	@ (800b768 <HAL_UART_IRQHandler+0x5a0>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d106      	bne.n	800b5b8 <HAL_UART_IRQHandler+0x3f0>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	e005      	b.n	800b5c4 <HAL_UART_IRQHandler+0x3fc>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 81ab 	beq.w	800b928 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	f080 81a3 	bcs.w	800b928 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5f8:	f000 8087 	beq.w	800b70a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	461a      	mov	r2, r3
 800b622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b62a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b632:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1da      	bne.n	800b5fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3308      	adds	r3, #8
 800b64c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b658:	f023 0301 	bic.w	r3, r3, #1
 800b65c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3308      	adds	r3, #8
 800b666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b66a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b66e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b670:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b672:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b676:	e841 2300 	strex	r3, r2, [r1]
 800b67a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b67c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1e1      	bne.n	800b646 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3308      	adds	r3, #8
 800b688:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b68c:	e853 3f00 	ldrex	r3, [r3]
 800b690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b6a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6ae:	e841 2300 	strex	r3, r2, [r1]
 800b6b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1e3      	bne.n	800b682 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d0:	e853 3f00 	ldrex	r3, [r3]
 800b6d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6d8:	f023 0310 	bic.w	r3, r3, #16
 800b6dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e4      	bne.n	800b6c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b704:	4618      	mov	r0, r3
 800b706:	f7f9 f90f 	bl	8004928 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2202      	movs	r2, #2
 800b70e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	b29b      	uxth	r3, r3
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f93b 	bl	800b9a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b72a:	e0fd      	b.n	800b928 <HAL_UART_IRQHandler+0x760>
 800b72c:	40020010 	.word	0x40020010
 800b730:	40020028 	.word	0x40020028
 800b734:	40020040 	.word	0x40020040
 800b738:	40020058 	.word	0x40020058
 800b73c:	40020070 	.word	0x40020070
 800b740:	40020088 	.word	0x40020088
 800b744:	400200a0 	.word	0x400200a0
 800b748:	400200b8 	.word	0x400200b8
 800b74c:	40020410 	.word	0x40020410
 800b750:	40020428 	.word	0x40020428
 800b754:	40020440 	.word	0x40020440
 800b758:	40020458 	.word	0x40020458
 800b75c:	40020470 	.word	0x40020470
 800b760:	40020488 	.word	0x40020488
 800b764:	400204a0 	.word	0x400204a0
 800b768:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b778:	b29b      	uxth	r3, r3
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b786:	b29b      	uxth	r3, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 80cf 	beq.w	800b92c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b78e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 80ca 	beq.w	800b92c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a0:	e853 3f00 	ldrex	r3, [r3]
 800b7a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e4      	bne.n	800b798 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d8:	e853 3f00 	ldrex	r3, [r3]
 800b7dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b7de:	6a3a      	ldr	r2, [r7, #32]
 800b7e0:	4b55      	ldr	r3, [pc, #340]	@ (800b938 <HAL_UART_IRQHandler+0x770>)
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	3308      	adds	r3, #8
 800b7ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b7f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7fa:	e841 2300 	strex	r3, r2, [r1]
 800b7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1e3      	bne.n	800b7ce <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2220      	movs	r2, #32
 800b80a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	e853 3f00 	ldrex	r3, [r3]
 800b826:	60fb      	str	r3, [r7, #12]
   return(result);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f023 0310 	bic.w	r3, r3, #16
 800b82e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b83c:	61fb      	str	r3, [r7, #28]
 800b83e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	69b9      	ldr	r1, [r7, #24]
 800b842:	69fa      	ldr	r2, [r7, #28]
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	617b      	str	r3, [r7, #20]
   return(result);
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e4      	bne.n	800b81a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2202      	movs	r2, #2
 800b854:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b856:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f89f 	bl	800b9a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b862:	e063      	b.n	800b92c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b868:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00e      	beq.n	800b88e <HAL_UART_IRQHandler+0x6c6>
 800b870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d008      	beq.n	800b88e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f001 fa93 	bl	800cdb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b88c:	e051      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b896:	2b00      	cmp	r3, #0
 800b898:	d014      	beq.n	800b8c4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b89a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b89e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d105      	bne.n	800b8b2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d008      	beq.n	800b8c4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d03a      	beq.n	800b930 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	4798      	blx	r3
    }
    return;
 800b8c2:	e035      	b.n	800b930 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d009      	beq.n	800b8e4 <HAL_UART_IRQHandler+0x71c>
 800b8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f001 fa3d 	bl	800cd5c <UART_EndTransmit_IT>
    return;
 800b8e2:	e026      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <HAL_UART_IRQHandler+0x73c>
 800b8f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 fa6c 	bl	800cdda <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b902:	e016      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b908:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d010      	beq.n	800b932 <HAL_UART_IRQHandler+0x76a>
 800b910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b914:	2b00      	cmp	r3, #0
 800b916:	da0c      	bge.n	800b932 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f001 fa54 	bl	800cdc6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b91e:	e008      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
      return;
 800b920:	bf00      	nop
 800b922:	e006      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
    return;
 800b924:	bf00      	nop
 800b926:	e004      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
      return;
 800b928:	bf00      	nop
 800b92a:	e002      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
      return;
 800b92c:	bf00      	nop
 800b92e:	e000      	b.n	800b932 <HAL_UART_IRQHandler+0x76a>
    return;
 800b930:	bf00      	nop
  }
}
 800b932:	37e8      	adds	r7, #232	@ 0xe8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	effffffe 	.word	0xeffffffe

0800b93c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9bc:	b092      	sub	sp, #72	@ 0x48
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	689a      	ldr	r2, [r3, #8]
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	431a      	orrs	r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	4bbe      	ldr	r3, [pc, #760]	@ (800bce0 <UART_SetConfig+0x328>)
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	6812      	ldr	r2, [r2, #0]
 800b9ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	68da      	ldr	r2, [r3, #12]
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	430a      	orrs	r2, r1
 800ba08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4ab3      	ldr	r2, [pc, #716]	@ (800bce4 <UART_SetConfig+0x32c>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d004      	beq.n	800ba24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba20:	4313      	orrs	r3, r2
 800ba22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	4baf      	ldr	r3, [pc, #700]	@ (800bce8 <UART_SetConfig+0x330>)
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	6812      	ldr	r2, [r2, #0]
 800ba32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba34:	430b      	orrs	r3, r1
 800ba36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3e:	f023 010f 	bic.w	r1, r3, #15
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4aa6      	ldr	r2, [pc, #664]	@ (800bcec <UART_SetConfig+0x334>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d177      	bne.n	800bb48 <UART_SetConfig+0x190>
 800ba58:	4ba5      	ldr	r3, [pc, #660]	@ (800bcf0 <UART_SetConfig+0x338>)
 800ba5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba60:	2b28      	cmp	r3, #40	@ 0x28
 800ba62:	d86d      	bhi.n	800bb40 <UART_SetConfig+0x188>
 800ba64:	a201      	add	r2, pc, #4	@ (adr r2, 800ba6c <UART_SetConfig+0xb4>)
 800ba66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6a:	bf00      	nop
 800ba6c:	0800bb11 	.word	0x0800bb11
 800ba70:	0800bb41 	.word	0x0800bb41
 800ba74:	0800bb41 	.word	0x0800bb41
 800ba78:	0800bb41 	.word	0x0800bb41
 800ba7c:	0800bb41 	.word	0x0800bb41
 800ba80:	0800bb41 	.word	0x0800bb41
 800ba84:	0800bb41 	.word	0x0800bb41
 800ba88:	0800bb41 	.word	0x0800bb41
 800ba8c:	0800bb19 	.word	0x0800bb19
 800ba90:	0800bb41 	.word	0x0800bb41
 800ba94:	0800bb41 	.word	0x0800bb41
 800ba98:	0800bb41 	.word	0x0800bb41
 800ba9c:	0800bb41 	.word	0x0800bb41
 800baa0:	0800bb41 	.word	0x0800bb41
 800baa4:	0800bb41 	.word	0x0800bb41
 800baa8:	0800bb41 	.word	0x0800bb41
 800baac:	0800bb21 	.word	0x0800bb21
 800bab0:	0800bb41 	.word	0x0800bb41
 800bab4:	0800bb41 	.word	0x0800bb41
 800bab8:	0800bb41 	.word	0x0800bb41
 800babc:	0800bb41 	.word	0x0800bb41
 800bac0:	0800bb41 	.word	0x0800bb41
 800bac4:	0800bb41 	.word	0x0800bb41
 800bac8:	0800bb41 	.word	0x0800bb41
 800bacc:	0800bb29 	.word	0x0800bb29
 800bad0:	0800bb41 	.word	0x0800bb41
 800bad4:	0800bb41 	.word	0x0800bb41
 800bad8:	0800bb41 	.word	0x0800bb41
 800badc:	0800bb41 	.word	0x0800bb41
 800bae0:	0800bb41 	.word	0x0800bb41
 800bae4:	0800bb41 	.word	0x0800bb41
 800bae8:	0800bb41 	.word	0x0800bb41
 800baec:	0800bb31 	.word	0x0800bb31
 800baf0:	0800bb41 	.word	0x0800bb41
 800baf4:	0800bb41 	.word	0x0800bb41
 800baf8:	0800bb41 	.word	0x0800bb41
 800bafc:	0800bb41 	.word	0x0800bb41
 800bb00:	0800bb41 	.word	0x0800bb41
 800bb04:	0800bb41 	.word	0x0800bb41
 800bb08:	0800bb41 	.word	0x0800bb41
 800bb0c:	0800bb39 	.word	0x0800bb39
 800bb10:	2301      	movs	r3, #1
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e222      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb18:	2304      	movs	r3, #4
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e21e      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb20:	2308      	movs	r3, #8
 800bb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb26:	e21a      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2e:	e216      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb30:	2320      	movs	r3, #32
 800bb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb36:	e212      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb38:	2340      	movs	r3, #64	@ 0x40
 800bb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3e:	e20e      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb40:	2380      	movs	r3, #128	@ 0x80
 800bb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb46:	e20a      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a69      	ldr	r2, [pc, #420]	@ (800bcf4 <UART_SetConfig+0x33c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d130      	bne.n	800bbb4 <UART_SetConfig+0x1fc>
 800bb52:	4b67      	ldr	r3, [pc, #412]	@ (800bcf0 <UART_SetConfig+0x338>)
 800bb54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb56:	f003 0307 	and.w	r3, r3, #7
 800bb5a:	2b05      	cmp	r3, #5
 800bb5c:	d826      	bhi.n	800bbac <UART_SetConfig+0x1f4>
 800bb5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb64 <UART_SetConfig+0x1ac>)
 800bb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb64:	0800bb7d 	.word	0x0800bb7d
 800bb68:	0800bb85 	.word	0x0800bb85
 800bb6c:	0800bb8d 	.word	0x0800bb8d
 800bb70:	0800bb95 	.word	0x0800bb95
 800bb74:	0800bb9d 	.word	0x0800bb9d
 800bb78:	0800bba5 	.word	0x0800bba5
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb82:	e1ec      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb84:	2304      	movs	r3, #4
 800bb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8a:	e1e8      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb8c:	2308      	movs	r3, #8
 800bb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb92:	e1e4      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb94:	2310      	movs	r3, #16
 800bb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9a:	e1e0      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bb9c:	2320      	movs	r3, #32
 800bb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bba2:	e1dc      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bba4:	2340      	movs	r3, #64	@ 0x40
 800bba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbaa:	e1d8      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bbac:	2380      	movs	r3, #128	@ 0x80
 800bbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbb2:	e1d4      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a4f      	ldr	r2, [pc, #316]	@ (800bcf8 <UART_SetConfig+0x340>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d130      	bne.n	800bc20 <UART_SetConfig+0x268>
 800bbbe:	4b4c      	ldr	r3, [pc, #304]	@ (800bcf0 <UART_SetConfig+0x338>)
 800bbc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc2:	f003 0307 	and.w	r3, r3, #7
 800bbc6:	2b05      	cmp	r3, #5
 800bbc8:	d826      	bhi.n	800bc18 <UART_SetConfig+0x260>
 800bbca:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd0 <UART_SetConfig+0x218>)
 800bbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd0:	0800bbe9 	.word	0x0800bbe9
 800bbd4:	0800bbf1 	.word	0x0800bbf1
 800bbd8:	0800bbf9 	.word	0x0800bbf9
 800bbdc:	0800bc01 	.word	0x0800bc01
 800bbe0:	0800bc09 	.word	0x0800bc09
 800bbe4:	0800bc11 	.word	0x0800bc11
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbee:	e1b6      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bbf0:	2304      	movs	r3, #4
 800bbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf6:	e1b2      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bbf8:	2308      	movs	r3, #8
 800bbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbfe:	e1ae      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc00:	2310      	movs	r3, #16
 800bc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc06:	e1aa      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc08:	2320      	movs	r3, #32
 800bc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0e:	e1a6      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc10:	2340      	movs	r3, #64	@ 0x40
 800bc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc16:	e1a2      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc18:	2380      	movs	r3, #128	@ 0x80
 800bc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc1e:	e19e      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a35      	ldr	r2, [pc, #212]	@ (800bcfc <UART_SetConfig+0x344>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d130      	bne.n	800bc8c <UART_SetConfig+0x2d4>
 800bc2a:	4b31      	ldr	r3, [pc, #196]	@ (800bcf0 <UART_SetConfig+0x338>)
 800bc2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc2e:	f003 0307 	and.w	r3, r3, #7
 800bc32:	2b05      	cmp	r3, #5
 800bc34:	d826      	bhi.n	800bc84 <UART_SetConfig+0x2cc>
 800bc36:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <UART_SetConfig+0x284>)
 800bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3c:	0800bc55 	.word	0x0800bc55
 800bc40:	0800bc5d 	.word	0x0800bc5d
 800bc44:	0800bc65 	.word	0x0800bc65
 800bc48:	0800bc6d 	.word	0x0800bc6d
 800bc4c:	0800bc75 	.word	0x0800bc75
 800bc50:	0800bc7d 	.word	0x0800bc7d
 800bc54:	2300      	movs	r3, #0
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5a:	e180      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc5c:	2304      	movs	r3, #4
 800bc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc62:	e17c      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc64:	2308      	movs	r3, #8
 800bc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc6a:	e178      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc6c:	2310      	movs	r3, #16
 800bc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc72:	e174      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc74:	2320      	movs	r3, #32
 800bc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc7a:	e170      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc7c:	2340      	movs	r3, #64	@ 0x40
 800bc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc82:	e16c      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc84:	2380      	movs	r3, #128	@ 0x80
 800bc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc8a:	e168      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a1b      	ldr	r2, [pc, #108]	@ (800bd00 <UART_SetConfig+0x348>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d142      	bne.n	800bd1c <UART_SetConfig+0x364>
 800bc96:	4b16      	ldr	r3, [pc, #88]	@ (800bcf0 <UART_SetConfig+0x338>)
 800bc98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	2b05      	cmp	r3, #5
 800bca0:	d838      	bhi.n	800bd14 <UART_SetConfig+0x35c>
 800bca2:	a201      	add	r2, pc, #4	@ (adr r2, 800bca8 <UART_SetConfig+0x2f0>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bcc1 	.word	0x0800bcc1
 800bcac:	0800bcc9 	.word	0x0800bcc9
 800bcb0:	0800bcd1 	.word	0x0800bcd1
 800bcb4:	0800bcd9 	.word	0x0800bcd9
 800bcb8:	0800bd05 	.word	0x0800bd05
 800bcbc:	0800bd0d 	.word	0x0800bd0d
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e14a      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bcc8:	2304      	movs	r3, #4
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e146      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bcd0:	2308      	movs	r3, #8
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e142      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bcd8:	2310      	movs	r3, #16
 800bcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcde:	e13e      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bce0:	cfff69f3 	.word	0xcfff69f3
 800bce4:	58000c00 	.word	0x58000c00
 800bce8:	11fff4ff 	.word	0x11fff4ff
 800bcec:	40011000 	.word	0x40011000
 800bcf0:	58024400 	.word	0x58024400
 800bcf4:	40004400 	.word	0x40004400
 800bcf8:	40004800 	.word	0x40004800
 800bcfc:	40004c00 	.word	0x40004c00
 800bd00:	40005000 	.word	0x40005000
 800bd04:	2320      	movs	r3, #32
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd0a:	e128      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bd0c:	2340      	movs	r3, #64	@ 0x40
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd12:	e124      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bd14:	2380      	movs	r3, #128	@ 0x80
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1a:	e120      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4acb      	ldr	r2, [pc, #812]	@ (800c050 <UART_SetConfig+0x698>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d176      	bne.n	800be14 <UART_SetConfig+0x45c>
 800bd26:	4bcb      	ldr	r3, [pc, #812]	@ (800c054 <UART_SetConfig+0x69c>)
 800bd28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd2e:	2b28      	cmp	r3, #40	@ 0x28
 800bd30:	d86c      	bhi.n	800be0c <UART_SetConfig+0x454>
 800bd32:	a201      	add	r2, pc, #4	@ (adr r2, 800bd38 <UART_SetConfig+0x380>)
 800bd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd38:	0800bddd 	.word	0x0800bddd
 800bd3c:	0800be0d 	.word	0x0800be0d
 800bd40:	0800be0d 	.word	0x0800be0d
 800bd44:	0800be0d 	.word	0x0800be0d
 800bd48:	0800be0d 	.word	0x0800be0d
 800bd4c:	0800be0d 	.word	0x0800be0d
 800bd50:	0800be0d 	.word	0x0800be0d
 800bd54:	0800be0d 	.word	0x0800be0d
 800bd58:	0800bde5 	.word	0x0800bde5
 800bd5c:	0800be0d 	.word	0x0800be0d
 800bd60:	0800be0d 	.word	0x0800be0d
 800bd64:	0800be0d 	.word	0x0800be0d
 800bd68:	0800be0d 	.word	0x0800be0d
 800bd6c:	0800be0d 	.word	0x0800be0d
 800bd70:	0800be0d 	.word	0x0800be0d
 800bd74:	0800be0d 	.word	0x0800be0d
 800bd78:	0800bded 	.word	0x0800bded
 800bd7c:	0800be0d 	.word	0x0800be0d
 800bd80:	0800be0d 	.word	0x0800be0d
 800bd84:	0800be0d 	.word	0x0800be0d
 800bd88:	0800be0d 	.word	0x0800be0d
 800bd8c:	0800be0d 	.word	0x0800be0d
 800bd90:	0800be0d 	.word	0x0800be0d
 800bd94:	0800be0d 	.word	0x0800be0d
 800bd98:	0800bdf5 	.word	0x0800bdf5
 800bd9c:	0800be0d 	.word	0x0800be0d
 800bda0:	0800be0d 	.word	0x0800be0d
 800bda4:	0800be0d 	.word	0x0800be0d
 800bda8:	0800be0d 	.word	0x0800be0d
 800bdac:	0800be0d 	.word	0x0800be0d
 800bdb0:	0800be0d 	.word	0x0800be0d
 800bdb4:	0800be0d 	.word	0x0800be0d
 800bdb8:	0800bdfd 	.word	0x0800bdfd
 800bdbc:	0800be0d 	.word	0x0800be0d
 800bdc0:	0800be0d 	.word	0x0800be0d
 800bdc4:	0800be0d 	.word	0x0800be0d
 800bdc8:	0800be0d 	.word	0x0800be0d
 800bdcc:	0800be0d 	.word	0x0800be0d
 800bdd0:	0800be0d 	.word	0x0800be0d
 800bdd4:	0800be0d 	.word	0x0800be0d
 800bdd8:	0800be05 	.word	0x0800be05
 800bddc:	2301      	movs	r3, #1
 800bdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bde2:	e0bc      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bde4:	2304      	movs	r3, #4
 800bde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdea:	e0b8      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bdec:	2308      	movs	r3, #8
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf2:	e0b4      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bdf4:	2310      	movs	r3, #16
 800bdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdfa:	e0b0      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bdfc:	2320      	movs	r3, #32
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be02:	e0ac      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be04:	2340      	movs	r3, #64	@ 0x40
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0a:	e0a8      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be0c:	2380      	movs	r3, #128	@ 0x80
 800be0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be12:	e0a4      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a8f      	ldr	r2, [pc, #572]	@ (800c058 <UART_SetConfig+0x6a0>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d130      	bne.n	800be80 <UART_SetConfig+0x4c8>
 800be1e:	4b8d      	ldr	r3, [pc, #564]	@ (800c054 <UART_SetConfig+0x69c>)
 800be20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be22:	f003 0307 	and.w	r3, r3, #7
 800be26:	2b05      	cmp	r3, #5
 800be28:	d826      	bhi.n	800be78 <UART_SetConfig+0x4c0>
 800be2a:	a201      	add	r2, pc, #4	@ (adr r2, 800be30 <UART_SetConfig+0x478>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be49 	.word	0x0800be49
 800be34:	0800be51 	.word	0x0800be51
 800be38:	0800be59 	.word	0x0800be59
 800be3c:	0800be61 	.word	0x0800be61
 800be40:	0800be69 	.word	0x0800be69
 800be44:	0800be71 	.word	0x0800be71
 800be48:	2300      	movs	r3, #0
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4e:	e086      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be50:	2304      	movs	r3, #4
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be56:	e082      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be58:	2308      	movs	r3, #8
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5e:	e07e      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be60:	2310      	movs	r3, #16
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be66:	e07a      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be68:	2320      	movs	r3, #32
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6e:	e076      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be70:	2340      	movs	r3, #64	@ 0x40
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be76:	e072      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be78:	2380      	movs	r3, #128	@ 0x80
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7e:	e06e      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a75      	ldr	r2, [pc, #468]	@ (800c05c <UART_SetConfig+0x6a4>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d130      	bne.n	800beec <UART_SetConfig+0x534>
 800be8a:	4b72      	ldr	r3, [pc, #456]	@ (800c054 <UART_SetConfig+0x69c>)
 800be8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be8e:	f003 0307 	and.w	r3, r3, #7
 800be92:	2b05      	cmp	r3, #5
 800be94:	d826      	bhi.n	800bee4 <UART_SetConfig+0x52c>
 800be96:	a201      	add	r2, pc, #4	@ (adr r2, 800be9c <UART_SetConfig+0x4e4>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800beb5 	.word	0x0800beb5
 800bea0:	0800bebd 	.word	0x0800bebd
 800bea4:	0800bec5 	.word	0x0800bec5
 800bea8:	0800becd 	.word	0x0800becd
 800beac:	0800bed5 	.word	0x0800bed5
 800beb0:	0800bedd 	.word	0x0800bedd
 800beb4:	2300      	movs	r3, #0
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beba:	e050      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bebc:	2304      	movs	r3, #4
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec2:	e04c      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bec4:	2308      	movs	r3, #8
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beca:	e048      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800becc:	2310      	movs	r3, #16
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bed2:	e044      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bed4:	2320      	movs	r3, #32
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beda:	e040      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bedc:	2340      	movs	r3, #64	@ 0x40
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bee2:	e03c      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bee4:	2380      	movs	r3, #128	@ 0x80
 800bee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beea:	e038      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a5b      	ldr	r2, [pc, #364]	@ (800c060 <UART_SetConfig+0x6a8>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d130      	bne.n	800bf58 <UART_SetConfig+0x5a0>
 800bef6:	4b57      	ldr	r3, [pc, #348]	@ (800c054 <UART_SetConfig+0x69c>)
 800bef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800befa:	f003 0307 	and.w	r3, r3, #7
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d826      	bhi.n	800bf50 <UART_SetConfig+0x598>
 800bf02:	a201      	add	r2, pc, #4	@ (adr r2, 800bf08 <UART_SetConfig+0x550>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf21 	.word	0x0800bf21
 800bf0c:	0800bf29 	.word	0x0800bf29
 800bf10:	0800bf31 	.word	0x0800bf31
 800bf14:	0800bf39 	.word	0x0800bf39
 800bf18:	0800bf41 	.word	0x0800bf41
 800bf1c:	0800bf49 	.word	0x0800bf49
 800bf20:	2302      	movs	r3, #2
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf26:	e01a      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bf28:	2304      	movs	r3, #4
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2e:	e016      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bf30:	2308      	movs	r3, #8
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf36:	e012      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bf38:	2310      	movs	r3, #16
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3e:	e00e      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bf40:	2320      	movs	r3, #32
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf46:	e00a      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bf48:	2340      	movs	r3, #64	@ 0x40
 800bf4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf4e:	e006      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bf50:	2380      	movs	r3, #128	@ 0x80
 800bf52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf56:	e002      	b.n	800bf5e <UART_SetConfig+0x5a6>
 800bf58:	2380      	movs	r3, #128	@ 0x80
 800bf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a3f      	ldr	r2, [pc, #252]	@ (800c060 <UART_SetConfig+0x6a8>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	f040 80f8 	bne.w	800c15a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	dc46      	bgt.n	800c000 <UART_SetConfig+0x648>
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	f2c0 8082 	blt.w	800c07c <UART_SetConfig+0x6c4>
 800bf78:	3b02      	subs	r3, #2
 800bf7a:	2b1e      	cmp	r3, #30
 800bf7c:	d87e      	bhi.n	800c07c <UART_SetConfig+0x6c4>
 800bf7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf84 <UART_SetConfig+0x5cc>)
 800bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf84:	0800c007 	.word	0x0800c007
 800bf88:	0800c07d 	.word	0x0800c07d
 800bf8c:	0800c00f 	.word	0x0800c00f
 800bf90:	0800c07d 	.word	0x0800c07d
 800bf94:	0800c07d 	.word	0x0800c07d
 800bf98:	0800c07d 	.word	0x0800c07d
 800bf9c:	0800c01f 	.word	0x0800c01f
 800bfa0:	0800c07d 	.word	0x0800c07d
 800bfa4:	0800c07d 	.word	0x0800c07d
 800bfa8:	0800c07d 	.word	0x0800c07d
 800bfac:	0800c07d 	.word	0x0800c07d
 800bfb0:	0800c07d 	.word	0x0800c07d
 800bfb4:	0800c07d 	.word	0x0800c07d
 800bfb8:	0800c07d 	.word	0x0800c07d
 800bfbc:	0800c02f 	.word	0x0800c02f
 800bfc0:	0800c07d 	.word	0x0800c07d
 800bfc4:	0800c07d 	.word	0x0800c07d
 800bfc8:	0800c07d 	.word	0x0800c07d
 800bfcc:	0800c07d 	.word	0x0800c07d
 800bfd0:	0800c07d 	.word	0x0800c07d
 800bfd4:	0800c07d 	.word	0x0800c07d
 800bfd8:	0800c07d 	.word	0x0800c07d
 800bfdc:	0800c07d 	.word	0x0800c07d
 800bfe0:	0800c07d 	.word	0x0800c07d
 800bfe4:	0800c07d 	.word	0x0800c07d
 800bfe8:	0800c07d 	.word	0x0800c07d
 800bfec:	0800c07d 	.word	0x0800c07d
 800bff0:	0800c07d 	.word	0x0800c07d
 800bff4:	0800c07d 	.word	0x0800c07d
 800bff8:	0800c07d 	.word	0x0800c07d
 800bffc:	0800c06f 	.word	0x0800c06f
 800c000:	2b40      	cmp	r3, #64	@ 0x40
 800c002:	d037      	beq.n	800c074 <UART_SetConfig+0x6bc>
 800c004:	e03a      	b.n	800c07c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c006:	f7fd feeb 	bl	8009de0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c00a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c00c:	e03c      	b.n	800c088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c00e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c012:	4618      	mov	r0, r3
 800c014:	f7fd fefa 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c01c:	e034      	b.n	800c088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c01e:	f107 0318 	add.w	r3, r7, #24
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe f846 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c02c:	e02c      	b.n	800c088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c02e:	4b09      	ldr	r3, [pc, #36]	@ (800c054 <UART_SetConfig+0x69c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0320 	and.w	r3, r3, #32
 800c036:	2b00      	cmp	r3, #0
 800c038:	d016      	beq.n	800c068 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c03a:	4b06      	ldr	r3, [pc, #24]	@ (800c054 <UART_SetConfig+0x69c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	08db      	lsrs	r3, r3, #3
 800c040:	f003 0303 	and.w	r3, r3, #3
 800c044:	4a07      	ldr	r2, [pc, #28]	@ (800c064 <UART_SetConfig+0x6ac>)
 800c046:	fa22 f303 	lsr.w	r3, r2, r3
 800c04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c04c:	e01c      	b.n	800c088 <UART_SetConfig+0x6d0>
 800c04e:	bf00      	nop
 800c050:	40011400 	.word	0x40011400
 800c054:	58024400 	.word	0x58024400
 800c058:	40007800 	.word	0x40007800
 800c05c:	40007c00 	.word	0x40007c00
 800c060:	58000c00 	.word	0x58000c00
 800c064:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c068:	4b9d      	ldr	r3, [pc, #628]	@ (800c2e0 <UART_SetConfig+0x928>)
 800c06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c06c:	e00c      	b.n	800c088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c06e:	4b9d      	ldr	r3, [pc, #628]	@ (800c2e4 <UART_SetConfig+0x92c>)
 800c070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c072:	e009      	b.n	800c088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c074:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c07a:	e005      	b.n	800c088 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f000 81de 	beq.w	800c44c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c094:	4a94      	ldr	r2, [pc, #592]	@ (800c2e8 <UART_SetConfig+0x930>)
 800c096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c09a:	461a      	mov	r2, r3
 800c09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c09e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	005b      	lsls	r3, r3, #1
 800c0ac:	4413      	add	r3, r2
 800c0ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d305      	bcc.n	800c0c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d903      	bls.n	800c0c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c0c6:	e1c1      	b.n	800c44c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	60bb      	str	r3, [r7, #8]
 800c0ce:	60fa      	str	r2, [r7, #12]
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d4:	4a84      	ldr	r2, [pc, #528]	@ (800c2e8 <UART_SetConfig+0x930>)
 800c0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	2200      	movs	r2, #0
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	607a      	str	r2, [r7, #4]
 800c0e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c0ea:	f7f4 f9b1 	bl	8000450 <__aeabi_uldivmod>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f04f 0200 	mov.w	r2, #0
 800c0fa:	f04f 0300 	mov.w	r3, #0
 800c0fe:	020b      	lsls	r3, r1, #8
 800c100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c104:	0202      	lsls	r2, r0, #8
 800c106:	6979      	ldr	r1, [r7, #20]
 800c108:	6849      	ldr	r1, [r1, #4]
 800c10a:	0849      	lsrs	r1, r1, #1
 800c10c:	2000      	movs	r0, #0
 800c10e:	460c      	mov	r4, r1
 800c110:	4605      	mov	r5, r0
 800c112:	eb12 0804 	adds.w	r8, r2, r4
 800c116:	eb43 0905 	adc.w	r9, r3, r5
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	469a      	mov	sl, r3
 800c122:	4693      	mov	fp, r2
 800c124:	4652      	mov	r2, sl
 800c126:	465b      	mov	r3, fp
 800c128:	4640      	mov	r0, r8
 800c12a:	4649      	mov	r1, r9
 800c12c:	f7f4 f990 	bl	8000450 <__aeabi_uldivmod>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4613      	mov	r3, r2
 800c136:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c13e:	d308      	bcc.n	800c152 <UART_SetConfig+0x79a>
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c146:	d204      	bcs.n	800c152 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c14e:	60da      	str	r2, [r3, #12]
 800c150:	e17c      	b.n	800c44c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c158:	e178      	b.n	800c44c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c162:	f040 80c5 	bne.w	800c2f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c166:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c16a:	2b20      	cmp	r3, #32
 800c16c:	dc48      	bgt.n	800c200 <UART_SetConfig+0x848>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	db7b      	blt.n	800c26a <UART_SetConfig+0x8b2>
 800c172:	2b20      	cmp	r3, #32
 800c174:	d879      	bhi.n	800c26a <UART_SetConfig+0x8b2>
 800c176:	a201      	add	r2, pc, #4	@ (adr r2, 800c17c <UART_SetConfig+0x7c4>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c207 	.word	0x0800c207
 800c180:	0800c20f 	.word	0x0800c20f
 800c184:	0800c26b 	.word	0x0800c26b
 800c188:	0800c26b 	.word	0x0800c26b
 800c18c:	0800c217 	.word	0x0800c217
 800c190:	0800c26b 	.word	0x0800c26b
 800c194:	0800c26b 	.word	0x0800c26b
 800c198:	0800c26b 	.word	0x0800c26b
 800c19c:	0800c227 	.word	0x0800c227
 800c1a0:	0800c26b 	.word	0x0800c26b
 800c1a4:	0800c26b 	.word	0x0800c26b
 800c1a8:	0800c26b 	.word	0x0800c26b
 800c1ac:	0800c26b 	.word	0x0800c26b
 800c1b0:	0800c26b 	.word	0x0800c26b
 800c1b4:	0800c26b 	.word	0x0800c26b
 800c1b8:	0800c26b 	.word	0x0800c26b
 800c1bc:	0800c237 	.word	0x0800c237
 800c1c0:	0800c26b 	.word	0x0800c26b
 800c1c4:	0800c26b 	.word	0x0800c26b
 800c1c8:	0800c26b 	.word	0x0800c26b
 800c1cc:	0800c26b 	.word	0x0800c26b
 800c1d0:	0800c26b 	.word	0x0800c26b
 800c1d4:	0800c26b 	.word	0x0800c26b
 800c1d8:	0800c26b 	.word	0x0800c26b
 800c1dc:	0800c26b 	.word	0x0800c26b
 800c1e0:	0800c26b 	.word	0x0800c26b
 800c1e4:	0800c26b 	.word	0x0800c26b
 800c1e8:	0800c26b 	.word	0x0800c26b
 800c1ec:	0800c26b 	.word	0x0800c26b
 800c1f0:	0800c26b 	.word	0x0800c26b
 800c1f4:	0800c26b 	.word	0x0800c26b
 800c1f8:	0800c26b 	.word	0x0800c26b
 800c1fc:	0800c25d 	.word	0x0800c25d
 800c200:	2b40      	cmp	r3, #64	@ 0x40
 800c202:	d02e      	beq.n	800c262 <UART_SetConfig+0x8aa>
 800c204:	e031      	b.n	800c26a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c206:	f7fb fdf3 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800c20a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c20c:	e033      	b.n	800c276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c20e:	f7fb fe05 	bl	8007e1c <HAL_RCC_GetPCLK2Freq>
 800c212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c214:	e02f      	b.n	800c276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fd fdf6 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c224:	e027      	b.n	800c276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c226:	f107 0318 	add.w	r3, r7, #24
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fd ff42 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c234:	e01f      	b.n	800c276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c236:	4b2d      	ldr	r3, [pc, #180]	@ (800c2ec <UART_SetConfig+0x934>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f003 0320 	and.w	r3, r3, #32
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d009      	beq.n	800c256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c242:	4b2a      	ldr	r3, [pc, #168]	@ (800c2ec <UART_SetConfig+0x934>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	08db      	lsrs	r3, r3, #3
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	4a24      	ldr	r2, [pc, #144]	@ (800c2e0 <UART_SetConfig+0x928>)
 800c24e:	fa22 f303 	lsr.w	r3, r2, r3
 800c252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c254:	e00f      	b.n	800c276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c256:	4b22      	ldr	r3, [pc, #136]	@ (800c2e0 <UART_SetConfig+0x928>)
 800c258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c25a:	e00c      	b.n	800c276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c25c:	4b21      	ldr	r3, [pc, #132]	@ (800c2e4 <UART_SetConfig+0x92c>)
 800c25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c260:	e009      	b.n	800c276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c268:	e005      	b.n	800c276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c26a:	2300      	movs	r3, #0
 800c26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f000 80e7 	beq.w	800c44c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c282:	4a19      	ldr	r2, [pc, #100]	@ (800c2e8 <UART_SetConfig+0x930>)
 800c284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c288:	461a      	mov	r2, r3
 800c28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c290:	005a      	lsls	r2, r3, #1
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	085b      	lsrs	r3, r3, #1
 800c298:	441a      	add	r2, r3
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a6:	2b0f      	cmp	r3, #15
 800c2a8:	d916      	bls.n	800c2d8 <UART_SetConfig+0x920>
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2b0:	d212      	bcs.n	800c2d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	f023 030f 	bic.w	r3, r3, #15
 800c2ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2be:	085b      	lsrs	r3, r3, #1
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	e0b9      	b.n	800c44c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c2de:	e0b5      	b.n	800c44c <UART_SetConfig+0xa94>
 800c2e0:	03d09000 	.word	0x03d09000
 800c2e4:	003d0900 	.word	0x003d0900
 800c2e8:	08020c1c 	.word	0x08020c1c
 800c2ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c2f4:	2b20      	cmp	r3, #32
 800c2f6:	dc49      	bgt.n	800c38c <UART_SetConfig+0x9d4>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	db7c      	blt.n	800c3f6 <UART_SetConfig+0xa3e>
 800c2fc:	2b20      	cmp	r3, #32
 800c2fe:	d87a      	bhi.n	800c3f6 <UART_SetConfig+0xa3e>
 800c300:	a201      	add	r2, pc, #4	@ (adr r2, 800c308 <UART_SetConfig+0x950>)
 800c302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c306:	bf00      	nop
 800c308:	0800c393 	.word	0x0800c393
 800c30c:	0800c39b 	.word	0x0800c39b
 800c310:	0800c3f7 	.word	0x0800c3f7
 800c314:	0800c3f7 	.word	0x0800c3f7
 800c318:	0800c3a3 	.word	0x0800c3a3
 800c31c:	0800c3f7 	.word	0x0800c3f7
 800c320:	0800c3f7 	.word	0x0800c3f7
 800c324:	0800c3f7 	.word	0x0800c3f7
 800c328:	0800c3b3 	.word	0x0800c3b3
 800c32c:	0800c3f7 	.word	0x0800c3f7
 800c330:	0800c3f7 	.word	0x0800c3f7
 800c334:	0800c3f7 	.word	0x0800c3f7
 800c338:	0800c3f7 	.word	0x0800c3f7
 800c33c:	0800c3f7 	.word	0x0800c3f7
 800c340:	0800c3f7 	.word	0x0800c3f7
 800c344:	0800c3f7 	.word	0x0800c3f7
 800c348:	0800c3c3 	.word	0x0800c3c3
 800c34c:	0800c3f7 	.word	0x0800c3f7
 800c350:	0800c3f7 	.word	0x0800c3f7
 800c354:	0800c3f7 	.word	0x0800c3f7
 800c358:	0800c3f7 	.word	0x0800c3f7
 800c35c:	0800c3f7 	.word	0x0800c3f7
 800c360:	0800c3f7 	.word	0x0800c3f7
 800c364:	0800c3f7 	.word	0x0800c3f7
 800c368:	0800c3f7 	.word	0x0800c3f7
 800c36c:	0800c3f7 	.word	0x0800c3f7
 800c370:	0800c3f7 	.word	0x0800c3f7
 800c374:	0800c3f7 	.word	0x0800c3f7
 800c378:	0800c3f7 	.word	0x0800c3f7
 800c37c:	0800c3f7 	.word	0x0800c3f7
 800c380:	0800c3f7 	.word	0x0800c3f7
 800c384:	0800c3f7 	.word	0x0800c3f7
 800c388:	0800c3e9 	.word	0x0800c3e9
 800c38c:	2b40      	cmp	r3, #64	@ 0x40
 800c38e:	d02e      	beq.n	800c3ee <UART_SetConfig+0xa36>
 800c390:	e031      	b.n	800c3f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c392:	f7fb fd2d 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800c396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c398:	e033      	b.n	800c402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c39a:	f7fb fd3f 	bl	8007e1c <HAL_RCC_GetPCLK2Freq>
 800c39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3a0:	e02f      	b.n	800c402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fd fd30 	bl	8009e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3b0:	e027      	b.n	800c402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3b2:	f107 0318 	add.w	r3, r7, #24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd fe7c 	bl	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3c0:	e01f      	b.n	800c402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3c2:	4b2d      	ldr	r3, [pc, #180]	@ (800c478 <UART_SetConfig+0xac0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 0320 	and.w	r3, r3, #32
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d009      	beq.n	800c3e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c478 <UART_SetConfig+0xac0>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	08db      	lsrs	r3, r3, #3
 800c3d4:	f003 0303 	and.w	r3, r3, #3
 800c3d8:	4a28      	ldr	r2, [pc, #160]	@ (800c47c <UART_SetConfig+0xac4>)
 800c3da:	fa22 f303 	lsr.w	r3, r2, r3
 800c3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3e0:	e00f      	b.n	800c402 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c3e2:	4b26      	ldr	r3, [pc, #152]	@ (800c47c <UART_SetConfig+0xac4>)
 800c3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3e6:	e00c      	b.n	800c402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3e8:	4b25      	ldr	r3, [pc, #148]	@ (800c480 <UART_SetConfig+0xac8>)
 800c3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3ec:	e009      	b.n	800c402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f4:	e005      	b.n	800c402 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c400:	bf00      	nop
    }

    if (pclk != 0U)
 800c402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d021      	beq.n	800c44c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40c:	4a1d      	ldr	r2, [pc, #116]	@ (800c484 <UART_SetConfig+0xacc>)
 800c40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c412:	461a      	mov	r2, r3
 800c414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c416:	fbb3 f2f2 	udiv	r2, r3, r2
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	085b      	lsrs	r3, r3, #1
 800c420:	441a      	add	r2, r3
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	fbb2 f3f3 	udiv	r3, r2, r3
 800c42a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42e:	2b0f      	cmp	r3, #15
 800c430:	d909      	bls.n	800c446 <UART_SetConfig+0xa8e>
 800c432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c438:	d205      	bcs.n	800c446 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	60da      	str	r2, [r3, #12]
 800c444:	e002      	b.n	800c44c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	2201      	movs	r2, #1
 800c450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2201      	movs	r2, #1
 800c458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2200      	movs	r2, #0
 800c460:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2200      	movs	r2, #0
 800c466:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c468:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3748      	adds	r7, #72	@ 0x48
 800c470:	46bd      	mov	sp, r7
 800c472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c476:	bf00      	nop
 800c478:	58024400 	.word	0x58024400
 800c47c:	03d09000 	.word	0x03d09000
 800c480:	003d0900 	.word	0x003d0900
 800c484:	08020c1c 	.word	0x08020c1c

0800c488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c494:	f003 0308 	and.w	r3, r3, #8
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00a      	beq.n	800c4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00a      	beq.n	800c4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4d8:	f003 0302 	and.w	r3, r3, #2
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00a      	beq.n	800c4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4fa:	f003 0304 	and.w	r3, r3, #4
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00a      	beq.n	800c518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	430a      	orrs	r2, r1
 800c516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51c:	f003 0310 	and.w	r3, r3, #16
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00a      	beq.n	800c53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	430a      	orrs	r2, r1
 800c538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c53e:	f003 0320 	and.w	r3, r3, #32
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00a      	beq.n	800c55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	430a      	orrs	r2, r1
 800c55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01a      	beq.n	800c59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	430a      	orrs	r2, r1
 800c57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c586:	d10a      	bne.n	800c59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	430a      	orrs	r2, r1
 800c59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00a      	beq.n	800c5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	430a      	orrs	r2, r1
 800c5be:	605a      	str	r2, [r3, #4]
  }
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b098      	sub	sp, #96	@ 0x60
 800c5d0:	af02      	add	r7, sp, #8
 800c5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c5dc:	f7f5 fff0 	bl	80025c0 <HAL_GetTick>
 800c5e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 0308 	and.w	r3, r3, #8
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d12f      	bne.n	800c650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f88e 	bl	800c720 <UART_WaitOnFlagUntilTimeout>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d022      	beq.n	800c650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c612:	e853 3f00 	ldrex	r3, [r3]
 800c616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c61a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c61e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	461a      	mov	r2, r3
 800c626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c628:	647b      	str	r3, [r7, #68]	@ 0x44
 800c62a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c62e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c630:	e841 2300 	strex	r3, r2, [r1]
 800c634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e6      	bne.n	800c60a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2220      	movs	r2, #32
 800c640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e063      	b.n	800c718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0304 	and.w	r3, r3, #4
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	d149      	bne.n	800c6f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c65e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c666:	2200      	movs	r2, #0
 800c668:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f857 	bl	800c720 <UART_WaitOnFlagUntilTimeout>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d03c      	beq.n	800c6f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	623b      	str	r3, [r7, #32]
   return(result);
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c68c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c696:	633b      	str	r3, [r7, #48]	@ 0x30
 800c698:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c69c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e6      	bne.n	800c678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f023 0301 	bic.w	r3, r3, #1
 800c6c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	3308      	adds	r3, #8
 800c6c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6ca:	61fa      	str	r2, [r7, #28]
 800c6cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ce:	69b9      	ldr	r1, [r7, #24]
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	e841 2300 	strex	r3, r2, [r1]
 800c6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1e5      	bne.n	800c6aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e012      	b.n	800c718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2220      	movs	r2, #32
 800c6f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3758      	adds	r7, #88	@ 0x58
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	4613      	mov	r3, r2
 800c72e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c730:	e04f      	b.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c738:	d04b      	beq.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c73a:	f7f5 ff41 	bl	80025c0 <HAL_GetTick>
 800c73e:	4602      	mov	r2, r0
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	69ba      	ldr	r2, [r7, #24]
 800c746:	429a      	cmp	r2, r3
 800c748:	d302      	bcc.n	800c750 <UART_WaitOnFlagUntilTimeout+0x30>
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d101      	bne.n	800c754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e04e      	b.n	800c7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d037      	beq.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b80      	cmp	r3, #128	@ 0x80
 800c766:	d034      	beq.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b40      	cmp	r3, #64	@ 0x40
 800c76c:	d031      	beq.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	f003 0308 	and.w	r3, r3, #8
 800c778:	2b08      	cmp	r3, #8
 800c77a:	d110      	bne.n	800c79e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2208      	movs	r2, #8
 800c782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 f921 	bl	800c9cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2208      	movs	r2, #8
 800c78e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e029      	b.n	800c7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7ac:	d111      	bne.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c7b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f000 f907 	bl	800c9cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e00f      	b.n	800c7f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	69da      	ldr	r2, [r3, #28]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	4013      	ands	r3, r2
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	bf0c      	ite	eq
 800c7e2:	2301      	moveq	r3, #1
 800c7e4:	2300      	movne	r3, #0
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	79fb      	ldrb	r3, [r7, #7]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d0a0      	beq.n	800c732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b096      	sub	sp, #88	@ 0x58
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	4613      	mov	r3, r2
 800c808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	88fa      	ldrh	r2, [r7, #6]
 800c814:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2222      	movs	r2, #34	@ 0x22
 800c824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d02d      	beq.n	800c88e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c838:	4a40      	ldr	r2, [pc, #256]	@ (800c93c <UART_Start_Receive_DMA+0x140>)
 800c83a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c842:	4a3f      	ldr	r2, [pc, #252]	@ (800c940 <UART_Start_Receive_DMA+0x144>)
 800c844:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c84c:	4a3d      	ldr	r2, [pc, #244]	@ (800c944 <UART_Start_Receive_DMA+0x148>)
 800c84e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c856:	2200      	movs	r2, #0
 800c858:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3324      	adds	r3, #36	@ 0x24
 800c866:	4619      	mov	r1, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c86c:	461a      	mov	r2, r3
 800c86e:	88fb      	ldrh	r3, [r7, #6]
 800c870:	f7f7 fdf0 	bl	8004454 <HAL_DMA_Start_IT>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d009      	beq.n	800c88e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2210      	movs	r2, #16
 800c87e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2220      	movs	r2, #32
 800c886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e051      	b.n	800c932 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d018      	beq.n	800c8c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89e:	e853 3f00 	ldrex	r3, [r3]
 800c8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c8ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8bc:	e841 2300 	strex	r3, r2, [r1]
 800c8c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1e6      	bne.n	800c896 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3308      	adds	r3, #8
 800c8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d2:	e853 3f00 	ldrex	r3, [r3]
 800c8d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8da:	f043 0301 	orr.w	r3, r3, #1
 800c8de:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800c8ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8f0:	e841 2300 	strex	r3, r2, [r1]
 800c8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e5      	bne.n	800c8c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	3308      	adds	r3, #8
 800c902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	e853 3f00 	ldrex	r3, [r3]
 800c90a:	613b      	str	r3, [r7, #16]
   return(result);
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	3308      	adds	r3, #8
 800c91a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c91c:	623a      	str	r2, [r7, #32]
 800c91e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c920:	69f9      	ldr	r1, [r7, #28]
 800c922:	6a3a      	ldr	r2, [r7, #32]
 800c924:	e841 2300 	strex	r3, r2, [r1]
 800c928:	61bb      	str	r3, [r7, #24]
   return(result);
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1e5      	bne.n	800c8fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3758      	adds	r7, #88	@ 0x58
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	0800cb4b 	.word	0x0800cb4b
 800c940:	0800cc73 	.word	0x0800cc73
 800c944:	0800ccb1 	.word	0x0800ccb1

0800c948 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c948:	b480      	push	{r7}
 800c94a:	b08f      	sub	sp, #60	@ 0x3c
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	e853 3f00 	ldrex	r3, [r3]
 800c95c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c964:	637b      	str	r3, [r7, #52]	@ 0x34
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c970:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c976:	e841 2300 	strex	r3, r2, [r1]
 800c97a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1e6      	bne.n	800c950 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3308      	adds	r3, #8
 800c988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	e853 3f00 	ldrex	r3, [r3]
 800c990:	60bb      	str	r3, [r7, #8]
   return(result);
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c998:	633b      	str	r3, [r7, #48]	@ 0x30
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3308      	adds	r3, #8
 800c9a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9a2:	61ba      	str	r2, [r7, #24]
 800c9a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a6:	6979      	ldr	r1, [r7, #20]
 800c9a8:	69ba      	ldr	r2, [r7, #24]
 800c9aa:	e841 2300 	strex	r3, r2, [r1]
 800c9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1e5      	bne.n	800c982 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2220      	movs	r2, #32
 800c9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c9be:	bf00      	nop
 800c9c0:	373c      	adds	r7, #60	@ 0x3c
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
	...

0800c9cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b095      	sub	sp, #84	@ 0x54
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9dc:	e853 3f00 	ldrex	r3, [r3]
 800c9e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9fa:	e841 2300 	strex	r3, r2, [r1]
 800c9fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1e6      	bne.n	800c9d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	e853 3f00 	ldrex	r3, [r3]
 800ca14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	4b1e      	ldr	r3, [pc, #120]	@ (800ca94 <UART_EndRxTransfer+0xc8>)
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3308      	adds	r3, #8
 800ca24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca2e:	e841 2300 	strex	r3, r2, [r1]
 800ca32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1e5      	bne.n	800ca06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d118      	bne.n	800ca74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	e853 3f00 	ldrex	r3, [r3]
 800ca4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f023 0310 	bic.w	r3, r3, #16
 800ca56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca60:	61bb      	str	r3, [r7, #24]
 800ca62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6979      	ldr	r1, [r7, #20]
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e6      	bne.n	800ca42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2220      	movs	r2, #32
 800ca78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ca88:	bf00      	nop
 800ca8a:	3754      	adds	r7, #84	@ 0x54
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr
 800ca94:	effffffe 	.word	0xeffffffe

0800ca98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b090      	sub	sp, #64	@ 0x40
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caae:	d037      	beq.n	800cb20 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3308      	adds	r3, #8
 800cabe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac2:	e853 3f00 	ldrex	r3, [r3]
 800cac6:	623b      	str	r3, [r7, #32]
   return(result);
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cace:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3308      	adds	r3, #8
 800cad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cad8:	633a      	str	r2, [r7, #48]	@ 0x30
 800cada:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cadc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cae0:	e841 2300 	strex	r3, r2, [r1]
 800cae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1e5      	bne.n	800cab8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800caec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	e853 3f00 	ldrex	r3, [r3]
 800caf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb0a:	61fb      	str	r3, [r7, #28]
 800cb0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0e:	69b9      	ldr	r1, [r7, #24]
 800cb10:	69fa      	ldr	r2, [r7, #28]
 800cb12:	e841 2300 	strex	r3, r2, [r1]
 800cb16:	617b      	str	r3, [r7, #20]
   return(result);
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1e6      	bne.n	800caec <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb1e:	e002      	b.n	800cb26 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cb20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb22:	f7fe ff0b 	bl	800b93c <HAL_UART_TxCpltCallback>
}
 800cb26:	bf00      	nop
 800cb28:	3740      	adds	r7, #64	@ 0x40
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f7fe ff07 	bl	800b950 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb42:	bf00      	nop
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b09c      	sub	sp, #112	@ 0x70
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb56:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb60:	d071      	beq.n	800cc46 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cb62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb64:	2200      	movs	r2, #0
 800cb66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	461a      	mov	r2, r3
 800cb86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb88:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb8a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e6      	bne.n	800cb6a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3308      	adds	r3, #8
 800cba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbae:	f023 0301 	bic.w	r3, r3, #1
 800cbb2:	667b      	str	r3, [r7, #100]	@ 0x64
 800cbb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3308      	adds	r3, #8
 800cbba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cbbc:	647a      	str	r2, [r7, #68]	@ 0x44
 800cbbe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cbc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cbc4:	e841 2300 	strex	r3, r2, [r1]
 800cbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cbca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e5      	bne.n	800cb9c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	e853 3f00 	ldrex	r3, [r3]
 800cbde:	623b      	str	r3, [r7, #32]
   return(result);
 800cbe0:	6a3b      	ldr	r3, [r7, #32]
 800cbe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbe6:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3308      	adds	r3, #8
 800cbee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbf0:	633a      	str	r2, [r7, #48]	@ 0x30
 800cbf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbf8:	e841 2300 	strex	r3, r2, [r1]
 800cbfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1e5      	bne.n	800cbd0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc06:	2220      	movs	r2, #32
 800cc08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d118      	bne.n	800cc46 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	e853 3f00 	ldrex	r3, [r3]
 800cc20:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f023 0310 	bic.w	r3, r3, #16
 800cc28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc32:	61fb      	str	r3, [r7, #28]
 800cc34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc36:	69b9      	ldr	r1, [r7, #24]
 800cc38:	69fa      	ldr	r2, [r7, #28]
 800cc3a:	e841 2300 	strex	r3, r2, [r1]
 800cc3e:	617b      	str	r3, [r7, #20]
   return(result);
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1e6      	bne.n	800cc14 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc48:	2200      	movs	r2, #0
 800cc4a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d107      	bne.n	800cc64 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc5e:	f7fe fe9f 	bl	800b9a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc62:	e002      	b.n	800cc6a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800cc64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc66:	f7fe fe7d 	bl	800b964 <HAL_UART_RxCpltCallback>
}
 800cc6a:	bf00      	nop
 800cc6c:	3770      	adds	r7, #112	@ 0x70
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b084      	sub	sp, #16
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc7e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2201      	movs	r2, #1
 800cc84:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d109      	bne.n	800cca2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc94:	085b      	lsrs	r3, r3, #1
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4619      	mov	r1, r3
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7fe fe80 	bl	800b9a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cca0:	e002      	b.n	800cca8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f7fe fe68 	bl	800b978 <HAL_UART_RxHalfCpltCallback>
}
 800cca8:	bf00      	nop
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccbc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccc4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cccc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccd8:	2b80      	cmp	r3, #128	@ 0x80
 800ccda:	d109      	bne.n	800ccf0 <UART_DMAError+0x40>
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	2b21      	cmp	r3, #33	@ 0x21
 800cce0:	d106      	bne.n	800ccf0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ccea:	6978      	ldr	r0, [r7, #20]
 800ccec:	f7ff fe2c 	bl	800c948 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccfa:	2b40      	cmp	r3, #64	@ 0x40
 800ccfc:	d109      	bne.n	800cd12 <UART_DMAError+0x62>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b22      	cmp	r3, #34	@ 0x22
 800cd02:	d106      	bne.n	800cd12 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cd0c:	6978      	ldr	r0, [r7, #20]
 800cd0e:	f7ff fe5d 	bl	800c9cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd18:	f043 0210 	orr.w	r2, r3, #16
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd22:	6978      	ldr	r0, [r7, #20]
 800cd24:	f7fe fe32 	bl	800b98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd28:	bf00      	nop
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f7fe fe1c 	bl	800b98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd54:	bf00      	nop
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	e853 3f00 	ldrex	r3, [r3]
 800cd70:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd78:	61fb      	str	r3, [r7, #28]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	61bb      	str	r3, [r7, #24]
 800cd84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd86:	6979      	ldr	r1, [r7, #20]
 800cd88:	69ba      	ldr	r2, [r7, #24]
 800cd8a:	e841 2300 	strex	r3, r2, [r1]
 800cd8e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e6      	bne.n	800cd64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7fe fdc9 	bl	800b93c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdaa:	bf00      	nop
 800cdac:	3720      	adds	r7, #32
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cdb2:	b480      	push	{r7}
 800cdb4:	b083      	sub	sp, #12
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cdba:	bf00      	nop
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cdce:	bf00      	nop
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cdda:	b480      	push	{r7}
 800cddc:	b083      	sub	sp, #12
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cde2:	bf00      	nop
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b085      	sub	sp, #20
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d101      	bne.n	800ce04 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce00:	2302      	movs	r3, #2
 800ce02:	e027      	b.n	800ce54 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2224      	movs	r2, #36	@ 0x24
 800ce10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f022 0201 	bic.w	r2, r2, #1
 800ce2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ce32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2220      	movs	r2, #32
 800ce46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d101      	bne.n	800ce78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce74:	2302      	movs	r3, #2
 800ce76:	e02d      	b.n	800ced4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2224      	movs	r2, #36	@ 0x24
 800ce84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f022 0201 	bic.w	r2, r2, #1
 800ce9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f84f 	bl	800cf58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2220      	movs	r2, #32
 800cec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d101      	bne.n	800cef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cef0:	2302      	movs	r3, #2
 800cef2:	e02d      	b.n	800cf50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2224      	movs	r2, #36	@ 0x24
 800cf00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f022 0201 	bic.w	r2, r2, #1
 800cf1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 f811 	bl	800cf58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2220      	movs	r2, #32
 800cf42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d108      	bne.n	800cf7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf78:	e031      	b.n	800cfde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf7a:	2310      	movs	r3, #16
 800cf7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf7e:	2310      	movs	r3, #16
 800cf80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	0e5b      	lsrs	r3, r3, #25
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	f003 0307 	and.w	r3, r3, #7
 800cf90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	0f5b      	lsrs	r3, r3, #29
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	f003 0307 	and.w	r3, r3, #7
 800cfa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfa2:	7bbb      	ldrb	r3, [r7, #14]
 800cfa4:	7b3a      	ldrb	r2, [r7, #12]
 800cfa6:	4911      	ldr	r1, [pc, #68]	@ (800cfec <UARTEx_SetNbDataToProcess+0x94>)
 800cfa8:	5c8a      	ldrb	r2, [r1, r2]
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cfae:	7b3a      	ldrb	r2, [r7, #12]
 800cfb0:	490f      	ldr	r1, [pc, #60]	@ (800cff0 <UARTEx_SetNbDataToProcess+0x98>)
 800cfb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	7b7a      	ldrb	r2, [r7, #13]
 800cfc4:	4909      	ldr	r1, [pc, #36]	@ (800cfec <UARTEx_SetNbDataToProcess+0x94>)
 800cfc6:	5c8a      	ldrb	r2, [r1, r2]
 800cfc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cfcc:	7b7a      	ldrb	r2, [r7, #13]
 800cfce:	4908      	ldr	r1, [pc, #32]	@ (800cff0 <UARTEx_SetNbDataToProcess+0x98>)
 800cfd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cfde:	bf00      	nop
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	08020c34 	.word	0x08020c34
 800cff0:	08020c3c 	.word	0x08020c3c

0800cff4 <__NVIC_SetPriority>:
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d004:	2b00      	cmp	r3, #0
 800d006:	db0a      	blt.n	800d01e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	490c      	ldr	r1, [pc, #48]	@ (800d040 <__NVIC_SetPriority+0x4c>)
 800d00e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d012:	0112      	lsls	r2, r2, #4
 800d014:	b2d2      	uxtb	r2, r2
 800d016:	440b      	add	r3, r1
 800d018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d01c:	e00a      	b.n	800d034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	b2da      	uxtb	r2, r3
 800d022:	4908      	ldr	r1, [pc, #32]	@ (800d044 <__NVIC_SetPriority+0x50>)
 800d024:	88fb      	ldrh	r3, [r7, #6]
 800d026:	f003 030f 	and.w	r3, r3, #15
 800d02a:	3b04      	subs	r3, #4
 800d02c:	0112      	lsls	r2, r2, #4
 800d02e:	b2d2      	uxtb	r2, r2
 800d030:	440b      	add	r3, r1
 800d032:	761a      	strb	r2, [r3, #24]
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr
 800d040:	e000e100 	.word	0xe000e100
 800d044:	e000ed00 	.word	0xe000ed00

0800d048 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d04c:	4b05      	ldr	r3, [pc, #20]	@ (800d064 <SysTick_Handler+0x1c>)
 800d04e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d050:	f001 fe7c 	bl	800ed4c <xTaskGetSchedulerState>
 800d054:	4603      	mov	r3, r0
 800d056:	2b01      	cmp	r3, #1
 800d058:	d001      	beq.n	800d05e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d05a:	f002 fc75 	bl	800f948 <xPortSysTickHandler>
  }
}
 800d05e:	bf00      	nop
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	e000e010 	.word	0xe000e010

0800d068 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d06c:	2100      	movs	r1, #0
 800d06e:	f06f 0004 	mvn.w	r0, #4
 800d072:	f7ff ffbf 	bl	800cff4 <__NVIC_SetPriority>
#endif
}
 800d076:	bf00      	nop
 800d078:	bd80      	pop	{r7, pc}
	...

0800d07c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d082:	f3ef 8305 	mrs	r3, IPSR
 800d086:	603b      	str	r3, [r7, #0]
  return(result);
 800d088:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d08e:	f06f 0305 	mvn.w	r3, #5
 800d092:	607b      	str	r3, [r7, #4]
 800d094:	e00c      	b.n	800d0b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d096:	4b0a      	ldr	r3, [pc, #40]	@ (800d0c0 <osKernelInitialize+0x44>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d105      	bne.n	800d0aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d09e:	4b08      	ldr	r3, [pc, #32]	@ (800d0c0 <osKernelInitialize+0x44>)
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	607b      	str	r3, [r7, #4]
 800d0a8:	e002      	b.n	800d0b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d0aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d0ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d0b0:	687b      	ldr	r3, [r7, #4]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	24032c48 	.word	0x24032c48

0800d0c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0ca:	f3ef 8305 	mrs	r3, IPSR
 800d0ce:	603b      	str	r3, [r7, #0]
  return(result);
 800d0d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d003      	beq.n	800d0de <osKernelStart+0x1a>
    stat = osErrorISR;
 800d0d6:	f06f 0305 	mvn.w	r3, #5
 800d0da:	607b      	str	r3, [r7, #4]
 800d0dc:	e010      	b.n	800d100 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d0de:	4b0b      	ldr	r3, [pc, #44]	@ (800d10c <osKernelStart+0x48>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d109      	bne.n	800d0fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d0e6:	f7ff ffbf 	bl	800d068 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d0ea:	4b08      	ldr	r3, [pc, #32]	@ (800d10c <osKernelStart+0x48>)
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d0f0:	f001 f9a0 	bl	800e434 <vTaskStartScheduler>
      stat = osOK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	607b      	str	r3, [r7, #4]
 800d0f8:	e002      	b.n	800d100 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d0fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d0fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d100:	687b      	ldr	r3, [r7, #4]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	24032c48 	.word	0x24032c48

0800d110 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b08e      	sub	sp, #56	@ 0x38
 800d114:	af04      	add	r7, sp, #16
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d120:	f3ef 8305 	mrs	r3, IPSR
 800d124:	617b      	str	r3, [r7, #20]
  return(result);
 800d126:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d17e      	bne.n	800d22a <osThreadNew+0x11a>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d07b      	beq.n	800d22a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d132:	2380      	movs	r3, #128	@ 0x80
 800d134:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d136:	2318      	movs	r3, #24
 800d138:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d13e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d142:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d045      	beq.n	800d1d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d002      	beq.n	800d158 <osThreadNew+0x48>
        name = attr->name;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	699b      	ldr	r3, [r3, #24]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	699b      	ldr	r3, [r3, #24]
 800d164:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d008      	beq.n	800d17e <osThreadNew+0x6e>
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	2b38      	cmp	r3, #56	@ 0x38
 800d170:	d805      	bhi.n	800d17e <osThreadNew+0x6e>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <osThreadNew+0x72>
        return (NULL);
 800d17e:	2300      	movs	r3, #0
 800d180:	e054      	b.n	800d22c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	695b      	ldr	r3, [r3, #20]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	089b      	lsrs	r3, r3, #2
 800d190:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00e      	beq.n	800d1b8 <osThreadNew+0xa8>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	2ba7      	cmp	r3, #167	@ 0xa7
 800d1a0:	d90a      	bls.n	800d1b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d006      	beq.n	800d1b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <osThreadNew+0xa8>
        mem = 1;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	e010      	b.n	800d1da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10c      	bne.n	800d1da <osThreadNew+0xca>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d108      	bne.n	800d1da <osThreadNew+0xca>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d104      	bne.n	800d1da <osThreadNew+0xca>
          mem = 0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	61bb      	str	r3, [r7, #24]
 800d1d4:	e001      	b.n	800d1da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d110      	bne.n	800d202 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1e8:	9202      	str	r2, [sp, #8]
 800d1ea:	9301      	str	r3, [sp, #4]
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	6a3a      	ldr	r2, [r7, #32]
 800d1f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f000 ff28 	bl	800e04c <xTaskCreateStatic>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	613b      	str	r3, [r7, #16]
 800d200:	e013      	b.n	800d22a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d110      	bne.n	800d22a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	f107 0310 	add.w	r3, r7, #16
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f000 ff76 	bl	800e10c <xTaskCreate>
 800d220:	4603      	mov	r3, r0
 800d222:	2b01      	cmp	r3, #1
 800d224:	d001      	beq.n	800d22a <osThreadNew+0x11a>
            hTask = NULL;
 800d226:	2300      	movs	r3, #0
 800d228:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d22a:	693b      	ldr	r3, [r7, #16]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3728      	adds	r7, #40	@ 0x28
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d23c:	f3ef 8305 	mrs	r3, IPSR
 800d240:	60bb      	str	r3, [r7, #8]
  return(result);
 800d242:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d244:	2b00      	cmp	r3, #0
 800d246:	d003      	beq.n	800d250 <osDelay+0x1c>
    stat = osErrorISR;
 800d248:	f06f 0305 	mvn.w	r3, #5
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	e007      	b.n	800d260 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d250:	2300      	movs	r3, #0
 800d252:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d002      	beq.n	800d260 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f001 f8b4 	bl	800e3c8 <vTaskDelay>
    }
  }

  return (stat);
 800d260:	68fb      	ldr	r3, [r7, #12]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b088      	sub	sp, #32
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d276:	f3ef 8305 	mrs	r3, IPSR
 800d27a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d27c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d174      	bne.n	800d36c <osMutexNew+0x102>
    if (attr != NULL) {
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d003      	beq.n	800d290 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	e001      	b.n	800d294 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	f003 0301 	and.w	r3, r3, #1
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d002      	beq.n	800d2a4 <osMutexNew+0x3a>
      rmtx = 1U;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	617b      	str	r3, [r7, #20]
 800d2a2:	e001      	b.n	800d2a8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	f003 0308 	and.w	r3, r3, #8
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d15c      	bne.n	800d36c <osMutexNew+0x102>
      mem = -1;
 800d2b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2b6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d015      	beq.n	800d2ea <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d006      	beq.n	800d2d4 <osMutexNew+0x6a>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	2b4f      	cmp	r3, #79	@ 0x4f
 800d2cc:	d902      	bls.n	800d2d4 <osMutexNew+0x6a>
          mem = 1;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	613b      	str	r3, [r7, #16]
 800d2d2:	e00c      	b.n	800d2ee <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d108      	bne.n	800d2ee <osMutexNew+0x84>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d104      	bne.n	800d2ee <osMutexNew+0x84>
            mem = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	613b      	str	r3, [r7, #16]
 800d2e8:	e001      	b.n	800d2ee <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d112      	bne.n	800d31a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d007      	beq.n	800d30a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	4619      	mov	r1, r3
 800d300:	2004      	movs	r0, #4
 800d302:	f000 fa98 	bl	800d836 <xQueueCreateMutexStatic>
 800d306:	61f8      	str	r0, [r7, #28]
 800d308:	e016      	b.n	800d338 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	4619      	mov	r1, r3
 800d310:	2001      	movs	r0, #1
 800d312:	f000 fa90 	bl	800d836 <xQueueCreateMutexStatic>
 800d316:	61f8      	str	r0, [r7, #28]
 800d318:	e00e      	b.n	800d338 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10b      	bne.n	800d338 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d004      	beq.n	800d330 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d326:	2004      	movs	r0, #4
 800d328:	f000 fa6d 	bl	800d806 <xQueueCreateMutex>
 800d32c:	61f8      	str	r0, [r7, #28]
 800d32e:	e003      	b.n	800d338 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d330:	2001      	movs	r0, #1
 800d332:	f000 fa68 	bl	800d806 <xQueueCreateMutex>
 800d336:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00c      	beq.n	800d358 <osMutexNew+0xee>
        if (attr != NULL) {
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d003      	beq.n	800d34c <osMutexNew+0xe2>
          name = attr->name;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	e001      	b.n	800d350 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d350:	68f9      	ldr	r1, [r7, #12]
 800d352:	69f8      	ldr	r0, [r7, #28]
 800d354:	f000 fe1c 	bl	800df90 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d006      	beq.n	800d36c <osMutexNew+0x102>
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	f043 0301 	orr.w	r3, r3, #1
 800d36a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d36c:	69fb      	ldr	r3, [r7, #28]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3720      	adds	r7, #32
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	4a07      	ldr	r2, [pc, #28]	@ (800d3a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	4a06      	ldr	r2, [pc, #24]	@ (800d3a8 <vApplicationGetIdleTaskMemory+0x30>)
 800d38e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2280      	movs	r2, #128	@ 0x80
 800d394:	601a      	str	r2, [r3, #0]
}
 800d396:	bf00      	nop
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	24032c4c 	.word	0x24032c4c
 800d3a8:	24032cf4 	.word	0x24032cf4

0800d3ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4a07      	ldr	r2, [pc, #28]	@ (800d3d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d3bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	4a06      	ldr	r2, [pc, #24]	@ (800d3dc <vApplicationGetTimerTaskMemory+0x30>)
 800d3c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d3ca:	601a      	str	r2, [r3, #0]
}
 800d3cc:	bf00      	nop
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	24032ef4 	.word	0x24032ef4
 800d3dc:	24032f9c 	.word	0x24032f9c

0800d3e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f103 0208 	add.w	r2, r3, #8
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d3f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f103 0208 	add.w	r2, r3, #8
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f103 0208 	add.w	r2, r3, #8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d414:	bf00      	nop
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d42e:	bf00      	nop
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d43a:	b480      	push	{r7}
 800d43c:	b085      	sub	sp, #20
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	689a      	ldr	r2, [r3, #8]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	601a      	str	r2, [r3, #0]
}
 800d476:	bf00      	nop
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d482:	b480      	push	{r7}
 800d484:	b085      	sub	sp, #20
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d498:	d103      	bne.n	800d4a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	e00c      	b.n	800d4bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	60fb      	str	r3, [r7, #12]
 800d4a8:	e002      	b.n	800d4b0 <vListInsert+0x2e>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	68ba      	ldr	r2, [r7, #8]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d2f6      	bcs.n	800d4aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	683a      	ldr	r2, [r7, #0]
 800d4ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	601a      	str	r2, [r3, #0]
}
 800d4e8:	bf00      	nop
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	6892      	ldr	r2, [r2, #8]
 800d50a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	6852      	ldr	r2, [r2, #4]
 800d514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d103      	bne.n	800d528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	689a      	ldr	r2, [r3, #8]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	1e5a      	subs	r2, r3, #1
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3714      	adds	r7, #20
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10b      	bne.n	800d574 <xQueueGenericReset+0x2c>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	60bb      	str	r3, [r7, #8]
}
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
 800d572:	e7fd      	b.n	800d570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d574:	f002 f958 	bl	800f828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d580:	68f9      	ldr	r1, [r7, #12]
 800d582:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d584:	fb01 f303 	mul.w	r3, r1, r3
 800d588:	441a      	add	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	68f9      	ldr	r1, [r7, #12]
 800d5a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5aa:	fb01 f303 	mul.w	r3, r1, r3
 800d5ae:	441a      	add	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	22ff      	movs	r2, #255	@ 0xff
 800d5b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	22ff      	movs	r2, #255	@ 0xff
 800d5c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d114      	bne.n	800d5f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d01a      	beq.n	800d608 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	3310      	adds	r3, #16
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f001 f9ca 	bl	800e970 <xTaskRemoveFromEventList>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d012      	beq.n	800d608 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d618 <xQueueGenericReset+0xd0>)
 800d5e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	e009      	b.n	800d608 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3310      	adds	r3, #16
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7ff fef1 	bl	800d3e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3324      	adds	r3, #36	@ 0x24
 800d602:	4618      	mov	r0, r3
 800d604:	f7ff feec 	bl	800d3e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d608:	f002 f940 	bl	800f88c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d60c:	2301      	movs	r3, #1
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08e      	sub	sp, #56	@ 0x38
 800d620:	af02      	add	r7, sp, #8
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10b      	bne.n	800d648 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	e7fd      	b.n	800d644 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d10b      	bne.n	800d666 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d660:	bf00      	nop
 800d662:	bf00      	nop
 800d664:	e7fd      	b.n	800d662 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <xQueueGenericCreateStatic+0x56>
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <xQueueGenericCreateStatic+0x5a>
 800d672:	2301      	movs	r3, #1
 800d674:	e000      	b.n	800d678 <xQueueGenericCreateStatic+0x5c>
 800d676:	2300      	movs	r3, #0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10b      	bne.n	800d694 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	623b      	str	r3, [r7, #32]
}
 800d68e:	bf00      	nop
 800d690:	bf00      	nop
 800d692:	e7fd      	b.n	800d690 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <xQueueGenericCreateStatic+0x84>
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <xQueueGenericCreateStatic+0x88>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e000      	b.n	800d6a6 <xQueueGenericCreateStatic+0x8a>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10b      	bne.n	800d6c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	61fb      	str	r3, [r7, #28]
}
 800d6bc:	bf00      	nop
 800d6be:	bf00      	nop
 800d6c0:	e7fd      	b.n	800d6be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d6c2:	2350      	movs	r3, #80	@ 0x50
 800d6c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2b50      	cmp	r3, #80	@ 0x50
 800d6ca:	d00b      	beq.n	800d6e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	61bb      	str	r3, [r7, #24]
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	e7fd      	b.n	800d6e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d6e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00d      	beq.n	800d70c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d6f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	4613      	mov	r3, r2
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f000 f840 	bl	800d78c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d70e:	4618      	mov	r0, r3
 800d710:	3730      	adds	r7, #48	@ 0x30
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d716:	b580      	push	{r7, lr}
 800d718:	b08a      	sub	sp, #40	@ 0x28
 800d71a:	af02      	add	r7, sp, #8
 800d71c:	60f8      	str	r0, [r7, #12]
 800d71e:	60b9      	str	r1, [r7, #8]
 800d720:	4613      	mov	r3, r2
 800d722:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10b      	bne.n	800d742 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	613b      	str	r3, [r7, #16]
}
 800d73c:	bf00      	nop
 800d73e:	bf00      	nop
 800d740:	e7fd      	b.n	800d73e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	fb02 f303 	mul.w	r3, r2, r3
 800d74a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	3350      	adds	r3, #80	@ 0x50
 800d750:	4618      	mov	r0, r3
 800d752:	f002 f98b 	bl	800fa6c <pvPortMalloc>
 800d756:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d011      	beq.n	800d782 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	3350      	adds	r3, #80	@ 0x50
 800d766:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d770:	79fa      	ldrb	r2, [r7, #7]
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	4613      	mov	r3, r2
 800d778:	697a      	ldr	r2, [r7, #20]
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f000 f805 	bl	800d78c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d782:	69bb      	ldr	r3, [r7, #24]
	}
 800d784:	4618      	mov	r0, r3
 800d786:	3720      	adds	r7, #32
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d103      	bne.n	800d7a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	69ba      	ldr	r2, [r7, #24]
 800d7a4:	601a      	str	r2, [r3, #0]
 800d7a6:	e002      	b.n	800d7ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	69b8      	ldr	r0, [r7, #24]
 800d7be:	f7ff fec3 	bl	800d548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	78fa      	ldrb	r2, [r7, #3]
 800d7c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b082      	sub	sp, #8
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00e      	beq.n	800d7fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f837 	bl	800d86c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d7fe:	bf00      	nop
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d806:	b580      	push	{r7, lr}
 800d808:	b086      	sub	sp, #24
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	4603      	mov	r3, r0
 800d80e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d810:	2301      	movs	r3, #1
 800d812:	617b      	str	r3, [r7, #20]
 800d814:	2300      	movs	r3, #0
 800d816:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d818:	79fb      	ldrb	r3, [r7, #7]
 800d81a:	461a      	mov	r2, r3
 800d81c:	6939      	ldr	r1, [r7, #16]
 800d81e:	6978      	ldr	r0, [r7, #20]
 800d820:	f7ff ff79 	bl	800d716 <xQueueGenericCreate>
 800d824:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f7ff ffd3 	bl	800d7d2 <prvInitialiseMutex>

		return xNewQueue;
 800d82c:	68fb      	ldr	r3, [r7, #12]
	}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d836:	b580      	push	{r7, lr}
 800d838:	b088      	sub	sp, #32
 800d83a:	af02      	add	r7, sp, #8
 800d83c:	4603      	mov	r3, r0
 800d83e:	6039      	str	r1, [r7, #0]
 800d840:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d842:	2301      	movs	r3, #1
 800d844:	617b      	str	r3, [r7, #20]
 800d846:	2300      	movs	r3, #0
 800d848:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d84a:	79fb      	ldrb	r3, [r7, #7]
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2200      	movs	r2, #0
 800d852:	6939      	ldr	r1, [r7, #16]
 800d854:	6978      	ldr	r0, [r7, #20]
 800d856:	f7ff fee1 	bl	800d61c <xQueueGenericCreateStatic>
 800d85a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7ff ffb8 	bl	800d7d2 <prvInitialiseMutex>

		return xNewQueue;
 800d862:	68fb      	ldr	r3, [r7, #12]
	}
 800d864:	4618      	mov	r0, r3
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08e      	sub	sp, #56	@ 0x38
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d87a:	2300      	movs	r3, #0
 800d87c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d884:	2b00      	cmp	r3, #0
 800d886:	d10b      	bne.n	800d8a0 <xQueueGenericSend+0x34>
	__asm volatile
 800d888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d89a:	bf00      	nop
 800d89c:	bf00      	nop
 800d89e:	e7fd      	b.n	800d89c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d103      	bne.n	800d8ae <xQueueGenericSend+0x42>
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d101      	bne.n	800d8b2 <xQueueGenericSend+0x46>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e000      	b.n	800d8b4 <xQueueGenericSend+0x48>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10b      	bne.n	800d8d0 <xQueueGenericSend+0x64>
	__asm volatile
 800d8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8bc:	f383 8811 	msr	BASEPRI, r3
 800d8c0:	f3bf 8f6f 	isb	sy
 800d8c4:	f3bf 8f4f 	dsb	sy
 800d8c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8ca:	bf00      	nop
 800d8cc:	bf00      	nop
 800d8ce:	e7fd      	b.n	800d8cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d103      	bne.n	800d8de <xQueueGenericSend+0x72>
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d101      	bne.n	800d8e2 <xQueueGenericSend+0x76>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e000      	b.n	800d8e4 <xQueueGenericSend+0x78>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10b      	bne.n	800d900 <xQueueGenericSend+0x94>
	__asm volatile
 800d8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	623b      	str	r3, [r7, #32]
}
 800d8fa:	bf00      	nop
 800d8fc:	bf00      	nop
 800d8fe:	e7fd      	b.n	800d8fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d900:	f001 fa24 	bl	800ed4c <xTaskGetSchedulerState>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d102      	bne.n	800d910 <xQueueGenericSend+0xa4>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d101      	bne.n	800d914 <xQueueGenericSend+0xa8>
 800d910:	2301      	movs	r3, #1
 800d912:	e000      	b.n	800d916 <xQueueGenericSend+0xaa>
 800d914:	2300      	movs	r3, #0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10b      	bne.n	800d932 <xQueueGenericSend+0xc6>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	61fb      	str	r3, [r7, #28]
}
 800d92c:	bf00      	nop
 800d92e:	bf00      	nop
 800d930:	e7fd      	b.n	800d92e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d932:	f001 ff79 	bl	800f828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d93e:	429a      	cmp	r2, r3
 800d940:	d302      	bcc.n	800d948 <xQueueGenericSend+0xdc>
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d129      	bne.n	800d99c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d94e:	f000 fa0f 	bl	800dd70 <prvCopyDataToQueue>
 800d952:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d010      	beq.n	800d97e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95e:	3324      	adds	r3, #36	@ 0x24
 800d960:	4618      	mov	r0, r3
 800d962:	f001 f805 	bl	800e970 <xTaskRemoveFromEventList>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d013      	beq.n	800d994 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d96c:	4b3f      	ldr	r3, [pc, #252]	@ (800da6c <xQueueGenericSend+0x200>)
 800d96e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	e00a      	b.n	800d994 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d980:	2b00      	cmp	r3, #0
 800d982:	d007      	beq.n	800d994 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d984:	4b39      	ldr	r3, [pc, #228]	@ (800da6c <xQueueGenericSend+0x200>)
 800d986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d98a:	601a      	str	r2, [r3, #0]
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d994:	f001 ff7a 	bl	800f88c <vPortExitCritical>
				return pdPASS;
 800d998:	2301      	movs	r3, #1
 800d99a:	e063      	b.n	800da64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d103      	bne.n	800d9aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9a2:	f001 ff73 	bl	800f88c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e05c      	b.n	800da64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9b0:	f107 0314 	add.w	r3, r7, #20
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f001 f867 	bl	800ea88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9be:	f001 ff65 	bl	800f88c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9c2:	f000 fda7 	bl	800e514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9c6:	f001 ff2f 	bl	800f828 <vPortEnterCritical>
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9d0:	b25b      	sxtb	r3, r3
 800d9d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9d6:	d103      	bne.n	800d9e0 <xQueueGenericSend+0x174>
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9e6:	b25b      	sxtb	r3, r3
 800d9e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9ec:	d103      	bne.n	800d9f6 <xQueueGenericSend+0x18a>
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9f6:	f001 ff49 	bl	800f88c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9fa:	1d3a      	adds	r2, r7, #4
 800d9fc:	f107 0314 	add.w	r3, r7, #20
 800da00:	4611      	mov	r1, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f001 f856 	bl	800eab4 <xTaskCheckForTimeOut>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d124      	bne.n	800da58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da10:	f000 faa6 	bl	800df60 <prvIsQueueFull>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d018      	beq.n	800da4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1c:	3310      	adds	r3, #16
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	4611      	mov	r1, r2
 800da22:	4618      	mov	r0, r3
 800da24:	f000 ff52 	bl	800e8cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da2a:	f000 fa31 	bl	800de90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da2e:	f000 fd7f 	bl	800e530 <xTaskResumeAll>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	f47f af7c 	bne.w	800d932 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800da3a:	4b0c      	ldr	r3, [pc, #48]	@ (800da6c <xQueueGenericSend+0x200>)
 800da3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	e772      	b.n	800d932 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da4e:	f000 fa1f 	bl	800de90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da52:	f000 fd6d 	bl	800e530 <xTaskResumeAll>
 800da56:	e76c      	b.n	800d932 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da5a:	f000 fa19 	bl	800de90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da5e:	f000 fd67 	bl	800e530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da64:	4618      	mov	r0, r3
 800da66:	3738      	adds	r7, #56	@ 0x38
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	e000ed04 	.word	0xe000ed04

0800da70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b090      	sub	sp, #64	@ 0x40
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800da82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10b      	bne.n	800daa0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da9a:	bf00      	nop
 800da9c:	bf00      	nop
 800da9e:	e7fd      	b.n	800da9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d103      	bne.n	800daae <xQueueGenericSendFromISR+0x3e>
 800daa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d101      	bne.n	800dab2 <xQueueGenericSendFromISR+0x42>
 800daae:	2301      	movs	r3, #1
 800dab0:	e000      	b.n	800dab4 <xQueueGenericSendFromISR+0x44>
 800dab2:	2300      	movs	r3, #0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10b      	bne.n	800dad0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800daca:	bf00      	nop
 800dacc:	bf00      	nop
 800dace:	e7fd      	b.n	800dacc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d103      	bne.n	800dade <xQueueGenericSendFromISR+0x6e>
 800dad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d101      	bne.n	800dae2 <xQueueGenericSendFromISR+0x72>
 800dade:	2301      	movs	r3, #1
 800dae0:	e000      	b.n	800dae4 <xQueueGenericSendFromISR+0x74>
 800dae2:	2300      	movs	r3, #0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10b      	bne.n	800db00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800dae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	623b      	str	r3, [r7, #32]
}
 800dafa:	bf00      	nop
 800dafc:	bf00      	nop
 800dafe:	e7fd      	b.n	800dafc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db00:	f001 ff72 	bl	800f9e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db04:	f3ef 8211 	mrs	r2, BASEPRI
 800db08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	61fa      	str	r2, [r7, #28]
 800db1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db28:	429a      	cmp	r2, r3
 800db2a:	d302      	bcc.n	800db32 <xQueueGenericSendFromISR+0xc2>
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d12f      	bne.n	800db92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	68b9      	ldr	r1, [r7, #8]
 800db46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db48:	f000 f912 	bl	800dd70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800db50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db54:	d112      	bne.n	800db7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d016      	beq.n	800db8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db60:	3324      	adds	r3, #36	@ 0x24
 800db62:	4618      	mov	r0, r3
 800db64:	f000 ff04 	bl	800e970 <xTaskRemoveFromEventList>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00e      	beq.n	800db8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00b      	beq.n	800db8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	601a      	str	r2, [r3, #0]
 800db7a:	e007      	b.n	800db8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800db80:	3301      	adds	r3, #1
 800db82:	b2db      	uxtb	r3, r3
 800db84:	b25a      	sxtb	r2, r3
 800db86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800db8c:	2301      	movs	r3, #1
 800db8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800db90:	e001      	b.n	800db96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db92:	2300      	movs	r3, #0
 800db94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dba0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3740      	adds	r7, #64	@ 0x40
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b08c      	sub	sp, #48	@ 0x30
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10b      	bne.n	800dbde <xQueueReceive+0x32>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	623b      	str	r3, [r7, #32]
}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	e7fd      	b.n	800dbda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d103      	bne.n	800dbec <xQueueReceive+0x40>
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <xQueueReceive+0x44>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e000      	b.n	800dbf2 <xQueueReceive+0x46>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10b      	bne.n	800dc0e <xQueueReceive+0x62>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	61fb      	str	r3, [r7, #28]
}
 800dc08:	bf00      	nop
 800dc0a:	bf00      	nop
 800dc0c:	e7fd      	b.n	800dc0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc0e:	f001 f89d 	bl	800ed4c <xTaskGetSchedulerState>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <xQueueReceive+0x72>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <xQueueReceive+0x76>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e000      	b.n	800dc24 <xQueueReceive+0x78>
 800dc22:	2300      	movs	r3, #0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10b      	bne.n	800dc40 <xQueueReceive+0x94>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	61bb      	str	r3, [r7, #24]
}
 800dc3a:	bf00      	nop
 800dc3c:	bf00      	nop
 800dc3e:	e7fd      	b.n	800dc3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc40:	f001 fdf2 	bl	800f828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d01f      	beq.n	800dc90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc50:	68b9      	ldr	r1, [r7, #8]
 800dc52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc54:	f000 f8f6 	bl	800de44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5a:	1e5a      	subs	r2, r3, #1
 800dc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00f      	beq.n	800dc88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc6a:	3310      	adds	r3, #16
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f000 fe7f 	bl	800e970 <xTaskRemoveFromEventList>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d007      	beq.n	800dc88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc78:	4b3c      	ldr	r3, [pc, #240]	@ (800dd6c <xQueueReceive+0x1c0>)
 800dc7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc88:	f001 fe00 	bl	800f88c <vPortExitCritical>
				return pdPASS;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e069      	b.n	800dd64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d103      	bne.n	800dc9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc96:	f001 fdf9 	bl	800f88c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e062      	b.n	800dd64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dca4:	f107 0310 	add.w	r3, r7, #16
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 feed 	bl	800ea88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcb2:	f001 fdeb 	bl	800f88c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcb6:	f000 fc2d 	bl	800e514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcba:	f001 fdb5 	bl	800f828 <vPortEnterCritical>
 800dcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcc4:	b25b      	sxtb	r3, r3
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcca:	d103      	bne.n	800dcd4 <xQueueReceive+0x128>
 800dccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcda:	b25b      	sxtb	r3, r3
 800dcdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dce0:	d103      	bne.n	800dcea <xQueueReceive+0x13e>
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcea:	f001 fdcf 	bl	800f88c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcee:	1d3a      	adds	r2, r7, #4
 800dcf0:	f107 0310 	add.w	r3, r7, #16
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 fedc 	bl	800eab4 <xTaskCheckForTimeOut>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d123      	bne.n	800dd4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd04:	f000 f916 	bl	800df34 <prvIsQueueEmpty>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d017      	beq.n	800dd3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd10:	3324      	adds	r3, #36	@ 0x24
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	4611      	mov	r1, r2
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 fdd8 	bl	800e8cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd1e:	f000 f8b7 	bl	800de90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd22:	f000 fc05 	bl	800e530 <xTaskResumeAll>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d189      	bne.n	800dc40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dd2c:	4b0f      	ldr	r3, [pc, #60]	@ (800dd6c <xQueueReceive+0x1c0>)
 800dd2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	e780      	b.n	800dc40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd40:	f000 f8a6 	bl	800de90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd44:	f000 fbf4 	bl	800e530 <xTaskResumeAll>
 800dd48:	e77a      	b.n	800dc40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd4c:	f000 f8a0 	bl	800de90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd50:	f000 fbee 	bl	800e530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd56:	f000 f8ed 	bl	800df34 <prvIsQueueEmpty>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f43f af6f 	beq.w	800dc40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3730      	adds	r7, #48	@ 0x30
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	e000ed04 	.word	0xe000ed04

0800dd70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b086      	sub	sp, #24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10d      	bne.n	800ddaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d14d      	bne.n	800de32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 fff4 	bl	800ed88 <xTaskPriorityDisinherit>
 800dda0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	609a      	str	r2, [r3, #8]
 800dda8:	e043      	b.n	800de32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d119      	bne.n	800dde4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6858      	ldr	r0, [r3, #4]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb8:	461a      	mov	r2, r3
 800ddba:	68b9      	ldr	r1, [r7, #8]
 800ddbc:	f011 ff59 	bl	801fc72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	685a      	ldr	r2, [r3, #4]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc8:	441a      	add	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d32b      	bcc.n	800de32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	605a      	str	r2, [r3, #4]
 800dde2:	e026      	b.n	800de32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	68d8      	ldr	r0, [r3, #12]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddec:	461a      	mov	r2, r3
 800ddee:	68b9      	ldr	r1, [r7, #8]
 800ddf0:	f011 ff3f 	bl	801fc72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddfc:	425b      	negs	r3, r3
 800ddfe:	441a      	add	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	68da      	ldr	r2, [r3, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d207      	bcs.n	800de20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	689a      	ldr	r2, [r3, #8]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de18:	425b      	negs	r3, r3
 800de1a:	441a      	add	r2, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b02      	cmp	r3, #2
 800de24:	d105      	bne.n	800de32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	3b01      	subs	r3, #1
 800de30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800de3a:	697b      	ldr	r3, [r7, #20]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de52:	2b00      	cmp	r3, #0
 800de54:	d018      	beq.n	800de88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	68da      	ldr	r2, [r3, #12]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de5e:	441a      	add	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68da      	ldr	r2, [r3, #12]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d303      	bcc.n	800de78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	68d9      	ldr	r1, [r3, #12]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de80:	461a      	mov	r2, r3
 800de82:	6838      	ldr	r0, [r7, #0]
 800de84:	f011 fef5 	bl	801fc72 <memcpy>
	}
}
 800de88:	bf00      	nop
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de98:	f001 fcc6 	bl	800f828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dea4:	e011      	b.n	800deca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d012      	beq.n	800ded4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3324      	adds	r3, #36	@ 0x24
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 fd5c 	bl	800e970 <xTaskRemoveFromEventList>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d001      	beq.n	800dec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800debe:	f000 fe5d 	bl	800eb7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dec2:	7bfb      	ldrb	r3, [r7, #15]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	dce9      	bgt.n	800dea6 <prvUnlockQueue+0x16>
 800ded2:	e000      	b.n	800ded6 <prvUnlockQueue+0x46>
					break;
 800ded4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	22ff      	movs	r2, #255	@ 0xff
 800deda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dede:	f001 fcd5 	bl	800f88c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dee2:	f001 fca1 	bl	800f828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800deec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800deee:	e011      	b.n	800df14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d012      	beq.n	800df1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3310      	adds	r3, #16
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fd37 	bl	800e970 <xTaskRemoveFromEventList>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df08:	f000 fe38 	bl	800eb7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	3b01      	subs	r3, #1
 800df10:	b2db      	uxtb	r3, r3
 800df12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	dce9      	bgt.n	800def0 <prvUnlockQueue+0x60>
 800df1c:	e000      	b.n	800df20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	22ff      	movs	r2, #255	@ 0xff
 800df24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800df28:	f001 fcb0 	bl	800f88c <vPortExitCritical>
}
 800df2c:	bf00      	nop
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df3c:	f001 fc74 	bl	800f828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df44:	2b00      	cmp	r3, #0
 800df46:	d102      	bne.n	800df4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df48:	2301      	movs	r3, #1
 800df4a:	60fb      	str	r3, [r7, #12]
 800df4c:	e001      	b.n	800df52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df52:	f001 fc9b 	bl	800f88c <vPortExitCritical>

	return xReturn;
 800df56:	68fb      	ldr	r3, [r7, #12]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df68:	f001 fc5e 	bl	800f828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df74:	429a      	cmp	r2, r3
 800df76:	d102      	bne.n	800df7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df78:	2301      	movs	r3, #1
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	e001      	b.n	800df82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df7e:	2300      	movs	r3, #0
 800df80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df82:	f001 fc83 	bl	800f88c <vPortExitCritical>

	return xReturn;
 800df86:	68fb      	ldr	r3, [r7, #12]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df9a:	2300      	movs	r3, #0
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	e014      	b.n	800dfca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dfa0:	4a0f      	ldr	r2, [pc, #60]	@ (800dfe0 <vQueueAddToRegistry+0x50>)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10b      	bne.n	800dfc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dfac:	490c      	ldr	r1, [pc, #48]	@ (800dfe0 <vQueueAddToRegistry+0x50>)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dfb6:	4a0a      	ldr	r2, [pc, #40]	@ (800dfe0 <vQueueAddToRegistry+0x50>)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	4413      	add	r3, r2
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfc2:	e006      	b.n	800dfd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	60fb      	str	r3, [r7, #12]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b07      	cmp	r3, #7
 800dfce:	d9e7      	bls.n	800dfa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfd0:	bf00      	nop
 800dfd2:	bf00      	nop
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	2403339c 	.word	0x2403339c

0800dfe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dff4:	f001 fc18 	bl	800f828 <vPortEnterCritical>
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dffe:	b25b      	sxtb	r3, r3
 800e000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e004:	d103      	bne.n	800e00e <vQueueWaitForMessageRestricted+0x2a>
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e014:	b25b      	sxtb	r3, r3
 800e016:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e01a:	d103      	bne.n	800e024 <vQueueWaitForMessageRestricted+0x40>
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e024:	f001 fc32 	bl	800f88c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d106      	bne.n	800e03e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	3324      	adds	r3, #36	@ 0x24
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	68b9      	ldr	r1, [r7, #8]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 fc6d 	bl	800e918 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e03e:	6978      	ldr	r0, [r7, #20]
 800e040:	f7ff ff26 	bl	800de90 <prvUnlockQueue>
	}
 800e044:	bf00      	nop
 800e046:	3718      	adds	r7, #24
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b08e      	sub	sp, #56	@ 0x38
 800e050:	af04      	add	r7, sp, #16
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
 800e058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10b      	bne.n	800e078 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	623b      	str	r3, [r7, #32]
}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	e7fd      	b.n	800e074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10b      	bne.n	800e096 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	61fb      	str	r3, [r7, #28]
}
 800e090:	bf00      	nop
 800e092:	bf00      	nop
 800e094:	e7fd      	b.n	800e092 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e096:	23a8      	movs	r3, #168	@ 0xa8
 800e098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	2ba8      	cmp	r3, #168	@ 0xa8
 800e09e:	d00b      	beq.n	800e0b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	61bb      	str	r3, [r7, #24]
}
 800e0b2:	bf00      	nop
 800e0b4:	bf00      	nop
 800e0b6:	e7fd      	b.n	800e0b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e0b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d01e      	beq.n	800e0fe <xTaskCreateStatic+0xb2>
 800e0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d01b      	beq.n	800e0fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d2:	2202      	movs	r2, #2
 800e0d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9303      	str	r3, [sp, #12]
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0de:	9302      	str	r3, [sp, #8]
 800e0e0:	f107 0314 	add.w	r3, r7, #20
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	68b9      	ldr	r1, [r7, #8]
 800e0f0:	68f8      	ldr	r0, [r7, #12]
 800e0f2:	f000 f851 	bl	800e198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0f8:	f000 f8f6 	bl	800e2e8 <prvAddNewTaskToReadyList>
 800e0fc:	e001      	b.n	800e102 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e0fe:	2300      	movs	r3, #0
 800e100:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e102:	697b      	ldr	r3, [r7, #20]
	}
 800e104:	4618      	mov	r0, r3
 800e106:	3728      	adds	r7, #40	@ 0x28
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b08c      	sub	sp, #48	@ 0x30
 800e110:	af04      	add	r7, sp, #16
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	603b      	str	r3, [r7, #0]
 800e118:	4613      	mov	r3, r2
 800e11a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e11c:	88fb      	ldrh	r3, [r7, #6]
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4618      	mov	r0, r3
 800e122:	f001 fca3 	bl	800fa6c <pvPortMalloc>
 800e126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00e      	beq.n	800e14c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e12e:	20a8      	movs	r0, #168	@ 0xa8
 800e130:	f001 fc9c 	bl	800fa6c <pvPortMalloc>
 800e134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d003      	beq.n	800e144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	697a      	ldr	r2, [r7, #20]
 800e140:	631a      	str	r2, [r3, #48]	@ 0x30
 800e142:	e005      	b.n	800e150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e144:	6978      	ldr	r0, [r7, #20]
 800e146:	f001 fd5f 	bl	800fc08 <vPortFree>
 800e14a:	e001      	b.n	800e150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e14c:	2300      	movs	r3, #0
 800e14e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d017      	beq.n	800e186 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e15e:	88fa      	ldrh	r2, [r7, #6]
 800e160:	2300      	movs	r3, #0
 800e162:	9303      	str	r3, [sp, #12]
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	9302      	str	r3, [sp, #8]
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	9301      	str	r3, [sp, #4]
 800e16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f000 f80f 	bl	800e198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e17a:	69f8      	ldr	r0, [r7, #28]
 800e17c:	f000 f8b4 	bl	800e2e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e180:	2301      	movs	r3, #1
 800e182:	61bb      	str	r3, [r7, #24]
 800e184:	e002      	b.n	800e18c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e18a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e18c:	69bb      	ldr	r3, [r7, #24]
	}
 800e18e:	4618      	mov	r0, r3
 800e190:	3720      	adds	r7, #32
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
	...

0800e198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	21a5      	movs	r1, #165	@ 0xa5
 800e1b2:	f011 fc3f 	bl	801fa34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e1ba:	6879      	ldr	r1, [r7, #4]
 800e1bc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e1c0:	440b      	add	r3, r1
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4413      	add	r3, r2
 800e1c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	f023 0307 	bic.w	r3, r3, #7
 800e1ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	f003 0307 	and.w	r3, r3, #7
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	617b      	str	r3, [r7, #20]
}
 800e1ec:	bf00      	nop
 800e1ee:	bf00      	nop
 800e1f0:	e7fd      	b.n	800e1ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d01f      	beq.n	800e238 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	61fb      	str	r3, [r7, #28]
 800e1fc:	e012      	b.n	800e224 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	4413      	add	r3, r2
 800e204:	7819      	ldrb	r1, [r3, #0]
 800e206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	4413      	add	r3, r2
 800e20c:	3334      	adds	r3, #52	@ 0x34
 800e20e:	460a      	mov	r2, r1
 800e210:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	4413      	add	r3, r2
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d006      	beq.n	800e22c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	3301      	adds	r3, #1
 800e222:	61fb      	str	r3, [r7, #28]
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	2b0f      	cmp	r3, #15
 800e228:	d9e9      	bls.n	800e1fe <prvInitialiseNewTask+0x66>
 800e22a:	e000      	b.n	800e22e <prvInitialiseNewTask+0x96>
			{
				break;
 800e22c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	2200      	movs	r2, #0
 800e232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e236:	e003      	b.n	800e240 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e242:	2b37      	cmp	r3, #55	@ 0x37
 800e244:	d901      	bls.n	800e24a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e246:	2337      	movs	r3, #55	@ 0x37
 800e248:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e24e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e254:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e258:	2200      	movs	r2, #0
 800e25a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25e:	3304      	adds	r3, #4
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff f8dd 	bl	800d420 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e268:	3318      	adds	r3, #24
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff f8d8 	bl	800d420 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e274:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e278:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e284:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e288:	2200      	movs	r2, #0
 800e28a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e290:	2200      	movs	r2, #0
 800e292:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e298:	3354      	adds	r3, #84	@ 0x54
 800e29a:	224c      	movs	r2, #76	@ 0x4c
 800e29c:	2100      	movs	r1, #0
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f011 fbc8 	bl	801fa34 <memset>
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e2dc <prvInitialiseNewTask+0x144>)
 800e2a8:	659a      	str	r2, [r3, #88]	@ 0x58
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ac:	4a0c      	ldr	r2, [pc, #48]	@ (800e2e0 <prvInitialiseNewTask+0x148>)
 800e2ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e2e4 <prvInitialiseNewTask+0x14c>)
 800e2b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	68f9      	ldr	r1, [r7, #12]
 800e2ba:	69b8      	ldr	r0, [r7, #24]
 800e2bc:	f001 f982 	bl	800f5c4 <pxPortInitialiseStack>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2d2:	bf00      	nop
 800e2d4:	3720      	adds	r7, #32
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	2406949c 	.word	0x2406949c
 800e2e0:	24069504 	.word	0x24069504
 800e2e4:	2406956c 	.word	0x2406956c

0800e2e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2f0:	f001 fa9a 	bl	800f828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2f4:	4b2d      	ldr	r3, [pc, #180]	@ (800e3ac <prvAddNewTaskToReadyList+0xc4>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	4a2c      	ldr	r2, [pc, #176]	@ (800e3ac <prvAddNewTaskToReadyList+0xc4>)
 800e2fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2fe:	4b2c      	ldr	r3, [pc, #176]	@ (800e3b0 <prvAddNewTaskToReadyList+0xc8>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d109      	bne.n	800e31a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e306:	4a2a      	ldr	r2, [pc, #168]	@ (800e3b0 <prvAddNewTaskToReadyList+0xc8>)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e30c:	4b27      	ldr	r3, [pc, #156]	@ (800e3ac <prvAddNewTaskToReadyList+0xc4>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d110      	bne.n	800e336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e314:	f000 fc56 	bl	800ebc4 <prvInitialiseTaskLists>
 800e318:	e00d      	b.n	800e336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e31a:	4b26      	ldr	r3, [pc, #152]	@ (800e3b4 <prvAddNewTaskToReadyList+0xcc>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d109      	bne.n	800e336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e322:	4b23      	ldr	r3, [pc, #140]	@ (800e3b0 <prvAddNewTaskToReadyList+0xc8>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d802      	bhi.n	800e336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e330:	4a1f      	ldr	r2, [pc, #124]	@ (800e3b0 <prvAddNewTaskToReadyList+0xc8>)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e336:	4b20      	ldr	r3, [pc, #128]	@ (800e3b8 <prvAddNewTaskToReadyList+0xd0>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3301      	adds	r3, #1
 800e33c:	4a1e      	ldr	r2, [pc, #120]	@ (800e3b8 <prvAddNewTaskToReadyList+0xd0>)
 800e33e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e340:	4b1d      	ldr	r3, [pc, #116]	@ (800e3b8 <prvAddNewTaskToReadyList+0xd0>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e34c:	4b1b      	ldr	r3, [pc, #108]	@ (800e3bc <prvAddNewTaskToReadyList+0xd4>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	429a      	cmp	r2, r3
 800e352:	d903      	bls.n	800e35c <prvAddNewTaskToReadyList+0x74>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e358:	4a18      	ldr	r2, [pc, #96]	@ (800e3bc <prvAddNewTaskToReadyList+0xd4>)
 800e35a:	6013      	str	r3, [r2, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e360:	4613      	mov	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	4413      	add	r3, r2
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4a15      	ldr	r2, [pc, #84]	@ (800e3c0 <prvAddNewTaskToReadyList+0xd8>)
 800e36a:	441a      	add	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3304      	adds	r3, #4
 800e370:	4619      	mov	r1, r3
 800e372:	4610      	mov	r0, r2
 800e374:	f7ff f861 	bl	800d43a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e378:	f001 fa88 	bl	800f88c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e37c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3b4 <prvAddNewTaskToReadyList+0xcc>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00e      	beq.n	800e3a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e384:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b0 <prvAddNewTaskToReadyList+0xc8>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38e:	429a      	cmp	r2, r3
 800e390:	d207      	bcs.n	800e3a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e392:	4b0c      	ldr	r3, [pc, #48]	@ (800e3c4 <prvAddNewTaskToReadyList+0xdc>)
 800e394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3a2:	bf00      	nop
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	240338b0 	.word	0x240338b0
 800e3b0:	240333dc 	.word	0x240333dc
 800e3b4:	240338bc 	.word	0x240338bc
 800e3b8:	240338cc 	.word	0x240338cc
 800e3bc:	240338b8 	.word	0x240338b8
 800e3c0:	240333e0 	.word	0x240333e0
 800e3c4:	e000ed04 	.word	0xe000ed04

0800e3c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d018      	beq.n	800e40c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e3da:	4b14      	ldr	r3, [pc, #80]	@ (800e42c <vTaskDelay+0x64>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00b      	beq.n	800e3fa <vTaskDelay+0x32>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	60bb      	str	r3, [r7, #8]
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop
 800e3f8:	e7fd      	b.n	800e3f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e3fa:	f000 f88b 	bl	800e514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e3fe:	2100      	movs	r1, #0
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fd31 	bl	800ee68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e406:	f000 f893 	bl	800e530 <xTaskResumeAll>
 800e40a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d107      	bne.n	800e422 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e412:	4b07      	ldr	r3, [pc, #28]	@ (800e430 <vTaskDelay+0x68>)
 800e414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e422:	bf00      	nop
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	240338d8 	.word	0x240338d8
 800e430:	e000ed04 	.word	0xe000ed04

0800e434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b08a      	sub	sp, #40	@ 0x28
 800e438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e43a:	2300      	movs	r3, #0
 800e43c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e43e:	2300      	movs	r3, #0
 800e440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e442:	463a      	mov	r2, r7
 800e444:	1d39      	adds	r1, r7, #4
 800e446:	f107 0308 	add.w	r3, r7, #8
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe ff94 	bl	800d378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	9202      	str	r2, [sp, #8]
 800e458:	9301      	str	r3, [sp, #4]
 800e45a:	2300      	movs	r3, #0
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	2300      	movs	r3, #0
 800e460:	460a      	mov	r2, r1
 800e462:	4924      	ldr	r1, [pc, #144]	@ (800e4f4 <vTaskStartScheduler+0xc0>)
 800e464:	4824      	ldr	r0, [pc, #144]	@ (800e4f8 <vTaskStartScheduler+0xc4>)
 800e466:	f7ff fdf1 	bl	800e04c <xTaskCreateStatic>
 800e46a:	4603      	mov	r3, r0
 800e46c:	4a23      	ldr	r2, [pc, #140]	@ (800e4fc <vTaskStartScheduler+0xc8>)
 800e46e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e470:	4b22      	ldr	r3, [pc, #136]	@ (800e4fc <vTaskStartScheduler+0xc8>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d002      	beq.n	800e47e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e478:	2301      	movs	r3, #1
 800e47a:	617b      	str	r3, [r7, #20]
 800e47c:	e001      	b.n	800e482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e47e:	2300      	movs	r3, #0
 800e480:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d102      	bne.n	800e48e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e488:	f000 fd42 	bl	800ef10 <xTimerCreateTimerTask>
 800e48c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d11b      	bne.n	800e4cc <vTaskStartScheduler+0x98>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e498:	f383 8811 	msr	BASEPRI, r3
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	613b      	str	r3, [r7, #16]
}
 800e4a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e4a8:	4b15      	ldr	r3, [pc, #84]	@ (800e500 <vTaskStartScheduler+0xcc>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	3354      	adds	r3, #84	@ 0x54
 800e4ae:	4a15      	ldr	r2, [pc, #84]	@ (800e504 <vTaskStartScheduler+0xd0>)
 800e4b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4b2:	4b15      	ldr	r3, [pc, #84]	@ (800e508 <vTaskStartScheduler+0xd4>)
 800e4b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4ba:	4b14      	ldr	r3, [pc, #80]	@ (800e50c <vTaskStartScheduler+0xd8>)
 800e4bc:	2201      	movs	r2, #1
 800e4be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4c0:	4b13      	ldr	r3, [pc, #76]	@ (800e510 <vTaskStartScheduler+0xdc>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4c6:	f001 f90b 	bl	800f6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4ca:	e00f      	b.n	800e4ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4d2:	d10b      	bne.n	800e4ec <vTaskStartScheduler+0xb8>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	60fb      	str	r3, [r7, #12]
}
 800e4e6:	bf00      	nop
 800e4e8:	bf00      	nop
 800e4ea:	e7fd      	b.n	800e4e8 <vTaskStartScheduler+0xb4>
}
 800e4ec:	bf00      	nop
 800e4ee:	3718      	adds	r7, #24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	08020b68 	.word	0x08020b68
 800e4f8:	0800eb95 	.word	0x0800eb95
 800e4fc:	240338d4 	.word	0x240338d4
 800e500:	240333dc 	.word	0x240333dc
 800e504:	240013a0 	.word	0x240013a0
 800e508:	240338d0 	.word	0x240338d0
 800e50c:	240338bc 	.word	0x240338bc
 800e510:	240338b4 	.word	0x240338b4

0800e514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e514:	b480      	push	{r7}
 800e516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e518:	4b04      	ldr	r3, [pc, #16]	@ (800e52c <vTaskSuspendAll+0x18>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3301      	adds	r3, #1
 800e51e:	4a03      	ldr	r2, [pc, #12]	@ (800e52c <vTaskSuspendAll+0x18>)
 800e520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e522:	bf00      	nop
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	240338d8 	.word	0x240338d8

0800e530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e536:	2300      	movs	r3, #0
 800e538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e53a:	2300      	movs	r3, #0
 800e53c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e53e:	4b42      	ldr	r3, [pc, #264]	@ (800e648 <xTaskResumeAll+0x118>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d10b      	bne.n	800e55e <xTaskResumeAll+0x2e>
	__asm volatile
 800e546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e54a:	f383 8811 	msr	BASEPRI, r3
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	603b      	str	r3, [r7, #0]
}
 800e558:	bf00      	nop
 800e55a:	bf00      	nop
 800e55c:	e7fd      	b.n	800e55a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e55e:	f001 f963 	bl	800f828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e562:	4b39      	ldr	r3, [pc, #228]	@ (800e648 <xTaskResumeAll+0x118>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3b01      	subs	r3, #1
 800e568:	4a37      	ldr	r2, [pc, #220]	@ (800e648 <xTaskResumeAll+0x118>)
 800e56a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e56c:	4b36      	ldr	r3, [pc, #216]	@ (800e648 <xTaskResumeAll+0x118>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d162      	bne.n	800e63a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e574:	4b35      	ldr	r3, [pc, #212]	@ (800e64c <xTaskResumeAll+0x11c>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d05e      	beq.n	800e63a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e57c:	e02f      	b.n	800e5de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e57e:	4b34      	ldr	r3, [pc, #208]	@ (800e650 <xTaskResumeAll+0x120>)
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3318      	adds	r3, #24
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe ffb2 	bl	800d4f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	3304      	adds	r3, #4
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe ffad 	bl	800d4f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e59e:	4b2d      	ldr	r3, [pc, #180]	@ (800e654 <xTaskResumeAll+0x124>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d903      	bls.n	800e5ae <xTaskResumeAll+0x7e>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5aa:	4a2a      	ldr	r2, [pc, #168]	@ (800e654 <xTaskResumeAll+0x124>)
 800e5ac:	6013      	str	r3, [r2, #0]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4413      	add	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4a27      	ldr	r2, [pc, #156]	@ (800e658 <xTaskResumeAll+0x128>)
 800e5bc:	441a      	add	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4610      	mov	r0, r2
 800e5c6:	f7fe ff38 	bl	800d43a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ce:	4b23      	ldr	r3, [pc, #140]	@ (800e65c <xTaskResumeAll+0x12c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d302      	bcc.n	800e5de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e5d8:	4b21      	ldr	r3, [pc, #132]	@ (800e660 <xTaskResumeAll+0x130>)
 800e5da:	2201      	movs	r2, #1
 800e5dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5de:	4b1c      	ldr	r3, [pc, #112]	@ (800e650 <xTaskResumeAll+0x120>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1cb      	bne.n	800e57e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5ec:	f000 fb8e 	bl	800ed0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e5f0:	4b1c      	ldr	r3, [pc, #112]	@ (800e664 <xTaskResumeAll+0x134>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d010      	beq.n	800e61e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5fc:	f000 f846 	bl	800e68c <xTaskIncrementTick>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e606:	4b16      	ldr	r3, [pc, #88]	@ (800e660 <xTaskResumeAll+0x130>)
 800e608:	2201      	movs	r2, #1
 800e60a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3b01      	subs	r3, #1
 800e610:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1f1      	bne.n	800e5fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e618:	4b12      	ldr	r3, [pc, #72]	@ (800e664 <xTaskResumeAll+0x134>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e61e:	4b10      	ldr	r3, [pc, #64]	@ (800e660 <xTaskResumeAll+0x130>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d009      	beq.n	800e63a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e626:	2301      	movs	r3, #1
 800e628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e62a:	4b0f      	ldr	r3, [pc, #60]	@ (800e668 <xTaskResumeAll+0x138>)
 800e62c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e63a:	f001 f927 	bl	800f88c <vPortExitCritical>

	return xAlreadyYielded;
 800e63e:	68bb      	ldr	r3, [r7, #8]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	240338d8 	.word	0x240338d8
 800e64c:	240338b0 	.word	0x240338b0
 800e650:	24033870 	.word	0x24033870
 800e654:	240338b8 	.word	0x240338b8
 800e658:	240333e0 	.word	0x240333e0
 800e65c:	240333dc 	.word	0x240333dc
 800e660:	240338c4 	.word	0x240338c4
 800e664:	240338c0 	.word	0x240338c0
 800e668:	e000ed04 	.word	0xe000ed04

0800e66c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e672:	4b05      	ldr	r3, [pc, #20]	@ (800e688 <xTaskGetTickCount+0x1c>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e678:	687b      	ldr	r3, [r7, #4]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	370c      	adds	r7, #12
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	240338b4 	.word	0x240338b4

0800e68c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e692:	2300      	movs	r3, #0
 800e694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e696:	4b4f      	ldr	r3, [pc, #316]	@ (800e7d4 <xTaskIncrementTick+0x148>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f040 8090 	bne.w	800e7c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6a0:	4b4d      	ldr	r3, [pc, #308]	@ (800e7d8 <xTaskIncrementTick+0x14c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6a8:	4a4b      	ldr	r2, [pc, #300]	@ (800e7d8 <xTaskIncrementTick+0x14c>)
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d121      	bne.n	800e6f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6b4:	4b49      	ldr	r3, [pc, #292]	@ (800e7dc <xTaskIncrementTick+0x150>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00b      	beq.n	800e6d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	603b      	str	r3, [r7, #0]
}
 800e6d0:	bf00      	nop
 800e6d2:	bf00      	nop
 800e6d4:	e7fd      	b.n	800e6d2 <xTaskIncrementTick+0x46>
 800e6d6:	4b41      	ldr	r3, [pc, #260]	@ (800e7dc <xTaskIncrementTick+0x150>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	4b40      	ldr	r3, [pc, #256]	@ (800e7e0 <xTaskIncrementTick+0x154>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a3e      	ldr	r2, [pc, #248]	@ (800e7dc <xTaskIncrementTick+0x150>)
 800e6e2:	6013      	str	r3, [r2, #0]
 800e6e4:	4a3e      	ldr	r2, [pc, #248]	@ (800e7e0 <xTaskIncrementTick+0x154>)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	4b3e      	ldr	r3, [pc, #248]	@ (800e7e4 <xTaskIncrementTick+0x158>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	4a3c      	ldr	r2, [pc, #240]	@ (800e7e4 <xTaskIncrementTick+0x158>)
 800e6f2:	6013      	str	r3, [r2, #0]
 800e6f4:	f000 fb0a 	bl	800ed0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6f8:	4b3b      	ldr	r3, [pc, #236]	@ (800e7e8 <xTaskIncrementTick+0x15c>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d349      	bcc.n	800e796 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e702:	4b36      	ldr	r3, [pc, #216]	@ (800e7dc <xTaskIncrementTick+0x150>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d104      	bne.n	800e716 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e70c:	4b36      	ldr	r3, [pc, #216]	@ (800e7e8 <xTaskIncrementTick+0x15c>)
 800e70e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e712:	601a      	str	r2, [r3, #0]
					break;
 800e714:	e03f      	b.n	800e796 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e716:	4b31      	ldr	r3, [pc, #196]	@ (800e7dc <xTaskIncrementTick+0x150>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	68db      	ldr	r3, [r3, #12]
 800e71e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d203      	bcs.n	800e736 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e72e:	4a2e      	ldr	r2, [pc, #184]	@ (800e7e8 <xTaskIncrementTick+0x15c>)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e734:	e02f      	b.n	800e796 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	3304      	adds	r3, #4
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe feda 	bl	800d4f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e744:	2b00      	cmp	r3, #0
 800e746:	d004      	beq.n	800e752 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	3318      	adds	r3, #24
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fe fed1 	bl	800d4f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e756:	4b25      	ldr	r3, [pc, #148]	@ (800e7ec <xTaskIncrementTick+0x160>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d903      	bls.n	800e766 <xTaskIncrementTick+0xda>
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e762:	4a22      	ldr	r2, [pc, #136]	@ (800e7ec <xTaskIncrementTick+0x160>)
 800e764:	6013      	str	r3, [r2, #0]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e76a:	4613      	mov	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	4413      	add	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4a1f      	ldr	r2, [pc, #124]	@ (800e7f0 <xTaskIncrementTick+0x164>)
 800e774:	441a      	add	r2, r3
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	3304      	adds	r3, #4
 800e77a:	4619      	mov	r1, r3
 800e77c:	4610      	mov	r0, r2
 800e77e:	f7fe fe5c 	bl	800d43a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e786:	4b1b      	ldr	r3, [pc, #108]	@ (800e7f4 <xTaskIncrementTick+0x168>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d3b8      	bcc.n	800e702 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e790:	2301      	movs	r3, #1
 800e792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e794:	e7b5      	b.n	800e702 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e796:	4b17      	ldr	r3, [pc, #92]	@ (800e7f4 <xTaskIncrementTick+0x168>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e79c:	4914      	ldr	r1, [pc, #80]	@ (800e7f0 <xTaskIncrementTick+0x164>)
 800e79e:	4613      	mov	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	440b      	add	r3, r1
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d901      	bls.n	800e7b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7b2:	4b11      	ldr	r3, [pc, #68]	@ (800e7f8 <xTaskIncrementTick+0x16c>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d007      	beq.n	800e7ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	617b      	str	r3, [r7, #20]
 800e7be:	e004      	b.n	800e7ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7c0:	4b0e      	ldr	r3, [pc, #56]	@ (800e7fc <xTaskIncrementTick+0x170>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	4a0d      	ldr	r2, [pc, #52]	@ (800e7fc <xTaskIncrementTick+0x170>)
 800e7c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7ca:	697b      	ldr	r3, [r7, #20]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	240338d8 	.word	0x240338d8
 800e7d8:	240338b4 	.word	0x240338b4
 800e7dc:	24033868 	.word	0x24033868
 800e7e0:	2403386c 	.word	0x2403386c
 800e7e4:	240338c8 	.word	0x240338c8
 800e7e8:	240338d0 	.word	0x240338d0
 800e7ec:	240338b8 	.word	0x240338b8
 800e7f0:	240333e0 	.word	0x240333e0
 800e7f4:	240333dc 	.word	0x240333dc
 800e7f8:	240338c4 	.word	0x240338c4
 800e7fc:	240338c0 	.word	0x240338c0

0800e800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e806:	4b2b      	ldr	r3, [pc, #172]	@ (800e8b4 <vTaskSwitchContext+0xb4>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e80e:	4b2a      	ldr	r3, [pc, #168]	@ (800e8b8 <vTaskSwitchContext+0xb8>)
 800e810:	2201      	movs	r2, #1
 800e812:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e814:	e047      	b.n	800e8a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e816:	4b28      	ldr	r3, [pc, #160]	@ (800e8b8 <vTaskSwitchContext+0xb8>)
 800e818:	2200      	movs	r2, #0
 800e81a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e81c:	4b27      	ldr	r3, [pc, #156]	@ (800e8bc <vTaskSwitchContext+0xbc>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	60fb      	str	r3, [r7, #12]
 800e822:	e011      	b.n	800e848 <vTaskSwitchContext+0x48>
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d10b      	bne.n	800e842 <vTaskSwitchContext+0x42>
	__asm volatile
 800e82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82e:	f383 8811 	msr	BASEPRI, r3
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	607b      	str	r3, [r7, #4]
}
 800e83c:	bf00      	nop
 800e83e:	bf00      	nop
 800e840:	e7fd      	b.n	800e83e <vTaskSwitchContext+0x3e>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	3b01      	subs	r3, #1
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	491d      	ldr	r1, [pc, #116]	@ (800e8c0 <vTaskSwitchContext+0xc0>)
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	4613      	mov	r3, r2
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	4413      	add	r3, r2
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	440b      	add	r3, r1
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d0e3      	beq.n	800e824 <vTaskSwitchContext+0x24>
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	4613      	mov	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4413      	add	r3, r2
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	4a16      	ldr	r2, [pc, #88]	@ (800e8c0 <vTaskSwitchContext+0xc0>)
 800e868:	4413      	add	r3, r2
 800e86a:	60bb      	str	r3, [r7, #8]
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	605a      	str	r2, [r3, #4]
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	3308      	adds	r3, #8
 800e87e:	429a      	cmp	r2, r3
 800e880:	d104      	bne.n	800e88c <vTaskSwitchContext+0x8c>
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	685a      	ldr	r2, [r3, #4]
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	605a      	str	r2, [r3, #4]
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	4a0c      	ldr	r2, [pc, #48]	@ (800e8c4 <vTaskSwitchContext+0xc4>)
 800e894:	6013      	str	r3, [r2, #0]
 800e896:	4a09      	ldr	r2, [pc, #36]	@ (800e8bc <vTaskSwitchContext+0xbc>)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e89c:	4b09      	ldr	r3, [pc, #36]	@ (800e8c4 <vTaskSwitchContext+0xc4>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3354      	adds	r3, #84	@ 0x54
 800e8a2:	4a09      	ldr	r2, [pc, #36]	@ (800e8c8 <vTaskSwitchContext+0xc8>)
 800e8a4:	6013      	str	r3, [r2, #0]
}
 800e8a6:	bf00      	nop
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	240338d8 	.word	0x240338d8
 800e8b8:	240338c4 	.word	0x240338c4
 800e8bc:	240338b8 	.word	0x240338b8
 800e8c0:	240333e0 	.word	0x240333e0
 800e8c4:	240333dc 	.word	0x240333dc
 800e8c8:	240013a0 	.word	0x240013a0

0800e8cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d10b      	bne.n	800e8f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	60fb      	str	r3, [r7, #12]
}
 800e8ee:	bf00      	nop
 800e8f0:	bf00      	nop
 800e8f2:	e7fd      	b.n	800e8f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8f4:	4b07      	ldr	r3, [pc, #28]	@ (800e914 <vTaskPlaceOnEventList+0x48>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3318      	adds	r3, #24
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7fe fdc0 	bl	800d482 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e902:	2101      	movs	r1, #1
 800e904:	6838      	ldr	r0, [r7, #0]
 800e906:	f000 faaf 	bl	800ee68 <prvAddCurrentTaskToDelayedList>
}
 800e90a:	bf00      	nop
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	240333dc 	.word	0x240333dc

0800e918 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d10b      	bne.n	800e942 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	617b      	str	r3, [r7, #20]
}
 800e93c:	bf00      	nop
 800e93e:	bf00      	nop
 800e940:	e7fd      	b.n	800e93e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e942:	4b0a      	ldr	r3, [pc, #40]	@ (800e96c <vTaskPlaceOnEventListRestricted+0x54>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	3318      	adds	r3, #24
 800e948:	4619      	mov	r1, r3
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f7fe fd75 	bl	800d43a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e95a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e95c:	6879      	ldr	r1, [r7, #4]
 800e95e:	68b8      	ldr	r0, [r7, #8]
 800e960:	f000 fa82 	bl	800ee68 <prvAddCurrentTaskToDelayedList>
	}
 800e964:	bf00      	nop
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	240333dc 	.word	0x240333dc

0800e970 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10b      	bne.n	800e99e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e98a:	f383 8811 	msr	BASEPRI, r3
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f3bf 8f4f 	dsb	sy
 800e996:	60fb      	str	r3, [r7, #12]
}
 800e998:	bf00      	nop
 800e99a:	bf00      	nop
 800e99c:	e7fd      	b.n	800e99a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	3318      	adds	r3, #24
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fe fda6 	bl	800d4f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9a8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea20 <xTaskRemoveFromEventList+0xb0>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d11d      	bne.n	800e9ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe fd9d 	bl	800d4f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9be:	4b19      	ldr	r3, [pc, #100]	@ (800ea24 <xTaskRemoveFromEventList+0xb4>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d903      	bls.n	800e9ce <xTaskRemoveFromEventList+0x5e>
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9ca:	4a16      	ldr	r2, [pc, #88]	@ (800ea24 <xTaskRemoveFromEventList+0xb4>)
 800e9cc:	6013      	str	r3, [r2, #0]
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4a13      	ldr	r2, [pc, #76]	@ (800ea28 <xTaskRemoveFromEventList+0xb8>)
 800e9dc:	441a      	add	r2, r3
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	3304      	adds	r3, #4
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f7fe fd28 	bl	800d43a <vListInsertEnd>
 800e9ea:	e005      	b.n	800e9f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	3318      	adds	r3, #24
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	480e      	ldr	r0, [pc, #56]	@ (800ea2c <xTaskRemoveFromEventList+0xbc>)
 800e9f4:	f7fe fd21 	bl	800d43a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fc:	4b0c      	ldr	r3, [pc, #48]	@ (800ea30 <xTaskRemoveFromEventList+0xc0>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d905      	bls.n	800ea12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea06:	2301      	movs	r3, #1
 800ea08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ea34 <xTaskRemoveFromEventList+0xc4>)
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	e001      	b.n	800ea16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ea12:	2300      	movs	r3, #0
 800ea14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea16:	697b      	ldr	r3, [r7, #20]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	240338d8 	.word	0x240338d8
 800ea24:	240338b8 	.word	0x240338b8
 800ea28:	240333e0 	.word	0x240333e0
 800ea2c:	24033870 	.word	0x24033870
 800ea30:	240333dc 	.word	0x240333dc
 800ea34:	240338c4 	.word	0x240338c4

0800ea38 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d10b      	bne.n	800ea5e <vTaskSetTimeOutState+0x26>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	60fb      	str	r3, [r7, #12]
}
 800ea58:	bf00      	nop
 800ea5a:	bf00      	nop
 800ea5c:	e7fd      	b.n	800ea5a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800ea5e:	f000 fee3 	bl	800f828 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea62:	4b07      	ldr	r3, [pc, #28]	@ (800ea80 <vTaskSetTimeOutState+0x48>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ea6a:	4b06      	ldr	r3, [pc, #24]	@ (800ea84 <vTaskSetTimeOutState+0x4c>)
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ea72:	f000 ff0b 	bl	800f88c <vPortExitCritical>
}
 800ea76:	bf00      	nop
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	240338c8 	.word	0x240338c8
 800ea84:	240338b4 	.word	0x240338b4

0800ea88 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea90:	4b06      	ldr	r3, [pc, #24]	@ (800eaac <vTaskInternalSetTimeOutState+0x24>)
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea98:	4b05      	ldr	r3, [pc, #20]	@ (800eab0 <vTaskInternalSetTimeOutState+0x28>)
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	605a      	str	r2, [r3, #4]
}
 800eaa0:	bf00      	nop
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	240338c8 	.word	0x240338c8
 800eab0:	240338b4 	.word	0x240338b4

0800eab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d10b      	bne.n	800eadc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800eac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac8:	f383 8811 	msr	BASEPRI, r3
 800eacc:	f3bf 8f6f 	isb	sy
 800ead0:	f3bf 8f4f 	dsb	sy
 800ead4:	613b      	str	r3, [r7, #16]
}
 800ead6:	bf00      	nop
 800ead8:	bf00      	nop
 800eada:	e7fd      	b.n	800ead8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10b      	bne.n	800eafa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	60fb      	str	r3, [r7, #12]
}
 800eaf4:	bf00      	nop
 800eaf6:	bf00      	nop
 800eaf8:	e7fd      	b.n	800eaf6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eafa:	f000 fe95 	bl	800f828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eafe:	4b1d      	ldr	r3, [pc, #116]	@ (800eb74 <xTaskCheckForTimeOut+0xc0>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	69ba      	ldr	r2, [r7, #24]
 800eb0a:	1ad3      	subs	r3, r2, r3
 800eb0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb16:	d102      	bne.n	800eb1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	61fb      	str	r3, [r7, #28]
 800eb1c:	e023      	b.n	800eb66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	4b15      	ldr	r3, [pc, #84]	@ (800eb78 <xTaskCheckForTimeOut+0xc4>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d007      	beq.n	800eb3a <xTaskCheckForTimeOut+0x86>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	69ba      	ldr	r2, [r7, #24]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d302      	bcc.n	800eb3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb34:	2301      	movs	r3, #1
 800eb36:	61fb      	str	r3, [r7, #28]
 800eb38:	e015      	b.n	800eb66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d20b      	bcs.n	800eb5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	1ad2      	subs	r2, r2, r3
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff ff99 	bl	800ea88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb56:	2300      	movs	r3, #0
 800eb58:	61fb      	str	r3, [r7, #28]
 800eb5a:	e004      	b.n	800eb66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb62:	2301      	movs	r3, #1
 800eb64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb66:	f000 fe91 	bl	800f88c <vPortExitCritical>

	return xReturn;
 800eb6a:	69fb      	ldr	r3, [r7, #28]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3720      	adds	r7, #32
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	240338b4 	.word	0x240338b4
 800eb78:	240338c8 	.word	0x240338c8

0800eb7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb80:	4b03      	ldr	r3, [pc, #12]	@ (800eb90 <vTaskMissedYield+0x14>)
 800eb82:	2201      	movs	r2, #1
 800eb84:	601a      	str	r2, [r3, #0]
}
 800eb86:	bf00      	nop
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	240338c4 	.word	0x240338c4

0800eb94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb9c:	f000 f852 	bl	800ec44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eba0:	4b06      	ldr	r3, [pc, #24]	@ (800ebbc <prvIdleTask+0x28>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d9f9      	bls.n	800eb9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800eba8:	4b05      	ldr	r3, [pc, #20]	@ (800ebc0 <prvIdleTask+0x2c>)
 800ebaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebae:	601a      	str	r2, [r3, #0]
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ebb8:	e7f0      	b.n	800eb9c <prvIdleTask+0x8>
 800ebba:	bf00      	nop
 800ebbc:	240333e0 	.word	0x240333e0
 800ebc0:	e000ed04 	.word	0xe000ed04

0800ebc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebca:	2300      	movs	r3, #0
 800ebcc:	607b      	str	r3, [r7, #4]
 800ebce:	e00c      	b.n	800ebea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4413      	add	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4a12      	ldr	r2, [pc, #72]	@ (800ec24 <prvInitialiseTaskLists+0x60>)
 800ebdc:	4413      	add	r3, r2
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fe fbfe 	bl	800d3e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	607b      	str	r3, [r7, #4]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b37      	cmp	r3, #55	@ 0x37
 800ebee:	d9ef      	bls.n	800ebd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebf0:	480d      	ldr	r0, [pc, #52]	@ (800ec28 <prvInitialiseTaskLists+0x64>)
 800ebf2:	f7fe fbf5 	bl	800d3e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebf6:	480d      	ldr	r0, [pc, #52]	@ (800ec2c <prvInitialiseTaskLists+0x68>)
 800ebf8:	f7fe fbf2 	bl	800d3e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ebfc:	480c      	ldr	r0, [pc, #48]	@ (800ec30 <prvInitialiseTaskLists+0x6c>)
 800ebfe:	f7fe fbef 	bl	800d3e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec02:	480c      	ldr	r0, [pc, #48]	@ (800ec34 <prvInitialiseTaskLists+0x70>)
 800ec04:	f7fe fbec 	bl	800d3e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec08:	480b      	ldr	r0, [pc, #44]	@ (800ec38 <prvInitialiseTaskLists+0x74>)
 800ec0a:	f7fe fbe9 	bl	800d3e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec3c <prvInitialiseTaskLists+0x78>)
 800ec10:	4a05      	ldr	r2, [pc, #20]	@ (800ec28 <prvInitialiseTaskLists+0x64>)
 800ec12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec14:	4b0a      	ldr	r3, [pc, #40]	@ (800ec40 <prvInitialiseTaskLists+0x7c>)
 800ec16:	4a05      	ldr	r2, [pc, #20]	@ (800ec2c <prvInitialiseTaskLists+0x68>)
 800ec18:	601a      	str	r2, [r3, #0]
}
 800ec1a:	bf00      	nop
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	240333e0 	.word	0x240333e0
 800ec28:	24033840 	.word	0x24033840
 800ec2c:	24033854 	.word	0x24033854
 800ec30:	24033870 	.word	0x24033870
 800ec34:	24033884 	.word	0x24033884
 800ec38:	2403389c 	.word	0x2403389c
 800ec3c:	24033868 	.word	0x24033868
 800ec40:	2403386c 	.word	0x2403386c

0800ec44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec4a:	e019      	b.n	800ec80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec4c:	f000 fdec 	bl	800f828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec50:	4b10      	ldr	r3, [pc, #64]	@ (800ec94 <prvCheckTasksWaitingTermination+0x50>)
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3304      	adds	r3, #4
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe fc49 	bl	800d4f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec62:	4b0d      	ldr	r3, [pc, #52]	@ (800ec98 <prvCheckTasksWaitingTermination+0x54>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	3b01      	subs	r3, #1
 800ec68:	4a0b      	ldr	r2, [pc, #44]	@ (800ec98 <prvCheckTasksWaitingTermination+0x54>)
 800ec6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ec9c <prvCheckTasksWaitingTermination+0x58>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	3b01      	subs	r3, #1
 800ec72:	4a0a      	ldr	r2, [pc, #40]	@ (800ec9c <prvCheckTasksWaitingTermination+0x58>)
 800ec74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec76:	f000 fe09 	bl	800f88c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 f810 	bl	800eca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec80:	4b06      	ldr	r3, [pc, #24]	@ (800ec9c <prvCheckTasksWaitingTermination+0x58>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d1e1      	bne.n	800ec4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec88:	bf00      	nop
 800ec8a:	bf00      	nop
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	24033884 	.word	0x24033884
 800ec98:	240338b0 	.word	0x240338b0
 800ec9c:	24033898 	.word	0x24033898

0800eca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	3354      	adds	r3, #84	@ 0x54
 800ecac:	4618      	mov	r0, r3
 800ecae:	f010 ff0f 	bl	801fad0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d108      	bne.n	800ecce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 ffa1 	bl	800fc08 <vPortFree>
				vPortFree( pxTCB );
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 ff9e 	bl	800fc08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eccc:	e019      	b.n	800ed02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d103      	bne.n	800ece0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 ff95 	bl	800fc08 <vPortFree>
	}
 800ecde:	e010      	b.n	800ed02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d00b      	beq.n	800ed02 <prvDeleteTCB+0x62>
	__asm volatile
 800ecea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecee:	f383 8811 	msr	BASEPRI, r3
 800ecf2:	f3bf 8f6f 	isb	sy
 800ecf6:	f3bf 8f4f 	dsb	sy
 800ecfa:	60fb      	str	r3, [r7, #12]
}
 800ecfc:	bf00      	nop
 800ecfe:	bf00      	nop
 800ed00:	e7fd      	b.n	800ecfe <prvDeleteTCB+0x5e>
	}
 800ed02:	bf00      	nop
 800ed04:	3710      	adds	r7, #16
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
	...

0800ed0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed12:	4b0c      	ldr	r3, [pc, #48]	@ (800ed44 <prvResetNextTaskUnblockTime+0x38>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d104      	bne.n	800ed26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed48 <prvResetNextTaskUnblockTime+0x3c>)
 800ed1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed24:	e008      	b.n	800ed38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed26:	4b07      	ldr	r3, [pc, #28]	@ (800ed44 <prvResetNextTaskUnblockTime+0x38>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4a04      	ldr	r2, [pc, #16]	@ (800ed48 <prvResetNextTaskUnblockTime+0x3c>)
 800ed36:	6013      	str	r3, [r2, #0]
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr
 800ed44:	24033868 	.word	0x24033868
 800ed48:	240338d0 	.word	0x240338d0

0800ed4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed52:	4b0b      	ldr	r3, [pc, #44]	@ (800ed80 <xTaskGetSchedulerState+0x34>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d102      	bne.n	800ed60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	607b      	str	r3, [r7, #4]
 800ed5e:	e008      	b.n	800ed72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed60:	4b08      	ldr	r3, [pc, #32]	@ (800ed84 <xTaskGetSchedulerState+0x38>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d102      	bne.n	800ed6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed68:	2302      	movs	r3, #2
 800ed6a:	607b      	str	r3, [r7, #4]
 800ed6c:	e001      	b.n	800ed72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed72:	687b      	ldr	r3, [r7, #4]
	}
 800ed74:	4618      	mov	r0, r3
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	240338bc 	.word	0x240338bc
 800ed84:	240338d8 	.word	0x240338d8

0800ed88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d058      	beq.n	800ee50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ee5c <xTaskPriorityDisinherit+0xd4>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	693a      	ldr	r2, [r7, #16]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d00b      	beq.n	800edc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	60fb      	str	r3, [r7, #12]
}
 800edba:	bf00      	nop
 800edbc:	bf00      	nop
 800edbe:	e7fd      	b.n	800edbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10b      	bne.n	800ede0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800edc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	60bb      	str	r3, [r7, #8]
}
 800edda:	bf00      	nop
 800eddc:	bf00      	nop
 800edde:	e7fd      	b.n	800eddc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede4:	1e5a      	subs	r2, r3, #1
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d02c      	beq.n	800ee50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d128      	bne.n	800ee50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	3304      	adds	r3, #4
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fe fb76 	bl	800d4f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee20:	4b0f      	ldr	r3, [pc, #60]	@ (800ee60 <xTaskPriorityDisinherit+0xd8>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d903      	bls.n	800ee30 <xTaskPriorityDisinherit+0xa8>
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ee60 <xTaskPriorityDisinherit+0xd8>)
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee34:	4613      	mov	r3, r2
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4a09      	ldr	r2, [pc, #36]	@ (800ee64 <xTaskPriorityDisinherit+0xdc>)
 800ee3e:	441a      	add	r2, r3
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	3304      	adds	r3, #4
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f7fe faf7 	bl	800d43a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee50:	697b      	ldr	r3, [r7, #20]
	}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3718      	adds	r7, #24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	240333dc 	.word	0x240333dc
 800ee60:	240338b8 	.word	0x240338b8
 800ee64:	240333e0 	.word	0x240333e0

0800ee68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee72:	4b21      	ldr	r3, [pc, #132]	@ (800eef8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee78:	4b20      	ldr	r3, [pc, #128]	@ (800eefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fe fb38 	bl	800d4f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee8a:	d10a      	bne.n	800eea2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d007      	beq.n	800eea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee92:	4b1a      	ldr	r3, [pc, #104]	@ (800eefc <prvAddCurrentTaskToDelayedList+0x94>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	3304      	adds	r3, #4
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4819      	ldr	r0, [pc, #100]	@ (800ef00 <prvAddCurrentTaskToDelayedList+0x98>)
 800ee9c:	f7fe facd 	bl	800d43a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eea0:	e026      	b.n	800eef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4413      	add	r3, r2
 800eea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eeaa:	4b14      	ldr	r3, [pc, #80]	@ (800eefc <prvAddCurrentTaskToDelayedList+0x94>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d209      	bcs.n	800eece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eeba:	4b12      	ldr	r3, [pc, #72]	@ (800ef04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	4b0f      	ldr	r3, [pc, #60]	@ (800eefc <prvAddCurrentTaskToDelayedList+0x94>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3304      	adds	r3, #4
 800eec4:	4619      	mov	r1, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	f7fe fadb 	bl	800d482 <vListInsert>
}
 800eecc:	e010      	b.n	800eef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eece:	4b0e      	ldr	r3, [pc, #56]	@ (800ef08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	4b0a      	ldr	r3, [pc, #40]	@ (800eefc <prvAddCurrentTaskToDelayedList+0x94>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	3304      	adds	r3, #4
 800eed8:	4619      	mov	r1, r3
 800eeda:	4610      	mov	r0, r2
 800eedc:	f7fe fad1 	bl	800d482 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eee0:	4b0a      	ldr	r3, [pc, #40]	@ (800ef0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d202      	bcs.n	800eef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800eeea:	4a08      	ldr	r2, [pc, #32]	@ (800ef0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	6013      	str	r3, [r2, #0]
}
 800eef0:	bf00      	nop
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	240338b4 	.word	0x240338b4
 800eefc:	240333dc 	.word	0x240333dc
 800ef00:	2403389c 	.word	0x2403389c
 800ef04:	2403386c 	.word	0x2403386c
 800ef08:	24033868 	.word	0x24033868
 800ef0c:	240338d0 	.word	0x240338d0

0800ef10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08a      	sub	sp, #40	@ 0x28
 800ef14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ef1a:	f000 fb13 	bl	800f544 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ef94 <xTimerCreateTimerTask+0x84>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d021      	beq.n	800ef6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef2e:	1d3a      	adds	r2, r7, #4
 800ef30:	f107 0108 	add.w	r1, r7, #8
 800ef34:	f107 030c 	add.w	r3, r7, #12
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fe fa37 	bl	800d3ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef3e:	6879      	ldr	r1, [r7, #4]
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	9202      	str	r2, [sp, #8]
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	2302      	movs	r3, #2
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	460a      	mov	r2, r1
 800ef50:	4911      	ldr	r1, [pc, #68]	@ (800ef98 <xTimerCreateTimerTask+0x88>)
 800ef52:	4812      	ldr	r0, [pc, #72]	@ (800ef9c <xTimerCreateTimerTask+0x8c>)
 800ef54:	f7ff f87a 	bl	800e04c <xTaskCreateStatic>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	4a11      	ldr	r2, [pc, #68]	@ (800efa0 <xTimerCreateTimerTask+0x90>)
 800ef5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef5e:	4b10      	ldr	r3, [pc, #64]	@ (800efa0 <xTimerCreateTimerTask+0x90>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef66:	2301      	movs	r3, #1
 800ef68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10b      	bne.n	800ef88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	613b      	str	r3, [r7, #16]
}
 800ef82:	bf00      	nop
 800ef84:	bf00      	nop
 800ef86:	e7fd      	b.n	800ef84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef88:	697b      	ldr	r3, [r7, #20]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3718      	adds	r7, #24
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	2403390c 	.word	0x2403390c
 800ef98:	08020b70 	.word	0x08020b70
 800ef9c:	0800f0dd 	.word	0x0800f0dd
 800efa0:	24033910 	.word	0x24033910

0800efa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b08a      	sub	sp, #40	@ 0x28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
 800efb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800efb2:	2300      	movs	r3, #0
 800efb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10b      	bne.n	800efd4 <xTimerGenericCommand+0x30>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	623b      	str	r3, [r7, #32]
}
 800efce:	bf00      	nop
 800efd0:	bf00      	nop
 800efd2:	e7fd      	b.n	800efd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800efd4:	4b19      	ldr	r3, [pc, #100]	@ (800f03c <xTimerGenericCommand+0x98>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d02a      	beq.n	800f032 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	2b05      	cmp	r3, #5
 800efec:	dc18      	bgt.n	800f020 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efee:	f7ff fead 	bl	800ed4c <xTaskGetSchedulerState>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d109      	bne.n	800f00c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eff8:	4b10      	ldr	r3, [pc, #64]	@ (800f03c <xTimerGenericCommand+0x98>)
 800effa:	6818      	ldr	r0, [r3, #0]
 800effc:	f107 0110 	add.w	r1, r7, #16
 800f000:	2300      	movs	r3, #0
 800f002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f004:	f7fe fc32 	bl	800d86c <xQueueGenericSend>
 800f008:	6278      	str	r0, [r7, #36]	@ 0x24
 800f00a:	e012      	b.n	800f032 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f00c:	4b0b      	ldr	r3, [pc, #44]	@ (800f03c <xTimerGenericCommand+0x98>)
 800f00e:	6818      	ldr	r0, [r3, #0]
 800f010:	f107 0110 	add.w	r1, r7, #16
 800f014:	2300      	movs	r3, #0
 800f016:	2200      	movs	r2, #0
 800f018:	f7fe fc28 	bl	800d86c <xQueueGenericSend>
 800f01c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f01e:	e008      	b.n	800f032 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f020:	4b06      	ldr	r3, [pc, #24]	@ (800f03c <xTimerGenericCommand+0x98>)
 800f022:	6818      	ldr	r0, [r3, #0]
 800f024:	f107 0110 	add.w	r1, r7, #16
 800f028:	2300      	movs	r3, #0
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	f7fe fd20 	bl	800da70 <xQueueGenericSendFromISR>
 800f030:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f034:	4618      	mov	r0, r3
 800f036:	3728      	adds	r7, #40	@ 0x28
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	2403390c 	.word	0x2403390c

0800f040 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b088      	sub	sp, #32
 800f044:	af02      	add	r7, sp, #8
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f04a:	4b23      	ldr	r3, [pc, #140]	@ (800f0d8 <prvProcessExpiredTimer+0x98>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	3304      	adds	r3, #4
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe fa4b 	bl	800d4f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f064:	f003 0304 	and.w	r3, r3, #4
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d023      	beq.n	800f0b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	699a      	ldr	r2, [r3, #24]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	18d1      	adds	r1, r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	683a      	ldr	r2, [r7, #0]
 800f078:	6978      	ldr	r0, [r7, #20]
 800f07a:	f000 f8d5 	bl	800f228 <prvInsertTimerInActiveList>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d020      	beq.n	800f0c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f084:	2300      	movs	r3, #0
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	2300      	movs	r3, #0
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	2100      	movs	r1, #0
 800f08e:	6978      	ldr	r0, [r7, #20]
 800f090:	f7ff ff88 	bl	800efa4 <xTimerGenericCommand>
 800f094:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d114      	bne.n	800f0c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a0:	f383 8811 	msr	BASEPRI, r3
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	60fb      	str	r3, [r7, #12]
}
 800f0ae:	bf00      	nop
 800f0b0:	bf00      	nop
 800f0b2:	e7fd      	b.n	800f0b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0ba:	f023 0301 	bic.w	r3, r3, #1
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	6a1b      	ldr	r3, [r3, #32]
 800f0ca:	6978      	ldr	r0, [r7, #20]
 800f0cc:	4798      	blx	r3
}
 800f0ce:	bf00      	nop
 800f0d0:	3718      	adds	r7, #24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	24033904 	.word	0x24033904

0800f0dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0e4:	f107 0308 	add.w	r3, r7, #8
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 f859 	bl	800f1a0 <prvGetNextExpireTime>
 800f0ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f000 f805 	bl	800f104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0fa:	f000 f8d7 	bl	800f2ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0fe:	bf00      	nop
 800f100:	e7f0      	b.n	800f0e4 <prvTimerTask+0x8>
	...

0800f104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f10e:	f7ff fa01 	bl	800e514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f112:	f107 0308 	add.w	r3, r7, #8
 800f116:	4618      	mov	r0, r3
 800f118:	f000 f866 	bl	800f1e8 <prvSampleTimeNow>
 800f11c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d130      	bne.n	800f186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10a      	bne.n	800f140 <prvProcessTimerOrBlockTask+0x3c>
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d806      	bhi.n	800f140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f132:	f7ff f9fd 	bl	800e530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f136:	68f9      	ldr	r1, [r7, #12]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7ff ff81 	bl	800f040 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f13e:	e024      	b.n	800f18a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d008      	beq.n	800f158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f146:	4b13      	ldr	r3, [pc, #76]	@ (800f194 <prvProcessTimerOrBlockTask+0x90>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <prvProcessTimerOrBlockTask+0x50>
 800f150:	2301      	movs	r3, #1
 800f152:	e000      	b.n	800f156 <prvProcessTimerOrBlockTask+0x52>
 800f154:	2300      	movs	r3, #0
 800f156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f158:	4b0f      	ldr	r3, [pc, #60]	@ (800f198 <prvProcessTimerOrBlockTask+0x94>)
 800f15a:	6818      	ldr	r0, [r3, #0]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	683a      	ldr	r2, [r7, #0]
 800f164:	4619      	mov	r1, r3
 800f166:	f7fe ff3d 	bl	800dfe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f16a:	f7ff f9e1 	bl	800e530 <xTaskResumeAll>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d10a      	bne.n	800f18a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f174:	4b09      	ldr	r3, [pc, #36]	@ (800f19c <prvProcessTimerOrBlockTask+0x98>)
 800f176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	f3bf 8f6f 	isb	sy
}
 800f184:	e001      	b.n	800f18a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f186:	f7ff f9d3 	bl	800e530 <xTaskResumeAll>
}
 800f18a:	bf00      	nop
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	24033908 	.word	0x24033908
 800f198:	2403390c 	.word	0x2403390c
 800f19c:	e000ed04 	.word	0xe000ed04

0800f1a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f1e4 <prvGetNextExpireTime+0x44>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <prvGetNextExpireTime+0x16>
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	e000      	b.n	800f1b8 <prvGetNextExpireTime+0x18>
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d105      	bne.n	800f1d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1c4:	4b07      	ldr	r3, [pc, #28]	@ (800f1e4 <prvGetNextExpireTime+0x44>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	60fb      	str	r3, [r7, #12]
 800f1ce:	e001      	b.n	800f1d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	24033904 	.word	0x24033904

0800f1e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f1f0:	f7ff fa3c 	bl	800e66c <xTaskGetTickCount>
 800f1f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f224 <prvSampleTimeNow+0x3c>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d205      	bcs.n	800f20c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f200:	f000 f93a 	bl	800f478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	e002      	b.n	800f212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f212:	4a04      	ldr	r2, [pc, #16]	@ (800f224 <prvSampleTimeNow+0x3c>)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f218:	68fb      	ldr	r3, [r7, #12]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	24033914 	.word	0x24033914

0800f228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b086      	sub	sp, #24
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
 800f234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f236:	2300      	movs	r3, #0
 800f238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	68ba      	ldr	r2, [r7, #8]
 800f23e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d812      	bhi.n	800f274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	1ad2      	subs	r2, r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d302      	bcc.n	800f262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f25c:	2301      	movs	r3, #1
 800f25e:	617b      	str	r3, [r7, #20]
 800f260:	e01b      	b.n	800f29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f262:	4b10      	ldr	r3, [pc, #64]	@ (800f2a4 <prvInsertTimerInActiveList+0x7c>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3304      	adds	r3, #4
 800f26a:	4619      	mov	r1, r3
 800f26c:	4610      	mov	r0, r2
 800f26e:	f7fe f908 	bl	800d482 <vListInsert>
 800f272:	e012      	b.n	800f29a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d206      	bcs.n	800f28a <prvInsertTimerInActiveList+0x62>
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	429a      	cmp	r2, r3
 800f282:	d302      	bcc.n	800f28a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f284:	2301      	movs	r3, #1
 800f286:	617b      	str	r3, [r7, #20]
 800f288:	e007      	b.n	800f29a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f28a:	4b07      	ldr	r3, [pc, #28]	@ (800f2a8 <prvInsertTimerInActiveList+0x80>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	3304      	adds	r3, #4
 800f292:	4619      	mov	r1, r3
 800f294:	4610      	mov	r0, r2
 800f296:	f7fe f8f4 	bl	800d482 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f29a:	697b      	ldr	r3, [r7, #20]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3718      	adds	r7, #24
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	24033908 	.word	0x24033908
 800f2a8:	24033904 	.word	0x24033904

0800f2ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b08e      	sub	sp, #56	@ 0x38
 800f2b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2b2:	e0ce      	b.n	800f452 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	da19      	bge.n	800f2ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f2ba:	1d3b      	adds	r3, r7, #4
 800f2bc:	3304      	adds	r3, #4
 800f2be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d10b      	bne.n	800f2de <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ca:	f383 8811 	msr	BASEPRI, r3
 800f2ce:	f3bf 8f6f 	isb	sy
 800f2d2:	f3bf 8f4f 	dsb	sy
 800f2d6:	61fb      	str	r3, [r7, #28]
}
 800f2d8:	bf00      	nop
 800f2da:	bf00      	nop
 800f2dc:	e7fd      	b.n	800f2da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2e4:	6850      	ldr	r0, [r2, #4]
 800f2e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2e8:	6892      	ldr	r2, [r2, #8]
 800f2ea:	4611      	mov	r1, r2
 800f2ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f2c0 80ae 	blt.w	800f452 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d004      	beq.n	800f30c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f304:	3304      	adds	r3, #4
 800f306:	4618      	mov	r0, r3
 800f308:	f7fe f8f4 	bl	800d4f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f30c:	463b      	mov	r3, r7
 800f30e:	4618      	mov	r0, r3
 800f310:	f7ff ff6a 	bl	800f1e8 <prvSampleTimeNow>
 800f314:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2b09      	cmp	r3, #9
 800f31a:	f200 8097 	bhi.w	800f44c <prvProcessReceivedCommands+0x1a0>
 800f31e:	a201      	add	r2, pc, #4	@ (adr r2, 800f324 <prvProcessReceivedCommands+0x78>)
 800f320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f324:	0800f34d 	.word	0x0800f34d
 800f328:	0800f34d 	.word	0x0800f34d
 800f32c:	0800f34d 	.word	0x0800f34d
 800f330:	0800f3c3 	.word	0x0800f3c3
 800f334:	0800f3d7 	.word	0x0800f3d7
 800f338:	0800f423 	.word	0x0800f423
 800f33c:	0800f34d 	.word	0x0800f34d
 800f340:	0800f34d 	.word	0x0800f34d
 800f344:	0800f3c3 	.word	0x0800f3c3
 800f348:	0800f3d7 	.word	0x0800f3d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f34e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f352:	f043 0301 	orr.w	r3, r3, #1
 800f356:	b2da      	uxtb	r2, r3
 800f358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	18d1      	adds	r1, r2, r3
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f36a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f36c:	f7ff ff5c 	bl	800f228 <prvInsertTimerInActiveList>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d06c      	beq.n	800f450 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f378:	6a1b      	ldr	r3, [r3, #32]
 800f37a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f37c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f380:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f384:	f003 0304 	and.w	r3, r3, #4
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d061      	beq.n	800f450 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f390:	699b      	ldr	r3, [r3, #24]
 800f392:	441a      	add	r2, r3
 800f394:	2300      	movs	r3, #0
 800f396:	9300      	str	r3, [sp, #0]
 800f398:	2300      	movs	r3, #0
 800f39a:	2100      	movs	r1, #0
 800f39c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f39e:	f7ff fe01 	bl	800efa4 <xTimerGenericCommand>
 800f3a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f3a4:	6a3b      	ldr	r3, [r7, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d152      	bne.n	800f450 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ae:	f383 8811 	msr	BASEPRI, r3
 800f3b2:	f3bf 8f6f 	isb	sy
 800f3b6:	f3bf 8f4f 	dsb	sy
 800f3ba:	61bb      	str	r3, [r7, #24]
}
 800f3bc:	bf00      	nop
 800f3be:	bf00      	nop
 800f3c0:	e7fd      	b.n	800f3be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3c8:	f023 0301 	bic.w	r3, r3, #1
 800f3cc:	b2da      	uxtb	r2, r3
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f3d4:	e03d      	b.n	800f452 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3dc:	f043 0301 	orr.w	r3, r3, #1
 800f3e0:	b2da      	uxtb	r2, r3
 800f3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f0:	699b      	ldr	r3, [r3, #24]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10b      	bne.n	800f40e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	617b      	str	r3, [r7, #20]
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	e7fd      	b.n	800f40a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f410:	699a      	ldr	r2, [r3, #24]
 800f412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f414:	18d1      	adds	r1, r2, r3
 800f416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f41a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f41c:	f7ff ff04 	bl	800f228 <prvInsertTimerInActiveList>
					break;
 800f420:	e017      	b.n	800f452 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f428:	f003 0302 	and.w	r3, r3, #2
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d103      	bne.n	800f438 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f430:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f432:	f000 fbe9 	bl	800fc08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f436:	e00c      	b.n	800f452 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f43a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f43e:	f023 0301 	bic.w	r3, r3, #1
 800f442:	b2da      	uxtb	r2, r3
 800f444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f44a:	e002      	b.n	800f452 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f44c:	bf00      	nop
 800f44e:	e000      	b.n	800f452 <prvProcessReceivedCommands+0x1a6>
					break;
 800f450:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f452:	4b08      	ldr	r3, [pc, #32]	@ (800f474 <prvProcessReceivedCommands+0x1c8>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	1d39      	adds	r1, r7, #4
 800f458:	2200      	movs	r2, #0
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fe fba6 	bl	800dbac <xQueueReceive>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	f47f af26 	bne.w	800f2b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f468:	bf00      	nop
 800f46a:	bf00      	nop
 800f46c:	3730      	adds	r7, #48	@ 0x30
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	2403390c 	.word	0x2403390c

0800f478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f47e:	e049      	b.n	800f514 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f480:	4b2e      	ldr	r3, [pc, #184]	@ (800f53c <prvSwitchTimerLists+0xc4>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f48a:	4b2c      	ldr	r3, [pc, #176]	@ (800f53c <prvSwitchTimerLists+0xc4>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	3304      	adds	r3, #4
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe f82b 	bl	800d4f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	6a1b      	ldr	r3, [r3, #32]
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4ac:	f003 0304 	and.w	r3, r3, #4
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d02f      	beq.n	800f514 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	699b      	ldr	r3, [r3, #24]
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f4be:	68ba      	ldr	r2, [r7, #8]
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d90e      	bls.n	800f4e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	68ba      	ldr	r2, [r7, #8]
 800f4ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4d2:	4b1a      	ldr	r3, [pc, #104]	@ (800f53c <prvSwitchTimerLists+0xc4>)
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	3304      	adds	r3, #4
 800f4da:	4619      	mov	r1, r3
 800f4dc:	4610      	mov	r0, r2
 800f4de:	f7fd ffd0 	bl	800d482 <vListInsert>
 800f4e2:	e017      	b.n	800f514 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	693a      	ldr	r2, [r7, #16]
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f7ff fd58 	bl	800efa4 <xTimerGenericCommand>
 800f4f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10b      	bne.n	800f514 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f500:	f383 8811 	msr	BASEPRI, r3
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	f3bf 8f4f 	dsb	sy
 800f50c:	603b      	str	r3, [r7, #0]
}
 800f50e:	bf00      	nop
 800f510:	bf00      	nop
 800f512:	e7fd      	b.n	800f510 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f514:	4b09      	ldr	r3, [pc, #36]	@ (800f53c <prvSwitchTimerLists+0xc4>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1b0      	bne.n	800f480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f51e:	4b07      	ldr	r3, [pc, #28]	@ (800f53c <prvSwitchTimerLists+0xc4>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f524:	4b06      	ldr	r3, [pc, #24]	@ (800f540 <prvSwitchTimerLists+0xc8>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4a04      	ldr	r2, [pc, #16]	@ (800f53c <prvSwitchTimerLists+0xc4>)
 800f52a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f52c:	4a04      	ldr	r2, [pc, #16]	@ (800f540 <prvSwitchTimerLists+0xc8>)
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	6013      	str	r3, [r2, #0]
}
 800f532:	bf00      	nop
 800f534:	3718      	adds	r7, #24
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	24033904 	.word	0x24033904
 800f540:	24033908 	.word	0x24033908

0800f544 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f54a:	f000 f96d 	bl	800f828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f54e:	4b15      	ldr	r3, [pc, #84]	@ (800f5a4 <prvCheckForValidListAndQueue+0x60>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d120      	bne.n	800f598 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f556:	4814      	ldr	r0, [pc, #80]	@ (800f5a8 <prvCheckForValidListAndQueue+0x64>)
 800f558:	f7fd ff42 	bl	800d3e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f55c:	4813      	ldr	r0, [pc, #76]	@ (800f5ac <prvCheckForValidListAndQueue+0x68>)
 800f55e:	f7fd ff3f 	bl	800d3e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f562:	4b13      	ldr	r3, [pc, #76]	@ (800f5b0 <prvCheckForValidListAndQueue+0x6c>)
 800f564:	4a10      	ldr	r2, [pc, #64]	@ (800f5a8 <prvCheckForValidListAndQueue+0x64>)
 800f566:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f568:	4b12      	ldr	r3, [pc, #72]	@ (800f5b4 <prvCheckForValidListAndQueue+0x70>)
 800f56a:	4a10      	ldr	r2, [pc, #64]	@ (800f5ac <prvCheckForValidListAndQueue+0x68>)
 800f56c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f56e:	2300      	movs	r3, #0
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	4b11      	ldr	r3, [pc, #68]	@ (800f5b8 <prvCheckForValidListAndQueue+0x74>)
 800f574:	4a11      	ldr	r2, [pc, #68]	@ (800f5bc <prvCheckForValidListAndQueue+0x78>)
 800f576:	2110      	movs	r1, #16
 800f578:	200a      	movs	r0, #10
 800f57a:	f7fe f84f 	bl	800d61c <xQueueGenericCreateStatic>
 800f57e:	4603      	mov	r3, r0
 800f580:	4a08      	ldr	r2, [pc, #32]	@ (800f5a4 <prvCheckForValidListAndQueue+0x60>)
 800f582:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f584:	4b07      	ldr	r3, [pc, #28]	@ (800f5a4 <prvCheckForValidListAndQueue+0x60>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d005      	beq.n	800f598 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f58c:	4b05      	ldr	r3, [pc, #20]	@ (800f5a4 <prvCheckForValidListAndQueue+0x60>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	490b      	ldr	r1, [pc, #44]	@ (800f5c0 <prvCheckForValidListAndQueue+0x7c>)
 800f592:	4618      	mov	r0, r3
 800f594:	f7fe fcfc 	bl	800df90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f598:	f000 f978 	bl	800f88c <vPortExitCritical>
}
 800f59c:	bf00      	nop
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	2403390c 	.word	0x2403390c
 800f5a8:	240338dc 	.word	0x240338dc
 800f5ac:	240338f0 	.word	0x240338f0
 800f5b0:	24033904 	.word	0x24033904
 800f5b4:	24033908 	.word	0x24033908
 800f5b8:	240339b8 	.word	0x240339b8
 800f5bc:	24033918 	.word	0x24033918
 800f5c0:	08020b78 	.word	0x08020b78

0800f5c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	3b04      	subs	r3, #4
 800f5d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f5dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	3b04      	subs	r3, #4
 800f5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	f023 0201 	bic.w	r2, r3, #1
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3b04      	subs	r3, #4
 800f5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f5f4:	4a0c      	ldr	r2, [pc, #48]	@ (800f628 <pxPortInitialiseStack+0x64>)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	3b14      	subs	r3, #20
 800f5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	3b04      	subs	r3, #4
 800f60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f06f 0202 	mvn.w	r2, #2
 800f612:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	3b20      	subs	r3, #32
 800f618:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f61a:	68fb      	ldr	r3, [r7, #12]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	0800f62d 	.word	0x0800f62d

0800f62c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f62c:	b480      	push	{r7}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f632:	2300      	movs	r3, #0
 800f634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f636:	4b13      	ldr	r3, [pc, #76]	@ (800f684 <prvTaskExitError+0x58>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f63e:	d00b      	beq.n	800f658 <prvTaskExitError+0x2c>
	__asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	60fb      	str	r3, [r7, #12]
}
 800f652:	bf00      	nop
 800f654:	bf00      	nop
 800f656:	e7fd      	b.n	800f654 <prvTaskExitError+0x28>
	__asm volatile
 800f658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65c:	f383 8811 	msr	BASEPRI, r3
 800f660:	f3bf 8f6f 	isb	sy
 800f664:	f3bf 8f4f 	dsb	sy
 800f668:	60bb      	str	r3, [r7, #8]
}
 800f66a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f66c:	bf00      	nop
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d0fc      	beq.n	800f66e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f674:	bf00      	nop
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	24000014 	.word	0x24000014
	...

0800f690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f690:	4b07      	ldr	r3, [pc, #28]	@ (800f6b0 <pxCurrentTCBConst2>)
 800f692:	6819      	ldr	r1, [r3, #0]
 800f694:	6808      	ldr	r0, [r1, #0]
 800f696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69a:	f380 8809 	msr	PSP, r0
 800f69e:	f3bf 8f6f 	isb	sy
 800f6a2:	f04f 0000 	mov.w	r0, #0
 800f6a6:	f380 8811 	msr	BASEPRI, r0
 800f6aa:	4770      	bx	lr
 800f6ac:	f3af 8000 	nop.w

0800f6b0 <pxCurrentTCBConst2>:
 800f6b0:	240333dc 	.word	0x240333dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop

0800f6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f6b8:	4808      	ldr	r0, [pc, #32]	@ (800f6dc <prvPortStartFirstTask+0x24>)
 800f6ba:	6800      	ldr	r0, [r0, #0]
 800f6bc:	6800      	ldr	r0, [r0, #0]
 800f6be:	f380 8808 	msr	MSP, r0
 800f6c2:	f04f 0000 	mov.w	r0, #0
 800f6c6:	f380 8814 	msr	CONTROL, r0
 800f6ca:	b662      	cpsie	i
 800f6cc:	b661      	cpsie	f
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	df00      	svc	0
 800f6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f6da:	bf00      	nop
 800f6dc:	e000ed08 	.word	0xe000ed08

0800f6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f6e6:	4b47      	ldr	r3, [pc, #284]	@ (800f804 <xPortStartScheduler+0x124>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4a47      	ldr	r2, [pc, #284]	@ (800f808 <xPortStartScheduler+0x128>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d10b      	bne.n	800f708 <xPortStartScheduler+0x28>
	__asm volatile
 800f6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f4:	f383 8811 	msr	BASEPRI, r3
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	613b      	str	r3, [r7, #16]
}
 800f702:	bf00      	nop
 800f704:	bf00      	nop
 800f706:	e7fd      	b.n	800f704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f708:	4b3e      	ldr	r3, [pc, #248]	@ (800f804 <xPortStartScheduler+0x124>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a3f      	ldr	r2, [pc, #252]	@ (800f80c <xPortStartScheduler+0x12c>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d10b      	bne.n	800f72a <xPortStartScheduler+0x4a>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	60fb      	str	r3, [r7, #12]
}
 800f724:	bf00      	nop
 800f726:	bf00      	nop
 800f728:	e7fd      	b.n	800f726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f72a:	4b39      	ldr	r3, [pc, #228]	@ (800f810 <xPortStartScheduler+0x130>)
 800f72c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	b2db      	uxtb	r3, r3
 800f734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	22ff      	movs	r2, #255	@ 0xff
 800f73a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	b2db      	uxtb	r3, r3
 800f742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f744:	78fb      	ldrb	r3, [r7, #3]
 800f746:	b2db      	uxtb	r3, r3
 800f748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	4b31      	ldr	r3, [pc, #196]	@ (800f814 <xPortStartScheduler+0x134>)
 800f750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f752:	4b31      	ldr	r3, [pc, #196]	@ (800f818 <xPortStartScheduler+0x138>)
 800f754:	2207      	movs	r2, #7
 800f756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f758:	e009      	b.n	800f76e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f75a:	4b2f      	ldr	r3, [pc, #188]	@ (800f818 <xPortStartScheduler+0x138>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3b01      	subs	r3, #1
 800f760:	4a2d      	ldr	r2, [pc, #180]	@ (800f818 <xPortStartScheduler+0x138>)
 800f762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f764:	78fb      	ldrb	r3, [r7, #3]
 800f766:	b2db      	uxtb	r3, r3
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f76e:	78fb      	ldrb	r3, [r7, #3]
 800f770:	b2db      	uxtb	r3, r3
 800f772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f776:	2b80      	cmp	r3, #128	@ 0x80
 800f778:	d0ef      	beq.n	800f75a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f77a:	4b27      	ldr	r3, [pc, #156]	@ (800f818 <xPortStartScheduler+0x138>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f1c3 0307 	rsb	r3, r3, #7
 800f782:	2b04      	cmp	r3, #4
 800f784:	d00b      	beq.n	800f79e <xPortStartScheduler+0xbe>
	__asm volatile
 800f786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78a:	f383 8811 	msr	BASEPRI, r3
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f3bf 8f4f 	dsb	sy
 800f796:	60bb      	str	r3, [r7, #8]
}
 800f798:	bf00      	nop
 800f79a:	bf00      	nop
 800f79c:	e7fd      	b.n	800f79a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f79e:	4b1e      	ldr	r3, [pc, #120]	@ (800f818 <xPortStartScheduler+0x138>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	021b      	lsls	r3, r3, #8
 800f7a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f818 <xPortStartScheduler+0x138>)
 800f7a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f7a8:	4b1b      	ldr	r3, [pc, #108]	@ (800f818 <xPortStartScheduler+0x138>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f7b0:	4a19      	ldr	r2, [pc, #100]	@ (800f818 <xPortStartScheduler+0x138>)
 800f7b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f7bc:	4b17      	ldr	r3, [pc, #92]	@ (800f81c <xPortStartScheduler+0x13c>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a16      	ldr	r2, [pc, #88]	@ (800f81c <xPortStartScheduler+0x13c>)
 800f7c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f7c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f7c8:	4b14      	ldr	r3, [pc, #80]	@ (800f81c <xPortStartScheduler+0x13c>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a13      	ldr	r2, [pc, #76]	@ (800f81c <xPortStartScheduler+0x13c>)
 800f7ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f7d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f7d4:	f000 f8da 	bl	800f98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7d8:	4b11      	ldr	r3, [pc, #68]	@ (800f820 <xPortStartScheduler+0x140>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7de:	f000 f8f9 	bl	800f9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7e2:	4b10      	ldr	r3, [pc, #64]	@ (800f824 <xPortStartScheduler+0x144>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a0f      	ldr	r2, [pc, #60]	@ (800f824 <xPortStartScheduler+0x144>)
 800f7e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f7ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f7ee:	f7ff ff63 	bl	800f6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f7f2:	f7ff f805 	bl	800e800 <vTaskSwitchContext>
	prvTaskExitError();
 800f7f6:	f7ff ff19 	bl	800f62c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3718      	adds	r7, #24
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	e000ed00 	.word	0xe000ed00
 800f808:	410fc271 	.word	0x410fc271
 800f80c:	410fc270 	.word	0x410fc270
 800f810:	e000e400 	.word	0xe000e400
 800f814:	24033a08 	.word	0x24033a08
 800f818:	24033a0c 	.word	0x24033a0c
 800f81c:	e000ed20 	.word	0xe000ed20
 800f820:	24000014 	.word	0x24000014
 800f824:	e000ef34 	.word	0xe000ef34

0800f828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	607b      	str	r3, [r7, #4]
}
 800f840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f842:	4b10      	ldr	r3, [pc, #64]	@ (800f884 <vPortEnterCritical+0x5c>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3301      	adds	r3, #1
 800f848:	4a0e      	ldr	r2, [pc, #56]	@ (800f884 <vPortEnterCritical+0x5c>)
 800f84a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f84c:	4b0d      	ldr	r3, [pc, #52]	@ (800f884 <vPortEnterCritical+0x5c>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d110      	bne.n	800f876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f854:	4b0c      	ldr	r3, [pc, #48]	@ (800f888 <vPortEnterCritical+0x60>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00b      	beq.n	800f876 <vPortEnterCritical+0x4e>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	603b      	str	r3, [r7, #0]
}
 800f870:	bf00      	nop
 800f872:	bf00      	nop
 800f874:	e7fd      	b.n	800f872 <vPortEnterCritical+0x4a>
	}
}
 800f876:	bf00      	nop
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	24000014 	.word	0x24000014
 800f888:	e000ed04 	.word	0xe000ed04

0800f88c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f892:	4b12      	ldr	r3, [pc, #72]	@ (800f8dc <vPortExitCritical+0x50>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10b      	bne.n	800f8b2 <vPortExitCritical+0x26>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	607b      	str	r3, [r7, #4]
}
 800f8ac:	bf00      	nop
 800f8ae:	bf00      	nop
 800f8b0:	e7fd      	b.n	800f8ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f8dc <vPortExitCritical+0x50>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	4a08      	ldr	r2, [pc, #32]	@ (800f8dc <vPortExitCritical+0x50>)
 800f8ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f8bc:	4b07      	ldr	r3, [pc, #28]	@ (800f8dc <vPortExitCritical+0x50>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d105      	bne.n	800f8d0 <vPortExitCritical+0x44>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	f383 8811 	msr	BASEPRI, r3
}
 800f8ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f8d0:	bf00      	nop
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr
 800f8dc:	24000014 	.word	0x24000014

0800f8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f8e0:	f3ef 8009 	mrs	r0, PSP
 800f8e4:	f3bf 8f6f 	isb	sy
 800f8e8:	4b15      	ldr	r3, [pc, #84]	@ (800f940 <pxCurrentTCBConst>)
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	f01e 0f10 	tst.w	lr, #16
 800f8f0:	bf08      	it	eq
 800f8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fa:	6010      	str	r0, [r2, #0]
 800f8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f904:	f380 8811 	msr	BASEPRI, r0
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	f3bf 8f6f 	isb	sy
 800f910:	f7fe ff76 	bl	800e800 <vTaskSwitchContext>
 800f914:	f04f 0000 	mov.w	r0, #0
 800f918:	f380 8811 	msr	BASEPRI, r0
 800f91c:	bc09      	pop	{r0, r3}
 800f91e:	6819      	ldr	r1, [r3, #0]
 800f920:	6808      	ldr	r0, [r1, #0]
 800f922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f926:	f01e 0f10 	tst.w	lr, #16
 800f92a:	bf08      	it	eq
 800f92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f930:	f380 8809 	msr	PSP, r0
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	f3af 8000 	nop.w

0800f940 <pxCurrentTCBConst>:
 800f940:	240333dc 	.word	0x240333dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f944:	bf00      	nop
 800f946:	bf00      	nop

0800f948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	607b      	str	r3, [r7, #4]
}
 800f960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f962:	f7fe fe93 	bl	800e68c <xTaskIncrementTick>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d003      	beq.n	800f974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f96c:	4b06      	ldr	r3, [pc, #24]	@ (800f988 <xPortSysTickHandler+0x40>)
 800f96e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	2300      	movs	r3, #0
 800f976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	f383 8811 	msr	BASEPRI, r3
}
 800f97e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f980:	bf00      	nop
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	e000ed04 	.word	0xe000ed04

0800f98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f98c:	b480      	push	{r7}
 800f98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f990:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c0 <vPortSetupTimerInterrupt+0x34>)
 800f992:	2200      	movs	r2, #0
 800f994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f996:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c4 <vPortSetupTimerInterrupt+0x38>)
 800f998:	2200      	movs	r2, #0
 800f99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f99c:	4b0a      	ldr	r3, [pc, #40]	@ (800f9c8 <vPortSetupTimerInterrupt+0x3c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a0a      	ldr	r2, [pc, #40]	@ (800f9cc <vPortSetupTimerInterrupt+0x40>)
 800f9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9a6:	099b      	lsrs	r3, r3, #6
 800f9a8:	4a09      	ldr	r2, [pc, #36]	@ (800f9d0 <vPortSetupTimerInterrupt+0x44>)
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f9ae:	4b04      	ldr	r3, [pc, #16]	@ (800f9c0 <vPortSetupTimerInterrupt+0x34>)
 800f9b0:	2207      	movs	r2, #7
 800f9b2:	601a      	str	r2, [r3, #0]
}
 800f9b4:	bf00      	nop
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	e000e010 	.word	0xe000e010
 800f9c4:	e000e018 	.word	0xe000e018
 800f9c8:	24000004 	.word	0x24000004
 800f9cc:	10624dd3 	.word	0x10624dd3
 800f9d0:	e000e014 	.word	0xe000e014

0800f9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f9e4 <vPortEnableVFP+0x10>
 800f9d8:	6801      	ldr	r1, [r0, #0]
 800f9da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f9de:	6001      	str	r1, [r0, #0]
 800f9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f9e2:	bf00      	nop
 800f9e4:	e000ed88 	.word	0xe000ed88

0800f9e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b085      	sub	sp, #20
 800f9ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9ee:	f3ef 8305 	mrs	r3, IPSR
 800f9f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b0f      	cmp	r3, #15
 800f9f8:	d915      	bls.n	800fa26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f9fa:	4a18      	ldr	r2, [pc, #96]	@ (800fa5c <vPortValidateInterruptPriority+0x74>)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	4413      	add	r3, r2
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fa04:	4b16      	ldr	r3, [pc, #88]	@ (800fa60 <vPortValidateInterruptPriority+0x78>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	7afa      	ldrb	r2, [r7, #11]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d20b      	bcs.n	800fa26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	607b      	str	r3, [r7, #4]
}
 800fa20:	bf00      	nop
 800fa22:	bf00      	nop
 800fa24:	e7fd      	b.n	800fa22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa26:	4b0f      	ldr	r3, [pc, #60]	@ (800fa64 <vPortValidateInterruptPriority+0x7c>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fa2e:	4b0e      	ldr	r3, [pc, #56]	@ (800fa68 <vPortValidateInterruptPriority+0x80>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d90b      	bls.n	800fa4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	603b      	str	r3, [r7, #0]
}
 800fa48:	bf00      	nop
 800fa4a:	bf00      	nop
 800fa4c:	e7fd      	b.n	800fa4a <vPortValidateInterruptPriority+0x62>
	}
 800fa4e:	bf00      	nop
 800fa50:	3714      	adds	r7, #20
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	e000e3f0 	.word	0xe000e3f0
 800fa60:	24033a08 	.word	0x24033a08
 800fa64:	e000ed0c 	.word	0xe000ed0c
 800fa68:	24033a0c 	.word	0x24033a0c

0800fa6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b08a      	sub	sp, #40	@ 0x28
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa74:	2300      	movs	r3, #0
 800fa76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa78:	f7fe fd4c 	bl	800e514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa7c:	4b5c      	ldr	r3, [pc, #368]	@ (800fbf0 <pvPortMalloc+0x184>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d101      	bne.n	800fa88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa84:	f000 f924 	bl	800fcd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa88:	4b5a      	ldr	r3, [pc, #360]	@ (800fbf4 <pvPortMalloc+0x188>)
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4013      	ands	r3, r2
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f040 8095 	bne.w	800fbc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d01e      	beq.n	800fada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fa9c:	2208      	movs	r2, #8
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4413      	add	r3, r2
 800faa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f003 0307 	and.w	r3, r3, #7
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d015      	beq.n	800fada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f023 0307 	bic.w	r3, r3, #7
 800fab4:	3308      	adds	r3, #8
 800fab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f003 0307 	and.w	r3, r3, #7
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d00b      	beq.n	800fada <pvPortMalloc+0x6e>
	__asm volatile
 800fac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac6:	f383 8811 	msr	BASEPRI, r3
 800faca:	f3bf 8f6f 	isb	sy
 800face:	f3bf 8f4f 	dsb	sy
 800fad2:	617b      	str	r3, [r7, #20]
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop
 800fad8:	e7fd      	b.n	800fad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d06f      	beq.n	800fbc0 <pvPortMalloc+0x154>
 800fae0:	4b45      	ldr	r3, [pc, #276]	@ (800fbf8 <pvPortMalloc+0x18c>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d86a      	bhi.n	800fbc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800faea:	4b44      	ldr	r3, [pc, #272]	@ (800fbfc <pvPortMalloc+0x190>)
 800faec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800faee:	4b43      	ldr	r3, [pc, #268]	@ (800fbfc <pvPortMalloc+0x190>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800faf4:	e004      	b.n	800fb00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800faf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d903      	bls.n	800fb12 <pvPortMalloc+0xa6>
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1f1      	bne.n	800faf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fb12:	4b37      	ldr	r3, [pc, #220]	@ (800fbf0 <pvPortMalloc+0x184>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d051      	beq.n	800fbc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb1c:	6a3b      	ldr	r3, [r7, #32]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2208      	movs	r2, #8
 800fb22:	4413      	add	r3, r2
 800fb24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	6a3b      	ldr	r3, [r7, #32]
 800fb2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb30:	685a      	ldr	r2, [r3, #4]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	1ad2      	subs	r2, r2, r3
 800fb36:	2308      	movs	r3, #8
 800fb38:	005b      	lsls	r3, r3, #1
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d920      	bls.n	800fb80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4413      	add	r3, r2
 800fb44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	f003 0307 	and.w	r3, r3, #7
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00b      	beq.n	800fb68 <pvPortMalloc+0xfc>
	__asm volatile
 800fb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	613b      	str	r3, [r7, #16]
}
 800fb62:	bf00      	nop
 800fb64:	bf00      	nop
 800fb66:	e7fd      	b.n	800fb64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	1ad2      	subs	r2, r2, r3
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb7a:	69b8      	ldr	r0, [r7, #24]
 800fb7c:	f000 f90c 	bl	800fd98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb80:	4b1d      	ldr	r3, [pc, #116]	@ (800fbf8 <pvPortMalloc+0x18c>)
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	1ad3      	subs	r3, r2, r3
 800fb8a:	4a1b      	ldr	r2, [pc, #108]	@ (800fbf8 <pvPortMalloc+0x18c>)
 800fb8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb8e:	4b1a      	ldr	r3, [pc, #104]	@ (800fbf8 <pvPortMalloc+0x18c>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	4b1b      	ldr	r3, [pc, #108]	@ (800fc00 <pvPortMalloc+0x194>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d203      	bcs.n	800fba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb9a:	4b17      	ldr	r3, [pc, #92]	@ (800fbf8 <pvPortMalloc+0x18c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4a18      	ldr	r2, [pc, #96]	@ (800fc00 <pvPortMalloc+0x194>)
 800fba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	4b13      	ldr	r3, [pc, #76]	@ (800fbf4 <pvPortMalloc+0x188>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	431a      	orrs	r2, r3
 800fbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fbb6:	4b13      	ldr	r3, [pc, #76]	@ (800fc04 <pvPortMalloc+0x198>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	4a11      	ldr	r2, [pc, #68]	@ (800fc04 <pvPortMalloc+0x198>)
 800fbbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fbc0:	f7fe fcb6 	bl	800e530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	f003 0307 	and.w	r3, r3, #7
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00b      	beq.n	800fbe6 <pvPortMalloc+0x17a>
	__asm volatile
 800fbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd2:	f383 8811 	msr	BASEPRI, r3
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	f3bf 8f4f 	dsb	sy
 800fbde:	60fb      	str	r3, [r7, #12]
}
 800fbe0:	bf00      	nop
 800fbe2:	bf00      	nop
 800fbe4:	e7fd      	b.n	800fbe2 <pvPortMalloc+0x176>
	return pvReturn;
 800fbe6:	69fb      	ldr	r3, [r7, #28]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3728      	adds	r7, #40	@ 0x28
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	24064758 	.word	0x24064758
 800fbf4:	2406476c 	.word	0x2406476c
 800fbf8:	2406475c 	.word	0x2406475c
 800fbfc:	24064750 	.word	0x24064750
 800fc00:	24064760 	.word	0x24064760
 800fc04:	24064764 	.word	0x24064764

0800fc08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d04f      	beq.n	800fcba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fc1a:	2308      	movs	r3, #8
 800fc1c:	425b      	negs	r3, r3
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	4413      	add	r3, r2
 800fc22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	685a      	ldr	r2, [r3, #4]
 800fc2c:	4b25      	ldr	r3, [pc, #148]	@ (800fcc4 <vPortFree+0xbc>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4013      	ands	r3, r2
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d10b      	bne.n	800fc4e <vPortFree+0x46>
	__asm volatile
 800fc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3a:	f383 8811 	msr	BASEPRI, r3
 800fc3e:	f3bf 8f6f 	isb	sy
 800fc42:	f3bf 8f4f 	dsb	sy
 800fc46:	60fb      	str	r3, [r7, #12]
}
 800fc48:	bf00      	nop
 800fc4a:	bf00      	nop
 800fc4c:	e7fd      	b.n	800fc4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00b      	beq.n	800fc6e <vPortFree+0x66>
	__asm volatile
 800fc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5a:	f383 8811 	msr	BASEPRI, r3
 800fc5e:	f3bf 8f6f 	isb	sy
 800fc62:	f3bf 8f4f 	dsb	sy
 800fc66:	60bb      	str	r3, [r7, #8]
}
 800fc68:	bf00      	nop
 800fc6a:	bf00      	nop
 800fc6c:	e7fd      	b.n	800fc6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	685a      	ldr	r2, [r3, #4]
 800fc72:	4b14      	ldr	r3, [pc, #80]	@ (800fcc4 <vPortFree+0xbc>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4013      	ands	r3, r2
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d01e      	beq.n	800fcba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d11a      	bne.n	800fcba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	685a      	ldr	r2, [r3, #4]
 800fc88:	4b0e      	ldr	r3, [pc, #56]	@ (800fcc4 <vPortFree+0xbc>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	43db      	mvns	r3, r3
 800fc8e:	401a      	ands	r2, r3
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc94:	f7fe fc3e 	bl	800e514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc8 <vPortFree+0xc0>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4413      	add	r3, r2
 800fca2:	4a09      	ldr	r2, [pc, #36]	@ (800fcc8 <vPortFree+0xc0>)
 800fca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fca6:	6938      	ldr	r0, [r7, #16]
 800fca8:	f000 f876 	bl	800fd98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fcac:	4b07      	ldr	r3, [pc, #28]	@ (800fccc <vPortFree+0xc4>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	4a06      	ldr	r2, [pc, #24]	@ (800fccc <vPortFree+0xc4>)
 800fcb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fcb6:	f7fe fc3b 	bl	800e530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fcba:	bf00      	nop
 800fcbc:	3718      	adds	r7, #24
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	2406476c 	.word	0x2406476c
 800fcc8:	2406475c 	.word	0x2406475c
 800fccc:	24064768 	.word	0x24064768

0800fcd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fcd6:	4b29      	ldr	r3, [pc, #164]	@ (800fd7c <prvHeapInit+0xac>)
 800fcd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fcda:	4b29      	ldr	r3, [pc, #164]	@ (800fd80 <prvHeapInit+0xb0>)
 800fcdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f003 0307 	and.w	r3, r3, #7
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00c      	beq.n	800fd02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	3307      	adds	r3, #7
 800fcec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f023 0307 	bic.w	r3, r3, #7
 800fcf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fcf6:	68ba      	ldr	r2, [r7, #8]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	4a20      	ldr	r2, [pc, #128]	@ (800fd80 <prvHeapInit+0xb0>)
 800fcfe:	4413      	add	r3, r2
 800fd00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fd06:	4a1f      	ldr	r2, [pc, #124]	@ (800fd84 <prvHeapInit+0xb4>)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd0c:	4b1d      	ldr	r3, [pc, #116]	@ (800fd84 <prvHeapInit+0xb4>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	4413      	add	r3, r2
 800fd18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd1a:	2208      	movs	r2, #8
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	1a9b      	subs	r3, r3, r2
 800fd20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f023 0307 	bic.w	r3, r3, #7
 800fd28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	4a16      	ldr	r2, [pc, #88]	@ (800fd88 <prvHeapInit+0xb8>)
 800fd2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd30:	4b15      	ldr	r3, [pc, #84]	@ (800fd88 <prvHeapInit+0xb8>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2200      	movs	r2, #0
 800fd36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd38:	4b13      	ldr	r3, [pc, #76]	@ (800fd88 <prvHeapInit+0xb8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	68fa      	ldr	r2, [r7, #12]
 800fd48:	1ad2      	subs	r2, r2, r3
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd4e:	4b0e      	ldr	r3, [pc, #56]	@ (800fd88 <prvHeapInit+0xb8>)
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	4a0c      	ldr	r2, [pc, #48]	@ (800fd8c <prvHeapInit+0xbc>)
 800fd5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	4a0b      	ldr	r2, [pc, #44]	@ (800fd90 <prvHeapInit+0xc0>)
 800fd64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd66:	4b0b      	ldr	r3, [pc, #44]	@ (800fd94 <prvHeapInit+0xc4>)
 800fd68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fd6c:	601a      	str	r2, [r3, #0]
}
 800fd6e:	bf00      	nop
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	00030d40 	.word	0x00030d40
 800fd80:	24033a10 	.word	0x24033a10
 800fd84:	24064750 	.word	0x24064750
 800fd88:	24064758 	.word	0x24064758
 800fd8c:	24064760 	.word	0x24064760
 800fd90:	2406475c 	.word	0x2406475c
 800fd94:	2406476c 	.word	0x2406476c

0800fd98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fda0:	4b28      	ldr	r3, [pc, #160]	@ (800fe44 <prvInsertBlockIntoFreeList+0xac>)
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	e002      	b.n	800fdac <prvInsertBlockIntoFreeList+0x14>
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	60fb      	str	r3, [r7, #12]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d8f7      	bhi.n	800fda6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	68ba      	ldr	r2, [r7, #8]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d108      	bne.n	800fdda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	441a      	add	r2, r3
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	441a      	add	r2, r3
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d118      	bne.n	800fe20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	4b15      	ldr	r3, [pc, #84]	@ (800fe48 <prvInsertBlockIntoFreeList+0xb0>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d00d      	beq.n	800fe16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	441a      	add	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	e008      	b.n	800fe28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe16:	4b0c      	ldr	r3, [pc, #48]	@ (800fe48 <prvInsertBlockIntoFreeList+0xb0>)
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
 800fe1e:	e003      	b.n	800fe28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe28:	68fa      	ldr	r2, [r7, #12]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d002      	beq.n	800fe36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe36:	bf00      	nop
 800fe38:	3714      	adds	r7, #20
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	24064750 	.word	0x24064750
 800fe48:	24064758 	.word	0x24064758

0800fe4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800fe4c:	4b04      	ldr	r3, [pc, #16]	@ (800fe60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	b10a      	cbz	r2, 800fe56 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 800fe52:	4803      	ldr	r0, [pc, #12]	@ (800fe60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800fe54:	4770      	bx	lr
 800fe56:	4a03      	ldr	r2, [pc, #12]	@ (800fe64 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 800fe58:	4801      	ldr	r0, [pc, #4]	@ (800fe60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800fe5a:	6812      	ldr	r2, [r2, #0]
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	4770      	bx	lr
 800fe60:	24000020 	.word	0x24000020
 800fe64:	24000e10 	.word	0x24000e10

0800fe68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800fe68:	4a02      	ldr	r2, [pc, #8]	@ (800fe74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 800fe6a:	4b03      	ldr	r3, [pc, #12]	@ (800fe78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 800fe6c:	6812      	ldr	r2, [r2, #0]
 800fe6e:	601a      	str	r2, [r3, #0]
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	24000e10 	.word	0x24000e10
 800fe78:	24000020 	.word	0x24000020

0800fe7c <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 800fe7c:	f004 b8be 	b.w	8013ffc <autoware_control_msgs__msg__Control__init>

0800fe80 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 800fe80:	f004 b912 	b.w	80140a8 <autoware_control_msgs__msg__Control__fini>

0800fe84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800fe84:	b510      	push	{r4, lr}
 800fe86:	4c0c      	ldr	r4, [pc, #48]	@ (800feb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 800fe88:	f001 f91e 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fe8c:	60e0      	str	r0, [r4, #12]
 800fe8e:	f001 f91b 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fe92:	64a0      	str	r0, [r4, #72]	@ 0x48
 800fe94:	f000 f81a 	bl	800fecc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800fe98:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800fe9c:	f000 f832 	bl	800ff04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800fea0:	4b06      	ldr	r3, [pc, #24]	@ (800febc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800fea2:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	b10a      	cbz	r2, 800feae <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 800feaa:	4804      	ldr	r0, [pc, #16]	@ (800febc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800feac:	bd10      	pop	{r4, pc}
 800feae:	4a04      	ldr	r2, [pc, #16]	@ (800fec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 800feb0:	4802      	ldr	r0, [pc, #8]	@ (800febc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800feb2:	6812      	ldr	r2, [r2, #0]
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	bd10      	pop	{r4, pc}
 800feb8:	2400002c 	.word	0x2400002c
 800febc:	2400011c 	.word	0x2400011c
 800fec0:	24000e14 	.word	0x24000e14

0800fec4 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 800fec4:	f004 b904 	b.w	80140d0 <autoware_control_msgs__msg__Lateral__init>

0800fec8 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 800fec8:	f004 b926 	b.w	8014118 <autoware_control_msgs__msg__Lateral__fini>

0800fecc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800fecc:	b510      	push	{r4, lr}
 800fece:	4c08      	ldr	r4, [pc, #32]	@ (800fef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 800fed0:	f001 f8fa 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fed4:	60e0      	str	r0, [r4, #12]
 800fed6:	f001 f8f7 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800feda:	4b06      	ldr	r3, [pc, #24]	@ (800fef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800fedc:	64a0      	str	r0, [r4, #72]	@ 0x48
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	b10a      	cbz	r2, 800fee6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 800fee2:	4804      	ldr	r0, [pc, #16]	@ (800fef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800fee4:	bd10      	pop	{r4, pc}
 800fee6:	4a04      	ldr	r2, [pc, #16]	@ (800fef8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 800fee8:	4802      	ldr	r0, [pc, #8]	@ (800fef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800feea:	6812      	ldr	r2, [r2, #0]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	bd10      	pop	{r4, pc}
 800fef0:	24000128 	.word	0x24000128
 800fef4:	24000254 	.word	0x24000254
 800fef8:	24000e14 	.word	0x24000e14

0800fefc <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 800fefc:	f004 b918 	b.w	8014130 <autoware_control_msgs__msg__Longitudinal__init>

0800ff00 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 800ff00:	f004 b93a 	b.w	8014178 <autoware_control_msgs__msg__Longitudinal__fini>

0800ff04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800ff04:	b510      	push	{r4, lr}
 800ff06:	4c08      	ldr	r4, [pc, #32]	@ (800ff28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 800ff08:	f001 f8de 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ff0c:	60e0      	str	r0, [r4, #12]
 800ff0e:	f001 f8db 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ff12:	4b06      	ldr	r3, [pc, #24]	@ (800ff2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800ff14:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	b10a      	cbz	r2, 800ff1e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 800ff1a:	4804      	ldr	r0, [pc, #16]	@ (800ff2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800ff1c:	bd10      	pop	{r4, pc}
 800ff1e:	4a04      	ldr	r2, [pc, #16]	@ (800ff30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 800ff20:	4802      	ldr	r0, [pc, #8]	@ (800ff2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800ff22:	6812      	ldr	r2, [r2, #0]
 800ff24:	601a      	str	r2, [r3, #0]
 800ff26:	bd10      	pop	{r4, pc}
 800ff28:	24000260 	.word	0x24000260
 800ff2c:	24000404 	.word	0x24000404
 800ff30:	24000e14 	.word	0x24000e14

0800ff34 <get_serialized_size_autoware_control_msgs__msg__Control>:
 800ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff36:	4604      	mov	r4, r0
 800ff38:	b1c8      	cbz	r0, 800ff6e <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 800ff3a:	460f      	mov	r7, r1
 800ff3c:	f001 f8d2 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 800ff40:	4606      	mov	r6, r0
 800ff42:	f104 0008 	add.w	r0, r4, #8
 800ff46:	443e      	add	r6, r7
 800ff48:	4631      	mov	r1, r6
 800ff4a:	f001 f8cb 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 800ff4e:	4605      	mov	r5, r0
 800ff50:	f104 0010 	add.w	r0, r4, #16
 800ff54:	4435      	add	r5, r6
 800ff56:	4629      	mov	r1, r5
 800ff58:	f000 f8a2 	bl	80100a0 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800ff5c:	4601      	mov	r1, r0
 800ff5e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800ff62:	440d      	add	r5, r1
 800ff64:	4629      	mov	r1, r5
 800ff66:	f000 f9a7 	bl	80102b8 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800ff6a:	1bc0      	subs	r0, r0, r7
 800ff6c:	4428      	add	r0, r5
 800ff6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff70 <_Control__cdr_deserialize>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	460c      	mov	r4, r1
 800ff74:	b329      	cbz	r1, 800ffc2 <_Control__cdr_deserialize+0x52>
 800ff76:	4605      	mov	r5, r0
 800ff78:	f001 f918 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	4621      	mov	r1, r4
 800ff80:	4628      	mov	r0, r5
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	4798      	blx	r3
 800ff88:	f001 f910 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	f104 0108 	add.w	r1, r4, #8
 800ff92:	4628      	mov	r0, r5
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	4798      	blx	r3
 800ff9a:	f000 f95b 	bl	8010254 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f104 0110 	add.w	r1, r4, #16
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	4798      	blx	r3
 800ffac:	f000 fa28 	bl	8010400 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	4718      	bx	r3
 800ffc2:	4608      	mov	r0, r1
 800ffc4:	bd70      	pop	{r4, r5, r6, pc}
 800ffc6:	bf00      	nop

0800ffc8 <_Control__cdr_serialize>:
 800ffc8:	b338      	cbz	r0, 801001a <_Control__cdr_serialize+0x52>
 800ffca:	b570      	push	{r4, r5, r6, lr}
 800ffcc:	4604      	mov	r4, r0
 800ffce:	460d      	mov	r5, r1
 800ffd0:	f001 f8ec 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	4620      	mov	r0, r4
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	4798      	blx	r3
 800ffe0:	f001 f8e4 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	4629      	mov	r1, r5
 800ffe8:	f104 0008 	add.w	r0, r4, #8
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	4798      	blx	r3
 800fff2:	f000 f92f 	bl	8010254 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800fff6:	4603      	mov	r3, r0
 800fff8:	4629      	mov	r1, r5
 800fffa:	f104 0010 	add.w	r0, r4, #16
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	4798      	blx	r3
 8010004:	f000 f9fc 	bl	8010400 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8010008:	4603      	mov	r3, r0
 801000a:	4629      	mov	r1, r5
 801000c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	4718      	bx	r3
 801001a:	4770      	bx	lr

0801001c <_Control__get_serialized_size>:
 801001c:	b538      	push	{r3, r4, r5, lr}
 801001e:	4604      	mov	r4, r0
 8010020:	b1b8      	cbz	r0, 8010052 <_Control__get_serialized_size+0x36>
 8010022:	2100      	movs	r1, #0
 8010024:	f001 f85e 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010028:	4605      	mov	r5, r0
 801002a:	f104 0008 	add.w	r0, r4, #8
 801002e:	4629      	mov	r1, r5
 8010030:	f001 f858 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010034:	4601      	mov	r1, r0
 8010036:	f104 0010 	add.w	r0, r4, #16
 801003a:	440d      	add	r5, r1
 801003c:	4629      	mov	r1, r5
 801003e:	f000 f82f 	bl	80100a0 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010042:	4601      	mov	r1, r0
 8010044:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010048:	440d      	add	r5, r1
 801004a:	4629      	mov	r1, r5
 801004c:	f000 f934 	bl	80102b8 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010050:	4428      	add	r0, r5
 8010052:	bd38      	pop	{r3, r4, r5, pc}

08010054 <_Control__max_serialized_size>:
 8010054:	b530      	push	{r4, r5, lr}
 8010056:	b083      	sub	sp, #12
 8010058:	2301      	movs	r3, #1
 801005a:	2100      	movs	r1, #0
 801005c:	f10d 0007 	add.w	r0, sp, #7
 8010060:	f88d 3007 	strb.w	r3, [sp, #7]
 8010064:	f001 f88e 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010068:	4604      	mov	r4, r0
 801006a:	f10d 0007 	add.w	r0, sp, #7
 801006e:	4621      	mov	r1, r4
 8010070:	f001 f888 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010074:	4605      	mov	r5, r0
 8010076:	f10d 0007 	add.w	r0, sp, #7
 801007a:	4425      	add	r5, r4
 801007c:	4629      	mov	r1, r5
 801007e:	f000 f8c7 	bl	8010210 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8010082:	4604      	mov	r4, r0
 8010084:	f10d 0007 	add.w	r0, sp, #7
 8010088:	442c      	add	r4, r5
 801008a:	4621      	mov	r1, r4
 801008c:	f000 f980 	bl	8010390 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010090:	4420      	add	r0, r4
 8010092:	b003      	add	sp, #12
 8010094:	bd30      	pop	{r4, r5, pc}
 8010096:	bf00      	nop

08010098 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8010098:	4800      	ldr	r0, [pc, #0]	@ (801009c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 801009a:	4770      	bx	lr
 801009c:	24000410 	.word	0x24000410

080100a0 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 80100a0:	b5b0      	push	{r4, r5, r7, lr}
 80100a2:	4604      	mov	r4, r0
 80100a4:	b1f0      	cbz	r0, 80100e4 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 80100a6:	460d      	mov	r5, r1
 80100a8:	f001 f81c 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80100ac:	4607      	mov	r7, r0
 80100ae:	f104 0008 	add.w	r0, r4, #8
 80100b2:	442f      	add	r7, r5
 80100b4:	f1c5 0501 	rsb	r5, r5, #1
 80100b8:	4639      	mov	r1, r7
 80100ba:	f001 f813 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80100be:	4407      	add	r7, r0
 80100c0:	2104      	movs	r1, #4
 80100c2:	4638      	mov	r0, r7
 80100c4:	f002 fb12 	bl	80126ec <ucdr_alignment>
 80100c8:	2104      	movs	r1, #4
 80100ca:	1844      	adds	r4, r0, r1
 80100cc:	443c      	add	r4, r7
 80100ce:	4620      	mov	r0, r4
 80100d0:	f002 fb0c 	bl	80126ec <ucdr_alignment>
 80100d4:	3004      	adds	r0, #4
 80100d6:	2101      	movs	r1, #1
 80100d8:	4404      	add	r4, r0
 80100da:	4620      	mov	r0, r4
 80100dc:	f002 fb06 	bl	80126ec <ucdr_alignment>
 80100e0:	4428      	add	r0, r5
 80100e2:	4420      	add	r0, r4
 80100e4:	bdb0      	pop	{r4, r5, r7, pc}
 80100e6:	bf00      	nop

080100e8 <_Lateral__cdr_deserialize>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	460c      	mov	r4, r1
 80100ec:	b311      	cbz	r1, 8010134 <_Lateral__cdr_deserialize+0x4c>
 80100ee:	4605      	mov	r5, r0
 80100f0:	f001 f85c 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80100f4:	4603      	mov	r3, r0
 80100f6:	4621      	mov	r1, r4
 80100f8:	4628      	mov	r0, r5
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	4798      	blx	r3
 8010100:	f001 f854 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010104:	4603      	mov	r3, r0
 8010106:	f104 0108 	add.w	r1, r4, #8
 801010a:	4628      	mov	r0, r5
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	4798      	blx	r3
 8010112:	f104 0110 	add.w	r1, r4, #16
 8010116:	4628      	mov	r0, r5
 8010118:	f002 f86a 	bl	80121f0 <ucdr_deserialize_float>
 801011c:	f104 0114 	add.w	r1, r4, #20
 8010120:	4628      	mov	r0, r5
 8010122:	f002 f865 	bl	80121f0 <ucdr_deserialize_float>
 8010126:	f104 0118 	add.w	r1, r4, #24
 801012a:	4628      	mov	r0, r5
 801012c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010130:	f001 b856 	b.w	80111e0 <ucdr_deserialize_bool>
 8010134:	4608      	mov	r0, r1
 8010136:	bd38      	pop	{r3, r4, r5, pc}

08010138 <_Lateral__cdr_serialize>:
 8010138:	b318      	cbz	r0, 8010182 <_Lateral__cdr_serialize+0x4a>
 801013a:	b538      	push	{r3, r4, r5, lr}
 801013c:	4604      	mov	r4, r0
 801013e:	460d      	mov	r5, r1
 8010140:	f001 f834 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010144:	4603      	mov	r3, r0
 8010146:	4629      	mov	r1, r5
 8010148:	4620      	mov	r0, r4
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	4798      	blx	r3
 8010150:	f001 f82c 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010154:	4603      	mov	r3, r0
 8010156:	4629      	mov	r1, r5
 8010158:	f104 0008 	add.w	r0, r4, #8
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	4798      	blx	r3
 8010162:	ed94 0a04 	vldr	s0, [r4, #16]
 8010166:	4628      	mov	r0, r5
 8010168:	f001 ffaa 	bl	80120c0 <ucdr_serialize_float>
 801016c:	ed94 0a05 	vldr	s0, [r4, #20]
 8010170:	4628      	mov	r0, r5
 8010172:	f001 ffa5 	bl	80120c0 <ucdr_serialize_float>
 8010176:	7e21      	ldrb	r1, [r4, #24]
 8010178:	4628      	mov	r0, r5
 801017a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801017e:	f001 b819 	b.w	80111b4 <ucdr_serialize_bool>
 8010182:	4770      	bx	lr

08010184 <_Lateral__get_serialized_size>:
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	4604      	mov	r4, r0
 8010188:	b1d8      	cbz	r0, 80101c2 <_Lateral__get_serialized_size+0x3e>
 801018a:	2100      	movs	r1, #0
 801018c:	f000 ffaa 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010190:	4605      	mov	r5, r0
 8010192:	f104 0008 	add.w	r0, r4, #8
 8010196:	4629      	mov	r1, r5
 8010198:	f000 ffa4 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 801019c:	4405      	add	r5, r0
 801019e:	2104      	movs	r1, #4
 80101a0:	4628      	mov	r0, r5
 80101a2:	f002 faa3 	bl	80126ec <ucdr_alignment>
 80101a6:	2104      	movs	r1, #4
 80101a8:	4408      	add	r0, r1
 80101aa:	1944      	adds	r4, r0, r5
 80101ac:	4620      	mov	r0, r4
 80101ae:	f002 fa9d 	bl	80126ec <ucdr_alignment>
 80101b2:	3004      	adds	r0, #4
 80101b4:	2101      	movs	r1, #1
 80101b6:	4404      	add	r4, r0
 80101b8:	4620      	mov	r0, r4
 80101ba:	f002 fa97 	bl	80126ec <ucdr_alignment>
 80101be:	3001      	adds	r0, #1
 80101c0:	4420      	add	r0, r4
 80101c2:	bd38      	pop	{r3, r4, r5, pc}

080101c4 <_Lateral__max_serialized_size>:
 80101c4:	b530      	push	{r4, r5, lr}
 80101c6:	b083      	sub	sp, #12
 80101c8:	2501      	movs	r5, #1
 80101ca:	2100      	movs	r1, #0
 80101cc:	f10d 0007 	add.w	r0, sp, #7
 80101d0:	f88d 5007 	strb.w	r5, [sp, #7]
 80101d4:	f000 ffd6 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 80101d8:	4604      	mov	r4, r0
 80101da:	f10d 0007 	add.w	r0, sp, #7
 80101de:	4621      	mov	r1, r4
 80101e0:	f000 ffd0 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 80101e4:	4404      	add	r4, r0
 80101e6:	2104      	movs	r1, #4
 80101e8:	4620      	mov	r0, r4
 80101ea:	f002 fa7f 	bl	80126ec <ucdr_alignment>
 80101ee:	2104      	movs	r1, #4
 80101f0:	4408      	add	r0, r1
 80101f2:	4404      	add	r4, r0
 80101f4:	4620      	mov	r0, r4
 80101f6:	f002 fa79 	bl	80126ec <ucdr_alignment>
 80101fa:	3004      	adds	r0, #4
 80101fc:	4629      	mov	r1, r5
 80101fe:	4404      	add	r4, r0
 8010200:	4620      	mov	r0, r4
 8010202:	f002 fa73 	bl	80126ec <ucdr_alignment>
 8010206:	4428      	add	r0, r5
 8010208:	4420      	add	r0, r4
 801020a:	b003      	add	sp, #12
 801020c:	bd30      	pop	{r4, r5, pc}
 801020e:	bf00      	nop

08010210 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010212:	2701      	movs	r7, #1
 8010214:	460c      	mov	r4, r1
 8010216:	4606      	mov	r6, r0
 8010218:	7007      	strb	r7, [r0, #0]
 801021a:	f000 ffb3 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 801021e:	4605      	mov	r5, r0
 8010220:	4630      	mov	r0, r6
 8010222:	4425      	add	r5, r4
 8010224:	1b3c      	subs	r4, r7, r4
 8010226:	4629      	mov	r1, r5
 8010228:	f000 ffac 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 801022c:	4405      	add	r5, r0
 801022e:	2104      	movs	r1, #4
 8010230:	4628      	mov	r0, r5
 8010232:	f002 fa5b 	bl	80126ec <ucdr_alignment>
 8010236:	2104      	movs	r1, #4
 8010238:	4408      	add	r0, r1
 801023a:	4405      	add	r5, r0
 801023c:	4628      	mov	r0, r5
 801023e:	f002 fa55 	bl	80126ec <ucdr_alignment>
 8010242:	3004      	adds	r0, #4
 8010244:	4639      	mov	r1, r7
 8010246:	4405      	add	r5, r0
 8010248:	4628      	mov	r0, r5
 801024a:	f002 fa4f 	bl	80126ec <ucdr_alignment>
 801024e:	4420      	add	r0, r4
 8010250:	4428      	add	r0, r5
 8010252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010254 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8010254:	4800      	ldr	r0, [pc, #0]	@ (8010258 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 8010256:	4770      	bx	lr
 8010258:	24000438 	.word	0x24000438

0801025c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 801025c:	b570      	push	{r4, r5, r6, lr}
 801025e:	460c      	mov	r4, r1
 8010260:	4606      	mov	r6, r0
 8010262:	f000 ff3f 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010266:	4605      	mov	r5, r0
 8010268:	f106 0008 	add.w	r0, r6, #8
 801026c:	4425      	add	r5, r4
 801026e:	f1c4 0401 	rsb	r4, r4, #1
 8010272:	4629      	mov	r1, r5
 8010274:	f000 ff36 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010278:	4405      	add	r5, r0
 801027a:	2104      	movs	r1, #4
 801027c:	4628      	mov	r0, r5
 801027e:	f002 fa35 	bl	80126ec <ucdr_alignment>
 8010282:	2104      	movs	r1, #4
 8010284:	4408      	add	r0, r1
 8010286:	4405      	add	r5, r0
 8010288:	4628      	mov	r0, r5
 801028a:	f002 fa2f 	bl	80126ec <ucdr_alignment>
 801028e:	2104      	movs	r1, #4
 8010290:	4408      	add	r0, r1
 8010292:	1946      	adds	r6, r0, r5
 8010294:	4630      	mov	r0, r6
 8010296:	f002 fa29 	bl	80126ec <ucdr_alignment>
 801029a:	1d05      	adds	r5, r0, #4
 801029c:	2101      	movs	r1, #1
 801029e:	4435      	add	r5, r6
 80102a0:	4628      	mov	r0, r5
 80102a2:	f002 fa23 	bl	80126ec <ucdr_alignment>
 80102a6:	2101      	movs	r1, #1
 80102a8:	4408      	add	r0, r1
 80102aa:	4405      	add	r5, r0
 80102ac:	4628      	mov	r0, r5
 80102ae:	f002 fa1d 	bl	80126ec <ucdr_alignment>
 80102b2:	4420      	add	r0, r4
 80102b4:	4428      	add	r0, r5
 80102b6:	bd70      	pop	{r4, r5, r6, pc}

080102b8 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 80102b8:	b108      	cbz	r0, 80102be <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 80102ba:	f7ff bfcf 	b.w	801025c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 80102be:	4770      	bx	lr

080102c0 <_Longitudinal__get_serialized_size>:
 80102c0:	b110      	cbz	r0, 80102c8 <_Longitudinal__get_serialized_size+0x8>
 80102c2:	2100      	movs	r1, #0
 80102c4:	f7ff bfca 	b.w	801025c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop

080102cc <_Longitudinal__cdr_deserialize>:
 80102cc:	b538      	push	{r3, r4, r5, lr}
 80102ce:	460c      	mov	r4, r1
 80102d0:	b361      	cbz	r1, 801032c <_Longitudinal__cdr_deserialize+0x60>
 80102d2:	4605      	mov	r5, r0
 80102d4:	f000 ff6a 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102d8:	4603      	mov	r3, r0
 80102da:	4621      	mov	r1, r4
 80102dc:	4628      	mov	r0, r5
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	4798      	blx	r3
 80102e4:	f000 ff62 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80102e8:	4603      	mov	r3, r0
 80102ea:	f104 0108 	add.w	r1, r4, #8
 80102ee:	4628      	mov	r0, r5
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	4798      	blx	r3
 80102f6:	f104 0110 	add.w	r1, r4, #16
 80102fa:	4628      	mov	r0, r5
 80102fc:	f001 ff78 	bl	80121f0 <ucdr_deserialize_float>
 8010300:	f104 0114 	add.w	r1, r4, #20
 8010304:	4628      	mov	r0, r5
 8010306:	f001 ff73 	bl	80121f0 <ucdr_deserialize_float>
 801030a:	f104 0118 	add.w	r1, r4, #24
 801030e:	4628      	mov	r0, r5
 8010310:	f001 ff6e 	bl	80121f0 <ucdr_deserialize_float>
 8010314:	f104 011c 	add.w	r1, r4, #28
 8010318:	4628      	mov	r0, r5
 801031a:	f000 ff61 	bl	80111e0 <ucdr_deserialize_bool>
 801031e:	f104 011d 	add.w	r1, r4, #29
 8010322:	4628      	mov	r0, r5
 8010324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010328:	f000 bf5a 	b.w	80111e0 <ucdr_deserialize_bool>
 801032c:	4608      	mov	r0, r1
 801032e:	bd38      	pop	{r3, r4, r5, pc}

08010330 <_Longitudinal__cdr_serialize>:
 8010330:	b360      	cbz	r0, 801038c <_Longitudinal__cdr_serialize+0x5c>
 8010332:	b538      	push	{r3, r4, r5, lr}
 8010334:	4604      	mov	r4, r0
 8010336:	460d      	mov	r5, r1
 8010338:	f000 ff38 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801033c:	4603      	mov	r3, r0
 801033e:	4629      	mov	r1, r5
 8010340:	4620      	mov	r0, r4
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	4798      	blx	r3
 8010348:	f000 ff30 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801034c:	4603      	mov	r3, r0
 801034e:	4629      	mov	r1, r5
 8010350:	f104 0008 	add.w	r0, r4, #8
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	4798      	blx	r3
 801035a:	ed94 0a04 	vldr	s0, [r4, #16]
 801035e:	4628      	mov	r0, r5
 8010360:	f001 feae 	bl	80120c0 <ucdr_serialize_float>
 8010364:	ed94 0a05 	vldr	s0, [r4, #20]
 8010368:	4628      	mov	r0, r5
 801036a:	f001 fea9 	bl	80120c0 <ucdr_serialize_float>
 801036e:	ed94 0a06 	vldr	s0, [r4, #24]
 8010372:	4628      	mov	r0, r5
 8010374:	f001 fea4 	bl	80120c0 <ucdr_serialize_float>
 8010378:	7f21      	ldrb	r1, [r4, #28]
 801037a:	4628      	mov	r0, r5
 801037c:	f000 ff1a 	bl	80111b4 <ucdr_serialize_bool>
 8010380:	7f61      	ldrb	r1, [r4, #29]
 8010382:	4628      	mov	r0, r5
 8010384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010388:	f000 bf14 	b.w	80111b4 <ucdr_serialize_bool>
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop

08010390 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8010390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010392:	2701      	movs	r7, #1
 8010394:	460c      	mov	r4, r1
 8010396:	4606      	mov	r6, r0
 8010398:	7007      	strb	r7, [r0, #0]
 801039a:	f000 fef3 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 801039e:	4605      	mov	r5, r0
 80103a0:	4630      	mov	r0, r6
 80103a2:	4425      	add	r5, r4
 80103a4:	1b3c      	subs	r4, r7, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	f000 feec 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 80103ac:	4405      	add	r5, r0
 80103ae:	2104      	movs	r1, #4
 80103b0:	4628      	mov	r0, r5
 80103b2:	f002 f99b 	bl	80126ec <ucdr_alignment>
 80103b6:	2104      	movs	r1, #4
 80103b8:	4408      	add	r0, r1
 80103ba:	4405      	add	r5, r0
 80103bc:	4628      	mov	r0, r5
 80103be:	f002 f995 	bl	80126ec <ucdr_alignment>
 80103c2:	2104      	movs	r1, #4
 80103c4:	4408      	add	r0, r1
 80103c6:	1946      	adds	r6, r0, r5
 80103c8:	4630      	mov	r0, r6
 80103ca:	f002 f98f 	bl	80126ec <ucdr_alignment>
 80103ce:	1d05      	adds	r5, r0, #4
 80103d0:	4639      	mov	r1, r7
 80103d2:	4435      	add	r5, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	f002 f989 	bl	80126ec <ucdr_alignment>
 80103da:	4438      	add	r0, r7
 80103dc:	4639      	mov	r1, r7
 80103de:	4405      	add	r5, r0
 80103e0:	4628      	mov	r0, r5
 80103e2:	f002 f983 	bl	80126ec <ucdr_alignment>
 80103e6:	4420      	add	r0, r4
 80103e8:	4428      	add	r0, r5
 80103ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080103ec <_Longitudinal__max_serialized_size>:
 80103ec:	b500      	push	{lr}
 80103ee:	b083      	sub	sp, #12
 80103f0:	2100      	movs	r1, #0
 80103f2:	f10d 0007 	add.w	r0, sp, #7
 80103f6:	f7ff ffcb 	bl	8010390 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80103fa:	b003      	add	sp, #12
 80103fc:	f85d fb04 	ldr.w	pc, [sp], #4

08010400 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 8010400:	4800      	ldr	r0, [pc, #0]	@ (8010404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 8010402:	4770      	bx	lr
 8010404:	24000460 	.word	0x24000460

08010408 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8010408:	4b04      	ldr	r3, [pc, #16]	@ (801041c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	b10a      	cbz	r2, 8010412 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 801040e:	4803      	ldr	r0, [pc, #12]	@ (801041c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8010410:	4770      	bx	lr
 8010412:	4a03      	ldr	r2, [pc, #12]	@ (8010420 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8010414:	4801      	ldr	r0, [pc, #4]	@ (801041c <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8010416:	6812      	ldr	r2, [r2, #0]
 8010418:	601a      	str	r2, [r3, #0]
 801041a:	4770      	bx	lr
 801041c:	24000490 	.word	0x24000490
 8010420:	24000e10 	.word	0x24000e10

08010424 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010424:	4b04      	ldr	r3, [pc, #16]	@ (8010438 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8010426:	4805      	ldr	r0, [pc, #20]	@ (801043c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4905      	ldr	r1, [pc, #20]	@ (8010440 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 801042c:	4a05      	ldr	r2, [pc, #20]	@ (8010444 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801042e:	6003      	str	r3, [r0, #0]
 8010430:	600b      	str	r3, [r1, #0]
 8010432:	6013      	str	r3, [r2, #0]
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	24000e10 	.word	0x24000e10
 801043c:	240004ac 	.word	0x240004ac
 8010440:	240004b8 	.word	0x240004b8
 8010444:	24000490 	.word	0x24000490

08010448 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010448:	4b04      	ldr	r3, [pc, #16]	@ (801045c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	b10a      	cbz	r2, 8010452 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 801044e:	4803      	ldr	r0, [pc, #12]	@ (801045c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8010450:	4770      	bx	lr
 8010452:	4a03      	ldr	r2, [pc, #12]	@ (8010460 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 8010454:	4801      	ldr	r0, [pc, #4]	@ (801045c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 8010456:	6812      	ldr	r2, [r2, #0]
 8010458:	601a      	str	r2, [r3, #0]
 801045a:	4770      	bx	lr
 801045c:	240004cc 	.word	0x240004cc
 8010460:	24000e10 	.word	0x24000e10

08010464 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010464:	4a02      	ldr	r2, [pc, #8]	@ (8010470 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 8010466:	4b03      	ldr	r3, [pc, #12]	@ (8010474 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 8010468:	6812      	ldr	r2, [r2, #0]
 801046a:	601a      	str	r2, [r3, #0]
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	24000e10 	.word	0x24000e10
 8010474:	240004cc 	.word	0x240004cc

08010478 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010478:	4b04      	ldr	r3, [pc, #16]	@ (801048c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	b10a      	cbz	r2, 8010482 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 801047e:	4803      	ldr	r0, [pc, #12]	@ (801048c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8010480:	4770      	bx	lr
 8010482:	4a03      	ldr	r2, [pc, #12]	@ (8010490 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 8010484:	4801      	ldr	r0, [pc, #4]	@ (801048c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 8010486:	6812      	ldr	r2, [r2, #0]
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	4770      	bx	lr
 801048c:	240004e0 	.word	0x240004e0
 8010490:	24000e10 	.word	0x24000e10

08010494 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010494:	4a02      	ldr	r2, [pc, #8]	@ (80104a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8010496:	4b03      	ldr	r3, [pc, #12]	@ (80104a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8010498:	6812      	ldr	r2, [r2, #0]
 801049a:	601a      	str	r2, [r3, #0]
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	24000e10 	.word	0x24000e10
 80104a4:	240004e0 	.word	0x240004e0

080104a8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 80104a8:	4b04      	ldr	r3, [pc, #16]	@ (80104bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	b10a      	cbz	r2, 80104b2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 80104ae:	4803      	ldr	r0, [pc, #12]	@ (80104bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 80104b0:	4770      	bx	lr
 80104b2:	4a03      	ldr	r2, [pc, #12]	@ (80104c0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 80104b4:	4801      	ldr	r0, [pc, #4]	@ (80104bc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 80104b6:	6812      	ldr	r2, [r2, #0]
 80104b8:	601a      	str	r2, [r3, #0]
 80104ba:	4770      	bx	lr
 80104bc:	240004f4 	.word	0x240004f4
 80104c0:	24000e10 	.word	0x24000e10

080104c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 80104c4:	4a02      	ldr	r2, [pc, #8]	@ (80104d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 80104c6:	4b03      	ldr	r3, [pc, #12]	@ (80104d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 80104c8:	6812      	ldr	r2, [r2, #0]
 80104ca:	601a      	str	r2, [r3, #0]
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	24000e10 	.word	0x24000e10
 80104d4:	240004f4 	.word	0x240004f4

080104d8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80104d8:	4b04      	ldr	r3, [pc, #16]	@ (80104ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	b10a      	cbz	r2, 80104e2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 80104de:	4803      	ldr	r0, [pc, #12]	@ (80104ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 80104e0:	4770      	bx	lr
 80104e2:	4a03      	ldr	r2, [pc, #12]	@ (80104f0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 80104e4:	4801      	ldr	r0, [pc, #4]	@ (80104ec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 80104e6:	6812      	ldr	r2, [r2, #0]
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	4770      	bx	lr
 80104ec:	24000508 	.word	0x24000508
 80104f0:	24000e10 	.word	0x24000e10

080104f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 80104f4:	4a02      	ldr	r2, [pc, #8]	@ (8010500 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 80104f6:	4b03      	ldr	r3, [pc, #12]	@ (8010504 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 80104f8:	6812      	ldr	r2, [r2, #0]
 80104fa:	601a      	str	r2, [r3, #0]
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	24000e10 	.word	0x24000e10
 8010504:	24000508 	.word	0x24000508

08010508 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010508:	4b04      	ldr	r3, [pc, #16]	@ (801051c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	b10a      	cbz	r2, 8010512 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 801050e:	4803      	ldr	r0, [pc, #12]	@ (801051c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8010510:	4770      	bx	lr
 8010512:	4a03      	ldr	r2, [pc, #12]	@ (8010520 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8010514:	4801      	ldr	r0, [pc, #4]	@ (801051c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8010516:	6812      	ldr	r2, [r2, #0]
 8010518:	601a      	str	r2, [r3, #0]
 801051a:	4770      	bx	lr
 801051c:	2400051c 	.word	0x2400051c
 8010520:	24000e10 	.word	0x24000e10

08010524 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010524:	4a02      	ldr	r2, [pc, #8]	@ (8010530 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8010526:	4b03      	ldr	r3, [pc, #12]	@ (8010534 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8010528:	6812      	ldr	r2, [r2, #0]
 801052a:	601a      	str	r2, [r3, #0]
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	24000e10 	.word	0x24000e10
 8010534:	2400051c 	.word	0x2400051c

08010538 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010538:	4b04      	ldr	r3, [pc, #16]	@ (801054c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	b10a      	cbz	r2, 8010542 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 801053e:	4803      	ldr	r0, [pc, #12]	@ (801054c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8010540:	4770      	bx	lr
 8010542:	4a03      	ldr	r2, [pc, #12]	@ (8010550 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 8010544:	4801      	ldr	r0, [pc, #4]	@ (801054c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 8010546:	6812      	ldr	r2, [r2, #0]
 8010548:	601a      	str	r2, [r3, #0]
 801054a:	4770      	bx	lr
 801054c:	24000530 	.word	0x24000530
 8010550:	24000e10 	.word	0x24000e10

08010554 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010554:	4a02      	ldr	r2, [pc, #8]	@ (8010560 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 8010556:	4b03      	ldr	r3, [pc, #12]	@ (8010564 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 8010558:	6812      	ldr	r2, [r2, #0]
 801055a:	601a      	str	r2, [r3, #0]
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop
 8010560:	24000e10 	.word	0x24000e10
 8010564:	24000530 	.word	0x24000530

08010568 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010568:	4b04      	ldr	r3, [pc, #16]	@ (801057c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	b10a      	cbz	r2, 8010572 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 801056e:	4803      	ldr	r0, [pc, #12]	@ (801057c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8010570:	4770      	bx	lr
 8010572:	4a03      	ldr	r2, [pc, #12]	@ (8010580 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8010574:	4801      	ldr	r0, [pc, #4]	@ (801057c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8010576:	6812      	ldr	r2, [r2, #0]
 8010578:	601a      	str	r2, [r3, #0]
 801057a:	4770      	bx	lr
 801057c:	24000544 	.word	0x24000544
 8010580:	24000e10 	.word	0x24000e10

08010584 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010584:	4a02      	ldr	r2, [pc, #8]	@ (8010590 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 8010586:	4b03      	ldr	r3, [pc, #12]	@ (8010594 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 8010588:	6812      	ldr	r2, [r2, #0]
 801058a:	601a      	str	r2, [r3, #0]
 801058c:	4770      	bx	lr
 801058e:	bf00      	nop
 8010590:	24000e10 	.word	0x24000e10
 8010594:	24000544 	.word	0x24000544

08010598 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010598:	4b04      	ldr	r3, [pc, #16]	@ (80105ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	b10a      	cbz	r2, 80105a2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 801059e:	4803      	ldr	r0, [pc, #12]	@ (80105ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 80105a0:	4770      	bx	lr
 80105a2:	4a03      	ldr	r2, [pc, #12]	@ (80105b0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 80105a4:	4801      	ldr	r0, [pc, #4]	@ (80105ac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 80105a6:	6812      	ldr	r2, [r2, #0]
 80105a8:	601a      	str	r2, [r3, #0]
 80105aa:	4770      	bx	lr
 80105ac:	24000558 	.word	0x24000558
 80105b0:	24000e10 	.word	0x24000e10

080105b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 80105b4:	4a02      	ldr	r2, [pc, #8]	@ (80105c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 80105b6:	4b03      	ldr	r3, [pc, #12]	@ (80105c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 80105b8:	6812      	ldr	r2, [r2, #0]
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	24000e10 	.word	0x24000e10
 80105c4:	24000558 	.word	0x24000558

080105c8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80105c8:	4b04      	ldr	r3, [pc, #16]	@ (80105dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	b10a      	cbz	r2, 80105d2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 80105ce:	4803      	ldr	r0, [pc, #12]	@ (80105dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 80105d0:	4770      	bx	lr
 80105d2:	4a03      	ldr	r2, [pc, #12]	@ (80105e0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 80105d4:	4801      	ldr	r0, [pc, #4]	@ (80105dc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 80105d6:	6812      	ldr	r2, [r2, #0]
 80105d8:	601a      	str	r2, [r3, #0]
 80105da:	4770      	bx	lr
 80105dc:	2400056c 	.word	0x2400056c
 80105e0:	24000e10 	.word	0x24000e10

080105e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80105e4:	4a02      	ldr	r2, [pc, #8]	@ (80105f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 80105e6:	4b03      	ldr	r3, [pc, #12]	@ (80105f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 80105e8:	6812      	ldr	r2, [r2, #0]
 80105ea:	601a      	str	r2, [r3, #0]
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	24000e10 	.word	0x24000e10
 80105f4:	2400056c 	.word	0x2400056c

080105f8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 80105f8:	f003 bdca 	b.w	8014190 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

080105fc <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80105fc:	f003 bdda 	b.w	80141b4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

08010600 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 8010600:	f003 bddc 	b.w	80141bc <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

08010604 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 8010604:	f003 bdde 	b.w	80141c4 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

08010608 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010608:	b508      	push	{r3, lr}
 801060a:	f000 fd5d 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801060e:	4b06      	ldr	r3, [pc, #24]	@ (8010628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010610:	4906      	ldr	r1, [pc, #24]	@ (801062c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	60c8      	str	r0, [r1, #12]
 8010616:	b10a      	cbz	r2, 801061c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 8010618:	4803      	ldr	r0, [pc, #12]	@ (8010628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 801061a:	bd08      	pop	{r3, pc}
 801061c:	4a04      	ldr	r2, [pc, #16]	@ (8010630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 801061e:	4802      	ldr	r0, [pc, #8]	@ (8010628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8010620:	6812      	ldr	r2, [r2, #0]
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	bd08      	pop	{r3, pc}
 8010626:	bf00      	nop
 8010628:	240005f0 	.word	0x240005f0
 801062c:	24000578 	.word	0x24000578
 8010630:	24000e14 	.word	0x24000e14

08010634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010634:	4b04      	ldr	r3, [pc, #16]	@ (8010648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	b10a      	cbz	r2, 801063e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 801063a:	4803      	ldr	r0, [pc, #12]	@ (8010648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 801063c:	4770      	bx	lr
 801063e:	4a03      	ldr	r2, [pc, #12]	@ (801064c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 8010640:	4801      	ldr	r0, [pc, #4]	@ (8010648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 8010642:	6812      	ldr	r2, [r2, #0]
 8010644:	601a      	str	r2, [r3, #0]
 8010646:	4770      	bx	lr
 8010648:	24000638 	.word	0x24000638
 801064c:	24000e14 	.word	0x24000e14

08010650 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8010650:	4b16      	ldr	r3, [pc, #88]	@ (80106ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	b510      	push	{r4, lr}
 8010656:	b132      	cbz	r2, 8010666 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 8010658:	685c      	ldr	r4, [r3, #4]
 801065a:	68a3      	ldr	r3, [r4, #8]
 801065c:	b153      	cbz	r3, 8010674 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 801065e:	68e3      	ldr	r3, [r4, #12]
 8010660:	b1a3      	cbz	r3, 801068c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8010662:	4812      	ldr	r0, [pc, #72]	@ (80106ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010664:	bd10      	pop	{r4, pc}
 8010666:	4a12      	ldr	r2, [pc, #72]	@ (80106b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010668:	685c      	ldr	r4, [r3, #4]
 801066a:	6812      	ldr	r2, [r2, #0]
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	68a3      	ldr	r3, [r4, #8]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1f4      	bne.n	801065e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8010674:	f000 fd28 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010678:	4b0e      	ldr	r3, [pc, #56]	@ (80106b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 801067a:	490f      	ldr	r1, [pc, #60]	@ (80106b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	60c8      	str	r0, [r1, #12]
 8010680:	b17a      	cbz	r2, 80106a2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	60a3      	str	r3, [r4, #8]
 8010686:	68e3      	ldr	r3, [r4, #12]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1ea      	bne.n	8010662 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 801068c:	4b0b      	ldr	r3, [pc, #44]	@ (80106bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	b11a      	cbz	r2, 801069a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	4805      	ldr	r0, [pc, #20]	@ (80106ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010696:	60e3      	str	r3, [r4, #12]
 8010698:	bd10      	pop	{r4, pc}
 801069a:	4a05      	ldr	r2, [pc, #20]	@ (80106b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 801069c:	6812      	ldr	r2, [r2, #0]
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	e7f7      	b.n	8010692 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 80106a2:	4a03      	ldr	r2, [pc, #12]	@ (80106b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 80106a4:	6812      	ldr	r2, [r2, #0]
 80106a6:	601a      	str	r2, [r3, #0]
 80106a8:	e7eb      	b.n	8010682 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 80106aa:	bf00      	nop
 80106ac:	24000654 	.word	0x24000654
 80106b0:	24000e14 	.word	0x24000e14
 80106b4:	240005f0 	.word	0x240005f0
 80106b8:	24000578 	.word	0x24000578
 80106bc:	24000638 	.word	0x24000638

080106c0 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 80106c0:	f003 bd82 	b.w	80141c8 <autoware_vehicle_msgs__msg__ControlModeReport__init>

080106c4 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 80106c4:	f003 bd92 	b.w	80141ec <autoware_vehicle_msgs__msg__ControlModeReport__fini>

080106c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 80106c8:	b508      	push	{r3, lr}
 80106ca:	f000 fcfd 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80106ce:	4b06      	ldr	r3, [pc, #24]	@ (80106e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80106d0:	4906      	ldr	r1, [pc, #24]	@ (80106ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	60c8      	str	r0, [r1, #12]
 80106d6:	b10a      	cbz	r2, 80106dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 80106d8:	4803      	ldr	r0, [pc, #12]	@ (80106e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80106da:	bd08      	pop	{r3, pc}
 80106dc:	4a04      	ldr	r2, [pc, #16]	@ (80106f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 80106de:	4802      	ldr	r0, [pc, #8]	@ (80106e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 80106e0:	6812      	ldr	r2, [r2, #0]
 80106e2:	601a      	str	r2, [r3, #0]
 80106e4:	bd08      	pop	{r3, pc}
 80106e6:	bf00      	nop
 80106e8:	240006d8 	.word	0x240006d8
 80106ec:	24000660 	.word	0x24000660
 80106f0:	24000e14 	.word	0x24000e14

080106f4 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 80106f4:	f003 bd7e 	b.w	80141f4 <autoware_vehicle_msgs__msg__GearCommand__init>

080106f8 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 80106f8:	f003 bd8e 	b.w	8014218 <autoware_vehicle_msgs__msg__GearCommand__fini>

080106fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 80106fc:	b508      	push	{r3, lr}
 80106fe:	f000 fce3 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010702:	4b06      	ldr	r3, [pc, #24]	@ (801071c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010704:	4906      	ldr	r1, [pc, #24]	@ (8010720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	60c8      	str	r0, [r1, #12]
 801070a:	b10a      	cbz	r2, 8010710 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 801070c:	4803      	ldr	r0, [pc, #12]	@ (801071c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 801070e:	bd08      	pop	{r3, pc}
 8010710:	4a04      	ldr	r2, [pc, #16]	@ (8010724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 8010712:	4802      	ldr	r0, [pc, #8]	@ (801071c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010714:	6812      	ldr	r2, [r2, #0]
 8010716:	601a      	str	r2, [r3, #0]
 8010718:	bd08      	pop	{r3, pc}
 801071a:	bf00      	nop
 801071c:	2400075c 	.word	0x2400075c
 8010720:	240006e4 	.word	0x240006e4
 8010724:	24000e14 	.word	0x24000e14

08010728 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8010728:	f003 bd7a 	b.w	8014220 <autoware_vehicle_msgs__msg__GearReport__init>

0801072c <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 801072c:	f003 bd8a 	b.w	8014244 <autoware_vehicle_msgs__msg__GearReport__fini>

08010730 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010730:	b508      	push	{r3, lr}
 8010732:	f000 fcc9 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010736:	4b06      	ldr	r3, [pc, #24]	@ (8010750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010738:	4906      	ldr	r1, [pc, #24]	@ (8010754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	60c8      	str	r0, [r1, #12]
 801073e:	b10a      	cbz	r2, 8010744 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 8010740:	4803      	ldr	r0, [pc, #12]	@ (8010750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010742:	bd08      	pop	{r3, pc}
 8010744:	4a04      	ldr	r2, [pc, #16]	@ (8010758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 8010746:	4802      	ldr	r0, [pc, #8]	@ (8010750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010748:	6812      	ldr	r2, [r2, #0]
 801074a:	601a      	str	r2, [r3, #0]
 801074c:	bd08      	pop	{r3, pc}
 801074e:	bf00      	nop
 8010750:	240007e0 	.word	0x240007e0
 8010754:	24000768 	.word	0x24000768
 8010758:	24000e14 	.word	0x24000e14

0801075c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 801075c:	f003 bd76 	b.w	801424c <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

08010760 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8010760:	f003 bd86 	b.w	8014270 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08010764 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010764:	b508      	push	{r3, lr}
 8010766:	f000 fcaf 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801076a:	4b06      	ldr	r3, [pc, #24]	@ (8010784 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801076c:	4906      	ldr	r1, [pc, #24]	@ (8010788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	60c8      	str	r0, [r1, #12]
 8010772:	b10a      	cbz	r2, 8010778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8010774:	4803      	ldr	r0, [pc, #12]	@ (8010784 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010776:	bd08      	pop	{r3, pc}
 8010778:	4a04      	ldr	r2, [pc, #16]	@ (801078c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 801077a:	4802      	ldr	r0, [pc, #8]	@ (8010784 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801077c:	6812      	ldr	r2, [r2, #0]
 801077e:	601a      	str	r2, [r3, #0]
 8010780:	bd08      	pop	{r3, pc}
 8010782:	bf00      	nop
 8010784:	24000864 	.word	0x24000864
 8010788:	240007ec 	.word	0x240007ec
 801078c:	24000e14 	.word	0x24000e14

08010790 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8010790:	f003 bd72 	b.w	8014278 <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08010794 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8010794:	f003 bd82 	b.w	801429c <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08010798 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010798:	b508      	push	{r3, lr}
 801079a:	f000 fc95 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801079e:	4b06      	ldr	r3, [pc, #24]	@ (80107b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 80107a0:	4906      	ldr	r1, [pc, #24]	@ (80107bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	60c8      	str	r0, [r1, #12]
 80107a6:	b10a      	cbz	r2, 80107ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 80107a8:	4803      	ldr	r0, [pc, #12]	@ (80107b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 80107aa:	bd08      	pop	{r3, pc}
 80107ac:	4a04      	ldr	r2, [pc, #16]	@ (80107c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 80107ae:	4802      	ldr	r0, [pc, #8]	@ (80107b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 80107b0:	6812      	ldr	r2, [r2, #0]
 80107b2:	601a      	str	r2, [r3, #0]
 80107b4:	bd08      	pop	{r3, pc}
 80107b6:	bf00      	nop
 80107b8:	240008e8 	.word	0x240008e8
 80107bc:	24000870 	.word	0x24000870
 80107c0:	24000e14 	.word	0x24000e14

080107c4 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 80107c4:	f003 bd6e 	b.w	80142a4 <autoware_vehicle_msgs__msg__SteeringReport__init>

080107c8 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 80107c8:	f003 bd7e 	b.w	80142c8 <autoware_vehicle_msgs__msg__SteeringReport__fini>

080107cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80107cc:	b508      	push	{r3, lr}
 80107ce:	f000 fc7b 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80107d2:	4b06      	ldr	r3, [pc, #24]	@ (80107ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80107d4:	4906      	ldr	r1, [pc, #24]	@ (80107f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	60c8      	str	r0, [r1, #12]
 80107da:	b10a      	cbz	r2, 80107e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 80107dc:	4803      	ldr	r0, [pc, #12]	@ (80107ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80107de:	bd08      	pop	{r3, pc}
 80107e0:	4a04      	ldr	r2, [pc, #16]	@ (80107f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 80107e2:	4802      	ldr	r0, [pc, #8]	@ (80107ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 80107e4:	6812      	ldr	r2, [r2, #0]
 80107e6:	601a      	str	r2, [r3, #0]
 80107e8:	bd08      	pop	{r3, pc}
 80107ea:	bf00      	nop
 80107ec:	2400096c 	.word	0x2400096c
 80107f0:	240008f4 	.word	0x240008f4
 80107f4:	24000e14 	.word	0x24000e14

080107f8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 80107f8:	f003 bd6a 	b.w	80142d0 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

080107fc <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 80107fc:	f003 bd7a 	b.w	80142f4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08010800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010800:	b508      	push	{r3, lr}
 8010802:	f000 fc61 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010806:	4b06      	ldr	r3, [pc, #24]	@ (8010820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010808:	4906      	ldr	r1, [pc, #24]	@ (8010824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	60c8      	str	r0, [r1, #12]
 801080e:	b10a      	cbz	r2, 8010814 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8010810:	4803      	ldr	r0, [pc, #12]	@ (8010820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010812:	bd08      	pop	{r3, pc}
 8010814:	4a04      	ldr	r2, [pc, #16]	@ (8010828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8010816:	4802      	ldr	r0, [pc, #8]	@ (8010820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010818:	6812      	ldr	r2, [r2, #0]
 801081a:	601a      	str	r2, [r3, #0]
 801081c:	bd08      	pop	{r3, pc}
 801081e:	bf00      	nop
 8010820:	240009f0 	.word	0x240009f0
 8010824:	24000978 	.word	0x24000978
 8010828:	24000e14 	.word	0x24000e14

0801082c <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 801082c:	f003 bd66 	b.w	80142fc <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08010830 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8010830:	f003 bd76 	b.w	8014320 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08010834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010834:	b508      	push	{r3, lr}
 8010836:	f000 fc47 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801083a:	4b06      	ldr	r3, [pc, #24]	@ (8010854 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 801083c:	4906      	ldr	r1, [pc, #24]	@ (8010858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	60c8      	str	r0, [r1, #12]
 8010842:	b10a      	cbz	r2, 8010848 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8010844:	4803      	ldr	r0, [pc, #12]	@ (8010854 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010846:	bd08      	pop	{r3, pc}
 8010848:	4a04      	ldr	r2, [pc, #16]	@ (801085c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 801084a:	4802      	ldr	r0, [pc, #8]	@ (8010854 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 801084c:	6812      	ldr	r2, [r2, #0]
 801084e:	601a      	str	r2, [r3, #0]
 8010850:	bd08      	pop	{r3, pc}
 8010852:	bf00      	nop
 8010854:	24000a74 	.word	0x24000a74
 8010858:	240009fc 	.word	0x240009fc
 801085c:	24000e14 	.word	0x24000e14

08010860 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8010860:	f003 bd62 	b.w	8014328 <autoware_vehicle_msgs__msg__VelocityReport__init>

08010864 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8010864:	f003 bd72 	b.w	801434c <autoware_vehicle_msgs__msg__VelocityReport__fini>

08010868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8010868:	b508      	push	{r3, lr}
 801086a:	f003 f8bb 	bl	80139e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801086e:	4b06      	ldr	r3, [pc, #24]	@ (8010888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010870:	4906      	ldr	r1, [pc, #24]	@ (801088c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	60c8      	str	r0, [r1, #12]
 8010876:	b10a      	cbz	r2, 801087c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8010878:	4803      	ldr	r0, [pc, #12]	@ (8010888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 801087a:	bd08      	pop	{r3, pc}
 801087c:	4a04      	ldr	r2, [pc, #16]	@ (8010890 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 801087e:	4802      	ldr	r0, [pc, #8]	@ (8010888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010880:	6812      	ldr	r2, [r2, #0]
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	bd08      	pop	{r3, pc}
 8010886:	bf00      	nop
 8010888:	24000b70 	.word	0x24000b70
 801088c:	24000a80 	.word	0x24000a80
 8010890:	24000e14 	.word	0x24000e14

08010894 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010894:	4800      	ldr	r0, [pc, #0]	@ (8010898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8010896:	4770      	bx	lr
 8010898:	24000b98 	.word	0x24000b98

0801089c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 801089c:	4800      	ldr	r0, [pc, #0]	@ (80108a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 801089e:	4770      	bx	lr
 80108a0:	24000ba4 	.word	0x24000ba4

080108a4 <_ControlModeCommand_Response__max_serialized_size>:
 80108a4:	2101      	movs	r1, #1
 80108a6:	2000      	movs	r0, #0
 80108a8:	b508      	push	{r3, lr}
 80108aa:	f001 ff1f 	bl	80126ec <ucdr_alignment>
 80108ae:	3001      	adds	r0, #1
 80108b0:	bd08      	pop	{r3, pc}
 80108b2:	bf00      	nop

080108b4 <_ControlModeCommand_Response__cdr_deserialize>:
 80108b4:	b109      	cbz	r1, 80108ba <_ControlModeCommand_Response__cdr_deserialize+0x6>
 80108b6:	f000 bc93 	b.w	80111e0 <ucdr_deserialize_bool>
 80108ba:	4608      	mov	r0, r1
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop

080108c0 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80108c0:	b538      	push	{r3, r4, r5, lr}
 80108c2:	b158      	cbz	r0, 80108dc <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 80108c4:	460d      	mov	r5, r1
 80108c6:	f000 fc0d 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80108ca:	2101      	movs	r1, #1
 80108cc:	182c      	adds	r4, r5, r0
 80108ce:	f1c5 0501 	rsb	r5, r5, #1
 80108d2:	4620      	mov	r0, r4
 80108d4:	f001 ff0a 	bl	80126ec <ucdr_alignment>
 80108d8:	4428      	add	r0, r5
 80108da:	4420      	add	r0, r4
 80108dc:	bd38      	pop	{r3, r4, r5, pc}
 80108de:	bf00      	nop

080108e0 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 80108e0:	b138      	cbz	r0, 80108f2 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 80108e2:	b508      	push	{r3, lr}
 80108e4:	460b      	mov	r3, r1
 80108e6:	2101      	movs	r1, #1
 80108e8:	4618      	mov	r0, r3
 80108ea:	f001 feff 	bl	80126ec <ucdr_alignment>
 80108ee:	3001      	adds	r0, #1
 80108f0:	bd08      	pop	{r3, pc}
 80108f2:	4770      	bx	lr

080108f4 <_ControlModeCommand_Request__cdr_deserialize>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	460c      	mov	r4, r1
 80108f8:	b179      	cbz	r1, 801091a <_ControlModeCommand_Request__cdr_deserialize+0x26>
 80108fa:	4605      	mov	r5, r0
 80108fc:	f000 fc56 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010900:	4603      	mov	r3, r0
 8010902:	4621      	mov	r1, r4
 8010904:	4628      	mov	r0, r5
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	4798      	blx	r3
 801090c:	f104 0108 	add.w	r1, r4, #8
 8010910:	4628      	mov	r0, r5
 8010912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010916:	f000 bc91 	b.w	801123c <ucdr_deserialize_uint8_t>
 801091a:	4608      	mov	r0, r1
 801091c:	bd38      	pop	{r3, r4, r5, pc}
 801091e:	bf00      	nop

08010920 <_ControlModeCommand_Request__cdr_serialize>:
 8010920:	b180      	cbz	r0, 8010944 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8010922:	b538      	push	{r3, r4, r5, lr}
 8010924:	4604      	mov	r4, r0
 8010926:	460d      	mov	r5, r1
 8010928:	f000 fc40 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801092c:	4603      	mov	r3, r0
 801092e:	4629      	mov	r1, r5
 8010930:	4620      	mov	r0, r4
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	4798      	blx	r3
 8010938:	7a21      	ldrb	r1, [r4, #8]
 801093a:	4628      	mov	r0, r5
 801093c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010940:	f000 bc66 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop

08010948 <_ControlModeCommand_Response__cdr_serialize>:
 8010948:	460a      	mov	r2, r1
 801094a:	b118      	cbz	r0, 8010954 <_ControlModeCommand_Response__cdr_serialize+0xc>
 801094c:	7801      	ldrb	r1, [r0, #0]
 801094e:	4610      	mov	r0, r2
 8010950:	f000 bc30 	b.w	80111b4 <ucdr_serialize_bool>
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop

08010958 <_ControlModeCommand_Response__get_serialized_size>:
 8010958:	b130      	cbz	r0, 8010968 <_ControlModeCommand_Response__get_serialized_size+0x10>
 801095a:	2101      	movs	r1, #1
 801095c:	2000      	movs	r0, #0
 801095e:	b508      	push	{r3, lr}
 8010960:	f001 fec4 	bl	80126ec <ucdr_alignment>
 8010964:	3001      	adds	r0, #1
 8010966:	bd08      	pop	{r3, pc}
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop

0801096c <_ControlModeCommand_Request__get_serialized_size>:
 801096c:	b150      	cbz	r0, 8010984 <_ControlModeCommand_Request__get_serialized_size+0x18>
 801096e:	2100      	movs	r1, #0
 8010970:	b510      	push	{r4, lr}
 8010972:	f000 fbb7 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010976:	4604      	mov	r4, r0
 8010978:	2101      	movs	r1, #1
 801097a:	f001 feb7 	bl	80126ec <ucdr_alignment>
 801097e:	4420      	add	r0, r4
 8010980:	3001      	adds	r0, #1
 8010982:	bd10      	pop	{r4, pc}
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop

08010988 <_ControlModeCommand_Request__max_serialized_size>:
 8010988:	b510      	push	{r4, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	2401      	movs	r4, #1
 801098e:	2100      	movs	r1, #0
 8010990:	f10d 0007 	add.w	r0, sp, #7
 8010994:	f88d 4007 	strb.w	r4, [sp, #7]
 8010998:	f000 fbf4 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 801099c:	4621      	mov	r1, r4
 801099e:	4604      	mov	r4, r0
 80109a0:	f001 fea4 	bl	80126ec <ucdr_alignment>
 80109a4:	4420      	add	r0, r4
 80109a6:	3001      	adds	r0, #1
 80109a8:	b002      	add	sp, #8
 80109aa:	bd10      	pop	{r4, pc}

080109ac <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 80109ac:	4800      	ldr	r0, [pc, #0]	@ (80109b0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 80109ae:	4770      	bx	lr
 80109b0:	24000b8c 	.word	0x24000b8c

080109b4 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	b158      	cbz	r0, 80109d0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 80109b8:	460d      	mov	r5, r1
 80109ba:	f000 fb93 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 80109be:	2101      	movs	r1, #1
 80109c0:	182c      	adds	r4, r5, r0
 80109c2:	f1c5 0501 	rsb	r5, r5, #1
 80109c6:	4620      	mov	r0, r4
 80109c8:	f001 fe90 	bl	80126ec <ucdr_alignment>
 80109cc:	4428      	add	r0, r5
 80109ce:	4420      	add	r0, r4
 80109d0:	bd38      	pop	{r3, r4, r5, pc}
 80109d2:	bf00      	nop

080109d4 <_ControlModeReport__cdr_deserialize>:
 80109d4:	b538      	push	{r3, r4, r5, lr}
 80109d6:	460c      	mov	r4, r1
 80109d8:	b179      	cbz	r1, 80109fa <_ControlModeReport__cdr_deserialize+0x26>
 80109da:	4605      	mov	r5, r0
 80109dc:	f000 fbe6 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80109e0:	4603      	mov	r3, r0
 80109e2:	4621      	mov	r1, r4
 80109e4:	4628      	mov	r0, r5
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	4798      	blx	r3
 80109ec:	f104 0108 	add.w	r1, r4, #8
 80109f0:	4628      	mov	r0, r5
 80109f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109f6:	f000 bc21 	b.w	801123c <ucdr_deserialize_uint8_t>
 80109fa:	4608      	mov	r0, r1
 80109fc:	bd38      	pop	{r3, r4, r5, pc}
 80109fe:	bf00      	nop

08010a00 <_ControlModeReport__cdr_serialize>:
 8010a00:	b180      	cbz	r0, 8010a24 <_ControlModeReport__cdr_serialize+0x24>
 8010a02:	b538      	push	{r3, r4, r5, lr}
 8010a04:	4604      	mov	r4, r0
 8010a06:	460d      	mov	r5, r1
 8010a08:	f000 fbd0 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	4629      	mov	r1, r5
 8010a10:	4620      	mov	r0, r4
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	4798      	blx	r3
 8010a18:	7a21      	ldrb	r1, [r4, #8]
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a20:	f000 bbf6 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop

08010a28 <_ControlModeReport__get_serialized_size>:
 8010a28:	b150      	cbz	r0, 8010a40 <_ControlModeReport__get_serialized_size+0x18>
 8010a2a:	2100      	movs	r1, #0
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	f000 fb59 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010a32:	4604      	mov	r4, r0
 8010a34:	2101      	movs	r1, #1
 8010a36:	f001 fe59 	bl	80126ec <ucdr_alignment>
 8010a3a:	4420      	add	r0, r4
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	bd10      	pop	{r4, pc}
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop

08010a44 <_ControlModeReport__max_serialized_size>:
 8010a44:	b510      	push	{r4, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	2401      	movs	r4, #1
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	f10d 0007 	add.w	r0, sp, #7
 8010a50:	f88d 4007 	strb.w	r4, [sp, #7]
 8010a54:	f000 fb96 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010a58:	4621      	mov	r1, r4
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	f001 fe46 	bl	80126ec <ucdr_alignment>
 8010a60:	4420      	add	r0, r4
 8010a62:	3001      	adds	r0, #1
 8010a64:	b002      	add	sp, #8
 8010a66:	bd10      	pop	{r4, pc}

08010a68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010a68:	4800      	ldr	r0, [pc, #0]	@ (8010a6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 8010a6a:	4770      	bx	lr
 8010a6c:	24000be8 	.word	0x24000be8

08010a70 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 8010a70:	b538      	push	{r3, r4, r5, lr}
 8010a72:	b158      	cbz	r0, 8010a8c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8010a74:	460d      	mov	r5, r1
 8010a76:	f000 fb35 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010a7a:	2101      	movs	r1, #1
 8010a7c:	182c      	adds	r4, r5, r0
 8010a7e:	f1c5 0501 	rsb	r5, r5, #1
 8010a82:	4620      	mov	r0, r4
 8010a84:	f001 fe32 	bl	80126ec <ucdr_alignment>
 8010a88:	4428      	add	r0, r5
 8010a8a:	4420      	add	r0, r4
 8010a8c:	bd38      	pop	{r3, r4, r5, pc}
 8010a8e:	bf00      	nop

08010a90 <_GearCommand__cdr_deserialize>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	460c      	mov	r4, r1
 8010a94:	b179      	cbz	r1, 8010ab6 <_GearCommand__cdr_deserialize+0x26>
 8010a96:	4605      	mov	r5, r0
 8010a98:	f000 fb88 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	4621      	mov	r1, r4
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	68db      	ldr	r3, [r3, #12]
 8010aa6:	4798      	blx	r3
 8010aa8:	f104 0108 	add.w	r1, r4, #8
 8010aac:	4628      	mov	r0, r5
 8010aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ab2:	f000 bbc3 	b.w	801123c <ucdr_deserialize_uint8_t>
 8010ab6:	4608      	mov	r0, r1
 8010ab8:	bd38      	pop	{r3, r4, r5, pc}
 8010aba:	bf00      	nop

08010abc <_GearCommand__cdr_serialize>:
 8010abc:	b180      	cbz	r0, 8010ae0 <_GearCommand__cdr_serialize+0x24>
 8010abe:	b538      	push	{r3, r4, r5, lr}
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	460d      	mov	r5, r1
 8010ac4:	f000 fb72 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	4629      	mov	r1, r5
 8010acc:	4620      	mov	r0, r4
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	689b      	ldr	r3, [r3, #8]
 8010ad2:	4798      	blx	r3
 8010ad4:	7a21      	ldrb	r1, [r4, #8]
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010adc:	f000 bb98 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop

08010ae4 <_GearCommand__get_serialized_size>:
 8010ae4:	b150      	cbz	r0, 8010afc <_GearCommand__get_serialized_size+0x18>
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	b510      	push	{r4, lr}
 8010aea:	f000 fafb 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010aee:	4604      	mov	r4, r0
 8010af0:	2101      	movs	r1, #1
 8010af2:	f001 fdfb 	bl	80126ec <ucdr_alignment>
 8010af6:	4420      	add	r0, r4
 8010af8:	3001      	adds	r0, #1
 8010afa:	bd10      	pop	{r4, pc}
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop

08010b00 <_GearCommand__max_serialized_size>:
 8010b00:	b510      	push	{r4, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	2401      	movs	r4, #1
 8010b06:	2100      	movs	r1, #0
 8010b08:	f10d 0007 	add.w	r0, sp, #7
 8010b0c:	f88d 4007 	strb.w	r4, [sp, #7]
 8010b10:	f000 fb38 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010b14:	4621      	mov	r1, r4
 8010b16:	4604      	mov	r4, r0
 8010b18:	f001 fde8 	bl	80126ec <ucdr_alignment>
 8010b1c:	4420      	add	r0, r4
 8010b1e:	3001      	adds	r0, #1
 8010b20:	b002      	add	sp, #8
 8010b22:	bd10      	pop	{r4, pc}

08010b24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010b24:	4800      	ldr	r0, [pc, #0]	@ (8010b28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8010b26:	4770      	bx	lr
 8010b28:	24000c10 	.word	0x24000c10

08010b2c <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 8010b2c:	b538      	push	{r3, r4, r5, lr}
 8010b2e:	b158      	cbz	r0, 8010b48 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 8010b30:	460d      	mov	r5, r1
 8010b32:	f000 fad7 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010b36:	2101      	movs	r1, #1
 8010b38:	182c      	adds	r4, r5, r0
 8010b3a:	f1c5 0501 	rsb	r5, r5, #1
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f001 fdd4 	bl	80126ec <ucdr_alignment>
 8010b44:	4428      	add	r0, r5
 8010b46:	4420      	add	r0, r4
 8010b48:	bd38      	pop	{r3, r4, r5, pc}
 8010b4a:	bf00      	nop

08010b4c <_GearReport__cdr_deserialize>:
 8010b4c:	b538      	push	{r3, r4, r5, lr}
 8010b4e:	460c      	mov	r4, r1
 8010b50:	b179      	cbz	r1, 8010b72 <_GearReport__cdr_deserialize+0x26>
 8010b52:	4605      	mov	r5, r0
 8010b54:	f000 fb2a 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	4621      	mov	r1, r4
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	4798      	blx	r3
 8010b64:	f104 0108 	add.w	r1, r4, #8
 8010b68:	4628      	mov	r0, r5
 8010b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b6e:	f000 bb65 	b.w	801123c <ucdr_deserialize_uint8_t>
 8010b72:	4608      	mov	r0, r1
 8010b74:	bd38      	pop	{r3, r4, r5, pc}
 8010b76:	bf00      	nop

08010b78 <_GearReport__cdr_serialize>:
 8010b78:	b180      	cbz	r0, 8010b9c <_GearReport__cdr_serialize+0x24>
 8010b7a:	b538      	push	{r3, r4, r5, lr}
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	460d      	mov	r5, r1
 8010b80:	f000 fb14 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b84:	4603      	mov	r3, r0
 8010b86:	4629      	mov	r1, r5
 8010b88:	4620      	mov	r0, r4
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	689b      	ldr	r3, [r3, #8]
 8010b8e:	4798      	blx	r3
 8010b90:	7a21      	ldrb	r1, [r4, #8]
 8010b92:	4628      	mov	r0, r5
 8010b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b98:	f000 bb3a 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop

08010ba0 <_GearReport__get_serialized_size>:
 8010ba0:	b150      	cbz	r0, 8010bb8 <_GearReport__get_serialized_size+0x18>
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	b510      	push	{r4, lr}
 8010ba6:	f000 fa9d 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010baa:	4604      	mov	r4, r0
 8010bac:	2101      	movs	r1, #1
 8010bae:	f001 fd9d 	bl	80126ec <ucdr_alignment>
 8010bb2:	4420      	add	r0, r4
 8010bb4:	3001      	adds	r0, #1
 8010bb6:	bd10      	pop	{r4, pc}
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop

08010bbc <_GearReport__max_serialized_size>:
 8010bbc:	b510      	push	{r4, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	2401      	movs	r4, #1
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	f10d 0007 	add.w	r0, sp, #7
 8010bc8:	f88d 4007 	strb.w	r4, [sp, #7]
 8010bcc:	f000 fada 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010bd0:	4621      	mov	r1, r4
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	f001 fd8a 	bl	80126ec <ucdr_alignment>
 8010bd8:	4420      	add	r0, r4
 8010bda:	3001      	adds	r0, #1
 8010bdc:	b002      	add	sp, #8
 8010bde:	bd10      	pop	{r4, pc}

08010be0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010be0:	4800      	ldr	r0, [pc, #0]	@ (8010be4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8010be2:	4770      	bx	lr
 8010be4:	24000c38 	.word	0x24000c38

08010be8 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010be8:	b538      	push	{r3, r4, r5, lr}
 8010bea:	b158      	cbz	r0, 8010c04 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8010bec:	460d      	mov	r5, r1
 8010bee:	f000 fa79 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010bf2:	2101      	movs	r1, #1
 8010bf4:	182c      	adds	r4, r5, r0
 8010bf6:	f1c5 0501 	rsb	r5, r5, #1
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f001 fd76 	bl	80126ec <ucdr_alignment>
 8010c00:	4428      	add	r0, r5
 8010c02:	4420      	add	r0, r4
 8010c04:	bd38      	pop	{r3, r4, r5, pc}
 8010c06:	bf00      	nop

08010c08 <_HazardLightsCommand__cdr_deserialize>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	460c      	mov	r4, r1
 8010c0c:	b179      	cbz	r1, 8010c2e <_HazardLightsCommand__cdr_deserialize+0x26>
 8010c0e:	4605      	mov	r5, r0
 8010c10:	f000 facc 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c14:	4603      	mov	r3, r0
 8010c16:	4621      	mov	r1, r4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	4798      	blx	r3
 8010c20:	f104 0108 	add.w	r1, r4, #8
 8010c24:	4628      	mov	r0, r5
 8010c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c2a:	f000 bb07 	b.w	801123c <ucdr_deserialize_uint8_t>
 8010c2e:	4608      	mov	r0, r1
 8010c30:	bd38      	pop	{r3, r4, r5, pc}
 8010c32:	bf00      	nop

08010c34 <_HazardLightsCommand__cdr_serialize>:
 8010c34:	b180      	cbz	r0, 8010c58 <_HazardLightsCommand__cdr_serialize+0x24>
 8010c36:	b538      	push	{r3, r4, r5, lr}
 8010c38:	4604      	mov	r4, r0
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	f000 fab6 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010c40:	4603      	mov	r3, r0
 8010c42:	4629      	mov	r1, r5
 8010c44:	4620      	mov	r0, r4
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	4798      	blx	r3
 8010c4c:	7a21      	ldrb	r1, [r4, #8]
 8010c4e:	4628      	mov	r0, r5
 8010c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c54:	f000 badc 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop

08010c5c <_HazardLightsCommand__get_serialized_size>:
 8010c5c:	b150      	cbz	r0, 8010c74 <_HazardLightsCommand__get_serialized_size+0x18>
 8010c5e:	2100      	movs	r1, #0
 8010c60:	b510      	push	{r4, lr}
 8010c62:	f000 fa3f 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010c66:	4604      	mov	r4, r0
 8010c68:	2101      	movs	r1, #1
 8010c6a:	f001 fd3f 	bl	80126ec <ucdr_alignment>
 8010c6e:	4420      	add	r0, r4
 8010c70:	3001      	adds	r0, #1
 8010c72:	bd10      	pop	{r4, pc}
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop

08010c78 <_HazardLightsCommand__max_serialized_size>:
 8010c78:	b510      	push	{r4, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	2401      	movs	r4, #1
 8010c7e:	2100      	movs	r1, #0
 8010c80:	f10d 0007 	add.w	r0, sp, #7
 8010c84:	f88d 4007 	strb.w	r4, [sp, #7]
 8010c88:	f000 fa7c 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4604      	mov	r4, r0
 8010c90:	f001 fd2c 	bl	80126ec <ucdr_alignment>
 8010c94:	4420      	add	r0, r4
 8010c96:	3001      	adds	r0, #1
 8010c98:	b002      	add	sp, #8
 8010c9a:	bd10      	pop	{r4, pc}

08010c9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010c9c:	4800      	ldr	r0, [pc, #0]	@ (8010ca0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8010c9e:	4770      	bx	lr
 8010ca0:	24000c60 	.word	0x24000c60

08010ca4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	b158      	cbz	r0, 8010cc0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8010ca8:	460d      	mov	r5, r1
 8010caa:	f000 fa1b 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010cae:	2101      	movs	r1, #1
 8010cb0:	182c      	adds	r4, r5, r0
 8010cb2:	f1c5 0501 	rsb	r5, r5, #1
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f001 fd18 	bl	80126ec <ucdr_alignment>
 8010cbc:	4428      	add	r0, r5
 8010cbe:	4420      	add	r0, r4
 8010cc0:	bd38      	pop	{r3, r4, r5, pc}
 8010cc2:	bf00      	nop

08010cc4 <_HazardLightsReport__cdr_deserialize>:
 8010cc4:	b538      	push	{r3, r4, r5, lr}
 8010cc6:	460c      	mov	r4, r1
 8010cc8:	b179      	cbz	r1, 8010cea <_HazardLightsReport__cdr_deserialize+0x26>
 8010cca:	4605      	mov	r5, r0
 8010ccc:	f000 fa6e 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	4621      	mov	r1, r4
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	4798      	blx	r3
 8010cdc:	f104 0108 	add.w	r1, r4, #8
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ce6:	f000 baa9 	b.w	801123c <ucdr_deserialize_uint8_t>
 8010cea:	4608      	mov	r0, r1
 8010cec:	bd38      	pop	{r3, r4, r5, pc}
 8010cee:	bf00      	nop

08010cf0 <_HazardLightsReport__cdr_serialize>:
 8010cf0:	b180      	cbz	r0, 8010d14 <_HazardLightsReport__cdr_serialize+0x24>
 8010cf2:	b538      	push	{r3, r4, r5, lr}
 8010cf4:	4604      	mov	r4, r0
 8010cf6:	460d      	mov	r5, r1
 8010cf8:	f000 fa58 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	4629      	mov	r1, r5
 8010d00:	4620      	mov	r0, r4
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	4798      	blx	r3
 8010d08:	7a21      	ldrb	r1, [r4, #8]
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d10:	f000 ba7e 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop

08010d18 <_HazardLightsReport__get_serialized_size>:
 8010d18:	b150      	cbz	r0, 8010d30 <_HazardLightsReport__get_serialized_size+0x18>
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	f000 f9e1 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d22:	4604      	mov	r4, r0
 8010d24:	2101      	movs	r1, #1
 8010d26:	f001 fce1 	bl	80126ec <ucdr_alignment>
 8010d2a:	4420      	add	r0, r4
 8010d2c:	3001      	adds	r0, #1
 8010d2e:	bd10      	pop	{r4, pc}
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop

08010d34 <_HazardLightsReport__max_serialized_size>:
 8010d34:	b510      	push	{r4, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	2401      	movs	r4, #1
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	f10d 0007 	add.w	r0, sp, #7
 8010d40:	f88d 4007 	strb.w	r4, [sp, #7]
 8010d44:	f000 fa1e 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010d48:	4621      	mov	r1, r4
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	f001 fcce 	bl	80126ec <ucdr_alignment>
 8010d50:	4420      	add	r0, r4
 8010d52:	3001      	adds	r0, #1
 8010d54:	b002      	add	sp, #8
 8010d56:	bd10      	pop	{r4, pc}

08010d58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010d58:	4800      	ldr	r0, [pc, #0]	@ (8010d5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 8010d5a:	4770      	bx	lr
 8010d5c:	24000c88 	.word	0x24000c88

08010d60 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 8010d60:	b538      	push	{r3, r4, r5, lr}
 8010d62:	b158      	cbz	r0, 8010d7c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8010d64:	460d      	mov	r5, r1
 8010d66:	f000 f9bd 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d6a:	2104      	movs	r1, #4
 8010d6c:	182c      	adds	r4, r5, r0
 8010d6e:	f1c5 0504 	rsb	r5, r5, #4
 8010d72:	4620      	mov	r0, r4
 8010d74:	f001 fcba 	bl	80126ec <ucdr_alignment>
 8010d78:	4428      	add	r0, r5
 8010d7a:	4420      	add	r0, r4
 8010d7c:	bd38      	pop	{r3, r4, r5, pc}
 8010d7e:	bf00      	nop

08010d80 <_SteeringReport__cdr_deserialize>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	460c      	mov	r4, r1
 8010d84:	b179      	cbz	r1, 8010da6 <_SteeringReport__cdr_deserialize+0x26>
 8010d86:	4605      	mov	r5, r0
 8010d88:	f000 fa10 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	4621      	mov	r1, r4
 8010d90:	4628      	mov	r0, r5
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	4798      	blx	r3
 8010d98:	f104 0108 	add.w	r1, r4, #8
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010da2:	f001 ba25 	b.w	80121f0 <ucdr_deserialize_float>
 8010da6:	4608      	mov	r0, r1
 8010da8:	bd38      	pop	{r3, r4, r5, pc}
 8010daa:	bf00      	nop

08010dac <_SteeringReport__cdr_serialize>:
 8010dac:	b188      	cbz	r0, 8010dd2 <_SteeringReport__cdr_serialize+0x26>
 8010dae:	b538      	push	{r3, r4, r5, lr}
 8010db0:	4604      	mov	r4, r0
 8010db2:	460d      	mov	r5, r1
 8010db4:	f000 f9fa 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010db8:	4603      	mov	r3, r0
 8010dba:	4629      	mov	r1, r5
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	4798      	blx	r3
 8010dc4:	ed94 0a02 	vldr	s0, [r4, #8]
 8010dc8:	4628      	mov	r0, r5
 8010dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dce:	f001 b977 	b.w	80120c0 <ucdr_serialize_float>
 8010dd2:	4770      	bx	lr

08010dd4 <_SteeringReport__get_serialized_size>:
 8010dd4:	b150      	cbz	r0, 8010dec <_SteeringReport__get_serialized_size+0x18>
 8010dd6:	2100      	movs	r1, #0
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	f000 f983 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010dde:	4604      	mov	r4, r0
 8010de0:	2104      	movs	r1, #4
 8010de2:	f001 fc83 	bl	80126ec <ucdr_alignment>
 8010de6:	4420      	add	r0, r4
 8010de8:	3004      	adds	r0, #4
 8010dea:	bd10      	pop	{r4, pc}
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop

08010df0 <_SteeringReport__max_serialized_size>:
 8010df0:	b510      	push	{r4, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	2301      	movs	r3, #1
 8010df6:	2100      	movs	r1, #0
 8010df8:	f10d 0007 	add.w	r0, sp, #7
 8010dfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8010e00:	f000 f9c0 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010e04:	4604      	mov	r4, r0
 8010e06:	2104      	movs	r1, #4
 8010e08:	f001 fc70 	bl	80126ec <ucdr_alignment>
 8010e0c:	4420      	add	r0, r4
 8010e0e:	3004      	adds	r0, #4
 8010e10:	b002      	add	sp, #8
 8010e12:	bd10      	pop	{r4, pc}

08010e14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010e14:	4800      	ldr	r0, [pc, #0]	@ (8010e18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 8010e16:	4770      	bx	lr
 8010e18:	24000cb0 	.word	0x24000cb0

08010e1c <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	b158      	cbz	r0, 8010e38 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 8010e20:	460d      	mov	r5, r1
 8010e22:	f000 f95f 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e26:	2101      	movs	r1, #1
 8010e28:	182c      	adds	r4, r5, r0
 8010e2a:	f1c5 0501 	rsb	r5, r5, #1
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f001 fc5c 	bl	80126ec <ucdr_alignment>
 8010e34:	4428      	add	r0, r5
 8010e36:	4420      	add	r0, r4
 8010e38:	bd38      	pop	{r3, r4, r5, pc}
 8010e3a:	bf00      	nop

08010e3c <_TurnIndicatorsCommand__cdr_deserialize>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	460c      	mov	r4, r1
 8010e40:	b179      	cbz	r1, 8010e62 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 8010e42:	4605      	mov	r5, r0
 8010e44:	f000 f9b2 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	4621      	mov	r1, r4
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	4798      	blx	r3
 8010e54:	f104 0108 	add.w	r1, r4, #8
 8010e58:	4628      	mov	r0, r5
 8010e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e5e:	f000 b9ed 	b.w	801123c <ucdr_deserialize_uint8_t>
 8010e62:	4608      	mov	r0, r1
 8010e64:	bd38      	pop	{r3, r4, r5, pc}
 8010e66:	bf00      	nop

08010e68 <_TurnIndicatorsCommand__cdr_serialize>:
 8010e68:	b180      	cbz	r0, 8010e8c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 8010e6a:	b538      	push	{r3, r4, r5, lr}
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	460d      	mov	r5, r1
 8010e70:	f000 f99c 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e74:	4603      	mov	r3, r0
 8010e76:	4629      	mov	r1, r5
 8010e78:	4620      	mov	r0, r4
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	4798      	blx	r3
 8010e80:	7a21      	ldrb	r1, [r4, #8]
 8010e82:	4628      	mov	r0, r5
 8010e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e88:	f000 b9c2 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop

08010e90 <_TurnIndicatorsCommand__get_serialized_size>:
 8010e90:	b150      	cbz	r0, 8010ea8 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8010e92:	2100      	movs	r1, #0
 8010e94:	b510      	push	{r4, lr}
 8010e96:	f000 f925 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	2101      	movs	r1, #1
 8010e9e:	f001 fc25 	bl	80126ec <ucdr_alignment>
 8010ea2:	4420      	add	r0, r4
 8010ea4:	3001      	adds	r0, #1
 8010ea6:	bd10      	pop	{r4, pc}
 8010ea8:	4770      	bx	lr
 8010eaa:	bf00      	nop

08010eac <_TurnIndicatorsCommand__max_serialized_size>:
 8010eac:	b510      	push	{r4, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	2401      	movs	r4, #1
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	f10d 0007 	add.w	r0, sp, #7
 8010eb8:	f88d 4007 	strb.w	r4, [sp, #7]
 8010ebc:	f000 f962 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010ec0:	4621      	mov	r1, r4
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	f001 fc12 	bl	80126ec <ucdr_alignment>
 8010ec8:	4420      	add	r0, r4
 8010eca:	3001      	adds	r0, #1
 8010ecc:	b002      	add	sp, #8
 8010ece:	bd10      	pop	{r4, pc}

08010ed0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010ed0:	4800      	ldr	r0, [pc, #0]	@ (8010ed4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8010ed2:	4770      	bx	lr
 8010ed4:	24000cd8 	.word	0x24000cd8

08010ed8 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010ed8:	b538      	push	{r3, r4, r5, lr}
 8010eda:	b158      	cbz	r0, 8010ef4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8010edc:	460d      	mov	r5, r1
 8010ede:	f000 f901 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ee2:	2101      	movs	r1, #1
 8010ee4:	182c      	adds	r4, r5, r0
 8010ee6:	f1c5 0501 	rsb	r5, r5, #1
 8010eea:	4620      	mov	r0, r4
 8010eec:	f001 fbfe 	bl	80126ec <ucdr_alignment>
 8010ef0:	4428      	add	r0, r5
 8010ef2:	4420      	add	r0, r4
 8010ef4:	bd38      	pop	{r3, r4, r5, pc}
 8010ef6:	bf00      	nop

08010ef8 <_TurnIndicatorsReport__cdr_deserialize>:
 8010ef8:	b538      	push	{r3, r4, r5, lr}
 8010efa:	460c      	mov	r4, r1
 8010efc:	b179      	cbz	r1, 8010f1e <_TurnIndicatorsReport__cdr_deserialize+0x26>
 8010efe:	4605      	mov	r5, r0
 8010f00:	f000 f954 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f04:	4603      	mov	r3, r0
 8010f06:	4621      	mov	r1, r4
 8010f08:	4628      	mov	r0, r5
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	4798      	blx	r3
 8010f10:	f104 0108 	add.w	r1, r4, #8
 8010f14:	4628      	mov	r0, r5
 8010f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f1a:	f000 b98f 	b.w	801123c <ucdr_deserialize_uint8_t>
 8010f1e:	4608      	mov	r0, r1
 8010f20:	bd38      	pop	{r3, r4, r5, pc}
 8010f22:	bf00      	nop

08010f24 <_TurnIndicatorsReport__cdr_serialize>:
 8010f24:	b180      	cbz	r0, 8010f48 <_TurnIndicatorsReport__cdr_serialize+0x24>
 8010f26:	b538      	push	{r3, r4, r5, lr}
 8010f28:	4604      	mov	r4, r0
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	f000 f93e 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f30:	4603      	mov	r3, r0
 8010f32:	4629      	mov	r1, r5
 8010f34:	4620      	mov	r0, r4
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	4798      	blx	r3
 8010f3c:	7a21      	ldrb	r1, [r4, #8]
 8010f3e:	4628      	mov	r0, r5
 8010f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f44:	f000 b964 	b.w	8011210 <ucdr_serialize_uint8_t>
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop

08010f4c <_TurnIndicatorsReport__get_serialized_size>:
 8010f4c:	b150      	cbz	r0, 8010f64 <_TurnIndicatorsReport__get_serialized_size+0x18>
 8010f4e:	2100      	movs	r1, #0
 8010f50:	b510      	push	{r4, lr}
 8010f52:	f000 f8c7 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f56:	4604      	mov	r4, r0
 8010f58:	2101      	movs	r1, #1
 8010f5a:	f001 fbc7 	bl	80126ec <ucdr_alignment>
 8010f5e:	4420      	add	r0, r4
 8010f60:	3001      	adds	r0, #1
 8010f62:	bd10      	pop	{r4, pc}
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop

08010f68 <_TurnIndicatorsReport__max_serialized_size>:
 8010f68:	b510      	push	{r4, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	2401      	movs	r4, #1
 8010f6e:	2100      	movs	r1, #0
 8010f70:	f10d 0007 	add.w	r0, sp, #7
 8010f74:	f88d 4007 	strb.w	r4, [sp, #7]
 8010f78:	f000 f904 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f7c:	4621      	mov	r1, r4
 8010f7e:	4604      	mov	r4, r0
 8010f80:	f001 fbb4 	bl	80126ec <ucdr_alignment>
 8010f84:	4420      	add	r0, r4
 8010f86:	3001      	adds	r0, #1
 8010f88:	b002      	add	sp, #8
 8010f8a:	bd10      	pop	{r4, pc}

08010f8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010f8c:	4800      	ldr	r0, [pc, #0]	@ (8010f90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8010f8e:	4770      	bx	lr
 8010f90:	24000d00 	.word	0x24000d00

08010f94 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8010f94:	b1c8      	cbz	r0, 8010fca <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8010f96:	b570      	push	{r4, r5, r6, lr}
 8010f98:	460d      	mov	r5, r1
 8010f9a:	f002 fd47 	bl	8013a2c <get_serialized_size_std_msgs__msg__Header>
 8010f9e:	2104      	movs	r1, #4
 8010fa0:	182e      	adds	r6, r5, r0
 8010fa2:	f1c5 0504 	rsb	r5, r5, #4
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	f001 fba0 	bl	80126ec <ucdr_alignment>
 8010fac:	2104      	movs	r1, #4
 8010fae:	1844      	adds	r4, r0, r1
 8010fb0:	4434      	add	r4, r6
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f001 fb9a 	bl	80126ec <ucdr_alignment>
 8010fb8:	2104      	movs	r1, #4
 8010fba:	4408      	add	r0, r1
 8010fbc:	4404      	add	r4, r0
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f001 fb94 	bl	80126ec <ucdr_alignment>
 8010fc4:	4428      	add	r0, r5
 8010fc6:	4420      	add	r0, r4
 8010fc8:	bd70      	pop	{r4, r5, r6, pc}
 8010fca:	4770      	bx	lr

08010fcc <_VelocityReport__cdr_deserialize>:
 8010fcc:	b538      	push	{r3, r4, r5, lr}
 8010fce:	460c      	mov	r4, r1
 8010fd0:	b1c9      	cbz	r1, 8011006 <_VelocityReport__cdr_deserialize+0x3a>
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	f002 fdae 	bl	8013b34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	4621      	mov	r1, r4
 8010fdc:	4628      	mov	r0, r5
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	4798      	blx	r3
 8010fe4:	f104 0114 	add.w	r1, r4, #20
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f001 f901 	bl	80121f0 <ucdr_deserialize_float>
 8010fee:	f104 0118 	add.w	r1, r4, #24
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f001 f8fc 	bl	80121f0 <ucdr_deserialize_float>
 8010ff8:	f104 011c 	add.w	r1, r4, #28
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011002:	f001 b8f5 	b.w	80121f0 <ucdr_deserialize_float>
 8011006:	4608      	mov	r0, r1
 8011008:	bd38      	pop	{r3, r4, r5, pc}
 801100a:	bf00      	nop

0801100c <_VelocityReport__cdr_serialize>:
 801100c:	b1d8      	cbz	r0, 8011046 <_VelocityReport__cdr_serialize+0x3a>
 801100e:	b538      	push	{r3, r4, r5, lr}
 8011010:	4604      	mov	r4, r0
 8011012:	460d      	mov	r5, r1
 8011014:	f002 fd8e 	bl	8013b34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011018:	4603      	mov	r3, r0
 801101a:	4629      	mov	r1, r5
 801101c:	4620      	mov	r0, r4
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	689b      	ldr	r3, [r3, #8]
 8011022:	4798      	blx	r3
 8011024:	ed94 0a05 	vldr	s0, [r4, #20]
 8011028:	4628      	mov	r0, r5
 801102a:	f001 f849 	bl	80120c0 <ucdr_serialize_float>
 801102e:	ed94 0a06 	vldr	s0, [r4, #24]
 8011032:	4628      	mov	r0, r5
 8011034:	f001 f844 	bl	80120c0 <ucdr_serialize_float>
 8011038:	ed94 0a07 	vldr	s0, [r4, #28]
 801103c:	4628      	mov	r0, r5
 801103e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011042:	f001 b83d 	b.w	80120c0 <ucdr_serialize_float>
 8011046:	4770      	bx	lr

08011048 <_VelocityReport__get_serialized_size>:
 8011048:	b1b0      	cbz	r0, 8011078 <_VelocityReport__get_serialized_size+0x30>
 801104a:	2100      	movs	r1, #0
 801104c:	b510      	push	{r4, lr}
 801104e:	f002 fced 	bl	8013a2c <get_serialized_size_std_msgs__msg__Header>
 8011052:	4604      	mov	r4, r0
 8011054:	2104      	movs	r1, #4
 8011056:	f001 fb49 	bl	80126ec <ucdr_alignment>
 801105a:	2104      	movs	r1, #4
 801105c:	4420      	add	r0, r4
 801105e:	1844      	adds	r4, r0, r1
 8011060:	4620      	mov	r0, r4
 8011062:	f001 fb43 	bl	80126ec <ucdr_alignment>
 8011066:	2104      	movs	r1, #4
 8011068:	4408      	add	r0, r1
 801106a:	4404      	add	r4, r0
 801106c:	4620      	mov	r0, r4
 801106e:	f001 fb3d 	bl	80126ec <ucdr_alignment>
 8011072:	3004      	adds	r0, #4
 8011074:	4420      	add	r0, r4
 8011076:	bd10      	pop	{r4, pc}
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop

0801107c <_VelocityReport__max_serialized_size>:
 801107c:	b510      	push	{r4, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	2301      	movs	r3, #1
 8011082:	2100      	movs	r1, #0
 8011084:	f10d 0007 	add.w	r0, sp, #7
 8011088:	f88d 3007 	strb.w	r3, [sp, #7]
 801108c:	f002 fd48 	bl	8013b20 <max_serialized_size_std_msgs__msg__Header>
 8011090:	4604      	mov	r4, r0
 8011092:	2104      	movs	r1, #4
 8011094:	f001 fb2a 	bl	80126ec <ucdr_alignment>
 8011098:	2104      	movs	r1, #4
 801109a:	4420      	add	r0, r4
 801109c:	1844      	adds	r4, r0, r1
 801109e:	4620      	mov	r0, r4
 80110a0:	f001 fb24 	bl	80126ec <ucdr_alignment>
 80110a4:	2104      	movs	r1, #4
 80110a6:	4408      	add	r0, r1
 80110a8:	4404      	add	r4, r0
 80110aa:	4620      	mov	r0, r4
 80110ac:	f001 fb1e 	bl	80126ec <ucdr_alignment>
 80110b0:	3004      	adds	r0, #4
 80110b2:	4420      	add	r0, r4
 80110b4:	b002      	add	sp, #8
 80110b6:	bd10      	pop	{r4, pc}

080110b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80110b8:	4800      	ldr	r0, [pc, #0]	@ (80110bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 80110ba:	4770      	bx	lr
 80110bc:	24000d28 	.word	0x24000d28

080110c0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80110c0:	f003 b948 	b.w	8014354 <builtin_interfaces__msg__Time__init>

080110c4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80110c4:	f003 b94a 	b.w	801435c <builtin_interfaces__msg__Time__fini>

080110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80110c8:	4b04      	ldr	r3, [pc, #16]	@ (80110dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	b10a      	cbz	r2, 80110d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80110ce:	4803      	ldr	r0, [pc, #12]	@ (80110dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80110d0:	4770      	bx	lr
 80110d2:	4a03      	ldr	r2, [pc, #12]	@ (80110e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80110d4:	4801      	ldr	r0, [pc, #4]	@ (80110dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80110d6:	6812      	ldr	r2, [r2, #0]
 80110d8:	601a      	str	r2, [r3, #0]
 80110da:	4770      	bx	lr
 80110dc:	24000dc8 	.word	0x24000dc8
 80110e0:	24000e14 	.word	0x24000e14

080110e4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80110e4:	b180      	cbz	r0, 8011108 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80110e6:	b538      	push	{r3, r4, r5, lr}
 80110e8:	460d      	mov	r5, r1
 80110ea:	2104      	movs	r1, #4
 80110ec:	4628      	mov	r0, r5
 80110ee:	f001 fafd 	bl	80126ec <ucdr_alignment>
 80110f2:	1d2b      	adds	r3, r5, #4
 80110f4:	f1c5 0504 	rsb	r5, r5, #4
 80110f8:	2104      	movs	r1, #4
 80110fa:	181c      	adds	r4, r3, r0
 80110fc:	4620      	mov	r0, r4
 80110fe:	f001 faf5 	bl	80126ec <ucdr_alignment>
 8011102:	4428      	add	r0, r5
 8011104:	4420      	add	r0, r4
 8011106:	bd38      	pop	{r3, r4, r5, pc}
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop

0801110c <_Time__cdr_deserialize>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	460c      	mov	r4, r1
 8011110:	b141      	cbz	r1, 8011124 <_Time__cdr_deserialize+0x18>
 8011112:	4605      	mov	r5, r0
 8011114:	f000 ff44 	bl	8011fa0 <ucdr_deserialize_int32_t>
 8011118:	1d21      	adds	r1, r4, #4
 801111a:	4628      	mov	r0, r5
 801111c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011120:	f000 bbbc 	b.w	801189c <ucdr_deserialize_uint32_t>
 8011124:	4608      	mov	r0, r1
 8011126:	bd38      	pop	{r3, r4, r5, pc}

08011128 <_Time__cdr_serialize>:
 8011128:	b160      	cbz	r0, 8011144 <_Time__cdr_serialize+0x1c>
 801112a:	b538      	push	{r3, r4, r5, lr}
 801112c:	460d      	mov	r5, r1
 801112e:	4604      	mov	r4, r0
 8011130:	6801      	ldr	r1, [r0, #0]
 8011132:	4628      	mov	r0, r5
 8011134:	f000 fe9c 	bl	8011e70 <ucdr_serialize_int32_t>
 8011138:	6861      	ldr	r1, [r4, #4]
 801113a:	4628      	mov	r0, r5
 801113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011140:	f000 ba7c 	b.w	801163c <ucdr_serialize_uint32_t>
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop

08011148 <_Time__get_serialized_size>:
 8011148:	b160      	cbz	r0, 8011164 <_Time__get_serialized_size+0x1c>
 801114a:	2104      	movs	r1, #4
 801114c:	2000      	movs	r0, #0
 801114e:	b510      	push	{r4, lr}
 8011150:	f001 facc 	bl	80126ec <ucdr_alignment>
 8011154:	2104      	movs	r1, #4
 8011156:	1844      	adds	r4, r0, r1
 8011158:	4620      	mov	r0, r4
 801115a:	f001 fac7 	bl	80126ec <ucdr_alignment>
 801115e:	3004      	adds	r0, #4
 8011160:	4420      	add	r0, r4
 8011162:	bd10      	pop	{r4, pc}
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop

08011168 <_Time__max_serialized_size>:
 8011168:	b510      	push	{r4, lr}
 801116a:	2104      	movs	r1, #4
 801116c:	2000      	movs	r0, #0
 801116e:	f001 fabd 	bl	80126ec <ucdr_alignment>
 8011172:	2104      	movs	r1, #4
 8011174:	1844      	adds	r4, r0, r1
 8011176:	4620      	mov	r0, r4
 8011178:	f001 fab8 	bl	80126ec <ucdr_alignment>
 801117c:	3004      	adds	r0, #4
 801117e:	4420      	add	r0, r4
 8011180:	bd10      	pop	{r4, pc}
 8011182:	bf00      	nop

08011184 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	460c      	mov	r4, r1
 8011188:	2301      	movs	r3, #1
 801118a:	2104      	movs	r1, #4
 801118c:	1d25      	adds	r5, r4, #4
 801118e:	7003      	strb	r3, [r0, #0]
 8011190:	4620      	mov	r0, r4
 8011192:	f1c4 0404 	rsb	r4, r4, #4
 8011196:	f001 faa9 	bl	80126ec <ucdr_alignment>
 801119a:	4405      	add	r5, r0
 801119c:	2104      	movs	r1, #4
 801119e:	4628      	mov	r0, r5
 80111a0:	f001 faa4 	bl	80126ec <ucdr_alignment>
 80111a4:	4420      	add	r0, r4
 80111a6:	4428      	add	r0, r5
 80111a8:	bd38      	pop	{r3, r4, r5, pc}
 80111aa:	bf00      	nop

080111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80111ac:	4800      	ldr	r0, [pc, #0]	@ (80111b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80111ae:	4770      	bx	lr
 80111b0:	24000dd4 	.word	0x24000dd4

080111b4 <ucdr_serialize_bool>:
 80111b4:	b538      	push	{r3, r4, r5, lr}
 80111b6:	460d      	mov	r5, r1
 80111b8:	2101      	movs	r1, #1
 80111ba:	4604      	mov	r4, r0
 80111bc:	f001 fa4a 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80111c0:	b148      	cbz	r0, 80111d6 <ucdr_serialize_bool+0x22>
 80111c2:	68a3      	ldr	r3, [r4, #8]
 80111c4:	2101      	movs	r1, #1
 80111c6:	701d      	strb	r5, [r3, #0]
 80111c8:	68a2      	ldr	r2, [r4, #8]
 80111ca:	6923      	ldr	r3, [r4, #16]
 80111cc:	440a      	add	r2, r1
 80111ce:	7561      	strb	r1, [r4, #21]
 80111d0:	440b      	add	r3, r1
 80111d2:	60a2      	str	r2, [r4, #8]
 80111d4:	6123      	str	r3, [r4, #16]
 80111d6:	7da0      	ldrb	r0, [r4, #22]
 80111d8:	f080 0001 	eor.w	r0, r0, #1
 80111dc:	bd38      	pop	{r3, r4, r5, pc}
 80111de:	bf00      	nop

080111e0 <ucdr_deserialize_bool>:
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	460d      	mov	r5, r1
 80111e4:	2101      	movs	r1, #1
 80111e6:	4604      	mov	r4, r0
 80111e8:	f001 fa34 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80111ec:	b160      	cbz	r0, 8011208 <ucdr_deserialize_bool+0x28>
 80111ee:	68a2      	ldr	r2, [r4, #8]
 80111f0:	2101      	movs	r1, #1
 80111f2:	6923      	ldr	r3, [r4, #16]
 80111f4:	f812 0b01 	ldrb.w	r0, [r2], #1
 80111f8:	440b      	add	r3, r1
 80111fa:	3800      	subs	r0, #0
 80111fc:	bf18      	it	ne
 80111fe:	2001      	movne	r0, #1
 8011200:	7028      	strb	r0, [r5, #0]
 8011202:	60a2      	str	r2, [r4, #8]
 8011204:	6123      	str	r3, [r4, #16]
 8011206:	7561      	strb	r1, [r4, #21]
 8011208:	7da0      	ldrb	r0, [r4, #22]
 801120a:	f080 0001 	eor.w	r0, r0, #1
 801120e:	bd38      	pop	{r3, r4, r5, pc}

08011210 <ucdr_serialize_uint8_t>:
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	460d      	mov	r5, r1
 8011214:	2101      	movs	r1, #1
 8011216:	4604      	mov	r4, r0
 8011218:	f001 fa1c 	bl	8012654 <ucdr_check_final_buffer_behavior>
 801121c:	b148      	cbz	r0, 8011232 <ucdr_serialize_uint8_t+0x22>
 801121e:	68a3      	ldr	r3, [r4, #8]
 8011220:	2101      	movs	r1, #1
 8011222:	701d      	strb	r5, [r3, #0]
 8011224:	68a2      	ldr	r2, [r4, #8]
 8011226:	6923      	ldr	r3, [r4, #16]
 8011228:	440a      	add	r2, r1
 801122a:	7561      	strb	r1, [r4, #21]
 801122c:	440b      	add	r3, r1
 801122e:	60a2      	str	r2, [r4, #8]
 8011230:	6123      	str	r3, [r4, #16]
 8011232:	7da0      	ldrb	r0, [r4, #22]
 8011234:	f080 0001 	eor.w	r0, r0, #1
 8011238:	bd38      	pop	{r3, r4, r5, pc}
 801123a:	bf00      	nop

0801123c <ucdr_deserialize_uint8_t>:
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	460d      	mov	r5, r1
 8011240:	2101      	movs	r1, #1
 8011242:	4604      	mov	r4, r0
 8011244:	f001 fa06 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011248:	b150      	cbz	r0, 8011260 <ucdr_deserialize_uint8_t+0x24>
 801124a:	68a3      	ldr	r3, [r4, #8]
 801124c:	2101      	movs	r1, #1
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	702b      	strb	r3, [r5, #0]
 8011252:	68a2      	ldr	r2, [r4, #8]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	440a      	add	r2, r1
 8011258:	7561      	strb	r1, [r4, #21]
 801125a:	440b      	add	r3, r1
 801125c:	60a2      	str	r2, [r4, #8]
 801125e:	6123      	str	r3, [r4, #16]
 8011260:	7da0      	ldrb	r0, [r4, #22]
 8011262:	f080 0001 	eor.w	r0, r0, #1
 8011266:	bd38      	pop	{r3, r4, r5, pc}

08011268 <ucdr_serialize_uint16_t>:
 8011268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801126c:	460b      	mov	r3, r1
 801126e:	b082      	sub	sp, #8
 8011270:	4604      	mov	r4, r0
 8011272:	2102      	movs	r1, #2
 8011274:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011278:	f001 fa40 	bl	80126fc <ucdr_buffer_alignment>
 801127c:	4601      	mov	r1, r0
 801127e:	4620      	mov	r0, r4
 8011280:	7d67      	ldrb	r7, [r4, #21]
 8011282:	f001 fa83 	bl	801278c <ucdr_advance_buffer>
 8011286:	2102      	movs	r1, #2
 8011288:	4620      	mov	r0, r4
 801128a:	f001 f9d7 	bl	801263c <ucdr_check_buffer_available_for>
 801128e:	bb78      	cbnz	r0, 80112f0 <ucdr_serialize_uint16_t+0x88>
 8011290:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011294:	42ab      	cmp	r3, r5
 8011296:	d926      	bls.n	80112e6 <ucdr_serialize_uint16_t+0x7e>
 8011298:	1b5e      	subs	r6, r3, r5
 801129a:	60a3      	str	r3, [r4, #8]
 801129c:	6923      	ldr	r3, [r4, #16]
 801129e:	4620      	mov	r0, r4
 80112a0:	f1c6 0802 	rsb	r8, r6, #2
 80112a4:	4433      	add	r3, r6
 80112a6:	4641      	mov	r1, r8
 80112a8:	6123      	str	r3, [r4, #16]
 80112aa:	f001 f9d3 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d03b      	beq.n	801132a <ucdr_serialize_uint16_t+0xc2>
 80112b2:	7d23      	ldrb	r3, [r4, #20]
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d04a      	beq.n	801134e <ucdr_serialize_uint16_t+0xe6>
 80112b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80112bc:	702b      	strb	r3, [r5, #0]
 80112be:	2e00      	cmp	r6, #0
 80112c0:	d040      	beq.n	8011344 <ucdr_serialize_uint16_t+0xdc>
 80112c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80112c6:	706b      	strb	r3, [r5, #1]
 80112c8:	6923      	ldr	r3, [r4, #16]
 80112ca:	2102      	movs	r1, #2
 80112cc:	68a2      	ldr	r2, [r4, #8]
 80112ce:	3302      	adds	r3, #2
 80112d0:	7da0      	ldrb	r0, [r4, #22]
 80112d2:	4442      	add	r2, r8
 80112d4:	7561      	strb	r1, [r4, #21]
 80112d6:	1b9e      	subs	r6, r3, r6
 80112d8:	f080 0001 	eor.w	r0, r0, #1
 80112dc:	60a2      	str	r2, [r4, #8]
 80112de:	6126      	str	r6, [r4, #16]
 80112e0:	b002      	add	sp, #8
 80112e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e6:	2102      	movs	r1, #2
 80112e8:	4620      	mov	r0, r4
 80112ea:	f001 f9b3 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80112ee:	b190      	cbz	r0, 8011316 <ucdr_serialize_uint16_t+0xae>
 80112f0:	7d23      	ldrb	r3, [r4, #20]
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	68a3      	ldr	r3, [r4, #8]
 80112f6:	d014      	beq.n	8011322 <ucdr_serialize_uint16_t+0xba>
 80112f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80112fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011300:	7019      	strb	r1, [r3, #0]
 8011302:	68a3      	ldr	r3, [r4, #8]
 8011304:	705a      	strb	r2, [r3, #1]
 8011306:	2102      	movs	r1, #2
 8011308:	68a2      	ldr	r2, [r4, #8]
 801130a:	6923      	ldr	r3, [r4, #16]
 801130c:	440a      	add	r2, r1
 801130e:	7561      	strb	r1, [r4, #21]
 8011310:	440b      	add	r3, r1
 8011312:	60a2      	str	r2, [r4, #8]
 8011314:	6123      	str	r3, [r4, #16]
 8011316:	7da0      	ldrb	r0, [r4, #22]
 8011318:	f080 0001 	eor.w	r0, r0, #1
 801131c:	b002      	add	sp, #8
 801131e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011322:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011326:	801a      	strh	r2, [r3, #0]
 8011328:	e7ed      	b.n	8011306 <ucdr_serialize_uint16_t+0x9e>
 801132a:	68a2      	ldr	r2, [r4, #8]
 801132c:	6923      	ldr	r3, [r4, #16]
 801132e:	7da0      	ldrb	r0, [r4, #22]
 8011330:	1b92      	subs	r2, r2, r6
 8011332:	1b9b      	subs	r3, r3, r6
 8011334:	7567      	strb	r7, [r4, #21]
 8011336:	f080 0001 	eor.w	r0, r0, #1
 801133a:	60a2      	str	r2, [r4, #8]
 801133c:	6123      	str	r3, [r4, #16]
 801133e:	b002      	add	sp, #8
 8011340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011344:	68a3      	ldr	r3, [r4, #8]
 8011346:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801134a:	701a      	strb	r2, [r3, #0]
 801134c:	e7bc      	b.n	80112c8 <ucdr_serialize_uint16_t+0x60>
 801134e:	4628      	mov	r0, r5
 8011350:	f10d 0506 	add.w	r5, sp, #6
 8011354:	4632      	mov	r2, r6
 8011356:	4629      	mov	r1, r5
 8011358:	f00e fc8b 	bl	801fc72 <memcpy>
 801135c:	4642      	mov	r2, r8
 801135e:	19a9      	adds	r1, r5, r6
 8011360:	68a0      	ldr	r0, [r4, #8]
 8011362:	f00e fc86 	bl	801fc72 <memcpy>
 8011366:	e7af      	b.n	80112c8 <ucdr_serialize_uint16_t+0x60>

08011368 <ucdr_serialize_endian_uint16_t>:
 8011368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801136c:	4604      	mov	r4, r0
 801136e:	b083      	sub	sp, #12
 8011370:	460d      	mov	r5, r1
 8011372:	2102      	movs	r1, #2
 8011374:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011378:	f001 f9c0 	bl	80126fc <ucdr_buffer_alignment>
 801137c:	4601      	mov	r1, r0
 801137e:	4620      	mov	r0, r4
 8011380:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011384:	f001 fa02 	bl	801278c <ucdr_advance_buffer>
 8011388:	2102      	movs	r1, #2
 801138a:	4620      	mov	r0, r4
 801138c:	f001 f956 	bl	801263c <ucdr_check_buffer_available_for>
 8011390:	bb70      	cbnz	r0, 80113f0 <ucdr_serialize_endian_uint16_t+0x88>
 8011392:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011396:	42be      	cmp	r6, r7
 8011398:	d925      	bls.n	80113e6 <ucdr_serialize_endian_uint16_t+0x7e>
 801139a:	6923      	ldr	r3, [r4, #16]
 801139c:	4620      	mov	r0, r4
 801139e:	60a6      	str	r6, [r4, #8]
 80113a0:	1bf6      	subs	r6, r6, r7
 80113a2:	4433      	add	r3, r6
 80113a4:	f1c6 0902 	rsb	r9, r6, #2
 80113a8:	6123      	str	r3, [r4, #16]
 80113aa:	4649      	mov	r1, r9
 80113ac:	f001 f952 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d039      	beq.n	8011428 <ucdr_serialize_endian_uint16_t+0xc0>
 80113b4:	2d01      	cmp	r5, #1
 80113b6:	d04a      	beq.n	801144e <ucdr_serialize_endian_uint16_t+0xe6>
 80113b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80113bc:	703b      	strb	r3, [r7, #0]
 80113be:	2e00      	cmp	r6, #0
 80113c0:	d040      	beq.n	8011444 <ucdr_serialize_endian_uint16_t+0xdc>
 80113c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80113c6:	707b      	strb	r3, [r7, #1]
 80113c8:	6923      	ldr	r3, [r4, #16]
 80113ca:	2102      	movs	r1, #2
 80113cc:	68a2      	ldr	r2, [r4, #8]
 80113ce:	7da0      	ldrb	r0, [r4, #22]
 80113d0:	3302      	adds	r3, #2
 80113d2:	444a      	add	r2, r9
 80113d4:	7561      	strb	r1, [r4, #21]
 80113d6:	1b9b      	subs	r3, r3, r6
 80113d8:	f080 0001 	eor.w	r0, r0, #1
 80113dc:	60a2      	str	r2, [r4, #8]
 80113de:	6123      	str	r3, [r4, #16]
 80113e0:	b003      	add	sp, #12
 80113e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113e6:	2102      	movs	r1, #2
 80113e8:	4620      	mov	r0, r4
 80113ea:	f001 f933 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80113ee:	b188      	cbz	r0, 8011414 <ucdr_serialize_endian_uint16_t+0xac>
 80113f0:	2d01      	cmp	r5, #1
 80113f2:	68a3      	ldr	r3, [r4, #8]
 80113f4:	d014      	beq.n	8011420 <ucdr_serialize_endian_uint16_t+0xb8>
 80113f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80113fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80113fe:	7019      	strb	r1, [r3, #0]
 8011400:	68a3      	ldr	r3, [r4, #8]
 8011402:	705a      	strb	r2, [r3, #1]
 8011404:	2102      	movs	r1, #2
 8011406:	68a2      	ldr	r2, [r4, #8]
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	440a      	add	r2, r1
 801140c:	7561      	strb	r1, [r4, #21]
 801140e:	440b      	add	r3, r1
 8011410:	60a2      	str	r2, [r4, #8]
 8011412:	6123      	str	r3, [r4, #16]
 8011414:	7da0      	ldrb	r0, [r4, #22]
 8011416:	f080 0001 	eor.w	r0, r0, #1
 801141a:	b003      	add	sp, #12
 801141c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011420:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011424:	801a      	strh	r2, [r3, #0]
 8011426:	e7ed      	b.n	8011404 <ucdr_serialize_endian_uint16_t+0x9c>
 8011428:	68a2      	ldr	r2, [r4, #8]
 801142a:	6923      	ldr	r3, [r4, #16]
 801142c:	7da0      	ldrb	r0, [r4, #22]
 801142e:	1b92      	subs	r2, r2, r6
 8011430:	1b9b      	subs	r3, r3, r6
 8011432:	f884 8015 	strb.w	r8, [r4, #21]
 8011436:	f080 0001 	eor.w	r0, r0, #1
 801143a:	60a2      	str	r2, [r4, #8]
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	b003      	add	sp, #12
 8011440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011444:	68a3      	ldr	r3, [r4, #8]
 8011446:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801144a:	701a      	strb	r2, [r3, #0]
 801144c:	e7bc      	b.n	80113c8 <ucdr_serialize_endian_uint16_t+0x60>
 801144e:	f10d 0506 	add.w	r5, sp, #6
 8011452:	4632      	mov	r2, r6
 8011454:	4638      	mov	r0, r7
 8011456:	4629      	mov	r1, r5
 8011458:	f00e fc0b 	bl	801fc72 <memcpy>
 801145c:	464a      	mov	r2, r9
 801145e:	19a9      	adds	r1, r5, r6
 8011460:	68a0      	ldr	r0, [r4, #8]
 8011462:	f00e fc06 	bl	801fc72 <memcpy>
 8011466:	e7af      	b.n	80113c8 <ucdr_serialize_endian_uint16_t+0x60>

08011468 <ucdr_deserialize_uint16_t>:
 8011468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801146c:	4604      	mov	r4, r0
 801146e:	460d      	mov	r5, r1
 8011470:	2102      	movs	r1, #2
 8011472:	f001 f943 	bl	80126fc <ucdr_buffer_alignment>
 8011476:	4601      	mov	r1, r0
 8011478:	4620      	mov	r0, r4
 801147a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801147e:	f001 f985 	bl	801278c <ucdr_advance_buffer>
 8011482:	2102      	movs	r1, #2
 8011484:	4620      	mov	r0, r4
 8011486:	f001 f8d9 	bl	801263c <ucdr_check_buffer_available_for>
 801148a:	bb60      	cbnz	r0, 80114e6 <ucdr_deserialize_uint16_t+0x7e>
 801148c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011490:	42be      	cmp	r6, r7
 8011492:	d923      	bls.n	80114dc <ucdr_deserialize_uint16_t+0x74>
 8011494:	6923      	ldr	r3, [r4, #16]
 8011496:	4620      	mov	r0, r4
 8011498:	60a6      	str	r6, [r4, #8]
 801149a:	1bf6      	subs	r6, r6, r7
 801149c:	4433      	add	r3, r6
 801149e:	f1c6 0902 	rsb	r9, r6, #2
 80114a2:	6123      	str	r3, [r4, #16]
 80114a4:	4649      	mov	r1, r9
 80114a6:	f001 f8d5 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d034      	beq.n	8011518 <ucdr_deserialize_uint16_t+0xb0>
 80114ae:	7d23      	ldrb	r3, [r4, #20]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d042      	beq.n	801153a <ucdr_deserialize_uint16_t+0xd2>
 80114b4:	787b      	ldrb	r3, [r7, #1]
 80114b6:	702b      	strb	r3, [r5, #0]
 80114b8:	2e00      	cmp	r6, #0
 80114ba:	d03a      	beq.n	8011532 <ucdr_deserialize_uint16_t+0xca>
 80114bc:	783b      	ldrb	r3, [r7, #0]
 80114be:	706b      	strb	r3, [r5, #1]
 80114c0:	6923      	ldr	r3, [r4, #16]
 80114c2:	2102      	movs	r1, #2
 80114c4:	68a2      	ldr	r2, [r4, #8]
 80114c6:	3302      	adds	r3, #2
 80114c8:	7da0      	ldrb	r0, [r4, #22]
 80114ca:	444a      	add	r2, r9
 80114cc:	7561      	strb	r1, [r4, #21]
 80114ce:	1b9b      	subs	r3, r3, r6
 80114d0:	f080 0001 	eor.w	r0, r0, #1
 80114d4:	60a2      	str	r2, [r4, #8]
 80114d6:	6123      	str	r3, [r4, #16]
 80114d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114dc:	2102      	movs	r1, #2
 80114de:	4620      	mov	r0, r4
 80114e0:	f001 f8b8 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80114e4:	b180      	cbz	r0, 8011508 <ucdr_deserialize_uint16_t+0xa0>
 80114e6:	7d23      	ldrb	r3, [r4, #20]
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	68a3      	ldr	r3, [r4, #8]
 80114ec:	d011      	beq.n	8011512 <ucdr_deserialize_uint16_t+0xaa>
 80114ee:	785b      	ldrb	r3, [r3, #1]
 80114f0:	702b      	strb	r3, [r5, #0]
 80114f2:	68a3      	ldr	r3, [r4, #8]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	706b      	strb	r3, [r5, #1]
 80114f8:	2102      	movs	r1, #2
 80114fa:	68a2      	ldr	r2, [r4, #8]
 80114fc:	6923      	ldr	r3, [r4, #16]
 80114fe:	440a      	add	r2, r1
 8011500:	7561      	strb	r1, [r4, #21]
 8011502:	440b      	add	r3, r1
 8011504:	60a2      	str	r2, [r4, #8]
 8011506:	6123      	str	r3, [r4, #16]
 8011508:	7da0      	ldrb	r0, [r4, #22]
 801150a:	f080 0001 	eor.w	r0, r0, #1
 801150e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	802b      	strh	r3, [r5, #0]
 8011516:	e7ef      	b.n	80114f8 <ucdr_deserialize_uint16_t+0x90>
 8011518:	68a2      	ldr	r2, [r4, #8]
 801151a:	6923      	ldr	r3, [r4, #16]
 801151c:	1b92      	subs	r2, r2, r6
 801151e:	7da0      	ldrb	r0, [r4, #22]
 8011520:	1b9b      	subs	r3, r3, r6
 8011522:	f884 8015 	strb.w	r8, [r4, #21]
 8011526:	f080 0001 	eor.w	r0, r0, #1
 801152a:	60a2      	str	r2, [r4, #8]
 801152c:	6123      	str	r3, [r4, #16]
 801152e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011532:	68a3      	ldr	r3, [r4, #8]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	706b      	strb	r3, [r5, #1]
 8011538:	e7c2      	b.n	80114c0 <ucdr_deserialize_uint16_t+0x58>
 801153a:	4639      	mov	r1, r7
 801153c:	4632      	mov	r2, r6
 801153e:	4628      	mov	r0, r5
 8011540:	f00e fb97 	bl	801fc72 <memcpy>
 8011544:	464a      	mov	r2, r9
 8011546:	19a8      	adds	r0, r5, r6
 8011548:	68a1      	ldr	r1, [r4, #8]
 801154a:	f00e fb92 	bl	801fc72 <memcpy>
 801154e:	e7b7      	b.n	80114c0 <ucdr_deserialize_uint16_t+0x58>

08011550 <ucdr_deserialize_endian_uint16_t>:
 8011550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011554:	4604      	mov	r4, r0
 8011556:	460e      	mov	r6, r1
 8011558:	2102      	movs	r1, #2
 801155a:	4615      	mov	r5, r2
 801155c:	f001 f8ce 	bl	80126fc <ucdr_buffer_alignment>
 8011560:	4601      	mov	r1, r0
 8011562:	4620      	mov	r0, r4
 8011564:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011568:	f001 f910 	bl	801278c <ucdr_advance_buffer>
 801156c:	2102      	movs	r1, #2
 801156e:	4620      	mov	r0, r4
 8011570:	f001 f864 	bl	801263c <ucdr_check_buffer_available_for>
 8011574:	bb70      	cbnz	r0, 80115d4 <ucdr_deserialize_endian_uint16_t+0x84>
 8011576:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801157a:	454f      	cmp	r7, r9
 801157c:	d925      	bls.n	80115ca <ucdr_deserialize_endian_uint16_t+0x7a>
 801157e:	6923      	ldr	r3, [r4, #16]
 8011580:	4620      	mov	r0, r4
 8011582:	60a7      	str	r7, [r4, #8]
 8011584:	eba7 0709 	sub.w	r7, r7, r9
 8011588:	443b      	add	r3, r7
 801158a:	f1c7 0a02 	rsb	sl, r7, #2
 801158e:	6123      	str	r3, [r4, #16]
 8011590:	4651      	mov	r1, sl
 8011592:	f001 f85f 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011596:	2800      	cmp	r0, #0
 8011598:	d034      	beq.n	8011604 <ucdr_deserialize_endian_uint16_t+0xb4>
 801159a:	2e01      	cmp	r6, #1
 801159c:	d043      	beq.n	8011626 <ucdr_deserialize_endian_uint16_t+0xd6>
 801159e:	f899 3001 	ldrb.w	r3, [r9, #1]
 80115a2:	702b      	strb	r3, [r5, #0]
 80115a4:	2f00      	cmp	r7, #0
 80115a6:	d03a      	beq.n	801161e <ucdr_deserialize_endian_uint16_t+0xce>
 80115a8:	f899 3000 	ldrb.w	r3, [r9]
 80115ac:	706b      	strb	r3, [r5, #1]
 80115ae:	6923      	ldr	r3, [r4, #16]
 80115b0:	2102      	movs	r1, #2
 80115b2:	68a2      	ldr	r2, [r4, #8]
 80115b4:	3302      	adds	r3, #2
 80115b6:	7da0      	ldrb	r0, [r4, #22]
 80115b8:	4452      	add	r2, sl
 80115ba:	7561      	strb	r1, [r4, #21]
 80115bc:	1bdb      	subs	r3, r3, r7
 80115be:	f080 0001 	eor.w	r0, r0, #1
 80115c2:	60a2      	str	r2, [r4, #8]
 80115c4:	6123      	str	r3, [r4, #16]
 80115c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ca:	2102      	movs	r1, #2
 80115cc:	4620      	mov	r0, r4
 80115ce:	f001 f841 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80115d2:	b178      	cbz	r0, 80115f4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80115d4:	2e01      	cmp	r6, #1
 80115d6:	68a3      	ldr	r3, [r4, #8]
 80115d8:	d011      	beq.n	80115fe <ucdr_deserialize_endian_uint16_t+0xae>
 80115da:	785b      	ldrb	r3, [r3, #1]
 80115dc:	702b      	strb	r3, [r5, #0]
 80115de:	68a3      	ldr	r3, [r4, #8]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	706b      	strb	r3, [r5, #1]
 80115e4:	2102      	movs	r1, #2
 80115e6:	68a2      	ldr	r2, [r4, #8]
 80115e8:	6923      	ldr	r3, [r4, #16]
 80115ea:	440a      	add	r2, r1
 80115ec:	7561      	strb	r1, [r4, #21]
 80115ee:	440b      	add	r3, r1
 80115f0:	60a2      	str	r2, [r4, #8]
 80115f2:	6123      	str	r3, [r4, #16]
 80115f4:	7da0      	ldrb	r0, [r4, #22]
 80115f6:	f080 0001 	eor.w	r0, r0, #1
 80115fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115fe:	881b      	ldrh	r3, [r3, #0]
 8011600:	802b      	strh	r3, [r5, #0]
 8011602:	e7ef      	b.n	80115e4 <ucdr_deserialize_endian_uint16_t+0x94>
 8011604:	68a2      	ldr	r2, [r4, #8]
 8011606:	6923      	ldr	r3, [r4, #16]
 8011608:	1bd2      	subs	r2, r2, r7
 801160a:	7da0      	ldrb	r0, [r4, #22]
 801160c:	1bdb      	subs	r3, r3, r7
 801160e:	f884 8015 	strb.w	r8, [r4, #21]
 8011612:	f080 0001 	eor.w	r0, r0, #1
 8011616:	60a2      	str	r2, [r4, #8]
 8011618:	6123      	str	r3, [r4, #16]
 801161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801161e:	68a3      	ldr	r3, [r4, #8]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	706b      	strb	r3, [r5, #1]
 8011624:	e7c3      	b.n	80115ae <ucdr_deserialize_endian_uint16_t+0x5e>
 8011626:	4649      	mov	r1, r9
 8011628:	463a      	mov	r2, r7
 801162a:	4628      	mov	r0, r5
 801162c:	f00e fb21 	bl	801fc72 <memcpy>
 8011630:	4652      	mov	r2, sl
 8011632:	19e8      	adds	r0, r5, r7
 8011634:	68a1      	ldr	r1, [r4, #8]
 8011636:	f00e fb1c 	bl	801fc72 <memcpy>
 801163a:	e7b8      	b.n	80115ae <ucdr_deserialize_endian_uint16_t+0x5e>

0801163c <ucdr_serialize_uint32_t>:
 801163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011640:	b082      	sub	sp, #8
 8011642:	4604      	mov	r4, r0
 8011644:	9101      	str	r1, [sp, #4]
 8011646:	2104      	movs	r1, #4
 8011648:	f001 f858 	bl	80126fc <ucdr_buffer_alignment>
 801164c:	4601      	mov	r1, r0
 801164e:	4620      	mov	r0, r4
 8011650:	7d67      	ldrb	r7, [r4, #21]
 8011652:	f001 f89b 	bl	801278c <ucdr_advance_buffer>
 8011656:	2104      	movs	r1, #4
 8011658:	4620      	mov	r0, r4
 801165a:	f000 ffef 	bl	801263c <ucdr_check_buffer_available_for>
 801165e:	2800      	cmp	r0, #0
 8011660:	d139      	bne.n	80116d6 <ucdr_serialize_uint32_t+0x9a>
 8011662:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011666:	42ab      	cmp	r3, r5
 8011668:	d930      	bls.n	80116cc <ucdr_serialize_uint32_t+0x90>
 801166a:	1b5e      	subs	r6, r3, r5
 801166c:	60a3      	str	r3, [r4, #8]
 801166e:	6923      	ldr	r3, [r4, #16]
 8011670:	4620      	mov	r0, r4
 8011672:	f1c6 0804 	rsb	r8, r6, #4
 8011676:	4433      	add	r3, r6
 8011678:	4641      	mov	r1, r8
 801167a:	6123      	str	r3, [r4, #16]
 801167c:	f000 ffea 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011680:	2800      	cmp	r0, #0
 8011682:	d04c      	beq.n	801171e <ucdr_serialize_uint32_t+0xe2>
 8011684:	7d23      	ldrb	r3, [r4, #20]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d063      	beq.n	8011752 <ucdr_serialize_uint32_t+0x116>
 801168a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801168e:	702b      	strb	r3, [r5, #0]
 8011690:	2e00      	cmp	r6, #0
 8011692:	d051      	beq.n	8011738 <ucdr_serialize_uint32_t+0xfc>
 8011694:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011698:	2e01      	cmp	r6, #1
 801169a:	706b      	strb	r3, [r5, #1]
 801169c:	d050      	beq.n	8011740 <ucdr_serialize_uint32_t+0x104>
 801169e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116a2:	2e02      	cmp	r6, #2
 80116a4:	70ab      	strb	r3, [r5, #2]
 80116a6:	d04f      	beq.n	8011748 <ucdr_serialize_uint32_t+0x10c>
 80116a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116ac:	70eb      	strb	r3, [r5, #3]
 80116ae:	6923      	ldr	r3, [r4, #16]
 80116b0:	2104      	movs	r1, #4
 80116b2:	68a2      	ldr	r2, [r4, #8]
 80116b4:	3304      	adds	r3, #4
 80116b6:	7da0      	ldrb	r0, [r4, #22]
 80116b8:	4442      	add	r2, r8
 80116ba:	7561      	strb	r1, [r4, #21]
 80116bc:	1b9e      	subs	r6, r3, r6
 80116be:	f080 0001 	eor.w	r0, r0, #1
 80116c2:	60a2      	str	r2, [r4, #8]
 80116c4:	6126      	str	r6, [r4, #16]
 80116c6:	b002      	add	sp, #8
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	2104      	movs	r1, #4
 80116ce:	4620      	mov	r0, r4
 80116d0:	f000 ffc0 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80116d4:	b1d0      	cbz	r0, 801170c <ucdr_serialize_uint32_t+0xd0>
 80116d6:	7d23      	ldrb	r3, [r4, #20]
 80116d8:	2b01      	cmp	r3, #1
 80116da:	68a3      	ldr	r3, [r4, #8]
 80116dc:	d01c      	beq.n	8011718 <ucdr_serialize_uint32_t+0xdc>
 80116de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80116e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80116ea:	7018      	strb	r0, [r3, #0]
 80116ec:	68a3      	ldr	r3, [r4, #8]
 80116ee:	705a      	strb	r2, [r3, #1]
 80116f0:	68a3      	ldr	r3, [r4, #8]
 80116f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116f6:	7099      	strb	r1, [r3, #2]
 80116f8:	68a3      	ldr	r3, [r4, #8]
 80116fa:	70da      	strb	r2, [r3, #3]
 80116fc:	2104      	movs	r1, #4
 80116fe:	68a2      	ldr	r2, [r4, #8]
 8011700:	6923      	ldr	r3, [r4, #16]
 8011702:	440a      	add	r2, r1
 8011704:	7561      	strb	r1, [r4, #21]
 8011706:	440b      	add	r3, r1
 8011708:	60a2      	str	r2, [r4, #8]
 801170a:	6123      	str	r3, [r4, #16]
 801170c:	7da0      	ldrb	r0, [r4, #22]
 801170e:	f080 0001 	eor.w	r0, r0, #1
 8011712:	b002      	add	sp, #8
 8011714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011718:	9a01      	ldr	r2, [sp, #4]
 801171a:	601a      	str	r2, [r3, #0]
 801171c:	e7ee      	b.n	80116fc <ucdr_serialize_uint32_t+0xc0>
 801171e:	68a2      	ldr	r2, [r4, #8]
 8011720:	6923      	ldr	r3, [r4, #16]
 8011722:	7da0      	ldrb	r0, [r4, #22]
 8011724:	1b92      	subs	r2, r2, r6
 8011726:	1b9b      	subs	r3, r3, r6
 8011728:	7567      	strb	r7, [r4, #21]
 801172a:	f080 0001 	eor.w	r0, r0, #1
 801172e:	60a2      	str	r2, [r4, #8]
 8011730:	6123      	str	r3, [r4, #16]
 8011732:	b002      	add	sp, #8
 8011734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011738:	68a3      	ldr	r3, [r4, #8]
 801173a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801173e:	701a      	strb	r2, [r3, #0]
 8011740:	68a3      	ldr	r3, [r4, #8]
 8011742:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011746:	701a      	strb	r2, [r3, #0]
 8011748:	68a3      	ldr	r3, [r4, #8]
 801174a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801174e:	701a      	strb	r2, [r3, #0]
 8011750:	e7ad      	b.n	80116ae <ucdr_serialize_uint32_t+0x72>
 8011752:	4628      	mov	r0, r5
 8011754:	ad01      	add	r5, sp, #4
 8011756:	4632      	mov	r2, r6
 8011758:	4629      	mov	r1, r5
 801175a:	f00e fa8a 	bl	801fc72 <memcpy>
 801175e:	4642      	mov	r2, r8
 8011760:	19a9      	adds	r1, r5, r6
 8011762:	68a0      	ldr	r0, [r4, #8]
 8011764:	f00e fa85 	bl	801fc72 <memcpy>
 8011768:	e7a1      	b.n	80116ae <ucdr_serialize_uint32_t+0x72>
 801176a:	bf00      	nop

0801176c <ucdr_serialize_endian_uint32_t>:
 801176c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011770:	4604      	mov	r4, r0
 8011772:	b083      	sub	sp, #12
 8011774:	460d      	mov	r5, r1
 8011776:	2104      	movs	r1, #4
 8011778:	9201      	str	r2, [sp, #4]
 801177a:	f000 ffbf 	bl	80126fc <ucdr_buffer_alignment>
 801177e:	4601      	mov	r1, r0
 8011780:	4620      	mov	r0, r4
 8011782:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011786:	f001 f801 	bl	801278c <ucdr_advance_buffer>
 801178a:	2104      	movs	r1, #4
 801178c:	4620      	mov	r0, r4
 801178e:	f000 ff55 	bl	801263c <ucdr_check_buffer_available_for>
 8011792:	2800      	cmp	r0, #0
 8011794:	d138      	bne.n	8011808 <ucdr_serialize_endian_uint32_t+0x9c>
 8011796:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801179a:	42b7      	cmp	r7, r6
 801179c:	d92f      	bls.n	80117fe <ucdr_serialize_endian_uint32_t+0x92>
 801179e:	6923      	ldr	r3, [r4, #16]
 80117a0:	4620      	mov	r0, r4
 80117a2:	60a7      	str	r7, [r4, #8]
 80117a4:	1bbf      	subs	r7, r7, r6
 80117a6:	443b      	add	r3, r7
 80117a8:	f1c7 0904 	rsb	r9, r7, #4
 80117ac:	6123      	str	r3, [r4, #16]
 80117ae:	4649      	mov	r1, r9
 80117b0:	f000 ff50 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d04a      	beq.n	801184e <ucdr_serialize_endian_uint32_t+0xe2>
 80117b8:	2d01      	cmp	r5, #1
 80117ba:	d063      	beq.n	8011884 <ucdr_serialize_endian_uint32_t+0x118>
 80117bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117c0:	7033      	strb	r3, [r6, #0]
 80117c2:	2f00      	cmp	r7, #0
 80117c4:	d051      	beq.n	801186a <ucdr_serialize_endian_uint32_t+0xfe>
 80117c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117ca:	2f01      	cmp	r7, #1
 80117cc:	7073      	strb	r3, [r6, #1]
 80117ce:	d050      	beq.n	8011872 <ucdr_serialize_endian_uint32_t+0x106>
 80117d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117d4:	2f02      	cmp	r7, #2
 80117d6:	70b3      	strb	r3, [r6, #2]
 80117d8:	d04f      	beq.n	801187a <ucdr_serialize_endian_uint32_t+0x10e>
 80117da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117de:	70f3      	strb	r3, [r6, #3]
 80117e0:	6923      	ldr	r3, [r4, #16]
 80117e2:	2104      	movs	r1, #4
 80117e4:	68a2      	ldr	r2, [r4, #8]
 80117e6:	7da0      	ldrb	r0, [r4, #22]
 80117e8:	3304      	adds	r3, #4
 80117ea:	444a      	add	r2, r9
 80117ec:	7561      	strb	r1, [r4, #21]
 80117ee:	1bdb      	subs	r3, r3, r7
 80117f0:	f080 0001 	eor.w	r0, r0, #1
 80117f4:	60a2      	str	r2, [r4, #8]
 80117f6:	6123      	str	r3, [r4, #16]
 80117f8:	b003      	add	sp, #12
 80117fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117fe:	2104      	movs	r1, #4
 8011800:	4620      	mov	r0, r4
 8011802:	f000 ff27 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011806:	b1c8      	cbz	r0, 801183c <ucdr_serialize_endian_uint32_t+0xd0>
 8011808:	2d01      	cmp	r5, #1
 801180a:	68a3      	ldr	r3, [r4, #8]
 801180c:	d01c      	beq.n	8011848 <ucdr_serialize_endian_uint32_t+0xdc>
 801180e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011812:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011816:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801181a:	7018      	strb	r0, [r3, #0]
 801181c:	68a3      	ldr	r3, [r4, #8]
 801181e:	705a      	strb	r2, [r3, #1]
 8011820:	68a3      	ldr	r3, [r4, #8]
 8011822:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011826:	7099      	strb	r1, [r3, #2]
 8011828:	68a3      	ldr	r3, [r4, #8]
 801182a:	70da      	strb	r2, [r3, #3]
 801182c:	2104      	movs	r1, #4
 801182e:	68a2      	ldr	r2, [r4, #8]
 8011830:	6923      	ldr	r3, [r4, #16]
 8011832:	440a      	add	r2, r1
 8011834:	7561      	strb	r1, [r4, #21]
 8011836:	440b      	add	r3, r1
 8011838:	60a2      	str	r2, [r4, #8]
 801183a:	6123      	str	r3, [r4, #16]
 801183c:	7da0      	ldrb	r0, [r4, #22]
 801183e:	f080 0001 	eor.w	r0, r0, #1
 8011842:	b003      	add	sp, #12
 8011844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011848:	9a01      	ldr	r2, [sp, #4]
 801184a:	601a      	str	r2, [r3, #0]
 801184c:	e7ee      	b.n	801182c <ucdr_serialize_endian_uint32_t+0xc0>
 801184e:	68a2      	ldr	r2, [r4, #8]
 8011850:	6923      	ldr	r3, [r4, #16]
 8011852:	7da0      	ldrb	r0, [r4, #22]
 8011854:	1bd2      	subs	r2, r2, r7
 8011856:	1bdb      	subs	r3, r3, r7
 8011858:	f884 8015 	strb.w	r8, [r4, #21]
 801185c:	f080 0001 	eor.w	r0, r0, #1
 8011860:	60a2      	str	r2, [r4, #8]
 8011862:	6123      	str	r3, [r4, #16]
 8011864:	b003      	add	sp, #12
 8011866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801186a:	68a3      	ldr	r3, [r4, #8]
 801186c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011870:	701a      	strb	r2, [r3, #0]
 8011872:	68a3      	ldr	r3, [r4, #8]
 8011874:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011878:	701a      	strb	r2, [r3, #0]
 801187a:	68a3      	ldr	r3, [r4, #8]
 801187c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011880:	701a      	strb	r2, [r3, #0]
 8011882:	e7ad      	b.n	80117e0 <ucdr_serialize_endian_uint32_t+0x74>
 8011884:	ad01      	add	r5, sp, #4
 8011886:	463a      	mov	r2, r7
 8011888:	4630      	mov	r0, r6
 801188a:	4629      	mov	r1, r5
 801188c:	f00e f9f1 	bl	801fc72 <memcpy>
 8011890:	464a      	mov	r2, r9
 8011892:	19e9      	adds	r1, r5, r7
 8011894:	68a0      	ldr	r0, [r4, #8]
 8011896:	f00e f9ec 	bl	801fc72 <memcpy>
 801189a:	e7a1      	b.n	80117e0 <ucdr_serialize_endian_uint32_t+0x74>

0801189c <ucdr_deserialize_uint32_t>:
 801189c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a0:	4604      	mov	r4, r0
 80118a2:	460d      	mov	r5, r1
 80118a4:	2104      	movs	r1, #4
 80118a6:	f000 ff29 	bl	80126fc <ucdr_buffer_alignment>
 80118aa:	4601      	mov	r1, r0
 80118ac:	4620      	mov	r0, r4
 80118ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118b2:	f000 ff6b 	bl	801278c <ucdr_advance_buffer>
 80118b6:	2104      	movs	r1, #4
 80118b8:	4620      	mov	r0, r4
 80118ba:	f000 febf 	bl	801263c <ucdr_check_buffer_available_for>
 80118be:	2800      	cmp	r0, #0
 80118c0:	d138      	bne.n	8011934 <ucdr_deserialize_uint32_t+0x98>
 80118c2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80118c6:	42b7      	cmp	r7, r6
 80118c8:	d92f      	bls.n	801192a <ucdr_deserialize_uint32_t+0x8e>
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	4620      	mov	r0, r4
 80118ce:	60a7      	str	r7, [r4, #8]
 80118d0:	1bbf      	subs	r7, r7, r6
 80118d2:	443b      	add	r3, r7
 80118d4:	f1c7 0904 	rsb	r9, r7, #4
 80118d8:	6123      	str	r3, [r4, #16]
 80118da:	4649      	mov	r1, r9
 80118dc:	f000 feba 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d046      	beq.n	8011972 <ucdr_deserialize_uint32_t+0xd6>
 80118e4:	7d23      	ldrb	r3, [r4, #20]
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d05c      	beq.n	80119a4 <ucdr_deserialize_uint32_t+0x108>
 80118ea:	78f3      	ldrb	r3, [r6, #3]
 80118ec:	702b      	strb	r3, [r5, #0]
 80118ee:	2f00      	cmp	r7, #0
 80118f0:	d04c      	beq.n	801198c <ucdr_deserialize_uint32_t+0xf0>
 80118f2:	78b3      	ldrb	r3, [r6, #2]
 80118f4:	2f01      	cmp	r7, #1
 80118f6:	706b      	strb	r3, [r5, #1]
 80118f8:	f105 0302 	add.w	r3, r5, #2
 80118fc:	d04a      	beq.n	8011994 <ucdr_deserialize_uint32_t+0xf8>
 80118fe:	7873      	ldrb	r3, [r6, #1]
 8011900:	2f02      	cmp	r7, #2
 8011902:	70ab      	strb	r3, [r5, #2]
 8011904:	f105 0303 	add.w	r3, r5, #3
 8011908:	d048      	beq.n	801199c <ucdr_deserialize_uint32_t+0x100>
 801190a:	7833      	ldrb	r3, [r6, #0]
 801190c:	70eb      	strb	r3, [r5, #3]
 801190e:	6923      	ldr	r3, [r4, #16]
 8011910:	2104      	movs	r1, #4
 8011912:	68a2      	ldr	r2, [r4, #8]
 8011914:	3304      	adds	r3, #4
 8011916:	7da0      	ldrb	r0, [r4, #22]
 8011918:	444a      	add	r2, r9
 801191a:	7561      	strb	r1, [r4, #21]
 801191c:	1bdb      	subs	r3, r3, r7
 801191e:	f080 0001 	eor.w	r0, r0, #1
 8011922:	60a2      	str	r2, [r4, #8]
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801192a:	2104      	movs	r1, #4
 801192c:	4620      	mov	r0, r4
 801192e:	f000 fe91 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011932:	b1b0      	cbz	r0, 8011962 <ucdr_deserialize_uint32_t+0xc6>
 8011934:	7d23      	ldrb	r3, [r4, #20]
 8011936:	2b01      	cmp	r3, #1
 8011938:	68a3      	ldr	r3, [r4, #8]
 801193a:	d017      	beq.n	801196c <ucdr_deserialize_uint32_t+0xd0>
 801193c:	78db      	ldrb	r3, [r3, #3]
 801193e:	702b      	strb	r3, [r5, #0]
 8011940:	68a3      	ldr	r3, [r4, #8]
 8011942:	789b      	ldrb	r3, [r3, #2]
 8011944:	706b      	strb	r3, [r5, #1]
 8011946:	68a3      	ldr	r3, [r4, #8]
 8011948:	785b      	ldrb	r3, [r3, #1]
 801194a:	70ab      	strb	r3, [r5, #2]
 801194c:	68a3      	ldr	r3, [r4, #8]
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	70eb      	strb	r3, [r5, #3]
 8011952:	2104      	movs	r1, #4
 8011954:	68a2      	ldr	r2, [r4, #8]
 8011956:	6923      	ldr	r3, [r4, #16]
 8011958:	440a      	add	r2, r1
 801195a:	7561      	strb	r1, [r4, #21]
 801195c:	440b      	add	r3, r1
 801195e:	60a2      	str	r2, [r4, #8]
 8011960:	6123      	str	r3, [r4, #16]
 8011962:	7da0      	ldrb	r0, [r4, #22]
 8011964:	f080 0001 	eor.w	r0, r0, #1
 8011968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	602b      	str	r3, [r5, #0]
 8011970:	e7ef      	b.n	8011952 <ucdr_deserialize_uint32_t+0xb6>
 8011972:	68a2      	ldr	r2, [r4, #8]
 8011974:	6923      	ldr	r3, [r4, #16]
 8011976:	1bd2      	subs	r2, r2, r7
 8011978:	7da0      	ldrb	r0, [r4, #22]
 801197a:	1bdb      	subs	r3, r3, r7
 801197c:	f884 8015 	strb.w	r8, [r4, #21]
 8011980:	f080 0001 	eor.w	r0, r0, #1
 8011984:	60a2      	str	r2, [r4, #8]
 8011986:	6123      	str	r3, [r4, #16]
 8011988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801198c:	68a3      	ldr	r3, [r4, #8]
 801198e:	789b      	ldrb	r3, [r3, #2]
 8011990:	706b      	strb	r3, [r5, #1]
 8011992:	1cab      	adds	r3, r5, #2
 8011994:	68a2      	ldr	r2, [r4, #8]
 8011996:	7852      	ldrb	r2, [r2, #1]
 8011998:	f803 2b01 	strb.w	r2, [r3], #1
 801199c:	68a2      	ldr	r2, [r4, #8]
 801199e:	7812      	ldrb	r2, [r2, #0]
 80119a0:	701a      	strb	r2, [r3, #0]
 80119a2:	e7b4      	b.n	801190e <ucdr_deserialize_uint32_t+0x72>
 80119a4:	4631      	mov	r1, r6
 80119a6:	463a      	mov	r2, r7
 80119a8:	4628      	mov	r0, r5
 80119aa:	f00e f962 	bl	801fc72 <memcpy>
 80119ae:	464a      	mov	r2, r9
 80119b0:	19e8      	adds	r0, r5, r7
 80119b2:	68a1      	ldr	r1, [r4, #8]
 80119b4:	f00e f95d 	bl	801fc72 <memcpy>
 80119b8:	e7a9      	b.n	801190e <ucdr_deserialize_uint32_t+0x72>
 80119ba:	bf00      	nop

080119bc <ucdr_deserialize_endian_uint32_t>:
 80119bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119c0:	4604      	mov	r4, r0
 80119c2:	460e      	mov	r6, r1
 80119c4:	2104      	movs	r1, #4
 80119c6:	4615      	mov	r5, r2
 80119c8:	f000 fe98 	bl	80126fc <ucdr_buffer_alignment>
 80119cc:	4601      	mov	r1, r0
 80119ce:	4620      	mov	r0, r4
 80119d0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80119d4:	f000 feda 	bl	801278c <ucdr_advance_buffer>
 80119d8:	2104      	movs	r1, #4
 80119da:	4620      	mov	r0, r4
 80119dc:	f000 fe2e 	bl	801263c <ucdr_check_buffer_available_for>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d13c      	bne.n	8011a5e <ucdr_deserialize_endian_uint32_t+0xa2>
 80119e4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80119e8:	42bb      	cmp	r3, r7
 80119ea:	d933      	bls.n	8011a54 <ucdr_deserialize_endian_uint32_t+0x98>
 80119ec:	eba3 0907 	sub.w	r9, r3, r7
 80119f0:	60a3      	str	r3, [r4, #8]
 80119f2:	6923      	ldr	r3, [r4, #16]
 80119f4:	4620      	mov	r0, r4
 80119f6:	f1c9 0a04 	rsb	sl, r9, #4
 80119fa:	444b      	add	r3, r9
 80119fc:	4651      	mov	r1, sl
 80119fe:	6123      	str	r3, [r4, #16]
 8011a00:	f000 fe28 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	d048      	beq.n	8011a9a <ucdr_deserialize_endian_uint32_t+0xde>
 8011a08:	2e01      	cmp	r6, #1
 8011a0a:	d061      	beq.n	8011ad0 <ucdr_deserialize_endian_uint32_t+0x114>
 8011a0c:	78fb      	ldrb	r3, [r7, #3]
 8011a0e:	702b      	strb	r3, [r5, #0]
 8011a10:	f1b9 0f00 	cmp.w	r9, #0
 8011a14:	d050      	beq.n	8011ab8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011a16:	78bb      	ldrb	r3, [r7, #2]
 8011a18:	f1b9 0f01 	cmp.w	r9, #1
 8011a1c:	706b      	strb	r3, [r5, #1]
 8011a1e:	f105 0302 	add.w	r3, r5, #2
 8011a22:	d04d      	beq.n	8011ac0 <ucdr_deserialize_endian_uint32_t+0x104>
 8011a24:	787b      	ldrb	r3, [r7, #1]
 8011a26:	f1b9 0f02 	cmp.w	r9, #2
 8011a2a:	70ab      	strb	r3, [r5, #2]
 8011a2c:	f105 0303 	add.w	r3, r5, #3
 8011a30:	d04a      	beq.n	8011ac8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011a32:	783b      	ldrb	r3, [r7, #0]
 8011a34:	70eb      	strb	r3, [r5, #3]
 8011a36:	6923      	ldr	r3, [r4, #16]
 8011a38:	2104      	movs	r1, #4
 8011a3a:	68a2      	ldr	r2, [r4, #8]
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	7da0      	ldrb	r0, [r4, #22]
 8011a40:	4452      	add	r2, sl
 8011a42:	7561      	strb	r1, [r4, #21]
 8011a44:	eba3 0309 	sub.w	r3, r3, r9
 8011a48:	f080 0001 	eor.w	r0, r0, #1
 8011a4c:	60a2      	str	r2, [r4, #8]
 8011a4e:	6123      	str	r3, [r4, #16]
 8011a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a54:	2104      	movs	r1, #4
 8011a56:	4620      	mov	r0, r4
 8011a58:	f000 fdfc 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011a5c:	b1a8      	cbz	r0, 8011a8a <ucdr_deserialize_endian_uint32_t+0xce>
 8011a5e:	2e01      	cmp	r6, #1
 8011a60:	68a3      	ldr	r3, [r4, #8]
 8011a62:	d017      	beq.n	8011a94 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011a64:	78db      	ldrb	r3, [r3, #3]
 8011a66:	702b      	strb	r3, [r5, #0]
 8011a68:	68a3      	ldr	r3, [r4, #8]
 8011a6a:	789b      	ldrb	r3, [r3, #2]
 8011a6c:	706b      	strb	r3, [r5, #1]
 8011a6e:	68a3      	ldr	r3, [r4, #8]
 8011a70:	785b      	ldrb	r3, [r3, #1]
 8011a72:	70ab      	strb	r3, [r5, #2]
 8011a74:	68a3      	ldr	r3, [r4, #8]
 8011a76:	781b      	ldrb	r3, [r3, #0]
 8011a78:	70eb      	strb	r3, [r5, #3]
 8011a7a:	2104      	movs	r1, #4
 8011a7c:	68a2      	ldr	r2, [r4, #8]
 8011a7e:	6923      	ldr	r3, [r4, #16]
 8011a80:	440a      	add	r2, r1
 8011a82:	7561      	strb	r1, [r4, #21]
 8011a84:	440b      	add	r3, r1
 8011a86:	60a2      	str	r2, [r4, #8]
 8011a88:	6123      	str	r3, [r4, #16]
 8011a8a:	7da0      	ldrb	r0, [r4, #22]
 8011a8c:	f080 0001 	eor.w	r0, r0, #1
 8011a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	602b      	str	r3, [r5, #0]
 8011a98:	e7ef      	b.n	8011a7a <ucdr_deserialize_endian_uint32_t+0xbe>
 8011a9a:	68a2      	ldr	r2, [r4, #8]
 8011a9c:	6923      	ldr	r3, [r4, #16]
 8011a9e:	eba2 0209 	sub.w	r2, r2, r9
 8011aa2:	7da0      	ldrb	r0, [r4, #22]
 8011aa4:	eba3 0309 	sub.w	r3, r3, r9
 8011aa8:	f884 8015 	strb.w	r8, [r4, #21]
 8011aac:	f080 0001 	eor.w	r0, r0, #1
 8011ab0:	60a2      	str	r2, [r4, #8]
 8011ab2:	6123      	str	r3, [r4, #16]
 8011ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ab8:	68a3      	ldr	r3, [r4, #8]
 8011aba:	789b      	ldrb	r3, [r3, #2]
 8011abc:	706b      	strb	r3, [r5, #1]
 8011abe:	1cab      	adds	r3, r5, #2
 8011ac0:	68a2      	ldr	r2, [r4, #8]
 8011ac2:	7852      	ldrb	r2, [r2, #1]
 8011ac4:	f803 2b01 	strb.w	r2, [r3], #1
 8011ac8:	68a2      	ldr	r2, [r4, #8]
 8011aca:	7812      	ldrb	r2, [r2, #0]
 8011acc:	701a      	strb	r2, [r3, #0]
 8011ace:	e7b2      	b.n	8011a36 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011ad0:	4639      	mov	r1, r7
 8011ad2:	464a      	mov	r2, r9
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	f00e f8cc 	bl	801fc72 <memcpy>
 8011ada:	4652      	mov	r2, sl
 8011adc:	eb05 0009 	add.w	r0, r5, r9
 8011ae0:	68a1      	ldr	r1, [r4, #8]
 8011ae2:	f00e f8c6 	bl	801fc72 <memcpy>
 8011ae6:	e7a6      	b.n	8011a36 <ucdr_deserialize_endian_uint32_t+0x7a>

08011ae8 <ucdr_serialize_uint64_t>:
 8011ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aec:	4604      	mov	r4, r0
 8011aee:	b082      	sub	sp, #8
 8011af0:	2108      	movs	r1, #8
 8011af2:	e9cd 2300 	strd	r2, r3, [sp]
 8011af6:	f000 fe01 	bl	80126fc <ucdr_buffer_alignment>
 8011afa:	4601      	mov	r1, r0
 8011afc:	4620      	mov	r0, r4
 8011afe:	7d67      	ldrb	r7, [r4, #21]
 8011b00:	f000 fe44 	bl	801278c <ucdr_advance_buffer>
 8011b04:	2108      	movs	r1, #8
 8011b06:	4620      	mov	r0, r4
 8011b08:	f000 fd98 	bl	801263c <ucdr_check_buffer_available_for>
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	d14e      	bne.n	8011bae <ucdr_serialize_uint64_t+0xc6>
 8011b10:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011b14:	42ab      	cmp	r3, r5
 8011b16:	d945      	bls.n	8011ba4 <ucdr_serialize_uint64_t+0xbc>
 8011b18:	1b5e      	subs	r6, r3, r5
 8011b1a:	60a3      	str	r3, [r4, #8]
 8011b1c:	6923      	ldr	r3, [r4, #16]
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f1c6 0808 	rsb	r8, r6, #8
 8011b24:	4433      	add	r3, r6
 8011b26:	4641      	mov	r1, r8
 8011b28:	6123      	str	r3, [r4, #16]
 8011b2a:	f000 fd93 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d074      	beq.n	8011c1c <ucdr_serialize_uint64_t+0x134>
 8011b32:	7d23      	ldrb	r3, [r4, #20]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	f000 809b 	beq.w	8011c70 <ucdr_serialize_uint64_t+0x188>
 8011b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b3e:	702b      	strb	r3, [r5, #0]
 8011b40:	2e00      	cmp	r6, #0
 8011b42:	d078      	beq.n	8011c36 <ucdr_serialize_uint64_t+0x14e>
 8011b44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b48:	2e01      	cmp	r6, #1
 8011b4a:	706b      	strb	r3, [r5, #1]
 8011b4c:	d077      	beq.n	8011c3e <ucdr_serialize_uint64_t+0x156>
 8011b4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011b52:	2e02      	cmp	r6, #2
 8011b54:	70ab      	strb	r3, [r5, #2]
 8011b56:	d076      	beq.n	8011c46 <ucdr_serialize_uint64_t+0x15e>
 8011b58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011b5c:	2e03      	cmp	r6, #3
 8011b5e:	70eb      	strb	r3, [r5, #3]
 8011b60:	d075      	beq.n	8011c4e <ucdr_serialize_uint64_t+0x166>
 8011b62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011b66:	2e04      	cmp	r6, #4
 8011b68:	712b      	strb	r3, [r5, #4]
 8011b6a:	d074      	beq.n	8011c56 <ucdr_serialize_uint64_t+0x16e>
 8011b6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011b70:	2e05      	cmp	r6, #5
 8011b72:	716b      	strb	r3, [r5, #5]
 8011b74:	d073      	beq.n	8011c5e <ucdr_serialize_uint64_t+0x176>
 8011b76:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011b7a:	2e06      	cmp	r6, #6
 8011b7c:	71ab      	strb	r3, [r5, #6]
 8011b7e:	d072      	beq.n	8011c66 <ucdr_serialize_uint64_t+0x17e>
 8011b80:	f89d 3000 	ldrb.w	r3, [sp]
 8011b84:	71eb      	strb	r3, [r5, #7]
 8011b86:	6923      	ldr	r3, [r4, #16]
 8011b88:	2108      	movs	r1, #8
 8011b8a:	68a2      	ldr	r2, [r4, #8]
 8011b8c:	3308      	adds	r3, #8
 8011b8e:	7da0      	ldrb	r0, [r4, #22]
 8011b90:	4442      	add	r2, r8
 8011b92:	7561      	strb	r1, [r4, #21]
 8011b94:	1b9e      	subs	r6, r3, r6
 8011b96:	f080 0001 	eor.w	r0, r0, #1
 8011b9a:	60a2      	str	r2, [r4, #8]
 8011b9c:	6126      	str	r6, [r4, #16]
 8011b9e:	b002      	add	sp, #8
 8011ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ba4:	2108      	movs	r1, #8
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f000 fd54 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011bac:	b350      	cbz	r0, 8011c04 <ucdr_serialize_uint64_t+0x11c>
 8011bae:	7d23      	ldrb	r3, [r4, #20]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d02d      	beq.n	8011c10 <ucdr_serialize_uint64_t+0x128>
 8011bb4:	68a3      	ldr	r3, [r4, #8]
 8011bb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011bba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011bbe:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011bc2:	7018      	strb	r0, [r3, #0]
 8011bc4:	68a3      	ldr	r3, [r4, #8]
 8011bc6:	705a      	strb	r2, [r3, #1]
 8011bc8:	68a3      	ldr	r3, [r4, #8]
 8011bca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011bce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011bd2:	7099      	strb	r1, [r3, #2]
 8011bd4:	68a3      	ldr	r3, [r4, #8]
 8011bd6:	70da      	strb	r2, [r3, #3]
 8011bd8:	68a3      	ldr	r3, [r4, #8]
 8011bda:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011bde:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011be2:	7118      	strb	r0, [r3, #4]
 8011be4:	68a3      	ldr	r3, [r4, #8]
 8011be6:	715a      	strb	r2, [r3, #5]
 8011be8:	68a3      	ldr	r3, [r4, #8]
 8011bea:	f89d 2000 	ldrb.w	r2, [sp]
 8011bee:	7199      	strb	r1, [r3, #6]
 8011bf0:	68a3      	ldr	r3, [r4, #8]
 8011bf2:	71da      	strb	r2, [r3, #7]
 8011bf4:	2108      	movs	r1, #8
 8011bf6:	68a2      	ldr	r2, [r4, #8]
 8011bf8:	6923      	ldr	r3, [r4, #16]
 8011bfa:	440a      	add	r2, r1
 8011bfc:	7561      	strb	r1, [r4, #21]
 8011bfe:	440b      	add	r3, r1
 8011c00:	60a2      	str	r2, [r4, #8]
 8011c02:	6123      	str	r3, [r4, #16]
 8011c04:	7da0      	ldrb	r0, [r4, #22]
 8011c06:	f080 0001 	eor.w	r0, r0, #1
 8011c0a:	b002      	add	sp, #8
 8011c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c10:	466b      	mov	r3, sp
 8011c12:	68a2      	ldr	r2, [r4, #8]
 8011c14:	cb03      	ldmia	r3!, {r0, r1}
 8011c16:	6010      	str	r0, [r2, #0]
 8011c18:	6051      	str	r1, [r2, #4]
 8011c1a:	e7eb      	b.n	8011bf4 <ucdr_serialize_uint64_t+0x10c>
 8011c1c:	68a2      	ldr	r2, [r4, #8]
 8011c1e:	6923      	ldr	r3, [r4, #16]
 8011c20:	7da0      	ldrb	r0, [r4, #22]
 8011c22:	1b92      	subs	r2, r2, r6
 8011c24:	1b9b      	subs	r3, r3, r6
 8011c26:	7567      	strb	r7, [r4, #21]
 8011c28:	f080 0001 	eor.w	r0, r0, #1
 8011c2c:	60a2      	str	r2, [r4, #8]
 8011c2e:	6123      	str	r3, [r4, #16]
 8011c30:	b002      	add	sp, #8
 8011c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c36:	68a3      	ldr	r3, [r4, #8]
 8011c38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c3c:	701a      	strb	r2, [r3, #0]
 8011c3e:	68a3      	ldr	r3, [r4, #8]
 8011c40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c44:	701a      	strb	r2, [r3, #0]
 8011c46:	68a3      	ldr	r3, [r4, #8]
 8011c48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	68a3      	ldr	r3, [r4, #8]
 8011c50:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011c54:	701a      	strb	r2, [r3, #0]
 8011c56:	68a3      	ldr	r3, [r4, #8]
 8011c58:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011c5c:	701a      	strb	r2, [r3, #0]
 8011c5e:	68a3      	ldr	r3, [r4, #8]
 8011c60:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011c64:	701a      	strb	r2, [r3, #0]
 8011c66:	68a3      	ldr	r3, [r4, #8]
 8011c68:	f89d 2000 	ldrb.w	r2, [sp]
 8011c6c:	701a      	strb	r2, [r3, #0]
 8011c6e:	e78a      	b.n	8011b86 <ucdr_serialize_uint64_t+0x9e>
 8011c70:	4628      	mov	r0, r5
 8011c72:	466d      	mov	r5, sp
 8011c74:	4632      	mov	r2, r6
 8011c76:	4629      	mov	r1, r5
 8011c78:	f00d fffb 	bl	801fc72 <memcpy>
 8011c7c:	4642      	mov	r2, r8
 8011c7e:	19a9      	adds	r1, r5, r6
 8011c80:	68a0      	ldr	r0, [r4, #8]
 8011c82:	f00d fff6 	bl	801fc72 <memcpy>
 8011c86:	e77e      	b.n	8011b86 <ucdr_serialize_uint64_t+0x9e>

08011c88 <ucdr_serialize_int16_t>:
 8011c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	b082      	sub	sp, #8
 8011c90:	4604      	mov	r4, r0
 8011c92:	2102      	movs	r1, #2
 8011c94:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c98:	f000 fd30 	bl	80126fc <ucdr_buffer_alignment>
 8011c9c:	4601      	mov	r1, r0
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	7d67      	ldrb	r7, [r4, #21]
 8011ca2:	f000 fd73 	bl	801278c <ucdr_advance_buffer>
 8011ca6:	2102      	movs	r1, #2
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f000 fcc7 	bl	801263c <ucdr_check_buffer_available_for>
 8011cae:	bb78      	cbnz	r0, 8011d10 <ucdr_serialize_int16_t+0x88>
 8011cb0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011cb4:	42ab      	cmp	r3, r5
 8011cb6:	d926      	bls.n	8011d06 <ucdr_serialize_int16_t+0x7e>
 8011cb8:	1b5e      	subs	r6, r3, r5
 8011cba:	60a3      	str	r3, [r4, #8]
 8011cbc:	6923      	ldr	r3, [r4, #16]
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f1c6 0802 	rsb	r8, r6, #2
 8011cc4:	4433      	add	r3, r6
 8011cc6:	4641      	mov	r1, r8
 8011cc8:	6123      	str	r3, [r4, #16]
 8011cca:	f000 fcc3 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	d03b      	beq.n	8011d4a <ucdr_serialize_int16_t+0xc2>
 8011cd2:	7d23      	ldrb	r3, [r4, #20]
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d04a      	beq.n	8011d6e <ucdr_serialize_int16_t+0xe6>
 8011cd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011cdc:	702b      	strb	r3, [r5, #0]
 8011cde:	2e00      	cmp	r6, #0
 8011ce0:	d040      	beq.n	8011d64 <ucdr_serialize_int16_t+0xdc>
 8011ce2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ce6:	706b      	strb	r3, [r5, #1]
 8011ce8:	6923      	ldr	r3, [r4, #16]
 8011cea:	2102      	movs	r1, #2
 8011cec:	68a2      	ldr	r2, [r4, #8]
 8011cee:	3302      	adds	r3, #2
 8011cf0:	7da0      	ldrb	r0, [r4, #22]
 8011cf2:	4442      	add	r2, r8
 8011cf4:	7561      	strb	r1, [r4, #21]
 8011cf6:	1b9e      	subs	r6, r3, r6
 8011cf8:	f080 0001 	eor.w	r0, r0, #1
 8011cfc:	60a2      	str	r2, [r4, #8]
 8011cfe:	6126      	str	r6, [r4, #16]
 8011d00:	b002      	add	sp, #8
 8011d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d06:	2102      	movs	r1, #2
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f000 fca3 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011d0e:	b190      	cbz	r0, 8011d36 <ucdr_serialize_int16_t+0xae>
 8011d10:	7d23      	ldrb	r3, [r4, #20]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	68a3      	ldr	r3, [r4, #8]
 8011d16:	d014      	beq.n	8011d42 <ucdr_serialize_int16_t+0xba>
 8011d18:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011d1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d20:	7019      	strb	r1, [r3, #0]
 8011d22:	68a3      	ldr	r3, [r4, #8]
 8011d24:	705a      	strb	r2, [r3, #1]
 8011d26:	2102      	movs	r1, #2
 8011d28:	68a2      	ldr	r2, [r4, #8]
 8011d2a:	6923      	ldr	r3, [r4, #16]
 8011d2c:	440a      	add	r2, r1
 8011d2e:	7561      	strb	r1, [r4, #21]
 8011d30:	440b      	add	r3, r1
 8011d32:	60a2      	str	r2, [r4, #8]
 8011d34:	6123      	str	r3, [r4, #16]
 8011d36:	7da0      	ldrb	r0, [r4, #22]
 8011d38:	f080 0001 	eor.w	r0, r0, #1
 8011d3c:	b002      	add	sp, #8
 8011d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011d46:	801a      	strh	r2, [r3, #0]
 8011d48:	e7ed      	b.n	8011d26 <ucdr_serialize_int16_t+0x9e>
 8011d4a:	68a2      	ldr	r2, [r4, #8]
 8011d4c:	6923      	ldr	r3, [r4, #16]
 8011d4e:	7da0      	ldrb	r0, [r4, #22]
 8011d50:	1b92      	subs	r2, r2, r6
 8011d52:	1b9b      	subs	r3, r3, r6
 8011d54:	7567      	strb	r7, [r4, #21]
 8011d56:	f080 0001 	eor.w	r0, r0, #1
 8011d5a:	60a2      	str	r2, [r4, #8]
 8011d5c:	6123      	str	r3, [r4, #16]
 8011d5e:	b002      	add	sp, #8
 8011d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d64:	68a3      	ldr	r3, [r4, #8]
 8011d66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d6a:	701a      	strb	r2, [r3, #0]
 8011d6c:	e7bc      	b.n	8011ce8 <ucdr_serialize_int16_t+0x60>
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f10d 0506 	add.w	r5, sp, #6
 8011d74:	4632      	mov	r2, r6
 8011d76:	4629      	mov	r1, r5
 8011d78:	f00d ff7b 	bl	801fc72 <memcpy>
 8011d7c:	4642      	mov	r2, r8
 8011d7e:	19a9      	adds	r1, r5, r6
 8011d80:	68a0      	ldr	r0, [r4, #8]
 8011d82:	f00d ff76 	bl	801fc72 <memcpy>
 8011d86:	e7af      	b.n	8011ce8 <ucdr_serialize_int16_t+0x60>

08011d88 <ucdr_deserialize_int16_t>:
 8011d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	460d      	mov	r5, r1
 8011d90:	2102      	movs	r1, #2
 8011d92:	f000 fcb3 	bl	80126fc <ucdr_buffer_alignment>
 8011d96:	4601      	mov	r1, r0
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011d9e:	f000 fcf5 	bl	801278c <ucdr_advance_buffer>
 8011da2:	2102      	movs	r1, #2
 8011da4:	4620      	mov	r0, r4
 8011da6:	f000 fc49 	bl	801263c <ucdr_check_buffer_available_for>
 8011daa:	bb60      	cbnz	r0, 8011e06 <ucdr_deserialize_int16_t+0x7e>
 8011dac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011db0:	42be      	cmp	r6, r7
 8011db2:	d923      	bls.n	8011dfc <ucdr_deserialize_int16_t+0x74>
 8011db4:	6923      	ldr	r3, [r4, #16]
 8011db6:	4620      	mov	r0, r4
 8011db8:	60a6      	str	r6, [r4, #8]
 8011dba:	1bf6      	subs	r6, r6, r7
 8011dbc:	4433      	add	r3, r6
 8011dbe:	f1c6 0902 	rsb	r9, r6, #2
 8011dc2:	6123      	str	r3, [r4, #16]
 8011dc4:	4649      	mov	r1, r9
 8011dc6:	f000 fc45 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011dca:	2800      	cmp	r0, #0
 8011dcc:	d034      	beq.n	8011e38 <ucdr_deserialize_int16_t+0xb0>
 8011dce:	7d23      	ldrb	r3, [r4, #20]
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d042      	beq.n	8011e5a <ucdr_deserialize_int16_t+0xd2>
 8011dd4:	787b      	ldrb	r3, [r7, #1]
 8011dd6:	702b      	strb	r3, [r5, #0]
 8011dd8:	2e00      	cmp	r6, #0
 8011dda:	d03a      	beq.n	8011e52 <ucdr_deserialize_int16_t+0xca>
 8011ddc:	783b      	ldrb	r3, [r7, #0]
 8011dde:	706b      	strb	r3, [r5, #1]
 8011de0:	6923      	ldr	r3, [r4, #16]
 8011de2:	2102      	movs	r1, #2
 8011de4:	68a2      	ldr	r2, [r4, #8]
 8011de6:	3302      	adds	r3, #2
 8011de8:	7da0      	ldrb	r0, [r4, #22]
 8011dea:	444a      	add	r2, r9
 8011dec:	7561      	strb	r1, [r4, #21]
 8011dee:	1b9b      	subs	r3, r3, r6
 8011df0:	f080 0001 	eor.w	r0, r0, #1
 8011df4:	60a2      	str	r2, [r4, #8]
 8011df6:	6123      	str	r3, [r4, #16]
 8011df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dfc:	2102      	movs	r1, #2
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 fc28 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011e04:	b180      	cbz	r0, 8011e28 <ucdr_deserialize_int16_t+0xa0>
 8011e06:	7d23      	ldrb	r3, [r4, #20]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	68a3      	ldr	r3, [r4, #8]
 8011e0c:	d011      	beq.n	8011e32 <ucdr_deserialize_int16_t+0xaa>
 8011e0e:	785b      	ldrb	r3, [r3, #1]
 8011e10:	702b      	strb	r3, [r5, #0]
 8011e12:	68a3      	ldr	r3, [r4, #8]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	706b      	strb	r3, [r5, #1]
 8011e18:	2102      	movs	r1, #2
 8011e1a:	68a2      	ldr	r2, [r4, #8]
 8011e1c:	6923      	ldr	r3, [r4, #16]
 8011e1e:	440a      	add	r2, r1
 8011e20:	7561      	strb	r1, [r4, #21]
 8011e22:	440b      	add	r3, r1
 8011e24:	60a2      	str	r2, [r4, #8]
 8011e26:	6123      	str	r3, [r4, #16]
 8011e28:	7da0      	ldrb	r0, [r4, #22]
 8011e2a:	f080 0001 	eor.w	r0, r0, #1
 8011e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e32:	881b      	ldrh	r3, [r3, #0]
 8011e34:	802b      	strh	r3, [r5, #0]
 8011e36:	e7ef      	b.n	8011e18 <ucdr_deserialize_int16_t+0x90>
 8011e38:	68a2      	ldr	r2, [r4, #8]
 8011e3a:	6923      	ldr	r3, [r4, #16]
 8011e3c:	1b92      	subs	r2, r2, r6
 8011e3e:	7da0      	ldrb	r0, [r4, #22]
 8011e40:	1b9b      	subs	r3, r3, r6
 8011e42:	f884 8015 	strb.w	r8, [r4, #21]
 8011e46:	f080 0001 	eor.w	r0, r0, #1
 8011e4a:	60a2      	str	r2, [r4, #8]
 8011e4c:	6123      	str	r3, [r4, #16]
 8011e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	706b      	strb	r3, [r5, #1]
 8011e58:	e7c2      	b.n	8011de0 <ucdr_deserialize_int16_t+0x58>
 8011e5a:	4639      	mov	r1, r7
 8011e5c:	4632      	mov	r2, r6
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f00d ff07 	bl	801fc72 <memcpy>
 8011e64:	464a      	mov	r2, r9
 8011e66:	19a8      	adds	r0, r5, r6
 8011e68:	68a1      	ldr	r1, [r4, #8]
 8011e6a:	f00d ff02 	bl	801fc72 <memcpy>
 8011e6e:	e7b7      	b.n	8011de0 <ucdr_deserialize_int16_t+0x58>

08011e70 <ucdr_serialize_int32_t>:
 8011e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e74:	b082      	sub	sp, #8
 8011e76:	4604      	mov	r4, r0
 8011e78:	9101      	str	r1, [sp, #4]
 8011e7a:	2104      	movs	r1, #4
 8011e7c:	f000 fc3e 	bl	80126fc <ucdr_buffer_alignment>
 8011e80:	4601      	mov	r1, r0
 8011e82:	4620      	mov	r0, r4
 8011e84:	7d67      	ldrb	r7, [r4, #21]
 8011e86:	f000 fc81 	bl	801278c <ucdr_advance_buffer>
 8011e8a:	2104      	movs	r1, #4
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	f000 fbd5 	bl	801263c <ucdr_check_buffer_available_for>
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d139      	bne.n	8011f0a <ucdr_serialize_int32_t+0x9a>
 8011e96:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011e9a:	42ab      	cmp	r3, r5
 8011e9c:	d930      	bls.n	8011f00 <ucdr_serialize_int32_t+0x90>
 8011e9e:	1b5e      	subs	r6, r3, r5
 8011ea0:	60a3      	str	r3, [r4, #8]
 8011ea2:	6923      	ldr	r3, [r4, #16]
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	f1c6 0804 	rsb	r8, r6, #4
 8011eaa:	4433      	add	r3, r6
 8011eac:	4641      	mov	r1, r8
 8011eae:	6123      	str	r3, [r4, #16]
 8011eb0:	f000 fbd0 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d04c      	beq.n	8011f52 <ucdr_serialize_int32_t+0xe2>
 8011eb8:	7d23      	ldrb	r3, [r4, #20]
 8011eba:	2b01      	cmp	r3, #1
 8011ebc:	d063      	beq.n	8011f86 <ucdr_serialize_int32_t+0x116>
 8011ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ec2:	702b      	strb	r3, [r5, #0]
 8011ec4:	2e00      	cmp	r6, #0
 8011ec6:	d051      	beq.n	8011f6c <ucdr_serialize_int32_t+0xfc>
 8011ec8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ecc:	2e01      	cmp	r6, #1
 8011ece:	706b      	strb	r3, [r5, #1]
 8011ed0:	d050      	beq.n	8011f74 <ucdr_serialize_int32_t+0x104>
 8011ed2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ed6:	2e02      	cmp	r6, #2
 8011ed8:	70ab      	strb	r3, [r5, #2]
 8011eda:	d04f      	beq.n	8011f7c <ucdr_serialize_int32_t+0x10c>
 8011edc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011ee0:	70eb      	strb	r3, [r5, #3]
 8011ee2:	6923      	ldr	r3, [r4, #16]
 8011ee4:	2104      	movs	r1, #4
 8011ee6:	68a2      	ldr	r2, [r4, #8]
 8011ee8:	3304      	adds	r3, #4
 8011eea:	7da0      	ldrb	r0, [r4, #22]
 8011eec:	4442      	add	r2, r8
 8011eee:	7561      	strb	r1, [r4, #21]
 8011ef0:	1b9e      	subs	r6, r3, r6
 8011ef2:	f080 0001 	eor.w	r0, r0, #1
 8011ef6:	60a2      	str	r2, [r4, #8]
 8011ef8:	6126      	str	r6, [r4, #16]
 8011efa:	b002      	add	sp, #8
 8011efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f00:	2104      	movs	r1, #4
 8011f02:	4620      	mov	r0, r4
 8011f04:	f000 fba6 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011f08:	b1d0      	cbz	r0, 8011f40 <ucdr_serialize_int32_t+0xd0>
 8011f0a:	7d23      	ldrb	r3, [r4, #20]
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	68a3      	ldr	r3, [r4, #8]
 8011f10:	d01c      	beq.n	8011f4c <ucdr_serialize_int32_t+0xdc>
 8011f12:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011f16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f1a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011f1e:	7018      	strb	r0, [r3, #0]
 8011f20:	68a3      	ldr	r3, [r4, #8]
 8011f22:	705a      	strb	r2, [r3, #1]
 8011f24:	68a3      	ldr	r3, [r4, #8]
 8011f26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f2a:	7099      	strb	r1, [r3, #2]
 8011f2c:	68a3      	ldr	r3, [r4, #8]
 8011f2e:	70da      	strb	r2, [r3, #3]
 8011f30:	2104      	movs	r1, #4
 8011f32:	68a2      	ldr	r2, [r4, #8]
 8011f34:	6923      	ldr	r3, [r4, #16]
 8011f36:	440a      	add	r2, r1
 8011f38:	7561      	strb	r1, [r4, #21]
 8011f3a:	440b      	add	r3, r1
 8011f3c:	60a2      	str	r2, [r4, #8]
 8011f3e:	6123      	str	r3, [r4, #16]
 8011f40:	7da0      	ldrb	r0, [r4, #22]
 8011f42:	f080 0001 	eor.w	r0, r0, #1
 8011f46:	b002      	add	sp, #8
 8011f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f4c:	9a01      	ldr	r2, [sp, #4]
 8011f4e:	601a      	str	r2, [r3, #0]
 8011f50:	e7ee      	b.n	8011f30 <ucdr_serialize_int32_t+0xc0>
 8011f52:	68a2      	ldr	r2, [r4, #8]
 8011f54:	6923      	ldr	r3, [r4, #16]
 8011f56:	7da0      	ldrb	r0, [r4, #22]
 8011f58:	1b92      	subs	r2, r2, r6
 8011f5a:	1b9b      	subs	r3, r3, r6
 8011f5c:	7567      	strb	r7, [r4, #21]
 8011f5e:	f080 0001 	eor.w	r0, r0, #1
 8011f62:	60a2      	str	r2, [r4, #8]
 8011f64:	6123      	str	r3, [r4, #16]
 8011f66:	b002      	add	sp, #8
 8011f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6c:	68a3      	ldr	r3, [r4, #8]
 8011f6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f72:	701a      	strb	r2, [r3, #0]
 8011f74:	68a3      	ldr	r3, [r4, #8]
 8011f76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011f7a:	701a      	strb	r2, [r3, #0]
 8011f7c:	68a3      	ldr	r3, [r4, #8]
 8011f7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f82:	701a      	strb	r2, [r3, #0]
 8011f84:	e7ad      	b.n	8011ee2 <ucdr_serialize_int32_t+0x72>
 8011f86:	4628      	mov	r0, r5
 8011f88:	ad01      	add	r5, sp, #4
 8011f8a:	4632      	mov	r2, r6
 8011f8c:	4629      	mov	r1, r5
 8011f8e:	f00d fe70 	bl	801fc72 <memcpy>
 8011f92:	4642      	mov	r2, r8
 8011f94:	19a9      	adds	r1, r5, r6
 8011f96:	68a0      	ldr	r0, [r4, #8]
 8011f98:	f00d fe6b 	bl	801fc72 <memcpy>
 8011f9c:	e7a1      	b.n	8011ee2 <ucdr_serialize_int32_t+0x72>
 8011f9e:	bf00      	nop

08011fa0 <ucdr_deserialize_int32_t>:
 8011fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fa4:	4604      	mov	r4, r0
 8011fa6:	460d      	mov	r5, r1
 8011fa8:	2104      	movs	r1, #4
 8011faa:	f000 fba7 	bl	80126fc <ucdr_buffer_alignment>
 8011fae:	4601      	mov	r1, r0
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011fb6:	f000 fbe9 	bl	801278c <ucdr_advance_buffer>
 8011fba:	2104      	movs	r1, #4
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f000 fb3d 	bl	801263c <ucdr_check_buffer_available_for>
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	d138      	bne.n	8012038 <ucdr_deserialize_int32_t+0x98>
 8011fc6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011fca:	42b7      	cmp	r7, r6
 8011fcc:	d92f      	bls.n	801202e <ucdr_deserialize_int32_t+0x8e>
 8011fce:	6923      	ldr	r3, [r4, #16]
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	60a7      	str	r7, [r4, #8]
 8011fd4:	1bbf      	subs	r7, r7, r6
 8011fd6:	443b      	add	r3, r7
 8011fd8:	f1c7 0904 	rsb	r9, r7, #4
 8011fdc:	6123      	str	r3, [r4, #16]
 8011fde:	4649      	mov	r1, r9
 8011fe0:	f000 fb38 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d046      	beq.n	8012076 <ucdr_deserialize_int32_t+0xd6>
 8011fe8:	7d23      	ldrb	r3, [r4, #20]
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d05c      	beq.n	80120a8 <ucdr_deserialize_int32_t+0x108>
 8011fee:	78f3      	ldrb	r3, [r6, #3]
 8011ff0:	702b      	strb	r3, [r5, #0]
 8011ff2:	2f00      	cmp	r7, #0
 8011ff4:	d04c      	beq.n	8012090 <ucdr_deserialize_int32_t+0xf0>
 8011ff6:	78b3      	ldrb	r3, [r6, #2]
 8011ff8:	2f01      	cmp	r7, #1
 8011ffa:	706b      	strb	r3, [r5, #1]
 8011ffc:	f105 0302 	add.w	r3, r5, #2
 8012000:	d04a      	beq.n	8012098 <ucdr_deserialize_int32_t+0xf8>
 8012002:	7873      	ldrb	r3, [r6, #1]
 8012004:	2f02      	cmp	r7, #2
 8012006:	70ab      	strb	r3, [r5, #2]
 8012008:	f105 0303 	add.w	r3, r5, #3
 801200c:	d048      	beq.n	80120a0 <ucdr_deserialize_int32_t+0x100>
 801200e:	7833      	ldrb	r3, [r6, #0]
 8012010:	70eb      	strb	r3, [r5, #3]
 8012012:	6923      	ldr	r3, [r4, #16]
 8012014:	2104      	movs	r1, #4
 8012016:	68a2      	ldr	r2, [r4, #8]
 8012018:	3304      	adds	r3, #4
 801201a:	7da0      	ldrb	r0, [r4, #22]
 801201c:	444a      	add	r2, r9
 801201e:	7561      	strb	r1, [r4, #21]
 8012020:	1bdb      	subs	r3, r3, r7
 8012022:	f080 0001 	eor.w	r0, r0, #1
 8012026:	60a2      	str	r2, [r4, #8]
 8012028:	6123      	str	r3, [r4, #16]
 801202a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801202e:	2104      	movs	r1, #4
 8012030:	4620      	mov	r0, r4
 8012032:	f000 fb0f 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8012036:	b1b0      	cbz	r0, 8012066 <ucdr_deserialize_int32_t+0xc6>
 8012038:	7d23      	ldrb	r3, [r4, #20]
 801203a:	2b01      	cmp	r3, #1
 801203c:	68a3      	ldr	r3, [r4, #8]
 801203e:	d017      	beq.n	8012070 <ucdr_deserialize_int32_t+0xd0>
 8012040:	78db      	ldrb	r3, [r3, #3]
 8012042:	702b      	strb	r3, [r5, #0]
 8012044:	68a3      	ldr	r3, [r4, #8]
 8012046:	789b      	ldrb	r3, [r3, #2]
 8012048:	706b      	strb	r3, [r5, #1]
 801204a:	68a3      	ldr	r3, [r4, #8]
 801204c:	785b      	ldrb	r3, [r3, #1]
 801204e:	70ab      	strb	r3, [r5, #2]
 8012050:	68a3      	ldr	r3, [r4, #8]
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	70eb      	strb	r3, [r5, #3]
 8012056:	2104      	movs	r1, #4
 8012058:	68a2      	ldr	r2, [r4, #8]
 801205a:	6923      	ldr	r3, [r4, #16]
 801205c:	440a      	add	r2, r1
 801205e:	7561      	strb	r1, [r4, #21]
 8012060:	440b      	add	r3, r1
 8012062:	60a2      	str	r2, [r4, #8]
 8012064:	6123      	str	r3, [r4, #16]
 8012066:	7da0      	ldrb	r0, [r4, #22]
 8012068:	f080 0001 	eor.w	r0, r0, #1
 801206c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	602b      	str	r3, [r5, #0]
 8012074:	e7ef      	b.n	8012056 <ucdr_deserialize_int32_t+0xb6>
 8012076:	68a2      	ldr	r2, [r4, #8]
 8012078:	6923      	ldr	r3, [r4, #16]
 801207a:	1bd2      	subs	r2, r2, r7
 801207c:	7da0      	ldrb	r0, [r4, #22]
 801207e:	1bdb      	subs	r3, r3, r7
 8012080:	f884 8015 	strb.w	r8, [r4, #21]
 8012084:	f080 0001 	eor.w	r0, r0, #1
 8012088:	60a2      	str	r2, [r4, #8]
 801208a:	6123      	str	r3, [r4, #16]
 801208c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012090:	68a3      	ldr	r3, [r4, #8]
 8012092:	789b      	ldrb	r3, [r3, #2]
 8012094:	706b      	strb	r3, [r5, #1]
 8012096:	1cab      	adds	r3, r5, #2
 8012098:	68a2      	ldr	r2, [r4, #8]
 801209a:	7852      	ldrb	r2, [r2, #1]
 801209c:	f803 2b01 	strb.w	r2, [r3], #1
 80120a0:	68a2      	ldr	r2, [r4, #8]
 80120a2:	7812      	ldrb	r2, [r2, #0]
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	e7b4      	b.n	8012012 <ucdr_deserialize_int32_t+0x72>
 80120a8:	4631      	mov	r1, r6
 80120aa:	463a      	mov	r2, r7
 80120ac:	4628      	mov	r0, r5
 80120ae:	f00d fde0 	bl	801fc72 <memcpy>
 80120b2:	464a      	mov	r2, r9
 80120b4:	19e8      	adds	r0, r5, r7
 80120b6:	68a1      	ldr	r1, [r4, #8]
 80120b8:	f00d fddb 	bl	801fc72 <memcpy>
 80120bc:	e7a9      	b.n	8012012 <ucdr_deserialize_int32_t+0x72>
 80120be:	bf00      	nop

080120c0 <ucdr_serialize_float>:
 80120c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c4:	4604      	mov	r4, r0
 80120c6:	b082      	sub	sp, #8
 80120c8:	2104      	movs	r1, #4
 80120ca:	ed8d 0a01 	vstr	s0, [sp, #4]
 80120ce:	f000 fb15 	bl	80126fc <ucdr_buffer_alignment>
 80120d2:	4601      	mov	r1, r0
 80120d4:	4620      	mov	r0, r4
 80120d6:	7d67      	ldrb	r7, [r4, #21]
 80120d8:	f000 fb58 	bl	801278c <ucdr_advance_buffer>
 80120dc:	2104      	movs	r1, #4
 80120de:	4620      	mov	r0, r4
 80120e0:	f000 faac 	bl	801263c <ucdr_check_buffer_available_for>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	d139      	bne.n	801215c <ucdr_serialize_float+0x9c>
 80120e8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80120ec:	42ab      	cmp	r3, r5
 80120ee:	d930      	bls.n	8012152 <ucdr_serialize_float+0x92>
 80120f0:	1b5e      	subs	r6, r3, r5
 80120f2:	60a3      	str	r3, [r4, #8]
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	4620      	mov	r0, r4
 80120f8:	f1c6 0804 	rsb	r8, r6, #4
 80120fc:	4433      	add	r3, r6
 80120fe:	4641      	mov	r1, r8
 8012100:	6123      	str	r3, [r4, #16]
 8012102:	f000 faa7 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8012106:	2800      	cmp	r0, #0
 8012108:	d04c      	beq.n	80121a4 <ucdr_serialize_float+0xe4>
 801210a:	7d23      	ldrb	r3, [r4, #20]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d063      	beq.n	80121d8 <ucdr_serialize_float+0x118>
 8012110:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012114:	702b      	strb	r3, [r5, #0]
 8012116:	2e00      	cmp	r6, #0
 8012118:	d051      	beq.n	80121be <ucdr_serialize_float+0xfe>
 801211a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801211e:	2e01      	cmp	r6, #1
 8012120:	706b      	strb	r3, [r5, #1]
 8012122:	d050      	beq.n	80121c6 <ucdr_serialize_float+0x106>
 8012124:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012128:	2e02      	cmp	r6, #2
 801212a:	70ab      	strb	r3, [r5, #2]
 801212c:	d04f      	beq.n	80121ce <ucdr_serialize_float+0x10e>
 801212e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012132:	70eb      	strb	r3, [r5, #3]
 8012134:	6923      	ldr	r3, [r4, #16]
 8012136:	2104      	movs	r1, #4
 8012138:	68a2      	ldr	r2, [r4, #8]
 801213a:	3304      	adds	r3, #4
 801213c:	7da0      	ldrb	r0, [r4, #22]
 801213e:	4442      	add	r2, r8
 8012140:	7561      	strb	r1, [r4, #21]
 8012142:	1b9e      	subs	r6, r3, r6
 8012144:	f080 0001 	eor.w	r0, r0, #1
 8012148:	60a2      	str	r2, [r4, #8]
 801214a:	6126      	str	r6, [r4, #16]
 801214c:	b002      	add	sp, #8
 801214e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012152:	2104      	movs	r1, #4
 8012154:	4620      	mov	r0, r4
 8012156:	f000 fa7d 	bl	8012654 <ucdr_check_final_buffer_behavior>
 801215a:	b1d0      	cbz	r0, 8012192 <ucdr_serialize_float+0xd2>
 801215c:	7d23      	ldrb	r3, [r4, #20]
 801215e:	2b01      	cmp	r3, #1
 8012160:	68a3      	ldr	r3, [r4, #8]
 8012162:	d01c      	beq.n	801219e <ucdr_serialize_float+0xde>
 8012164:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012168:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801216c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012170:	7018      	strb	r0, [r3, #0]
 8012172:	68a3      	ldr	r3, [r4, #8]
 8012174:	705a      	strb	r2, [r3, #1]
 8012176:	68a3      	ldr	r3, [r4, #8]
 8012178:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801217c:	7099      	strb	r1, [r3, #2]
 801217e:	68a3      	ldr	r3, [r4, #8]
 8012180:	70da      	strb	r2, [r3, #3]
 8012182:	2104      	movs	r1, #4
 8012184:	68a2      	ldr	r2, [r4, #8]
 8012186:	6923      	ldr	r3, [r4, #16]
 8012188:	440a      	add	r2, r1
 801218a:	7561      	strb	r1, [r4, #21]
 801218c:	440b      	add	r3, r1
 801218e:	60a2      	str	r2, [r4, #8]
 8012190:	6123      	str	r3, [r4, #16]
 8012192:	7da0      	ldrb	r0, [r4, #22]
 8012194:	f080 0001 	eor.w	r0, r0, #1
 8012198:	b002      	add	sp, #8
 801219a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801219e:	9a01      	ldr	r2, [sp, #4]
 80121a0:	601a      	str	r2, [r3, #0]
 80121a2:	e7ee      	b.n	8012182 <ucdr_serialize_float+0xc2>
 80121a4:	68a2      	ldr	r2, [r4, #8]
 80121a6:	6923      	ldr	r3, [r4, #16]
 80121a8:	7da0      	ldrb	r0, [r4, #22]
 80121aa:	1b92      	subs	r2, r2, r6
 80121ac:	1b9b      	subs	r3, r3, r6
 80121ae:	7567      	strb	r7, [r4, #21]
 80121b0:	f080 0001 	eor.w	r0, r0, #1
 80121b4:	60a2      	str	r2, [r4, #8]
 80121b6:	6123      	str	r3, [r4, #16]
 80121b8:	b002      	add	sp, #8
 80121ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121be:	68a3      	ldr	r3, [r4, #8]
 80121c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121c4:	701a      	strb	r2, [r3, #0]
 80121c6:	68a3      	ldr	r3, [r4, #8]
 80121c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80121cc:	701a      	strb	r2, [r3, #0]
 80121ce:	68a3      	ldr	r3, [r4, #8]
 80121d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80121d4:	701a      	strb	r2, [r3, #0]
 80121d6:	e7ad      	b.n	8012134 <ucdr_serialize_float+0x74>
 80121d8:	4628      	mov	r0, r5
 80121da:	ad01      	add	r5, sp, #4
 80121dc:	4632      	mov	r2, r6
 80121de:	4629      	mov	r1, r5
 80121e0:	f00d fd47 	bl	801fc72 <memcpy>
 80121e4:	4642      	mov	r2, r8
 80121e6:	19a9      	adds	r1, r5, r6
 80121e8:	68a0      	ldr	r0, [r4, #8]
 80121ea:	f00d fd42 	bl	801fc72 <memcpy>
 80121ee:	e7a1      	b.n	8012134 <ucdr_serialize_float+0x74>

080121f0 <ucdr_deserialize_float>:
 80121f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121f4:	4604      	mov	r4, r0
 80121f6:	460d      	mov	r5, r1
 80121f8:	2104      	movs	r1, #4
 80121fa:	f000 fa7f 	bl	80126fc <ucdr_buffer_alignment>
 80121fe:	4601      	mov	r1, r0
 8012200:	4620      	mov	r0, r4
 8012202:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012206:	f000 fac1 	bl	801278c <ucdr_advance_buffer>
 801220a:	2104      	movs	r1, #4
 801220c:	4620      	mov	r0, r4
 801220e:	f000 fa15 	bl	801263c <ucdr_check_buffer_available_for>
 8012212:	2800      	cmp	r0, #0
 8012214:	d138      	bne.n	8012288 <ucdr_deserialize_float+0x98>
 8012216:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801221a:	42b7      	cmp	r7, r6
 801221c:	d92f      	bls.n	801227e <ucdr_deserialize_float+0x8e>
 801221e:	6923      	ldr	r3, [r4, #16]
 8012220:	4620      	mov	r0, r4
 8012222:	60a7      	str	r7, [r4, #8]
 8012224:	1bbf      	subs	r7, r7, r6
 8012226:	443b      	add	r3, r7
 8012228:	f1c7 0904 	rsb	r9, r7, #4
 801222c:	6123      	str	r3, [r4, #16]
 801222e:	4649      	mov	r1, r9
 8012230:	f000 fa10 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8012234:	2800      	cmp	r0, #0
 8012236:	d046      	beq.n	80122c6 <ucdr_deserialize_float+0xd6>
 8012238:	7d23      	ldrb	r3, [r4, #20]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d05c      	beq.n	80122f8 <ucdr_deserialize_float+0x108>
 801223e:	78f3      	ldrb	r3, [r6, #3]
 8012240:	702b      	strb	r3, [r5, #0]
 8012242:	2f00      	cmp	r7, #0
 8012244:	d04c      	beq.n	80122e0 <ucdr_deserialize_float+0xf0>
 8012246:	78b3      	ldrb	r3, [r6, #2]
 8012248:	2f01      	cmp	r7, #1
 801224a:	706b      	strb	r3, [r5, #1]
 801224c:	f105 0302 	add.w	r3, r5, #2
 8012250:	d04a      	beq.n	80122e8 <ucdr_deserialize_float+0xf8>
 8012252:	7873      	ldrb	r3, [r6, #1]
 8012254:	2f02      	cmp	r7, #2
 8012256:	70ab      	strb	r3, [r5, #2]
 8012258:	f105 0303 	add.w	r3, r5, #3
 801225c:	d048      	beq.n	80122f0 <ucdr_deserialize_float+0x100>
 801225e:	7833      	ldrb	r3, [r6, #0]
 8012260:	70eb      	strb	r3, [r5, #3]
 8012262:	6923      	ldr	r3, [r4, #16]
 8012264:	2104      	movs	r1, #4
 8012266:	68a2      	ldr	r2, [r4, #8]
 8012268:	3304      	adds	r3, #4
 801226a:	7da0      	ldrb	r0, [r4, #22]
 801226c:	444a      	add	r2, r9
 801226e:	7561      	strb	r1, [r4, #21]
 8012270:	1bdb      	subs	r3, r3, r7
 8012272:	f080 0001 	eor.w	r0, r0, #1
 8012276:	60a2      	str	r2, [r4, #8]
 8012278:	6123      	str	r3, [r4, #16]
 801227a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801227e:	2104      	movs	r1, #4
 8012280:	4620      	mov	r0, r4
 8012282:	f000 f9e7 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8012286:	b1b0      	cbz	r0, 80122b6 <ucdr_deserialize_float+0xc6>
 8012288:	7d23      	ldrb	r3, [r4, #20]
 801228a:	2b01      	cmp	r3, #1
 801228c:	68a3      	ldr	r3, [r4, #8]
 801228e:	d017      	beq.n	80122c0 <ucdr_deserialize_float+0xd0>
 8012290:	78db      	ldrb	r3, [r3, #3]
 8012292:	702b      	strb	r3, [r5, #0]
 8012294:	68a3      	ldr	r3, [r4, #8]
 8012296:	789b      	ldrb	r3, [r3, #2]
 8012298:	706b      	strb	r3, [r5, #1]
 801229a:	68a3      	ldr	r3, [r4, #8]
 801229c:	785b      	ldrb	r3, [r3, #1]
 801229e:	70ab      	strb	r3, [r5, #2]
 80122a0:	68a3      	ldr	r3, [r4, #8]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	70eb      	strb	r3, [r5, #3]
 80122a6:	2104      	movs	r1, #4
 80122a8:	68a2      	ldr	r2, [r4, #8]
 80122aa:	6923      	ldr	r3, [r4, #16]
 80122ac:	440a      	add	r2, r1
 80122ae:	7561      	strb	r1, [r4, #21]
 80122b0:	440b      	add	r3, r1
 80122b2:	60a2      	str	r2, [r4, #8]
 80122b4:	6123      	str	r3, [r4, #16]
 80122b6:	7da0      	ldrb	r0, [r4, #22]
 80122b8:	f080 0001 	eor.w	r0, r0, #1
 80122bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	602b      	str	r3, [r5, #0]
 80122c4:	e7ef      	b.n	80122a6 <ucdr_deserialize_float+0xb6>
 80122c6:	68a2      	ldr	r2, [r4, #8]
 80122c8:	6923      	ldr	r3, [r4, #16]
 80122ca:	1bd2      	subs	r2, r2, r7
 80122cc:	7da0      	ldrb	r0, [r4, #22]
 80122ce:	1bdb      	subs	r3, r3, r7
 80122d0:	f884 8015 	strb.w	r8, [r4, #21]
 80122d4:	f080 0001 	eor.w	r0, r0, #1
 80122d8:	60a2      	str	r2, [r4, #8]
 80122da:	6123      	str	r3, [r4, #16]
 80122dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122e0:	68a3      	ldr	r3, [r4, #8]
 80122e2:	789b      	ldrb	r3, [r3, #2]
 80122e4:	706b      	strb	r3, [r5, #1]
 80122e6:	1cab      	adds	r3, r5, #2
 80122e8:	68a2      	ldr	r2, [r4, #8]
 80122ea:	7852      	ldrb	r2, [r2, #1]
 80122ec:	f803 2b01 	strb.w	r2, [r3], #1
 80122f0:	68a2      	ldr	r2, [r4, #8]
 80122f2:	7812      	ldrb	r2, [r2, #0]
 80122f4:	701a      	strb	r2, [r3, #0]
 80122f6:	e7b4      	b.n	8012262 <ucdr_deserialize_float+0x72>
 80122f8:	4631      	mov	r1, r6
 80122fa:	463a      	mov	r2, r7
 80122fc:	4628      	mov	r0, r5
 80122fe:	f00d fcb8 	bl	801fc72 <memcpy>
 8012302:	464a      	mov	r2, r9
 8012304:	19e8      	adds	r0, r5, r7
 8012306:	68a1      	ldr	r1, [r4, #8]
 8012308:	f00d fcb3 	bl	801fc72 <memcpy>
 801230c:	e7a9      	b.n	8012262 <ucdr_deserialize_float+0x72>
 801230e:	bf00      	nop

08012310 <ucdr_serialize_double>:
 8012310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012314:	4604      	mov	r4, r0
 8012316:	b082      	sub	sp, #8
 8012318:	2108      	movs	r1, #8
 801231a:	ed8d 0b00 	vstr	d0, [sp]
 801231e:	f000 f9ed 	bl	80126fc <ucdr_buffer_alignment>
 8012322:	4601      	mov	r1, r0
 8012324:	4620      	mov	r0, r4
 8012326:	7d67      	ldrb	r7, [r4, #21]
 8012328:	f000 fa30 	bl	801278c <ucdr_advance_buffer>
 801232c:	2108      	movs	r1, #8
 801232e:	4620      	mov	r0, r4
 8012330:	f000 f984 	bl	801263c <ucdr_check_buffer_available_for>
 8012334:	2800      	cmp	r0, #0
 8012336:	d14e      	bne.n	80123d6 <ucdr_serialize_double+0xc6>
 8012338:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801233c:	42ab      	cmp	r3, r5
 801233e:	d945      	bls.n	80123cc <ucdr_serialize_double+0xbc>
 8012340:	1b5e      	subs	r6, r3, r5
 8012342:	60a3      	str	r3, [r4, #8]
 8012344:	6923      	ldr	r3, [r4, #16]
 8012346:	4620      	mov	r0, r4
 8012348:	f1c6 0808 	rsb	r8, r6, #8
 801234c:	4433      	add	r3, r6
 801234e:	4641      	mov	r1, r8
 8012350:	6123      	str	r3, [r4, #16]
 8012352:	f000 f97f 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8012356:	2800      	cmp	r0, #0
 8012358:	d074      	beq.n	8012444 <ucdr_serialize_double+0x134>
 801235a:	7d23      	ldrb	r3, [r4, #20]
 801235c:	2b01      	cmp	r3, #1
 801235e:	f000 809b 	beq.w	8012498 <ucdr_serialize_double+0x188>
 8012362:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012366:	702b      	strb	r3, [r5, #0]
 8012368:	2e00      	cmp	r6, #0
 801236a:	d078      	beq.n	801245e <ucdr_serialize_double+0x14e>
 801236c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012370:	2e01      	cmp	r6, #1
 8012372:	706b      	strb	r3, [r5, #1]
 8012374:	d077      	beq.n	8012466 <ucdr_serialize_double+0x156>
 8012376:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801237a:	2e02      	cmp	r6, #2
 801237c:	70ab      	strb	r3, [r5, #2]
 801237e:	d076      	beq.n	801246e <ucdr_serialize_double+0x15e>
 8012380:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012384:	2e03      	cmp	r6, #3
 8012386:	70eb      	strb	r3, [r5, #3]
 8012388:	d075      	beq.n	8012476 <ucdr_serialize_double+0x166>
 801238a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801238e:	2e04      	cmp	r6, #4
 8012390:	712b      	strb	r3, [r5, #4]
 8012392:	d074      	beq.n	801247e <ucdr_serialize_double+0x16e>
 8012394:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012398:	2e05      	cmp	r6, #5
 801239a:	716b      	strb	r3, [r5, #5]
 801239c:	d073      	beq.n	8012486 <ucdr_serialize_double+0x176>
 801239e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80123a2:	2e06      	cmp	r6, #6
 80123a4:	71ab      	strb	r3, [r5, #6]
 80123a6:	d072      	beq.n	801248e <ucdr_serialize_double+0x17e>
 80123a8:	f89d 3000 	ldrb.w	r3, [sp]
 80123ac:	71eb      	strb	r3, [r5, #7]
 80123ae:	6923      	ldr	r3, [r4, #16]
 80123b0:	2108      	movs	r1, #8
 80123b2:	68a2      	ldr	r2, [r4, #8]
 80123b4:	3308      	adds	r3, #8
 80123b6:	7da0      	ldrb	r0, [r4, #22]
 80123b8:	4442      	add	r2, r8
 80123ba:	7561      	strb	r1, [r4, #21]
 80123bc:	1b9e      	subs	r6, r3, r6
 80123be:	f080 0001 	eor.w	r0, r0, #1
 80123c2:	60a2      	str	r2, [r4, #8]
 80123c4:	6126      	str	r6, [r4, #16]
 80123c6:	b002      	add	sp, #8
 80123c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123cc:	2108      	movs	r1, #8
 80123ce:	4620      	mov	r0, r4
 80123d0:	f000 f940 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80123d4:	b350      	cbz	r0, 801242c <ucdr_serialize_double+0x11c>
 80123d6:	7d23      	ldrb	r3, [r4, #20]
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d02d      	beq.n	8012438 <ucdr_serialize_double+0x128>
 80123dc:	68a3      	ldr	r3, [r4, #8]
 80123de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80123e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80123e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80123ea:	7018      	strb	r0, [r3, #0]
 80123ec:	68a3      	ldr	r3, [r4, #8]
 80123ee:	705a      	strb	r2, [r3, #1]
 80123f0:	68a3      	ldr	r3, [r4, #8]
 80123f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80123f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80123fa:	7099      	strb	r1, [r3, #2]
 80123fc:	68a3      	ldr	r3, [r4, #8]
 80123fe:	70da      	strb	r2, [r3, #3]
 8012400:	68a3      	ldr	r3, [r4, #8]
 8012402:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012406:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801240a:	7118      	strb	r0, [r3, #4]
 801240c:	68a3      	ldr	r3, [r4, #8]
 801240e:	715a      	strb	r2, [r3, #5]
 8012410:	68a3      	ldr	r3, [r4, #8]
 8012412:	f89d 2000 	ldrb.w	r2, [sp]
 8012416:	7199      	strb	r1, [r3, #6]
 8012418:	68a3      	ldr	r3, [r4, #8]
 801241a:	71da      	strb	r2, [r3, #7]
 801241c:	2108      	movs	r1, #8
 801241e:	68a2      	ldr	r2, [r4, #8]
 8012420:	6923      	ldr	r3, [r4, #16]
 8012422:	440a      	add	r2, r1
 8012424:	7561      	strb	r1, [r4, #21]
 8012426:	440b      	add	r3, r1
 8012428:	60a2      	str	r2, [r4, #8]
 801242a:	6123      	str	r3, [r4, #16]
 801242c:	7da0      	ldrb	r0, [r4, #22]
 801242e:	f080 0001 	eor.w	r0, r0, #1
 8012432:	b002      	add	sp, #8
 8012434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012438:	466b      	mov	r3, sp
 801243a:	68a2      	ldr	r2, [r4, #8]
 801243c:	cb03      	ldmia	r3!, {r0, r1}
 801243e:	6010      	str	r0, [r2, #0]
 8012440:	6051      	str	r1, [r2, #4]
 8012442:	e7eb      	b.n	801241c <ucdr_serialize_double+0x10c>
 8012444:	68a2      	ldr	r2, [r4, #8]
 8012446:	6923      	ldr	r3, [r4, #16]
 8012448:	7da0      	ldrb	r0, [r4, #22]
 801244a:	1b92      	subs	r2, r2, r6
 801244c:	1b9b      	subs	r3, r3, r6
 801244e:	7567      	strb	r7, [r4, #21]
 8012450:	f080 0001 	eor.w	r0, r0, #1
 8012454:	60a2      	str	r2, [r4, #8]
 8012456:	6123      	str	r3, [r4, #16]
 8012458:	b002      	add	sp, #8
 801245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801245e:	68a3      	ldr	r3, [r4, #8]
 8012460:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012464:	701a      	strb	r2, [r3, #0]
 8012466:	68a3      	ldr	r3, [r4, #8]
 8012468:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801246c:	701a      	strb	r2, [r3, #0]
 801246e:	68a3      	ldr	r3, [r4, #8]
 8012470:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012474:	701a      	strb	r2, [r3, #0]
 8012476:	68a3      	ldr	r3, [r4, #8]
 8012478:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801247c:	701a      	strb	r2, [r3, #0]
 801247e:	68a3      	ldr	r3, [r4, #8]
 8012480:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012484:	701a      	strb	r2, [r3, #0]
 8012486:	68a3      	ldr	r3, [r4, #8]
 8012488:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801248c:	701a      	strb	r2, [r3, #0]
 801248e:	68a3      	ldr	r3, [r4, #8]
 8012490:	f89d 2000 	ldrb.w	r2, [sp]
 8012494:	701a      	strb	r2, [r3, #0]
 8012496:	e78a      	b.n	80123ae <ucdr_serialize_double+0x9e>
 8012498:	4628      	mov	r0, r5
 801249a:	466d      	mov	r5, sp
 801249c:	4632      	mov	r2, r6
 801249e:	4629      	mov	r1, r5
 80124a0:	f00d fbe7 	bl	801fc72 <memcpy>
 80124a4:	4642      	mov	r2, r8
 80124a6:	19a9      	adds	r1, r5, r6
 80124a8:	68a0      	ldr	r0, [r4, #8]
 80124aa:	f00d fbe2 	bl	801fc72 <memcpy>
 80124ae:	e77e      	b.n	80123ae <ucdr_serialize_double+0x9e>

080124b0 <ucdr_deserialize_double>:
 80124b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b4:	4604      	mov	r4, r0
 80124b6:	460d      	mov	r5, r1
 80124b8:	2108      	movs	r1, #8
 80124ba:	f000 f91f 	bl	80126fc <ucdr_buffer_alignment>
 80124be:	4601      	mov	r1, r0
 80124c0:	4620      	mov	r0, r4
 80124c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80124c6:	f000 f961 	bl	801278c <ucdr_advance_buffer>
 80124ca:	2108      	movs	r1, #8
 80124cc:	4620      	mov	r0, r4
 80124ce:	f000 f8b5 	bl	801263c <ucdr_check_buffer_available_for>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d151      	bne.n	801257a <ucdr_deserialize_double+0xca>
 80124d6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80124da:	42be      	cmp	r6, r7
 80124dc:	d948      	bls.n	8012570 <ucdr_deserialize_double+0xc0>
 80124de:	6923      	ldr	r3, [r4, #16]
 80124e0:	4620      	mov	r0, r4
 80124e2:	60a6      	str	r6, [r4, #8]
 80124e4:	1bf6      	subs	r6, r6, r7
 80124e6:	4433      	add	r3, r6
 80124e8:	f1c6 0908 	rsb	r9, r6, #8
 80124ec:	6123      	str	r3, [r4, #16]
 80124ee:	4649      	mov	r1, r9
 80124f0:	f000 f8b0 	bl	8012654 <ucdr_check_final_buffer_behavior>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	d06d      	beq.n	80125d4 <ucdr_deserialize_double+0x124>
 80124f8:	7d23      	ldrb	r3, [r4, #20]
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	f000 8093 	beq.w	8012626 <ucdr_deserialize_double+0x176>
 8012500:	79fb      	ldrb	r3, [r7, #7]
 8012502:	702b      	strb	r3, [r5, #0]
 8012504:	2e00      	cmp	r6, #0
 8012506:	d072      	beq.n	80125ee <ucdr_deserialize_double+0x13e>
 8012508:	79bb      	ldrb	r3, [r7, #6]
 801250a:	2e01      	cmp	r6, #1
 801250c:	706b      	strb	r3, [r5, #1]
 801250e:	f105 0302 	add.w	r3, r5, #2
 8012512:	d070      	beq.n	80125f6 <ucdr_deserialize_double+0x146>
 8012514:	797b      	ldrb	r3, [r7, #5]
 8012516:	2e02      	cmp	r6, #2
 8012518:	70ab      	strb	r3, [r5, #2]
 801251a:	f105 0303 	add.w	r3, r5, #3
 801251e:	d06e      	beq.n	80125fe <ucdr_deserialize_double+0x14e>
 8012520:	793b      	ldrb	r3, [r7, #4]
 8012522:	2e03      	cmp	r6, #3
 8012524:	70eb      	strb	r3, [r5, #3]
 8012526:	f105 0304 	add.w	r3, r5, #4
 801252a:	d06c      	beq.n	8012606 <ucdr_deserialize_double+0x156>
 801252c:	78fb      	ldrb	r3, [r7, #3]
 801252e:	2e04      	cmp	r6, #4
 8012530:	712b      	strb	r3, [r5, #4]
 8012532:	f105 0305 	add.w	r3, r5, #5
 8012536:	d06a      	beq.n	801260e <ucdr_deserialize_double+0x15e>
 8012538:	78bb      	ldrb	r3, [r7, #2]
 801253a:	2e05      	cmp	r6, #5
 801253c:	716b      	strb	r3, [r5, #5]
 801253e:	f105 0306 	add.w	r3, r5, #6
 8012542:	d068      	beq.n	8012616 <ucdr_deserialize_double+0x166>
 8012544:	787b      	ldrb	r3, [r7, #1]
 8012546:	2e06      	cmp	r6, #6
 8012548:	71ab      	strb	r3, [r5, #6]
 801254a:	f105 0307 	add.w	r3, r5, #7
 801254e:	d066      	beq.n	801261e <ucdr_deserialize_double+0x16e>
 8012550:	783b      	ldrb	r3, [r7, #0]
 8012552:	71eb      	strb	r3, [r5, #7]
 8012554:	6923      	ldr	r3, [r4, #16]
 8012556:	2108      	movs	r1, #8
 8012558:	68a2      	ldr	r2, [r4, #8]
 801255a:	3308      	adds	r3, #8
 801255c:	7da0      	ldrb	r0, [r4, #22]
 801255e:	444a      	add	r2, r9
 8012560:	7561      	strb	r1, [r4, #21]
 8012562:	1b9e      	subs	r6, r3, r6
 8012564:	f080 0001 	eor.w	r0, r0, #1
 8012568:	60a2      	str	r2, [r4, #8]
 801256a:	6126      	str	r6, [r4, #16]
 801256c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012570:	2108      	movs	r1, #8
 8012572:	4620      	mov	r0, r4
 8012574:	f000 f86e 	bl	8012654 <ucdr_check_final_buffer_behavior>
 8012578:	b310      	cbz	r0, 80125c0 <ucdr_deserialize_double+0x110>
 801257a:	7d23      	ldrb	r3, [r4, #20]
 801257c:	2b01      	cmp	r3, #1
 801257e:	68a3      	ldr	r3, [r4, #8]
 8012580:	d023      	beq.n	80125ca <ucdr_deserialize_double+0x11a>
 8012582:	79db      	ldrb	r3, [r3, #7]
 8012584:	702b      	strb	r3, [r5, #0]
 8012586:	68a3      	ldr	r3, [r4, #8]
 8012588:	799b      	ldrb	r3, [r3, #6]
 801258a:	706b      	strb	r3, [r5, #1]
 801258c:	68a3      	ldr	r3, [r4, #8]
 801258e:	795b      	ldrb	r3, [r3, #5]
 8012590:	70ab      	strb	r3, [r5, #2]
 8012592:	68a3      	ldr	r3, [r4, #8]
 8012594:	791b      	ldrb	r3, [r3, #4]
 8012596:	70eb      	strb	r3, [r5, #3]
 8012598:	68a3      	ldr	r3, [r4, #8]
 801259a:	78db      	ldrb	r3, [r3, #3]
 801259c:	712b      	strb	r3, [r5, #4]
 801259e:	68a3      	ldr	r3, [r4, #8]
 80125a0:	789b      	ldrb	r3, [r3, #2]
 80125a2:	716b      	strb	r3, [r5, #5]
 80125a4:	68a3      	ldr	r3, [r4, #8]
 80125a6:	785b      	ldrb	r3, [r3, #1]
 80125a8:	71ab      	strb	r3, [r5, #6]
 80125aa:	68a3      	ldr	r3, [r4, #8]
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	71eb      	strb	r3, [r5, #7]
 80125b0:	2108      	movs	r1, #8
 80125b2:	68a2      	ldr	r2, [r4, #8]
 80125b4:	6923      	ldr	r3, [r4, #16]
 80125b6:	440a      	add	r2, r1
 80125b8:	7561      	strb	r1, [r4, #21]
 80125ba:	440b      	add	r3, r1
 80125bc:	60a2      	str	r2, [r4, #8]
 80125be:	6123      	str	r3, [r4, #16]
 80125c0:	7da0      	ldrb	r0, [r4, #22]
 80125c2:	f080 0001 	eor.w	r0, r0, #1
 80125c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	602a      	str	r2, [r5, #0]
 80125d0:	606b      	str	r3, [r5, #4]
 80125d2:	e7ed      	b.n	80125b0 <ucdr_deserialize_double+0x100>
 80125d4:	68a2      	ldr	r2, [r4, #8]
 80125d6:	6923      	ldr	r3, [r4, #16]
 80125d8:	1b92      	subs	r2, r2, r6
 80125da:	7da0      	ldrb	r0, [r4, #22]
 80125dc:	1b9b      	subs	r3, r3, r6
 80125de:	f884 8015 	strb.w	r8, [r4, #21]
 80125e2:	f080 0001 	eor.w	r0, r0, #1
 80125e6:	60a2      	str	r2, [r4, #8]
 80125e8:	6123      	str	r3, [r4, #16]
 80125ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ee:	68a3      	ldr	r3, [r4, #8]
 80125f0:	799b      	ldrb	r3, [r3, #6]
 80125f2:	706b      	strb	r3, [r5, #1]
 80125f4:	1cab      	adds	r3, r5, #2
 80125f6:	68a2      	ldr	r2, [r4, #8]
 80125f8:	7952      	ldrb	r2, [r2, #5]
 80125fa:	f803 2b01 	strb.w	r2, [r3], #1
 80125fe:	68a2      	ldr	r2, [r4, #8]
 8012600:	7912      	ldrb	r2, [r2, #4]
 8012602:	f803 2b01 	strb.w	r2, [r3], #1
 8012606:	68a2      	ldr	r2, [r4, #8]
 8012608:	78d2      	ldrb	r2, [r2, #3]
 801260a:	f803 2b01 	strb.w	r2, [r3], #1
 801260e:	68a2      	ldr	r2, [r4, #8]
 8012610:	7892      	ldrb	r2, [r2, #2]
 8012612:	f803 2b01 	strb.w	r2, [r3], #1
 8012616:	68a2      	ldr	r2, [r4, #8]
 8012618:	7852      	ldrb	r2, [r2, #1]
 801261a:	f803 2b01 	strb.w	r2, [r3], #1
 801261e:	68a2      	ldr	r2, [r4, #8]
 8012620:	7812      	ldrb	r2, [r2, #0]
 8012622:	701a      	strb	r2, [r3, #0]
 8012624:	e796      	b.n	8012554 <ucdr_deserialize_double+0xa4>
 8012626:	4639      	mov	r1, r7
 8012628:	4632      	mov	r2, r6
 801262a:	4628      	mov	r0, r5
 801262c:	f00d fb21 	bl	801fc72 <memcpy>
 8012630:	464a      	mov	r2, r9
 8012632:	19a8      	adds	r0, r5, r6
 8012634:	68a1      	ldr	r1, [r4, #8]
 8012636:	f00d fb1c 	bl	801fc72 <memcpy>
 801263a:	e78b      	b.n	8012554 <ucdr_deserialize_double+0xa4>

0801263c <ucdr_check_buffer_available_for>:
 801263c:	7d83      	ldrb	r3, [r0, #22]
 801263e:	b93b      	cbnz	r3, 8012650 <ucdr_check_buffer_available_for+0x14>
 8012640:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012644:	4419      	add	r1, r3
 8012646:	4288      	cmp	r0, r1
 8012648:	bf34      	ite	cc
 801264a:	2000      	movcc	r0, #0
 801264c:	2001      	movcs	r0, #1
 801264e:	4770      	bx	lr
 8012650:	2000      	movs	r0, #0
 8012652:	4770      	bx	lr

08012654 <ucdr_check_final_buffer_behavior>:
 8012654:	7d83      	ldrb	r3, [r0, #22]
 8012656:	b943      	cbnz	r3, 801266a <ucdr_check_final_buffer_behavior+0x16>
 8012658:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801265c:	b510      	push	{r4, lr}
 801265e:	4291      	cmp	r1, r2
 8012660:	4604      	mov	r4, r0
 8012662:	d205      	bcs.n	8012670 <ucdr_check_final_buffer_behavior+0x1c>
 8012664:	2301      	movs	r3, #1
 8012666:	4618      	mov	r0, r3
 8012668:	bd10      	pop	{r4, pc}
 801266a:	2300      	movs	r3, #0
 801266c:	4618      	mov	r0, r3
 801266e:	4770      	bx	lr
 8012670:	6982      	ldr	r2, [r0, #24]
 8012672:	b13a      	cbz	r2, 8012684 <ucdr_check_final_buffer_behavior+0x30>
 8012674:	69c1      	ldr	r1, [r0, #28]
 8012676:	4790      	blx	r2
 8012678:	f080 0301 	eor.w	r3, r0, #1
 801267c:	75a0      	strb	r0, [r4, #22]
 801267e:	b2db      	uxtb	r3, r3
 8012680:	4618      	mov	r0, r3
 8012682:	bd10      	pop	{r4, pc}
 8012684:	2001      	movs	r0, #1
 8012686:	75a0      	strb	r0, [r4, #22]
 8012688:	e7fa      	b.n	8012680 <ucdr_check_final_buffer_behavior+0x2c>
 801268a:	bf00      	nop

0801268c <ucdr_set_on_full_buffer_callback>:
 801268c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop

08012694 <ucdr_init_buffer_origin_offset_endian>:
 8012694:	b410      	push	{r4}
 8012696:	9c01      	ldr	r4, [sp, #4]
 8012698:	440a      	add	r2, r1
 801269a:	6001      	str	r1, [r0, #0]
 801269c:	6042      	str	r2, [r0, #4]
 801269e:	190a      	adds	r2, r1, r4
 80126a0:	441c      	add	r4, r3
 80126a2:	6082      	str	r2, [r0, #8]
 80126a4:	2200      	movs	r2, #0
 80126a6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80126aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80126ae:	7542      	strb	r2, [r0, #21]
 80126b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126b4:	7582      	strb	r2, [r0, #22]
 80126b6:	7503      	strb	r3, [r0, #20]
 80126b8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop

080126c0 <ucdr_init_buffer_origin_offset>:
 80126c0:	b510      	push	{r4, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	9c04      	ldr	r4, [sp, #16]
 80126c6:	9400      	str	r4, [sp, #0]
 80126c8:	2401      	movs	r4, #1
 80126ca:	9401      	str	r4, [sp, #4]
 80126cc:	f7ff ffe2 	bl	8012694 <ucdr_init_buffer_origin_offset_endian>
 80126d0:	b002      	add	sp, #8
 80126d2:	bd10      	pop	{r4, pc}

080126d4 <ucdr_init_buffer_origin>:
 80126d4:	b510      	push	{r4, lr}
 80126d6:	2400      	movs	r4, #0
 80126d8:	b082      	sub	sp, #8
 80126da:	9400      	str	r4, [sp, #0]
 80126dc:	f7ff fff0 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 80126e0:	b002      	add	sp, #8
 80126e2:	bd10      	pop	{r4, pc}

080126e4 <ucdr_init_buffer>:
 80126e4:	2300      	movs	r3, #0
 80126e6:	f7ff bff5 	b.w	80126d4 <ucdr_init_buffer_origin>
 80126ea:	bf00      	nop

080126ec <ucdr_alignment>:
 80126ec:	fbb0 f2f1 	udiv	r2, r0, r1
 80126f0:	fb02 0011 	mls	r0, r2, r1, r0
 80126f4:	1e4b      	subs	r3, r1, #1
 80126f6:	1a08      	subs	r0, r1, r0
 80126f8:	4018      	ands	r0, r3
 80126fa:	4770      	bx	lr

080126fc <ucdr_buffer_alignment>:
 80126fc:	7d43      	ldrb	r3, [r0, #21]
 80126fe:	428b      	cmp	r3, r1
 8012700:	d209      	bcs.n	8012716 <ucdr_buffer_alignment+0x1a>
 8012702:	6903      	ldr	r3, [r0, #16]
 8012704:	1e4a      	subs	r2, r1, #1
 8012706:	fbb3 f0f1 	udiv	r0, r3, r1
 801270a:	fb01 3010 	mls	r0, r1, r0, r3
 801270e:	1a09      	subs	r1, r1, r0
 8012710:	ea01 0002 	and.w	r0, r1, r2
 8012714:	4770      	bx	lr
 8012716:	2000      	movs	r0, #0
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop

0801271c <ucdr_align_to>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	4604      	mov	r4, r0
 8012720:	460d      	mov	r5, r1
 8012722:	f7ff ffeb 	bl	80126fc <ucdr_buffer_alignment>
 8012726:	68a3      	ldr	r3, [r4, #8]
 8012728:	7565      	strb	r5, [r4, #21]
 801272a:	181a      	adds	r2, r3, r0
 801272c:	6923      	ldr	r3, [r4, #16]
 801272e:	4418      	add	r0, r3
 8012730:	6863      	ldr	r3, [r4, #4]
 8012732:	4293      	cmp	r3, r2
 8012734:	6120      	str	r0, [r4, #16]
 8012736:	bf28      	it	cs
 8012738:	4613      	movcs	r3, r2
 801273a:	60a3      	str	r3, [r4, #8]
 801273c:	bd38      	pop	{r3, r4, r5, pc}
 801273e:	bf00      	nop

08012740 <ucdr_buffer_length>:
 8012740:	6882      	ldr	r2, [r0, #8]
 8012742:	6800      	ldr	r0, [r0, #0]
 8012744:	1a10      	subs	r0, r2, r0
 8012746:	4770      	bx	lr

08012748 <ucdr_buffer_remaining>:
 8012748:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801274c:	1a10      	subs	r0, r2, r0
 801274e:	4770      	bx	lr

08012750 <ucdr_check_final_buffer_behavior_array>:
 8012750:	b538      	push	{r3, r4, r5, lr}
 8012752:	7d83      	ldrb	r3, [r0, #22]
 8012754:	b9a3      	cbnz	r3, 8012780 <ucdr_check_final_buffer_behavior_array+0x30>
 8012756:	4604      	mov	r4, r0
 8012758:	460d      	mov	r5, r1
 801275a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801275e:	429a      	cmp	r2, r3
 8012760:	d300      	bcc.n	8012764 <ucdr_check_final_buffer_behavior_array+0x14>
 8012762:	b931      	cbnz	r1, 8012772 <ucdr_check_final_buffer_behavior_array+0x22>
 8012764:	4620      	mov	r0, r4
 8012766:	f7ff ffef 	bl	8012748 <ucdr_buffer_remaining>
 801276a:	42a8      	cmp	r0, r5
 801276c:	bf28      	it	cs
 801276e:	4628      	movcs	r0, r5
 8012770:	bd38      	pop	{r3, r4, r5, pc}
 8012772:	6983      	ldr	r3, [r0, #24]
 8012774:	b133      	cbz	r3, 8012784 <ucdr_check_final_buffer_behavior_array+0x34>
 8012776:	69c1      	ldr	r1, [r0, #28]
 8012778:	4798      	blx	r3
 801277a:	75a0      	strb	r0, [r4, #22]
 801277c:	2800      	cmp	r0, #0
 801277e:	d0f1      	beq.n	8012764 <ucdr_check_final_buffer_behavior_array+0x14>
 8012780:	2000      	movs	r0, #0
 8012782:	bd38      	pop	{r3, r4, r5, pc}
 8012784:	2301      	movs	r3, #1
 8012786:	7583      	strb	r3, [r0, #22]
 8012788:	e7fa      	b.n	8012780 <ucdr_check_final_buffer_behavior_array+0x30>
 801278a:	bf00      	nop

0801278c <ucdr_advance_buffer>:
 801278c:	b538      	push	{r3, r4, r5, lr}
 801278e:	4604      	mov	r4, r0
 8012790:	460d      	mov	r5, r1
 8012792:	f7ff ff53 	bl	801263c <ucdr_check_buffer_available_for>
 8012796:	b178      	cbz	r0, 80127b8 <ucdr_advance_buffer+0x2c>
 8012798:	6923      	ldr	r3, [r4, #16]
 801279a:	68a2      	ldr	r2, [r4, #8]
 801279c:	442b      	add	r3, r5
 801279e:	442a      	add	r2, r5
 80127a0:	6123      	str	r3, [r4, #16]
 80127a2:	2301      	movs	r3, #1
 80127a4:	60a2      	str	r2, [r4, #8]
 80127a6:	7563      	strb	r3, [r4, #21]
 80127a8:	bd38      	pop	{r3, r4, r5, pc}
 80127aa:	68a2      	ldr	r2, [r4, #8]
 80127ac:	1a2d      	subs	r5, r5, r0
 80127ae:	6923      	ldr	r3, [r4, #16]
 80127b0:	4402      	add	r2, r0
 80127b2:	4418      	add	r0, r3
 80127b4:	60a2      	str	r2, [r4, #8]
 80127b6:	6120      	str	r0, [r4, #16]
 80127b8:	4629      	mov	r1, r5
 80127ba:	2201      	movs	r2, #1
 80127bc:	4620      	mov	r0, r4
 80127be:	f7ff ffc7 	bl	8012750 <ucdr_check_final_buffer_behavior_array>
 80127c2:	2800      	cmp	r0, #0
 80127c4:	d1f1      	bne.n	80127aa <ucdr_advance_buffer+0x1e>
 80127c6:	2301      	movs	r3, #1
 80127c8:	7563      	strb	r3, [r4, #21]
 80127ca:	bd38      	pop	{r3, r4, r5, pc}

080127cc <_rclc_check_for_new_data>:
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d046      	beq.n	801285e <_rclc_check_for_new_data+0x92>
 80127d0:	4603      	mov	r3, r0
 80127d2:	b530      	push	{r4, r5, lr}
 80127d4:	7802      	ldrb	r2, [r0, #0]
 80127d6:	b085      	sub	sp, #20
 80127d8:	2a0a      	cmp	r2, #10
 80127da:	d842      	bhi.n	8012862 <_rclc_check_for_new_data+0x96>
 80127dc:	e8df f002 	tbb	[pc, r2]
 80127e0:	14181212 	.word	0x14181212
 80127e4:	06060614 	.word	0x06060614
 80127e8:	2e1a      	.short	0x2e1a
 80127ea:	16          	.byte	0x16
 80127eb:	00          	.byte	0x00
 80127ec:	6a0a      	ldr	r2, [r1, #32]
 80127ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80127f0:	2000      	movs	r0, #0
 80127f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80127f6:	1a12      	subs	r2, r2, r0
 80127f8:	bf18      	it	ne
 80127fa:	2201      	movne	r2, #1
 80127fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012800:	b005      	add	sp, #20
 8012802:	bd30      	pop	{r4, r5, pc}
 8012804:	680a      	ldr	r2, [r1, #0]
 8012806:	e7f2      	b.n	80127ee <_rclc_check_for_new_data+0x22>
 8012808:	698a      	ldr	r2, [r1, #24]
 801280a:	e7f0      	b.n	80127ee <_rclc_check_for_new_data+0x22>
 801280c:	688a      	ldr	r2, [r1, #8]
 801280e:	e7ee      	b.n	80127ee <_rclc_check_for_new_data+0x22>
 8012810:	690a      	ldr	r2, [r1, #16]
 8012812:	e7ec      	b.n	80127ee <_rclc_check_for_new_data+0x22>
 8012814:	685c      	ldr	r4, [r3, #4]
 8012816:	4608      	mov	r0, r1
 8012818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801281c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012820:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 8012824:	f104 0110 	add.w	r1, r4, #16
 8012828:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801282c:	9500      	str	r5, [sp, #0]
 801282e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8012832:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8012836:	f004 f987 	bl	8016b48 <rcl_action_client_wait_set_get_entities_ready>
 801283a:	e7e1      	b.n	8012800 <_rclc_check_for_new_data+0x34>
 801283c:	685c      	ldr	r4, [r3, #4]
 801283e:	4608      	mov	r0, r1
 8012840:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8012844:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8012848:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801284c:	e9cd 2100 	strd	r2, r1, [sp]
 8012850:	f104 0220 	add.w	r2, r4, #32
 8012854:	f104 0110 	add.w	r1, r4, #16
 8012858:	f004 fb90 	bl	8016f7c <rcl_action_server_wait_set_get_entities_ready>
 801285c:	e7d0      	b.n	8012800 <_rclc_check_for_new_data+0x34>
 801285e:	200b      	movs	r0, #11
 8012860:	4770      	bx	lr
 8012862:	2001      	movs	r0, #1
 8012864:	e7cc      	b.n	8012800 <_rclc_check_for_new_data+0x34>
 8012866:	bf00      	nop

08012868 <_rclc_take_new_data>:
 8012868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801286a:	b09b      	sub	sp, #108	@ 0x6c
 801286c:	2800      	cmp	r0, #0
 801286e:	f000 8088 	beq.w	8012982 <_rclc_take_new_data+0x11a>
 8012872:	7803      	ldrb	r3, [r0, #0]
 8012874:	4604      	mov	r4, r0
 8012876:	2b0a      	cmp	r3, #10
 8012878:	f200 8167 	bhi.w	8012b4a <_rclc_take_new_data+0x2e2>
 801287c:	e8df f003 	tbb	[pc, r3]
 8012880:	44152d2d 	.word	0x44152d2d
 8012884:	19191944 	.word	0x19191944
 8012888:	065a      	.short	0x065a
 801288a:	15          	.byte	0x15
 801288b:	00          	.byte	0x00
 801288c:	6840      	ldr	r0, [r0, #4]
 801288e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012892:	2b00      	cmp	r3, #0
 8012894:	f040 80b2 	bne.w	80129fc <_rclc_take_new_data+0x194>
 8012898:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 801289c:	2b00      	cmp	r3, #0
 801289e:	f040 80e4 	bne.w	8012a6a <_rclc_take_new_data+0x202>
 80128a2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d16f      	bne.n	801298a <_rclc_take_new_data+0x122>
 80128aa:	2500      	movs	r5, #0
 80128ac:	4628      	mov	r0, r5
 80128ae:	b01b      	add	sp, #108	@ 0x6c
 80128b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128b2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80128b4:	6a0b      	ldr	r3, [r1, #32]
 80128b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d0f5      	beq.n	80128aa <_rclc_take_new_data+0x42>
 80128be:	6882      	ldr	r2, [r0, #8]
 80128c0:	f100 0110 	add.w	r1, r0, #16
 80128c4:	6840      	ldr	r0, [r0, #4]
 80128c6:	f002 fdfd 	bl	80154c4 <rcl_take_request>
 80128ca:	4605      	mov	r5, r0
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d0ec      	beq.n	80128aa <_rclc_take_new_data+0x42>
 80128d0:	f240 2359 	movw	r3, #601	@ 0x259
 80128d4:	4298      	cmp	r0, r3
 80128d6:	d013      	beq.n	8012900 <_rclc_take_new_data+0x98>
 80128d8:	e029      	b.n	801292e <_rclc_take_new_data+0xc6>
 80128da:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80128dc:	680b      	ldr	r3, [r1, #0]
 80128de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d0e1      	beq.n	80128aa <_rclc_take_new_data+0x42>
 80128e6:	2300      	movs	r3, #0
 80128e8:	aa0a      	add	r2, sp, #40	@ 0x28
 80128ea:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80128ee:	f002 ff2d 	bl	801574c <rcl_take>
 80128f2:	4605      	mov	r5, r0
 80128f4:	2800      	cmp	r0, #0
 80128f6:	d0d9      	beq.n	80128ac <_rclc_take_new_data+0x44>
 80128f8:	f240 1391 	movw	r3, #401	@ 0x191
 80128fc:	4298      	cmp	r0, r3
 80128fe:	d116      	bne.n	801292e <_rclc_take_new_data+0xc6>
 8012900:	2300      	movs	r3, #0
 8012902:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8012906:	e7d1      	b.n	80128ac <_rclc_take_new_data+0x44>
 8012908:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801290a:	698b      	ldr	r3, [r1, #24]
 801290c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d0ca      	beq.n	80128aa <_rclc_take_new_data+0x42>
 8012914:	6882      	ldr	r2, [r0, #8]
 8012916:	f100 0110 	add.w	r1, r0, #16
 801291a:	6840      	ldr	r0, [r0, #4]
 801291c:	f001 fdb8 	bl	8014490 <rcl_take_response>
 8012920:	4605      	mov	r5, r0
 8012922:	2800      	cmp	r0, #0
 8012924:	d0c1      	beq.n	80128aa <_rclc_take_new_data+0x42>
 8012926:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801292a:	4298      	cmp	r0, r3
 801292c:	d0be      	beq.n	80128ac <_rclc_take_new_data+0x44>
 801292e:	f000 ff63 	bl	80137f8 <rcutils_reset_error>
 8012932:	e7bb      	b.n	80128ac <_rclc_take_new_data+0x44>
 8012934:	6840      	ldr	r0, [r0, #4]
 8012936:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801293a:	2b00      	cmp	r3, #0
 801293c:	d17d      	bne.n	8012a3a <_rclc_take_new_data+0x1d2>
 801293e:	69c3      	ldr	r3, [r0, #28]
 8012940:	b11b      	cbz	r3, 801294a <_rclc_take_new_data+0xe2>
 8012942:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012946:	2b00      	cmp	r3, #0
 8012948:	d144      	bne.n	80129d4 <_rclc_take_new_data+0x16c>
 801294a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801294e:	2b00      	cmp	r3, #0
 8012950:	f040 80ac 	bne.w	8012aac <_rclc_take_new_data+0x244>
 8012954:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8012958:	2b00      	cmp	r3, #0
 801295a:	d0a6      	beq.n	80128aa <_rclc_take_new_data+0x42>
 801295c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801295e:	a90a      	add	r1, sp, #40	@ 0x28
 8012960:	3010      	adds	r0, #16
 8012962:	f003 ffc9 	bl	80168f8 <rcl_action_take_result_response>
 8012966:	4605      	mov	r5, r0
 8012968:	2800      	cmp	r0, #0
 801296a:	d1e0      	bne.n	801292e <_rclc_take_new_data+0xc6>
 801296c:	6860      	ldr	r0, [r4, #4]
 801296e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012972:	f004 fc33 	bl	80171dc <rclc_action_find_handle_by_result_request_sequence_number>
 8012976:	2800      	cmp	r0, #0
 8012978:	d098      	beq.n	80128ac <_rclc_take_new_data+0x44>
 801297a:	2301      	movs	r3, #1
 801297c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8012980:	e794      	b.n	80128ac <_rclc_take_new_data+0x44>
 8012982:	250b      	movs	r5, #11
 8012984:	4628      	mov	r0, r5
 8012986:	b01b      	add	sp, #108	@ 0x6c
 8012988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801298a:	ae04      	add	r6, sp, #16
 801298c:	3010      	adds	r0, #16
 801298e:	aa0a      	add	r2, sp, #40	@ 0x28
 8012990:	4631      	mov	r1, r6
 8012992:	f004 fa27 	bl	8016de4 <rcl_action_take_cancel_request>
 8012996:	4605      	mov	r5, r0
 8012998:	2800      	cmp	r0, #0
 801299a:	d1c8      	bne.n	801292e <_rclc_take_new_data+0xc6>
 801299c:	a90a      	add	r1, sp, #40	@ 0x28
 801299e:	6860      	ldr	r0, [r4, #4]
 80129a0:	f004 fbdc 	bl	801715c <rclc_action_find_goal_handle_by_uuid>
 80129a4:	4607      	mov	r7, r0
 80129a6:	2800      	cmp	r0, #0
 80129a8:	f000 80bb 	beq.w	8012b22 <_rclc_take_new_data+0x2ba>
 80129ac:	2101      	movs	r1, #1
 80129ae:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80129b2:	f004 fb5d 	bl	8017070 <rcl_action_transition_goal_state>
 80129b6:	2803      	cmp	r0, #3
 80129b8:	4684      	mov	ip, r0
 80129ba:	f040 80a7 	bne.w	8012b0c <_rclc_take_new_data+0x2a4>
 80129be:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80129c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80129c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80129c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80129ca:	e884 0003 	stmia.w	r4, {r0, r1}
 80129ce:	f887 c008 	strb.w	ip, [r7, #8]
 80129d2:	e76b      	b.n	80128ac <_rclc_take_new_data+0x44>
 80129d4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80129d6:	3010      	adds	r0, #16
 80129d8:	f004 f80e 	bl	80169f8 <rcl_action_take_feedback>
 80129dc:	4605      	mov	r5, r0
 80129de:	2800      	cmp	r0, #0
 80129e0:	d1a5      	bne.n	801292e <_rclc_take_new_data+0xc6>
 80129e2:	6860      	ldr	r0, [r4, #4]
 80129e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80129e6:	f004 fbb9 	bl	801715c <rclc_action_find_goal_handle_by_uuid>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2800      	cmp	r0, #0
 80129ee:	f000 80a3 	beq.w	8012b38 <_rclc_take_new_data+0x2d0>
 80129f2:	2201      	movs	r2, #1
 80129f4:	6860      	ldr	r0, [r4, #4]
 80129f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80129fa:	e7a6      	b.n	801294a <_rclc_take_new_data+0xe2>
 80129fc:	f004 fb88 	bl	8017110 <rclc_action_take_goal_handle>
 8012a00:	4606      	mov	r6, r0
 8012a02:	6860      	ldr	r0, [r4, #4]
 8012a04:	2e00      	cmp	r6, #0
 8012a06:	f43f af47 	beq.w	8012898 <_rclc_take_new_data+0x30>
 8012a0a:	6070      	str	r0, [r6, #4]
 8012a0c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8012a10:	69f2      	ldr	r2, [r6, #28]
 8012a12:	3010      	adds	r0, #16
 8012a14:	f004 f92e 	bl	8016c74 <rcl_action_take_goal_request>
 8012a18:	4605      	mov	r5, r0
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	f040 808e 	bne.w	8012b3c <_rclc_take_new_data+0x2d4>
 8012a20:	69f7      	ldr	r7, [r6, #28]
 8012a22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012a24:	7235      	strb	r5, [r6, #8]
 8012a26:	f8c6 0009 	str.w	r0, [r6, #9]
 8012a2a:	f8c6 100d 	str.w	r1, [r6, #13]
 8012a2e:	6860      	ldr	r0, [r4, #4]
 8012a30:	f8c6 2011 	str.w	r2, [r6, #17]
 8012a34:	f8c6 3015 	str.w	r3, [r6, #21]
 8012a38:	e72e      	b.n	8012898 <_rclc_take_new_data+0x30>
 8012a3a:	aa04      	add	r2, sp, #16
 8012a3c:	a90a      	add	r1, sp, #40	@ 0x28
 8012a3e:	3010      	adds	r0, #16
 8012a40:	f003 fee2 	bl	8016808 <rcl_action_take_goal_response>
 8012a44:	4605      	mov	r5, r0
 8012a46:	2800      	cmp	r0, #0
 8012a48:	f47f af71 	bne.w	801292e <_rclc_take_new_data+0xc6>
 8012a4c:	6860      	ldr	r0, [r4, #4]
 8012a4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012a52:	f004 fbb1 	bl	80171b8 <rclc_action_find_handle_by_goal_request_sequence_number>
 8012a56:	b130      	cbz	r0, 8012a66 <_rclc_take_new_data+0x1fe>
 8012a58:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8012a62:	f880 2020 	strb.w	r2, [r0, #32]
 8012a66:	6860      	ldr	r0, [r4, #4]
 8012a68:	e769      	b.n	801293e <_rclc_take_new_data+0xd6>
 8012a6a:	3010      	adds	r0, #16
 8012a6c:	aa04      	add	r2, sp, #16
 8012a6e:	a90a      	add	r1, sp, #40	@ 0x28
 8012a70:	f004 f978 	bl	8016d64 <rcl_action_take_result_request>
 8012a74:	4605      	mov	r5, r0
 8012a76:	2800      	cmp	r0, #0
 8012a78:	f47f af59 	bne.w	801292e <_rclc_take_new_data+0xc6>
 8012a7c:	a904      	add	r1, sp, #16
 8012a7e:	6860      	ldr	r0, [r4, #4]
 8012a80:	f004 fb6c 	bl	801715c <rclc_action_find_goal_handle_by_uuid>
 8012a84:	4607      	mov	r7, r0
 8012a86:	b160      	cbz	r0, 8012aa2 <_rclc_take_new_data+0x23a>
 8012a88:	ad0a      	add	r5, sp, #40	@ 0x28
 8012a8a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8012a8e:	f04f 0c02 	mov.w	ip, #2
 8012a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012a96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012a9a:	e886 0003 	stmia.w	r6, {r0, r1}
 8012a9e:	f887 c008 	strb.w	ip, [r7, #8]
 8012aa2:	6860      	ldr	r0, [r4, #4]
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8012aaa:	e6fa      	b.n	80128a2 <_rclc_take_new_data+0x3a>
 8012aac:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8012ab0:	a90a      	add	r1, sp, #40	@ 0x28
 8012ab2:	3010      	adds	r0, #16
 8012ab4:	f003 ff60 	bl	8016978 <rcl_action_take_cancel_response>
 8012ab8:	4605      	mov	r5, r0
 8012aba:	2800      	cmp	r0, #0
 8012abc:	f47f af37 	bne.w	801292e <_rclc_take_new_data+0xc6>
 8012ac0:	6860      	ldr	r0, [r4, #4]
 8012ac2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012ac6:	f004 fb9b 	bl	8017200 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8012aca:	4606      	mov	r6, r0
 8012acc:	6860      	ldr	r0, [r4, #4]
 8012ace:	2e00      	cmp	r6, #0
 8012ad0:	f43f af40 	beq.w	8012954 <_rclc_take_new_data+0xec>
 8012ad4:	2701      	movs	r7, #1
 8012ad6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8012ad8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f43f af3a 	beq.w	8012954 <_rclc_take_new_data+0xec>
 8012ae0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012ae2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8012ae6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012aea:	f004 fb37 	bl	801715c <rclc_action_find_goal_handle_by_uuid>
 8012aee:	b138      	cbz	r0, 8012b00 <_rclc_take_new_data+0x298>
 8012af0:	6860      	ldr	r0, [r4, #4]
 8012af2:	3501      	adds	r5, #1
 8012af4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8012af8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8012afa:	42ab      	cmp	r3, r5
 8012afc:	d8f0      	bhi.n	8012ae0 <_rclc_take_new_data+0x278>
 8012afe:	e729      	b.n	8012954 <_rclc_take_new_data+0xec>
 8012b00:	6860      	ldr	r0, [r4, #4]
 8012b02:	3501      	adds	r5, #1
 8012b04:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8012b06:	42ab      	cmp	r3, r5
 8012b08:	d8ea      	bhi.n	8012ae0 <_rclc_take_new_data+0x278>
 8012b0a:	e723      	b.n	8012954 <_rclc_take_new_data+0xec>
 8012b0c:	ab06      	add	r3, sp, #24
 8012b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012b14:	2103      	movs	r1, #3
 8012b16:	6860      	ldr	r0, [r4, #4]
 8012b18:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012b1c:	f004 fbe4 	bl	80172e8 <rclc_action_server_goal_cancel_reject>
 8012b20:	e6c4      	b.n	80128ac <_rclc_take_new_data+0x44>
 8012b22:	ab06      	add	r3, sp, #24
 8012b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012b2a:	2102      	movs	r1, #2
 8012b2c:	6860      	ldr	r0, [r4, #4]
 8012b2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012b32:	f004 fbd9 	bl	80172e8 <rclc_action_server_goal_cancel_reject>
 8012b36:	e6b9      	b.n	80128ac <_rclc_take_new_data+0x44>
 8012b38:	6860      	ldr	r0, [r4, #4]
 8012b3a:	e706      	b.n	801294a <_rclc_take_new_data+0xe2>
 8012b3c:	4631      	mov	r1, r6
 8012b3e:	6860      	ldr	r0, [r4, #4]
 8012b40:	f004 faf6 	bl	8017130 <rclc_action_remove_used_goal_handle>
 8012b44:	f000 fe58 	bl	80137f8 <rcutils_reset_error>
 8012b48:	e6b0      	b.n	80128ac <_rclc_take_new_data+0x44>
 8012b4a:	2501      	movs	r5, #1
 8012b4c:	e6ae      	b.n	80128ac <_rclc_take_new_data+0x44>
 8012b4e:	bf00      	nop

08012b50 <_rclc_execute.part.0>:
 8012b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b52:	7803      	ldrb	r3, [r0, #0]
 8012b54:	b085      	sub	sp, #20
 8012b56:	4604      	mov	r4, r0
 8012b58:	2b0a      	cmp	r3, #10
 8012b5a:	f200 8139 	bhi.w	8012dd0 <_rclc_execute.part.0+0x280>
 8012b5e:	e8df f003 	tbb	[pc, r3]
 8012b62:	4268      	.short	0x4268
 8012b64:	06a75b4d 	.word	0x06a75b4d
 8012b68:	721d0606 	.word	0x721d0606
 8012b6c:	62          	.byte	0x62
 8012b6d:	00          	.byte	0x00
 8012b6e:	2b06      	cmp	r3, #6
 8012b70:	f000 8126 	beq.w	8012dc0 <_rclc_execute.part.0+0x270>
 8012b74:	2b07      	cmp	r3, #7
 8012b76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012b78:	f040 811c 	bne.w	8012db4 <_rclc_execute.part.0+0x264>
 8012b7c:	f104 0510 	add.w	r5, r4, #16
 8012b80:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8012b84:	6880      	ldr	r0, [r0, #8]
 8012b86:	4798      	blx	r3
 8012b88:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	6860      	ldr	r0, [r4, #4]
 8012b8e:	f002 fcd9 	bl	8015544 <rcl_send_response>
 8012b92:	4604      	mov	r4, r0
 8012b94:	b378      	cbz	r0, 8012bf6 <_rclc_execute.part.0+0xa6>
 8012b96:	f000 fe2f 	bl	80137f8 <rcutils_reset_error>
 8012b9a:	e02c      	b.n	8012bf6 <_rclc_execute.part.0+0xa6>
 8012b9c:	6840      	ldr	r0, [r0, #4]
 8012b9e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f000 808e 	beq.w	8012cc4 <_rclc_execute.part.0+0x174>
 8012ba8:	2600      	movs	r6, #0
 8012baa:	2701      	movs	r7, #1
 8012bac:	e004      	b.n	8012bb8 <_rclc_execute.part.0+0x68>
 8012bae:	f004 fa89 	bl	80170c4 <rclc_action_send_result_request>
 8012bb2:	b998      	cbnz	r0, 8012bdc <_rclc_execute.part.0+0x8c>
 8012bb4:	722f      	strb	r7, [r5, #8]
 8012bb6:	6860      	ldr	r0, [r4, #4]
 8012bb8:	f004 fb34 	bl	8017224 <rclc_action_find_first_handle_with_goal_response>
 8012bbc:	4605      	mov	r5, r0
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d07f      	beq.n	8012cc2 <_rclc_execute.part.0+0x172>
 8012bc2:	6863      	ldr	r3, [r4, #4]
 8012bc4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012bc6:	699b      	ldr	r3, [r3, #24]
 8012bc8:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8012bcc:	f885 6020 	strb.w	r6, [r5, #32]
 8012bd0:	4798      	blx	r3
 8012bd2:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d1e8      	bne.n	8012bae <_rclc_execute.part.0+0x5e>
 8012bdc:	6860      	ldr	r0, [r4, #4]
 8012bde:	4629      	mov	r1, r5
 8012be0:	f004 faa6 	bl	8017130 <rclc_action_remove_used_goal_handle>
 8012be4:	e7e7      	b.n	8012bb6 <_rclc_execute.part.0+0x66>
 8012be6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8012bea:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8012bee:	b100      	cbz	r0, 8012bf2 <_rclc_execute.part.0+0xa2>
 8012bf0:	68a0      	ldr	r0, [r4, #8]
 8012bf2:	2400      	movs	r4, #0
 8012bf4:	4798      	blx	r3
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	b005      	add	sp, #20
 8012bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bfc:	6840      	ldr	r0, [r0, #4]
 8012bfe:	f002 feb9 	bl	8015974 <rcl_timer_call>
 8012c02:	f240 3321 	movw	r3, #801	@ 0x321
 8012c06:	4604      	mov	r4, r0
 8012c08:	4298      	cmp	r0, r3
 8012c0a:	d001      	beq.n	8012c10 <_rclc_execute.part.0+0xc0>
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d1c2      	bne.n	8012b96 <_rclc_execute.part.0+0x46>
 8012c10:	2400      	movs	r4, #0
 8012c12:	4620      	mov	r0, r4
 8012c14:	b005      	add	sp, #20
 8012c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c18:	2400      	movs	r4, #0
 8012c1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c1c:	6880      	ldr	r0, [r0, #8]
 8012c1e:	4798      	blx	r3
 8012c20:	4620      	mov	r0, r4
 8012c22:	b005      	add	sp, #20
 8012c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c26:	2400      	movs	r4, #0
 8012c28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c2a:	4798      	blx	r3
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	b005      	add	sp, #20
 8012c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c32:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8012c36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c38:	b100      	cbz	r0, 8012c3c <_rclc_execute.part.0+0xec>
 8012c3a:	68a0      	ldr	r0, [r4, #8]
 8012c3c:	2400      	movs	r4, #0
 8012c3e:	4798      	blx	r3
 8012c40:	4620      	mov	r0, r4
 8012c42:	b005      	add	sp, #20
 8012c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c46:	6840      	ldr	r0, [r0, #4]
 8012c48:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8012c4c:	bb3b      	cbnz	r3, 8012c9e <_rclc_execute.part.0+0x14e>
 8012c4e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d07d      	beq.n	8012d52 <_rclc_execute.part.0+0x202>
 8012c56:	f640 0634 	movw	r6, #2100	@ 0x834
 8012c5a:	2701      	movs	r7, #1
 8012c5c:	e007      	b.n	8012c6e <_rclc_execute.part.0+0x11e>
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f004 faf8 	bl	8017254 <rclc_action_server_response_goal_request>
 8012c64:	4629      	mov	r1, r5
 8012c66:	6860      	ldr	r0, [r4, #4]
 8012c68:	f004 fa62 	bl	8017130 <rclc_action_remove_used_goal_handle>
 8012c6c:	6860      	ldr	r0, [r4, #4]
 8012c6e:	2100      	movs	r1, #0
 8012c70:	f004 fa8a 	bl	8017188 <rclc_action_find_first_handle_by_status>
 8012c74:	4605      	mov	r5, r0
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d068      	beq.n	8012d4c <_rclc_execute.part.0+0x1fc>
 8012c7a:	6863      	ldr	r3, [r4, #4]
 8012c7c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012c7e:	699b      	ldr	r3, [r3, #24]
 8012c80:	4798      	blx	r3
 8012c82:	42b0      	cmp	r0, r6
 8012c84:	f04f 0100 	mov.w	r1, #0
 8012c88:	d1e9      	bne.n	8012c5e <_rclc_execute.part.0+0x10e>
 8012c8a:	2101      	movs	r1, #1
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	f004 fae1 	bl	8017254 <rclc_action_server_response_goal_request>
 8012c92:	722f      	strb	r7, [r5, #8]
 8012c94:	e7ea      	b.n	8012c6c <_rclc_execute.part.0+0x11c>
 8012c96:	6848      	ldr	r0, [r1, #4]
 8012c98:	f004 fa4a 	bl	8017130 <rclc_action_remove_used_goal_handle>
 8012c9c:	6860      	ldr	r0, [r4, #4]
 8012c9e:	f004 fa7f 	bl	80171a0 <rclc_action_find_first_terminated_handle>
 8012ca2:	4601      	mov	r1, r0
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d1f6      	bne.n	8012c96 <_rclc_execute.part.0+0x146>
 8012ca8:	6860      	ldr	r0, [r4, #4]
 8012caa:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8012cae:	e7ce      	b.n	8012c4e <_rclc_execute.part.0+0xfe>
 8012cb0:	2400      	movs	r4, #0
 8012cb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012cb4:	f100 0110 	add.w	r1, r0, #16
 8012cb8:	6880      	ldr	r0, [r0, #8]
 8012cba:	4798      	blx	r3
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	b005      	add	sp, #20
 8012cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cc2:	6860      	ldr	r0, [r4, #4]
 8012cc4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012cc8:	b18b      	cbz	r3, 8012cee <_rclc_execute.part.0+0x19e>
 8012cca:	68c5      	ldr	r5, [r0, #12]
 8012ccc:	b32d      	cbz	r5, 8012d1a <_rclc_execute.part.0+0x1ca>
 8012cce:	2600      	movs	r6, #0
 8012cd0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8012cd4:	b143      	cbz	r3, 8012ce8 <_rclc_execute.part.0+0x198>
 8012cd6:	69c3      	ldr	r3, [r0, #28]
 8012cd8:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8012cdc:	b123      	cbz	r3, 8012ce8 <_rclc_execute.part.0+0x198>
 8012cde:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012ce4:	4798      	blx	r3
 8012ce6:	6860      	ldr	r0, [r4, #4]
 8012ce8:	682d      	ldr	r5, [r5, #0]
 8012cea:	2d00      	cmp	r5, #0
 8012cec:	d1f0      	bne.n	8012cd0 <_rclc_execute.part.0+0x180>
 8012cee:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012cf2:	b193      	cbz	r3, 8012d1a <_rclc_execute.part.0+0x1ca>
 8012cf4:	68c5      	ldr	r5, [r0, #12]
 8012cf6:	b185      	cbz	r5, 8012d1a <_rclc_execute.part.0+0x1ca>
 8012cf8:	2600      	movs	r6, #0
 8012cfa:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8012cfe:	b14b      	cbz	r3, 8012d14 <_rclc_execute.part.0+0x1c4>
 8012d00:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012d02:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8012d06:	b12b      	cbz	r3, 8012d14 <_rclc_execute.part.0+0x1c4>
 8012d08:	4628      	mov	r0, r5
 8012d0a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8012d0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012d10:	4798      	blx	r3
 8012d12:	6860      	ldr	r0, [r4, #4]
 8012d14:	682d      	ldr	r5, [r5, #0]
 8012d16:	2d00      	cmp	r5, #0
 8012d18:	d1ef      	bne.n	8012cfa <_rclc_execute.part.0+0x1aa>
 8012d1a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f43f af76 	beq.w	8012c10 <_rclc_execute.part.0+0xc0>
 8012d24:	2700      	movs	r7, #0
 8012d26:	e00b      	b.n	8012d40 <_rclc_execute.part.0+0x1f0>
 8012d28:	6863      	ldr	r3, [r4, #4]
 8012d2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012d2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012d2e:	6a1e      	ldr	r6, [r3, #32]
 8012d30:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8012d34:	47b0      	blx	r6
 8012d36:	6860      	ldr	r0, [r4, #4]
 8012d38:	4629      	mov	r1, r5
 8012d3a:	f004 f9f9 	bl	8017130 <rclc_action_remove_used_goal_handle>
 8012d3e:	6860      	ldr	r0, [r4, #4]
 8012d40:	f004 fa7c 	bl	801723c <rclc_action_find_first_handle_with_result_response>
 8012d44:	4605      	mov	r5, r0
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d1ee      	bne.n	8012d28 <_rclc_execute.part.0+0x1d8>
 8012d4a:	e761      	b.n	8012c10 <_rclc_execute.part.0+0xc0>
 8012d4c:	6860      	ldr	r0, [r4, #4]
 8012d4e:	f880 5020 	strb.w	r5, [r0, #32]
 8012d52:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f43f af5a 	beq.w	8012c10 <_rclc_execute.part.0+0xc0>
 8012d5c:	68c5      	ldr	r5, [r0, #12]
 8012d5e:	b1b5      	cbz	r5, 8012d8e <_rclc_execute.part.0+0x23e>
 8012d60:	2602      	movs	r6, #2
 8012d62:	e001      	b.n	8012d68 <_rclc_execute.part.0+0x218>
 8012d64:	682d      	ldr	r5, [r5, #0]
 8012d66:	b195      	cbz	r5, 8012d8e <_rclc_execute.part.0+0x23e>
 8012d68:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8012d6c:	2b03      	cmp	r3, #3
 8012d6e:	d1f9      	bne.n	8012d64 <_rclc_execute.part.0+0x214>
 8012d70:	69c3      	ldr	r3, [r0, #28]
 8012d72:	4628      	mov	r0, r5
 8012d74:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012d76:	4798      	blx	r3
 8012d78:	4603      	mov	r3, r0
 8012d7a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8012d7e:	4628      	mov	r0, r5
 8012d80:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8012d84:	b143      	cbz	r3, 8012d98 <_rclc_execute.part.0+0x248>
 8012d86:	f004 fa83 	bl	8017290 <rclc_action_server_goal_cancel_accept>
 8012d8a:	6860      	ldr	r0, [r4, #4]
 8012d8c:	e7ea      	b.n	8012d64 <_rclc_execute.part.0+0x214>
 8012d8e:	2300      	movs	r3, #0
 8012d90:	461c      	mov	r4, r3
 8012d92:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8012d96:	e72e      	b.n	8012bf6 <_rclc_execute.part.0+0xa6>
 8012d98:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8012d9a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8012d9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012da2:	2101      	movs	r1, #1
 8012da4:	6860      	ldr	r0, [r4, #4]
 8012da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012daa:	f004 fa9d 	bl	80172e8 <rclc_action_server_goal_cancel_reject>
 8012dae:	722e      	strb	r6, [r5, #8]
 8012db0:	6860      	ldr	r0, [r4, #4]
 8012db2:	e7d7      	b.n	8012d64 <_rclc_execute.part.0+0x214>
 8012db4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8012db6:	f104 0510 	add.w	r5, r4, #16
 8012dba:	6880      	ldr	r0, [r0, #8]
 8012dbc:	4798      	blx	r3
 8012dbe:	e6e3      	b.n	8012b88 <_rclc_execute.part.0+0x38>
 8012dc0:	f100 0510 	add.w	r5, r0, #16
 8012dc4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012dc6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8012dc8:	4629      	mov	r1, r5
 8012dca:	6880      	ldr	r0, [r0, #8]
 8012dcc:	4798      	blx	r3
 8012dce:	e6db      	b.n	8012b88 <_rclc_execute.part.0+0x38>
 8012dd0:	2401      	movs	r4, #1
 8012dd2:	e710      	b.n	8012bf6 <_rclc_execute.part.0+0xa6>

08012dd4 <rclc_executor_trigger_any>:
 8012dd4:	2800      	cmp	r0, #0
 8012dd6:	d03d      	beq.n	8012e54 <rclc_executor_trigger_any+0x80>
 8012dd8:	2900      	cmp	r1, #0
 8012dda:	d03c      	beq.n	8012e56 <rclc_executor_trigger_any+0x82>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8012de2:	2200      	movs	r2, #0
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d035      	beq.n	8012e54 <rclc_executor_trigger_any+0x80>
 8012de8:	b430      	push	{r4, r5}
 8012dea:	f893 c000 	ldrb.w	ip, [r3]
 8012dee:	f1bc 0f08 	cmp.w	ip, #8
 8012df2:	d11d      	bne.n	8012e30 <rclc_executor_trigger_any+0x5c>
 8012df4:	685c      	ldr	r4, [r3, #4]
 8012df6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8012df8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8012dfc:	d105      	bne.n	8012e0a <rclc_executor_trigger_any+0x36>
 8012dfe:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8012e02:	b910      	cbnz	r0, 8012e0a <rclc_executor_trigger_any+0x36>
 8012e04:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8012e08:	b128      	cbz	r0, 8012e16 <rclc_executor_trigger_any+0x42>
 8012e0a:	bc30      	pop	{r4, r5}
 8012e0c:	4770      	bx	lr
 8012e0e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8012e12:	2800      	cmp	r0, #0
 8012e14:	d1f9      	bne.n	8012e0a <rclc_executor_trigger_any+0x36>
 8012e16:	3201      	adds	r2, #1
 8012e18:	3340      	adds	r3, #64	@ 0x40
 8012e1a:	4291      	cmp	r1, r2
 8012e1c:	d017      	beq.n	8012e4e <rclc_executor_trigger_any+0x7a>
 8012e1e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d0f1      	beq.n	8012e0a <rclc_executor_trigger_any+0x36>
 8012e26:	f893 c000 	ldrb.w	ip, [r3]
 8012e2a:	f1bc 0f08 	cmp.w	ip, #8
 8012e2e:	d0e1      	beq.n	8012df4 <rclc_executor_trigger_any+0x20>
 8012e30:	f1bc 0f09 	cmp.w	ip, #9
 8012e34:	d1eb      	bne.n	8012e0e <rclc_executor_trigger_any+0x3a>
 8012e36:	685c      	ldr	r4, [r3, #4]
 8012e38:	6a25      	ldr	r5, [r4, #32]
 8012e3a:	2d00      	cmp	r5, #0
 8012e3c:	d1e5      	bne.n	8012e0a <rclc_executor_trigger_any+0x36>
 8012e3e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8012e42:	2800      	cmp	r0, #0
 8012e44:	d1e1      	bne.n	8012e0a <rclc_executor_trigger_any+0x36>
 8012e46:	3201      	adds	r2, #1
 8012e48:	3340      	adds	r3, #64	@ 0x40
 8012e4a:	4291      	cmp	r1, r2
 8012e4c:	d1e7      	bne.n	8012e1e <rclc_executor_trigger_any+0x4a>
 8012e4e:	2000      	movs	r0, #0
 8012e50:	bc30      	pop	{r4, r5}
 8012e52:	4770      	bx	lr
 8012e54:	4770      	bx	lr
 8012e56:	4608      	mov	r0, r1
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop

08012e5c <rclc_executor_get_zero_initialized_executor>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	4604      	mov	r4, r0
 8012e60:	2288      	movs	r2, #136	@ 0x88
 8012e62:	4902      	ldr	r1, [pc, #8]	@ (8012e6c <rclc_executor_get_zero_initialized_executor+0x10>)
 8012e64:	f00c ff05 	bl	801fc72 <memcpy>
 8012e68:	4620      	mov	r0, r4
 8012e6a:	bd10      	pop	{r4, pc}
 8012e6c:	08021e20 	.word	0x08021e20

08012e70 <rclc_executor_init>:
 8012e70:	2900      	cmp	r1, #0
 8012e72:	d06a      	beq.n	8012f4a <rclc_executor_init+0xda>
 8012e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e78:	4605      	mov	r5, r0
 8012e7a:	b0b0      	sub	sp, #192	@ 0xc0
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d05c      	beq.n	8012f3a <rclc_executor_init+0xca>
 8012e80:	4616      	mov	r6, r2
 8012e82:	4618      	mov	r0, r3
 8012e84:	4688      	mov	r8, r1
 8012e86:	461f      	mov	r7, r3
 8012e88:	f000 fc92 	bl	80137b0 <rcutils_allocator_is_valid>
 8012e8c:	2e00      	cmp	r6, #0
 8012e8e:	d054      	beq.n	8012f3a <rclc_executor_init+0xca>
 8012e90:	f080 0401 	eor.w	r4, r0, #1
 8012e94:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8012e98:	d14f      	bne.n	8012f3a <rclc_executor_init+0xca>
 8012e9a:	2288      	movs	r2, #136	@ 0x88
 8012e9c:	4930      	ldr	r1, [pc, #192]	@ (8012f60 <rclc_executor_init+0xf0>)
 8012e9e:	a80e      	add	r0, sp, #56	@ 0x38
 8012ea0:	f00c fee7 	bl	801fc72 <memcpy>
 8012ea4:	a90e      	add	r1, sp, #56	@ 0x38
 8012ea6:	2288      	movs	r2, #136	@ 0x88
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	f00c fee2 	bl	801fc72 <memcpy>
 8012eae:	4668      	mov	r0, sp
 8012eb0:	f8c5 8000 	str.w	r8, [r5]
 8012eb4:	60ae      	str	r6, [r5, #8]
 8012eb6:	f002 fed3 	bl	8015c60 <rcl_get_zero_initialized_wait_set>
 8012eba:	46ec      	mov	ip, sp
 8012ebc:	f105 0e14 	add.w	lr, r5, #20
 8012ec0:	f8d7 8000 	ldr.w	r8, [r7]
 8012ec4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ec8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ecc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ed0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ed8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8012f58 <rclc_executor_init+0xe8>
 8012edc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ee0:	f8dc 3000 	ldr.w	r3, [ip]
 8012ee4:	01b0      	lsls	r0, r6, #6
 8012ee6:	6939      	ldr	r1, [r7, #16]
 8012ee8:	f8ce 3000 	str.w	r3, [lr]
 8012eec:	612f      	str	r7, [r5, #16]
 8012eee:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8012ef2:	47c0      	blx	r8
 8012ef4:	6068      	str	r0, [r5, #4]
 8012ef6:	b908      	cbnz	r0, 8012efc <rclc_executor_init+0x8c>
 8012ef8:	e029      	b.n	8012f4e <rclc_executor_init+0xde>
 8012efa:	6868      	ldr	r0, [r5, #4]
 8012efc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8012f00:	3401      	adds	r4, #1
 8012f02:	4631      	mov	r1, r6
 8012f04:	f000 fac0 	bl	8013488 <rclc_executor_handle_init>
 8012f08:	42a6      	cmp	r6, r4
 8012f0a:	d8f6      	bhi.n	8012efa <rclc_executor_init+0x8a>
 8012f0c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8012f10:	f000 faae 	bl	8013470 <rclc_executor_handle_counters_zero_init>
 8012f14:	4a13      	ldr	r2, [pc, #76]	@ (8012f64 <rclc_executor_init+0xf4>)
 8012f16:	2300      	movs	r3, #0
 8012f18:	6868      	ldr	r0, [r5, #4]
 8012f1a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8012f1e:	b168      	cbz	r0, 8012f3c <rclc_executor_init+0xcc>
 8012f20:	68ab      	ldr	r3, [r5, #8]
 8012f22:	b173      	cbz	r3, 8012f42 <rclc_executor_init+0xd2>
 8012f24:	692a      	ldr	r2, [r5, #16]
 8012f26:	fab2 f382 	clz	r3, r2
 8012f2a:	095b      	lsrs	r3, r3, #5
 8012f2c:	b14a      	cbz	r2, 8012f42 <rclc_executor_init+0xd2>
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8012f34:	b030      	add	sp, #192	@ 0xc0
 8012f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f3a:	200b      	movs	r0, #11
 8012f3c:	b030      	add	sp, #192	@ 0xc0
 8012f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f42:	2000      	movs	r0, #0
 8012f44:	b030      	add	sp, #192	@ 0xc0
 8012f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f4a:	200b      	movs	r0, #11
 8012f4c:	4770      	bx	lr
 8012f4e:	200a      	movs	r0, #10
 8012f50:	e7f4      	b.n	8012f3c <rclc_executor_init+0xcc>
 8012f52:	bf00      	nop
 8012f54:	f3af 8000 	nop.w
 8012f58:	3b9aca00 	.word	0x3b9aca00
 8012f5c:	00000000 	.word	0x00000000
 8012f60:	08021e20 	.word	0x08021e20
 8012f64:	08012dd5 	.word	0x08012dd5

08012f68 <rclc_executor_add_subscription>:
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	bf18      	it	ne
 8012f6c:	2a00      	cmpne	r2, #0
 8012f6e:	b570      	push	{r4, r5, r6, lr}
 8012f70:	4604      	mov	r4, r0
 8012f72:	bf0c      	ite	eq
 8012f74:	2001      	moveq	r0, #1
 8012f76:	2000      	movne	r0, #0
 8012f78:	f89d c010 	ldrb.w	ip, [sp, #16]
 8012f7c:	2900      	cmp	r1, #0
 8012f7e:	bf08      	it	eq
 8012f80:	f040 0001 	orreq.w	r0, r0, #1
 8012f84:	bb28      	cbnz	r0, 8012fd2 <rclc_executor_add_subscription+0x6a>
 8012f86:	fab4 f584 	clz	r5, r4
 8012f8a:	096d      	lsrs	r5, r5, #5
 8012f8c:	b30c      	cbz	r4, 8012fd2 <rclc_executor_add_subscription+0x6a>
 8012f8e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8012f92:	4286      	cmp	r6, r0
 8012f94:	d301      	bcc.n	8012f9a <rclc_executor_add_subscription+0x32>
 8012f96:	2001      	movs	r0, #1
 8012f98:	bd70      	pop	{r4, r5, r6, pc}
 8012f9a:	6860      	ldr	r0, [r4, #4]
 8012f9c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8012fa0:	f800 500e 	strb.w	r5, [r0, lr]
 8012fa4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8012fa8:	3601      	adds	r6, #1
 8012faa:	6303      	str	r3, [r0, #48]	@ 0x30
 8012fac:	2301      	movs	r3, #1
 8012fae:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8012fb0:	f104 0514 	add.w	r5, r4, #20
 8012fb4:	f880 c001 	strb.w	ip, [r0, #1]
 8012fb8:	8703      	strh	r3, [r0, #56]	@ 0x38
 8012fba:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	60e6      	str	r6, [r4, #12]
 8012fc2:	f002 fe61 	bl	8015c88 <rcl_wait_set_is_valid>
 8012fc6:	b930      	cbnz	r0, 8012fd6 <rclc_executor_add_subscription+0x6e>
 8012fc8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8012fca:	2000      	movs	r0, #0
 8012fcc:	3301      	adds	r3, #1
 8012fce:	64a3      	str	r3, [r4, #72]	@ 0x48
 8012fd0:	bd70      	pop	{r4, r5, r6, pc}
 8012fd2:	200b      	movs	r0, #11
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	f002 fe5c 	bl	8015c94 <rcl_wait_set_fini>
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	d0f3      	beq.n	8012fc8 <rclc_executor_add_subscription+0x60>
 8012fe0:	bd70      	pop	{r4, r5, r6, pc}
 8012fe2:	bf00      	nop

08012fe4 <rclc_executor_add_service>:
 8012fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fe6:	9d06      	ldr	r5, [sp, #24]
 8012fe8:	4604      	mov	r4, r0
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	bf18      	it	ne
 8012fee:	2d00      	cmpne	r5, #0
 8012ff0:	bf0c      	ite	eq
 8012ff2:	2001      	moveq	r0, #1
 8012ff4:	2000      	movne	r0, #0
 8012ff6:	2a00      	cmp	r2, #0
 8012ff8:	bf08      	it	eq
 8012ffa:	f040 0001 	orreq.w	r0, r0, #1
 8012ffe:	2900      	cmp	r1, #0
 8013000:	bf08      	it	eq
 8013002:	f040 0001 	orreq.w	r0, r0, #1
 8013006:	bb40      	cbnz	r0, 801305a <rclc_executor_add_service+0x76>
 8013008:	fab4 f684 	clz	r6, r4
 801300c:	0976      	lsrs	r6, r6, #5
 801300e:	b324      	cbz	r4, 801305a <rclc_executor_add_service+0x76>
 8013010:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8013014:	42b8      	cmp	r0, r7
 8013016:	d301      	bcc.n	801301c <rclc_executor_add_service+0x38>
 8013018:	2001      	movs	r0, #1
 801301a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801301c:	6867      	ldr	r7, [r4, #4]
 801301e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8013022:	f100 0c01 	add.w	ip, r0, #1
 8013026:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 801302a:	6283      	str	r3, [r0, #40]	@ 0x28
 801302c:	2305      	movs	r3, #5
 801302e:	6305      	str	r5, [r0, #48]	@ 0x30
 8013030:	f104 0514 	add.w	r5, r4, #20
 8013034:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8013038:	f827 300e 	strh.w	r3, [r7, lr]
 801303c:	2301      	movs	r3, #1
 801303e:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8013040:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013044:	4628      	mov	r0, r5
 8013046:	f8c4 c00c 	str.w	ip, [r4, #12]
 801304a:	f002 fe1d 	bl	8015c88 <rcl_wait_set_is_valid>
 801304e:	b930      	cbnz	r0, 801305e <rclc_executor_add_service+0x7a>
 8013050:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8013052:	2000      	movs	r0, #0
 8013054:	3301      	adds	r3, #1
 8013056:	6563      	str	r3, [r4, #84]	@ 0x54
 8013058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801305a:	200b      	movs	r0, #11
 801305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801305e:	4628      	mov	r0, r5
 8013060:	f002 fe18 	bl	8015c94 <rcl_wait_set_fini>
 8013064:	2800      	cmp	r0, #0
 8013066:	d0f3      	beq.n	8013050 <rclc_executor_add_service+0x6c>
 8013068:	e7d7      	b.n	801301a <rclc_executor_add_service+0x36>
 801306a:	bf00      	nop

0801306c <rclc_executor_prepare>:
 801306c:	2800      	cmp	r0, #0
 801306e:	d044      	beq.n	80130fa <rclc_executor_prepare+0x8e>
 8013070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013072:	f100 0514 	add.w	r5, r0, #20
 8013076:	b09b      	sub	sp, #108	@ 0x6c
 8013078:	4604      	mov	r4, r0
 801307a:	4628      	mov	r0, r5
 801307c:	f002 fe04 	bl	8015c88 <rcl_wait_set_is_valid>
 8013080:	b110      	cbz	r0, 8013088 <rclc_executor_prepare+0x1c>
 8013082:	2000      	movs	r0, #0
 8013084:	b01b      	add	sp, #108	@ 0x6c
 8013086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013088:	4628      	mov	r0, r5
 801308a:	f002 fe03 	bl	8015c94 <rcl_wait_set_fini>
 801308e:	2800      	cmp	r0, #0
 8013090:	d130      	bne.n	80130f4 <rclc_executor_prepare+0x88>
 8013092:	a80c      	add	r0, sp, #48	@ 0x30
 8013094:	ae04      	add	r6, sp, #16
 8013096:	f002 fde3 	bl	8015c60 <rcl_get_zero_initialized_wait_set>
 801309a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801309e:	46ae      	mov	lr, r5
 80130a0:	6927      	ldr	r7, [r4, #16]
 80130a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80130a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80130aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80130ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80130b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80130b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80130ba:	f8dc 3000 	ldr.w	r3, [ip]
 80130be:	f8ce 3000 	str.w	r3, [lr]
 80130c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80130c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	4628      	mov	r0, r5
 80130ca:	6822      	ldr	r2, [r4, #0]
 80130cc:	6033      	str	r3, [r6, #0]
 80130ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80130d0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80130d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80130d6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80130da:	e9cd 2100 	strd	r2, r1, [sp]
 80130de:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80130e0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80130e2:	f003 f8d7 	bl	8016294 <rcl_wait_set_init>
 80130e6:	2800      	cmp	r0, #0
 80130e8:	d0cc      	beq.n	8013084 <rclc_executor_prepare+0x18>
 80130ea:	900b      	str	r0, [sp, #44]	@ 0x2c
 80130ec:	f000 fb84 	bl	80137f8 <rcutils_reset_error>
 80130f0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80130f2:	e7c7      	b.n	8013084 <rclc_executor_prepare+0x18>
 80130f4:	f000 fb80 	bl	80137f8 <rcutils_reset_error>
 80130f8:	e7cb      	b.n	8013092 <rclc_executor_prepare+0x26>
 80130fa:	200b      	movs	r0, #11
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop

08013100 <rclc_executor_spin_some.part.0>:
 8013100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013104:	4605      	mov	r5, r0
 8013106:	4691      	mov	r9, r2
 8013108:	4698      	mov	r8, r3
 801310a:	f7ff ffaf 	bl	801306c <rclc_executor_prepare>
 801310e:	f105 0614 	add.w	r6, r5, #20
 8013112:	4630      	mov	r0, r6
 8013114:	f002 fe8a 	bl	8015e2c <rcl_wait_set_clear>
 8013118:	4607      	mov	r7, r0
 801311a:	2800      	cmp	r0, #0
 801311c:	f040 80a8 	bne.w	8013270 <rclc_executor_spin_some.part.0+0x170>
 8013120:	68ab      	ldr	r3, [r5, #8]
 8013122:	b30b      	cbz	r3, 8013168 <rclc_executor_spin_some.part.0+0x68>
 8013124:	4604      	mov	r4, r0
 8013126:	6869      	ldr	r1, [r5, #4]
 8013128:	01a2      	lsls	r2, r4, #6
 801312a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 801312e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8013132:	b1cb      	cbz	r3, 8013168 <rclc_executor_spin_some.part.0+0x68>
 8013134:	5c8b      	ldrb	r3, [r1, r2]
 8013136:	2b0a      	cmp	r3, #10
 8013138:	f200 80de 	bhi.w	80132f8 <rclc_executor_spin_some.part.0+0x1f8>
 801313c:	e8df f003 	tbb	[pc, r3]
 8013140:	8da99d9d 	.word	0x8da99d9d
 8013144:	0606068d 	.word	0x0606068d
 8013148:	c1ce      	.short	0xc1ce
 801314a:	b5          	.byte	0xb5
 801314b:	00          	.byte	0x00
 801314c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8013150:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013154:	4630      	mov	r0, r6
 8013156:	f003 f9b9 	bl	80164cc <rcl_wait_set_add_service>
 801315a:	2800      	cmp	r0, #0
 801315c:	f040 8087 	bne.w	801326e <rclc_executor_spin_some.part.0+0x16e>
 8013160:	3401      	adds	r4, #1
 8013162:	68ab      	ldr	r3, [r5, #8]
 8013164:	429c      	cmp	r4, r3
 8013166:	d3de      	bcc.n	8013126 <rclc_executor_spin_some.part.0+0x26>
 8013168:	4643      	mov	r3, r8
 801316a:	464a      	mov	r2, r9
 801316c:	4630      	mov	r0, r6
 801316e:	f003 f9db 	bl	8016528 <rcl_wait>
 8013172:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8013176:	2b00      	cmp	r3, #0
 8013178:	f000 80c6 	beq.w	8013308 <rclc_executor_spin_some.part.0+0x208>
 801317c:	2b01      	cmp	r3, #1
 801317e:	f040 80bb 	bne.w	80132f8 <rclc_executor_spin_some.part.0+0x1f8>
 8013182:	68ab      	ldr	r3, [r5, #8]
 8013184:	2b00      	cmp	r3, #0
 8013186:	f000 8159 	beq.w	801343c <rclc_executor_spin_some.part.0+0x33c>
 801318a:	2400      	movs	r4, #0
 801318c:	f240 1991 	movw	r9, #401	@ 0x191
 8013190:	46a0      	mov	r8, r4
 8013192:	e00a      	b.n	80131aa <rclc_executor_spin_some.part.0+0xaa>
 8013194:	f7ff fb1a 	bl	80127cc <_rclc_check_for_new_data>
 8013198:	4604      	mov	r4, r0
 801319a:	b110      	cbz	r0, 80131a2 <rclc_executor_spin_some.part.0+0xa2>
 801319c:	4548      	cmp	r0, r9
 801319e:	f040 80b1 	bne.w	8013304 <rclc_executor_spin_some.part.0+0x204>
 80131a2:	68ab      	ldr	r3, [r5, #8]
 80131a4:	4598      	cmp	r8, r3
 80131a6:	f080 8126 	bcs.w	80133f6 <rclc_executor_spin_some.part.0+0x2f6>
 80131aa:	686a      	ldr	r2, [r5, #4]
 80131ac:	4631      	mov	r1, r6
 80131ae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80131b2:	f108 0801 	add.w	r8, r8, #1
 80131b6:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80131ba:	f1bc 0f00 	cmp.w	ip, #0
 80131be:	d1e9      	bne.n	8013194 <rclc_executor_spin_some.part.0+0x94>
 80131c0:	4619      	mov	r1, r3
 80131c2:	4610      	mov	r0, r2
 80131c4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80131c8:	4798      	blx	r3
 80131ca:	2800      	cmp	r0, #0
 80131cc:	f000 809a 	beq.w	8013304 <rclc_executor_spin_some.part.0+0x204>
 80131d0:	68ab      	ldr	r3, [r5, #8]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f000 8096 	beq.w	8013304 <rclc_executor_spin_some.part.0+0x204>
 80131d8:	f04f 0800 	mov.w	r8, #0
 80131dc:	f240 1991 	movw	r9, #401	@ 0x191
 80131e0:	e009      	b.n	80131f6 <rclc_executor_spin_some.part.0+0xf6>
 80131e2:	f7ff fb41 	bl	8012868 <_rclc_take_new_data>
 80131e6:	4604      	mov	r4, r0
 80131e8:	b110      	cbz	r0, 80131f0 <rclc_executor_spin_some.part.0+0xf0>
 80131ea:	4548      	cmp	r0, r9
 80131ec:	f040 808a 	bne.w	8013304 <rclc_executor_spin_some.part.0+0x204>
 80131f0:	68ab      	ldr	r3, [r5, #8]
 80131f2:	4598      	cmp	r8, r3
 80131f4:	d209      	bcs.n	801320a <rclc_executor_spin_some.part.0+0x10a>
 80131f6:	6868      	ldr	r0, [r5, #4]
 80131f8:	4631      	mov	r1, r6
 80131fa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80131fe:	f108 0801 	add.w	r8, r8, #1
 8013202:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8013206:	2a00      	cmp	r2, #0
 8013208:	d1eb      	bne.n	80131e2 <rclc_executor_spin_some.part.0+0xe2>
 801320a:	2b00      	cmp	r3, #0
 801320c:	d07a      	beq.n	8013304 <rclc_executor_spin_some.part.0+0x204>
 801320e:	2600      	movs	r6, #0
 8013210:	e00e      	b.n	8013230 <rclc_executor_spin_some.part.0+0x130>
 8013212:	f812 200c 	ldrb.w	r2, [r2, ip]
 8013216:	2a08      	cmp	r2, #8
 8013218:	f000 80fc 	beq.w	8013414 <rclc_executor_spin_some.part.0+0x314>
 801321c:	2a09      	cmp	r2, #9
 801321e:	f000 80ee 	beq.w	80133fe <rclc_executor_spin_some.part.0+0x2fe>
 8013222:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8013226:	b98a      	cbnz	r2, 801324c <rclc_executor_spin_some.part.0+0x14c>
 8013228:	3601      	adds	r6, #1
 801322a:	429e      	cmp	r6, r3
 801322c:	d267      	bcs.n	80132fe <rclc_executor_spin_some.part.0+0x1fe>
 801322e:	2400      	movs	r4, #0
 8013230:	686a      	ldr	r2, [r5, #4]
 8013232:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8013236:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801323a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 801323e:	2900      	cmp	r1, #0
 8013240:	d060      	beq.n	8013304 <rclc_executor_spin_some.part.0+0x204>
 8013242:	7841      	ldrb	r1, [r0, #1]
 8013244:	2900      	cmp	r1, #0
 8013246:	d0e4      	beq.n	8013212 <rclc_executor_spin_some.part.0+0x112>
 8013248:	2901      	cmp	r1, #1
 801324a:	d1ed      	bne.n	8013228 <rclc_executor_spin_some.part.0+0x128>
 801324c:	f7ff fc80 	bl	8012b50 <_rclc_execute.part.0>
 8013250:	2800      	cmp	r0, #0
 8013252:	f040 80b5 	bne.w	80133c0 <rclc_executor_spin_some.part.0+0x2c0>
 8013256:	68ab      	ldr	r3, [r5, #8]
 8013258:	e7e6      	b.n	8013228 <rclc_executor_spin_some.part.0+0x128>
 801325a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801325e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013262:	4630      	mov	r0, r6
 8013264:	f003 f906 	bl	8016474 <rcl_wait_set_add_client>
 8013268:	2800      	cmp	r0, #0
 801326a:	f43f af79 	beq.w	8013160 <rclc_executor_spin_some.part.0+0x60>
 801326e:	4607      	mov	r7, r0
 8013270:	f000 fac2 	bl	80137f8 <rcutils_reset_error>
 8013274:	4638      	mov	r0, r7
 8013276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801327a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801327e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013282:	4630      	mov	r0, r6
 8013284:	f002 fda6 	bl	8015dd4 <rcl_wait_set_add_subscription>
 8013288:	2800      	cmp	r0, #0
 801328a:	f43f af69 	beq.w	8013160 <rclc_executor_spin_some.part.0+0x60>
 801328e:	4607      	mov	r7, r0
 8013290:	e7ee      	b.n	8013270 <rclc_executor_spin_some.part.0+0x170>
 8013292:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8013296:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801329a:	4630      	mov	r0, r6
 801329c:	f003 f8ba 	bl	8016414 <rcl_wait_set_add_timer>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	f43f af5d 	beq.w	8013160 <rclc_executor_spin_some.part.0+0x60>
 80132a6:	4607      	mov	r7, r0
 80132a8:	e7e2      	b.n	8013270 <rclc_executor_spin_some.part.0+0x170>
 80132aa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80132ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80132b2:	4630      	mov	r0, r6
 80132b4:	f003 f882 	bl	80163bc <rcl_wait_set_add_guard_condition>
 80132b8:	2800      	cmp	r0, #0
 80132ba:	f43f af51 	beq.w	8013160 <rclc_executor_spin_some.part.0+0x60>
 80132be:	4607      	mov	r7, r0
 80132c0:	e7d6      	b.n	8013270 <rclc_executor_spin_some.part.0+0x170>
 80132c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80132c6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80132ca:	4630      	mov	r0, r6
 80132cc:	3110      	adds	r1, #16
 80132ce:	f003 fe01 	bl	8016ed4 <rcl_action_wait_set_add_action_server>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f43f af44 	beq.w	8013160 <rclc_executor_spin_some.part.0+0x60>
 80132d8:	4607      	mov	r7, r0
 80132da:	e7c9      	b.n	8013270 <rclc_executor_spin_some.part.0+0x170>
 80132dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80132e0:	2300      	movs	r3, #0
 80132e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80132e6:	4630      	mov	r0, r6
 80132e8:	3110      	adds	r1, #16
 80132ea:	f003 fbc9 	bl	8016a80 <rcl_action_wait_set_add_action_client>
 80132ee:	2800      	cmp	r0, #0
 80132f0:	f43f af36 	beq.w	8013160 <rclc_executor_spin_some.part.0+0x60>
 80132f4:	4607      	mov	r7, r0
 80132f6:	e7bb      	b.n	8013270 <rclc_executor_spin_some.part.0+0x170>
 80132f8:	2701      	movs	r7, #1
 80132fa:	f000 fa7d 	bl	80137f8 <rcutils_reset_error>
 80132fe:	4638      	mov	r0, r7
 8013300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013304:	4627      	mov	r7, r4
 8013306:	e7fa      	b.n	80132fe <rclc_executor_spin_some.part.0+0x1fe>
 8013308:	68ab      	ldr	r3, [r5, #8]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 8093 	beq.w	8013436 <rclc_executor_spin_some.part.0+0x336>
 8013310:	2400      	movs	r4, #0
 8013312:	f240 1991 	movw	r9, #401	@ 0x191
 8013316:	46a0      	mov	r8, r4
 8013318:	e008      	b.n	801332c <rclc_executor_spin_some.part.0+0x22c>
 801331a:	f7ff fa57 	bl	80127cc <_rclc_check_for_new_data>
 801331e:	4604      	mov	r4, r0
 8013320:	b108      	cbz	r0, 8013326 <rclc_executor_spin_some.part.0+0x226>
 8013322:	4548      	cmp	r0, r9
 8013324:	d1ee      	bne.n	8013304 <rclc_executor_spin_some.part.0+0x204>
 8013326:	68ab      	ldr	r3, [r5, #8]
 8013328:	4598      	cmp	r8, r3
 801332a:	d266      	bcs.n	80133fa <rclc_executor_spin_some.part.0+0x2fa>
 801332c:	686a      	ldr	r2, [r5, #4]
 801332e:	4631      	mov	r1, r6
 8013330:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8013334:	f108 0801 	add.w	r8, r8, #1
 8013338:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801333c:	f1bc 0f00 	cmp.w	ip, #0
 8013340:	d1eb      	bne.n	801331a <rclc_executor_spin_some.part.0+0x21a>
 8013342:	4619      	mov	r1, r3
 8013344:	4610      	mov	r0, r2
 8013346:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801334a:	4798      	blx	r3
 801334c:	2800      	cmp	r0, #0
 801334e:	d0d9      	beq.n	8013304 <rclc_executor_spin_some.part.0+0x204>
 8013350:	68ab      	ldr	r3, [r5, #8]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d0d6      	beq.n	8013304 <rclc_executor_spin_some.part.0+0x204>
 8013356:	f04f 0a00 	mov.w	sl, #0
 801335a:	f240 1891 	movw	r8, #401	@ 0x191
 801335e:	f240 2959 	movw	r9, #601	@ 0x259
 8013362:	e00e      	b.n	8013382 <rclc_executor_spin_some.part.0+0x282>
 8013364:	f813 300b 	ldrb.w	r3, [r3, fp]
 8013368:	2b08      	cmp	r3, #8
 801336a:	d034      	beq.n	80133d6 <rclc_executor_spin_some.part.0+0x2d6>
 801336c:	2b09      	cmp	r3, #9
 801336e:	d029      	beq.n	80133c4 <rclc_executor_spin_some.part.0+0x2c4>
 8013370:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8013374:	bb03      	cbnz	r3, 80133b8 <rclc_executor_spin_some.part.0+0x2b8>
 8013376:	f10a 0a01 	add.w	sl, sl, #1
 801337a:	68ab      	ldr	r3, [r5, #8]
 801337c:	459a      	cmp	sl, r3
 801337e:	d2be      	bcs.n	80132fe <rclc_executor_spin_some.part.0+0x1fe>
 8013380:	2400      	movs	r4, #0
 8013382:	6868      	ldr	r0, [r5, #4]
 8013384:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8013388:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801338c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8013390:	2b00      	cmp	r3, #0
 8013392:	d0b7      	beq.n	8013304 <rclc_executor_spin_some.part.0+0x204>
 8013394:	4631      	mov	r1, r6
 8013396:	f7ff fa67 	bl	8012868 <_rclc_take_new_data>
 801339a:	2800      	cmp	r0, #0
 801339c:	bf18      	it	ne
 801339e:	4540      	cmpne	r0, r8
 80133a0:	d001      	beq.n	80133a6 <rclc_executor_spin_some.part.0+0x2a6>
 80133a2:	4548      	cmp	r0, r9
 80133a4:	d10c      	bne.n	80133c0 <rclc_executor_spin_some.part.0+0x2c0>
 80133a6:	686b      	ldr	r3, [r5, #4]
 80133a8:	eb13 000b 	adds.w	r0, r3, fp
 80133ac:	d021      	beq.n	80133f2 <rclc_executor_spin_some.part.0+0x2f2>
 80133ae:	7842      	ldrb	r2, [r0, #1]
 80133b0:	2a00      	cmp	r2, #0
 80133b2:	d0d7      	beq.n	8013364 <rclc_executor_spin_some.part.0+0x264>
 80133b4:	2a01      	cmp	r2, #1
 80133b6:	d1de      	bne.n	8013376 <rclc_executor_spin_some.part.0+0x276>
 80133b8:	f7ff fbca 	bl	8012b50 <_rclc_execute.part.0>
 80133bc:	2800      	cmp	r0, #0
 80133be:	d0da      	beq.n	8013376 <rclc_executor_spin_some.part.0+0x276>
 80133c0:	4607      	mov	r7, r0
 80133c2:	e79c      	b.n	80132fe <rclc_executor_spin_some.part.0+0x1fe>
 80133c4:	6843      	ldr	r3, [r0, #4]
 80133c6:	6a1a      	ldr	r2, [r3, #32]
 80133c8:	2a00      	cmp	r2, #0
 80133ca:	d1f5      	bne.n	80133b8 <rclc_executor_spin_some.part.0+0x2b8>
 80133cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d0d0      	beq.n	8013376 <rclc_executor_spin_some.part.0+0x276>
 80133d4:	e7f0      	b.n	80133b8 <rclc_executor_spin_some.part.0+0x2b8>
 80133d6:	6843      	ldr	r3, [r0, #4]
 80133d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80133da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80133de:	d1eb      	bne.n	80133b8 <rclc_executor_spin_some.part.0+0x2b8>
 80133e0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80133e4:	2a00      	cmp	r2, #0
 80133e6:	d1e7      	bne.n	80133b8 <rclc_executor_spin_some.part.0+0x2b8>
 80133e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d0c2      	beq.n	8013376 <rclc_executor_spin_some.part.0+0x276>
 80133f0:	e7e2      	b.n	80133b8 <rclc_executor_spin_some.part.0+0x2b8>
 80133f2:	270b      	movs	r7, #11
 80133f4:	e783      	b.n	80132fe <rclc_executor_spin_some.part.0+0x1fe>
 80133f6:	686a      	ldr	r2, [r5, #4]
 80133f8:	e6e2      	b.n	80131c0 <rclc_executor_spin_some.part.0+0xc0>
 80133fa:	686a      	ldr	r2, [r5, #4]
 80133fc:	e7a1      	b.n	8013342 <rclc_executor_spin_some.part.0+0x242>
 80133fe:	6842      	ldr	r2, [r0, #4]
 8013400:	6a11      	ldr	r1, [r2, #32]
 8013402:	2900      	cmp	r1, #0
 8013404:	f47f af22 	bne.w	801324c <rclc_executor_spin_some.part.0+0x14c>
 8013408:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801340c:	2a00      	cmp	r2, #0
 801340e:	f43f af0b 	beq.w	8013228 <rclc_executor_spin_some.part.0+0x128>
 8013412:	e71b      	b.n	801324c <rclc_executor_spin_some.part.0+0x14c>
 8013414:	6842      	ldr	r2, [r0, #4]
 8013416:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8013418:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 801341c:	f47f af16 	bne.w	801324c <rclc_executor_spin_some.part.0+0x14c>
 8013420:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8013424:	2900      	cmp	r1, #0
 8013426:	f47f af11 	bne.w	801324c <rclc_executor_spin_some.part.0+0x14c>
 801342a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 801342e:	2a00      	cmp	r2, #0
 8013430:	f43f aefa 	beq.w	8013228 <rclc_executor_spin_some.part.0+0x128>
 8013434:	e70a      	b.n	801324c <rclc_executor_spin_some.part.0+0x14c>
 8013436:	686a      	ldr	r2, [r5, #4]
 8013438:	461c      	mov	r4, r3
 801343a:	e782      	b.n	8013342 <rclc_executor_spin_some.part.0+0x242>
 801343c:	686a      	ldr	r2, [r5, #4]
 801343e:	461c      	mov	r4, r3
 8013440:	e6be      	b.n	80131c0 <rclc_executor_spin_some.part.0+0xc0>
 8013442:	bf00      	nop

08013444 <rclc_executor_spin_some>:
 8013444:	b190      	cbz	r0, 801346c <rclc_executor_spin_some+0x28>
 8013446:	b570      	push	{r4, r5, r6, lr}
 8013448:	4604      	mov	r4, r0
 801344a:	6800      	ldr	r0, [r0, #0]
 801344c:	4616      	mov	r6, r2
 801344e:	461d      	mov	r5, r3
 8013450:	f001 f87a 	bl	8014548 <rcl_context_is_valid>
 8013454:	b130      	cbz	r0, 8013464 <rclc_executor_spin_some+0x20>
 8013456:	4632      	mov	r2, r6
 8013458:	462b      	mov	r3, r5
 801345a:	4620      	mov	r0, r4
 801345c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013460:	f7ff be4e 	b.w	8013100 <rclc_executor_spin_some.part.0>
 8013464:	f000 f9c8 	bl	80137f8 <rcutils_reset_error>
 8013468:	2001      	movs	r0, #1
 801346a:	bd70      	pop	{r4, r5, r6, pc}
 801346c:	200b      	movs	r0, #11
 801346e:	4770      	bx	lr

08013470 <rclc_executor_handle_counters_zero_init>:
 8013470:	b130      	cbz	r0, 8013480 <rclc_executor_handle_counters_zero_init+0x10>
 8013472:	2220      	movs	r2, #32
 8013474:	2100      	movs	r1, #0
 8013476:	b508      	push	{r3, lr}
 8013478:	f00c fadc 	bl	801fa34 <memset>
 801347c:	2000      	movs	r0, #0
 801347e:	bd08      	pop	{r3, pc}
 8013480:	200b      	movs	r0, #11
 8013482:	4770      	bx	lr
 8013484:	0000      	movs	r0, r0
	...

08013488 <rclc_executor_handle_init>:
 8013488:	4603      	mov	r3, r0
 801348a:	b178      	cbz	r0, 80134ac <rclc_executor_handle_init+0x24>
 801348c:	2200      	movs	r2, #0
 801348e:	f04f 0c0b 	mov.w	ip, #11
 8013492:	6341      	str	r1, [r0, #52]	@ 0x34
 8013494:	4610      	mov	r0, r2
 8013496:	f8a3 c000 	strh.w	ip, [r3]
 801349a:	631a      	str	r2, [r3, #48]	@ 0x30
 801349c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801349e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 80134b0 <rclc_executor_handle_init+0x28>
 80134a2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80134a6:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 80134aa:	4770      	bx	lr
 80134ac:	200b      	movs	r0, #11
 80134ae:	4770      	bx	lr
	...

080134b8 <rclc_support_init>:
 80134b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134bc:	b086      	sub	sp, #24
 80134be:	b3bb      	cbz	r3, 8013530 <rclc_support_init+0x78>
 80134c0:	4606      	mov	r6, r0
 80134c2:	b3a8      	cbz	r0, 8013530 <rclc_support_init+0x78>
 80134c4:	461c      	mov	r4, r3
 80134c6:	460f      	mov	r7, r1
 80134c8:	4690      	mov	r8, r2
 80134ca:	f001 f9a9 	bl	8014820 <rcl_get_zero_initialized_init_options>
 80134ce:	f104 050c 	add.w	r5, r4, #12
 80134d2:	9005      	str	r0, [sp, #20]
 80134d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80134d8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80134dc:	a805      	add	r0, sp, #20
 80134de:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80134e2:	f001 f99f 	bl	8014824 <rcl_init_options_init>
 80134e6:	4605      	mov	r5, r0
 80134e8:	b9e0      	cbnz	r0, 8013524 <rclc_support_init+0x6c>
 80134ea:	ad02      	add	r5, sp, #8
 80134ec:	4628      	mov	r0, r5
 80134ee:	f001 f821 	bl	8014534 <rcl_get_zero_initialized_context>
 80134f2:	4633      	mov	r3, r6
 80134f4:	aa05      	add	r2, sp, #20
 80134f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80134fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80134fe:	4641      	mov	r1, r8
 8013500:	4638      	mov	r0, r7
 8013502:	f001 f887 	bl	8014614 <rcl_init>
 8013506:	4605      	mov	r5, r0
 8013508:	b9b8      	cbnz	r0, 801353a <rclc_support_init+0x82>
 801350a:	4622      	mov	r2, r4
 801350c:	f106 010c 	add.w	r1, r6, #12
 8013510:	2003      	movs	r0, #3
 8013512:	60b4      	str	r4, [r6, #8]
 8013514:	f002 f99a 	bl	801584c <rcl_clock_init>
 8013518:	4605      	mov	r5, r0
 801351a:	b970      	cbnz	r0, 801353a <rclc_support_init+0x82>
 801351c:	a805      	add	r0, sp, #20
 801351e:	f001 f9e7 	bl	80148f0 <rcl_init_options_fini>
 8013522:	b108      	cbz	r0, 8013528 <rclc_support_init+0x70>
 8013524:	f000 f968 	bl	80137f8 <rcutils_reset_error>
 8013528:	4628      	mov	r0, r5
 801352a:	b006      	add	sp, #24
 801352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013530:	250b      	movs	r5, #11
 8013532:	4628      	mov	r0, r5
 8013534:	b006      	add	sp, #24
 8013536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801353a:	f000 f95d 	bl	80137f8 <rcutils_reset_error>
 801353e:	a805      	add	r0, sp, #20
 8013540:	f001 f9d6 	bl	80148f0 <rcl_init_options_fini>
 8013544:	2800      	cmp	r0, #0
 8013546:	d0ef      	beq.n	8013528 <rclc_support_init+0x70>
 8013548:	e7ec      	b.n	8013524 <rclc_support_init+0x6c>
 801354a:	bf00      	nop

0801354c <rclc_node_init_default>:
 801354c:	2b00      	cmp	r3, #0
 801354e:	bf18      	it	ne
 8013550:	2a00      	cmpne	r2, #0
 8013552:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013556:	4616      	mov	r6, r2
 8013558:	bf0c      	ite	eq
 801355a:	2201      	moveq	r2, #1
 801355c:	2200      	movne	r2, #0
 801355e:	b0a1      	sub	sp, #132	@ 0x84
 8013560:	2900      	cmp	r1, #0
 8013562:	bf08      	it	eq
 8013564:	f042 0201 	orreq.w	r2, r2, #1
 8013568:	bb22      	cbnz	r2, 80135b4 <rclc_node_init_default+0x68>
 801356a:	4604      	mov	r4, r0
 801356c:	b310      	cbz	r0, 80135b4 <rclc_node_init_default+0x68>
 801356e:	f10d 0810 	add.w	r8, sp, #16
 8013572:	461f      	mov	r7, r3
 8013574:	460d      	mov	r5, r1
 8013576:	f10d 0918 	add.w	r9, sp, #24
 801357a:	4640      	mov	r0, r8
 801357c:	f001 fa72 	bl	8014a64 <rcl_get_zero_initialized_node>
 8013580:	e898 0003 	ldmia.w	r8, {r0, r1}
 8013584:	e884 0003 	stmia.w	r4, {r0, r1}
 8013588:	4648      	mov	r0, r9
 801358a:	f001 fbe5 	bl	8014d58 <rcl_node_get_default_options>
 801358e:	4640      	mov	r0, r8
 8013590:	f001 fa68 	bl	8014a64 <rcl_get_zero_initialized_node>
 8013594:	f8cd 9000 	str.w	r9, [sp]
 8013598:	463b      	mov	r3, r7
 801359a:	4632      	mov	r2, r6
 801359c:	e898 0003 	ldmia.w	r8, {r0, r1}
 80135a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80135a4:	4629      	mov	r1, r5
 80135a6:	4620      	mov	r0, r4
 80135a8:	f001 fa66 	bl	8014a78 <rcl_node_init>
 80135ac:	b930      	cbnz	r0, 80135bc <rclc_node_init_default+0x70>
 80135ae:	b021      	add	sp, #132	@ 0x84
 80135b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135b4:	200b      	movs	r0, #11
 80135b6:	b021      	add	sp, #132	@ 0x84
 80135b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135bc:	9003      	str	r0, [sp, #12]
 80135be:	f000 f91b 	bl	80137f8 <rcutils_reset_error>
 80135c2:	f000 f919 	bl	80137f8 <rcutils_reset_error>
 80135c6:	9803      	ldr	r0, [sp, #12]
 80135c8:	b021      	add	sp, #132	@ 0x84
 80135ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135ce:	bf00      	nop

080135d0 <rclc_publisher_init_default>:
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	bf18      	it	ne
 80135d4:	2a00      	cmpne	r2, #0
 80135d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135da:	4616      	mov	r6, r2
 80135dc:	bf0c      	ite	eq
 80135de:	2201      	moveq	r2, #1
 80135e0:	2200      	movne	r2, #0
 80135e2:	b0a0      	sub	sp, #128	@ 0x80
 80135e4:	2900      	cmp	r1, #0
 80135e6:	bf08      	it	eq
 80135e8:	f042 0201 	orreq.w	r2, r2, #1
 80135ec:	bb1a      	cbnz	r2, 8013636 <rclc_publisher_init_default+0x66>
 80135ee:	4604      	mov	r4, r0
 80135f0:	b308      	cbz	r0, 8013636 <rclc_publisher_init_default+0x66>
 80135f2:	f10d 0810 	add.w	r8, sp, #16
 80135f6:	461f      	mov	r7, r3
 80135f8:	460d      	mov	r5, r1
 80135fa:	f001 fcb3 	bl	8014f64 <rcl_get_zero_initialized_publisher>
 80135fe:	6020      	str	r0, [r4, #0]
 8013600:	4640      	mov	r0, r8
 8013602:	f001 fd4f 	bl	80150a4 <rcl_publisher_get_default_options>
 8013606:	2250      	movs	r2, #80	@ 0x50
 8013608:	490d      	ldr	r1, [pc, #52]	@ (8013640 <rclc_publisher_init_default+0x70>)
 801360a:	4640      	mov	r0, r8
 801360c:	f00c fb31 	bl	801fc72 <memcpy>
 8013610:	463b      	mov	r3, r7
 8013612:	4632      	mov	r2, r6
 8013614:	4629      	mov	r1, r5
 8013616:	4620      	mov	r0, r4
 8013618:	f8cd 8000 	str.w	r8, [sp]
 801361c:	f001 fca8 	bl	8014f70 <rcl_publisher_init>
 8013620:	b910      	cbnz	r0, 8013628 <rclc_publisher_init_default+0x58>
 8013622:	b020      	add	sp, #128	@ 0x80
 8013624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013628:	9003      	str	r0, [sp, #12]
 801362a:	f000 f8e5 	bl	80137f8 <rcutils_reset_error>
 801362e:	9803      	ldr	r0, [sp, #12]
 8013630:	b020      	add	sp, #128	@ 0x80
 8013632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013636:	200b      	movs	r0, #11
 8013638:	b020      	add	sp, #128	@ 0x80
 801363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801363e:	bf00      	nop
 8013640:	08021ea8 	.word	0x08021ea8

08013644 <rclc_service_init_default>:
 8013644:	2b00      	cmp	r3, #0
 8013646:	bf18      	it	ne
 8013648:	2a00      	cmpne	r2, #0
 801364a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801364e:	4616      	mov	r6, r2
 8013650:	bf0c      	ite	eq
 8013652:	2201      	moveq	r2, #1
 8013654:	2200      	movne	r2, #0
 8013656:	b09e      	sub	sp, #120	@ 0x78
 8013658:	2900      	cmp	r1, #0
 801365a:	bf08      	it	eq
 801365c:	f042 0201 	orreq.w	r2, r2, #1
 8013660:	bb1a      	cbnz	r2, 80136aa <rclc_service_init_default+0x66>
 8013662:	4604      	mov	r4, r0
 8013664:	b308      	cbz	r0, 80136aa <rclc_service_init_default+0x66>
 8013666:	f10d 0810 	add.w	r8, sp, #16
 801366a:	461f      	mov	r7, r3
 801366c:	460d      	mov	r5, r1
 801366e:	f001 fe67 	bl	8015340 <rcl_get_zero_initialized_service>
 8013672:	6020      	str	r0, [r4, #0]
 8013674:	4640      	mov	r0, r8
 8013676:	f001 fefb 	bl	8015470 <rcl_service_get_default_options>
 801367a:	2250      	movs	r2, #80	@ 0x50
 801367c:	490d      	ldr	r1, [pc, #52]	@ (80136b4 <rclc_service_init_default+0x70>)
 801367e:	4640      	mov	r0, r8
 8013680:	f00c faf7 	bl	801fc72 <memcpy>
 8013684:	463b      	mov	r3, r7
 8013686:	4632      	mov	r2, r6
 8013688:	4629      	mov	r1, r5
 801368a:	4620      	mov	r0, r4
 801368c:	f8cd 8000 	str.w	r8, [sp]
 8013690:	f001 fe5c 	bl	801534c <rcl_service_init>
 8013694:	b910      	cbnz	r0, 801369c <rclc_service_init_default+0x58>
 8013696:	b01e      	add	sp, #120	@ 0x78
 8013698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369c:	9003      	str	r0, [sp, #12]
 801369e:	f000 f8ab 	bl	80137f8 <rcutils_reset_error>
 80136a2:	9803      	ldr	r0, [sp, #12]
 80136a4:	b01e      	add	sp, #120	@ 0x78
 80136a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136aa:	200b      	movs	r0, #11
 80136ac:	b01e      	add	sp, #120	@ 0x78
 80136ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b2:	bf00      	nop
 80136b4:	08021ef8 	.word	0x08021ef8

080136b8 <rclc_subscription_init_default>:
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	bf18      	it	ne
 80136bc:	2a00      	cmpne	r2, #0
 80136be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c2:	4616      	mov	r6, r2
 80136c4:	bf0c      	ite	eq
 80136c6:	2201      	moveq	r2, #1
 80136c8:	2200      	movne	r2, #0
 80136ca:	b0a0      	sub	sp, #128	@ 0x80
 80136cc:	2900      	cmp	r1, #0
 80136ce:	bf08      	it	eq
 80136d0:	f042 0201 	orreq.w	r2, r2, #1
 80136d4:	bb1a      	cbnz	r2, 801371e <rclc_subscription_init_default+0x66>
 80136d6:	4604      	mov	r4, r0
 80136d8:	b308      	cbz	r0, 801371e <rclc_subscription_init_default+0x66>
 80136da:	f10d 0810 	add.w	r8, sp, #16
 80136de:	461f      	mov	r7, r3
 80136e0:	460d      	mov	r5, r1
 80136e2:	f001 ff51 	bl	8015588 <rcl_get_zero_initialized_subscription>
 80136e6:	6020      	str	r0, [r4, #0]
 80136e8:	4640      	mov	r0, r8
 80136ea:	f002 f801 	bl	80156f0 <rcl_subscription_get_default_options>
 80136ee:	2250      	movs	r2, #80	@ 0x50
 80136f0:	490d      	ldr	r1, [pc, #52]	@ (8013728 <rclc_subscription_init_default+0x70>)
 80136f2:	4640      	mov	r0, r8
 80136f4:	f00c fabd 	bl	801fc72 <memcpy>
 80136f8:	463b      	mov	r3, r7
 80136fa:	4632      	mov	r2, r6
 80136fc:	4629      	mov	r1, r5
 80136fe:	4620      	mov	r0, r4
 8013700:	f8cd 8000 	str.w	r8, [sp]
 8013704:	f001 ff46 	bl	8015594 <rcl_subscription_init>
 8013708:	b910      	cbnz	r0, 8013710 <rclc_subscription_init_default+0x58>
 801370a:	b020      	add	sp, #128	@ 0x80
 801370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013710:	9003      	str	r0, [sp, #12]
 8013712:	f000 f871 	bl	80137f8 <rcutils_reset_error>
 8013716:	9803      	ldr	r0, [sp, #12]
 8013718:	b020      	add	sp, #128	@ 0x80
 801371a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801371e:	200b      	movs	r0, #11
 8013720:	b020      	add	sp, #128	@ 0x80
 8013722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013726:	bf00      	nop
 8013728:	08021f48 	.word	0x08021f48

0801372c <__default_zero_allocate>:
 801372c:	f00b bcaa 	b.w	801f084 <calloc>

08013730 <__default_reallocate>:
 8013730:	f00b be48 	b.w	801f3c4 <realloc>

08013734 <__default_deallocate>:
 8013734:	f00b bd24 	b.w	801f180 <free>

08013738 <__default_allocate>:
 8013738:	f00b bd1a 	b.w	801f170 <malloc>

0801373c <rcutils_get_zero_initialized_allocator>:
 801373c:	b510      	push	{r4, lr}
 801373e:	4c05      	ldr	r4, [pc, #20]	@ (8013754 <rcutils_get_zero_initialized_allocator+0x18>)
 8013740:	4686      	mov	lr, r0
 8013742:	4684      	mov	ip, r0
 8013744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	4670      	mov	r0, lr
 801374e:	f8cc 3000 	str.w	r3, [ip]
 8013752:	bd10      	pop	{r4, pc}
 8013754:	08021f98 	.word	0x08021f98

08013758 <rcutils_set_default_allocator>:
 8013758:	b1a8      	cbz	r0, 8013786 <rcutils_set_default_allocator+0x2e>
 801375a:	6802      	ldr	r2, [r0, #0]
 801375c:	b1a2      	cbz	r2, 8013788 <rcutils_set_default_allocator+0x30>
 801375e:	6841      	ldr	r1, [r0, #4]
 8013760:	b1a1      	cbz	r1, 801378c <rcutils_set_default_allocator+0x34>
 8013762:	b410      	push	{r4}
 8013764:	68c4      	ldr	r4, [r0, #12]
 8013766:	b164      	cbz	r4, 8013782 <rcutils_set_default_allocator+0x2a>
 8013768:	6880      	ldr	r0, [r0, #8]
 801376a:	b138      	cbz	r0, 801377c <rcutils_set_default_allocator+0x24>
 801376c:	4b08      	ldr	r3, [pc, #32]	@ (8013790 <rcutils_set_default_allocator+0x38>)
 801376e:	601a      	str	r2, [r3, #0]
 8013770:	2200      	movs	r2, #0
 8013772:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8013776:	2001      	movs	r0, #1
 8013778:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801377c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013780:	4770      	bx	lr
 8013782:	4620      	mov	r0, r4
 8013784:	e7fa      	b.n	801377c <rcutils_set_default_allocator+0x24>
 8013786:	4770      	bx	lr
 8013788:	4610      	mov	r0, r2
 801378a:	4770      	bx	lr
 801378c:	4608      	mov	r0, r1
 801378e:	4770      	bx	lr
 8013790:	24000dfc 	.word	0x24000dfc

08013794 <rcutils_get_default_allocator>:
 8013794:	b510      	push	{r4, lr}
 8013796:	4c05      	ldr	r4, [pc, #20]	@ (80137ac <rcutils_get_default_allocator+0x18>)
 8013798:	4686      	mov	lr, r0
 801379a:	4684      	mov	ip, r0
 801379c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801379e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	4670      	mov	r0, lr
 80137a6:	f8cc 3000 	str.w	r3, [ip]
 80137aa:	bd10      	pop	{r4, pc}
 80137ac:	24000dfc 	.word	0x24000dfc

080137b0 <rcutils_allocator_is_valid>:
 80137b0:	b158      	cbz	r0, 80137ca <rcutils_allocator_is_valid+0x1a>
 80137b2:	6803      	ldr	r3, [r0, #0]
 80137b4:	b143      	cbz	r3, 80137c8 <rcutils_allocator_is_valid+0x18>
 80137b6:	6843      	ldr	r3, [r0, #4]
 80137b8:	b133      	cbz	r3, 80137c8 <rcutils_allocator_is_valid+0x18>
 80137ba:	68c3      	ldr	r3, [r0, #12]
 80137bc:	b123      	cbz	r3, 80137c8 <rcutils_allocator_is_valid+0x18>
 80137be:	6880      	ldr	r0, [r0, #8]
 80137c0:	3800      	subs	r0, #0
 80137c2:	bf18      	it	ne
 80137c4:	2001      	movne	r0, #1
 80137c6:	4770      	bx	lr
 80137c8:	4618      	mov	r0, r3
 80137ca:	4770      	bx	lr

080137cc <rcutils_get_error_string>:
 80137cc:	4b06      	ldr	r3, [pc, #24]	@ (80137e8 <rcutils_get_error_string+0x1c>)
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	b13b      	cbz	r3, 80137e2 <rcutils_get_error_string+0x16>
 80137d2:	4b06      	ldr	r3, [pc, #24]	@ (80137ec <rcutils_get_error_string+0x20>)
 80137d4:	781a      	ldrb	r2, [r3, #0]
 80137d6:	b90a      	cbnz	r2, 80137dc <rcutils_get_error_string+0x10>
 80137d8:	2201      	movs	r2, #1
 80137da:	701a      	strb	r2, [r3, #0]
 80137dc:	4b04      	ldr	r3, [pc, #16]	@ (80137f0 <rcutils_get_error_string+0x24>)
 80137de:	7818      	ldrb	r0, [r3, #0]
 80137e0:	4770      	bx	lr
 80137e2:	4b04      	ldr	r3, [pc, #16]	@ (80137f4 <rcutils_get_error_string+0x28>)
 80137e4:	7818      	ldrb	r0, [r3, #0]
 80137e6:	4770      	bx	lr
 80137e8:	24064770 	.word	0x24064770
 80137ec:	24064789 	.word	0x24064789
 80137f0:	24064788 	.word	0x24064788
 80137f4:	08021fac 	.word	0x08021fac

080137f8 <rcutils_reset_error>:
 80137f8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8013818 <rcutils_reset_error+0x20>
 80137fc:	2300      	movs	r3, #0
 80137fe:	4a08      	ldr	r2, [pc, #32]	@ (8013820 <rcutils_reset_error+0x28>)
 8013800:	4808      	ldr	r0, [pc, #32]	@ (8013824 <rcutils_reset_error+0x2c>)
 8013802:	8013      	strh	r3, [r2, #0]
 8013804:	4908      	ldr	r1, [pc, #32]	@ (8013828 <rcutils_reset_error+0x30>)
 8013806:	7003      	strb	r3, [r0, #0]
 8013808:	700b      	strb	r3, [r1, #0]
 801380a:	ed82 7b02 	vstr	d7, [r2, #8]
 801380e:	4a07      	ldr	r2, [pc, #28]	@ (801382c <rcutils_reset_error+0x34>)
 8013810:	7013      	strb	r3, [r2, #0]
 8013812:	4770      	bx	lr
 8013814:	f3af 8000 	nop.w
	...
 8013820:	24064778 	.word	0x24064778
 8013824:	24064789 	.word	0x24064789
 8013828:	24064788 	.word	0x24064788
 801382c:	24064770 	.word	0x24064770

08013830 <rcutils_system_time_now>:
 8013830:	b300      	cbz	r0, 8013874 <rcutils_system_time_now+0x44>
 8013832:	b570      	push	{r4, r5, r6, lr}
 8013834:	b084      	sub	sp, #16
 8013836:	4604      	mov	r4, r0
 8013838:	2001      	movs	r0, #1
 801383a:	4669      	mov	r1, sp
 801383c:	f7ee fa20 	bl	8001c80 <clock_gettime>
 8013840:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013844:	2900      	cmp	r1, #0
 8013846:	db12      	blt.n	801386e <rcutils_system_time_now+0x3e>
 8013848:	ea53 0201 	orrs.w	r2, r3, r1
 801384c:	9d02      	ldr	r5, [sp, #8]
 801384e:	d101      	bne.n	8013854 <rcutils_system_time_now+0x24>
 8013850:	2d00      	cmp	r5, #0
 8013852:	db0c      	blt.n	801386e <rcutils_system_time_now+0x3e>
 8013854:	4e08      	ldr	r6, [pc, #32]	@ (8013878 <rcutils_system_time_now+0x48>)
 8013856:	2000      	movs	r0, #0
 8013858:	fba3 3206 	umull	r3, r2, r3, r6
 801385c:	195b      	adds	r3, r3, r5
 801385e:	fb06 2201 	mla	r2, r6, r1, r2
 8013862:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8013866:	e9c4 3200 	strd	r3, r2, [r4]
 801386a:	b004      	add	sp, #16
 801386c:	bd70      	pop	{r4, r5, r6, pc}
 801386e:	2002      	movs	r0, #2
 8013870:	b004      	add	sp, #16
 8013872:	bd70      	pop	{r4, r5, r6, pc}
 8013874:	200b      	movs	r0, #11
 8013876:	4770      	bx	lr
 8013878:	3b9aca00 	.word	0x3b9aca00

0801387c <rcutils_steady_time_now>:
 801387c:	b300      	cbz	r0, 80138c0 <rcutils_steady_time_now+0x44>
 801387e:	b570      	push	{r4, r5, r6, lr}
 8013880:	b084      	sub	sp, #16
 8013882:	4604      	mov	r4, r0
 8013884:	2000      	movs	r0, #0
 8013886:	4669      	mov	r1, sp
 8013888:	f7ee f9fa 	bl	8001c80 <clock_gettime>
 801388c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013890:	2900      	cmp	r1, #0
 8013892:	db12      	blt.n	80138ba <rcutils_steady_time_now+0x3e>
 8013894:	ea53 0201 	orrs.w	r2, r3, r1
 8013898:	9d02      	ldr	r5, [sp, #8]
 801389a:	d101      	bne.n	80138a0 <rcutils_steady_time_now+0x24>
 801389c:	2d00      	cmp	r5, #0
 801389e:	db0c      	blt.n	80138ba <rcutils_steady_time_now+0x3e>
 80138a0:	4e08      	ldr	r6, [pc, #32]	@ (80138c4 <rcutils_steady_time_now+0x48>)
 80138a2:	2000      	movs	r0, #0
 80138a4:	fba3 3206 	umull	r3, r2, r3, r6
 80138a8:	195b      	adds	r3, r3, r5
 80138aa:	fb06 2201 	mla	r2, r6, r1, r2
 80138ae:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80138b2:	e9c4 3200 	strd	r3, r2, [r4]
 80138b6:	b004      	add	sp, #16
 80138b8:	bd70      	pop	{r4, r5, r6, pc}
 80138ba:	2002      	movs	r0, #2
 80138bc:	b004      	add	sp, #16
 80138be:	bd70      	pop	{r4, r5, r6, pc}
 80138c0:	200b      	movs	r0, #11
 80138c2:	4770      	bx	lr
 80138c4:	3b9aca00 	.word	0x3b9aca00

080138c8 <rmw_uros_set_custom_transport>:
 80138c8:	b470      	push	{r4, r5, r6}
 80138ca:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80138ce:	b162      	cbz	r2, 80138ea <rmw_uros_set_custom_transport+0x22>
 80138d0:	b15b      	cbz	r3, 80138ea <rmw_uros_set_custom_transport+0x22>
 80138d2:	b155      	cbz	r5, 80138ea <rmw_uros_set_custom_transport+0x22>
 80138d4:	b14e      	cbz	r6, 80138ea <rmw_uros_set_custom_transport+0x22>
 80138d6:	4c06      	ldr	r4, [pc, #24]	@ (80138f0 <rmw_uros_set_custom_transport+0x28>)
 80138d8:	7020      	strb	r0, [r4, #0]
 80138da:	2000      	movs	r0, #0
 80138dc:	6166      	str	r6, [r4, #20]
 80138de:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80138e2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80138e6:	bc70      	pop	{r4, r5, r6}
 80138e8:	4770      	bx	lr
 80138ea:	200b      	movs	r0, #11
 80138ec:	bc70      	pop	{r4, r5, r6}
 80138ee:	4770      	bx	lr
 80138f0:	2406478c 	.word	0x2406478c

080138f4 <get_message_typesupport_handle>:
 80138f4:	6883      	ldr	r3, [r0, #8]
 80138f6:	4718      	bx	r3

080138f8 <get_message_typesupport_handle_function>:
 80138f8:	b510      	push	{r4, lr}
 80138fa:	4604      	mov	r4, r0
 80138fc:	6800      	ldr	r0, [r0, #0]
 80138fe:	f7ec fcef 	bl	80002e0 <strcmp>
 8013902:	2800      	cmp	r0, #0
 8013904:	bf0c      	ite	eq
 8013906:	4620      	moveq	r0, r4
 8013908:	2000      	movne	r0, #0
 801390a:	bd10      	pop	{r4, pc}

0801390c <get_service_typesupport_handle>:
 801390c:	6883      	ldr	r3, [r0, #8]
 801390e:	4718      	bx	r3

08013910 <get_service_typesupport_handle_function>:
 8013910:	b510      	push	{r4, lr}
 8013912:	4604      	mov	r4, r0
 8013914:	6800      	ldr	r0, [r0, #0]
 8013916:	f7ec fce3 	bl	80002e0 <strcmp>
 801391a:	2800      	cmp	r0, #0
 801391c:	bf0c      	ite	eq
 801391e:	4620      	moveq	r0, r4
 8013920:	2000      	movne	r0, #0
 8013922:	bd10      	pop	{r4, pc}

08013924 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013928:	6805      	ldr	r5, [r0, #0]
 801392a:	4604      	mov	r4, r0
 801392c:	460e      	mov	r6, r1
 801392e:	4628      	mov	r0, r5
 8013930:	f7ec fcd6 	bl	80002e0 <strcmp>
 8013934:	b1c8      	cbz	r0, 801396a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013936:	4b11      	ldr	r3, [pc, #68]	@ (801397c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	429d      	cmp	r5, r3
 801393c:	d112      	bne.n	8013964 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801393e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013942:	f8d8 4000 	ldr.w	r4, [r8]
 8013946:	b16c      	cbz	r4, 8013964 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013948:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801394c:	2700      	movs	r7, #0
 801394e:	3d04      	subs	r5, #4
 8013950:	4631      	mov	r1, r6
 8013952:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013956:	f7ec fcc3 	bl	80002e0 <strcmp>
 801395a:	00bb      	lsls	r3, r7, #2
 801395c:	b140      	cbz	r0, 8013970 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801395e:	3701      	adds	r7, #1
 8013960:	42bc      	cmp	r4, r7
 8013962:	d1f5      	bne.n	8013950 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013964:	2000      	movs	r0, #0
 8013966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801396a:	4620      	mov	r0, r4
 801396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013970:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013978:	58d3      	ldr	r3, [r2, r3]
 801397a:	4718      	bx	r3
 801397c:	24000e10 	.word	0x24000e10

08013980 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8013980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013984:	6805      	ldr	r5, [r0, #0]
 8013986:	4604      	mov	r4, r0
 8013988:	460e      	mov	r6, r1
 801398a:	4628      	mov	r0, r5
 801398c:	f7ec fca8 	bl	80002e0 <strcmp>
 8013990:	b1c8      	cbz	r0, 80139c6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8013992:	4b11      	ldr	r3, [pc, #68]	@ (80139d8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	429d      	cmp	r5, r3
 8013998:	d112      	bne.n	80139c0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801399a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801399e:	f8d8 4000 	ldr.w	r4, [r8]
 80139a2:	b16c      	cbz	r4, 80139c0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80139a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80139a8:	2700      	movs	r7, #0
 80139aa:	3d04      	subs	r5, #4
 80139ac:	4631      	mov	r1, r6
 80139ae:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80139b2:	f7ec fc95 	bl	80002e0 <strcmp>
 80139b6:	00bb      	lsls	r3, r7, #2
 80139b8:	b140      	cbz	r0, 80139cc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80139ba:	3701      	adds	r7, #1
 80139bc:	42bc      	cmp	r4, r7
 80139be:	d1f5      	bne.n	80139ac <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80139c0:	2000      	movs	r0, #0
 80139c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c6:	4620      	mov	r0, r4
 80139c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80139d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139d4:	58d3      	ldr	r3, [r2, r3]
 80139d6:	4718      	bx	r3
 80139d8:	24000e10 	.word	0x24000e10

080139dc <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80139dc:	f006 b8be 	b.w	8019b5c <std_msgs__msg__Header__init>

080139e0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80139e0:	f006 b8e0 	b.w	8019ba4 <std_msgs__msg__Header__fini>

080139e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80139e4:	b508      	push	{r3, lr}
 80139e6:	f7fd fb6f 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80139ea:	4b06      	ldr	r3, [pc, #24]	@ (8013a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80139ec:	4906      	ldr	r1, [pc, #24]	@ (8013a08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	60c8      	str	r0, [r1, #12]
 80139f2:	b10a      	cbz	r2, 80139f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80139f4:	4803      	ldr	r0, [pc, #12]	@ (8013a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80139f6:	bd08      	pop	{r3, pc}
 80139f8:	4a04      	ldr	r2, [pc, #16]	@ (8013a0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80139fa:	4802      	ldr	r0, [pc, #8]	@ (8013a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80139fc:	6812      	ldr	r2, [r2, #0]
 80139fe:	601a      	str	r2, [r3, #0]
 8013a00:	bd08      	pop	{r3, pc}
 8013a02:	bf00      	nop
 8013a04:	24000e90 	.word	0x24000e90
 8013a08:	24000e18 	.word	0x24000e18
 8013a0c:	24000e14 	.word	0x24000e14

08013a10 <_Header__max_serialized_size>:
 8013a10:	b500      	push	{lr}
 8013a12:	b083      	sub	sp, #12
 8013a14:	2301      	movs	r3, #1
 8013a16:	2100      	movs	r1, #0
 8013a18:	f10d 0007 	add.w	r0, sp, #7
 8013a1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013a20:	f7fd fbb0 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8013a24:	b003      	add	sp, #12
 8013a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a2a:	bf00      	nop

08013a2c <get_serialized_size_std_msgs__msg__Header>:
 8013a2c:	b570      	push	{r4, r5, r6, lr}
 8013a2e:	4605      	mov	r5, r0
 8013a30:	b168      	cbz	r0, 8013a4e <get_serialized_size_std_msgs__msg__Header+0x22>
 8013a32:	460c      	mov	r4, r1
 8013a34:	f7fd fb56 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8013a38:	2104      	movs	r1, #4
 8013a3a:	1826      	adds	r6, r4, r0
 8013a3c:	f1c4 0405 	rsb	r4, r4, #5
 8013a40:	4630      	mov	r0, r6
 8013a42:	f7fe fe53 	bl	80126ec <ucdr_alignment>
 8013a46:	68e9      	ldr	r1, [r5, #12]
 8013a48:	440c      	add	r4, r1
 8013a4a:	4404      	add	r4, r0
 8013a4c:	19a0      	adds	r0, r4, r6
 8013a4e:	bd70      	pop	{r4, r5, r6, pc}

08013a50 <_Header__cdr_deserialize>:
 8013a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a52:	460c      	mov	r4, r1
 8013a54:	b083      	sub	sp, #12
 8013a56:	b1e9      	cbz	r1, 8013a94 <_Header__cdr_deserialize+0x44>
 8013a58:	4606      	mov	r6, r0
 8013a5a:	f7fd fba7 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	4621      	mov	r1, r4
 8013a62:	4630      	mov	r0, r6
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	4798      	blx	r3
 8013a6a:	6927      	ldr	r7, [r4, #16]
 8013a6c:	ab01      	add	r3, sp, #4
 8013a6e:	68a1      	ldr	r1, [r4, #8]
 8013a70:	463a      	mov	r2, r7
 8013a72:	4630      	mov	r0, r6
 8013a74:	f000 fc86 	bl	8014384 <ucdr_deserialize_sequence_char>
 8013a78:	9b01      	ldr	r3, [sp, #4]
 8013a7a:	4605      	mov	r5, r0
 8013a7c:	b920      	cbnz	r0, 8013a88 <_Header__cdr_deserialize+0x38>
 8013a7e:	429f      	cmp	r7, r3
 8013a80:	d30c      	bcc.n	8013a9c <_Header__cdr_deserialize+0x4c>
 8013a82:	4628      	mov	r0, r5
 8013a84:	b003      	add	sp, #12
 8013a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a88:	b103      	cbz	r3, 8013a8c <_Header__cdr_deserialize+0x3c>
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	60e3      	str	r3, [r4, #12]
 8013a90:	b003      	add	sp, #12
 8013a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a94:	460d      	mov	r5, r1
 8013a96:	4628      	mov	r0, r5
 8013a98:	b003      	add	sp, #12
 8013a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a9c:	2101      	movs	r1, #1
 8013a9e:	4630      	mov	r0, r6
 8013aa0:	75b5      	strb	r5, [r6, #22]
 8013aa2:	7571      	strb	r1, [r6, #21]
 8013aa4:	60e5      	str	r5, [r4, #12]
 8013aa6:	f7fe fe39 	bl	801271c <ucdr_align_to>
 8013aaa:	4630      	mov	r0, r6
 8013aac:	9901      	ldr	r1, [sp, #4]
 8013aae:	f7fe fe6d 	bl	801278c <ucdr_advance_buffer>
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	b003      	add	sp, #12
 8013ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ab8 <_Header__cdr_serialize>:
 8013ab8:	b308      	cbz	r0, 8013afe <_Header__cdr_serialize+0x46>
 8013aba:	b570      	push	{r4, r5, r6, lr}
 8013abc:	4604      	mov	r4, r0
 8013abe:	460d      	mov	r5, r1
 8013ac0:	f7fd fb74 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	4629      	mov	r1, r5
 8013ac8:	4620      	mov	r0, r4
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	689b      	ldr	r3, [r3, #8]
 8013ace:	4798      	blx	r3
 8013ad0:	68a6      	ldr	r6, [r4, #8]
 8013ad2:	b15e      	cbz	r6, 8013aec <_Header__cdr_serialize+0x34>
 8013ad4:	4630      	mov	r0, r6
 8013ad6:	f7ec fc0d 	bl	80002f4 <strlen>
 8013ada:	4603      	mov	r3, r0
 8013adc:	1c42      	adds	r2, r0, #1
 8013ade:	4631      	mov	r1, r6
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	60e3      	str	r3, [r4, #12]
 8013ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ae8:	f000 bc3a 	b.w	8014360 <ucdr_serialize_sequence_char>
 8013aec:	4633      	mov	r3, r6
 8013aee:	4632      	mov	r2, r6
 8013af0:	4631      	mov	r1, r6
 8013af2:	4628      	mov	r0, r5
 8013af4:	60e3      	str	r3, [r4, #12]
 8013af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013afa:	f000 bc31 	b.w	8014360 <ucdr_serialize_sequence_char>
 8013afe:	4770      	bx	lr

08013b00 <_Header__get_serialized_size>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	4604      	mov	r4, r0
 8013b04:	b150      	cbz	r0, 8013b1c <_Header__get_serialized_size+0x1c>
 8013b06:	2100      	movs	r1, #0
 8013b08:	f7fd faec 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8013b0c:	2104      	movs	r1, #4
 8013b0e:	4605      	mov	r5, r0
 8013b10:	f7fe fdec 	bl	80126ec <ucdr_alignment>
 8013b14:	68e2      	ldr	r2, [r4, #12]
 8013b16:	3205      	adds	r2, #5
 8013b18:	1953      	adds	r3, r2, r5
 8013b1a:	4418      	add	r0, r3
 8013b1c:	bd38      	pop	{r3, r4, r5, pc}
 8013b1e:	bf00      	nop

08013b20 <max_serialized_size_std_msgs__msg__Header>:
 8013b20:	2301      	movs	r3, #1
 8013b22:	b510      	push	{r4, lr}
 8013b24:	7003      	strb	r3, [r0, #0]
 8013b26:	4604      	mov	r4, r0
 8013b28:	f7fd fb2c 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	7023      	strb	r3, [r4, #0]
 8013b30:	bd10      	pop	{r4, pc}
 8013b32:	bf00      	nop

08013b34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8013b34:	4800      	ldr	r0, [pc, #0]	@ (8013b38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8013b36:	4770      	bx	lr
 8013b38:	24000e9c 	.word	0x24000e9c

08013b3c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8013b3c:	4b04      	ldr	r3, [pc, #16]	@ (8013b50 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	b10a      	cbz	r2, 8013b46 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 8013b42:	4803      	ldr	r0, [pc, #12]	@ (8013b50 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8013b44:	4770      	bx	lr
 8013b46:	4a03      	ldr	r2, [pc, #12]	@ (8013b54 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 8013b48:	4801      	ldr	r0, [pc, #4]	@ (8013b50 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8013b4a:	6812      	ldr	r2, [r2, #0]
 8013b4c:	601a      	str	r2, [r3, #0]
 8013b4e:	4770      	bx	lr
 8013b50:	24000ecc 	.word	0x24000ecc
 8013b54:	24000e10 	.word	0x24000e10

08013b58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8013b58:	4a02      	ldr	r2, [pc, #8]	@ (8013b64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8013b5a:	4b03      	ldr	r3, [pc, #12]	@ (8013b68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8013b5c:	6812      	ldr	r2, [r2, #0]
 8013b5e:	601a      	str	r2, [r3, #0]
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop
 8013b64:	24000e10 	.word	0x24000e10
 8013b68:	24000ecc 	.word	0x24000ecc

08013b6c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8013b6c:	4b04      	ldr	r3, [pc, #16]	@ (8013b80 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	b10a      	cbz	r2, 8013b76 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 8013b72:	4803      	ldr	r0, [pc, #12]	@ (8013b80 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8013b74:	4770      	bx	lr
 8013b76:	4a03      	ldr	r2, [pc, #12]	@ (8013b84 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 8013b78:	4801      	ldr	r0, [pc, #4]	@ (8013b80 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8013b7a:	6812      	ldr	r2, [r2, #0]
 8013b7c:	601a      	str	r2, [r3, #0]
 8013b7e:	4770      	bx	lr
 8013b80:	24000ee0 	.word	0x24000ee0
 8013b84:	24000e10 	.word	0x24000e10

08013b88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8013b88:	4a02      	ldr	r2, [pc, #8]	@ (8013b94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8013b8a:	4b03      	ldr	r3, [pc, #12]	@ (8013b98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8013b8c:	6812      	ldr	r2, [r2, #0]
 8013b8e:	601a      	str	r2, [r3, #0]
 8013b90:	4770      	bx	lr
 8013b92:	bf00      	nop
 8013b94:	24000e10 	.word	0x24000e10
 8013b98:	24000ee0 	.word	0x24000ee0

08013b9c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8013b9c:	4b04      	ldr	r3, [pc, #16]	@ (8013bb0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	b10a      	cbz	r2, 8013ba6 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 8013ba2:	4803      	ldr	r0, [pc, #12]	@ (8013bb0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8013ba4:	4770      	bx	lr
 8013ba6:	4a03      	ldr	r2, [pc, #12]	@ (8013bb4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8013ba8:	4801      	ldr	r0, [pc, #4]	@ (8013bb0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8013baa:	6812      	ldr	r2, [r2, #0]
 8013bac:	601a      	str	r2, [r3, #0]
 8013bae:	4770      	bx	lr
 8013bb0:	24000ef4 	.word	0x24000ef4
 8013bb4:	24000e10 	.word	0x24000e10

08013bb8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8013bb8:	4a02      	ldr	r2, [pc, #8]	@ (8013bc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8013bba:	4b03      	ldr	r3, [pc, #12]	@ (8013bc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8013bbc:	6812      	ldr	r2, [r2, #0]
 8013bbe:	601a      	str	r2, [r3, #0]
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop
 8013bc4:	24000e10 	.word	0x24000e10
 8013bc8:	24000ef4 	.word	0x24000ef4

08013bcc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8013bcc:	4b04      	ldr	r3, [pc, #16]	@ (8013be0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	b10a      	cbz	r2, 8013bd6 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 8013bd2:	4803      	ldr	r0, [pc, #12]	@ (8013be0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8013bd4:	4770      	bx	lr
 8013bd6:	4a03      	ldr	r2, [pc, #12]	@ (8013be4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8013bd8:	4801      	ldr	r0, [pc, #4]	@ (8013be0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8013bda:	6812      	ldr	r2, [r2, #0]
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	4770      	bx	lr
 8013be0:	24000f08 	.word	0x24000f08
 8013be4:	24000e10 	.word	0x24000e10

08013be8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8013be8:	4a02      	ldr	r2, [pc, #8]	@ (8013bf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8013bea:	4b03      	ldr	r3, [pc, #12]	@ (8013bf8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8013bec:	6812      	ldr	r2, [r2, #0]
 8013bee:	601a      	str	r2, [r3, #0]
 8013bf0:	4770      	bx	lr
 8013bf2:	bf00      	nop
 8013bf4:	24000e10 	.word	0x24000e10
 8013bf8:	24000f08 	.word	0x24000f08

08013bfc <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8013bfc:	f005 bfde 	b.w	8019bbc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08013c00 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8013c00:	f006 b800 	b.w	8019c04 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08013c04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8013c04:	b510      	push	{r4, lr}
 8013c06:	4c08      	ldr	r4, [pc, #32]	@ (8013c28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8013c08:	f7ff feec 	bl	80139e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013c0c:	60e0      	str	r0, [r4, #12]
 8013c0e:	f006 f865 	bl	8019cdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8013c12:	4b06      	ldr	r3, [pc, #24]	@ (8013c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8013c14:	64a0      	str	r0, [r4, #72]	@ 0x48
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	b10a      	cbz	r2, 8013c1e <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8013c1a:	4804      	ldr	r0, [pc, #16]	@ (8013c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8013c1c:	bd10      	pop	{r4, pc}
 8013c1e:	4a04      	ldr	r2, [pc, #16]	@ (8013c30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 8013c20:	4802      	ldr	r0, [pc, #8]	@ (8013c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8013c22:	6812      	ldr	r2, [r2, #0]
 8013c24:	601a      	str	r2, [r3, #0]
 8013c26:	bd10      	pop	{r4, pc}
 8013c28:	24000f14 	.word	0x24000f14
 8013c2c:	24000f8c 	.word	0x24000f8c
 8013c30:	24000e14 	.word	0x24000e14

08013c34 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8013c34:	f005 bff2 	b.w	8019c1c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08013c38 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8013c38:	f006 b814 	b.w	8019c64 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08013c3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8013c3c:	b510      	push	{r4, lr}
 8013c3e:	4c08      	ldr	r4, [pc, #32]	@ (8013c60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8013c40:	f7ff fed0 	bl	80139e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013c44:	60e0      	str	r0, [r4, #12]
 8013c46:	f006 f85b 	bl	8019d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8013c4a:	4b06      	ldr	r3, [pc, #24]	@ (8013c64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8013c4c:	64a0      	str	r0, [r4, #72]	@ 0x48
 8013c4e:	681a      	ldr	r2, [r3, #0]
 8013c50:	b10a      	cbz	r2, 8013c56 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8013c52:	4804      	ldr	r0, [pc, #16]	@ (8013c64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8013c54:	bd10      	pop	{r4, pc}
 8013c56:	4a04      	ldr	r2, [pc, #16]	@ (8013c68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8013c58:	4802      	ldr	r0, [pc, #8]	@ (8013c64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8013c5a:	6812      	ldr	r2, [r2, #0]
 8013c5c:	601a      	str	r2, [r3, #0]
 8013c5e:	bd10      	pop	{r4, pc}
 8013c60:	24000f98 	.word	0x24000f98
 8013c64:	24001010 	.word	0x24001010
 8013c68:	24000e14 	.word	0x24000e14

08013c6c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 8013c6c:	f006 b806 	b.w	8019c7c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08013c70 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8013c70:	f006 b816 	b.w	8019ca0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08013c74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8013c74:	b508      	push	{r3, lr}
 8013c76:	f7fd fa27 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013c7a:	4b06      	ldr	r3, [pc, #24]	@ (8013c94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8013c7c:	4906      	ldr	r1, [pc, #24]	@ (8013c98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	60c8      	str	r0, [r1, #12]
 8013c82:	b10a      	cbz	r2, 8013c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8013c84:	4803      	ldr	r0, [pc, #12]	@ (8013c94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8013c86:	bd08      	pop	{r3, pc}
 8013c88:	4a04      	ldr	r2, [pc, #16]	@ (8013c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 8013c8a:	4802      	ldr	r0, [pc, #8]	@ (8013c94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8013c8c:	6812      	ldr	r2, [r2, #0]
 8013c8e:	601a      	str	r2, [r3, #0]
 8013c90:	bd08      	pop	{r3, pc}
 8013c92:	bf00      	nop
 8013c94:	24001094 	.word	0x24001094
 8013c98:	2400101c 	.word	0x2400101c
 8013c9c:	24000e14 	.word	0x24000e14

08013ca0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8013ca0:	f006 b802 	b.w	8019ca8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08013ca4 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8013ca4:	f006 b812 	b.w	8019ccc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08013ca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8013ca8:	b508      	push	{r3, lr}
 8013caa:	f7fd fa0d 	bl	80110c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013cae:	4b06      	ldr	r3, [pc, #24]	@ (8013cc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8013cb0:	4906      	ldr	r1, [pc, #24]	@ (8013ccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	60c8      	str	r0, [r1, #12]
 8013cb6:	b10a      	cbz	r2, 8013cbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8013cb8:	4803      	ldr	r0, [pc, #12]	@ (8013cc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8013cba:	bd08      	pop	{r3, pc}
 8013cbc:	4a04      	ldr	r2, [pc, #16]	@ (8013cd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8013cbe:	4802      	ldr	r0, [pc, #8]	@ (8013cc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8013cc0:	6812      	ldr	r2, [r2, #0]
 8013cc2:	601a      	str	r2, [r3, #0]
 8013cc4:	bd08      	pop	{r3, pc}
 8013cc6:	bf00      	nop
 8013cc8:	24001118 	.word	0x24001118
 8013ccc:	240010a0 	.word	0x240010a0
 8013cd0:	24000e14 	.word	0x24000e14

08013cd4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8013cd4:	b538      	push	{r3, r4, r5, lr}
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	b150      	cbz	r0, 8013cf0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8013cda:	460d      	mov	r5, r1
 8013cdc:	f7ff fea6 	bl	8013a2c <get_serialized_size_std_msgs__msg__Header>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	f104 0018 	add.w	r0, r4, #24
 8013ce6:	461c      	mov	r4, r3
 8013ce8:	18e9      	adds	r1, r5, r3
 8013cea:	f006 f817 	bl	8019d1c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8013cee:	4420      	add	r0, r4
 8013cf0:	bd38      	pop	{r3, r4, r5, pc}
 8013cf2:	bf00      	nop

08013cf4 <_ActuationCommandStamped__cdr_deserialize>:
 8013cf4:	b570      	push	{r4, r5, r6, lr}
 8013cf6:	460c      	mov	r4, r1
 8013cf8:	b199      	cbz	r1, 8013d22 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	f7ff ff1a 	bl	8013b34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013d00:	4603      	mov	r3, r0
 8013d02:	4621      	mov	r1, r4
 8013d04:	4628      	mov	r0, r5
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	4798      	blx	r3
 8013d0c:	f006 f88e 	bl	8019e2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8013d10:	4603      	mov	r3, r0
 8013d12:	f104 0118 	add.w	r1, r4, #24
 8013d16:	4628      	mov	r0, r5
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d1e:	68db      	ldr	r3, [r3, #12]
 8013d20:	4718      	bx	r3
 8013d22:	4608      	mov	r0, r1
 8013d24:	bd70      	pop	{r4, r5, r6, pc}
 8013d26:	bf00      	nop

08013d28 <_ActuationCommandStamped__cdr_serialize>:
 8013d28:	b510      	push	{r4, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	9101      	str	r1, [sp, #4]
 8013d2e:	b1a0      	cbz	r0, 8013d5a <_ActuationCommandStamped__cdr_serialize+0x32>
 8013d30:	4604      	mov	r4, r0
 8013d32:	f7ff feff 	bl	8013b34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013d36:	4603      	mov	r3, r0
 8013d38:	9901      	ldr	r1, [sp, #4]
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	685b      	ldr	r3, [r3, #4]
 8013d3e:	689b      	ldr	r3, [r3, #8]
 8013d40:	4798      	blx	r3
 8013d42:	f006 f873 	bl	8019e2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8013d46:	4603      	mov	r3, r0
 8013d48:	9901      	ldr	r1, [sp, #4]
 8013d4a:	f104 0018 	add.w	r0, r4, #24
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	689b      	ldr	r3, [r3, #8]
 8013d52:	b002      	add	sp, #8
 8013d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d58:	4718      	bx	r3
 8013d5a:	b002      	add	sp, #8
 8013d5c:	bd10      	pop	{r4, pc}
 8013d5e:	bf00      	nop

08013d60 <_ActuationCommandStamped__get_serialized_size>:
 8013d60:	b510      	push	{r4, lr}
 8013d62:	4604      	mov	r4, r0
 8013d64:	b148      	cbz	r0, 8013d7a <_ActuationCommandStamped__get_serialized_size+0x1a>
 8013d66:	2100      	movs	r1, #0
 8013d68:	f7ff fe60 	bl	8013a2c <get_serialized_size_std_msgs__msg__Header>
 8013d6c:	4601      	mov	r1, r0
 8013d6e:	f104 0018 	add.w	r0, r4, #24
 8013d72:	460c      	mov	r4, r1
 8013d74:	f005 ffd2 	bl	8019d1c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8013d78:	4420      	add	r0, r4
 8013d7a:	bd10      	pop	{r4, pc}

08013d7c <_ActuationCommandStamped__max_serialized_size>:
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	b082      	sub	sp, #8
 8013d80:	2301      	movs	r3, #1
 8013d82:	2100      	movs	r1, #0
 8013d84:	f10d 0007 	add.w	r0, sp, #7
 8013d88:	f88d 3007 	strb.w	r3, [sp, #7]
 8013d8c:	f7ff fec8 	bl	8013b20 <max_serialized_size_std_msgs__msg__Header>
 8013d90:	4604      	mov	r4, r0
 8013d92:	f10d 0007 	add.w	r0, sp, #7
 8013d96:	4621      	mov	r1, r4
 8013d98:	f006 f82e 	bl	8019df8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8013d9c:	4420      	add	r0, r4
 8013d9e:	b002      	add	sp, #8
 8013da0:	bd10      	pop	{r4, pc}
 8013da2:	bf00      	nop

08013da4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8013da4:	4800      	ldr	r0, [pc, #0]	@ (8013da8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8013da6:	4770      	bx	lr
 8013da8:	24001124 	.word	0x24001124

08013dac <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8013dac:	b538      	push	{r3, r4, r5, lr}
 8013dae:	4604      	mov	r4, r0
 8013db0:	b150      	cbz	r0, 8013dc8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8013db2:	460d      	mov	r5, r1
 8013db4:	f7ff fe3a 	bl	8013a2c <get_serialized_size_std_msgs__msg__Header>
 8013db8:	4603      	mov	r3, r0
 8013dba:	f104 0018 	add.w	r0, r4, #24
 8013dbe:	461c      	mov	r4, r3
 8013dc0:	18e9      	adds	r1, r5, r3
 8013dc2:	f006 f837 	bl	8019e34 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8013dc6:	4420      	add	r0, r4
 8013dc8:	bd38      	pop	{r3, r4, r5, pc}
 8013dca:	bf00      	nop

08013dcc <_ActuationStatusStamped__cdr_deserialize>:
 8013dcc:	b570      	push	{r4, r5, r6, lr}
 8013dce:	460c      	mov	r4, r1
 8013dd0:	b199      	cbz	r1, 8013dfa <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8013dd2:	4605      	mov	r5, r0
 8013dd4:	f7ff feae 	bl	8013b34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	4621      	mov	r1, r4
 8013ddc:	4628      	mov	r0, r5
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	68db      	ldr	r3, [r3, #12]
 8013de2:	4798      	blx	r3
 8013de4:	f006 f8ae 	bl	8019f44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8013de8:	4603      	mov	r3, r0
 8013dea:	f104 0118 	add.w	r1, r4, #24
 8013dee:	4628      	mov	r0, r5
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	4718      	bx	r3
 8013dfa:	4608      	mov	r0, r1
 8013dfc:	bd70      	pop	{r4, r5, r6, pc}
 8013dfe:	bf00      	nop

08013e00 <_ActuationStatusStamped__cdr_serialize>:
 8013e00:	b510      	push	{r4, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	9101      	str	r1, [sp, #4]
 8013e06:	b1a0      	cbz	r0, 8013e32 <_ActuationStatusStamped__cdr_serialize+0x32>
 8013e08:	4604      	mov	r4, r0
 8013e0a:	f7ff fe93 	bl	8013b34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	9901      	ldr	r1, [sp, #4]
 8013e12:	4620      	mov	r0, r4
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	4798      	blx	r3
 8013e1a:	f006 f893 	bl	8019f44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	9901      	ldr	r1, [sp, #4]
 8013e22:	f104 0018 	add.w	r0, r4, #24
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	689b      	ldr	r3, [r3, #8]
 8013e2a:	b002      	add	sp, #8
 8013e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e30:	4718      	bx	r3
 8013e32:	b002      	add	sp, #8
 8013e34:	bd10      	pop	{r4, pc}
 8013e36:	bf00      	nop

08013e38 <_ActuationStatusStamped__get_serialized_size>:
 8013e38:	b510      	push	{r4, lr}
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	b148      	cbz	r0, 8013e52 <_ActuationStatusStamped__get_serialized_size+0x1a>
 8013e3e:	2100      	movs	r1, #0
 8013e40:	f7ff fdf4 	bl	8013a2c <get_serialized_size_std_msgs__msg__Header>
 8013e44:	4601      	mov	r1, r0
 8013e46:	f104 0018 	add.w	r0, r4, #24
 8013e4a:	460c      	mov	r4, r1
 8013e4c:	f005 fff2 	bl	8019e34 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8013e50:	4420      	add	r0, r4
 8013e52:	bd10      	pop	{r4, pc}

08013e54 <_ActuationStatusStamped__max_serialized_size>:
 8013e54:	b510      	push	{r4, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	2301      	movs	r3, #1
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	f10d 0007 	add.w	r0, sp, #7
 8013e60:	f88d 3007 	strb.w	r3, [sp, #7]
 8013e64:	f7ff fe5c 	bl	8013b20 <max_serialized_size_std_msgs__msg__Header>
 8013e68:	4604      	mov	r4, r0
 8013e6a:	f10d 0007 	add.w	r0, sp, #7
 8013e6e:	4621      	mov	r1, r4
 8013e70:	f006 f84e 	bl	8019f10 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8013e74:	4420      	add	r0, r4
 8013e76:	b002      	add	sp, #8
 8013e78:	bd10      	pop	{r4, pc}
 8013e7a:	bf00      	nop

08013e7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8013e7c:	4800      	ldr	r0, [pc, #0]	@ (8013e80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8013e7e:	4770      	bx	lr
 8013e80:	2400114c 	.word	0x2400114c

08013e84 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8013e84:	b538      	push	{r3, r4, r5, lr}
 8013e86:	b158      	cbz	r0, 8013ea0 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8013e88:	460d      	mov	r5, r1
 8013e8a:	f7fd f92b 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8013e8e:	2104      	movs	r1, #4
 8013e90:	182c      	adds	r4, r5, r0
 8013e92:	f1c5 0504 	rsb	r5, r5, #4
 8013e96:	4620      	mov	r0, r4
 8013e98:	f7fe fc28 	bl	80126ec <ucdr_alignment>
 8013e9c:	4428      	add	r0, r5
 8013e9e:	4420      	add	r0, r4
 8013ea0:	bd38      	pop	{r3, r4, r5, pc}
 8013ea2:	bf00      	nop

08013ea4 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8013ea4:	b538      	push	{r3, r4, r5, lr}
 8013ea6:	460c      	mov	r4, r1
 8013ea8:	b179      	cbz	r1, 8013eca <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8013eaa:	4605      	mov	r5, r0
 8013eac:	f7fd f97e 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	4628      	mov	r0, r5
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	4798      	blx	r3
 8013ebc:	f104 0108 	add.w	r1, r4, #8
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ec6:	f7fe b993 	b.w	80121f0 <ucdr_deserialize_float>
 8013eca:	4608      	mov	r0, r1
 8013ecc:	bd38      	pop	{r3, r4, r5, pc}
 8013ece:	bf00      	nop

08013ed0 <_SteeringWheelStatusStamped__cdr_serialize>:
 8013ed0:	b188      	cbz	r0, 8013ef6 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8013ed2:	b538      	push	{r3, r4, r5, lr}
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	460d      	mov	r5, r1
 8013ed8:	f7fd f968 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013edc:	4603      	mov	r3, r0
 8013ede:	4629      	mov	r1, r5
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	689b      	ldr	r3, [r3, #8]
 8013ee6:	4798      	blx	r3
 8013ee8:	ed94 0a02 	vldr	s0, [r4, #8]
 8013eec:	4628      	mov	r0, r5
 8013eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ef2:	f7fe b8e5 	b.w	80120c0 <ucdr_serialize_float>
 8013ef6:	4770      	bx	lr

08013ef8 <_SteeringWheelStatusStamped__get_serialized_size>:
 8013ef8:	b150      	cbz	r0, 8013f10 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8013efa:	2100      	movs	r1, #0
 8013efc:	b510      	push	{r4, lr}
 8013efe:	f7fd f8f1 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8013f02:	4604      	mov	r4, r0
 8013f04:	2104      	movs	r1, #4
 8013f06:	f7fe fbf1 	bl	80126ec <ucdr_alignment>
 8013f0a:	4420      	add	r0, r4
 8013f0c:	3004      	adds	r0, #4
 8013f0e:	bd10      	pop	{r4, pc}
 8013f10:	4770      	bx	lr
 8013f12:	bf00      	nop

08013f14 <_SteeringWheelStatusStamped__max_serialized_size>:
 8013f14:	b510      	push	{r4, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	2301      	movs	r3, #1
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	f10d 0007 	add.w	r0, sp, #7
 8013f20:	f88d 3007 	strb.w	r3, [sp, #7]
 8013f24:	f7fd f92e 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8013f28:	4604      	mov	r4, r0
 8013f2a:	2104      	movs	r1, #4
 8013f2c:	f7fe fbde 	bl	80126ec <ucdr_alignment>
 8013f30:	4420      	add	r0, r4
 8013f32:	3004      	adds	r0, #4
 8013f34:	b002      	add	sp, #8
 8013f36:	bd10      	pop	{r4, pc}

08013f38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8013f38:	4800      	ldr	r0, [pc, #0]	@ (8013f3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8013f3a:	4770      	bx	lr
 8013f3c:	24001174 	.word	0x24001174

08013f40 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8013f40:	b538      	push	{r3, r4, r5, lr}
 8013f42:	b158      	cbz	r0, 8013f5c <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8013f44:	460d      	mov	r5, r1
 8013f46:	f7fd f8cd 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8013f4a:	2101      	movs	r1, #1
 8013f4c:	182c      	adds	r4, r5, r0
 8013f4e:	f1c5 0501 	rsb	r5, r5, #1
 8013f52:	4620      	mov	r0, r4
 8013f54:	f7fe fbca 	bl	80126ec <ucdr_alignment>
 8013f58:	4428      	add	r0, r5
 8013f5a:	4420      	add	r0, r4
 8013f5c:	bd38      	pop	{r3, r4, r5, pc}
 8013f5e:	bf00      	nop

08013f60 <_VehicleEmergencyStamped__cdr_deserialize>:
 8013f60:	b538      	push	{r3, r4, r5, lr}
 8013f62:	460c      	mov	r4, r1
 8013f64:	b179      	cbz	r1, 8013f86 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8013f66:	4605      	mov	r5, r0
 8013f68:	f7fd f920 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	4621      	mov	r1, r4
 8013f70:	4628      	mov	r0, r5
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	4798      	blx	r3
 8013f78:	f104 0108 	add.w	r1, r4, #8
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f82:	f7fd b92d 	b.w	80111e0 <ucdr_deserialize_bool>
 8013f86:	4608      	mov	r0, r1
 8013f88:	bd38      	pop	{r3, r4, r5, pc}
 8013f8a:	bf00      	nop

08013f8c <_VehicleEmergencyStamped__cdr_serialize>:
 8013f8c:	b180      	cbz	r0, 8013fb0 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8013f8e:	b538      	push	{r3, r4, r5, lr}
 8013f90:	4604      	mov	r4, r0
 8013f92:	460d      	mov	r5, r1
 8013f94:	f7fd f90a 	bl	80111ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	4629      	mov	r1, r5
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	689b      	ldr	r3, [r3, #8]
 8013fa2:	4798      	blx	r3
 8013fa4:	7a21      	ldrb	r1, [r4, #8]
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fac:	f7fd b902 	b.w	80111b4 <ucdr_serialize_bool>
 8013fb0:	4770      	bx	lr
 8013fb2:	bf00      	nop

08013fb4 <_VehicleEmergencyStamped__get_serialized_size>:
 8013fb4:	b150      	cbz	r0, 8013fcc <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8013fb6:	2100      	movs	r1, #0
 8013fb8:	b510      	push	{r4, lr}
 8013fba:	f7fd f893 	bl	80110e4 <get_serialized_size_builtin_interfaces__msg__Time>
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	2101      	movs	r1, #1
 8013fc2:	f7fe fb93 	bl	80126ec <ucdr_alignment>
 8013fc6:	4420      	add	r0, r4
 8013fc8:	3001      	adds	r0, #1
 8013fca:	bd10      	pop	{r4, pc}
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop

08013fd0 <_VehicleEmergencyStamped__max_serialized_size>:
 8013fd0:	b510      	push	{r4, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	2401      	movs	r4, #1
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	f10d 0007 	add.w	r0, sp, #7
 8013fdc:	f88d 4007 	strb.w	r4, [sp, #7]
 8013fe0:	f7fd f8d0 	bl	8011184 <max_serialized_size_builtin_interfaces__msg__Time>
 8013fe4:	4621      	mov	r1, r4
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	f7fe fb80 	bl	80126ec <ucdr_alignment>
 8013fec:	4420      	add	r0, r4
 8013fee:	3001      	adds	r0, #1
 8013ff0:	b002      	add	sp, #8
 8013ff2:	bd10      	pop	{r4, pc}

08013ff4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8013ff4:	4800      	ldr	r0, [pc, #0]	@ (8013ff8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8013ff6:	4770      	bx	lr
 8013ff8:	2400119c 	.word	0x2400119c

08013ffc <autoware_control_msgs__msg__Control__init>:
 8013ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014000:	4605      	mov	r5, r0
 8014002:	b3c0      	cbz	r0, 8014076 <autoware_control_msgs__msg__Control__init+0x7a>
 8014004:	f000 f9a6 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8014008:	4604      	mov	r4, r0
 801400a:	b310      	cbz	r0, 8014052 <autoware_control_msgs__msg__Control__init+0x56>
 801400c:	f105 0608 	add.w	r6, r5, #8
 8014010:	4630      	mov	r0, r6
 8014012:	f000 f99f 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8014016:	4604      	mov	r4, r0
 8014018:	2800      	cmp	r0, #0
 801401a:	d040      	beq.n	801409e <autoware_control_msgs__msg__Control__init+0xa2>
 801401c:	f105 0710 	add.w	r7, r5, #16
 8014020:	4638      	mov	r0, r7
 8014022:	f000 f855 	bl	80140d0 <autoware_control_msgs__msg__Lateral__init>
 8014026:	4604      	mov	r4, r0
 8014028:	b348      	cbz	r0, 801407e <autoware_control_msgs__msg__Control__init+0x82>
 801402a:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 801402e:	4640      	mov	r0, r8
 8014030:	f000 f87e 	bl	8014130 <autoware_control_msgs__msg__Longitudinal__init>
 8014034:	4604      	mov	r4, r0
 8014036:	b9d8      	cbnz	r0, 8014070 <autoware_control_msgs__msg__Control__init+0x74>
 8014038:	4628      	mov	r0, r5
 801403a:	f000 f98f 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801403e:	4630      	mov	r0, r6
 8014040:	f000 f98c 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014044:	4638      	mov	r0, r7
 8014046:	f000 f867 	bl	8014118 <autoware_control_msgs__msg__Lateral__fini>
 801404a:	4640      	mov	r0, r8
 801404c:	f000 f894 	bl	8014178 <autoware_control_msgs__msg__Longitudinal__fini>
 8014050:	e00e      	b.n	8014070 <autoware_control_msgs__msg__Control__init+0x74>
 8014052:	4628      	mov	r0, r5
 8014054:	f000 f982 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014058:	f105 0008 	add.w	r0, r5, #8
 801405c:	f000 f97e 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014060:	f105 0010 	add.w	r0, r5, #16
 8014064:	f000 f858 	bl	8014118 <autoware_control_msgs__msg__Lateral__fini>
 8014068:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 801406c:	f000 f884 	bl	8014178 <autoware_control_msgs__msg__Longitudinal__fini>
 8014070:	4620      	mov	r0, r4
 8014072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014076:	4604      	mov	r4, r0
 8014078:	4620      	mov	r0, r4
 801407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801407e:	4628      	mov	r0, r5
 8014080:	f000 f96c 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014084:	4630      	mov	r0, r6
 8014086:	f000 f969 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801408a:	4638      	mov	r0, r7
 801408c:	f000 f844 	bl	8014118 <autoware_control_msgs__msg__Lateral__fini>
 8014090:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8014094:	f000 f870 	bl	8014178 <autoware_control_msgs__msg__Longitudinal__fini>
 8014098:	4620      	mov	r0, r4
 801409a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801409e:	4628      	mov	r0, r5
 80140a0:	f000 f95c 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80140a4:	4630      	mov	r0, r6
 80140a6:	e7d9      	b.n	801405c <autoware_control_msgs__msg__Control__init+0x60>

080140a8 <autoware_control_msgs__msg__Control__fini>:
 80140a8:	b188      	cbz	r0, 80140ce <autoware_control_msgs__msg__Control__fini+0x26>
 80140aa:	b510      	push	{r4, lr}
 80140ac:	4604      	mov	r4, r0
 80140ae:	f000 f955 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80140b2:	f104 0008 	add.w	r0, r4, #8
 80140b6:	f000 f951 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80140ba:	f104 0010 	add.w	r0, r4, #16
 80140be:	f000 f82b 	bl	8014118 <autoware_control_msgs__msg__Lateral__fini>
 80140c2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80140c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ca:	f000 b855 	b.w	8014178 <autoware_control_msgs__msg__Longitudinal__fini>
 80140ce:	4770      	bx	lr

080140d0 <autoware_control_msgs__msg__Lateral__init>:
 80140d0:	b570      	push	{r4, r5, r6, lr}
 80140d2:	4605      	mov	r5, r0
 80140d4:	b1a8      	cbz	r0, 8014102 <autoware_control_msgs__msg__Lateral__init+0x32>
 80140d6:	f000 f93d 	bl	8014354 <builtin_interfaces__msg__Time__init>
 80140da:	4604      	mov	r4, r0
 80140dc:	b140      	cbz	r0, 80140f0 <autoware_control_msgs__msg__Lateral__init+0x20>
 80140de:	f105 0608 	add.w	r6, r5, #8
 80140e2:	4630      	mov	r0, r6
 80140e4:	f000 f936 	bl	8014354 <builtin_interfaces__msg__Time__init>
 80140e8:	4604      	mov	r4, r0
 80140ea:	b168      	cbz	r0, 8014108 <autoware_control_msgs__msg__Lateral__init+0x38>
 80140ec:	4620      	mov	r0, r4
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	4628      	mov	r0, r5
 80140f2:	f000 f933 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80140f6:	f105 0008 	add.w	r0, r5, #8
 80140fa:	f000 f92f 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80140fe:	4620      	mov	r0, r4
 8014100:	bd70      	pop	{r4, r5, r6, pc}
 8014102:	4604      	mov	r4, r0
 8014104:	4620      	mov	r0, r4
 8014106:	bd70      	pop	{r4, r5, r6, pc}
 8014108:	4628      	mov	r0, r5
 801410a:	f000 f927 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801410e:	4630      	mov	r0, r6
 8014110:	f000 f924 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014114:	e7ea      	b.n	80140ec <autoware_control_msgs__msg__Lateral__init+0x1c>
 8014116:	bf00      	nop

08014118 <autoware_control_msgs__msg__Lateral__fini>:
 8014118:	b148      	cbz	r0, 801412e <autoware_control_msgs__msg__Lateral__fini+0x16>
 801411a:	b510      	push	{r4, lr}
 801411c:	4604      	mov	r4, r0
 801411e:	f000 f91d 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014122:	f104 0008 	add.w	r0, r4, #8
 8014126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801412a:	f000 b917 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 801412e:	4770      	bx	lr

08014130 <autoware_control_msgs__msg__Longitudinal__init>:
 8014130:	b570      	push	{r4, r5, r6, lr}
 8014132:	4605      	mov	r5, r0
 8014134:	b1a8      	cbz	r0, 8014162 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8014136:	f000 f90d 	bl	8014354 <builtin_interfaces__msg__Time__init>
 801413a:	4604      	mov	r4, r0
 801413c:	b140      	cbz	r0, 8014150 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 801413e:	f105 0608 	add.w	r6, r5, #8
 8014142:	4630      	mov	r0, r6
 8014144:	f000 f906 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8014148:	4604      	mov	r4, r0
 801414a:	b168      	cbz	r0, 8014168 <autoware_control_msgs__msg__Longitudinal__init+0x38>
 801414c:	4620      	mov	r0, r4
 801414e:	bd70      	pop	{r4, r5, r6, pc}
 8014150:	4628      	mov	r0, r5
 8014152:	f000 f903 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014156:	f105 0008 	add.w	r0, r5, #8
 801415a:	f000 f8ff 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801415e:	4620      	mov	r0, r4
 8014160:	bd70      	pop	{r4, r5, r6, pc}
 8014162:	4604      	mov	r4, r0
 8014164:	4620      	mov	r0, r4
 8014166:	bd70      	pop	{r4, r5, r6, pc}
 8014168:	4628      	mov	r0, r5
 801416a:	f000 f8f7 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801416e:	4630      	mov	r0, r6
 8014170:	f000 f8f4 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014174:	e7ea      	b.n	801414c <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8014176:	bf00      	nop

08014178 <autoware_control_msgs__msg__Longitudinal__fini>:
 8014178:	b148      	cbz	r0, 801418e <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 801417a:	b510      	push	{r4, lr}
 801417c:	4604      	mov	r4, r0
 801417e:	f000 f8ed 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014182:	f104 0008 	add.w	r0, r4, #8
 8014186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801418a:	f000 b8e7 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 801418e:	4770      	bx	lr

08014190 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8014190:	b538      	push	{r3, r4, r5, lr}
 8014192:	4604      	mov	r4, r0
 8014194:	b128      	cbz	r0, 80141a2 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8014196:	f000 f8dd 	bl	8014354 <builtin_interfaces__msg__Time__init>
 801419a:	4605      	mov	r5, r0
 801419c:	b120      	cbz	r0, 80141a8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 801419e:	4628      	mov	r0, r5
 80141a0:	bd38      	pop	{r3, r4, r5, pc}
 80141a2:	4605      	mov	r5, r0
 80141a4:	4628      	mov	r0, r5
 80141a6:	bd38      	pop	{r3, r4, r5, pc}
 80141a8:	4620      	mov	r0, r4
 80141aa:	f000 f8d7 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80141ae:	4628      	mov	r0, r5
 80141b0:	bd38      	pop	{r3, r4, r5, pc}
 80141b2:	bf00      	nop

080141b4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 80141b4:	b108      	cbz	r0, 80141ba <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 80141b6:	f000 b8d1 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 80141ba:	4770      	bx	lr

080141bc <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 80141bc:	3800      	subs	r0, #0
 80141be:	bf18      	it	ne
 80141c0:	2001      	movne	r0, #1
 80141c2:	4770      	bx	lr

080141c4 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop

080141c8 <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 80141c8:	b538      	push	{r3, r4, r5, lr}
 80141ca:	4604      	mov	r4, r0
 80141cc:	b128      	cbz	r0, 80141da <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 80141ce:	f000 f8c1 	bl	8014354 <builtin_interfaces__msg__Time__init>
 80141d2:	4605      	mov	r5, r0
 80141d4:	b120      	cbz	r0, 80141e0 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 80141d6:	4628      	mov	r0, r5
 80141d8:	bd38      	pop	{r3, r4, r5, pc}
 80141da:	4605      	mov	r5, r0
 80141dc:	4628      	mov	r0, r5
 80141de:	bd38      	pop	{r3, r4, r5, pc}
 80141e0:	4620      	mov	r0, r4
 80141e2:	f000 f8bb 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80141e6:	4628      	mov	r0, r5
 80141e8:	bd38      	pop	{r3, r4, r5, pc}
 80141ea:	bf00      	nop

080141ec <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 80141ec:	b108      	cbz	r0, 80141f2 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 80141ee:	f000 b8b5 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 80141f2:	4770      	bx	lr

080141f4 <autoware_vehicle_msgs__msg__GearCommand__init>:
 80141f4:	b538      	push	{r3, r4, r5, lr}
 80141f6:	4604      	mov	r4, r0
 80141f8:	b128      	cbz	r0, 8014206 <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 80141fa:	f000 f8ab 	bl	8014354 <builtin_interfaces__msg__Time__init>
 80141fe:	4605      	mov	r5, r0
 8014200:	b120      	cbz	r0, 801420c <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8014202:	4628      	mov	r0, r5
 8014204:	bd38      	pop	{r3, r4, r5, pc}
 8014206:	4605      	mov	r5, r0
 8014208:	4628      	mov	r0, r5
 801420a:	bd38      	pop	{r3, r4, r5, pc}
 801420c:	4620      	mov	r0, r4
 801420e:	f000 f8a5 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014212:	4628      	mov	r0, r5
 8014214:	bd38      	pop	{r3, r4, r5, pc}
 8014216:	bf00      	nop

08014218 <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8014218:	b108      	cbz	r0, 801421e <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 801421a:	f000 b89f 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 801421e:	4770      	bx	lr

08014220 <autoware_vehicle_msgs__msg__GearReport__init>:
 8014220:	b538      	push	{r3, r4, r5, lr}
 8014222:	4604      	mov	r4, r0
 8014224:	b128      	cbz	r0, 8014232 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8014226:	f000 f895 	bl	8014354 <builtin_interfaces__msg__Time__init>
 801422a:	4605      	mov	r5, r0
 801422c:	b120      	cbz	r0, 8014238 <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 801422e:	4628      	mov	r0, r5
 8014230:	bd38      	pop	{r3, r4, r5, pc}
 8014232:	4605      	mov	r5, r0
 8014234:	4628      	mov	r0, r5
 8014236:	bd38      	pop	{r3, r4, r5, pc}
 8014238:	4620      	mov	r0, r4
 801423a:	f000 f88f 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801423e:	4628      	mov	r0, r5
 8014240:	bd38      	pop	{r3, r4, r5, pc}
 8014242:	bf00      	nop

08014244 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8014244:	b108      	cbz	r0, 801424a <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 8014246:	f000 b889 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 801424a:	4770      	bx	lr

0801424c <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 801424c:	b538      	push	{r3, r4, r5, lr}
 801424e:	4604      	mov	r4, r0
 8014250:	b128      	cbz	r0, 801425e <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8014252:	f000 f87f 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8014256:	4605      	mov	r5, r0
 8014258:	b120      	cbz	r0, 8014264 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 801425a:	4628      	mov	r0, r5
 801425c:	bd38      	pop	{r3, r4, r5, pc}
 801425e:	4605      	mov	r5, r0
 8014260:	4628      	mov	r0, r5
 8014262:	bd38      	pop	{r3, r4, r5, pc}
 8014264:	4620      	mov	r0, r4
 8014266:	f000 f879 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801426a:	4628      	mov	r0, r5
 801426c:	bd38      	pop	{r3, r4, r5, pc}
 801426e:	bf00      	nop

08014270 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8014270:	b108      	cbz	r0, 8014276 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8014272:	f000 b873 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 8014276:	4770      	bx	lr

08014278 <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8014278:	b538      	push	{r3, r4, r5, lr}
 801427a:	4604      	mov	r4, r0
 801427c:	b128      	cbz	r0, 801428a <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 801427e:	f000 f869 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8014282:	4605      	mov	r5, r0
 8014284:	b120      	cbz	r0, 8014290 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8014286:	4628      	mov	r0, r5
 8014288:	bd38      	pop	{r3, r4, r5, pc}
 801428a:	4605      	mov	r5, r0
 801428c:	4628      	mov	r0, r5
 801428e:	bd38      	pop	{r3, r4, r5, pc}
 8014290:	4620      	mov	r0, r4
 8014292:	f000 f863 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8014296:	4628      	mov	r0, r5
 8014298:	bd38      	pop	{r3, r4, r5, pc}
 801429a:	bf00      	nop

0801429c <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 801429c:	b108      	cbz	r0, 80142a2 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 801429e:	f000 b85d 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 80142a2:	4770      	bx	lr

080142a4 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 80142a4:	b538      	push	{r3, r4, r5, lr}
 80142a6:	4604      	mov	r4, r0
 80142a8:	b128      	cbz	r0, 80142b6 <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 80142aa:	f000 f853 	bl	8014354 <builtin_interfaces__msg__Time__init>
 80142ae:	4605      	mov	r5, r0
 80142b0:	b120      	cbz	r0, 80142bc <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 80142b2:	4628      	mov	r0, r5
 80142b4:	bd38      	pop	{r3, r4, r5, pc}
 80142b6:	4605      	mov	r5, r0
 80142b8:	4628      	mov	r0, r5
 80142ba:	bd38      	pop	{r3, r4, r5, pc}
 80142bc:	4620      	mov	r0, r4
 80142be:	f000 f84d 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80142c2:	4628      	mov	r0, r5
 80142c4:	bd38      	pop	{r3, r4, r5, pc}
 80142c6:	bf00      	nop

080142c8 <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 80142c8:	b108      	cbz	r0, 80142ce <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 80142ca:	f000 b847 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 80142ce:	4770      	bx	lr

080142d0 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	4604      	mov	r4, r0
 80142d4:	b128      	cbz	r0, 80142e2 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 80142d6:	f000 f83d 	bl	8014354 <builtin_interfaces__msg__Time__init>
 80142da:	4605      	mov	r5, r0
 80142dc:	b120      	cbz	r0, 80142e8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 80142de:	4628      	mov	r0, r5
 80142e0:	bd38      	pop	{r3, r4, r5, pc}
 80142e2:	4605      	mov	r5, r0
 80142e4:	4628      	mov	r0, r5
 80142e6:	bd38      	pop	{r3, r4, r5, pc}
 80142e8:	4620      	mov	r0, r4
 80142ea:	f000 f837 	bl	801435c <builtin_interfaces__msg__Time__fini>
 80142ee:	4628      	mov	r0, r5
 80142f0:	bd38      	pop	{r3, r4, r5, pc}
 80142f2:	bf00      	nop

080142f4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 80142f4:	b108      	cbz	r0, 80142fa <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 80142f6:	f000 b831 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 80142fa:	4770      	bx	lr

080142fc <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 80142fc:	b538      	push	{r3, r4, r5, lr}
 80142fe:	4604      	mov	r4, r0
 8014300:	b128      	cbz	r0, 801430e <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8014302:	f000 f827 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8014306:	4605      	mov	r5, r0
 8014308:	b120      	cbz	r0, 8014314 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 801430a:	4628      	mov	r0, r5
 801430c:	bd38      	pop	{r3, r4, r5, pc}
 801430e:	4605      	mov	r5, r0
 8014310:	4628      	mov	r0, r5
 8014312:	bd38      	pop	{r3, r4, r5, pc}
 8014314:	4620      	mov	r0, r4
 8014316:	f000 f821 	bl	801435c <builtin_interfaces__msg__Time__fini>
 801431a:	4628      	mov	r0, r5
 801431c:	bd38      	pop	{r3, r4, r5, pc}
 801431e:	bf00      	nop

08014320 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8014320:	b108      	cbz	r0, 8014326 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8014322:	f000 b81b 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 8014326:	4770      	bx	lr

08014328 <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8014328:	b538      	push	{r3, r4, r5, lr}
 801432a:	4604      	mov	r4, r0
 801432c:	b128      	cbz	r0, 801433a <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 801432e:	f005 fc15 	bl	8019b5c <std_msgs__msg__Header__init>
 8014332:	4605      	mov	r5, r0
 8014334:	b120      	cbz	r0, 8014340 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8014336:	4628      	mov	r0, r5
 8014338:	bd38      	pop	{r3, r4, r5, pc}
 801433a:	4605      	mov	r5, r0
 801433c:	4628      	mov	r0, r5
 801433e:	bd38      	pop	{r3, r4, r5, pc}
 8014340:	4620      	mov	r0, r4
 8014342:	f005 fc2f 	bl	8019ba4 <std_msgs__msg__Header__fini>
 8014346:	4628      	mov	r0, r5
 8014348:	bd38      	pop	{r3, r4, r5, pc}
 801434a:	bf00      	nop

0801434c <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 801434c:	b108      	cbz	r0, 8014352 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 801434e:	f005 bc29 	b.w	8019ba4 <std_msgs__msg__Header__fini>
 8014352:	4770      	bx	lr

08014354 <builtin_interfaces__msg__Time__init>:
 8014354:	3800      	subs	r0, #0
 8014356:	bf18      	it	ne
 8014358:	2001      	movne	r0, #1
 801435a:	4770      	bx	lr

0801435c <builtin_interfaces__msg__Time__fini>:
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop

08014360 <ucdr_serialize_sequence_char>:
 8014360:	b570      	push	{r4, r5, r6, lr}
 8014362:	4615      	mov	r5, r2
 8014364:	460e      	mov	r6, r1
 8014366:	7d01      	ldrb	r1, [r0, #20]
 8014368:	4604      	mov	r4, r0
 801436a:	f7fd f9ff 	bl	801176c <ucdr_serialize_endian_uint32_t>
 801436e:	b90d      	cbnz	r5, 8014374 <ucdr_serialize_sequence_char+0x14>
 8014370:	2001      	movs	r0, #1
 8014372:	bd70      	pop	{r4, r5, r6, pc}
 8014374:	462b      	mov	r3, r5
 8014376:	4632      	mov	r2, r6
 8014378:	7d21      	ldrb	r1, [r4, #20]
 801437a:	4620      	mov	r0, r4
 801437c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014380:	f005 bde4 	b.w	8019f4c <ucdr_serialize_endian_array_char>

08014384 <ucdr_deserialize_sequence_char>:
 8014384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014388:	461d      	mov	r5, r3
 801438a:	4616      	mov	r6, r2
 801438c:	460f      	mov	r7, r1
 801438e:	461a      	mov	r2, r3
 8014390:	7d01      	ldrb	r1, [r0, #20]
 8014392:	4604      	mov	r4, r0
 8014394:	f7fd fb12 	bl	80119bc <ucdr_deserialize_endian_uint32_t>
 8014398:	682b      	ldr	r3, [r5, #0]
 801439a:	429e      	cmp	r6, r3
 801439c:	d201      	bcs.n	80143a2 <ucdr_deserialize_sequence_char+0x1e>
 801439e:	2201      	movs	r2, #1
 80143a0:	75a2      	strb	r2, [r4, #22]
 80143a2:	b913      	cbnz	r3, 80143aa <ucdr_deserialize_sequence_char+0x26>
 80143a4:	2001      	movs	r0, #1
 80143a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143aa:	463a      	mov	r2, r7
 80143ac:	7d21      	ldrb	r1, [r4, #20]
 80143ae:	4620      	mov	r0, r4
 80143b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143b4:	f005 bdfc 	b.w	8019fb0 <ucdr_deserialize_endian_array_char>

080143b8 <ucdr_serialize_sequence_uint8_t>:
 80143b8:	b570      	push	{r4, r5, r6, lr}
 80143ba:	4615      	mov	r5, r2
 80143bc:	460e      	mov	r6, r1
 80143be:	7d01      	ldrb	r1, [r0, #20]
 80143c0:	4604      	mov	r4, r0
 80143c2:	f7fd f9d3 	bl	801176c <ucdr_serialize_endian_uint32_t>
 80143c6:	b90d      	cbnz	r5, 80143cc <ucdr_serialize_sequence_uint8_t+0x14>
 80143c8:	2001      	movs	r0, #1
 80143ca:	bd70      	pop	{r4, r5, r6, pc}
 80143cc:	462b      	mov	r3, r5
 80143ce:	4632      	mov	r2, r6
 80143d0:	7d21      	ldrb	r1, [r4, #20]
 80143d2:	4620      	mov	r0, r4
 80143d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143d8:	f005 be50 	b.w	801a07c <ucdr_serialize_endian_array_uint8_t>

080143dc <ucdr_deserialize_sequence_uint8_t>:
 80143dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143e0:	461d      	mov	r5, r3
 80143e2:	4616      	mov	r6, r2
 80143e4:	460f      	mov	r7, r1
 80143e6:	461a      	mov	r2, r3
 80143e8:	7d01      	ldrb	r1, [r0, #20]
 80143ea:	4604      	mov	r4, r0
 80143ec:	f7fd fae6 	bl	80119bc <ucdr_deserialize_endian_uint32_t>
 80143f0:	682b      	ldr	r3, [r5, #0]
 80143f2:	429e      	cmp	r6, r3
 80143f4:	d201      	bcs.n	80143fa <ucdr_deserialize_sequence_uint8_t+0x1e>
 80143f6:	2201      	movs	r2, #1
 80143f8:	75a2      	strb	r2, [r4, #22]
 80143fa:	b913      	cbnz	r3, 8014402 <ucdr_deserialize_sequence_uint8_t+0x26>
 80143fc:	2001      	movs	r0, #1
 80143fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014402:	463a      	mov	r2, r7
 8014404:	7d21      	ldrb	r1, [r4, #20]
 8014406:	4620      	mov	r0, r4
 8014408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801440c:	f005 be9c 	b.w	801a148 <ucdr_deserialize_endian_array_uint8_t>

08014410 <rcl_client_get_rmw_handle>:
 8014410:	b118      	cbz	r0, 801441a <rcl_client_get_rmw_handle+0xa>
 8014412:	6800      	ldr	r0, [r0, #0]
 8014414:	b108      	cbz	r0, 801441a <rcl_client_get_rmw_handle+0xa>
 8014416:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801441a:	4770      	bx	lr

0801441c <rcl_send_request>:
 801441c:	b570      	push	{r4, r5, r6, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	b1f8      	cbz	r0, 8014462 <rcl_send_request+0x46>
 8014422:	4604      	mov	r4, r0
 8014424:	6800      	ldr	r0, [r0, #0]
 8014426:	b1e0      	cbz	r0, 8014462 <rcl_send_request+0x46>
 8014428:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801442c:	b1cb      	cbz	r3, 8014462 <rcl_send_request+0x46>
 801442e:	460e      	mov	r6, r1
 8014430:	b1e1      	cbz	r1, 801446c <rcl_send_request+0x50>
 8014432:	4615      	mov	r5, r2
 8014434:	b1d2      	cbz	r2, 801446c <rcl_send_request+0x50>
 8014436:	2105      	movs	r1, #5
 8014438:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801443c:	f002 ff74 	bl	8017328 <__atomic_load_8>
 8014440:	4602      	mov	r2, r0
 8014442:	460b      	mov	r3, r1
 8014444:	4631      	mov	r1, r6
 8014446:	e9c5 2300 	strd	r2, r3, [r5]
 801444a:	6823      	ldr	r3, [r4, #0]
 801444c:	462a      	mov	r2, r5
 801444e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014452:	f004 f991 	bl	8018778 <rmw_send_request>
 8014456:	4606      	mov	r6, r0
 8014458:	b160      	cbz	r0, 8014474 <rcl_send_request+0x58>
 801445a:	2601      	movs	r6, #1
 801445c:	4630      	mov	r0, r6
 801445e:	b002      	add	sp, #8
 8014460:	bd70      	pop	{r4, r5, r6, pc}
 8014462:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014466:	4630      	mov	r0, r6
 8014468:	b002      	add	sp, #8
 801446a:	bd70      	pop	{r4, r5, r6, pc}
 801446c:	260b      	movs	r6, #11
 801446e:	4630      	mov	r0, r6
 8014470:	b002      	add	sp, #8
 8014472:	bd70      	pop	{r4, r5, r6, pc}
 8014474:	6820      	ldr	r0, [r4, #0]
 8014476:	2105      	movs	r1, #5
 8014478:	e9d5 2300 	ldrd	r2, r3, [r5]
 801447c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014480:	9100      	str	r1, [sp, #0]
 8014482:	f002 ffbd 	bl	8017400 <__atomic_exchange_8>
 8014486:	4630      	mov	r0, r6
 8014488:	b002      	add	sp, #8
 801448a:	bd70      	pop	{r4, r5, r6, pc}
 801448c:	0000      	movs	r0, r0
	...

08014490 <rcl_take_response>:
 8014490:	b570      	push	{r4, r5, r6, lr}
 8014492:	468e      	mov	lr, r1
 8014494:	b08c      	sub	sp, #48	@ 0x30
 8014496:	460c      	mov	r4, r1
 8014498:	4616      	mov	r6, r2
 801449a:	f10d 0c18 	add.w	ip, sp, #24
 801449e:	4605      	mov	r5, r0
 80144a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80144a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80144a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80144ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80144b0:	b35d      	cbz	r5, 801450a <rcl_take_response+0x7a>
 80144b2:	682b      	ldr	r3, [r5, #0]
 80144b4:	b34b      	cbz	r3, 801450a <rcl_take_response+0x7a>
 80144b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80144ba:	b330      	cbz	r0, 801450a <rcl_take_response+0x7a>
 80144bc:	b346      	cbz	r6, 8014510 <rcl_take_response+0x80>
 80144be:	2300      	movs	r3, #0
 80144c0:	4632      	mov	r2, r6
 80144c2:	a902      	add	r1, sp, #8
 80144c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80144c8:	f10d 0307 	add.w	r3, sp, #7
 80144cc:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8014518 <rcl_take_response+0x88>
 80144d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80144d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80144d8:	f004 fa56 	bl	8018988 <rmw_take_response>
 80144dc:	4605      	mov	r5, r0
 80144de:	b9c8      	cbnz	r0, 8014514 <rcl_take_response+0x84>
 80144e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80144e4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80144e8:	2a00      	cmp	r2, #0
 80144ea:	bf08      	it	eq
 80144ec:	461d      	moveq	r5, r3
 80144ee:	f10d 0e18 	add.w	lr, sp, #24
 80144f2:	46a4      	mov	ip, r4
 80144f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80144f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80144fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014500:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014504:	4628      	mov	r0, r5
 8014506:	b00c      	add	sp, #48	@ 0x30
 8014508:	bd70      	pop	{r4, r5, r6, pc}
 801450a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801450e:	e7ee      	b.n	80144ee <rcl_take_response+0x5e>
 8014510:	250b      	movs	r5, #11
 8014512:	e7ec      	b.n	80144ee <rcl_take_response+0x5e>
 8014514:	2501      	movs	r5, #1
 8014516:	e7ea      	b.n	80144ee <rcl_take_response+0x5e>
	...

08014520 <rcl_client_is_valid>:
 8014520:	b130      	cbz	r0, 8014530 <rcl_client_is_valid+0x10>
 8014522:	6800      	ldr	r0, [r0, #0]
 8014524:	b120      	cbz	r0, 8014530 <rcl_client_is_valid+0x10>
 8014526:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801452a:	3800      	subs	r0, #0
 801452c:	bf18      	it	ne
 801452e:	2001      	movne	r0, #1
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop

08014534 <rcl_get_zero_initialized_context>:
 8014534:	4a03      	ldr	r2, [pc, #12]	@ (8014544 <rcl_get_zero_initialized_context+0x10>)
 8014536:	4603      	mov	r3, r0
 8014538:	e892 0003 	ldmia.w	r2, {r0, r1}
 801453c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014540:	4618      	mov	r0, r3
 8014542:	4770      	bx	lr
 8014544:	080225a8 	.word	0x080225a8

08014548 <rcl_context_is_valid>:
 8014548:	b118      	cbz	r0, 8014552 <rcl_context_is_valid+0xa>
 801454a:	6840      	ldr	r0, [r0, #4]
 801454c:	3800      	subs	r0, #0
 801454e:	bf18      	it	ne
 8014550:	2001      	movne	r0, #1
 8014552:	4770      	bx	lr

08014554 <__cleanup_context>:
 8014554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014558:	4606      	mov	r6, r0
 801455a:	2300      	movs	r3, #0
 801455c:	6800      	ldr	r0, [r0, #0]
 801455e:	6073      	str	r3, [r6, #4]
 8014560:	2800      	cmp	r0, #0
 8014562:	d049      	beq.n	80145f8 <__cleanup_context+0xa4>
 8014564:	6947      	ldr	r7, [r0, #20]
 8014566:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801456a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801456e:	b137      	cbz	r7, 801457e <__cleanup_context+0x2a>
 8014570:	3014      	adds	r0, #20
 8014572:	f000 f9bd 	bl	80148f0 <rcl_init_options_fini>
 8014576:	4607      	mov	r7, r0
 8014578:	2800      	cmp	r0, #0
 801457a:	d144      	bne.n	8014606 <__cleanup_context+0xb2>
 801457c:	6830      	ldr	r0, [r6, #0]
 801457e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014580:	b143      	cbz	r3, 8014594 <__cleanup_context+0x40>
 8014582:	3028      	adds	r0, #40	@ 0x28
 8014584:	f003 fe64 	bl	8018250 <rmw_context_fini>
 8014588:	b118      	cbz	r0, 8014592 <__cleanup_context+0x3e>
 801458a:	2f00      	cmp	r7, #0
 801458c:	d03e      	beq.n	801460c <__cleanup_context+0xb8>
 801458e:	f7ff f933 	bl	80137f8 <rcutils_reset_error>
 8014592:	6830      	ldr	r0, [r6, #0]
 8014594:	6a03      	ldr	r3, [r0, #32]
 8014596:	b1db      	cbz	r3, 80145d0 <__cleanup_context+0x7c>
 8014598:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801459c:	2a01      	cmp	r2, #1
 801459e:	f17c 0100 	sbcs.w	r1, ip, #0
 80145a2:	db11      	blt.n	80145c8 <__cleanup_context+0x74>
 80145a4:	2400      	movs	r4, #0
 80145a6:	4625      	mov	r5, r4
 80145a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80145ac:	4649      	mov	r1, r9
 80145ae:	b1b8      	cbz	r0, 80145e0 <__cleanup_context+0x8c>
 80145b0:	47c0      	blx	r8
 80145b2:	6833      	ldr	r3, [r6, #0]
 80145b4:	3401      	adds	r4, #1
 80145b6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80145ba:	f145 0500 	adc.w	r5, r5, #0
 80145be:	6a1b      	ldr	r3, [r3, #32]
 80145c0:	4294      	cmp	r4, r2
 80145c2:	eb75 010c 	sbcs.w	r1, r5, ip
 80145c6:	dbef      	blt.n	80145a8 <__cleanup_context+0x54>
 80145c8:	4618      	mov	r0, r3
 80145ca:	4649      	mov	r1, r9
 80145cc:	47c0      	blx	r8
 80145ce:	6830      	ldr	r0, [r6, #0]
 80145d0:	4649      	mov	r1, r9
 80145d2:	47c0      	blx	r8
 80145d4:	2300      	movs	r3, #0
 80145d6:	4638      	mov	r0, r7
 80145d8:	e9c6 3300 	strd	r3, r3, [r6]
 80145dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145e0:	3401      	adds	r4, #1
 80145e2:	f145 0500 	adc.w	r5, r5, #0
 80145e6:	4294      	cmp	r4, r2
 80145e8:	eb75 010c 	sbcs.w	r1, r5, ip
 80145ec:	dbdc      	blt.n	80145a8 <__cleanup_context+0x54>
 80145ee:	4618      	mov	r0, r3
 80145f0:	4649      	mov	r1, r9
 80145f2:	47c0      	blx	r8
 80145f4:	6830      	ldr	r0, [r6, #0]
 80145f6:	e7eb      	b.n	80145d0 <__cleanup_context+0x7c>
 80145f8:	4607      	mov	r7, r0
 80145fa:	2300      	movs	r3, #0
 80145fc:	4638      	mov	r0, r7
 80145fe:	e9c6 3300 	strd	r3, r3, [r6]
 8014602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014606:	f7ff f8f7 	bl	80137f8 <rcutils_reset_error>
 801460a:	e7b7      	b.n	801457c <__cleanup_context+0x28>
 801460c:	f009 f9e6 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 8014610:	4607      	mov	r7, r0
 8014612:	e7bc      	b.n	801458e <__cleanup_context+0x3a>

08014614 <rcl_init>:
 8014614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014618:	1e05      	subs	r5, r0, #0
 801461a:	b09e      	sub	sp, #120	@ 0x78
 801461c:	460e      	mov	r6, r1
 801461e:	4690      	mov	r8, r2
 8014620:	461f      	mov	r7, r3
 8014622:	f340 809f 	ble.w	8014764 <rcl_init+0x150>
 8014626:	2900      	cmp	r1, #0
 8014628:	f000 809f 	beq.w	801476a <rcl_init+0x156>
 801462c:	f1a1 0e04 	sub.w	lr, r1, #4
 8014630:	f04f 0c00 	mov.w	ip, #0
 8014634:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014638:	f10c 0c01 	add.w	ip, ip, #1
 801463c:	2c00      	cmp	r4, #0
 801463e:	f000 8094 	beq.w	801476a <rcl_init+0x156>
 8014642:	4565      	cmp	r5, ip
 8014644:	d1f6      	bne.n	8014634 <rcl_init+0x20>
 8014646:	f1b8 0f00 	cmp.w	r8, #0
 801464a:	f000 808e 	beq.w	801476a <rcl_init+0x156>
 801464e:	f8d8 4000 	ldr.w	r4, [r8]
 8014652:	2c00      	cmp	r4, #0
 8014654:	f000 8089 	beq.w	801476a <rcl_init+0x156>
 8014658:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801465c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801465e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014662:	6823      	ldr	r3, [r4, #0]
 8014664:	a819      	add	r0, sp, #100	@ 0x64
 8014666:	f8cc 3000 	str.w	r3, [ip]
 801466a:	f7ff f8a1 	bl	80137b0 <rcutils_allocator_is_valid>
 801466e:	f080 0001 	eor.w	r0, r0, #1
 8014672:	b2c0      	uxtb	r0, r0
 8014674:	2800      	cmp	r0, #0
 8014676:	d178      	bne.n	801476a <rcl_init+0x156>
 8014678:	2f00      	cmp	r7, #0
 801467a:	d076      	beq.n	801476a <rcl_init+0x156>
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d178      	bne.n	8014774 <rcl_init+0x160>
 8014682:	2178      	movs	r1, #120	@ 0x78
 8014684:	2001      	movs	r0, #1
 8014686:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801468a:	4798      	blx	r3
 801468c:	4604      	mov	r4, r0
 801468e:	6038      	str	r0, [r7, #0]
 8014690:	2800      	cmp	r0, #0
 8014692:	f000 80b6 	beq.w	8014802 <rcl_init+0x1ee>
 8014696:	a802      	add	r0, sp, #8
 8014698:	f003 f9ba 	bl	8017a10 <rmw_get_zero_initialized_context>
 801469c:	a902      	add	r1, sp, #8
 801469e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80146a2:	2250      	movs	r2, #80	@ 0x50
 80146a4:	f00b fae5 	bl	801fc72 <memcpy>
 80146a8:	ac19      	add	r4, sp, #100	@ 0x64
 80146aa:	f8d7 e000 	ldr.w	lr, [r7]
 80146ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146b0:	46f4      	mov	ip, lr
 80146b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	f10e 0114 	add.w	r1, lr, #20
 80146bc:	4640      	mov	r0, r8
 80146be:	f8cc 3000 	str.w	r3, [ip]
 80146c2:	f000 f93f 	bl	8014944 <rcl_init_options_copy>
 80146c6:	4604      	mov	r4, r0
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d144      	bne.n	8014756 <rcl_init+0x142>
 80146cc:	f8d7 9000 	ldr.w	r9, [r7]
 80146d0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80146d4:	f8c9 0020 	str.w	r0, [r9, #32]
 80146d8:	f8c9 5018 	str.w	r5, [r9, #24]
 80146dc:	f8c9 801c 	str.w	r8, [r9, #28]
 80146e0:	2d00      	cmp	r5, #0
 80146e2:	d04e      	beq.n	8014782 <rcl_init+0x16e>
 80146e4:	2e00      	cmp	r6, #0
 80146e6:	d04c      	beq.n	8014782 <rcl_init+0x16e>
 80146e8:	2104      	movs	r1, #4
 80146ea:	4628      	mov	r0, r5
 80146ec:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80146f0:	4798      	blx	r3
 80146f2:	f8c9 0020 	str.w	r0, [r9, #32]
 80146f6:	f8d7 9000 	ldr.w	r9, [r7]
 80146fa:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80146fe:	46ca      	mov	sl, r9
 8014700:	b343      	cbz	r3, 8014754 <rcl_init+0x140>
 8014702:	2d01      	cmp	r5, #1
 8014704:	f178 0300 	sbcs.w	r3, r8, #0
 8014708:	db3b      	blt.n	8014782 <rcl_init+0x16e>
 801470a:	2400      	movs	r4, #0
 801470c:	3e04      	subs	r6, #4
 801470e:	46a1      	mov	r9, r4
 8014710:	e00b      	b.n	801472a <rcl_init+0x116>
 8014712:	6831      	ldr	r1, [r6, #0]
 8014714:	f00b faad 	bl	801fc72 <memcpy>
 8014718:	3401      	adds	r4, #1
 801471a:	f149 0900 	adc.w	r9, r9, #0
 801471e:	45c8      	cmp	r8, r9
 8014720:	bf08      	it	eq
 8014722:	42a5      	cmpeq	r5, r4
 8014724:	d02b      	beq.n	801477e <rcl_init+0x16a>
 8014726:	f8d7 a000 	ldr.w	sl, [r7]
 801472a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801472e:	f7eb fde1 	bl	80002f4 <strlen>
 8014732:	1c42      	adds	r2, r0, #1
 8014734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014736:	4610      	mov	r0, r2
 8014738:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801473a:	f8da a020 	ldr.w	sl, [sl, #32]
 801473e:	9201      	str	r2, [sp, #4]
 8014740:	4798      	blx	r3
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014748:	6a1b      	ldr	r3, [r3, #32]
 801474a:	9a01      	ldr	r2, [sp, #4]
 801474c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014750:	2800      	cmp	r0, #0
 8014752:	d1de      	bne.n	8014712 <rcl_init+0xfe>
 8014754:	240a      	movs	r4, #10
 8014756:	4638      	mov	r0, r7
 8014758:	f7ff fefc 	bl	8014554 <__cleanup_context>
 801475c:	4620      	mov	r0, r4
 801475e:	b01e      	add	sp, #120	@ 0x78
 8014760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014764:	2900      	cmp	r1, #0
 8014766:	f43f af6e 	beq.w	8014646 <rcl_init+0x32>
 801476a:	240b      	movs	r4, #11
 801476c:	4620      	mov	r0, r4
 801476e:	b01e      	add	sp, #120	@ 0x78
 8014770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014774:	2464      	movs	r4, #100	@ 0x64
 8014776:	4620      	mov	r0, r4
 8014778:	b01e      	add	sp, #120	@ 0x78
 801477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801477e:	f8d7 9000 	ldr.w	r9, [r7]
 8014782:	4926      	ldr	r1, [pc, #152]	@ (801481c <rcl_init+0x208>)
 8014784:	680b      	ldr	r3, [r1, #0]
 8014786:	3301      	adds	r3, #1
 8014788:	d036      	beq.n	80147f8 <rcl_init+0x1e4>
 801478a:	461a      	mov	r2, r3
 801478c:	2400      	movs	r4, #0
 801478e:	600b      	str	r3, [r1, #0]
 8014790:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014794:	607b      	str	r3, [r7, #4]
 8014796:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014798:	3301      	adds	r3, #1
 801479a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801479e:	d034      	beq.n	801480a <rcl_init+0x1f6>
 80147a0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80147a4:	b93b      	cbnz	r3, 80147b6 <rcl_init+0x1a2>
 80147a6:	3030      	adds	r0, #48	@ 0x30
 80147a8:	f000 f93a 	bl	8014a20 <rcl_get_localhost_only>
 80147ac:	4604      	mov	r4, r0
 80147ae:	2800      	cmp	r0, #0
 80147b0:	d1d1      	bne.n	8014756 <rcl_init+0x142>
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	6958      	ldr	r0, [r3, #20]
 80147b6:	aa18      	add	r2, sp, #96	@ 0x60
 80147b8:	a917      	add	r1, sp, #92	@ 0x5c
 80147ba:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80147bc:	f001 fa3e 	bl	8015c3c <rcl_validate_enclave_name>
 80147c0:	4604      	mov	r4, r0
 80147c2:	2800      	cmp	r0, #0
 80147c4:	d1c7      	bne.n	8014756 <rcl_init+0x142>
 80147c6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80147c8:	b9eb      	cbnz	r3, 8014806 <rcl_init+0x1f2>
 80147ca:	6839      	ldr	r1, [r7, #0]
 80147cc:	694b      	ldr	r3, [r1, #20]
 80147ce:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80147d2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80147d4:	f000 fd62 	bl	801529c <rcl_get_security_options_from_environment>
 80147d8:	4604      	mov	r4, r0
 80147da:	2800      	cmp	r0, #0
 80147dc:	d1bb      	bne.n	8014756 <rcl_init+0x142>
 80147de:	6839      	ldr	r1, [r7, #0]
 80147e0:	6948      	ldr	r0, [r1, #20]
 80147e2:	3128      	adds	r1, #40	@ 0x28
 80147e4:	3018      	adds	r0, #24
 80147e6:	f003 fbfd 	bl	8017fe4 <rmw_init>
 80147ea:	4604      	mov	r4, r0
 80147ec:	2800      	cmp	r0, #0
 80147ee:	d0bd      	beq.n	801476c <rcl_init+0x158>
 80147f0:	f009 f8f4 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 80147f4:	4604      	mov	r4, r0
 80147f6:	e7ae      	b.n	8014756 <rcl_init+0x142>
 80147f8:	2201      	movs	r2, #1
 80147fa:	461c      	mov	r4, r3
 80147fc:	600a      	str	r2, [r1, #0]
 80147fe:	4613      	mov	r3, r2
 8014800:	e7c6      	b.n	8014790 <rcl_init+0x17c>
 8014802:	240a      	movs	r4, #10
 8014804:	e7b2      	b.n	801476c <rcl_init+0x158>
 8014806:	2401      	movs	r4, #1
 8014808:	e7a5      	b.n	8014756 <rcl_init+0x142>
 801480a:	3024      	adds	r0, #36	@ 0x24
 801480c:	f009 f8fa 	bl	801da04 <rcl_get_default_domain_id>
 8014810:	4604      	mov	r4, r0
 8014812:	2800      	cmp	r0, #0
 8014814:	d19f      	bne.n	8014756 <rcl_init+0x142>
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	6958      	ldr	r0, [r3, #20]
 801481a:	e7c1      	b.n	80147a0 <rcl_init+0x18c>
 801481c:	240647a8 	.word	0x240647a8

08014820 <rcl_get_zero_initialized_init_options>:
 8014820:	2000      	movs	r0, #0
 8014822:	4770      	bx	lr

08014824 <rcl_init_options_init>:
 8014824:	b084      	sub	sp, #16
 8014826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014828:	b097      	sub	sp, #92	@ 0x5c
 801482a:	ae1d      	add	r6, sp, #116	@ 0x74
 801482c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8014830:	2800      	cmp	r0, #0
 8014832:	d058      	beq.n	80148e6 <rcl_init_options_init+0xc2>
 8014834:	6803      	ldr	r3, [r0, #0]
 8014836:	4605      	mov	r5, r0
 8014838:	b133      	cbz	r3, 8014848 <rcl_init_options_init+0x24>
 801483a:	2464      	movs	r4, #100	@ 0x64
 801483c:	4620      	mov	r0, r4
 801483e:	b017      	add	sp, #92	@ 0x5c
 8014840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014844:	b004      	add	sp, #16
 8014846:	4770      	bx	lr
 8014848:	4630      	mov	r0, r6
 801484a:	f7fe ffb1 	bl	80137b0 <rcutils_allocator_is_valid>
 801484e:	2800      	cmp	r0, #0
 8014850:	d049      	beq.n	80148e6 <rcl_init_options_init+0xc2>
 8014852:	46b4      	mov	ip, r6
 8014854:	ac11      	add	r4, sp, #68	@ 0x44
 8014856:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801485a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801485c:	f8dc 3000 	ldr.w	r3, [ip]
 8014860:	2050      	movs	r0, #80	@ 0x50
 8014862:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8014864:	6023      	str	r3, [r4, #0]
 8014866:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014868:	4798      	blx	r3
 801486a:	4604      	mov	r4, r0
 801486c:	6028      	str	r0, [r5, #0]
 801486e:	2800      	cmp	r0, #0
 8014870:	d03b      	beq.n	80148ea <rcl_init_options_init+0xc6>
 8014872:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014876:	4686      	mov	lr, r0
 8014878:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801487c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014880:	f8dc 3000 	ldr.w	r3, [ip]
 8014884:	a802      	add	r0, sp, #8
 8014886:	f8ce 3000 	str.w	r3, [lr]
 801488a:	f003 f8d5 	bl	8017a38 <rmw_get_zero_initialized_init_options>
 801488e:	f10d 0e08 	add.w	lr, sp, #8
 8014892:	f104 0c18 	add.w	ip, r4, #24
 8014896:	682f      	ldr	r7, [r5, #0]
 8014898:	ac20      	add	r4, sp, #128	@ 0x80
 801489a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801489e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148b2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80148b6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80148ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80148c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80148c6:	f107 0018 	add.w	r0, r7, #24
 80148ca:	f003 fa8d 	bl	8017de8 <rmw_init_options_init>
 80148ce:	4604      	mov	r4, r0
 80148d0:	2800      	cmp	r0, #0
 80148d2:	d0b3      	beq.n	801483c <rcl_init_options_init+0x18>
 80148d4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80148d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80148d8:	6828      	ldr	r0, [r5, #0]
 80148da:	4798      	blx	r3
 80148dc:	4620      	mov	r0, r4
 80148de:	f009 f87d 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 80148e2:	4604      	mov	r4, r0
 80148e4:	e7aa      	b.n	801483c <rcl_init_options_init+0x18>
 80148e6:	240b      	movs	r4, #11
 80148e8:	e7a8      	b.n	801483c <rcl_init_options_init+0x18>
 80148ea:	240a      	movs	r4, #10
 80148ec:	e7a6      	b.n	801483c <rcl_init_options_init+0x18>
 80148ee:	bf00      	nop

080148f0 <rcl_init_options_fini>:
 80148f0:	b530      	push	{r4, r5, lr}
 80148f2:	b087      	sub	sp, #28
 80148f4:	b1f0      	cbz	r0, 8014934 <rcl_init_options_fini+0x44>
 80148f6:	6803      	ldr	r3, [r0, #0]
 80148f8:	4604      	mov	r4, r0
 80148fa:	b1db      	cbz	r3, 8014934 <rcl_init_options_fini+0x44>
 80148fc:	469c      	mov	ip, r3
 80148fe:	f10d 0e04 	add.w	lr, sp, #4
 8014902:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014906:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801490a:	f8dc 3000 	ldr.w	r3, [ip]
 801490e:	a801      	add	r0, sp, #4
 8014910:	f8ce 3000 	str.w	r3, [lr]
 8014914:	f7fe ff4c 	bl	80137b0 <rcutils_allocator_is_valid>
 8014918:	b160      	cbz	r0, 8014934 <rcl_init_options_fini+0x44>
 801491a:	6820      	ldr	r0, [r4, #0]
 801491c:	3018      	adds	r0, #24
 801491e:	f003 fb1d 	bl	8017f5c <rmw_init_options_fini>
 8014922:	4605      	mov	r5, r0
 8014924:	b950      	cbnz	r0, 801493c <rcl_init_options_fini+0x4c>
 8014926:	6820      	ldr	r0, [r4, #0]
 8014928:	9b02      	ldr	r3, [sp, #8]
 801492a:	9905      	ldr	r1, [sp, #20]
 801492c:	4798      	blx	r3
 801492e:	4628      	mov	r0, r5
 8014930:	b007      	add	sp, #28
 8014932:	bd30      	pop	{r4, r5, pc}
 8014934:	250b      	movs	r5, #11
 8014936:	4628      	mov	r0, r5
 8014938:	b007      	add	sp, #28
 801493a:	bd30      	pop	{r4, r5, pc}
 801493c:	f009 f84e 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 8014940:	4605      	mov	r5, r0
 8014942:	e7f8      	b.n	8014936 <rcl_init_options_fini+0x46>

08014944 <rcl_init_options_copy>:
 8014944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014948:	b094      	sub	sp, #80	@ 0x50
 801494a:	2800      	cmp	r0, #0
 801494c:	d05b      	beq.n	8014a06 <rcl_init_options_copy+0xc2>
 801494e:	4604      	mov	r4, r0
 8014950:	6800      	ldr	r0, [r0, #0]
 8014952:	2800      	cmp	r0, #0
 8014954:	d057      	beq.n	8014a06 <rcl_init_options_copy+0xc2>
 8014956:	460e      	mov	r6, r1
 8014958:	f7fe ff2a 	bl	80137b0 <rcutils_allocator_is_valid>
 801495c:	2e00      	cmp	r6, #0
 801495e:	d052      	beq.n	8014a06 <rcl_init_options_copy+0xc2>
 8014960:	f080 0001 	eor.w	r0, r0, #1
 8014964:	b2c0      	uxtb	r0, r0
 8014966:	2800      	cmp	r0, #0
 8014968:	d14d      	bne.n	8014a06 <rcl_init_options_copy+0xc2>
 801496a:	6833      	ldr	r3, [r6, #0]
 801496c:	b123      	cbz	r3, 8014978 <rcl_init_options_copy+0x34>
 801496e:	2464      	movs	r4, #100	@ 0x64
 8014970:	4620      	mov	r0, r4
 8014972:	b014      	add	sp, #80	@ 0x50
 8014974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014978:	6827      	ldr	r7, [r4, #0]
 801497a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801497c:	46bc      	mov	ip, r7
 801497e:	f8d7 8000 	ldr.w	r8, [r7]
 8014982:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014988:	f8dc 3000 	ldr.w	r3, [ip]
 801498c:	2050      	movs	r0, #80	@ 0x50
 801498e:	4619      	mov	r1, r3
 8014990:	602b      	str	r3, [r5, #0]
 8014992:	47c0      	blx	r8
 8014994:	4605      	mov	r5, r0
 8014996:	6030      	str	r0, [r6, #0]
 8014998:	b3d0      	cbz	r0, 8014a10 <rcl_init_options_copy+0xcc>
 801499a:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801499e:	4686      	mov	lr, r0
 80149a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149a8:	f8dc 3000 	ldr.w	r3, [ip]
 80149ac:	4668      	mov	r0, sp
 80149ae:	f8ce 3000 	str.w	r3, [lr]
 80149b2:	f003 f841 	bl	8017a38 <rmw_get_zero_initialized_init_options>
 80149b6:	46ee      	mov	lr, sp
 80149b8:	f105 0c18 	add.w	ip, r5, #24
 80149bc:	6824      	ldr	r4, [r4, #0]
 80149be:	6835      	ldr	r5, [r6, #0]
 80149c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80149dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80149e0:	f104 0018 	add.w	r0, r4, #24
 80149e4:	f105 0118 	add.w	r1, r5, #24
 80149e8:	f003 fa66 	bl	8017eb8 <rmw_init_options_copy>
 80149ec:	4604      	mov	r4, r0
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d0be      	beq.n	8014970 <rcl_init_options_copy+0x2c>
 80149f2:	f7fe feeb 	bl	80137cc <rcutils_get_error_string>
 80149f6:	f7fe feff 	bl	80137f8 <rcutils_reset_error>
 80149fa:	4630      	mov	r0, r6
 80149fc:	f7ff ff78 	bl	80148f0 <rcl_init_options_fini>
 8014a00:	b140      	cbz	r0, 8014a14 <rcl_init_options_copy+0xd0>
 8014a02:	4604      	mov	r4, r0
 8014a04:	e7b4      	b.n	8014970 <rcl_init_options_copy+0x2c>
 8014a06:	240b      	movs	r4, #11
 8014a08:	4620      	mov	r0, r4
 8014a0a:	b014      	add	sp, #80	@ 0x50
 8014a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a10:	240a      	movs	r4, #10
 8014a12:	e7ad      	b.n	8014970 <rcl_init_options_copy+0x2c>
 8014a14:	4620      	mov	r0, r4
 8014a16:	b014      	add	sp, #80	@ 0x50
 8014a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a1c:	f008 bfde 	b.w	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>

08014a20 <rcl_get_localhost_only>:
 8014a20:	b510      	push	{r4, lr}
 8014a22:	2300      	movs	r3, #0
 8014a24:	b082      	sub	sp, #8
 8014a26:	9301      	str	r3, [sp, #4]
 8014a28:	b1b8      	cbz	r0, 8014a5a <rcl_get_localhost_only+0x3a>
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	a901      	add	r1, sp, #4
 8014a2e:	480c      	ldr	r0, [pc, #48]	@ (8014a60 <rcl_get_localhost_only+0x40>)
 8014a30:	f002 fd1e 	bl	8017470 <rcutils_get_env>
 8014a34:	b110      	cbz	r0, 8014a3c <rcl_get_localhost_only+0x1c>
 8014a36:	2001      	movs	r0, #1
 8014a38:	b002      	add	sp, #8
 8014a3a:	bd10      	pop	{r4, pc}
 8014a3c:	9b01      	ldr	r3, [sp, #4]
 8014a3e:	b113      	cbz	r3, 8014a46 <rcl_get_localhost_only+0x26>
 8014a40:	781a      	ldrb	r2, [r3, #0]
 8014a42:	2a31      	cmp	r2, #49	@ 0x31
 8014a44:	d004      	beq.n	8014a50 <rcl_get_localhost_only+0x30>
 8014a46:	2302      	movs	r3, #2
 8014a48:	2000      	movs	r0, #0
 8014a4a:	7023      	strb	r3, [r4, #0]
 8014a4c:	b002      	add	sp, #8
 8014a4e:	bd10      	pop	{r4, pc}
 8014a50:	785b      	ldrb	r3, [r3, #1]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d1f7      	bne.n	8014a46 <rcl_get_localhost_only+0x26>
 8014a56:	2301      	movs	r3, #1
 8014a58:	e7f6      	b.n	8014a48 <rcl_get_localhost_only+0x28>
 8014a5a:	200b      	movs	r0, #11
 8014a5c:	b002      	add	sp, #8
 8014a5e:	bd10      	pop	{r4, pc}
 8014a60:	080225b0 	.word	0x080225b0

08014a64 <rcl_get_zero_initialized_node>:
 8014a64:	4a03      	ldr	r2, [pc, #12]	@ (8014a74 <rcl_get_zero_initialized_node+0x10>)
 8014a66:	4603      	mov	r3, r0
 8014a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a70:	4618      	mov	r0, r3
 8014a72:	4770      	bx	lr
 8014a74:	080225e0 	.word	0x080225e0

08014a78 <rcl_node_init>:
 8014a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7c:	b0a9      	sub	sp, #164	@ 0xa4
 8014a7e:	4604      	mov	r4, r0
 8014a80:	460e      	mov	r6, r1
 8014a82:	4615      	mov	r5, r2
 8014a84:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014a88:	a823      	add	r0, sp, #140	@ 0x8c
 8014a8a:	461f      	mov	r7, r3
 8014a8c:	f009 f9e0 	bl	801de50 <rcl_guard_condition_get_default_options>
 8014a90:	f1b8 0f00 	cmp.w	r8, #0
 8014a94:	f000 80f3 	beq.w	8014c7e <rcl_node_init+0x206>
 8014a98:	4640      	mov	r0, r8
 8014a9a:	f7fe fe89 	bl	80137b0 <rcutils_allocator_is_valid>
 8014a9e:	2d00      	cmp	r5, #0
 8014aa0:	bf18      	it	ne
 8014aa2:	2c00      	cmpne	r4, #0
 8014aa4:	f080 0001 	eor.w	r0, r0, #1
 8014aa8:	bf0c      	ite	eq
 8014aaa:	f04f 0c01 	moveq.w	ip, #1
 8014aae:	f04f 0c00 	movne.w	ip, #0
 8014ab2:	2e00      	cmp	r6, #0
 8014ab4:	bf08      	it	eq
 8014ab6:	f04c 0c01 	orreq.w	ip, ip, #1
 8014aba:	ea4c 0c00 	orr.w	ip, ip, r0
 8014abe:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8014ac2:	f040 80dc 	bne.w	8014c7e <rcl_node_init+0x206>
 8014ac6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014aca:	f1ba 0f00 	cmp.w	sl, #0
 8014ace:	f040 80fc 	bne.w	8014cca <rcl_node_init+0x252>
 8014ad2:	2f00      	cmp	r7, #0
 8014ad4:	f000 80d3 	beq.w	8014c7e <rcl_node_init+0x206>
 8014ad8:	4638      	mov	r0, r7
 8014ada:	f7ff fd35 	bl	8014548 <rcl_context_is_valid>
 8014ade:	4683      	mov	fp, r0
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f000 80d2 	beq.w	8014c8a <rcl_node_init+0x212>
 8014ae6:	4652      	mov	r2, sl
 8014ae8:	4630      	mov	r0, r6
 8014aea:	a922      	add	r1, sp, #136	@ 0x88
 8014aec:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8014af0:	f003 f8d0 	bl	8017c94 <rmw_validate_node_name>
 8014af4:	4682      	mov	sl, r0
 8014af6:	2800      	cmp	r0, #0
 8014af8:	f040 80c3 	bne.w	8014c82 <rcl_node_init+0x20a>
 8014afc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014afe:	2800      	cmp	r0, #0
 8014b00:	f040 80f1 	bne.w	8014ce6 <rcl_node_init+0x26e>
 8014b04:	4628      	mov	r0, r5
 8014b06:	f7eb fbf5 	bl	80002f4 <strlen>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	f040 80c0 	bne.w	8014c90 <rcl_node_init+0x218>
 8014b10:	4d79      	ldr	r5, [pc, #484]	@ (8014cf8 <rcl_node_init+0x280>)
 8014b12:	a922      	add	r1, sp, #136	@ 0x88
 8014b14:	2200      	movs	r2, #0
 8014b16:	4628      	mov	r0, r5
 8014b18:	f003 f89e 	bl	8017c58 <rmw_validate_namespace>
 8014b1c:	4682      	mov	sl, r0
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	f040 80af 	bne.w	8014c82 <rcl_node_init+0x20a>
 8014b24:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014b26:	2800      	cmp	r0, #0
 8014b28:	f040 80d5 	bne.w	8014cd6 <rcl_node_init+0x25e>
 8014b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8014b30:	2078      	movs	r0, #120	@ 0x78
 8014b32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b36:	4798      	blx	r3
 8014b38:	4682      	mov	sl, r0
 8014b3a:	6060      	str	r0, [r4, #4]
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	f000 80cf 	beq.w	8014ce0 <rcl_node_init+0x268>
 8014b42:	2200      	movs	r2, #0
 8014b44:	2300      	movs	r3, #0
 8014b46:	a808      	add	r0, sp, #32
 8014b48:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8014b4c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8014b50:	f000 f902 	bl	8014d58 <rcl_node_get_default_options>
 8014b54:	a908      	add	r1, sp, #32
 8014b56:	4650      	mov	r0, sl
 8014b58:	2268      	movs	r2, #104	@ 0x68
 8014b5a:	f00b f88a 	bl	801fc72 <memcpy>
 8014b5e:	6861      	ldr	r1, [r4, #4]
 8014b60:	4640      	mov	r0, r8
 8014b62:	6027      	str	r7, [r4, #0]
 8014b64:	f000 f906 	bl	8014d74 <rcl_node_options_copy>
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d158      	bne.n	8014c1e <rcl_node_init+0x1a6>
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	f7eb fbc1 	bl	80002f4 <strlen>
 8014b72:	4428      	add	r0, r5
 8014b74:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014b78:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014b7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8014b7e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014b82:	9300      	str	r3, [sp, #0]
 8014b84:	bf0c      	ite	eq
 8014b86:	4b5d      	ldreq	r3, [pc, #372]	@ (8014cfc <rcl_node_init+0x284>)
 8014b88:	4b5d      	ldrne	r3, [pc, #372]	@ (8014d00 <rcl_node_init+0x288>)
 8014b8a:	9302      	str	r3, [sp, #8]
 8014b8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014b90:	9301      	str	r3, [sp, #4]
 8014b92:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014b96:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014b9a:	f002 fc91 	bl	80174c0 <rcutils_format_string_limit>
 8014b9e:	6823      	ldr	r3, [r4, #0]
 8014ba0:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8014ba4:	4631      	mov	r1, r6
 8014ba6:	6818      	ldr	r0, [r3, #0]
 8014ba8:	462a      	mov	r2, r5
 8014baa:	6866      	ldr	r6, [r4, #4]
 8014bac:	3028      	adds	r0, #40	@ 0x28
 8014bae:	f003 fc01 	bl	80183b4 <rmw_create_node>
 8014bb2:	6863      	ldr	r3, [r4, #4]
 8014bb4:	66b0      	str	r0, [r6, #104]	@ 0x68
 8014bb6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d032      	beq.n	8014c22 <rcl_node_init+0x1aa>
 8014bbc:	f003 fc8a 	bl	80184d4 <rmw_node_get_graph_guard_condition>
 8014bc0:	4682      	mov	sl, r0
 8014bc2:	b360      	cbz	r0, 8014c1e <rcl_node_init+0x1a6>
 8014bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8014bc8:	2008      	movs	r0, #8
 8014bca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014bce:	6866      	ldr	r6, [r4, #4]
 8014bd0:	4798      	blx	r3
 8014bd2:	6863      	ldr	r3, [r4, #4]
 8014bd4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014bd6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014bda:	f1bb 0f00 	cmp.w	fp, #0
 8014bde:	d020      	beq.n	8014c22 <rcl_node_init+0x1aa>
 8014be0:	a806      	add	r0, sp, #24
 8014be2:	ae23      	add	r6, sp, #140	@ 0x8c
 8014be4:	f009 f8a8 	bl	801dd38 <rcl_get_zero_initialized_guard_condition>
 8014be8:	a806      	add	r0, sp, #24
 8014bea:	6863      	ldr	r3, [r4, #4]
 8014bec:	46c4      	mov	ip, r8
 8014bee:	c803      	ldmia	r0, {r0, r1}
 8014bf0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014bf4:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014bf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014bfe:	f8dc 3000 	ldr.w	r3, [ip]
 8014c02:	6033      	str	r3, [r6, #0]
 8014c04:	ab28      	add	r3, sp, #160	@ 0xa0
 8014c06:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014c0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c0e:	4651      	mov	r1, sl
 8014c10:	463a      	mov	r2, r7
 8014c12:	4670      	mov	r0, lr
 8014c14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c16:	f009 f899 	bl	801dd4c <rcl_guard_condition_init_from_rmw>
 8014c1a:	4682      	mov	sl, r0
 8014c1c:	b328      	cbz	r0, 8014c6a <rcl_node_init+0x1f2>
 8014c1e:	6863      	ldr	r3, [r4, #4]
 8014c20:	b1f3      	cbz	r3, 8014c60 <rcl_node_init+0x1e8>
 8014c22:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014c24:	b128      	cbz	r0, 8014c32 <rcl_node_init+0x1ba>
 8014c26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c2e:	4798      	blx	r3
 8014c30:	6863      	ldr	r3, [r4, #4]
 8014c32:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014c34:	b110      	cbz	r0, 8014c3c <rcl_node_init+0x1c4>
 8014c36:	f003 fbcf 	bl	80183d8 <rmw_destroy_node>
 8014c3a:	6863      	ldr	r3, [r4, #4]
 8014c3c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c3e:	b148      	cbz	r0, 8014c54 <rcl_node_init+0x1dc>
 8014c40:	f009 f8e0 	bl	801de04 <rcl_guard_condition_fini>
 8014c44:	6863      	ldr	r3, [r4, #4]
 8014c46:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c4a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c50:	4798      	blx	r3
 8014c52:	6863      	ldr	r3, [r4, #4]
 8014c54:	4618      	mov	r0, r3
 8014c56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c5e:	4798      	blx	r3
 8014c60:	2300      	movs	r3, #0
 8014c62:	f04f 0a01 	mov.w	sl, #1
 8014c66:	e9c4 3300 	strd	r3, r3, [r4]
 8014c6a:	f1b9 0f00 	cmp.w	r9, #0
 8014c6e:	d008      	beq.n	8014c82 <rcl_node_init+0x20a>
 8014c70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c74:	4628      	mov	r0, r5
 8014c76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c7a:	4798      	blx	r3
 8014c7c:	e001      	b.n	8014c82 <rcl_node_init+0x20a>
 8014c7e:	f04f 0a0b 	mov.w	sl, #11
 8014c82:	4650      	mov	r0, sl
 8014c84:	b029      	add	sp, #164	@ 0xa4
 8014c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c8a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8014c8e:	e7f8      	b.n	8014c82 <rcl_node_init+0x20a>
 8014c90:	782b      	ldrb	r3, [r5, #0]
 8014c92:	2b2f      	cmp	r3, #47	@ 0x2f
 8014c94:	f43f af3d 	beq.w	8014b12 <rcl_node_init+0x9a>
 8014c98:	9503      	str	r5, [sp, #12]
 8014c9a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014c9e:	9300      	str	r3, [sp, #0]
 8014ca0:	4b18      	ldr	r3, [pc, #96]	@ (8014d04 <rcl_node_init+0x28c>)
 8014ca2:	9302      	str	r3, [sp, #8]
 8014ca4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014ca8:	9301      	str	r3, [sp, #4]
 8014caa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014cae:	f002 fc07 	bl	80174c0 <rcutils_format_string_limit>
 8014cb2:	4605      	mov	r5, r0
 8014cb4:	b1e0      	cbz	r0, 8014cf0 <rcl_node_init+0x278>
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	a922      	add	r1, sp, #136	@ 0x88
 8014cba:	9222      	str	r2, [sp, #136]	@ 0x88
 8014cbc:	f002 ffcc 	bl	8017c58 <rmw_validate_namespace>
 8014cc0:	4682      	mov	sl, r0
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	d1d4      	bne.n	8014c70 <rcl_node_init+0x1f8>
 8014cc6:	46d9      	mov	r9, fp
 8014cc8:	e72c      	b.n	8014b24 <rcl_node_init+0xac>
 8014cca:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8014cce:	4650      	mov	r0, sl
 8014cd0:	b029      	add	sp, #164	@ 0xa4
 8014cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd6:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8014cda:	f002 ffcf 	bl	8017c7c <rmw_namespace_validation_result_string>
 8014cde:	e7c4      	b.n	8014c6a <rcl_node_init+0x1f2>
 8014ce0:	f04f 0a0a 	mov.w	sl, #10
 8014ce4:	e7c1      	b.n	8014c6a <rcl_node_init+0x1f2>
 8014ce6:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8014cea:	f003 f827 	bl	8017d3c <rmw_node_name_validation_result_string>
 8014cee:	e7c8      	b.n	8014c82 <rcl_node_init+0x20a>
 8014cf0:	f04f 0a0a 	mov.w	sl, #10
 8014cf4:	e7c5      	b.n	8014c82 <rcl_node_init+0x20a>
 8014cf6:	bf00      	nop
 8014cf8:	080225c8 	.word	0x080225c8
 8014cfc:	080225d0 	.word	0x080225d0
 8014d00:	080225d8 	.word	0x080225d8
 8014d04:	080225cc 	.word	0x080225cc

08014d08 <rcl_node_is_valid>:
 8014d08:	b130      	cbz	r0, 8014d18 <rcl_node_is_valid+0x10>
 8014d0a:	6843      	ldr	r3, [r0, #4]
 8014d0c:	b123      	cbz	r3, 8014d18 <rcl_node_is_valid+0x10>
 8014d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014d10:	b113      	cbz	r3, 8014d18 <rcl_node_is_valid+0x10>
 8014d12:	6800      	ldr	r0, [r0, #0]
 8014d14:	f7ff bc18 	b.w	8014548 <rcl_context_is_valid>
 8014d18:	2000      	movs	r0, #0
 8014d1a:	4770      	bx	lr

08014d1c <rcl_node_get_name>:
 8014d1c:	b120      	cbz	r0, 8014d28 <rcl_node_get_name+0xc>
 8014d1e:	6840      	ldr	r0, [r0, #4]
 8014d20:	b110      	cbz	r0, 8014d28 <rcl_node_get_name+0xc>
 8014d22:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d24:	b100      	cbz	r0, 8014d28 <rcl_node_get_name+0xc>
 8014d26:	6880      	ldr	r0, [r0, #8]
 8014d28:	4770      	bx	lr
 8014d2a:	bf00      	nop

08014d2c <rcl_node_get_namespace>:
 8014d2c:	b120      	cbz	r0, 8014d38 <rcl_node_get_namespace+0xc>
 8014d2e:	6840      	ldr	r0, [r0, #4]
 8014d30:	b110      	cbz	r0, 8014d38 <rcl_node_get_namespace+0xc>
 8014d32:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d34:	b100      	cbz	r0, 8014d38 <rcl_node_get_namespace+0xc>
 8014d36:	68c0      	ldr	r0, [r0, #12]
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop

08014d3c <rcl_node_get_options>:
 8014d3c:	b128      	cbz	r0, 8014d4a <rcl_node_get_options+0xe>
 8014d3e:	6840      	ldr	r0, [r0, #4]
 8014d40:	b118      	cbz	r0, 8014d4a <rcl_node_get_options+0xe>
 8014d42:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	bf08      	it	eq
 8014d48:	2000      	moveq	r0, #0
 8014d4a:	4770      	bx	lr

08014d4c <rcl_node_get_rmw_handle>:
 8014d4c:	b110      	cbz	r0, 8014d54 <rcl_node_get_rmw_handle+0x8>
 8014d4e:	6840      	ldr	r0, [r0, #4]
 8014d50:	b100      	cbz	r0, 8014d54 <rcl_node_get_rmw_handle+0x8>
 8014d52:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d54:	4770      	bx	lr
 8014d56:	bf00      	nop

08014d58 <rcl_node_get_default_options>:
 8014d58:	b510      	push	{r4, lr}
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	2268      	movs	r2, #104	@ 0x68
 8014d5e:	2100      	movs	r1, #0
 8014d60:	f00a fe68 	bl	801fa34 <memset>
 8014d64:	4620      	mov	r0, r4
 8014d66:	f7fe fd15 	bl	8013794 <rcutils_get_default_allocator>
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	7523      	strb	r3, [r4, #20]
 8014d70:	bd10      	pop	{r4, pc}
 8014d72:	bf00      	nop

08014d74 <rcl_node_options_copy>:
 8014d74:	2800      	cmp	r0, #0
 8014d76:	bf18      	it	ne
 8014d78:	4288      	cmpne	r0, r1
 8014d7a:	d01b      	beq.n	8014db4 <rcl_node_options_copy+0x40>
 8014d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d7e:	fab1 f681 	clz	r6, r1
 8014d82:	460c      	mov	r4, r1
 8014d84:	0976      	lsrs	r6, r6, #5
 8014d86:	b199      	cbz	r1, 8014db0 <rcl_node_options_copy+0x3c>
 8014d88:	4605      	mov	r5, r0
 8014d8a:	8a87      	ldrh	r7, [r0, #20]
 8014d8c:	4684      	mov	ip, r0
 8014d8e:	468e      	mov	lr, r1
 8014d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d96:	682b      	ldr	r3, [r5, #0]
 8014d98:	2250      	movs	r2, #80	@ 0x50
 8014d9a:	f10c 0118 	add.w	r1, ip, #24
 8014d9e:	f104 0018 	add.w	r0, r4, #24
 8014da2:	f8ce 3000 	str.w	r3, [lr]
 8014da6:	82a7      	strh	r7, [r4, #20]
 8014da8:	f00a ff63 	bl	801fc72 <memcpy>
 8014dac:	4630      	mov	r0, r6
 8014dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014db0:	200b      	movs	r0, #11
 8014db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014db4:	200b      	movs	r0, #11
 8014db6:	4770      	bx	lr

08014db8 <rcl_node_resolve_name>:
 8014db8:	b082      	sub	sp, #8
 8014dba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbe:	b091      	sub	sp, #68	@ 0x44
 8014dc0:	ac1a      	add	r4, sp, #104	@ 0x68
 8014dc2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014dc6:	e884 000c 	stmia.w	r4, {r2, r3}
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	d03d      	beq.n	8014e4a <rcl_node_resolve_name+0x92>
 8014dce:	460c      	mov	r4, r1
 8014dd0:	4605      	mov	r5, r0
 8014dd2:	f7ff ffb3 	bl	8014d3c <rcl_node_get_options>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	d03a      	beq.n	8014e50 <rcl_node_resolve_name+0x98>
 8014dda:	4628      	mov	r0, r5
 8014ddc:	f7ff ff9e 	bl	8014d1c <rcl_node_get_name>
 8014de0:	4606      	mov	r6, r0
 8014de2:	4628      	mov	r0, r5
 8014de4:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014de6:	f7ff ffa1 	bl	8014d2c <rcl_node_get_namespace>
 8014dea:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014dee:	4607      	mov	r7, r0
 8014df0:	46ac      	mov	ip, r5
 8014df2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014df6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dfa:	f8de 3000 	ldr.w	r3, [lr]
 8014dfe:	f8cc 3000 	str.w	r3, [ip]
 8014e02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e04:	b30b      	cbz	r3, 8014e4a <rcl_node_resolve_name+0x92>
 8014e06:	4689      	mov	r9, r1
 8014e08:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8014e0c:	f002 fcd0 	bl	80177b0 <rcutils_get_zero_initialized_string_map>
 8014e10:	ab10      	add	r3, sp, #64	@ 0x40
 8014e12:	9008      	str	r0, [sp, #32]
 8014e14:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014e18:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	a808      	add	r0, sp, #32
 8014e20:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014e24:	f002 fd3a 	bl	801789c <rcutils_string_map_init>
 8014e28:	4683      	mov	fp, r0
 8014e2a:	b1a0      	cbz	r0, 8014e56 <rcl_node_resolve_name+0x9e>
 8014e2c:	f7fe fcce 	bl	80137cc <rcutils_get_error_string>
 8014e30:	f7fe fce2 	bl	80137f8 <rcutils_reset_error>
 8014e34:	f1bb 0f0a 	cmp.w	fp, #10
 8014e38:	bf18      	it	ne
 8014e3a:	f04f 0b01 	movne.w	fp, #1
 8014e3e:	4658      	mov	r0, fp
 8014e40:	b011      	add	sp, #68	@ 0x44
 8014e42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e46:	b002      	add	sp, #8
 8014e48:	4770      	bx	lr
 8014e4a:	f04f 0b0b 	mov.w	fp, #11
 8014e4e:	e7f6      	b.n	8014e3e <rcl_node_resolve_name+0x86>
 8014e50:	f04f 0b01 	mov.w	fp, #1
 8014e54:	e7f3      	b.n	8014e3e <rcl_node_resolve_name+0x86>
 8014e56:	9009      	str	r0, [sp, #36]	@ 0x24
 8014e58:	9007      	str	r0, [sp, #28]
 8014e5a:	a808      	add	r0, sp, #32
 8014e5c:	f008 ff66 	bl	801dd2c <rcl_get_default_topic_name_substitutions>
 8014e60:	4683      	mov	fp, r0
 8014e62:	b180      	cbz	r0, 8014e86 <rcl_node_resolve_name+0xce>
 8014e64:	280a      	cmp	r0, #10
 8014e66:	a808      	add	r0, sp, #32
 8014e68:	bf18      	it	ne
 8014e6a:	f04f 0b01 	movne.w	fp, #1
 8014e6e:	f002 fd55 	bl	801791c <rcutils_string_map_fini>
 8014e72:	4604      	mov	r4, r0
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d15b      	bne.n	8014f30 <rcl_node_resolve_name+0x178>
 8014e78:	4651      	mov	r1, sl
 8014e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e7c:	47c8      	blx	r9
 8014e7e:	4651      	mov	r1, sl
 8014e80:	4620      	mov	r0, r4
 8014e82:	47c8      	blx	r9
 8014e84:	e7db      	b.n	8014e3e <rcl_node_resolve_name+0x86>
 8014e86:	ab09      	add	r3, sp, #36	@ 0x24
 8014e88:	46ec      	mov	ip, sp
 8014e8a:	9305      	str	r3, [sp, #20]
 8014e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e92:	682b      	ldr	r3, [r5, #0]
 8014e94:	463a      	mov	r2, r7
 8014e96:	4631      	mov	r1, r6
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f8cc 3000 	str.w	r3, [ip]
 8014e9e:	ab08      	add	r3, sp, #32
 8014ea0:	f008 fde4 	bl	801da6c <rcl_expand_topic_name>
 8014ea4:	4683      	mov	fp, r0
 8014ea6:	b9d8      	cbnz	r0, 8014ee0 <rcl_node_resolve_name+0x128>
 8014ea8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014eaa:	4602      	mov	r2, r0
 8014eac:	9009      	str	r0, [sp, #36]	@ 0x24
 8014eae:	a90a      	add	r1, sp, #40	@ 0x28
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f002 fe01 	bl	8017ab8 <rmw_validate_full_topic_name>
 8014eb6:	bb50      	cbnz	r0, 8014f0e <rcl_node_resolve_name+0x156>
 8014eb8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014eba:	2d00      	cmp	r5, #0
 8014ebc:	d140      	bne.n	8014f40 <rcl_node_resolve_name+0x188>
 8014ebe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014ec0:	a808      	add	r0, sp, #32
 8014ec2:	601c      	str	r4, [r3, #0]
 8014ec4:	f002 fd2a 	bl	801791c <rcutils_string_map_fini>
 8014ec8:	4683      	mov	fp, r0
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	d043      	beq.n	8014f56 <rcl_node_resolve_name+0x19e>
 8014ece:	f7fe fc7d 	bl	80137cc <rcutils_get_error_string>
 8014ed2:	46a8      	mov	r8, r5
 8014ed4:	f04f 0b01 	mov.w	fp, #1
 8014ed8:	462c      	mov	r4, r5
 8014eda:	f7fe fc8d 	bl	80137f8 <rcutils_reset_error>
 8014ede:	e00a      	b.n	8014ef6 <rcl_node_resolve_name+0x13e>
 8014ee0:	2867      	cmp	r0, #103	@ 0x67
 8014ee2:	bf14      	ite	ne
 8014ee4:	f04f 0800 	movne.w	r8, #0
 8014ee8:	f008 0801 	andeq.w	r8, r8, #1
 8014eec:	9c07      	ldr	r4, [sp, #28]
 8014eee:	a808      	add	r0, sp, #32
 8014ef0:	f002 fd14 	bl	801791c <rcutils_string_map_fini>
 8014ef4:	bb50      	cbnz	r0, 8014f4c <rcl_node_resolve_name+0x194>
 8014ef6:	4651      	mov	r1, sl
 8014ef8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014efa:	47c8      	blx	r9
 8014efc:	4651      	mov	r1, sl
 8014efe:	4620      	mov	r0, r4
 8014f00:	47c8      	blx	r9
 8014f02:	f1b8 0f00 	cmp.w	r8, #0
 8014f06:	bf18      	it	ne
 8014f08:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8014f0c:	e797      	b.n	8014e3e <rcl_node_resolve_name+0x86>
 8014f0e:	f7fe fc5d 	bl	80137cc <rcutils_get_error_string>
 8014f12:	f7fe fc71 	bl	80137f8 <rcutils_reset_error>
 8014f16:	a808      	add	r0, sp, #32
 8014f18:	f002 fd00 	bl	801791c <rcutils_string_map_fini>
 8014f1c:	b998      	cbnz	r0, 8014f46 <rcl_node_resolve_name+0x18e>
 8014f1e:	4651      	mov	r1, sl
 8014f20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f22:	47c8      	blx	r9
 8014f24:	4651      	mov	r1, sl
 8014f26:	4620      	mov	r0, r4
 8014f28:	f04f 0b01 	mov.w	fp, #1
 8014f2c:	47c8      	blx	r9
 8014f2e:	e786      	b.n	8014e3e <rcl_node_resolve_name+0x86>
 8014f30:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014f34:	f7fe fc4a 	bl	80137cc <rcutils_get_error_string>
 8014f38:	f7fe fc5e 	bl	80137f8 <rcutils_reset_error>
 8014f3c:	4644      	mov	r4, r8
 8014f3e:	e7da      	b.n	8014ef6 <rcl_node_resolve_name+0x13e>
 8014f40:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8014f44:	e7d3      	b.n	8014eee <rcl_node_resolve_name+0x136>
 8014f46:	46d8      	mov	r8, fp
 8014f48:	f04f 0b01 	mov.w	fp, #1
 8014f4c:	f7fe fc3e 	bl	80137cc <rcutils_get_error_string>
 8014f50:	f7fe fc52 	bl	80137f8 <rcutils_reset_error>
 8014f54:	e7cf      	b.n	8014ef6 <rcl_node_resolve_name+0x13e>
 8014f56:	4651      	mov	r1, sl
 8014f58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f5a:	47c8      	blx	r9
 8014f5c:	4651      	mov	r1, sl
 8014f5e:	4658      	mov	r0, fp
 8014f60:	47c8      	blx	r9
 8014f62:	e76c      	b.n	8014e3e <rcl_node_resolve_name+0x86>

08014f64 <rcl_get_zero_initialized_publisher>:
 8014f64:	4b01      	ldr	r3, [pc, #4]	@ (8014f6c <rcl_get_zero_initialized_publisher+0x8>)
 8014f66:	6818      	ldr	r0, [r3, #0]
 8014f68:	4770      	bx	lr
 8014f6a:	bf00      	nop
 8014f6c:	080225e8 	.word	0x080225e8

08014f70 <rcl_publisher_init>:
 8014f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f74:	b088      	sub	sp, #32
 8014f76:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014f78:	2e00      	cmp	r6, #0
 8014f7a:	d06b      	beq.n	8015054 <rcl_publisher_init+0xe4>
 8014f7c:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8014f80:	4605      	mov	r5, r0
 8014f82:	460f      	mov	r7, r1
 8014f84:	4690      	mov	r8, r2
 8014f86:	4650      	mov	r0, sl
 8014f88:	4699      	mov	r9, r3
 8014f8a:	f7fe fc11 	bl	80137b0 <rcutils_allocator_is_valid>
 8014f8e:	f080 0401 	eor.w	r4, r0, #1
 8014f92:	b2e4      	uxtb	r4, r4
 8014f94:	2c00      	cmp	r4, #0
 8014f96:	d15d      	bne.n	8015054 <rcl_publisher_init+0xe4>
 8014f98:	2d00      	cmp	r5, #0
 8014f9a:	d05b      	beq.n	8015054 <rcl_publisher_init+0xe4>
 8014f9c:	682b      	ldr	r3, [r5, #0]
 8014f9e:	b123      	cbz	r3, 8014faa <rcl_publisher_init+0x3a>
 8014fa0:	2464      	movs	r4, #100	@ 0x64
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	b008      	add	sp, #32
 8014fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014faa:	4638      	mov	r0, r7
 8014fac:	f7ff feac 	bl	8014d08 <rcl_node_is_valid>
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	d054      	beq.n	801505e <rcl_publisher_init+0xee>
 8014fb4:	f1b8 0f00 	cmp.w	r8, #0
 8014fb8:	d04c      	beq.n	8015054 <rcl_publisher_init+0xe4>
 8014fba:	fab9 f389 	clz	r3, r9
 8014fbe:	095b      	lsrs	r3, r3, #5
 8014fc0:	f1b9 0f00 	cmp.w	r9, #0
 8014fc4:	d046      	beq.n	8015054 <rcl_publisher_init+0xe4>
 8014fc6:	aa07      	add	r2, sp, #28
 8014fc8:	9307      	str	r3, [sp, #28]
 8014fca:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014fce:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8014fd2:	9205      	str	r2, [sp, #20]
 8014fd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014fd8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014fdc:	4649      	mov	r1, r9
 8014fde:	4638      	mov	r0, r7
 8014fe0:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8014fe4:	f7ff fee8 	bl	8014db8 <rcl_node_resolve_name>
 8014fe8:	2800      	cmp	r0, #0
 8014fea:	d14f      	bne.n	801508c <rcl_publisher_init+0x11c>
 8014fec:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8014fee:	20c8      	movs	r0, #200	@ 0xc8
 8014ff0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014ff2:	4798      	blx	r3
 8014ff4:	6028      	str	r0, [r5, #0]
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d050      	beq.n	801509c <rcl_publisher_init+0x12c>
 8014ffa:	4638      	mov	r0, r7
 8014ffc:	f7ff fea6 	bl	8014d4c <rcl_node_get_rmw_handle>
 8015000:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8015004:	4641      	mov	r1, r8
 8015006:	9a07      	ldr	r2, [sp, #28]
 8015008:	9300      	str	r3, [sp, #0]
 801500a:	4633      	mov	r3, r6
 801500c:	682c      	ldr	r4, [r5, #0]
 801500e:	f003 fa67 	bl	80184e0 <rmw_create_publisher>
 8015012:	682b      	ldr	r3, [r5, #0]
 8015014:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8015018:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801501c:	b370      	cbz	r0, 801507c <rcl_publisher_init+0x10c>
 801501e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8015022:	f003 fb41 	bl	80186a8 <rmw_publisher_get_actual_qos>
 8015026:	682b      	ldr	r3, [r5, #0]
 8015028:	4604      	mov	r4, r0
 801502a:	b9d0      	cbnz	r0, 8015062 <rcl_publisher_init+0xf2>
 801502c:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8015030:	4631      	mov	r1, r6
 8015032:	4618      	mov	r0, r3
 8015034:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8015038:	2270      	movs	r2, #112	@ 0x70
 801503a:	f00a fe1a 	bl	801fc72 <memcpy>
 801503e:	683a      	ldr	r2, [r7, #0]
 8015040:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8015044:	9807      	ldr	r0, [sp, #28]
 8015046:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015048:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801504a:	4798      	blx	r3
 801504c:	4620      	mov	r0, r4
 801504e:	b008      	add	sp, #32
 8015050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015054:	240b      	movs	r4, #11
 8015056:	4620      	mov	r0, r4
 8015058:	b008      	add	sp, #32
 801505a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801505e:	24c8      	movs	r4, #200	@ 0xc8
 8015060:	e79f      	b.n	8014fa2 <rcl_publisher_init+0x32>
 8015062:	b1cb      	cbz	r3, 8015098 <rcl_publisher_init+0x128>
 8015064:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8015068:	b142      	cbz	r2, 801507c <rcl_publisher_init+0x10c>
 801506a:	4638      	mov	r0, r7
 801506c:	f7ff fe6e 	bl	8014d4c <rcl_node_get_rmw_handle>
 8015070:	682b      	ldr	r3, [r5, #0]
 8015072:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8015076:	f003 fb2b 	bl	80186d0 <rmw_destroy_publisher>
 801507a:	682b      	ldr	r3, [r5, #0]
 801507c:	4618      	mov	r0, r3
 801507e:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8015080:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015082:	2401      	movs	r4, #1
 8015084:	4790      	blx	r2
 8015086:	2300      	movs	r3, #0
 8015088:	602b      	str	r3, [r5, #0]
 801508a:	e7db      	b.n	8015044 <rcl_publisher_init+0xd4>
 801508c:	2867      	cmp	r0, #103	@ 0x67
 801508e:	d007      	beq.n	80150a0 <rcl_publisher_init+0x130>
 8015090:	2869      	cmp	r0, #105	@ 0x69
 8015092:	d005      	beq.n	80150a0 <rcl_publisher_init+0x130>
 8015094:	280a      	cmp	r0, #10
 8015096:	d001      	beq.n	801509c <rcl_publisher_init+0x12c>
 8015098:	2401      	movs	r4, #1
 801509a:	e7d3      	b.n	8015044 <rcl_publisher_init+0xd4>
 801509c:	240a      	movs	r4, #10
 801509e:	e7d1      	b.n	8015044 <rcl_publisher_init+0xd4>
 80150a0:	2467      	movs	r4, #103	@ 0x67
 80150a2:	e7cf      	b.n	8015044 <rcl_publisher_init+0xd4>

080150a4 <rcl_publisher_get_default_options>:
 80150a4:	b570      	push	{r4, r5, r6, lr}
 80150a6:	4d14      	ldr	r5, [pc, #80]	@ (80150f8 <rcl_publisher_get_default_options+0x54>)
 80150a8:	b088      	sub	sp, #32
 80150aa:	4604      	mov	r4, r0
 80150ac:	2250      	movs	r2, #80	@ 0x50
 80150ae:	4913      	ldr	r1, [pc, #76]	@ (80150fc <rcl_publisher_get_default_options+0x58>)
 80150b0:	4628      	mov	r0, r5
 80150b2:	f00a fdde 	bl	801fc72 <memcpy>
 80150b6:	a802      	add	r0, sp, #8
 80150b8:	f7fe fb6c 	bl	8013794 <rcutils_get_default_allocator>
 80150bc:	f10d 0c08 	add.w	ip, sp, #8
 80150c0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80150c4:	466e      	mov	r6, sp
 80150c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80150ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80150ce:	f8dc 3000 	ldr.w	r3, [ip]
 80150d2:	4630      	mov	r0, r6
 80150d4:	f8ce 3000 	str.w	r3, [lr]
 80150d8:	f002 fcbe 	bl	8017a58 <rmw_get_default_publisher_options>
 80150dc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80150e0:	2270      	movs	r2, #112	@ 0x70
 80150e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80150e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80150ea:	4629      	mov	r1, r5
 80150ec:	4620      	mov	r0, r4
 80150ee:	f00a fdc0 	bl	801fc72 <memcpy>
 80150f2:	4620      	mov	r0, r4
 80150f4:	b008      	add	sp, #32
 80150f6:	bd70      	pop	{r4, r5, r6, pc}
 80150f8:	240647b0 	.word	0x240647b0
 80150fc:	080225f0 	.word	0x080225f0

08015100 <rcl_publisher_is_valid>:
 8015100:	b1a0      	cbz	r0, 801512c <rcl_publisher_is_valid+0x2c>
 8015102:	6803      	ldr	r3, [r0, #0]
 8015104:	b510      	push	{r4, lr}
 8015106:	4604      	mov	r4, r0
 8015108:	b173      	cbz	r3, 8015128 <rcl_publisher_is_valid+0x28>
 801510a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801510e:	b15a      	cbz	r2, 8015128 <rcl_publisher_is_valid+0x28>
 8015110:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8015114:	f7ff fa18 	bl	8014548 <rcl_context_is_valid>
 8015118:	b130      	cbz	r0, 8015128 <rcl_publisher_is_valid+0x28>
 801511a:	6823      	ldr	r3, [r4, #0]
 801511c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8015120:	3800      	subs	r0, #0
 8015122:	bf18      	it	ne
 8015124:	2001      	movne	r0, #1
 8015126:	bd10      	pop	{r4, pc}
 8015128:	2000      	movs	r0, #0
 801512a:	bd10      	pop	{r4, pc}
 801512c:	2000      	movs	r0, #0
 801512e:	4770      	bx	lr

08015130 <rcl_publisher_is_valid_except_context>:
 8015130:	b130      	cbz	r0, 8015140 <rcl_publisher_is_valid_except_context+0x10>
 8015132:	6800      	ldr	r0, [r0, #0]
 8015134:	b120      	cbz	r0, 8015140 <rcl_publisher_is_valid_except_context+0x10>
 8015136:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801513a:	3800      	subs	r0, #0
 801513c:	bf18      	it	ne
 801513e:	2001      	movne	r0, #1
 8015140:	4770      	bx	lr
 8015142:	bf00      	nop

08015144 <exact_match_lookup>:
 8015144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015146:	f102 0708 	add.w	r7, r2, #8
 801514a:	460b      	mov	r3, r1
 801514c:	b085      	sub	sp, #20
 801514e:	4614      	mov	r4, r2
 8015150:	4606      	mov	r6, r0
 8015152:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015156:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801515a:	4618      	mov	r0, r3
 801515c:	4919      	ldr	r1, [pc, #100]	@ (80151c4 <exact_match_lookup+0x80>)
 801515e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015162:	f002 f99f 	bl	80174a4 <rcutils_join_path>
 8015166:	7833      	ldrb	r3, [r6, #0]
 8015168:	4605      	mov	r5, r0
 801516a:	2b2f      	cmp	r3, #47	@ 0x2f
 801516c:	d023      	beq.n	80151b6 <exact_match_lookup+0x72>
 801516e:	f104 030c 	add.w	r3, r4, #12
 8015172:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015176:	e88d 0003 	stmia.w	sp, {r0, r1}
 801517a:	1c70      	adds	r0, r6, #1
 801517c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015180:	f002 f996 	bl	80174b0 <rcutils_to_native_path>
 8015184:	4606      	mov	r6, r0
 8015186:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801518a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801518e:	4631      	mov	r1, r6
 8015190:	4628      	mov	r0, r5
 8015192:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015196:	f002 f985 	bl	80174a4 <rcutils_join_path>
 801519a:	4603      	mov	r3, r0
 801519c:	4630      	mov	r0, r6
 801519e:	6862      	ldr	r2, [r4, #4]
 80151a0:	461e      	mov	r6, r3
 80151a2:	6921      	ldr	r1, [r4, #16]
 80151a4:	4790      	blx	r2
 80151a6:	4628      	mov	r0, r5
 80151a8:	4635      	mov	r5, r6
 80151aa:	6863      	ldr	r3, [r4, #4]
 80151ac:	6921      	ldr	r1, [r4, #16]
 80151ae:	4798      	blx	r3
 80151b0:	4628      	mov	r0, r5
 80151b2:	b005      	add	sp, #20
 80151b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151b6:	7873      	ldrb	r3, [r6, #1]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d1d8      	bne.n	801516e <exact_match_lookup+0x2a>
 80151bc:	4628      	mov	r0, r5
 80151be:	b005      	add	sp, #20
 80151c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151c2:	bf00      	nop
 80151c4:	0802267c 	.word	0x0802267c

080151c8 <rcl_get_secure_root>:
 80151c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151cc:	b085      	sub	sp, #20
 80151ce:	b168      	cbz	r0, 80151ec <rcl_get_secure_root+0x24>
 80151d0:	4607      	mov	r7, r0
 80151d2:	4608      	mov	r0, r1
 80151d4:	460c      	mov	r4, r1
 80151d6:	f7fe faeb 	bl	80137b0 <rcutils_allocator_is_valid>
 80151da:	b138      	cbz	r0, 80151ec <rcl_get_secure_root+0x24>
 80151dc:	2300      	movs	r3, #0
 80151de:	482d      	ldr	r0, [pc, #180]	@ (8015294 <rcl_get_secure_root+0xcc>)
 80151e0:	a903      	add	r1, sp, #12
 80151e2:	9303      	str	r3, [sp, #12]
 80151e4:	f002 f944 	bl	8017470 <rcutils_get_env>
 80151e8:	4605      	mov	r5, r0
 80151ea:	b120      	cbz	r0, 80151f6 <rcl_get_secure_root+0x2e>
 80151ec:	2500      	movs	r5, #0
 80151ee:	4628      	mov	r0, r5
 80151f0:	b005      	add	sp, #20
 80151f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151f6:	9b03      	ldr	r3, [sp, #12]
 80151f8:	781a      	ldrb	r2, [r3, #0]
 80151fa:	2a00      	cmp	r2, #0
 80151fc:	d0f6      	beq.n	80151ec <rcl_get_secure_root+0x24>
 80151fe:	f104 090c 	add.w	r9, r4, #12
 8015202:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015206:	e88d 0003 	stmia.w	sp, {r0, r1}
 801520a:	4618      	mov	r0, r3
 801520c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015210:	f002 fa90 	bl	8017734 <rcutils_strdup>
 8015214:	4680      	mov	r8, r0
 8015216:	2800      	cmp	r0, #0
 8015218:	d0e8      	beq.n	80151ec <rcl_get_secure_root+0x24>
 801521a:	a903      	add	r1, sp, #12
 801521c:	481e      	ldr	r0, [pc, #120]	@ (8015298 <rcl_get_secure_root+0xd0>)
 801521e:	9503      	str	r5, [sp, #12]
 8015220:	f002 f926 	bl	8017470 <rcutils_get_env>
 8015224:	b160      	cbz	r0, 8015240 <rcl_get_secure_root+0x78>
 8015226:	2600      	movs	r6, #0
 8015228:	4630      	mov	r0, r6
 801522a:	6863      	ldr	r3, [r4, #4]
 801522c:	6921      	ldr	r1, [r4, #16]
 801522e:	4798      	blx	r3
 8015230:	4640      	mov	r0, r8
 8015232:	6863      	ldr	r3, [r4, #4]
 8015234:	6921      	ldr	r1, [r4, #16]
 8015236:	4798      	blx	r3
 8015238:	4628      	mov	r0, r5
 801523a:	b005      	add	sp, #20
 801523c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015240:	9b03      	ldr	r3, [sp, #12]
 8015242:	781e      	ldrb	r6, [r3, #0]
 8015244:	b1f6      	cbz	r6, 8015284 <rcl_get_secure_root+0xbc>
 8015246:	e899 0003 	ldmia.w	r9, {r0, r1}
 801524a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801524e:	4618      	mov	r0, r3
 8015250:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015254:	f002 fa6e 	bl	8017734 <rcutils_strdup>
 8015258:	4606      	mov	r6, r0
 801525a:	2800      	cmp	r0, #0
 801525c:	d0e3      	beq.n	8015226 <rcl_get_secure_root+0x5e>
 801525e:	4622      	mov	r2, r4
 8015260:	4641      	mov	r1, r8
 8015262:	f7ff ff6f 	bl	8015144 <exact_match_lookup>
 8015266:	4605      	mov	r5, r0
 8015268:	2d00      	cmp	r5, #0
 801526a:	d0dd      	beq.n	8015228 <rcl_get_secure_root+0x60>
 801526c:	4628      	mov	r0, r5
 801526e:	f002 f917 	bl	80174a0 <rcutils_is_directory>
 8015272:	4603      	mov	r3, r0
 8015274:	2800      	cmp	r0, #0
 8015276:	d1d7      	bne.n	8015228 <rcl_get_secure_root+0x60>
 8015278:	4628      	mov	r0, r5
 801527a:	6921      	ldr	r1, [r4, #16]
 801527c:	461d      	mov	r5, r3
 801527e:	6863      	ldr	r3, [r4, #4]
 8015280:	4798      	blx	r3
 8015282:	e7d1      	b.n	8015228 <rcl_get_secure_root+0x60>
 8015284:	4622      	mov	r2, r4
 8015286:	4638      	mov	r0, r7
 8015288:	4641      	mov	r1, r8
 801528a:	f7ff ff5b 	bl	8015144 <exact_match_lookup>
 801528e:	4605      	mov	r5, r0
 8015290:	e7ea      	b.n	8015268 <rcl_get_secure_root+0xa0>
 8015292:	bf00      	nop
 8015294:	08022688 	.word	0x08022688
 8015298:	080226a0 	.word	0x080226a0

0801529c <rcl_get_security_options_from_environment>:
 801529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152a0:	b082      	sub	sp, #8
 80152a2:	2300      	movs	r3, #0
 80152a4:	4606      	mov	r6, r0
 80152a6:	460f      	mov	r7, r1
 80152a8:	4821      	ldr	r0, [pc, #132]	@ (8015330 <rcl_get_security_options_from_environment+0x94>)
 80152aa:	a901      	add	r1, sp, #4
 80152ac:	4690      	mov	r8, r2
 80152ae:	9301      	str	r3, [sp, #4]
 80152b0:	f002 f8de 	bl	8017470 <rcutils_get_env>
 80152b4:	b120      	cbz	r0, 80152c0 <rcl_get_security_options_from_environment+0x24>
 80152b6:	2501      	movs	r5, #1
 80152b8:	4628      	mov	r0, r5
 80152ba:	b002      	add	sp, #8
 80152bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c0:	4604      	mov	r4, r0
 80152c2:	491c      	ldr	r1, [pc, #112]	@ (8015334 <rcl_get_security_options_from_environment+0x98>)
 80152c4:	9801      	ldr	r0, [sp, #4]
 80152c6:	f7eb f80b 	bl	80002e0 <strcmp>
 80152ca:	4605      	mov	r5, r0
 80152cc:	b9f0      	cbnz	r0, 801530c <rcl_get_security_options_from_environment+0x70>
 80152ce:	9001      	str	r0, [sp, #4]
 80152d0:	f1b8 0f00 	cmp.w	r8, #0
 80152d4:	d021      	beq.n	801531a <rcl_get_security_options_from_environment+0x7e>
 80152d6:	a901      	add	r1, sp, #4
 80152d8:	4817      	ldr	r0, [pc, #92]	@ (8015338 <rcl_get_security_options_from_environment+0x9c>)
 80152da:	f002 f8c9 	bl	8017470 <rcutils_get_env>
 80152de:	2800      	cmp	r0, #0
 80152e0:	d1e9      	bne.n	80152b6 <rcl_get_security_options_from_environment+0x1a>
 80152e2:	4916      	ldr	r1, [pc, #88]	@ (801533c <rcl_get_security_options_from_environment+0xa0>)
 80152e4:	9801      	ldr	r0, [sp, #4]
 80152e6:	f7ea fffb 	bl	80002e0 <strcmp>
 80152ea:	4603      	mov	r3, r0
 80152ec:	4639      	mov	r1, r7
 80152ee:	4630      	mov	r0, r6
 80152f0:	fab3 f383 	clz	r3, r3
 80152f4:	095b      	lsrs	r3, r3, #5
 80152f6:	f888 3000 	strb.w	r3, [r8]
 80152fa:	f7ff ff65 	bl	80151c8 <rcl_get_secure_root>
 80152fe:	b170      	cbz	r0, 801531e <rcl_get_security_options_from_environment+0x82>
 8015300:	f8c8 0004 	str.w	r0, [r8, #4]
 8015304:	4628      	mov	r0, r5
 8015306:	b002      	add	sp, #8
 8015308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801530c:	4625      	mov	r5, r4
 801530e:	f888 4000 	strb.w	r4, [r8]
 8015312:	4628      	mov	r0, r5
 8015314:	b002      	add	sp, #8
 8015316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801531a:	250b      	movs	r5, #11
 801531c:	e7cc      	b.n	80152b8 <rcl_get_security_options_from_environment+0x1c>
 801531e:	f898 5000 	ldrb.w	r5, [r8]
 8015322:	f1a5 0501 	sub.w	r5, r5, #1
 8015326:	fab5 f585 	clz	r5, r5
 801532a:	096d      	lsrs	r5, r5, #5
 801532c:	e7c4      	b.n	80152b8 <rcl_get_security_options_from_environment+0x1c>
 801532e:	bf00      	nop
 8015330:	08022640 	.word	0x08022640
 8015334:	08022654 	.word	0x08022654
 8015338:	0802265c 	.word	0x0802265c
 801533c:	08022674 	.word	0x08022674

08015340 <rcl_get_zero_initialized_service>:
 8015340:	4b01      	ldr	r3, [pc, #4]	@ (8015348 <rcl_get_zero_initialized_service+0x8>)
 8015342:	6818      	ldr	r0, [r3, #0]
 8015344:	4770      	bx	lr
 8015346:	bf00      	nop
 8015348:	080226c0 	.word	0x080226c0

0801534c <rcl_service_init>:
 801534c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015350:	b088      	sub	sp, #32
 8015352:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8015354:	b1ff      	cbz	r7, 8015396 <rcl_service_init+0x4a>
 8015356:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801535a:	4605      	mov	r5, r0
 801535c:	460e      	mov	r6, r1
 801535e:	4691      	mov	r9, r2
 8015360:	4650      	mov	r0, sl
 8015362:	4698      	mov	r8, r3
 8015364:	f7fe fa24 	bl	80137b0 <rcutils_allocator_is_valid>
 8015368:	f080 0401 	eor.w	r4, r0, #1
 801536c:	b2e4      	uxtb	r4, r4
 801536e:	b994      	cbnz	r4, 8015396 <rcl_service_init+0x4a>
 8015370:	b18d      	cbz	r5, 8015396 <rcl_service_init+0x4a>
 8015372:	4630      	mov	r0, r6
 8015374:	f7ff fcc8 	bl	8014d08 <rcl_node_is_valid>
 8015378:	2800      	cmp	r0, #0
 801537a:	d05d      	beq.n	8015438 <rcl_service_init+0xec>
 801537c:	f1b8 0f00 	cmp.w	r8, #0
 8015380:	d009      	beq.n	8015396 <rcl_service_init+0x4a>
 8015382:	f1b9 0f00 	cmp.w	r9, #0
 8015386:	d006      	beq.n	8015396 <rcl_service_init+0x4a>
 8015388:	682b      	ldr	r3, [r5, #0]
 801538a:	b14b      	cbz	r3, 80153a0 <rcl_service_init+0x54>
 801538c:	2464      	movs	r4, #100	@ 0x64
 801538e:	4620      	mov	r0, r4
 8015390:	b008      	add	sp, #32
 8015392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015396:	240b      	movs	r4, #11
 8015398:	4620      	mov	r0, r4
 801539a:	b008      	add	sp, #32
 801539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a0:	aa07      	add	r2, sp, #28
 80153a2:	9304      	str	r3, [sp, #16]
 80153a4:	9307      	str	r3, [sp, #28]
 80153a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80153aa:	9205      	str	r2, [sp, #20]
 80153ac:	2201      	movs	r2, #1
 80153ae:	9203      	str	r2, [sp, #12]
 80153b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80153b4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80153b8:	4641      	mov	r1, r8
 80153ba:	4630      	mov	r0, r6
 80153bc:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80153c0:	f7ff fcfa 	bl	8014db8 <rcl_node_resolve_name>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	d146      	bne.n	8015456 <rcl_service_init+0x10a>
 80153c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153ca:	f44f 7088 	mov.w	r0, #272	@ 0x110
 80153ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80153d0:	4798      	blx	r3
 80153d2:	6028      	str	r0, [r5, #0]
 80153d4:	2800      	cmp	r0, #0
 80153d6:	d046      	beq.n	8015466 <rcl_service_init+0x11a>
 80153d8:	4630      	mov	r0, r6
 80153da:	f7ff fcb7 	bl	8014d4c <rcl_node_get_rmw_handle>
 80153de:	463b      	mov	r3, r7
 80153e0:	4649      	mov	r1, r9
 80153e2:	9a07      	ldr	r2, [sp, #28]
 80153e4:	682c      	ldr	r4, [r5, #0]
 80153e6:	f003 fb17 	bl	8018a18 <rmw_create_service>
 80153ea:	682b      	ldr	r3, [r5, #0]
 80153ec:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 80153f0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80153f4:	b338      	cbz	r0, 8015446 <rcl_service_init+0xfa>
 80153f6:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80153fa:	f003 fc3f 	bl	8018c7c <rmw_service_request_subscription_get_actual_qos>
 80153fe:	bb00      	cbnz	r0, 8015442 <rcl_service_init+0xf6>
 8015400:	682b      	ldr	r3, [r5, #0]
 8015402:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8015406:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801540a:	f003 fc23 	bl	8018c54 <rmw_service_response_publisher_get_actual_qos>
 801540e:	4604      	mov	r4, r0
 8015410:	b9b8      	cbnz	r0, 8015442 <rcl_service_init+0xf6>
 8015412:	6828      	ldr	r0, [r5, #0]
 8015414:	2268      	movs	r2, #104	@ 0x68
 8015416:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801541a:	4639      	mov	r1, r7
 801541c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8015420:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8015424:	f00a fc25 	bl	801fc72 <memcpy>
 8015428:	9807      	ldr	r0, [sp, #28]
 801542a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801542c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801542e:	4798      	blx	r3
 8015430:	4620      	mov	r0, r4
 8015432:	b008      	add	sp, #32
 8015434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015438:	24c8      	movs	r4, #200	@ 0xc8
 801543a:	4620      	mov	r0, r4
 801543c:	b008      	add	sp, #32
 801543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015442:	682b      	ldr	r3, [r5, #0]
 8015444:	b16b      	cbz	r3, 8015462 <rcl_service_init+0x116>
 8015446:	4618      	mov	r0, r3
 8015448:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801544a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801544c:	2401      	movs	r4, #1
 801544e:	4790      	blx	r2
 8015450:	2300      	movs	r3, #0
 8015452:	602b      	str	r3, [r5, #0]
 8015454:	e7e8      	b.n	8015428 <rcl_service_init+0xdc>
 8015456:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801545a:	2b01      	cmp	r3, #1
 801545c:	d905      	bls.n	801546a <rcl_service_init+0x11e>
 801545e:	280a      	cmp	r0, #10
 8015460:	d001      	beq.n	8015466 <rcl_service_init+0x11a>
 8015462:	2401      	movs	r4, #1
 8015464:	e7e0      	b.n	8015428 <rcl_service_init+0xdc>
 8015466:	240a      	movs	r4, #10
 8015468:	e7de      	b.n	8015428 <rcl_service_init+0xdc>
 801546a:	2468      	movs	r4, #104	@ 0x68
 801546c:	e7dc      	b.n	8015428 <rcl_service_init+0xdc>
 801546e:	bf00      	nop

08015470 <rcl_service_get_default_options>:
 8015470:	b530      	push	{r4, r5, lr}
 8015472:	4d0f      	ldr	r5, [pc, #60]	@ (80154b0 <rcl_service_get_default_options+0x40>)
 8015474:	b087      	sub	sp, #28
 8015476:	4604      	mov	r4, r0
 8015478:	2250      	movs	r2, #80	@ 0x50
 801547a:	490e      	ldr	r1, [pc, #56]	@ (80154b4 <rcl_service_get_default_options+0x44>)
 801547c:	4628      	mov	r0, r5
 801547e:	f00a fbf8 	bl	801fc72 <memcpy>
 8015482:	4668      	mov	r0, sp
 8015484:	f7fe f986 	bl	8013794 <rcutils_get_default_allocator>
 8015488:	46ec      	mov	ip, sp
 801548a:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801548e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015492:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015496:	f8dc 3000 	ldr.w	r3, [ip]
 801549a:	2268      	movs	r2, #104	@ 0x68
 801549c:	4629      	mov	r1, r5
 801549e:	4620      	mov	r0, r4
 80154a0:	f8ce 3000 	str.w	r3, [lr]
 80154a4:	f00a fbe5 	bl	801fc72 <memcpy>
 80154a8:	4620      	mov	r0, r4
 80154aa:	b007      	add	sp, #28
 80154ac:	bd30      	pop	{r4, r5, pc}
 80154ae:	bf00      	nop
 80154b0:	24064820 	.word	0x24064820
 80154b4:	080226c8 	.word	0x080226c8

080154b8 <rcl_service_get_rmw_handle>:
 80154b8:	b118      	cbz	r0, 80154c2 <rcl_service_get_rmw_handle+0xa>
 80154ba:	6800      	ldr	r0, [r0, #0]
 80154bc:	b108      	cbz	r0, 80154c2 <rcl_service_get_rmw_handle+0xa>
 80154be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80154c2:	4770      	bx	lr

080154c4 <rcl_take_request>:
 80154c4:	b570      	push	{r4, r5, r6, lr}
 80154c6:	468e      	mov	lr, r1
 80154c8:	b08c      	sub	sp, #48	@ 0x30
 80154ca:	460c      	mov	r4, r1
 80154cc:	4616      	mov	r6, r2
 80154ce:	f10d 0c18 	add.w	ip, sp, #24
 80154d2:	4605      	mov	r5, r0
 80154d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80154e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80154e4:	b30d      	cbz	r5, 801552a <rcl_take_request+0x66>
 80154e6:	682b      	ldr	r3, [r5, #0]
 80154e8:	b1fb      	cbz	r3, 801552a <rcl_take_request+0x66>
 80154ea:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80154ee:	b1e0      	cbz	r0, 801552a <rcl_take_request+0x66>
 80154f0:	b336      	cbz	r6, 8015540 <rcl_take_request+0x7c>
 80154f2:	2300      	movs	r3, #0
 80154f4:	4632      	mov	r2, r6
 80154f6:	a902      	add	r1, sp, #8
 80154f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80154fc:	f10d 0307 	add.w	r3, sp, #7
 8015500:	f003 f988 	bl	8018814 <rmw_take_request>
 8015504:	4605      	mov	r5, r0
 8015506:	b198      	cbz	r0, 8015530 <rcl_take_request+0x6c>
 8015508:	280a      	cmp	r0, #10
 801550a:	bf18      	it	ne
 801550c:	2501      	movne	r5, #1
 801550e:	f10d 0e18 	add.w	lr, sp, #24
 8015512:	46a4      	mov	ip, r4
 8015514:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015518:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801551c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015520:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015524:	4628      	mov	r0, r5
 8015526:	b00c      	add	sp, #48	@ 0x30
 8015528:	bd70      	pop	{r4, r5, r6, pc}
 801552a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801552e:	e7ee      	b.n	801550e <rcl_take_request+0x4a>
 8015530:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015534:	f240 2359 	movw	r3, #601	@ 0x259
 8015538:	2a00      	cmp	r2, #0
 801553a:	bf08      	it	eq
 801553c:	461d      	moveq	r5, r3
 801553e:	e7e6      	b.n	801550e <rcl_take_request+0x4a>
 8015540:	250b      	movs	r5, #11
 8015542:	e7e4      	b.n	801550e <rcl_take_request+0x4a>

08015544 <rcl_send_response>:
 8015544:	b170      	cbz	r0, 8015564 <rcl_send_response+0x20>
 8015546:	6800      	ldr	r0, [r0, #0]
 8015548:	b160      	cbz	r0, 8015564 <rcl_send_response+0x20>
 801554a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801554e:	b148      	cbz	r0, 8015564 <rcl_send_response+0x20>
 8015550:	b169      	cbz	r1, 801556e <rcl_send_response+0x2a>
 8015552:	b510      	push	{r4, lr}
 8015554:	b14a      	cbz	r2, 801556a <rcl_send_response+0x26>
 8015556:	f003 f9bb 	bl	80188d0 <rmw_send_response>
 801555a:	b110      	cbz	r0, 8015562 <rcl_send_response+0x1e>
 801555c:	2802      	cmp	r0, #2
 801555e:	bf18      	it	ne
 8015560:	2001      	movne	r0, #1
 8015562:	bd10      	pop	{r4, pc}
 8015564:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015568:	4770      	bx	lr
 801556a:	200b      	movs	r0, #11
 801556c:	bd10      	pop	{r4, pc}
 801556e:	200b      	movs	r0, #11
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop

08015574 <rcl_service_is_valid>:
 8015574:	b130      	cbz	r0, 8015584 <rcl_service_is_valid+0x10>
 8015576:	6800      	ldr	r0, [r0, #0]
 8015578:	b120      	cbz	r0, 8015584 <rcl_service_is_valid+0x10>
 801557a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801557e:	3800      	subs	r0, #0
 8015580:	bf18      	it	ne
 8015582:	2001      	movne	r0, #1
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop

08015588 <rcl_get_zero_initialized_subscription>:
 8015588:	4b01      	ldr	r3, [pc, #4]	@ (8015590 <rcl_get_zero_initialized_subscription+0x8>)
 801558a:	6818      	ldr	r0, [r3, #0]
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	08022718 	.word	0x08022718

08015594 <rcl_subscription_init>:
 8015594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015598:	b088      	sub	sp, #32
 801559a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801559c:	b1ff      	cbz	r7, 80155de <rcl_subscription_init+0x4a>
 801559e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 80155a2:	4605      	mov	r5, r0
 80155a4:	460e      	mov	r6, r1
 80155a6:	4691      	mov	r9, r2
 80155a8:	4650      	mov	r0, sl
 80155aa:	4698      	mov	r8, r3
 80155ac:	f7fe f900 	bl	80137b0 <rcutils_allocator_is_valid>
 80155b0:	f080 0401 	eor.w	r4, r0, #1
 80155b4:	b2e4      	uxtb	r4, r4
 80155b6:	b994      	cbnz	r4, 80155de <rcl_subscription_init+0x4a>
 80155b8:	b18d      	cbz	r5, 80155de <rcl_subscription_init+0x4a>
 80155ba:	4630      	mov	r0, r6
 80155bc:	f7ff fba4 	bl	8014d08 <rcl_node_is_valid>
 80155c0:	2800      	cmp	r0, #0
 80155c2:	d055      	beq.n	8015670 <rcl_subscription_init+0xdc>
 80155c4:	f1b9 0f00 	cmp.w	r9, #0
 80155c8:	d009      	beq.n	80155de <rcl_subscription_init+0x4a>
 80155ca:	f1b8 0f00 	cmp.w	r8, #0
 80155ce:	d006      	beq.n	80155de <rcl_subscription_init+0x4a>
 80155d0:	682b      	ldr	r3, [r5, #0]
 80155d2:	b14b      	cbz	r3, 80155e8 <rcl_subscription_init+0x54>
 80155d4:	2464      	movs	r4, #100	@ 0x64
 80155d6:	4620      	mov	r0, r4
 80155d8:	b008      	add	sp, #32
 80155da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155de:	240b      	movs	r4, #11
 80155e0:	4620      	mov	r0, r4
 80155e2:	b008      	add	sp, #32
 80155e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155e8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80155ec:	aa07      	add	r2, sp, #28
 80155ee:	9307      	str	r3, [sp, #28]
 80155f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80155f4:	9205      	str	r2, [sp, #20]
 80155f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80155fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80155fe:	4641      	mov	r1, r8
 8015600:	4630      	mov	r0, r6
 8015602:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8015606:	f7ff fbd7 	bl	8014db8 <rcl_node_resolve_name>
 801560a:	2800      	cmp	r0, #0
 801560c:	d15f      	bne.n	80156ce <rcl_subscription_init+0x13a>
 801560e:	21c8      	movs	r1, #200	@ 0xc8
 8015610:	2001      	movs	r0, #1
 8015612:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8015616:	4798      	blx	r3
 8015618:	6028      	str	r0, [r5, #0]
 801561a:	2800      	cmp	r0, #0
 801561c:	d05f      	beq.n	80156de <rcl_subscription_init+0x14a>
 801561e:	4630      	mov	r0, r6
 8015620:	f7ff fb94 	bl	8014d4c <rcl_node_get_rmw_handle>
 8015624:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015628:	4649      	mov	r1, r9
 801562a:	9a07      	ldr	r2, [sp, #28]
 801562c:	9300      	str	r3, [sp, #0]
 801562e:	463b      	mov	r3, r7
 8015630:	682c      	ldr	r4, [r5, #0]
 8015632:	f003 fb37 	bl	8018ca4 <rmw_create_subscription>
 8015636:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801563a:	682c      	ldr	r4, [r5, #0]
 801563c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8015640:	b348      	cbz	r0, 8015696 <rcl_subscription_init+0x102>
 8015642:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8015646:	f003 fc23 	bl	8018e90 <rmw_subscription_get_actual_qos>
 801564a:	4604      	mov	r4, r0
 801564c:	b9a8      	cbnz	r0, 801567a <rcl_subscription_init+0xe6>
 801564e:	6828      	ldr	r0, [r5, #0]
 8015650:	2270      	movs	r2, #112	@ 0x70
 8015652:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8015656:	4639      	mov	r1, r7
 8015658:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801565c:	f00a fb09 	bl	801fc72 <memcpy>
 8015660:	9807      	ldr	r0, [sp, #28]
 8015662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015664:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015666:	4798      	blx	r3
 8015668:	4620      	mov	r0, r4
 801566a:	b008      	add	sp, #32
 801566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015670:	24c8      	movs	r4, #200	@ 0xc8
 8015672:	4620      	mov	r0, r4
 8015674:	b008      	add	sp, #32
 8015676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801567a:	682c      	ldr	r4, [r5, #0]
 801567c:	b36c      	cbz	r4, 80156da <rcl_subscription_init+0x146>
 801567e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8015682:	b14b      	cbz	r3, 8015698 <rcl_subscription_init+0x104>
 8015684:	4630      	mov	r0, r6
 8015686:	f7ff fb61 	bl	8014d4c <rcl_node_get_rmw_handle>
 801568a:	682b      	ldr	r3, [r5, #0]
 801568c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015690:	f003 fc12 	bl	8018eb8 <rmw_destroy_subscription>
 8015694:	682c      	ldr	r4, [r5, #0]
 8015696:	b194      	cbz	r4, 80156be <rcl_subscription_init+0x12a>
 8015698:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801569c:	4630      	mov	r0, r6
 801569e:	f7fe f887 	bl	80137b0 <rcutils_allocator_is_valid>
 80156a2:	b158      	cbz	r0, 80156bc <rcl_subscription_init+0x128>
 80156a4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80156a6:	b148      	cbz	r0, 80156bc <rcl_subscription_init+0x128>
 80156a8:	4631      	mov	r1, r6
 80156aa:	f002 f9dd 	bl	8017a68 <rmw_subscription_content_filter_options_fini>
 80156ae:	4606      	mov	r6, r0
 80156b0:	b9c8      	cbnz	r0, 80156e6 <rcl_subscription_init+0x152>
 80156b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80156b4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80156b6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80156b8:	4798      	blx	r3
 80156ba:	66e6      	str	r6, [r4, #108]	@ 0x6c
 80156bc:	682c      	ldr	r4, [r5, #0]
 80156be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156c0:	4620      	mov	r0, r4
 80156c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80156c4:	2401      	movs	r4, #1
 80156c6:	4798      	blx	r3
 80156c8:	2300      	movs	r3, #0
 80156ca:	602b      	str	r3, [r5, #0]
 80156cc:	e7c8      	b.n	8015660 <rcl_subscription_init+0xcc>
 80156ce:	2867      	cmp	r0, #103	@ 0x67
 80156d0:	d007      	beq.n	80156e2 <rcl_subscription_init+0x14e>
 80156d2:	2869      	cmp	r0, #105	@ 0x69
 80156d4:	d005      	beq.n	80156e2 <rcl_subscription_init+0x14e>
 80156d6:	280a      	cmp	r0, #10
 80156d8:	d001      	beq.n	80156de <rcl_subscription_init+0x14a>
 80156da:	2401      	movs	r4, #1
 80156dc:	e7c0      	b.n	8015660 <rcl_subscription_init+0xcc>
 80156de:	240a      	movs	r4, #10
 80156e0:	e7be      	b.n	8015660 <rcl_subscription_init+0xcc>
 80156e2:	2467      	movs	r4, #103	@ 0x67
 80156e4:	e7bc      	b.n	8015660 <rcl_subscription_init+0xcc>
 80156e6:	f008 f979 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 80156ea:	682c      	ldr	r4, [r5, #0]
 80156ec:	e7e7      	b.n	80156be <rcl_subscription_init+0x12a>
 80156ee:	bf00      	nop

080156f0 <rcl_subscription_get_default_options>:
 80156f0:	b570      	push	{r4, r5, r6, lr}
 80156f2:	4d14      	ldr	r5, [pc, #80]	@ (8015744 <rcl_subscription_get_default_options+0x54>)
 80156f4:	b08a      	sub	sp, #40	@ 0x28
 80156f6:	4604      	mov	r4, r0
 80156f8:	2250      	movs	r2, #80	@ 0x50
 80156fa:	4913      	ldr	r1, [pc, #76]	@ (8015748 <rcl_subscription_get_default_options+0x58>)
 80156fc:	4628      	mov	r0, r5
 80156fe:	f00a fab8 	bl	801fc72 <memcpy>
 8015702:	a804      	add	r0, sp, #16
 8015704:	f7fe f846 	bl	8013794 <rcutils_get_default_allocator>
 8015708:	f10d 0c10 	add.w	ip, sp, #16
 801570c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015710:	466e      	mov	r6, sp
 8015712:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015716:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801571a:	f8dc 3000 	ldr.w	r3, [ip]
 801571e:	4630      	mov	r0, r6
 8015720:	f8ce 3000 	str.w	r3, [lr]
 8015724:	f002 f9ba 	bl	8017a9c <rmw_get_default_subscription_options>
 8015728:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801572c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015730:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015734:	2270      	movs	r2, #112	@ 0x70
 8015736:	4629      	mov	r1, r5
 8015738:	4620      	mov	r0, r4
 801573a:	f00a fa9a 	bl	801fc72 <memcpy>
 801573e:	4620      	mov	r0, r4
 8015740:	b00a      	add	sp, #40	@ 0x28
 8015742:	bd70      	pop	{r4, r5, r6, pc}
 8015744:	24064888 	.word	0x24064888
 8015748:	08022720 	.word	0x08022720

0801574c <rcl_take>:
 801574c:	2800      	cmp	r0, #0
 801574e:	d049      	beq.n	80157e4 <rcl_take+0x98>
 8015750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015754:	4615      	mov	r5, r2
 8015756:	6802      	ldr	r2, [r0, #0]
 8015758:	b0a4      	sub	sp, #144	@ 0x90
 801575a:	4604      	mov	r4, r0
 801575c:	2a00      	cmp	r2, #0
 801575e:	d039      	beq.n	80157d4 <rcl_take+0x88>
 8015760:	461f      	mov	r7, r3
 8015762:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8015766:	b3ab      	cbz	r3, 80157d4 <rcl_take+0x88>
 8015768:	460e      	mov	r6, r1
 801576a:	2900      	cmp	r1, #0
 801576c:	d038      	beq.n	80157e0 <rcl_take+0x94>
 801576e:	2d00      	cmp	r5, #0
 8015770:	d03c      	beq.n	80157ec <rcl_take+0xa0>
 8015772:	a802      	add	r0, sp, #8
 8015774:	f04f 0800 	mov.w	r8, #0
 8015778:	f002 f996 	bl	8017aa8 <rmw_get_zero_initialized_message_info>
 801577c:	f10d 0c08 	add.w	ip, sp, #8
 8015780:	46ae      	mov	lr, r5
 8015782:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015786:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801578a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801578e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015792:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015796:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801579a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801579e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80157a2:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80157a6:	462b      	mov	r3, r5
 80157a8:	6820      	ldr	r0, [r4, #0]
 80157aa:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80157ae:	4631      	mov	r1, r6
 80157b0:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80157b4:	9700      	str	r7, [sp, #0]
 80157b6:	f003 fbe1 	bl	8018f7c <rmw_take_with_info>
 80157ba:	4603      	mov	r3, r0
 80157bc:	b9c0      	cbnz	r0, 80157f0 <rcl_take+0xa4>
 80157be:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80157c2:	f240 1291 	movw	r2, #401	@ 0x191
 80157c6:	2900      	cmp	r1, #0
 80157c8:	bf08      	it	eq
 80157ca:	4613      	moveq	r3, r2
 80157cc:	4618      	mov	r0, r3
 80157ce:	b024      	add	sp, #144	@ 0x90
 80157d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80157d8:	4618      	mov	r0, r3
 80157da:	b024      	add	sp, #144	@ 0x90
 80157dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157e0:	230b      	movs	r3, #11
 80157e2:	e7f3      	b.n	80157cc <rcl_take+0x80>
 80157e4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80157e8:	4618      	mov	r0, r3
 80157ea:	4770      	bx	lr
 80157ec:	ad14      	add	r5, sp, #80	@ 0x50
 80157ee:	e7c0      	b.n	8015772 <rcl_take+0x26>
 80157f0:	f008 f8f4 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 80157f4:	4603      	mov	r3, r0
 80157f6:	e7e9      	b.n	80157cc <rcl_take+0x80>

080157f8 <rcl_subscription_get_rmw_handle>:
 80157f8:	b118      	cbz	r0, 8015802 <rcl_subscription_get_rmw_handle+0xa>
 80157fa:	6800      	ldr	r0, [r0, #0]
 80157fc:	b108      	cbz	r0, 8015802 <rcl_subscription_get_rmw_handle+0xa>
 80157fe:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015802:	4770      	bx	lr

08015804 <rcl_subscription_is_valid>:
 8015804:	b130      	cbz	r0, 8015814 <rcl_subscription_is_valid+0x10>
 8015806:	6800      	ldr	r0, [r0, #0]
 8015808:	b120      	cbz	r0, 8015814 <rcl_subscription_is_valid+0x10>
 801580a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801580e:	3800      	subs	r0, #0
 8015810:	bf18      	it	ne
 8015812:	2001      	movne	r0, #1
 8015814:	4770      	bx	lr
 8015816:	bf00      	nop

08015818 <rcl_get_system_time>:
 8015818:	4608      	mov	r0, r1
 801581a:	f7fe b809 	b.w	8013830 <rcutils_system_time_now>
 801581e:	bf00      	nop

08015820 <rcl_get_steady_time>:
 8015820:	4608      	mov	r0, r1
 8015822:	f7fe b82b 	b.w	801387c <rcutils_steady_time_now>
 8015826:	bf00      	nop

08015828 <rcl_get_ros_time>:
 8015828:	7a03      	ldrb	r3, [r0, #8]
 801582a:	b510      	push	{r4, lr}
 801582c:	460c      	mov	r4, r1
 801582e:	b143      	cbz	r3, 8015842 <rcl_get_ros_time+0x1a>
 8015830:	2105      	movs	r1, #5
 8015832:	f001 fd79 	bl	8017328 <__atomic_load_8>
 8015836:	4602      	mov	r2, r0
 8015838:	460b      	mov	r3, r1
 801583a:	2000      	movs	r0, #0
 801583c:	e9c4 2300 	strd	r2, r3, [r4]
 8015840:	bd10      	pop	{r4, pc}
 8015842:	4608      	mov	r0, r1
 8015844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015848:	f7fd bff2 	b.w	8013830 <rcutils_system_time_now>

0801584c <rcl_clock_init>:
 801584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584e:	4605      	mov	r5, r0
 8015850:	4610      	mov	r0, r2
 8015852:	4614      	mov	r4, r2
 8015854:	460e      	mov	r6, r1
 8015856:	f7fd ffab 	bl	80137b0 <rcutils_allocator_is_valid>
 801585a:	b128      	cbz	r0, 8015868 <rcl_clock_init+0x1c>
 801585c:	2d03      	cmp	r5, #3
 801585e:	d803      	bhi.n	8015868 <rcl_clock_init+0x1c>
 8015860:	e8df f005 	tbb	[pc, r5]
 8015864:	0659301f 	.word	0x0659301f
 8015868:	f04f 0c0b 	mov.w	ip, #11
 801586c:	4660      	mov	r0, ip
 801586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015870:	2c00      	cmp	r4, #0
 8015872:	d0f9      	beq.n	8015868 <rcl_clock_init+0x1c>
 8015874:	fab6 f386 	clz	r3, r6
 8015878:	095b      	lsrs	r3, r3, #5
 801587a:	2e00      	cmp	r6, #0
 801587c:	d0f4      	beq.n	8015868 <rcl_clock_init+0x1c>
 801587e:	6133      	str	r3, [r6, #16]
 8015880:	469c      	mov	ip, r3
 8015882:	f106 0514 	add.w	r5, r6, #20
 8015886:	4f32      	ldr	r7, [pc, #200]	@ (8015950 <rcl_clock_init+0x104>)
 8015888:	f04f 0e03 	mov.w	lr, #3
 801588c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015894:	6823      	ldr	r3, [r4, #0]
 8015896:	4660      	mov	r0, ip
 8015898:	602b      	str	r3, [r5, #0]
 801589a:	60f7      	str	r7, [r6, #12]
 801589c:	f886 e000 	strb.w	lr, [r6]
 80158a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158a2:	2e00      	cmp	r6, #0
 80158a4:	d0e0      	beq.n	8015868 <rcl_clock_init+0x1c>
 80158a6:	2300      	movs	r3, #0
 80158a8:	f106 0514 	add.w	r5, r6, #20
 80158ac:	7033      	strb	r3, [r6, #0]
 80158ae:	469c      	mov	ip, r3
 80158b0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80158b4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80158b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158bc:	6823      	ldr	r3, [r4, #0]
 80158be:	4660      	mov	r0, ip
 80158c0:	602b      	str	r3, [r5, #0]
 80158c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158c4:	2c00      	cmp	r4, #0
 80158c6:	d0cf      	beq.n	8015868 <rcl_clock_init+0x1c>
 80158c8:	fab6 f586 	clz	r5, r6
 80158cc:	096d      	lsrs	r5, r5, #5
 80158ce:	2e00      	cmp	r6, #0
 80158d0:	d0ca      	beq.n	8015868 <rcl_clock_init+0x1c>
 80158d2:	46a6      	mov	lr, r4
 80158d4:	7035      	strb	r5, [r6, #0]
 80158d6:	f106 0c14 	add.w	ip, r6, #20
 80158da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158de:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80158e2:	e9c6 5503 	strd	r5, r5, [r6, #12]
 80158e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158ea:	f8de 3000 	ldr.w	r3, [lr]
 80158ee:	2010      	movs	r0, #16
 80158f0:	f8cc 3000 	str.w	r3, [ip]
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	6921      	ldr	r1, [r4, #16]
 80158f8:	4798      	blx	r3
 80158fa:	6130      	str	r0, [r6, #16]
 80158fc:	b320      	cbz	r0, 8015948 <rcl_clock_init+0xfc>
 80158fe:	2200      	movs	r2, #0
 8015900:	2300      	movs	r3, #0
 8015902:	46ac      	mov	ip, r5
 8015904:	7205      	strb	r5, [r0, #8]
 8015906:	e9c0 2300 	strd	r2, r3, [r0]
 801590a:	4a12      	ldr	r2, [pc, #72]	@ (8015954 <rcl_clock_init+0x108>)
 801590c:	2301      	movs	r3, #1
 801590e:	4660      	mov	r0, ip
 8015910:	60f2      	str	r2, [r6, #12]
 8015912:	7033      	strb	r3, [r6, #0]
 8015914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015916:	2c00      	cmp	r4, #0
 8015918:	d0a6      	beq.n	8015868 <rcl_clock_init+0x1c>
 801591a:	fab6 f386 	clz	r3, r6
 801591e:	095b      	lsrs	r3, r3, #5
 8015920:	2e00      	cmp	r6, #0
 8015922:	d0a1      	beq.n	8015868 <rcl_clock_init+0x1c>
 8015924:	6133      	str	r3, [r6, #16]
 8015926:	469c      	mov	ip, r3
 8015928:	f106 0514 	add.w	r5, r6, #20
 801592c:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8015958 <rcl_clock_init+0x10c>
 8015930:	2702      	movs	r7, #2
 8015932:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801593a:	6823      	ldr	r3, [r4, #0]
 801593c:	4660      	mov	r0, ip
 801593e:	602b      	str	r3, [r5, #0]
 8015940:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015944:	7037      	strb	r7, [r6, #0]
 8015946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015948:	f04f 0c0a 	mov.w	ip, #10
 801594c:	e78e      	b.n	801586c <rcl_clock_init+0x20>
 801594e:	bf00      	nop
 8015950:	08015821 	.word	0x08015821
 8015954:	08015829 	.word	0x08015829
 8015958:	08015819 	.word	0x08015819

0801595c <rcl_clock_get_now>:
 801595c:	b140      	cbz	r0, 8015970 <rcl_clock_get_now+0x14>
 801595e:	b139      	cbz	r1, 8015970 <rcl_clock_get_now+0x14>
 8015960:	7803      	ldrb	r3, [r0, #0]
 8015962:	b11b      	cbz	r3, 801596c <rcl_clock_get_now+0x10>
 8015964:	68c3      	ldr	r3, [r0, #12]
 8015966:	b10b      	cbz	r3, 801596c <rcl_clock_get_now+0x10>
 8015968:	6900      	ldr	r0, [r0, #16]
 801596a:	4718      	bx	r3
 801596c:	2001      	movs	r0, #1
 801596e:	4770      	bx	lr
 8015970:	200b      	movs	r0, #11
 8015972:	4770      	bx	lr

08015974 <rcl_timer_call>:
 8015974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015978:	b087      	sub	sp, #28
 801597a:	2800      	cmp	r0, #0
 801597c:	d06c      	beq.n	8015a58 <rcl_timer_call+0xe4>
 801597e:	6803      	ldr	r3, [r0, #0]
 8015980:	4604      	mov	r4, r0
 8015982:	2b00      	cmp	r3, #0
 8015984:	d062      	beq.n	8015a4c <rcl_timer_call+0xd8>
 8015986:	f3bf 8f5b 	dmb	ish
 801598a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801598e:	f3bf 8f5b 	dmb	ish
 8015992:	2b00      	cmp	r3, #0
 8015994:	d14f      	bne.n	8015a36 <rcl_timer_call+0xc2>
 8015996:	6803      	ldr	r3, [r0, #0]
 8015998:	a904      	add	r1, sp, #16
 801599a:	6818      	ldr	r0, [r3, #0]
 801599c:	f7ff ffde 	bl	801595c <rcl_clock_get_now>
 80159a0:	4605      	mov	r5, r0
 80159a2:	2800      	cmp	r0, #0
 80159a4:	d149      	bne.n	8015a3a <rcl_timer_call+0xc6>
 80159a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	db49      	blt.n	8015a42 <rcl_timer_call+0xce>
 80159ae:	2605      	movs	r6, #5
 80159b0:	6820      	ldr	r0, [r4, #0]
 80159b2:	9600      	str	r6, [sp, #0]
 80159b4:	3020      	adds	r0, #32
 80159b6:	f001 fd23 	bl	8017400 <__atomic_exchange_8>
 80159ba:	6823      	ldr	r3, [r4, #0]
 80159bc:	4680      	mov	r8, r0
 80159be:	f3bf 8f5b 	dmb	ish
 80159c2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80159c6:	f3bf 8f5b 	dmb	ish
 80159ca:	6820      	ldr	r0, [r4, #0]
 80159cc:	4689      	mov	r9, r1
 80159ce:	4631      	mov	r1, r6
 80159d0:	3028      	adds	r0, #40	@ 0x28
 80159d2:	f001 fca9 	bl	8017328 <__atomic_load_8>
 80159d6:	460f      	mov	r7, r1
 80159d8:	4631      	mov	r1, r6
 80159da:	4606      	mov	r6, r0
 80159dc:	6820      	ldr	r0, [r4, #0]
 80159de:	3018      	adds	r0, #24
 80159e0:	f001 fca2 	bl	8017328 <__atomic_load_8>
 80159e4:	4602      	mov	r2, r0
 80159e6:	9804      	ldr	r0, [sp, #16]
 80159e8:	460b      	mov	r3, r1
 80159ea:	18b6      	adds	r6, r6, r2
 80159ec:	f8dd c014 	ldr.w	ip, [sp, #20]
 80159f0:	4692      	mov	sl, r2
 80159f2:	eb47 0701 	adc.w	r7, r7, r1
 80159f6:	4286      	cmp	r6, r0
 80159f8:	eb77 010c 	sbcs.w	r1, r7, ip
 80159fc:	da04      	bge.n	8015a08 <rcl_timer_call+0x94>
 80159fe:	ea53 0102 	orrs.w	r1, r3, r2
 8015a02:	d12e      	bne.n	8015a62 <rcl_timer_call+0xee>
 8015a04:	4606      	mov	r6, r0
 8015a06:	4667      	mov	r7, ip
 8015a08:	6820      	ldr	r0, [r4, #0]
 8015a0a:	2105      	movs	r1, #5
 8015a0c:	4632      	mov	r2, r6
 8015a0e:	463b      	mov	r3, r7
 8015a10:	3028      	adds	r0, #40	@ 0x28
 8015a12:	9100      	str	r1, [sp, #0]
 8015a14:	f001 fcbe 	bl	8017394 <__atomic_store_8>
 8015a18:	f1bb 0f00 	cmp.w	fp, #0
 8015a1c:	d00d      	beq.n	8015a3a <rcl_timer_call+0xc6>
 8015a1e:	9a04      	ldr	r2, [sp, #16]
 8015a20:	4620      	mov	r0, r4
 8015a22:	9b05      	ldr	r3, [sp, #20]
 8015a24:	ebb2 0208 	subs.w	r2, r2, r8
 8015a28:	eb63 0309 	sbc.w	r3, r3, r9
 8015a2c:	47d8      	blx	fp
 8015a2e:	4628      	mov	r0, r5
 8015a30:	b007      	add	sp, #28
 8015a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a36:	f240 3521 	movw	r5, #801	@ 0x321
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	b007      	add	sp, #28
 8015a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a42:	2501      	movs	r5, #1
 8015a44:	4628      	mov	r0, r5
 8015a46:	b007      	add	sp, #28
 8015a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a4c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015a50:	4628      	mov	r0, r5
 8015a52:	b007      	add	sp, #28
 8015a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a58:	250b      	movs	r5, #11
 8015a5a:	4628      	mov	r0, r5
 8015a5c:	b007      	add	sp, #28
 8015a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a62:	1b80      	subs	r0, r0, r6
 8015a64:	eb6c 0107 	sbc.w	r1, ip, r7
 8015a68:	3801      	subs	r0, #1
 8015a6a:	f161 0100 	sbc.w	r1, r1, #0
 8015a6e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015a72:	f7ea fc9d 	bl	80003b0 <__aeabi_ldivmod>
 8015a76:	9b02      	ldr	r3, [sp, #8]
 8015a78:	3001      	adds	r0, #1
 8015a7a:	f141 0100 	adc.w	r1, r1, #0
 8015a7e:	fb00 f303 	mul.w	r3, r0, r3
 8015a82:	fb01 330a 	mla	r3, r1, sl, r3
 8015a86:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015a8a:	1986      	adds	r6, r0, r6
 8015a8c:	4453      	add	r3, sl
 8015a8e:	eb43 0707 	adc.w	r7, r3, r7
 8015a92:	e7b9      	b.n	8015a08 <rcl_timer_call+0x94>

08015a94 <rcl_timer_is_ready>:
 8015a94:	b570      	push	{r4, r5, r6, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	b380      	cbz	r0, 8015afc <rcl_timer_is_ready+0x68>
 8015a9a:	6803      	ldr	r3, [r0, #0]
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	b38b      	cbz	r3, 8015b04 <rcl_timer_is_ready+0x70>
 8015aa0:	460d      	mov	r5, r1
 8015aa2:	b359      	cbz	r1, 8015afc <rcl_timer_is_ready+0x68>
 8015aa4:	f3bf 8f5b 	dmb	ish
 8015aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015aac:	f3bf 8f5b 	dmb	ish
 8015ab0:	b953      	cbnz	r3, 8015ac8 <rcl_timer_is_ready+0x34>
 8015ab2:	6803      	ldr	r3, [r0, #0]
 8015ab4:	4669      	mov	r1, sp
 8015ab6:	6818      	ldr	r0, [r3, #0]
 8015ab8:	f7ff ff50 	bl	801595c <rcl_clock_get_now>
 8015abc:	4606      	mov	r6, r0
 8015abe:	b148      	cbz	r0, 8015ad4 <rcl_timer_is_ready+0x40>
 8015ac0:	f240 3321 	movw	r3, #801	@ 0x321
 8015ac4:	4298      	cmp	r0, r3
 8015ac6:	d102      	bne.n	8015ace <rcl_timer_is_ready+0x3a>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	461e      	mov	r6, r3
 8015acc:	702b      	strb	r3, [r5, #0]
 8015ace:	4630      	mov	r0, r6
 8015ad0:	b002      	add	sp, #8
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}
 8015ad4:	6820      	ldr	r0, [r4, #0]
 8015ad6:	2105      	movs	r1, #5
 8015ad8:	3028      	adds	r0, #40	@ 0x28
 8015ada:	f001 fc25 	bl	8017328 <__atomic_load_8>
 8015ade:	9b00      	ldr	r3, [sp, #0]
 8015ae0:	1ac0      	subs	r0, r0, r3
 8015ae2:	9b01      	ldr	r3, [sp, #4]
 8015ae4:	eb61 0103 	sbc.w	r1, r1, r3
 8015ae8:	2801      	cmp	r0, #1
 8015aea:	4630      	mov	r0, r6
 8015aec:	f171 0300 	sbcs.w	r3, r1, #0
 8015af0:	bfb4      	ite	lt
 8015af2:	2301      	movlt	r3, #1
 8015af4:	2300      	movge	r3, #0
 8015af6:	702b      	strb	r3, [r5, #0]
 8015af8:	b002      	add	sp, #8
 8015afa:	bd70      	pop	{r4, r5, r6, pc}
 8015afc:	260b      	movs	r6, #11
 8015afe:	4630      	mov	r0, r6
 8015b00:	b002      	add	sp, #8
 8015b02:	bd70      	pop	{r4, r5, r6, pc}
 8015b04:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015b08:	e7e1      	b.n	8015ace <rcl_timer_is_ready+0x3a>
 8015b0a:	bf00      	nop

08015b0c <rcl_timer_get_time_until_next_call>:
 8015b0c:	b570      	push	{r4, r5, r6, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	b330      	cbz	r0, 8015b60 <rcl_timer_get_time_until_next_call+0x54>
 8015b12:	6803      	ldr	r3, [r0, #0]
 8015b14:	4604      	mov	r4, r0
 8015b16:	b33b      	cbz	r3, 8015b68 <rcl_timer_get_time_until_next_call+0x5c>
 8015b18:	460d      	mov	r5, r1
 8015b1a:	b309      	cbz	r1, 8015b60 <rcl_timer_get_time_until_next_call+0x54>
 8015b1c:	f3bf 8f5b 	dmb	ish
 8015b20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015b24:	f3bf 8f5b 	dmb	ish
 8015b28:	b9ab      	cbnz	r3, 8015b56 <rcl_timer_get_time_until_next_call+0x4a>
 8015b2a:	6803      	ldr	r3, [r0, #0]
 8015b2c:	4669      	mov	r1, sp
 8015b2e:	6818      	ldr	r0, [r3, #0]
 8015b30:	f7ff ff14 	bl	801595c <rcl_clock_get_now>
 8015b34:	4606      	mov	r6, r0
 8015b36:	b958      	cbnz	r0, 8015b50 <rcl_timer_get_time_until_next_call+0x44>
 8015b38:	6820      	ldr	r0, [r4, #0]
 8015b3a:	2105      	movs	r1, #5
 8015b3c:	3028      	adds	r0, #40	@ 0x28
 8015b3e:	f001 fbf3 	bl	8017328 <__atomic_load_8>
 8015b42:	9b00      	ldr	r3, [sp, #0]
 8015b44:	1ac0      	subs	r0, r0, r3
 8015b46:	9b01      	ldr	r3, [sp, #4]
 8015b48:	eb61 0103 	sbc.w	r1, r1, r3
 8015b4c:	6028      	str	r0, [r5, #0]
 8015b4e:	6069      	str	r1, [r5, #4]
 8015b50:	4630      	mov	r0, r6
 8015b52:	b002      	add	sp, #8
 8015b54:	bd70      	pop	{r4, r5, r6, pc}
 8015b56:	f240 3621 	movw	r6, #801	@ 0x321
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	b002      	add	sp, #8
 8015b5e:	bd70      	pop	{r4, r5, r6, pc}
 8015b60:	260b      	movs	r6, #11
 8015b62:	4630      	mov	r0, r6
 8015b64:	b002      	add	sp, #8
 8015b66:	bd70      	pop	{r4, r5, r6, pc}
 8015b68:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015b6c:	e7f0      	b.n	8015b50 <rcl_timer_get_time_until_next_call+0x44>
 8015b6e:	bf00      	nop

08015b70 <rcl_timer_get_guard_condition>:
 8015b70:	b130      	cbz	r0, 8015b80 <rcl_timer_get_guard_condition+0x10>
 8015b72:	6800      	ldr	r0, [r0, #0]
 8015b74:	b120      	cbz	r0, 8015b80 <rcl_timer_get_guard_condition+0x10>
 8015b76:	68c3      	ldr	r3, [r0, #12]
 8015b78:	b10b      	cbz	r3, 8015b7e <rcl_timer_get_guard_condition+0xe>
 8015b7a:	3008      	adds	r0, #8
 8015b7c:	4770      	bx	lr
 8015b7e:	4618      	mov	r0, r3
 8015b80:	4770      	bx	lr
 8015b82:	bf00      	nop

08015b84 <rcl_validate_enclave_name_with_size>:
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d049      	beq.n	8015c1c <rcl_validate_enclave_name_with_size+0x98>
 8015b88:	b570      	push	{r4, r5, r6, lr}
 8015b8a:	4615      	mov	r5, r2
 8015b8c:	b0c2      	sub	sp, #264	@ 0x108
 8015b8e:	b19a      	cbz	r2, 8015bb8 <rcl_validate_enclave_name_with_size+0x34>
 8015b90:	461e      	mov	r6, r3
 8015b92:	466a      	mov	r2, sp
 8015b94:	ab01      	add	r3, sp, #4
 8015b96:	460c      	mov	r4, r1
 8015b98:	f002 f80a 	bl	8017bb0 <rmw_validate_namespace_with_size>
 8015b9c:	4684      	mov	ip, r0
 8015b9e:	b9b8      	cbnz	r0, 8015bd0 <rcl_validate_enclave_name_with_size+0x4c>
 8015ba0:	9900      	ldr	r1, [sp, #0]
 8015ba2:	b171      	cbz	r1, 8015bc2 <rcl_validate_enclave_name_with_size+0x3e>
 8015ba4:	2907      	cmp	r1, #7
 8015ba6:	d019      	beq.n	8015bdc <rcl_validate_enclave_name_with_size+0x58>
 8015ba8:	1e4b      	subs	r3, r1, #1
 8015baa:	2b05      	cmp	r3, #5
 8015bac:	d83a      	bhi.n	8015c24 <rcl_validate_enclave_name_with_size+0xa0>
 8015bae:	e8df f003 	tbb	[pc, r3]
 8015bb2:	2926      	.short	0x2926
 8015bb4:	1d322f2c 	.word	0x1d322f2c
 8015bb8:	f04f 0c0b 	mov.w	ip, #11
 8015bbc:	4660      	mov	r0, ip
 8015bbe:	b042      	add	sp, #264	@ 0x108
 8015bc0:	bd70      	pop	{r4, r5, r6, pc}
 8015bc2:	2907      	cmp	r1, #7
 8015bc4:	d00a      	beq.n	8015bdc <rcl_validate_enclave_name_with_size+0x58>
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	4660      	mov	r0, ip
 8015bca:	602b      	str	r3, [r5, #0]
 8015bcc:	b042      	add	sp, #264	@ 0x108
 8015bce:	bd70      	pop	{r4, r5, r6, pc}
 8015bd0:	f007 ff04 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 8015bd4:	4684      	mov	ip, r0
 8015bd6:	4660      	mov	r0, ip
 8015bd8:	b042      	add	sp, #264	@ 0x108
 8015bda:	bd70      	pop	{r4, r5, r6, pc}
 8015bdc:	2cff      	cmp	r4, #255	@ 0xff
 8015bde:	d9f2      	bls.n	8015bc6 <rcl_validate_enclave_name_with_size+0x42>
 8015be0:	6029      	str	r1, [r5, #0]
 8015be2:	2e00      	cmp	r6, #0
 8015be4:	d0ea      	beq.n	8015bbc <rcl_validate_enclave_name_with_size+0x38>
 8015be6:	23fe      	movs	r3, #254	@ 0xfe
 8015be8:	6033      	str	r3, [r6, #0]
 8015bea:	e7e7      	b.n	8015bbc <rcl_validate_enclave_name_with_size+0x38>
 8015bec:	2306      	movs	r3, #6
 8015bee:	602b      	str	r3, [r5, #0]
 8015bf0:	2e00      	cmp	r6, #0
 8015bf2:	d0e3      	beq.n	8015bbc <rcl_validate_enclave_name_with_size+0x38>
 8015bf4:	9b01      	ldr	r3, [sp, #4]
 8015bf6:	4660      	mov	r0, ip
 8015bf8:	6033      	str	r3, [r6, #0]
 8015bfa:	b042      	add	sp, #264	@ 0x108
 8015bfc:	bd70      	pop	{r4, r5, r6, pc}
 8015bfe:	2301      	movs	r3, #1
 8015c00:	602b      	str	r3, [r5, #0]
 8015c02:	e7f5      	b.n	8015bf0 <rcl_validate_enclave_name_with_size+0x6c>
 8015c04:	2302      	movs	r3, #2
 8015c06:	602b      	str	r3, [r5, #0]
 8015c08:	e7f2      	b.n	8015bf0 <rcl_validate_enclave_name_with_size+0x6c>
 8015c0a:	2303      	movs	r3, #3
 8015c0c:	602b      	str	r3, [r5, #0]
 8015c0e:	e7ef      	b.n	8015bf0 <rcl_validate_enclave_name_with_size+0x6c>
 8015c10:	2304      	movs	r3, #4
 8015c12:	602b      	str	r3, [r5, #0]
 8015c14:	e7ec      	b.n	8015bf0 <rcl_validate_enclave_name_with_size+0x6c>
 8015c16:	2305      	movs	r3, #5
 8015c18:	602b      	str	r3, [r5, #0]
 8015c1a:	e7e9      	b.n	8015bf0 <rcl_validate_enclave_name_with_size+0x6c>
 8015c1c:	f04f 0c0b 	mov.w	ip, #11
 8015c20:	4660      	mov	r0, ip
 8015c22:	4770      	bx	lr
 8015c24:	460b      	mov	r3, r1
 8015c26:	4a04      	ldr	r2, [pc, #16]	@ (8015c38 <rcl_validate_enclave_name_with_size+0xb4>)
 8015c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015c2c:	a802      	add	r0, sp, #8
 8015c2e:	f001 fd33 	bl	8017698 <rcutils_snprintf>
 8015c32:	f04f 0c01 	mov.w	ip, #1
 8015c36:	e7c1      	b.n	8015bbc <rcl_validate_enclave_name_with_size+0x38>
 8015c38:	08022770 	.word	0x08022770

08015c3c <rcl_validate_enclave_name>:
 8015c3c:	b168      	cbz	r0, 8015c5a <rcl_validate_enclave_name+0x1e>
 8015c3e:	b570      	push	{r4, r5, r6, lr}
 8015c40:	460d      	mov	r5, r1
 8015c42:	4616      	mov	r6, r2
 8015c44:	4604      	mov	r4, r0
 8015c46:	f7ea fb55 	bl	80002f4 <strlen>
 8015c4a:	4633      	mov	r3, r6
 8015c4c:	4601      	mov	r1, r0
 8015c4e:	462a      	mov	r2, r5
 8015c50:	4620      	mov	r0, r4
 8015c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c56:	f7ff bf95 	b.w	8015b84 <rcl_validate_enclave_name_with_size>
 8015c5a:	200b      	movs	r0, #11
 8015c5c:	4770      	bx	lr
 8015c5e:	bf00      	nop

08015c60 <rcl_get_zero_initialized_wait_set>:
 8015c60:	b510      	push	{r4, lr}
 8015c62:	4c08      	ldr	r4, [pc, #32]	@ (8015c84 <rcl_get_zero_initialized_wait_set+0x24>)
 8015c64:	4686      	mov	lr, r0
 8015c66:	4684      	mov	ip, r0
 8015c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c7a:	6823      	ldr	r3, [r4, #0]
 8015c7c:	4670      	mov	r0, lr
 8015c7e:	f8cc 3000 	str.w	r3, [ip]
 8015c82:	bd10      	pop	{r4, pc}
 8015c84:	080227d0 	.word	0x080227d0

08015c88 <rcl_wait_set_is_valid>:
 8015c88:	b118      	cbz	r0, 8015c92 <rcl_wait_set_is_valid+0xa>
 8015c8a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015c8c:	3800      	subs	r0, #0
 8015c8e:	bf18      	it	ne
 8015c90:	2001      	movne	r0, #1
 8015c92:	4770      	bx	lr

08015c94 <rcl_wait_set_fini>:
 8015c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c98:	b082      	sub	sp, #8
 8015c9a:	2800      	cmp	r0, #0
 8015c9c:	f000 8095 	beq.w	8015dca <rcl_wait_set_fini+0x136>
 8015ca0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	2e00      	cmp	r6, #0
 8015ca6:	f000 808c 	beq.w	8015dc2 <rcl_wait_set_fini+0x12e>
 8015caa:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015cac:	f003 fb40 	bl	8019330 <rmw_destroy_wait_set>
 8015cb0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cb2:	1e06      	subs	r6, r0, #0
 8015cb4:	bf18      	it	ne
 8015cb6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015cba:	2d00      	cmp	r5, #0
 8015cbc:	f000 8081 	beq.w	8015dc2 <rcl_wait_set_fini+0x12e>
 8015cc0:	2700      	movs	r7, #0
 8015cc2:	6820      	ldr	r0, [r4, #0]
 8015cc4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015cc8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015cca:	6067      	str	r7, [r4, #4]
 8015ccc:	602f      	str	r7, [r5, #0]
 8015cce:	b120      	cbz	r0, 8015cda <rcl_wait_set_fini+0x46>
 8015cd0:	9101      	str	r1, [sp, #4]
 8015cd2:	47c0      	blx	r8
 8015cd4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cd6:	9901      	ldr	r1, [sp, #4]
 8015cd8:	6027      	str	r7, [r4, #0]
 8015cda:	68a8      	ldr	r0, [r5, #8]
 8015cdc:	b120      	cbz	r0, 8015ce8 <rcl_wait_set_fini+0x54>
 8015cde:	47c0      	blx	r8
 8015ce0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015ce8:	f04f 0800 	mov.w	r8, #0
 8015cec:	68a0      	ldr	r0, [r4, #8]
 8015cee:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015cf0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015cf2:	f8c4 800c 	str.w	r8, [r4, #12]
 8015cf6:	f8c5 800c 	str.w	r8, [r5, #12]
 8015cfa:	b128      	cbz	r0, 8015d08 <rcl_wait_set_fini+0x74>
 8015cfc:	47b8      	blx	r7
 8015cfe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d00:	f8c4 8008 	str.w	r8, [r4, #8]
 8015d04:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015d06:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d08:	f04f 0800 	mov.w	r8, #0
 8015d0c:	6968      	ldr	r0, [r5, #20]
 8015d0e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015d12:	b128      	cbz	r0, 8015d20 <rcl_wait_set_fini+0x8c>
 8015d14:	47b8      	blx	r7
 8015d16:	f8c5 8014 	str.w	r8, [r5, #20]
 8015d1a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d1c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015d1e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d20:	f04f 0800 	mov.w	r8, #0
 8015d24:	6920      	ldr	r0, [r4, #16]
 8015d26:	f8c4 8014 	str.w	r8, [r4, #20]
 8015d2a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8015d2e:	b128      	cbz	r0, 8015d3c <rcl_wait_set_fini+0xa8>
 8015d30:	47b8      	blx	r7
 8015d32:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d34:	f8c4 8010 	str.w	r8, [r4, #16]
 8015d38:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015d3a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d3c:	f04f 0800 	mov.w	r8, #0
 8015d40:	69a0      	ldr	r0, [r4, #24]
 8015d42:	f8c4 801c 	str.w	r8, [r4, #28]
 8015d46:	f8c5 8018 	str.w	r8, [r5, #24]
 8015d4a:	b128      	cbz	r0, 8015d58 <rcl_wait_set_fini+0xc4>
 8015d4c:	9101      	str	r1, [sp, #4]
 8015d4e:	47b8      	blx	r7
 8015d50:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d52:	9901      	ldr	r1, [sp, #4]
 8015d54:	f8c4 8018 	str.w	r8, [r4, #24]
 8015d58:	6a28      	ldr	r0, [r5, #32]
 8015d5a:	b120      	cbz	r0, 8015d66 <rcl_wait_set_fini+0xd2>
 8015d5c:	47b8      	blx	r7
 8015d5e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d60:	2300      	movs	r3, #0
 8015d62:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015d66:	2700      	movs	r7, #0
 8015d68:	6a20      	ldr	r0, [r4, #32]
 8015d6a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015d6e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d70:	6267      	str	r7, [r4, #36]	@ 0x24
 8015d72:	626f      	str	r7, [r5, #36]	@ 0x24
 8015d74:	b120      	cbz	r0, 8015d80 <rcl_wait_set_fini+0xec>
 8015d76:	9101      	str	r1, [sp, #4]
 8015d78:	47c0      	blx	r8
 8015d7a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d7c:	9901      	ldr	r1, [sp, #4]
 8015d7e:	6227      	str	r7, [r4, #32]
 8015d80:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015d82:	b120      	cbz	r0, 8015d8e <rcl_wait_set_fini+0xfa>
 8015d84:	47c0      	blx	r8
 8015d86:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d88:	2300      	movs	r3, #0
 8015d8a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015d8e:	2700      	movs	r7, #0
 8015d90:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015d92:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015d96:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d98:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015d9a:	632f      	str	r7, [r5, #48]	@ 0x30
 8015d9c:	b120      	cbz	r0, 8015da8 <rcl_wait_set_fini+0x114>
 8015d9e:	9101      	str	r1, [sp, #4]
 8015da0:	47c0      	blx	r8
 8015da2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015da4:	9901      	ldr	r1, [sp, #4]
 8015da6:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015da8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015daa:	b120      	cbz	r0, 8015db6 <rcl_wait_set_fini+0x122>
 8015dac:	47c0      	blx	r8
 8015dae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015db0:	2300      	movs	r3, #0
 8015db2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015db6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015db8:	4628      	mov	r0, r5
 8015dba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015dbc:	4798      	blx	r3
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	b002      	add	sp, #8
 8015dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dca:	260b      	movs	r6, #11
 8015dcc:	4630      	mov	r0, r6
 8015dce:	b002      	add	sp, #8
 8015dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015dd4 <rcl_wait_set_add_subscription>:
 8015dd4:	b318      	cbz	r0, 8015e1e <rcl_wait_set_add_subscription+0x4a>
 8015dd6:	b538      	push	{r3, r4, r5, lr}
 8015dd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015dda:	4604      	mov	r4, r0
 8015ddc:	b30b      	cbz	r3, 8015e22 <rcl_wait_set_add_subscription+0x4e>
 8015dde:	b319      	cbz	r1, 8015e28 <rcl_wait_set_add_subscription+0x54>
 8015de0:	681d      	ldr	r5, [r3, #0]
 8015de2:	6840      	ldr	r0, [r0, #4]
 8015de4:	4285      	cmp	r5, r0
 8015de6:	d217      	bcs.n	8015e18 <rcl_wait_set_add_subscription+0x44>
 8015de8:	1c68      	adds	r0, r5, #1
 8015dea:	6018      	str	r0, [r3, #0]
 8015dec:	6823      	ldr	r3, [r4, #0]
 8015dee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015df2:	b102      	cbz	r2, 8015df6 <rcl_wait_set_add_subscription+0x22>
 8015df4:	6015      	str	r5, [r2, #0]
 8015df6:	4608      	mov	r0, r1
 8015df8:	f7ff fcfe 	bl	80157f8 <rcl_subscription_get_rmw_handle>
 8015dfc:	b150      	cbz	r0, 8015e14 <rcl_wait_set_add_subscription+0x40>
 8015dfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e00:	6842      	ldr	r2, [r0, #4]
 8015e02:	2000      	movs	r0, #0
 8015e04:	689b      	ldr	r3, [r3, #8]
 8015e06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e0c:	6853      	ldr	r3, [r2, #4]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	6053      	str	r3, [r2, #4]
 8015e12:	bd38      	pop	{r3, r4, r5, pc}
 8015e14:	2001      	movs	r0, #1
 8015e16:	bd38      	pop	{r3, r4, r5, pc}
 8015e18:	f240 3086 	movw	r0, #902	@ 0x386
 8015e1c:	bd38      	pop	{r3, r4, r5, pc}
 8015e1e:	200b      	movs	r0, #11
 8015e20:	4770      	bx	lr
 8015e22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e26:	bd38      	pop	{r3, r4, r5, pc}
 8015e28:	200b      	movs	r0, #11
 8015e2a:	bd38      	pop	{r3, r4, r5, pc}

08015e2c <rcl_wait_set_clear>:
 8015e2c:	2800      	cmp	r0, #0
 8015e2e:	d074      	beq.n	8015f1a <rcl_wait_set_clear+0xee>
 8015e30:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e32:	b510      	push	{r4, lr}
 8015e34:	4604      	mov	r4, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d071      	beq.n	8015f1e <rcl_wait_set_clear+0xf2>
 8015e3a:	6800      	ldr	r0, [r0, #0]
 8015e3c:	b138      	cbz	r0, 8015e4e <rcl_wait_set_clear+0x22>
 8015e3e:	6862      	ldr	r2, [r4, #4]
 8015e40:	2100      	movs	r1, #0
 8015e42:	0092      	lsls	r2, r2, #2
 8015e44:	f009 fdf6 	bl	801fa34 <memset>
 8015e48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	601a      	str	r2, [r3, #0]
 8015e4e:	68a0      	ldr	r0, [r4, #8]
 8015e50:	b138      	cbz	r0, 8015e62 <rcl_wait_set_clear+0x36>
 8015e52:	68e2      	ldr	r2, [r4, #12]
 8015e54:	2100      	movs	r1, #0
 8015e56:	0092      	lsls	r2, r2, #2
 8015e58:	f009 fdec 	bl	801fa34 <memset>
 8015e5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e5e:	2200      	movs	r2, #0
 8015e60:	60da      	str	r2, [r3, #12]
 8015e62:	69a0      	ldr	r0, [r4, #24]
 8015e64:	b138      	cbz	r0, 8015e76 <rcl_wait_set_clear+0x4a>
 8015e66:	69e2      	ldr	r2, [r4, #28]
 8015e68:	2100      	movs	r1, #0
 8015e6a:	0092      	lsls	r2, r2, #2
 8015e6c:	f009 fde2 	bl	801fa34 <memset>
 8015e70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e72:	2200      	movs	r2, #0
 8015e74:	619a      	str	r2, [r3, #24]
 8015e76:	6a20      	ldr	r0, [r4, #32]
 8015e78:	b138      	cbz	r0, 8015e8a <rcl_wait_set_clear+0x5e>
 8015e7a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015e7c:	2100      	movs	r1, #0
 8015e7e:	0092      	lsls	r2, r2, #2
 8015e80:	f009 fdd8 	bl	801fa34 <memset>
 8015e84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e86:	2200      	movs	r2, #0
 8015e88:	625a      	str	r2, [r3, #36]	@ 0x24
 8015e8a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015e8c:	b138      	cbz	r0, 8015e9e <rcl_wait_set_clear+0x72>
 8015e8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015e90:	2100      	movs	r1, #0
 8015e92:	0092      	lsls	r2, r2, #2
 8015e94:	f009 fdce 	bl	801fa34 <memset>
 8015e98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8015e9e:	6920      	ldr	r0, [r4, #16]
 8015ea0:	b138      	cbz	r0, 8015eb2 <rcl_wait_set_clear+0x86>
 8015ea2:	6962      	ldr	r2, [r4, #20]
 8015ea4:	2100      	movs	r1, #0
 8015ea6:	0092      	lsls	r2, r2, #2
 8015ea8:	f009 fdc4 	bl	801fa34 <memset>
 8015eac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eae:	2200      	movs	r2, #0
 8015eb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8015eb2:	6898      	ldr	r0, [r3, #8]
 8015eb4:	b138      	cbz	r0, 8015ec6 <rcl_wait_set_clear+0x9a>
 8015eb6:	685a      	ldr	r2, [r3, #4]
 8015eb8:	2100      	movs	r1, #0
 8015eba:	0092      	lsls	r2, r2, #2
 8015ebc:	f009 fdba 	bl	801fa34 <memset>
 8015ec0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	605a      	str	r2, [r3, #4]
 8015ec6:	6958      	ldr	r0, [r3, #20]
 8015ec8:	b138      	cbz	r0, 8015eda <rcl_wait_set_clear+0xae>
 8015eca:	691a      	ldr	r2, [r3, #16]
 8015ecc:	2100      	movs	r1, #0
 8015ece:	0092      	lsls	r2, r2, #2
 8015ed0:	f009 fdb0 	bl	801fa34 <memset>
 8015ed4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	611a      	str	r2, [r3, #16]
 8015eda:	6a18      	ldr	r0, [r3, #32]
 8015edc:	b138      	cbz	r0, 8015eee <rcl_wait_set_clear+0xc2>
 8015ede:	69da      	ldr	r2, [r3, #28]
 8015ee0:	2100      	movs	r1, #0
 8015ee2:	0092      	lsls	r2, r2, #2
 8015ee4:	f009 fda6 	bl	801fa34 <memset>
 8015ee8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eea:	2200      	movs	r2, #0
 8015eec:	61da      	str	r2, [r3, #28]
 8015eee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015ef0:	b138      	cbz	r0, 8015f02 <rcl_wait_set_clear+0xd6>
 8015ef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ef4:	2100      	movs	r1, #0
 8015ef6:	0092      	lsls	r2, r2, #2
 8015ef8:	f009 fd9c 	bl	801fa34 <memset>
 8015efc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015efe:	2200      	movs	r2, #0
 8015f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8015f02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015f04:	b140      	cbz	r0, 8015f18 <rcl_wait_set_clear+0xec>
 8015f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015f08:	2100      	movs	r1, #0
 8015f0a:	0092      	lsls	r2, r2, #2
 8015f0c:	f009 fd92 	bl	801fa34 <memset>
 8015f10:	2300      	movs	r3, #0
 8015f12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015f14:	4618      	mov	r0, r3
 8015f16:	6353      	str	r3, [r2, #52]	@ 0x34
 8015f18:	bd10      	pop	{r4, pc}
 8015f1a:	200b      	movs	r0, #11
 8015f1c:	4770      	bx	lr
 8015f1e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f22:	bd10      	pop	{r4, pc}

08015f24 <rcl_wait_set_resize>:
 8015f24:	2800      	cmp	r0, #0
 8015f26:	f000 8180 	beq.w	801622a <rcl_wait_set_resize+0x306>
 8015f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f2e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015f30:	b083      	sub	sp, #12
 8015f32:	4605      	mov	r5, r0
 8015f34:	2c00      	cmp	r4, #0
 8015f36:	f000 817a 	beq.w	801622e <rcl_wait_set_resize+0x30a>
 8015f3a:	f04f 0900 	mov.w	r9, #0
 8015f3e:	461f      	mov	r7, r3
 8015f40:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015f44:	4688      	mov	r8, r1
 8015f46:	4616      	mov	r6, r2
 8015f48:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015f4c:	f8c0 9004 	str.w	r9, [r0, #4]
 8015f50:	f8c4 9000 	str.w	r9, [r4]
 8015f54:	2900      	cmp	r1, #0
 8015f56:	f000 80bf 	beq.w	80160d8 <rcl_wait_set_resize+0x1b4>
 8015f5a:	008c      	lsls	r4, r1, #2
 8015f5c:	4652      	mov	r2, sl
 8015f5e:	6800      	ldr	r0, [r0, #0]
 8015f60:	4621      	mov	r1, r4
 8015f62:	9301      	str	r3, [sp, #4]
 8015f64:	4798      	blx	r3
 8015f66:	9b01      	ldr	r3, [sp, #4]
 8015f68:	6028      	str	r0, [r5, #0]
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	f000 80f6 	beq.w	801615c <rcl_wait_set_resize+0x238>
 8015f70:	4622      	mov	r2, r4
 8015f72:	4649      	mov	r1, r9
 8015f74:	9301      	str	r3, [sp, #4]
 8015f76:	f009 fd5d 	bl	801fa34 <memset>
 8015f7a:	f8c5 8004 	str.w	r8, [r5, #4]
 8015f7e:	4652      	mov	r2, sl
 8015f80:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015f84:	4621      	mov	r1, r4
 8015f86:	9b01      	ldr	r3, [sp, #4]
 8015f88:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015f8c:	f8c8 9004 	str.w	r9, [r8, #4]
 8015f90:	4798      	blx	r3
 8015f92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015f94:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f000 814a 	beq.w	8016234 <rcl_wait_set_resize+0x310>
 8015fa0:	4622      	mov	r2, r4
 8015fa2:	4649      	mov	r1, r9
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f009 fd45 	bl	801fa34 <memset>
 8015faa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fac:	f04f 0800 	mov.w	r8, #0
 8015fb0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015fb4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015fb8:	f8c5 800c 	str.w	r8, [r5, #12]
 8015fbc:	f8c4 800c 	str.w	r8, [r4, #12]
 8015fc0:	2e00      	cmp	r6, #0
 8015fc2:	f040 809b 	bne.w	80160fc <rcl_wait_set_resize+0x1d8>
 8015fc6:	68a8      	ldr	r0, [r5, #8]
 8015fc8:	b128      	cbz	r0, 8015fd6 <rcl_wait_set_resize+0xb2>
 8015fca:	4649      	mov	r1, r9
 8015fcc:	4790      	blx	r2
 8015fce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fd0:	60ae      	str	r6, [r5, #8]
 8015fd2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015fd6:	f04f 0800 	mov.w	r8, #0
 8015fda:	19f6      	adds	r6, r6, r7
 8015fdc:	f8c4 8010 	str.w	r8, [r4, #16]
 8015fe0:	f040 80a2 	bne.w	8016128 <rcl_wait_set_resize+0x204>
 8015fe4:	6960      	ldr	r0, [r4, #20]
 8015fe6:	b130      	cbz	r0, 8015ff6 <rcl_wait_set_resize+0xd2>
 8015fe8:	4649      	mov	r1, r9
 8015fea:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015fec:	4798      	blx	r3
 8015fee:	6166      	str	r6, [r4, #20]
 8015ff0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015ff2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015ff6:	2600      	movs	r6, #0
 8015ff8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015ffc:	616e      	str	r6, [r5, #20]
 8015ffe:	6426      	str	r6, [r4, #64]	@ 0x40
 8016000:	2f00      	cmp	r7, #0
 8016002:	f040 80af 	bne.w	8016164 <rcl_wait_set_resize+0x240>
 8016006:	6928      	ldr	r0, [r5, #16]
 8016008:	b138      	cbz	r0, 801601a <rcl_wait_set_resize+0xf6>
 801600a:	4649      	mov	r1, r9
 801600c:	47d0      	blx	sl
 801600e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016010:	612f      	str	r7, [r5, #16]
 8016012:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016016:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801601a:	2600      	movs	r6, #0
 801601c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801601e:	61ee      	str	r6, [r5, #28]
 8016020:	61a6      	str	r6, [r4, #24]
 8016022:	2b00      	cmp	r3, #0
 8016024:	f040 8093 	bne.w	801614e <rcl_wait_set_resize+0x22a>
 8016028:	69a8      	ldr	r0, [r5, #24]
 801602a:	b120      	cbz	r0, 8016036 <rcl_wait_set_resize+0x112>
 801602c:	4649      	mov	r1, r9
 801602e:	47d0      	blx	sl
 8016030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016032:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016034:	61ab      	str	r3, [r5, #24]
 8016036:	6a20      	ldr	r0, [r4, #32]
 8016038:	b128      	cbz	r0, 8016046 <rcl_wait_set_resize+0x122>
 801603a:	4649      	mov	r1, r9
 801603c:	47d0      	blx	sl
 801603e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016040:	2300      	movs	r3, #0
 8016042:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016046:	2600      	movs	r6, #0
 8016048:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801604a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801604c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016050:	626e      	str	r6, [r5, #36]	@ 0x24
 8016052:	6266      	str	r6, [r4, #36]	@ 0x24
 8016054:	2b00      	cmp	r3, #0
 8016056:	f000 8098 	beq.w	801618a <rcl_wait_set_resize+0x266>
 801605a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801605e:	463a      	mov	r2, r7
 8016060:	6a28      	ldr	r0, [r5, #32]
 8016062:	4651      	mov	r1, sl
 8016064:	47c8      	blx	r9
 8016066:	6228      	str	r0, [r5, #32]
 8016068:	2800      	cmp	r0, #0
 801606a:	d077      	beq.n	801615c <rcl_wait_set_resize+0x238>
 801606c:	4652      	mov	r2, sl
 801606e:	4631      	mov	r1, r6
 8016070:	f009 fce0 	bl	801fa34 <memset>
 8016074:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016078:	463a      	mov	r2, r7
 801607a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801607c:	4651      	mov	r1, sl
 801607e:	626b      	str	r3, [r5, #36]	@ 0x24
 8016080:	62a6      	str	r6, [r4, #40]	@ 0x28
 8016082:	47c8      	blx	r9
 8016084:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016086:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016088:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801608a:	2c00      	cmp	r4, #0
 801608c:	f000 80f2 	beq.w	8016274 <rcl_wait_set_resize+0x350>
 8016090:	4620      	mov	r0, r4
 8016092:	4652      	mov	r2, sl
 8016094:	4631      	mov	r1, r6
 8016096:	f009 fccd 	bl	801fa34 <memset>
 801609a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801609c:	2600      	movs	r6, #0
 801609e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160a0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80160a2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80160a6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80160a8:	6326      	str	r6, [r4, #48]	@ 0x30
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	f040 8097 	bne.w	80161de <rcl_wait_set_resize+0x2ba>
 80160b0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80160b2:	b120      	cbz	r0, 80160be <rcl_wait_set_resize+0x19a>
 80160b4:	4639      	mov	r1, r7
 80160b6:	47c0      	blx	r8
 80160b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160bc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80160be:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d04c      	beq.n	801615e <rcl_wait_set_resize+0x23a>
 80160c4:	4639      	mov	r1, r7
 80160c6:	47c0      	blx	r8
 80160c8:	2300      	movs	r3, #0
 80160ca:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80160cc:	4618      	mov	r0, r3
 80160ce:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 80160d2:	b003      	add	sp, #12
 80160d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d8:	6800      	ldr	r0, [r0, #0]
 80160da:	b120      	cbz	r0, 80160e6 <rcl_wait_set_resize+0x1c2>
 80160dc:	4651      	mov	r1, sl
 80160de:	47d8      	blx	fp
 80160e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160e2:	f8c5 8000 	str.w	r8, [r5]
 80160e6:	68a0      	ldr	r0, [r4, #8]
 80160e8:	2800      	cmp	r0, #0
 80160ea:	f43f af5f 	beq.w	8015fac <rcl_wait_set_resize+0x88>
 80160ee:	4651      	mov	r1, sl
 80160f0:	47d8      	blx	fp
 80160f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160f4:	2300      	movs	r3, #0
 80160f6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80160fa:	e757      	b.n	8015fac <rcl_wait_set_resize+0x88>
 80160fc:	00b4      	lsls	r4, r6, #2
 80160fe:	464a      	mov	r2, r9
 8016100:	68a8      	ldr	r0, [r5, #8]
 8016102:	4621      	mov	r1, r4
 8016104:	4798      	blx	r3
 8016106:	60a8      	str	r0, [r5, #8]
 8016108:	b340      	cbz	r0, 801615c <rcl_wait_set_resize+0x238>
 801610a:	4622      	mov	r2, r4
 801610c:	4641      	mov	r1, r8
 801610e:	f009 fc91 	bl	801fa34 <memset>
 8016112:	f04f 0800 	mov.w	r8, #0
 8016116:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016118:	60ee      	str	r6, [r5, #12]
 801611a:	19f6      	adds	r6, r6, r7
 801611c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016120:	f8c4 8010 	str.w	r8, [r4, #16]
 8016124:	f43f af5e 	beq.w	8015fe4 <rcl_wait_set_resize+0xc0>
 8016128:	00b6      	lsls	r6, r6, #2
 801612a:	464a      	mov	r2, r9
 801612c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801612e:	6960      	ldr	r0, [r4, #20]
 8016130:	4631      	mov	r1, r6
 8016132:	4798      	blx	r3
 8016134:	4681      	mov	r9, r0
 8016136:	6160      	str	r0, [r4, #20]
 8016138:	2800      	cmp	r0, #0
 801613a:	f000 8084 	beq.w	8016246 <rcl_wait_set_resize+0x322>
 801613e:	4632      	mov	r2, r6
 8016140:	4641      	mov	r1, r8
 8016142:	f009 fc77 	bl	801fa34 <memset>
 8016146:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016148:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801614c:	e753      	b.n	8015ff6 <rcl_wait_set_resize+0xd2>
 801614e:	009c      	lsls	r4, r3, #2
 8016150:	464a      	mov	r2, r9
 8016152:	69a8      	ldr	r0, [r5, #24]
 8016154:	4621      	mov	r1, r4
 8016156:	47c0      	blx	r8
 8016158:	61a8      	str	r0, [r5, #24]
 801615a:	bb40      	cbnz	r0, 80161ae <rcl_wait_set_resize+0x28a>
 801615c:	200a      	movs	r0, #10
 801615e:	b003      	add	sp, #12
 8016160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016164:	00bc      	lsls	r4, r7, #2
 8016166:	464a      	mov	r2, r9
 8016168:	6928      	ldr	r0, [r5, #16]
 801616a:	4621      	mov	r1, r4
 801616c:	47c0      	blx	r8
 801616e:	6128      	str	r0, [r5, #16]
 8016170:	2800      	cmp	r0, #0
 8016172:	d0f3      	beq.n	801615c <rcl_wait_set_resize+0x238>
 8016174:	4622      	mov	r2, r4
 8016176:	4631      	mov	r1, r6
 8016178:	f009 fc5c 	bl	801fa34 <memset>
 801617c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801617e:	616f      	str	r7, [r5, #20]
 8016180:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016184:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016188:	e747      	b.n	801601a <rcl_wait_set_resize+0xf6>
 801618a:	6a28      	ldr	r0, [r5, #32]
 801618c:	b120      	cbz	r0, 8016198 <rcl_wait_set_resize+0x274>
 801618e:	4639      	mov	r1, r7
 8016190:	47c0      	blx	r8
 8016192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016194:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016196:	622b      	str	r3, [r5, #32]
 8016198:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801619a:	2800      	cmp	r0, #0
 801619c:	f43f af7e 	beq.w	801609c <rcl_wait_set_resize+0x178>
 80161a0:	4639      	mov	r1, r7
 80161a2:	47c0      	blx	r8
 80161a4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80161a6:	2300      	movs	r3, #0
 80161a8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80161ac:	e776      	b.n	801609c <rcl_wait_set_resize+0x178>
 80161ae:	4622      	mov	r2, r4
 80161b0:	4631      	mov	r1, r6
 80161b2:	f009 fc3f 	bl	801fa34 <memset>
 80161b6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80161b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80161ba:	464a      	mov	r2, r9
 80161bc:	6a38      	ldr	r0, [r7, #32]
 80161be:	4621      	mov	r1, r4
 80161c0:	61eb      	str	r3, [r5, #28]
 80161c2:	61fe      	str	r6, [r7, #28]
 80161c4:	47c0      	blx	r8
 80161c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80161c8:	6238      	str	r0, [r7, #32]
 80161ca:	6a1f      	ldr	r7, [r3, #32]
 80161cc:	2f00      	cmp	r7, #0
 80161ce:	d04a      	beq.n	8016266 <rcl_wait_set_resize+0x342>
 80161d0:	4622      	mov	r2, r4
 80161d2:	4631      	mov	r1, r6
 80161d4:	4638      	mov	r0, r7
 80161d6:	f009 fc2d 	bl	801fa34 <memset>
 80161da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80161dc:	e733      	b.n	8016046 <rcl_wait_set_resize+0x122>
 80161de:	009c      	lsls	r4, r3, #2
 80161e0:	463a      	mov	r2, r7
 80161e2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80161e4:	4621      	mov	r1, r4
 80161e6:	47c8      	blx	r9
 80161e8:	62a8      	str	r0, [r5, #40]	@ 0x28
 80161ea:	2800      	cmp	r0, #0
 80161ec:	d0b6      	beq.n	801615c <rcl_wait_set_resize+0x238>
 80161ee:	4622      	mov	r2, r4
 80161f0:	4631      	mov	r1, r6
 80161f2:	f009 fc1f 	bl	801fa34 <memset>
 80161f6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80161fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161fc:	463a      	mov	r2, r7
 80161fe:	4621      	mov	r1, r4
 8016200:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8016204:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8016206:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801620a:	47c8      	blx	r9
 801620c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801620e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8016212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016214:	2b00      	cmp	r3, #0
 8016216:	d034      	beq.n	8016282 <rcl_wait_set_resize+0x35e>
 8016218:	4622      	mov	r2, r4
 801621a:	4631      	mov	r1, r6
 801621c:	4618      	mov	r0, r3
 801621e:	f009 fc09 	bl	801fa34 <memset>
 8016222:	4630      	mov	r0, r6
 8016224:	b003      	add	sp, #12
 8016226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801622a:	200b      	movs	r0, #11
 801622c:	4770      	bx	lr
 801622e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016232:	e794      	b.n	801615e <rcl_wait_set_resize+0x23a>
 8016234:	6828      	ldr	r0, [r5, #0]
 8016236:	4651      	mov	r1, sl
 8016238:	9301      	str	r3, [sp, #4]
 801623a:	47d8      	blx	fp
 801623c:	9b01      	ldr	r3, [sp, #4]
 801623e:	200a      	movs	r0, #10
 8016240:	e9c5 3300 	strd	r3, r3, [r5]
 8016244:	e78b      	b.n	801615e <rcl_wait_set_resize+0x23a>
 8016246:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016248:	68a8      	ldr	r0, [r5, #8]
 801624a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801624c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801624e:	4798      	blx	r3
 8016250:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016252:	6928      	ldr	r0, [r5, #16]
 8016254:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016256:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016258:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801625c:	4790      	blx	r2
 801625e:	200a      	movs	r0, #10
 8016260:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8016264:	e77b      	b.n	801615e <rcl_wait_set_resize+0x23a>
 8016266:	69a8      	ldr	r0, [r5, #24]
 8016268:	4649      	mov	r1, r9
 801626a:	47d0      	blx	sl
 801626c:	200a      	movs	r0, #10
 801626e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016272:	e774      	b.n	801615e <rcl_wait_set_resize+0x23a>
 8016274:	6a28      	ldr	r0, [r5, #32]
 8016276:	4639      	mov	r1, r7
 8016278:	47c0      	blx	r8
 801627a:	200a      	movs	r0, #10
 801627c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016280:	e76d      	b.n	801615e <rcl_wait_set_resize+0x23a>
 8016282:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016284:	4639      	mov	r1, r7
 8016286:	9301      	str	r3, [sp, #4]
 8016288:	47c0      	blx	r8
 801628a:	9b01      	ldr	r3, [sp, #4]
 801628c:	200a      	movs	r0, #10
 801628e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016292:	e764      	b.n	801615e <rcl_wait_set_resize+0x23a>

08016294 <rcl_wait_set_init>:
 8016294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016298:	b085      	sub	sp, #20
 801629a:	4605      	mov	r5, r0
 801629c:	460e      	mov	r6, r1
 801629e:	4617      	mov	r7, r2
 80162a0:	a812      	add	r0, sp, #72	@ 0x48
 80162a2:	4698      	mov	r8, r3
 80162a4:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80162a8:	f7fd fa82 	bl	80137b0 <rcutils_allocator_is_valid>
 80162ac:	2d00      	cmp	r5, #0
 80162ae:	d072      	beq.n	8016396 <rcl_wait_set_init+0x102>
 80162b0:	f080 0001 	eor.w	r0, r0, #1
 80162b4:	b2c0      	uxtb	r0, r0
 80162b6:	2800      	cmp	r0, #0
 80162b8:	d16d      	bne.n	8016396 <rcl_wait_set_init+0x102>
 80162ba:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80162be:	f1ba 0f00 	cmp.w	sl, #0
 80162c2:	d004      	beq.n	80162ce <rcl_wait_set_init+0x3a>
 80162c4:	2464      	movs	r4, #100	@ 0x64
 80162c6:	4620      	mov	r0, r4
 80162c8:	b005      	add	sp, #20
 80162ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ce:	f1b9 0f00 	cmp.w	r9, #0
 80162d2:	d060      	beq.n	8016396 <rcl_wait_set_init+0x102>
 80162d4:	4648      	mov	r0, r9
 80162d6:	f7fe f937 	bl	8014548 <rcl_context_is_valid>
 80162da:	2800      	cmp	r0, #0
 80162dc:	d068      	beq.n	80163b0 <rcl_wait_set_init+0x11c>
 80162de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80162e0:	205c      	movs	r0, #92	@ 0x5c
 80162e2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80162e4:	4798      	blx	r3
 80162e6:	6328      	str	r0, [r5, #48]	@ 0x30
 80162e8:	2800      	cmp	r0, #0
 80162ea:	d063      	beq.n	80163b4 <rcl_wait_set_init+0x120>
 80162ec:	225c      	movs	r2, #92	@ 0x5c
 80162ee:	4651      	mov	r1, sl
 80162f0:	f009 fba0 	bl	801fa34 <memset>
 80162f4:	ac12      	add	r4, sp, #72	@ 0x48
 80162f6:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 80162fa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80162fe:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8016302:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8016306:	eb03 0e02 	add.w	lr, r3, r2
 801630a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801630c:	f8d9 9000 	ldr.w	r9, [r9]
 8016310:	449e      	add	lr, r3
 8016312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016314:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8016318:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801631c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8016320:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8016324:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8016328:	44be      	add	lr, r7
 801632a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8016334:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8016338:	f8cc 3000 	str.w	r3, [ip]
 801633c:	f002 ffee 	bl	801931c <rmw_create_wait_set>
 8016340:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016342:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8016346:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016348:	b350      	cbz	r0, 80163a0 <rcl_wait_set_init+0x10c>
 801634a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801634c:	4643      	mov	r3, r8
 801634e:	463a      	mov	r2, r7
 8016350:	4631      	mov	r1, r6
 8016352:	9402      	str	r4, [sp, #8]
 8016354:	4628      	mov	r0, r5
 8016356:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8016358:	9401      	str	r4, [sp, #4]
 801635a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801635c:	9400      	str	r4, [sp, #0]
 801635e:	f7ff fde1 	bl	8015f24 <rcl_wait_set_resize>
 8016362:	4604      	mov	r4, r0
 8016364:	2800      	cmp	r0, #0
 8016366:	d0ae      	beq.n	80162c6 <rcl_wait_set_init+0x32>
 8016368:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801636a:	bb2b      	cbnz	r3, 80163b8 <rcl_wait_set_init+0x124>
 801636c:	2600      	movs	r6, #0
 801636e:	4628      	mov	r0, r5
 8016370:	4633      	mov	r3, r6
 8016372:	4632      	mov	r2, r6
 8016374:	4631      	mov	r1, r6
 8016376:	9600      	str	r6, [sp, #0]
 8016378:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801637c:	f7ff fdd2 	bl	8015f24 <rcl_wait_set_resize>
 8016380:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016382:	2800      	cmp	r0, #0
 8016384:	d09f      	beq.n	80162c6 <rcl_wait_set_init+0x32>
 8016386:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016388:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801638a:	4798      	blx	r3
 801638c:	4620      	mov	r0, r4
 801638e:	632e      	str	r6, [r5, #48]	@ 0x30
 8016390:	b005      	add	sp, #20
 8016392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016396:	240b      	movs	r4, #11
 8016398:	4620      	mov	r0, r4
 801639a:	b005      	add	sp, #20
 801639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a0:	2401      	movs	r4, #1
 80163a2:	f002 ffc5 	bl	8019330 <rmw_destroy_wait_set>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	bf18      	it	ne
 80163aa:	f44f 7461 	movne.w	r4, #900	@ 0x384
 80163ae:	e7dd      	b.n	801636c <rcl_wait_set_init+0xd8>
 80163b0:	2465      	movs	r4, #101	@ 0x65
 80163b2:	e788      	b.n	80162c6 <rcl_wait_set_init+0x32>
 80163b4:	240a      	movs	r4, #10
 80163b6:	e786      	b.n	80162c6 <rcl_wait_set_init+0x32>
 80163b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80163ba:	e7f2      	b.n	80163a2 <rcl_wait_set_init+0x10e>

080163bc <rcl_wait_set_add_guard_condition>:
 80163bc:	b318      	cbz	r0, 8016406 <rcl_wait_set_add_guard_condition+0x4a>
 80163be:	b538      	push	{r3, r4, r5, lr}
 80163c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80163c2:	4604      	mov	r4, r0
 80163c4:	b30b      	cbz	r3, 801640a <rcl_wait_set_add_guard_condition+0x4e>
 80163c6:	b319      	cbz	r1, 8016410 <rcl_wait_set_add_guard_condition+0x54>
 80163c8:	68dd      	ldr	r5, [r3, #12]
 80163ca:	68c0      	ldr	r0, [r0, #12]
 80163cc:	4285      	cmp	r5, r0
 80163ce:	d217      	bcs.n	8016400 <rcl_wait_set_add_guard_condition+0x44>
 80163d0:	1c68      	adds	r0, r5, #1
 80163d2:	60d8      	str	r0, [r3, #12]
 80163d4:	68a3      	ldr	r3, [r4, #8]
 80163d6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80163da:	b102      	cbz	r2, 80163de <rcl_wait_set_add_guard_condition+0x22>
 80163dc:	6015      	str	r5, [r2, #0]
 80163de:	4608      	mov	r0, r1
 80163e0:	f007 fd52 	bl	801de88 <rcl_guard_condition_get_rmw_handle>
 80163e4:	b150      	cbz	r0, 80163fc <rcl_wait_set_add_guard_condition+0x40>
 80163e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163e8:	6842      	ldr	r2, [r0, #4]
 80163ea:	2000      	movs	r0, #0
 80163ec:	695b      	ldr	r3, [r3, #20]
 80163ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80163f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80163f4:	6913      	ldr	r3, [r2, #16]
 80163f6:	3301      	adds	r3, #1
 80163f8:	6113      	str	r3, [r2, #16]
 80163fa:	bd38      	pop	{r3, r4, r5, pc}
 80163fc:	2001      	movs	r0, #1
 80163fe:	bd38      	pop	{r3, r4, r5, pc}
 8016400:	f240 3086 	movw	r0, #902	@ 0x386
 8016404:	bd38      	pop	{r3, r4, r5, pc}
 8016406:	200b      	movs	r0, #11
 8016408:	4770      	bx	lr
 801640a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801640e:	bd38      	pop	{r3, r4, r5, pc}
 8016410:	200b      	movs	r0, #11
 8016412:	bd38      	pop	{r3, r4, r5, pc}

08016414 <rcl_wait_set_add_timer>:
 8016414:	b328      	cbz	r0, 8016462 <rcl_wait_set_add_timer+0x4e>
 8016416:	b538      	push	{r3, r4, r5, lr}
 8016418:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801641a:	4604      	mov	r4, r0
 801641c:	b31b      	cbz	r3, 8016466 <rcl_wait_set_add_timer+0x52>
 801641e:	b329      	cbz	r1, 801646c <rcl_wait_set_add_timer+0x58>
 8016420:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8016422:	6965      	ldr	r5, [r4, #20]
 8016424:	42a8      	cmp	r0, r5
 8016426:	d219      	bcs.n	801645c <rcl_wait_set_add_timer+0x48>
 8016428:	1c45      	adds	r5, r0, #1
 801642a:	641d      	str	r5, [r3, #64]	@ 0x40
 801642c:	6923      	ldr	r3, [r4, #16]
 801642e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8016432:	b102      	cbz	r2, 8016436 <rcl_wait_set_add_timer+0x22>
 8016434:	6010      	str	r0, [r2, #0]
 8016436:	4608      	mov	r0, r1
 8016438:	f7ff fb9a 	bl	8015b70 <rcl_timer_get_guard_condition>
 801643c:	b168      	cbz	r0, 801645a <rcl_wait_set_add_timer+0x46>
 801643e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016440:	68e3      	ldr	r3, [r4, #12]
 8016442:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016444:	3b01      	subs	r3, #1
 8016446:	441d      	add	r5, r3
 8016448:	f007 fd1e 	bl	801de88 <rcl_guard_condition_get_rmw_handle>
 801644c:	b180      	cbz	r0, 8016470 <rcl_wait_set_add_timer+0x5c>
 801644e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016450:	6842      	ldr	r2, [r0, #4]
 8016452:	2000      	movs	r0, #0
 8016454:	695b      	ldr	r3, [r3, #20]
 8016456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801645a:	bd38      	pop	{r3, r4, r5, pc}
 801645c:	f240 3086 	movw	r0, #902	@ 0x386
 8016460:	bd38      	pop	{r3, r4, r5, pc}
 8016462:	200b      	movs	r0, #11
 8016464:	4770      	bx	lr
 8016466:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801646a:	bd38      	pop	{r3, r4, r5, pc}
 801646c:	200b      	movs	r0, #11
 801646e:	bd38      	pop	{r3, r4, r5, pc}
 8016470:	2001      	movs	r0, #1
 8016472:	bd38      	pop	{r3, r4, r5, pc}

08016474 <rcl_wait_set_add_client>:
 8016474:	b318      	cbz	r0, 80164be <rcl_wait_set_add_client+0x4a>
 8016476:	b538      	push	{r3, r4, r5, lr}
 8016478:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801647a:	4604      	mov	r4, r0
 801647c:	b30b      	cbz	r3, 80164c2 <rcl_wait_set_add_client+0x4e>
 801647e:	b319      	cbz	r1, 80164c8 <rcl_wait_set_add_client+0x54>
 8016480:	699d      	ldr	r5, [r3, #24]
 8016482:	69c0      	ldr	r0, [r0, #28]
 8016484:	4285      	cmp	r5, r0
 8016486:	d217      	bcs.n	80164b8 <rcl_wait_set_add_client+0x44>
 8016488:	1c68      	adds	r0, r5, #1
 801648a:	6198      	str	r0, [r3, #24]
 801648c:	69a3      	ldr	r3, [r4, #24]
 801648e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016492:	b102      	cbz	r2, 8016496 <rcl_wait_set_add_client+0x22>
 8016494:	6015      	str	r5, [r2, #0]
 8016496:	4608      	mov	r0, r1
 8016498:	f7fd ffba 	bl	8014410 <rcl_client_get_rmw_handle>
 801649c:	b150      	cbz	r0, 80164b4 <rcl_wait_set_add_client+0x40>
 801649e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164a0:	6842      	ldr	r2, [r0, #4]
 80164a2:	2000      	movs	r0, #0
 80164a4:	6a1b      	ldr	r3, [r3, #32]
 80164a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80164ac:	69d3      	ldr	r3, [r2, #28]
 80164ae:	3301      	adds	r3, #1
 80164b0:	61d3      	str	r3, [r2, #28]
 80164b2:	bd38      	pop	{r3, r4, r5, pc}
 80164b4:	2001      	movs	r0, #1
 80164b6:	bd38      	pop	{r3, r4, r5, pc}
 80164b8:	f240 3086 	movw	r0, #902	@ 0x386
 80164bc:	bd38      	pop	{r3, r4, r5, pc}
 80164be:	200b      	movs	r0, #11
 80164c0:	4770      	bx	lr
 80164c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	200b      	movs	r0, #11
 80164ca:	bd38      	pop	{r3, r4, r5, pc}

080164cc <rcl_wait_set_add_service>:
 80164cc:	b318      	cbz	r0, 8016516 <rcl_wait_set_add_service+0x4a>
 80164ce:	b538      	push	{r3, r4, r5, lr}
 80164d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80164d2:	4604      	mov	r4, r0
 80164d4:	b30b      	cbz	r3, 801651a <rcl_wait_set_add_service+0x4e>
 80164d6:	b319      	cbz	r1, 8016520 <rcl_wait_set_add_service+0x54>
 80164d8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80164da:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80164dc:	4285      	cmp	r5, r0
 80164de:	d217      	bcs.n	8016510 <rcl_wait_set_add_service+0x44>
 80164e0:	1c68      	adds	r0, r5, #1
 80164e2:	6258      	str	r0, [r3, #36]	@ 0x24
 80164e4:	6a23      	ldr	r3, [r4, #32]
 80164e6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80164ea:	b102      	cbz	r2, 80164ee <rcl_wait_set_add_service+0x22>
 80164ec:	6015      	str	r5, [r2, #0]
 80164ee:	4608      	mov	r0, r1
 80164f0:	f7fe ffe2 	bl	80154b8 <rcl_service_get_rmw_handle>
 80164f4:	b150      	cbz	r0, 801650c <rcl_wait_set_add_service+0x40>
 80164f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164f8:	6842      	ldr	r2, [r0, #4]
 80164fa:	2000      	movs	r0, #0
 80164fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016502:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016504:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016506:	3301      	adds	r3, #1
 8016508:	6293      	str	r3, [r2, #40]	@ 0x28
 801650a:	bd38      	pop	{r3, r4, r5, pc}
 801650c:	2001      	movs	r0, #1
 801650e:	bd38      	pop	{r3, r4, r5, pc}
 8016510:	f240 3086 	movw	r0, #902	@ 0x386
 8016514:	bd38      	pop	{r3, r4, r5, pc}
 8016516:	200b      	movs	r0, #11
 8016518:	4770      	bx	lr
 801651a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801651e:	bd38      	pop	{r3, r4, r5, pc}
 8016520:	200b      	movs	r0, #11
 8016522:	bd38      	pop	{r3, r4, r5, pc}
 8016524:	0000      	movs	r0, r0
	...

08016528 <rcl_wait>:
 8016528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652c:	ed2d 8b02 	vpush	{d8}
 8016530:	b08d      	sub	sp, #52	@ 0x34
 8016532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016536:	2800      	cmp	r0, #0
 8016538:	f000 814f 	beq.w	80167da <rcl_wait+0x2b2>
 801653c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801653e:	4605      	mov	r5, r0
 8016540:	2e00      	cmp	r6, #0
 8016542:	f000 811a 	beq.w	801677a <rcl_wait+0x252>
 8016546:	6843      	ldr	r3, [r0, #4]
 8016548:	b983      	cbnz	r3, 801656c <rcl_wait+0x44>
 801654a:	68eb      	ldr	r3, [r5, #12]
 801654c:	b973      	cbnz	r3, 801656c <rcl_wait+0x44>
 801654e:	696b      	ldr	r3, [r5, #20]
 8016550:	b963      	cbnz	r3, 801656c <rcl_wait+0x44>
 8016552:	69eb      	ldr	r3, [r5, #28]
 8016554:	b953      	cbnz	r3, 801656c <rcl_wait+0x44>
 8016556:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016558:	b943      	cbnz	r3, 801656c <rcl_wait+0x44>
 801655a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801655c:	b933      	cbnz	r3, 801656c <rcl_wait+0x44>
 801655e:	f240 3085 	movw	r0, #901	@ 0x385
 8016562:	b00d      	add	sp, #52	@ 0x34
 8016564:	ecbd 8b02 	vpop	{d8}
 8016568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656c:	9b04      	ldr	r3, [sp, #16]
 801656e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016570:	2b01      	cmp	r3, #1
 8016572:	9b05      	ldr	r3, [sp, #20]
 8016574:	f173 0300 	sbcs.w	r3, r3, #0
 8016578:	f2c0 80f8 	blt.w	801676c <rcl_wait+0x244>
 801657c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016580:	2a00      	cmp	r2, #0
 8016582:	f000 810f 	beq.w	80167a4 <rcl_wait+0x27c>
 8016586:	2400      	movs	r4, #0
 8016588:	4613      	mov	r3, r2
 801658a:	f240 3921 	movw	r9, #801	@ 0x321
 801658e:	4632      	mov	r2, r6
 8016590:	46a2      	mov	sl, r4
 8016592:	46a3      	mov	fp, r4
 8016594:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 80167f8 <rcl_wait+0x2d0>
 8016598:	e014      	b.n	80165c4 <rcl_wait+0x9c>
 801659a:	2800      	cmp	r0, #0
 801659c:	d1e1      	bne.n	8016562 <rcl_wait+0x3a>
 801659e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80165a2:	4542      	cmp	r2, r8
 80165a4:	eb73 0107 	sbcs.w	r1, r3, r7
 80165a8:	da03      	bge.n	80165b2 <rcl_wait+0x8a>
 80165aa:	4690      	mov	r8, r2
 80165ac:	461f      	mov	r7, r3
 80165ae:	f04f 0b01 	mov.w	fp, #1
 80165b2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80165b4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80165b6:	3401      	adds	r4, #1
 80165b8:	f14a 0a00 	adc.w	sl, sl, #0
 80165bc:	429c      	cmp	r4, r3
 80165be:	f17a 0100 	sbcs.w	r1, sl, #0
 80165c2:	d228      	bcs.n	8016616 <rcl_wait+0xee>
 80165c4:	6928      	ldr	r0, [r5, #16]
 80165c6:	a908      	add	r1, sp, #32
 80165c8:	00a6      	lsls	r6, r4, #2
 80165ca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80165ce:	2800      	cmp	r0, #0
 80165d0:	d0f1      	beq.n	80165b6 <rcl_wait+0x8e>
 80165d2:	68eb      	ldr	r3, [r5, #12]
 80165d4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80165d8:	4423      	add	r3, r4
 80165da:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80165de:	f1be 0f00 	cmp.w	lr, #0
 80165e2:	d006      	beq.n	80165f2 <rcl_wait+0xca>
 80165e4:	6913      	ldr	r3, [r2, #16]
 80165e6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80165ea:	3301      	adds	r3, #1
 80165ec:	6113      	str	r3, [r2, #16]
 80165ee:	692b      	ldr	r3, [r5, #16]
 80165f0:	5998      	ldr	r0, [r3, r6]
 80165f2:	ed8d 8b08 	vstr	d8, [sp, #32]
 80165f6:	f7ff fa89 	bl	8015b0c <rcl_timer_get_time_until_next_call>
 80165fa:	4548      	cmp	r0, r9
 80165fc:	d1cd      	bne.n	801659a <rcl_wait+0x72>
 80165fe:	692b      	ldr	r3, [r5, #16]
 8016600:	2200      	movs	r2, #0
 8016602:	3401      	adds	r4, #1
 8016604:	519a      	str	r2, [r3, r6]
 8016606:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016608:	f14a 0a00 	adc.w	sl, sl, #0
 801660c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801660e:	429c      	cmp	r4, r3
 8016610:	f17a 0100 	sbcs.w	r1, sl, #0
 8016614:	d3d6      	bcc.n	80165c4 <rcl_wait+0x9c>
 8016616:	4659      	mov	r1, fp
 8016618:	4616      	mov	r6, r2
 801661a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801661e:	4313      	orrs	r3, r2
 8016620:	f040 80b4 	bne.w	801678c <rcl_wait+0x264>
 8016624:	2300      	movs	r3, #0
 8016626:	2200      	movs	r2, #0
 8016628:	460c      	mov	r4, r1
 801662a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801662e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016632:	ab08      	add	r3, sp, #32
 8016634:	9302      	str	r3, [sp, #8]
 8016636:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801663a:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801663c:	f106 0110 	add.w	r1, r6, #16
 8016640:	9300      	str	r3, [sp, #0]
 8016642:	1d30      	adds	r0, r6, #4
 8016644:	f106 031c 	add.w	r3, r6, #28
 8016648:	9201      	str	r2, [sp, #4]
 801664a:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801664e:	f002 fd01 	bl	8019054 <rmw_wait>
 8016652:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016654:	4680      	mov	r8, r0
 8016656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016658:	b1e2      	cbz	r2, 8016694 <rcl_wait+0x16c>
 801665a:	f04f 0900 	mov.w	r9, #0
 801665e:	464f      	mov	r7, r9
 8016660:	692a      	ldr	r2, [r5, #16]
 8016662:	f10d 011f 	add.w	r1, sp, #31
 8016666:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801666a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801666e:	b160      	cbz	r0, 801668a <rcl_wait+0x162>
 8016670:	f88d 701f 	strb.w	r7, [sp, #31]
 8016674:	f7ff fa0e 	bl	8015a94 <rcl_timer_is_ready>
 8016678:	2800      	cmp	r0, #0
 801667a:	f47f af72 	bne.w	8016562 <rcl_wait+0x3a>
 801667e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016682:	b90b      	cbnz	r3, 8016688 <rcl_wait+0x160>
 8016684:	692a      	ldr	r2, [r5, #16]
 8016686:	5193      	str	r3, [r2, r6]
 8016688:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801668a:	f109 0901 	add.w	r9, r9, #1
 801668e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016690:	454a      	cmp	r2, r9
 8016692:	d8e5      	bhi.n	8016660 <rcl_wait+0x138>
 8016694:	f038 0002 	bics.w	r0, r8, #2
 8016698:	d176      	bne.n	8016788 <rcl_wait+0x260>
 801669a:	686f      	ldr	r7, [r5, #4]
 801669c:	b17f      	cbz	r7, 80166be <rcl_wait+0x196>
 801669e:	4602      	mov	r2, r0
 80166a0:	e002      	b.n	80166a8 <rcl_wait+0x180>
 80166a2:	3201      	adds	r2, #1
 80166a4:	42ba      	cmp	r2, r7
 80166a6:	d00a      	beq.n	80166be <rcl_wait+0x196>
 80166a8:	6899      	ldr	r1, [r3, #8]
 80166aa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166ae:	2900      	cmp	r1, #0
 80166b0:	d1f7      	bne.n	80166a2 <rcl_wait+0x17a>
 80166b2:	682e      	ldr	r6, [r5, #0]
 80166b4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80166b8:	3201      	adds	r2, #1
 80166ba:	42ba      	cmp	r2, r7
 80166bc:	d1f4      	bne.n	80166a8 <rcl_wait+0x180>
 80166be:	68ef      	ldr	r7, [r5, #12]
 80166c0:	b17f      	cbz	r7, 80166e2 <rcl_wait+0x1ba>
 80166c2:	2200      	movs	r2, #0
 80166c4:	e002      	b.n	80166cc <rcl_wait+0x1a4>
 80166c6:	3201      	adds	r2, #1
 80166c8:	42ba      	cmp	r2, r7
 80166ca:	d00a      	beq.n	80166e2 <rcl_wait+0x1ba>
 80166cc:	6959      	ldr	r1, [r3, #20]
 80166ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166d2:	2900      	cmp	r1, #0
 80166d4:	d1f7      	bne.n	80166c6 <rcl_wait+0x19e>
 80166d6:	68ae      	ldr	r6, [r5, #8]
 80166d8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80166dc:	3201      	adds	r2, #1
 80166de:	42ba      	cmp	r2, r7
 80166e0:	d1f4      	bne.n	80166cc <rcl_wait+0x1a4>
 80166e2:	69ef      	ldr	r7, [r5, #28]
 80166e4:	b17f      	cbz	r7, 8016706 <rcl_wait+0x1de>
 80166e6:	2200      	movs	r2, #0
 80166e8:	e002      	b.n	80166f0 <rcl_wait+0x1c8>
 80166ea:	3201      	adds	r2, #1
 80166ec:	42ba      	cmp	r2, r7
 80166ee:	d00a      	beq.n	8016706 <rcl_wait+0x1de>
 80166f0:	6a19      	ldr	r1, [r3, #32]
 80166f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166f6:	2900      	cmp	r1, #0
 80166f8:	d1f7      	bne.n	80166ea <rcl_wait+0x1c2>
 80166fa:	69ae      	ldr	r6, [r5, #24]
 80166fc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016700:	3201      	adds	r2, #1
 8016702:	42ba      	cmp	r2, r7
 8016704:	d1f4      	bne.n	80166f0 <rcl_wait+0x1c8>
 8016706:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8016708:	b17f      	cbz	r7, 801672a <rcl_wait+0x202>
 801670a:	2200      	movs	r2, #0
 801670c:	e002      	b.n	8016714 <rcl_wait+0x1ec>
 801670e:	3201      	adds	r2, #1
 8016710:	42ba      	cmp	r2, r7
 8016712:	d00a      	beq.n	801672a <rcl_wait+0x202>
 8016714:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016716:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801671a:	2900      	cmp	r1, #0
 801671c:	d1f7      	bne.n	801670e <rcl_wait+0x1e6>
 801671e:	6a2e      	ldr	r6, [r5, #32]
 8016720:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016724:	3201      	adds	r2, #1
 8016726:	42ba      	cmp	r2, r7
 8016728:	d1f4      	bne.n	8016714 <rcl_wait+0x1ec>
 801672a:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801672c:	b17f      	cbz	r7, 801674e <rcl_wait+0x226>
 801672e:	2200      	movs	r2, #0
 8016730:	e002      	b.n	8016738 <rcl_wait+0x210>
 8016732:	3201      	adds	r2, #1
 8016734:	42ba      	cmp	r2, r7
 8016736:	d00a      	beq.n	801674e <rcl_wait+0x226>
 8016738:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801673a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801673e:	2900      	cmp	r1, #0
 8016740:	d1f7      	bne.n	8016732 <rcl_wait+0x20a>
 8016742:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8016744:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016748:	3201      	adds	r2, #1
 801674a:	42ba      	cmp	r2, r7
 801674c:	d1f4      	bne.n	8016738 <rcl_wait+0x210>
 801674e:	f1b8 0f02 	cmp.w	r8, #2
 8016752:	f47f af06 	bne.w	8016562 <rcl_wait+0x3a>
 8016756:	f084 0301 	eor.w	r3, r4, #1
 801675a:	b2db      	uxtb	r3, r3
 801675c:	2b00      	cmp	r3, #0
 801675e:	bf18      	it	ne
 8016760:	2002      	movne	r0, #2
 8016762:	b00d      	add	sp, #52	@ 0x34
 8016764:	ecbd 8b02 	vpop	{d8}
 8016768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676c:	2a00      	cmp	r2, #0
 801676e:	d03a      	beq.n	80167e6 <rcl_wait+0x2be>
 8016770:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016774:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016778:	e705      	b.n	8016586 <rcl_wait+0x5e>
 801677a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801677e:	b00d      	add	sp, #52	@ 0x34
 8016780:	ecbd 8b02 	vpop	{d8}
 8016784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016788:	2001      	movs	r0, #1
 801678a:	e6ea      	b.n	8016562 <rcl_wait+0x3a>
 801678c:	9b04      	ldr	r3, [sp, #16]
 801678e:	460c      	mov	r4, r1
 8016790:	2b01      	cmp	r3, #1
 8016792:	9b05      	ldr	r3, [sp, #20]
 8016794:	f173 0300 	sbcs.w	r3, r3, #0
 8016798:	bfa8      	it	ge
 801679a:	f044 0401 	orrge.w	r4, r4, #1
 801679e:	b914      	cbnz	r4, 80167a6 <rcl_wait+0x27e>
 80167a0:	4623      	mov	r3, r4
 80167a2:	e747      	b.n	8016634 <rcl_wait+0x10c>
 80167a4:	4611      	mov	r1, r2
 80167a6:	2f00      	cmp	r7, #0
 80167a8:	da02      	bge.n	80167b0 <rcl_wait+0x288>
 80167aa:	f04f 0800 	mov.w	r8, #0
 80167ae:	4647      	mov	r7, r8
 80167b0:	460c      	mov	r4, r1
 80167b2:	4640      	mov	r0, r8
 80167b4:	4639      	mov	r1, r7
 80167b6:	a312      	add	r3, pc, #72	@ (adr r3, 8016800 <rcl_wait+0x2d8>)
 80167b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167bc:	f7e9 fdf8 	bl	80003b0 <__aeabi_ldivmod>
 80167c0:	a30f      	add	r3, pc, #60	@ (adr r3, 8016800 <rcl_wait+0x2d8>)
 80167c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80167ca:	4640      	mov	r0, r8
 80167cc:	4639      	mov	r1, r7
 80167ce:	f7e9 fdef 	bl	80003b0 <__aeabi_ldivmod>
 80167d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80167d6:	ab08      	add	r3, sp, #32
 80167d8:	e72c      	b.n	8016634 <rcl_wait+0x10c>
 80167da:	200b      	movs	r0, #11
 80167dc:	b00d      	add	sp, #52	@ 0x34
 80167de:	ecbd 8b02 	vpop	{d8}
 80167e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167e6:	4611      	mov	r1, r2
 80167e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80167ec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80167f0:	e713      	b.n	801661a <rcl_wait+0xf2>
 80167f2:	bf00      	nop
 80167f4:	f3af 8000 	nop.w
 80167f8:	ffffffff 	.word	0xffffffff
 80167fc:	7fffffff 	.word	0x7fffffff
 8016800:	3b9aca00 	.word	0x3b9aca00
 8016804:	00000000 	.word	0x00000000

08016808 <rcl_action_take_goal_response>:
 8016808:	2800      	cmp	r0, #0
 801680a:	d039      	beq.n	8016880 <rcl_action_take_goal_response+0x78>
 801680c:	b570      	push	{r4, r5, r6, lr}
 801680e:	4604      	mov	r4, r0
 8016810:	6800      	ldr	r0, [r0, #0]
 8016812:	b380      	cbz	r0, 8016876 <rcl_action_take_goal_response+0x6e>
 8016814:	460e      	mov	r6, r1
 8016816:	4615      	mov	r5, r2
 8016818:	f7fd fe82 	bl	8014520 <rcl_client_is_valid>
 801681c:	b330      	cbz	r0, 801686c <rcl_action_take_goal_response+0x64>
 801681e:	6820      	ldr	r0, [r4, #0]
 8016820:	3004      	adds	r0, #4
 8016822:	f7fd fe7d 	bl	8014520 <rcl_client_is_valid>
 8016826:	b308      	cbz	r0, 801686c <rcl_action_take_goal_response+0x64>
 8016828:	6820      	ldr	r0, [r4, #0]
 801682a:	3008      	adds	r0, #8
 801682c:	f7fd fe78 	bl	8014520 <rcl_client_is_valid>
 8016830:	b1e0      	cbz	r0, 801686c <rcl_action_take_goal_response+0x64>
 8016832:	6820      	ldr	r0, [r4, #0]
 8016834:	300c      	adds	r0, #12
 8016836:	f7fe ffe5 	bl	8015804 <rcl_subscription_is_valid>
 801683a:	b1b8      	cbz	r0, 801686c <rcl_action_take_goal_response+0x64>
 801683c:	6820      	ldr	r0, [r4, #0]
 801683e:	3010      	adds	r0, #16
 8016840:	f7fe ffe0 	bl	8015804 <rcl_subscription_is_valid>
 8016844:	b190      	cbz	r0, 801686c <rcl_action_take_goal_response+0x64>
 8016846:	b1cd      	cbz	r5, 801687c <rcl_action_take_goal_response+0x74>
 8016848:	b1c6      	cbz	r6, 801687c <rcl_action_take_goal_response+0x74>
 801684a:	462a      	mov	r2, r5
 801684c:	4631      	mov	r1, r6
 801684e:	6820      	ldr	r0, [r4, #0]
 8016850:	f7fd fe1e 	bl	8014490 <rcl_take_response>
 8016854:	b148      	cbz	r0, 801686a <rcl_action_take_goal_response+0x62>
 8016856:	280a      	cmp	r0, #10
 8016858:	d007      	beq.n	801686a <rcl_action_take_goal_response+0x62>
 801685a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801685e:	f640 0337 	movw	r3, #2103	@ 0x837
 8016862:	4290      	cmp	r0, r2
 8016864:	bf0c      	ite	eq
 8016866:	4618      	moveq	r0, r3
 8016868:	2001      	movne	r0, #1
 801686a:	bd70      	pop	{r4, r5, r6, pc}
 801686c:	f7fc ffc4 	bl	80137f8 <rcutils_reset_error>
 8016870:	f640 0036 	movw	r0, #2102	@ 0x836
 8016874:	bd70      	pop	{r4, r5, r6, pc}
 8016876:	f640 0036 	movw	r0, #2102	@ 0x836
 801687a:	bd70      	pop	{r4, r5, r6, pc}
 801687c:	200b      	movs	r0, #11
 801687e:	bd70      	pop	{r4, r5, r6, pc}
 8016880:	f640 0036 	movw	r0, #2102	@ 0x836
 8016884:	4770      	bx	lr
 8016886:	bf00      	nop

08016888 <rcl_action_send_result_request>:
 8016888:	b390      	cbz	r0, 80168f0 <rcl_action_send_result_request+0x68>
 801688a:	b570      	push	{r4, r5, r6, lr}
 801688c:	4604      	mov	r4, r0
 801688e:	6800      	ldr	r0, [r0, #0]
 8016890:	b348      	cbz	r0, 80168e6 <rcl_action_send_result_request+0x5e>
 8016892:	460e      	mov	r6, r1
 8016894:	4615      	mov	r5, r2
 8016896:	f7fd fe43 	bl	8014520 <rcl_client_is_valid>
 801689a:	b1f8      	cbz	r0, 80168dc <rcl_action_send_result_request+0x54>
 801689c:	6820      	ldr	r0, [r4, #0]
 801689e:	3004      	adds	r0, #4
 80168a0:	f7fd fe3e 	bl	8014520 <rcl_client_is_valid>
 80168a4:	b1d0      	cbz	r0, 80168dc <rcl_action_send_result_request+0x54>
 80168a6:	6820      	ldr	r0, [r4, #0]
 80168a8:	3008      	adds	r0, #8
 80168aa:	f7fd fe39 	bl	8014520 <rcl_client_is_valid>
 80168ae:	b1a8      	cbz	r0, 80168dc <rcl_action_send_result_request+0x54>
 80168b0:	6820      	ldr	r0, [r4, #0]
 80168b2:	300c      	adds	r0, #12
 80168b4:	f7fe ffa6 	bl	8015804 <rcl_subscription_is_valid>
 80168b8:	b180      	cbz	r0, 80168dc <rcl_action_send_result_request+0x54>
 80168ba:	6820      	ldr	r0, [r4, #0]
 80168bc:	3010      	adds	r0, #16
 80168be:	f7fe ffa1 	bl	8015804 <rcl_subscription_is_valid>
 80168c2:	b158      	cbz	r0, 80168dc <rcl_action_send_result_request+0x54>
 80168c4:	b195      	cbz	r5, 80168ec <rcl_action_send_result_request+0x64>
 80168c6:	b18e      	cbz	r6, 80168ec <rcl_action_send_result_request+0x64>
 80168c8:	6820      	ldr	r0, [r4, #0]
 80168ca:	462a      	mov	r2, r5
 80168cc:	4631      	mov	r1, r6
 80168ce:	3008      	adds	r0, #8
 80168d0:	f7fd fda4 	bl	801441c <rcl_send_request>
 80168d4:	3800      	subs	r0, #0
 80168d6:	bf18      	it	ne
 80168d8:	2001      	movne	r0, #1
 80168da:	bd70      	pop	{r4, r5, r6, pc}
 80168dc:	f7fc ff8c 	bl	80137f8 <rcutils_reset_error>
 80168e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80168e4:	bd70      	pop	{r4, r5, r6, pc}
 80168e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80168ea:	bd70      	pop	{r4, r5, r6, pc}
 80168ec:	200b      	movs	r0, #11
 80168ee:	bd70      	pop	{r4, r5, r6, pc}
 80168f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80168f4:	4770      	bx	lr
 80168f6:	bf00      	nop

080168f8 <rcl_action_take_result_response>:
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d03a      	beq.n	8016972 <rcl_action_take_result_response+0x7a>
 80168fc:	b570      	push	{r4, r5, r6, lr}
 80168fe:	4604      	mov	r4, r0
 8016900:	6800      	ldr	r0, [r0, #0]
 8016902:	b388      	cbz	r0, 8016968 <rcl_action_take_result_response+0x70>
 8016904:	460e      	mov	r6, r1
 8016906:	4615      	mov	r5, r2
 8016908:	f7fd fe0a 	bl	8014520 <rcl_client_is_valid>
 801690c:	b338      	cbz	r0, 801695e <rcl_action_take_result_response+0x66>
 801690e:	6820      	ldr	r0, [r4, #0]
 8016910:	3004      	adds	r0, #4
 8016912:	f7fd fe05 	bl	8014520 <rcl_client_is_valid>
 8016916:	b310      	cbz	r0, 801695e <rcl_action_take_result_response+0x66>
 8016918:	6820      	ldr	r0, [r4, #0]
 801691a:	3008      	adds	r0, #8
 801691c:	f7fd fe00 	bl	8014520 <rcl_client_is_valid>
 8016920:	b1e8      	cbz	r0, 801695e <rcl_action_take_result_response+0x66>
 8016922:	6820      	ldr	r0, [r4, #0]
 8016924:	300c      	adds	r0, #12
 8016926:	f7fe ff6d 	bl	8015804 <rcl_subscription_is_valid>
 801692a:	b1c0      	cbz	r0, 801695e <rcl_action_take_result_response+0x66>
 801692c:	6820      	ldr	r0, [r4, #0]
 801692e:	3010      	adds	r0, #16
 8016930:	f7fe ff68 	bl	8015804 <rcl_subscription_is_valid>
 8016934:	b198      	cbz	r0, 801695e <rcl_action_take_result_response+0x66>
 8016936:	b1d5      	cbz	r5, 801696e <rcl_action_take_result_response+0x76>
 8016938:	b1ce      	cbz	r6, 801696e <rcl_action_take_result_response+0x76>
 801693a:	6820      	ldr	r0, [r4, #0]
 801693c:	462a      	mov	r2, r5
 801693e:	4631      	mov	r1, r6
 8016940:	3008      	adds	r0, #8
 8016942:	f7fd fda5 	bl	8014490 <rcl_take_response>
 8016946:	b148      	cbz	r0, 801695c <rcl_action_take_result_response+0x64>
 8016948:	280a      	cmp	r0, #10
 801694a:	d007      	beq.n	801695c <rcl_action_take_result_response+0x64>
 801694c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016950:	f640 0337 	movw	r3, #2103	@ 0x837
 8016954:	4290      	cmp	r0, r2
 8016956:	bf0c      	ite	eq
 8016958:	4618      	moveq	r0, r3
 801695a:	2001      	movne	r0, #1
 801695c:	bd70      	pop	{r4, r5, r6, pc}
 801695e:	f7fc ff4b 	bl	80137f8 <rcutils_reset_error>
 8016962:	f640 0036 	movw	r0, #2102	@ 0x836
 8016966:	bd70      	pop	{r4, r5, r6, pc}
 8016968:	f640 0036 	movw	r0, #2102	@ 0x836
 801696c:	bd70      	pop	{r4, r5, r6, pc}
 801696e:	200b      	movs	r0, #11
 8016970:	bd70      	pop	{r4, r5, r6, pc}
 8016972:	f640 0036 	movw	r0, #2102	@ 0x836
 8016976:	4770      	bx	lr

08016978 <rcl_action_take_cancel_response>:
 8016978:	2800      	cmp	r0, #0
 801697a:	d03a      	beq.n	80169f2 <rcl_action_take_cancel_response+0x7a>
 801697c:	b570      	push	{r4, r5, r6, lr}
 801697e:	4604      	mov	r4, r0
 8016980:	6800      	ldr	r0, [r0, #0]
 8016982:	b388      	cbz	r0, 80169e8 <rcl_action_take_cancel_response+0x70>
 8016984:	460e      	mov	r6, r1
 8016986:	4615      	mov	r5, r2
 8016988:	f7fd fdca 	bl	8014520 <rcl_client_is_valid>
 801698c:	b338      	cbz	r0, 80169de <rcl_action_take_cancel_response+0x66>
 801698e:	6820      	ldr	r0, [r4, #0]
 8016990:	3004      	adds	r0, #4
 8016992:	f7fd fdc5 	bl	8014520 <rcl_client_is_valid>
 8016996:	b310      	cbz	r0, 80169de <rcl_action_take_cancel_response+0x66>
 8016998:	6820      	ldr	r0, [r4, #0]
 801699a:	3008      	adds	r0, #8
 801699c:	f7fd fdc0 	bl	8014520 <rcl_client_is_valid>
 80169a0:	b1e8      	cbz	r0, 80169de <rcl_action_take_cancel_response+0x66>
 80169a2:	6820      	ldr	r0, [r4, #0]
 80169a4:	300c      	adds	r0, #12
 80169a6:	f7fe ff2d 	bl	8015804 <rcl_subscription_is_valid>
 80169aa:	b1c0      	cbz	r0, 80169de <rcl_action_take_cancel_response+0x66>
 80169ac:	6820      	ldr	r0, [r4, #0]
 80169ae:	3010      	adds	r0, #16
 80169b0:	f7fe ff28 	bl	8015804 <rcl_subscription_is_valid>
 80169b4:	b198      	cbz	r0, 80169de <rcl_action_take_cancel_response+0x66>
 80169b6:	b1d5      	cbz	r5, 80169ee <rcl_action_take_cancel_response+0x76>
 80169b8:	b1ce      	cbz	r6, 80169ee <rcl_action_take_cancel_response+0x76>
 80169ba:	6820      	ldr	r0, [r4, #0]
 80169bc:	462a      	mov	r2, r5
 80169be:	4631      	mov	r1, r6
 80169c0:	3004      	adds	r0, #4
 80169c2:	f7fd fd65 	bl	8014490 <rcl_take_response>
 80169c6:	b148      	cbz	r0, 80169dc <rcl_action_take_cancel_response+0x64>
 80169c8:	280a      	cmp	r0, #10
 80169ca:	d007      	beq.n	80169dc <rcl_action_take_cancel_response+0x64>
 80169cc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80169d0:	f640 0337 	movw	r3, #2103	@ 0x837
 80169d4:	4290      	cmp	r0, r2
 80169d6:	bf0c      	ite	eq
 80169d8:	4618      	moveq	r0, r3
 80169da:	2001      	movne	r0, #1
 80169dc:	bd70      	pop	{r4, r5, r6, pc}
 80169de:	f7fc ff0b 	bl	80137f8 <rcutils_reset_error>
 80169e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80169e6:	bd70      	pop	{r4, r5, r6, pc}
 80169e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80169ec:	bd70      	pop	{r4, r5, r6, pc}
 80169ee:	200b      	movs	r0, #11
 80169f0:	bd70      	pop	{r4, r5, r6, pc}
 80169f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80169f6:	4770      	bx	lr

080169f8 <rcl_action_take_feedback>:
 80169f8:	2800      	cmp	r0, #0
 80169fa:	d038      	beq.n	8016a6e <rcl_action_take_feedback+0x76>
 80169fc:	b530      	push	{r4, r5, lr}
 80169fe:	4604      	mov	r4, r0
 8016a00:	6800      	ldr	r0, [r0, #0]
 8016a02:	b091      	sub	sp, #68	@ 0x44
 8016a04:	b378      	cbz	r0, 8016a66 <rcl_action_take_feedback+0x6e>
 8016a06:	460d      	mov	r5, r1
 8016a08:	f7fd fd8a 	bl	8014520 <rcl_client_is_valid>
 8016a0c:	b328      	cbz	r0, 8016a5a <rcl_action_take_feedback+0x62>
 8016a0e:	6820      	ldr	r0, [r4, #0]
 8016a10:	3004      	adds	r0, #4
 8016a12:	f7fd fd85 	bl	8014520 <rcl_client_is_valid>
 8016a16:	b300      	cbz	r0, 8016a5a <rcl_action_take_feedback+0x62>
 8016a18:	6820      	ldr	r0, [r4, #0]
 8016a1a:	3008      	adds	r0, #8
 8016a1c:	f7fd fd80 	bl	8014520 <rcl_client_is_valid>
 8016a20:	b1d8      	cbz	r0, 8016a5a <rcl_action_take_feedback+0x62>
 8016a22:	6820      	ldr	r0, [r4, #0]
 8016a24:	300c      	adds	r0, #12
 8016a26:	f7fe feed 	bl	8015804 <rcl_subscription_is_valid>
 8016a2a:	b1b0      	cbz	r0, 8016a5a <rcl_action_take_feedback+0x62>
 8016a2c:	6820      	ldr	r0, [r4, #0]
 8016a2e:	3010      	adds	r0, #16
 8016a30:	f7fe fee8 	bl	8015804 <rcl_subscription_is_valid>
 8016a34:	b188      	cbz	r0, 8016a5a <rcl_action_take_feedback+0x62>
 8016a36:	b1ed      	cbz	r5, 8016a74 <rcl_action_take_feedback+0x7c>
 8016a38:	6820      	ldr	r0, [r4, #0]
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	466a      	mov	r2, sp
 8016a3e:	4629      	mov	r1, r5
 8016a40:	300c      	adds	r0, #12
 8016a42:	f7fe fe83 	bl	801574c <rcl_take>
 8016a46:	b160      	cbz	r0, 8016a62 <rcl_action_take_feedback+0x6a>
 8016a48:	f240 1391 	movw	r3, #401	@ 0x191
 8016a4c:	4298      	cmp	r0, r3
 8016a4e:	d014      	beq.n	8016a7a <rcl_action_take_feedback+0x82>
 8016a50:	280a      	cmp	r0, #10
 8016a52:	bf18      	it	ne
 8016a54:	2001      	movne	r0, #1
 8016a56:	b011      	add	sp, #68	@ 0x44
 8016a58:	bd30      	pop	{r4, r5, pc}
 8016a5a:	f7fc fecd 	bl	80137f8 <rcutils_reset_error>
 8016a5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a62:	b011      	add	sp, #68	@ 0x44
 8016a64:	bd30      	pop	{r4, r5, pc}
 8016a66:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a6a:	b011      	add	sp, #68	@ 0x44
 8016a6c:	bd30      	pop	{r4, r5, pc}
 8016a6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a72:	4770      	bx	lr
 8016a74:	200b      	movs	r0, #11
 8016a76:	b011      	add	sp, #68	@ 0x44
 8016a78:	bd30      	pop	{r4, r5, pc}
 8016a7a:	f640 0037 	movw	r0, #2103	@ 0x837
 8016a7e:	e7f0      	b.n	8016a62 <rcl_action_take_feedback+0x6a>

08016a80 <rcl_action_wait_set_add_action_client>:
 8016a80:	2800      	cmp	r0, #0
 8016a82:	d048      	beq.n	8016b16 <rcl_action_wait_set_add_action_client+0x96>
 8016a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a86:	460c      	mov	r4, r1
 8016a88:	2900      	cmp	r1, #0
 8016a8a:	d03c      	beq.n	8016b06 <rcl_action_wait_set_add_action_client+0x86>
 8016a8c:	4605      	mov	r5, r0
 8016a8e:	6808      	ldr	r0, [r1, #0]
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d038      	beq.n	8016b06 <rcl_action_wait_set_add_action_client+0x86>
 8016a94:	4617      	mov	r7, r2
 8016a96:	461e      	mov	r6, r3
 8016a98:	f7fd fd42 	bl	8014520 <rcl_client_is_valid>
 8016a9c:	b3b0      	cbz	r0, 8016b0c <rcl_action_wait_set_add_action_client+0x8c>
 8016a9e:	6820      	ldr	r0, [r4, #0]
 8016aa0:	3004      	adds	r0, #4
 8016aa2:	f7fd fd3d 	bl	8014520 <rcl_client_is_valid>
 8016aa6:	b388      	cbz	r0, 8016b0c <rcl_action_wait_set_add_action_client+0x8c>
 8016aa8:	6820      	ldr	r0, [r4, #0]
 8016aaa:	3008      	adds	r0, #8
 8016aac:	f7fd fd38 	bl	8014520 <rcl_client_is_valid>
 8016ab0:	b360      	cbz	r0, 8016b0c <rcl_action_wait_set_add_action_client+0x8c>
 8016ab2:	6820      	ldr	r0, [r4, #0]
 8016ab4:	300c      	adds	r0, #12
 8016ab6:	f7fe fea5 	bl	8015804 <rcl_subscription_is_valid>
 8016aba:	b338      	cbz	r0, 8016b0c <rcl_action_wait_set_add_action_client+0x8c>
 8016abc:	6820      	ldr	r0, [r4, #0]
 8016abe:	3010      	adds	r0, #16
 8016ac0:	f7fe fea0 	bl	8015804 <rcl_subscription_is_valid>
 8016ac4:	b310      	cbz	r0, 8016b0c <rcl_action_wait_set_add_action_client+0x8c>
 8016ac6:	6821      	ldr	r1, [r4, #0]
 8016ac8:	4628      	mov	r0, r5
 8016aca:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016ace:	f7ff fcd1 	bl	8016474 <rcl_wait_set_add_client>
 8016ad2:	b9b8      	cbnz	r0, 8016b04 <rcl_action_wait_set_add_action_client+0x84>
 8016ad4:	6821      	ldr	r1, [r4, #0]
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016adc:	3104      	adds	r1, #4
 8016ade:	f7ff fcc9 	bl	8016474 <rcl_wait_set_add_client>
 8016ae2:	b978      	cbnz	r0, 8016b04 <rcl_action_wait_set_add_action_client+0x84>
 8016ae4:	6821      	ldr	r1, [r4, #0]
 8016ae6:	4628      	mov	r0, r5
 8016ae8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016aec:	3108      	adds	r1, #8
 8016aee:	f7ff fcc1 	bl	8016474 <rcl_wait_set_add_client>
 8016af2:	b938      	cbnz	r0, 8016b04 <rcl_action_wait_set_add_action_client+0x84>
 8016af4:	6821      	ldr	r1, [r4, #0]
 8016af6:	4628      	mov	r0, r5
 8016af8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016afc:	310c      	adds	r1, #12
 8016afe:	f7ff f969 	bl	8015dd4 <rcl_wait_set_add_subscription>
 8016b02:	b158      	cbz	r0, 8016b1c <rcl_action_wait_set_add_action_client+0x9c>
 8016b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b06:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b0c:	f7fc fe74 	bl	80137f8 <rcutils_reset_error>
 8016b10:	f640 0036 	movw	r0, #2102	@ 0x836
 8016b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b16:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016b1a:	4770      	bx	lr
 8016b1c:	6821      	ldr	r1, [r4, #0]
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016b24:	3110      	adds	r1, #16
 8016b26:	f7ff f955 	bl	8015dd4 <rcl_wait_set_add_subscription>
 8016b2a:	2800      	cmp	r0, #0
 8016b2c:	d1ea      	bne.n	8016b04 <rcl_action_wait_set_add_action_client+0x84>
 8016b2e:	b11f      	cbz	r7, 8016b38 <rcl_action_wait_set_add_action_client+0xb8>
 8016b30:	6823      	ldr	r3, [r4, #0]
 8016b32:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016b36:	603b      	str	r3, [r7, #0]
 8016b38:	2e00      	cmp	r6, #0
 8016b3a:	d0e3      	beq.n	8016b04 <rcl_action_wait_set_add_action_client+0x84>
 8016b3c:	6823      	ldr	r3, [r4, #0]
 8016b3e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016b42:	6033      	str	r3, [r6, #0]
 8016b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b46:	bf00      	nop

08016b48 <rcl_action_client_wait_set_get_entities_ready>:
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	d050      	beq.n	8016bee <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8016b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b50:	460c      	mov	r4, r1
 8016b52:	2900      	cmp	r1, #0
 8016b54:	d03e      	beq.n	8016bd4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8016b56:	4605      	mov	r5, r0
 8016b58:	6808      	ldr	r0, [r1, #0]
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	d03a      	beq.n	8016bd4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8016b5e:	4616      	mov	r6, r2
 8016b60:	461f      	mov	r7, r3
 8016b62:	f7fd fcdd 	bl	8014520 <rcl_client_is_valid>
 8016b66:	2800      	cmp	r0, #0
 8016b68:	d038      	beq.n	8016bdc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016b6a:	6820      	ldr	r0, [r4, #0]
 8016b6c:	3004      	adds	r0, #4
 8016b6e:	f7fd fcd7 	bl	8014520 <rcl_client_is_valid>
 8016b72:	2800      	cmp	r0, #0
 8016b74:	d032      	beq.n	8016bdc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016b76:	6820      	ldr	r0, [r4, #0]
 8016b78:	3008      	adds	r0, #8
 8016b7a:	f7fd fcd1 	bl	8014520 <rcl_client_is_valid>
 8016b7e:	b368      	cbz	r0, 8016bdc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016b80:	6820      	ldr	r0, [r4, #0]
 8016b82:	300c      	adds	r0, #12
 8016b84:	f7fe fe3e 	bl	8015804 <rcl_subscription_is_valid>
 8016b88:	b340      	cbz	r0, 8016bdc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016b8a:	6820      	ldr	r0, [r4, #0]
 8016b8c:	3010      	adds	r0, #16
 8016b8e:	f7fe fe39 	bl	8015804 <rcl_subscription_is_valid>
 8016b92:	b318      	cbz	r0, 8016bdc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016b94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8016b98:	2a00      	cmp	r2, #0
 8016b9a:	bf18      	it	ne
 8016b9c:	2b00      	cmpne	r3, #0
 8016b9e:	9b08      	ldr	r3, [sp, #32]
 8016ba0:	bf0c      	ite	eq
 8016ba2:	2101      	moveq	r1, #1
 8016ba4:	2100      	movne	r1, #0
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	bf08      	it	eq
 8016baa:	f041 0101 	orreq.w	r1, r1, #1
 8016bae:	2f00      	cmp	r7, #0
 8016bb0:	bf08      	it	eq
 8016bb2:	f041 0101 	orreq.w	r1, r1, #1
 8016bb6:	b9b9      	cbnz	r1, 8016be8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8016bb8:	b1b6      	cbz	r6, 8016be8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8016bba:	6823      	ldr	r3, [r4, #0]
 8016bbc:	686c      	ldr	r4, [r5, #4]
 8016bbe:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8016bc2:	428a      	cmp	r2, r1
 8016bc4:	4610      	mov	r0, r2
 8016bc6:	bf38      	it	cc
 8016bc8:	4608      	movcc	r0, r1
 8016bca:	4284      	cmp	r4, r0
 8016bcc:	d812      	bhi.n	8016bf4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 8016bce:	2001      	movs	r0, #1
 8016bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bd4:	f640 0036 	movw	r0, #2102	@ 0x836
 8016bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bdc:	f7fc fe0c 	bl	80137f8 <rcutils_reset_error>
 8016be0:	f640 0036 	movw	r0, #2102	@ 0x836
 8016be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016be8:	200b      	movs	r0, #11
 8016bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016bf2:	4770      	bx	lr
 8016bf4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8016bf8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8016bfc:	45f0      	cmp	r8, lr
 8016bfe:	4640      	mov	r0, r8
 8016c00:	69ec      	ldr	r4, [r5, #28]
 8016c02:	bf38      	it	cc
 8016c04:	4670      	movcc	r0, lr
 8016c06:	4560      	cmp	r0, ip
 8016c08:	bf38      	it	cc
 8016c0a:	4660      	movcc	r0, ip
 8016c0c:	4284      	cmp	r4, r0
 8016c0e:	d9de      	bls.n	8016bce <rcl_action_client_wait_set_get_entities_ready+0x86>
 8016c10:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8016c14:	682d      	ldr	r5, [r5, #0]
 8016c16:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8016c1a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8016c1e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8016c22:	1a18      	subs	r0, r3, r0
 8016c24:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8016c28:	f103 0c0c 	add.w	ip, r3, #12
 8016c2c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8016c30:	fab0 f080 	clz	r0, r0
 8016c34:	eba5 050c 	sub.w	r5, r5, ip
 8016c38:	0940      	lsrs	r0, r0, #5
 8016c3a:	fab5 f585 	clz	r5, r5
 8016c3e:	096d      	lsrs	r5, r5, #5
 8016c40:	7035      	strb	r5, [r6, #0]
 8016c42:	f103 0510 	add.w	r5, r3, #16
 8016c46:	1b64      	subs	r4, r4, r5
 8016c48:	9d08      	ldr	r5, [sp, #32]
 8016c4a:	fab4 f484 	clz	r4, r4
 8016c4e:	0964      	lsrs	r4, r4, #5
 8016c50:	703c      	strb	r4, [r7, #0]
 8016c52:	1d1c      	adds	r4, r3, #4
 8016c54:	3308      	adds	r3, #8
 8016c56:	7028      	strb	r0, [r5, #0]
 8016c58:	1b09      	subs	r1, r1, r4
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	1ad3      	subs	r3, r2, r3
 8016c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c60:	fab1 f181 	clz	r1, r1
 8016c64:	fab3 f383 	clz	r3, r3
 8016c68:	0949      	lsrs	r1, r1, #5
 8016c6a:	095b      	lsrs	r3, r3, #5
 8016c6c:	7011      	strb	r1, [r2, #0]
 8016c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c70:	7013      	strb	r3, [r2, #0]
 8016c72:	e7b1      	b.n	8016bd8 <rcl_action_client_wait_set_get_entities_ready+0x90>

08016c74 <rcl_action_take_goal_request>:
 8016c74:	2800      	cmp	r0, #0
 8016c76:	d039      	beq.n	8016cec <rcl_action_take_goal_request+0x78>
 8016c78:	b570      	push	{r4, r5, r6, lr}
 8016c7a:	4604      	mov	r4, r0
 8016c7c:	6800      	ldr	r0, [r0, #0]
 8016c7e:	b380      	cbz	r0, 8016ce2 <rcl_action_take_goal_request+0x6e>
 8016c80:	460e      	mov	r6, r1
 8016c82:	4615      	mov	r5, r2
 8016c84:	f7fe fc76 	bl	8015574 <rcl_service_is_valid>
 8016c88:	b330      	cbz	r0, 8016cd8 <rcl_action_take_goal_request+0x64>
 8016c8a:	6820      	ldr	r0, [r4, #0]
 8016c8c:	3004      	adds	r0, #4
 8016c8e:	f7fe fc71 	bl	8015574 <rcl_service_is_valid>
 8016c92:	b308      	cbz	r0, 8016cd8 <rcl_action_take_goal_request+0x64>
 8016c94:	6820      	ldr	r0, [r4, #0]
 8016c96:	3008      	adds	r0, #8
 8016c98:	f7fe fc6c 	bl	8015574 <rcl_service_is_valid>
 8016c9c:	b1e0      	cbz	r0, 8016cd8 <rcl_action_take_goal_request+0x64>
 8016c9e:	6820      	ldr	r0, [r4, #0]
 8016ca0:	300c      	adds	r0, #12
 8016ca2:	f7fe fa2d 	bl	8015100 <rcl_publisher_is_valid>
 8016ca6:	b1b8      	cbz	r0, 8016cd8 <rcl_action_take_goal_request+0x64>
 8016ca8:	6820      	ldr	r0, [r4, #0]
 8016caa:	3010      	adds	r0, #16
 8016cac:	f7fe fa28 	bl	8015100 <rcl_publisher_is_valid>
 8016cb0:	b190      	cbz	r0, 8016cd8 <rcl_action_take_goal_request+0x64>
 8016cb2:	b1cd      	cbz	r5, 8016ce8 <rcl_action_take_goal_request+0x74>
 8016cb4:	b1c6      	cbz	r6, 8016ce8 <rcl_action_take_goal_request+0x74>
 8016cb6:	462a      	mov	r2, r5
 8016cb8:	4631      	mov	r1, r6
 8016cba:	6820      	ldr	r0, [r4, #0]
 8016cbc:	f7fe fc02 	bl	80154c4 <rcl_take_request>
 8016cc0:	b148      	cbz	r0, 8016cd6 <rcl_action_take_goal_request+0x62>
 8016cc2:	280a      	cmp	r0, #10
 8016cc4:	d007      	beq.n	8016cd6 <rcl_action_take_goal_request+0x62>
 8016cc6:	f240 2259 	movw	r2, #601	@ 0x259
 8016cca:	f640 0399 	movw	r3, #2201	@ 0x899
 8016cce:	4290      	cmp	r0, r2
 8016cd0:	bf0c      	ite	eq
 8016cd2:	4618      	moveq	r0, r3
 8016cd4:	2001      	movne	r0, #1
 8016cd6:	bd70      	pop	{r4, r5, r6, pc}
 8016cd8:	f7fc fd8e 	bl	80137f8 <rcutils_reset_error>
 8016cdc:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ce0:	bd70      	pop	{r4, r5, r6, pc}
 8016ce2:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ce6:	bd70      	pop	{r4, r5, r6, pc}
 8016ce8:	200b      	movs	r0, #11
 8016cea:	bd70      	pop	{r4, r5, r6, pc}
 8016cec:	f640 0098 	movw	r0, #2200	@ 0x898
 8016cf0:	4770      	bx	lr
 8016cf2:	bf00      	nop

08016cf4 <rcl_action_send_goal_response>:
 8016cf4:	b390      	cbz	r0, 8016d5c <rcl_action_send_goal_response+0x68>
 8016cf6:	b570      	push	{r4, r5, r6, lr}
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	6800      	ldr	r0, [r0, #0]
 8016cfc:	b348      	cbz	r0, 8016d52 <rcl_action_send_goal_response+0x5e>
 8016cfe:	460e      	mov	r6, r1
 8016d00:	4615      	mov	r5, r2
 8016d02:	f7fe fc37 	bl	8015574 <rcl_service_is_valid>
 8016d06:	b1f8      	cbz	r0, 8016d48 <rcl_action_send_goal_response+0x54>
 8016d08:	6820      	ldr	r0, [r4, #0]
 8016d0a:	3004      	adds	r0, #4
 8016d0c:	f7fe fc32 	bl	8015574 <rcl_service_is_valid>
 8016d10:	b1d0      	cbz	r0, 8016d48 <rcl_action_send_goal_response+0x54>
 8016d12:	6820      	ldr	r0, [r4, #0]
 8016d14:	3008      	adds	r0, #8
 8016d16:	f7fe fc2d 	bl	8015574 <rcl_service_is_valid>
 8016d1a:	b1a8      	cbz	r0, 8016d48 <rcl_action_send_goal_response+0x54>
 8016d1c:	6820      	ldr	r0, [r4, #0]
 8016d1e:	300c      	adds	r0, #12
 8016d20:	f7fe f9ee 	bl	8015100 <rcl_publisher_is_valid>
 8016d24:	b180      	cbz	r0, 8016d48 <rcl_action_send_goal_response+0x54>
 8016d26:	6820      	ldr	r0, [r4, #0]
 8016d28:	3010      	adds	r0, #16
 8016d2a:	f7fe f9e9 	bl	8015100 <rcl_publisher_is_valid>
 8016d2e:	b158      	cbz	r0, 8016d48 <rcl_action_send_goal_response+0x54>
 8016d30:	b195      	cbz	r5, 8016d58 <rcl_action_send_goal_response+0x64>
 8016d32:	b18e      	cbz	r6, 8016d58 <rcl_action_send_goal_response+0x64>
 8016d34:	462a      	mov	r2, r5
 8016d36:	4631      	mov	r1, r6
 8016d38:	6820      	ldr	r0, [r4, #0]
 8016d3a:	f7fe fc03 	bl	8015544 <rcl_send_response>
 8016d3e:	b110      	cbz	r0, 8016d46 <rcl_action_send_goal_response+0x52>
 8016d40:	2802      	cmp	r0, #2
 8016d42:	bf18      	it	ne
 8016d44:	2001      	movne	r0, #1
 8016d46:	bd70      	pop	{r4, r5, r6, pc}
 8016d48:	f7fc fd56 	bl	80137f8 <rcutils_reset_error>
 8016d4c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d50:	bd70      	pop	{r4, r5, r6, pc}
 8016d52:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d56:	bd70      	pop	{r4, r5, r6, pc}
 8016d58:	200b      	movs	r0, #11
 8016d5a:	bd70      	pop	{r4, r5, r6, pc}
 8016d5c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d60:	4770      	bx	lr
 8016d62:	bf00      	nop

08016d64 <rcl_action_take_result_request>:
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d03a      	beq.n	8016dde <rcl_action_take_result_request+0x7a>
 8016d68:	b570      	push	{r4, r5, r6, lr}
 8016d6a:	4604      	mov	r4, r0
 8016d6c:	6800      	ldr	r0, [r0, #0]
 8016d6e:	b388      	cbz	r0, 8016dd4 <rcl_action_take_result_request+0x70>
 8016d70:	460e      	mov	r6, r1
 8016d72:	4615      	mov	r5, r2
 8016d74:	f7fe fbfe 	bl	8015574 <rcl_service_is_valid>
 8016d78:	b338      	cbz	r0, 8016dca <rcl_action_take_result_request+0x66>
 8016d7a:	6820      	ldr	r0, [r4, #0]
 8016d7c:	3004      	adds	r0, #4
 8016d7e:	f7fe fbf9 	bl	8015574 <rcl_service_is_valid>
 8016d82:	b310      	cbz	r0, 8016dca <rcl_action_take_result_request+0x66>
 8016d84:	6820      	ldr	r0, [r4, #0]
 8016d86:	3008      	adds	r0, #8
 8016d88:	f7fe fbf4 	bl	8015574 <rcl_service_is_valid>
 8016d8c:	b1e8      	cbz	r0, 8016dca <rcl_action_take_result_request+0x66>
 8016d8e:	6820      	ldr	r0, [r4, #0]
 8016d90:	300c      	adds	r0, #12
 8016d92:	f7fe f9b5 	bl	8015100 <rcl_publisher_is_valid>
 8016d96:	b1c0      	cbz	r0, 8016dca <rcl_action_take_result_request+0x66>
 8016d98:	6820      	ldr	r0, [r4, #0]
 8016d9a:	3010      	adds	r0, #16
 8016d9c:	f7fe f9b0 	bl	8015100 <rcl_publisher_is_valid>
 8016da0:	b198      	cbz	r0, 8016dca <rcl_action_take_result_request+0x66>
 8016da2:	b1d5      	cbz	r5, 8016dda <rcl_action_take_result_request+0x76>
 8016da4:	b1ce      	cbz	r6, 8016dda <rcl_action_take_result_request+0x76>
 8016da6:	6820      	ldr	r0, [r4, #0]
 8016da8:	462a      	mov	r2, r5
 8016daa:	4631      	mov	r1, r6
 8016dac:	3008      	adds	r0, #8
 8016dae:	f7fe fb89 	bl	80154c4 <rcl_take_request>
 8016db2:	b148      	cbz	r0, 8016dc8 <rcl_action_take_result_request+0x64>
 8016db4:	280a      	cmp	r0, #10
 8016db6:	d007      	beq.n	8016dc8 <rcl_action_take_result_request+0x64>
 8016db8:	f240 2259 	movw	r2, #601	@ 0x259
 8016dbc:	f640 0399 	movw	r3, #2201	@ 0x899
 8016dc0:	4290      	cmp	r0, r2
 8016dc2:	bf0c      	ite	eq
 8016dc4:	4618      	moveq	r0, r3
 8016dc6:	2001      	movne	r0, #1
 8016dc8:	bd70      	pop	{r4, r5, r6, pc}
 8016dca:	f7fc fd15 	bl	80137f8 <rcutils_reset_error>
 8016dce:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dd2:	bd70      	pop	{r4, r5, r6, pc}
 8016dd4:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dd8:	bd70      	pop	{r4, r5, r6, pc}
 8016dda:	200b      	movs	r0, #11
 8016ddc:	bd70      	pop	{r4, r5, r6, pc}
 8016dde:	f640 0098 	movw	r0, #2200	@ 0x898
 8016de2:	4770      	bx	lr

08016de4 <rcl_action_take_cancel_request>:
 8016de4:	2800      	cmp	r0, #0
 8016de6:	d03a      	beq.n	8016e5e <rcl_action_take_cancel_request+0x7a>
 8016de8:	b570      	push	{r4, r5, r6, lr}
 8016dea:	4604      	mov	r4, r0
 8016dec:	6800      	ldr	r0, [r0, #0]
 8016dee:	b388      	cbz	r0, 8016e54 <rcl_action_take_cancel_request+0x70>
 8016df0:	460e      	mov	r6, r1
 8016df2:	4615      	mov	r5, r2
 8016df4:	f7fe fbbe 	bl	8015574 <rcl_service_is_valid>
 8016df8:	b338      	cbz	r0, 8016e4a <rcl_action_take_cancel_request+0x66>
 8016dfa:	6820      	ldr	r0, [r4, #0]
 8016dfc:	3004      	adds	r0, #4
 8016dfe:	f7fe fbb9 	bl	8015574 <rcl_service_is_valid>
 8016e02:	b310      	cbz	r0, 8016e4a <rcl_action_take_cancel_request+0x66>
 8016e04:	6820      	ldr	r0, [r4, #0]
 8016e06:	3008      	adds	r0, #8
 8016e08:	f7fe fbb4 	bl	8015574 <rcl_service_is_valid>
 8016e0c:	b1e8      	cbz	r0, 8016e4a <rcl_action_take_cancel_request+0x66>
 8016e0e:	6820      	ldr	r0, [r4, #0]
 8016e10:	300c      	adds	r0, #12
 8016e12:	f7fe f975 	bl	8015100 <rcl_publisher_is_valid>
 8016e16:	b1c0      	cbz	r0, 8016e4a <rcl_action_take_cancel_request+0x66>
 8016e18:	6820      	ldr	r0, [r4, #0]
 8016e1a:	3010      	adds	r0, #16
 8016e1c:	f7fe f970 	bl	8015100 <rcl_publisher_is_valid>
 8016e20:	b198      	cbz	r0, 8016e4a <rcl_action_take_cancel_request+0x66>
 8016e22:	b1d5      	cbz	r5, 8016e5a <rcl_action_take_cancel_request+0x76>
 8016e24:	b1ce      	cbz	r6, 8016e5a <rcl_action_take_cancel_request+0x76>
 8016e26:	6820      	ldr	r0, [r4, #0]
 8016e28:	462a      	mov	r2, r5
 8016e2a:	4631      	mov	r1, r6
 8016e2c:	3004      	adds	r0, #4
 8016e2e:	f7fe fb49 	bl	80154c4 <rcl_take_request>
 8016e32:	b148      	cbz	r0, 8016e48 <rcl_action_take_cancel_request+0x64>
 8016e34:	280a      	cmp	r0, #10
 8016e36:	d007      	beq.n	8016e48 <rcl_action_take_cancel_request+0x64>
 8016e38:	f240 2259 	movw	r2, #601	@ 0x259
 8016e3c:	f640 0399 	movw	r3, #2201	@ 0x899
 8016e40:	4290      	cmp	r0, r2
 8016e42:	bf0c      	ite	eq
 8016e44:	4618      	moveq	r0, r3
 8016e46:	2001      	movne	r0, #1
 8016e48:	bd70      	pop	{r4, r5, r6, pc}
 8016e4a:	f7fc fcd5 	bl	80137f8 <rcutils_reset_error>
 8016e4e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e52:	bd70      	pop	{r4, r5, r6, pc}
 8016e54:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e58:	bd70      	pop	{r4, r5, r6, pc}
 8016e5a:	200b      	movs	r0, #11
 8016e5c:	bd70      	pop	{r4, r5, r6, pc}
 8016e5e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e62:	4770      	bx	lr

08016e64 <rcl_action_send_cancel_response>:
 8016e64:	b398      	cbz	r0, 8016ece <rcl_action_send_cancel_response+0x6a>
 8016e66:	b570      	push	{r4, r5, r6, lr}
 8016e68:	4604      	mov	r4, r0
 8016e6a:	6800      	ldr	r0, [r0, #0]
 8016e6c:	b350      	cbz	r0, 8016ec4 <rcl_action_send_cancel_response+0x60>
 8016e6e:	460e      	mov	r6, r1
 8016e70:	4615      	mov	r5, r2
 8016e72:	f7fe fb7f 	bl	8015574 <rcl_service_is_valid>
 8016e76:	b300      	cbz	r0, 8016eba <rcl_action_send_cancel_response+0x56>
 8016e78:	6820      	ldr	r0, [r4, #0]
 8016e7a:	3004      	adds	r0, #4
 8016e7c:	f7fe fb7a 	bl	8015574 <rcl_service_is_valid>
 8016e80:	b1d8      	cbz	r0, 8016eba <rcl_action_send_cancel_response+0x56>
 8016e82:	6820      	ldr	r0, [r4, #0]
 8016e84:	3008      	adds	r0, #8
 8016e86:	f7fe fb75 	bl	8015574 <rcl_service_is_valid>
 8016e8a:	b1b0      	cbz	r0, 8016eba <rcl_action_send_cancel_response+0x56>
 8016e8c:	6820      	ldr	r0, [r4, #0]
 8016e8e:	300c      	adds	r0, #12
 8016e90:	f7fe f936 	bl	8015100 <rcl_publisher_is_valid>
 8016e94:	b188      	cbz	r0, 8016eba <rcl_action_send_cancel_response+0x56>
 8016e96:	6820      	ldr	r0, [r4, #0]
 8016e98:	3010      	adds	r0, #16
 8016e9a:	f7fe f931 	bl	8015100 <rcl_publisher_is_valid>
 8016e9e:	b160      	cbz	r0, 8016eba <rcl_action_send_cancel_response+0x56>
 8016ea0:	b19d      	cbz	r5, 8016eca <rcl_action_send_cancel_response+0x66>
 8016ea2:	b196      	cbz	r6, 8016eca <rcl_action_send_cancel_response+0x66>
 8016ea4:	6820      	ldr	r0, [r4, #0]
 8016ea6:	462a      	mov	r2, r5
 8016ea8:	4631      	mov	r1, r6
 8016eaa:	3004      	adds	r0, #4
 8016eac:	f7fe fb4a 	bl	8015544 <rcl_send_response>
 8016eb0:	b110      	cbz	r0, 8016eb8 <rcl_action_send_cancel_response+0x54>
 8016eb2:	2802      	cmp	r0, #2
 8016eb4:	bf18      	it	ne
 8016eb6:	2001      	movne	r0, #1
 8016eb8:	bd70      	pop	{r4, r5, r6, pc}
 8016eba:	f7fc fc9d 	bl	80137f8 <rcutils_reset_error>
 8016ebe:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ec2:	bd70      	pop	{r4, r5, r6, pc}
 8016ec4:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ec8:	bd70      	pop	{r4, r5, r6, pc}
 8016eca:	200b      	movs	r0, #11
 8016ecc:	bd70      	pop	{r4, r5, r6, pc}
 8016ece:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ed2:	4770      	bx	lr

08016ed4 <rcl_action_wait_set_add_action_server>:
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	d04d      	beq.n	8016f74 <rcl_action_wait_set_add_action_server+0xa0>
 8016ed8:	b570      	push	{r4, r5, r6, lr}
 8016eda:	460c      	mov	r4, r1
 8016edc:	b159      	cbz	r1, 8016ef6 <rcl_action_wait_set_add_action_server+0x22>
 8016ede:	4605      	mov	r5, r0
 8016ee0:	6808      	ldr	r0, [r1, #0]
 8016ee2:	b140      	cbz	r0, 8016ef6 <rcl_action_wait_set_add_action_server+0x22>
 8016ee4:	4616      	mov	r6, r2
 8016ee6:	f7fe fb45 	bl	8015574 <rcl_service_is_valid>
 8016eea:	b120      	cbz	r0, 8016ef6 <rcl_action_wait_set_add_action_server+0x22>
 8016eec:	6820      	ldr	r0, [r4, #0]
 8016eee:	3004      	adds	r0, #4
 8016ef0:	f7fe fb40 	bl	8015574 <rcl_service_is_valid>
 8016ef4:	b910      	cbnz	r0, 8016efc <rcl_action_wait_set_add_action_server+0x28>
 8016ef6:	f640 0098 	movw	r0, #2200	@ 0x898
 8016efa:	bd70      	pop	{r4, r5, r6, pc}
 8016efc:	6820      	ldr	r0, [r4, #0]
 8016efe:	3008      	adds	r0, #8
 8016f00:	f7fe fb38 	bl	8015574 <rcl_service_is_valid>
 8016f04:	2800      	cmp	r0, #0
 8016f06:	d0f6      	beq.n	8016ef6 <rcl_action_wait_set_add_action_server+0x22>
 8016f08:	6820      	ldr	r0, [r4, #0]
 8016f0a:	300c      	adds	r0, #12
 8016f0c:	f7fe f910 	bl	8015130 <rcl_publisher_is_valid_except_context>
 8016f10:	2800      	cmp	r0, #0
 8016f12:	d0f0      	beq.n	8016ef6 <rcl_action_wait_set_add_action_server+0x22>
 8016f14:	6820      	ldr	r0, [r4, #0]
 8016f16:	3010      	adds	r0, #16
 8016f18:	f7fe f90a 	bl	8015130 <rcl_publisher_is_valid_except_context>
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	d0ea      	beq.n	8016ef6 <rcl_action_wait_set_add_action_server+0x22>
 8016f20:	6821      	ldr	r1, [r4, #0]
 8016f22:	4628      	mov	r0, r5
 8016f24:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016f28:	f7ff fad0 	bl	80164cc <rcl_wait_set_add_service>
 8016f2c:	2800      	cmp	r0, #0
 8016f2e:	d1e4      	bne.n	8016efa <rcl_action_wait_set_add_action_server+0x26>
 8016f30:	6821      	ldr	r1, [r4, #0]
 8016f32:	4628      	mov	r0, r5
 8016f34:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016f38:	3104      	adds	r1, #4
 8016f3a:	f7ff fac7 	bl	80164cc <rcl_wait_set_add_service>
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d1db      	bne.n	8016efa <rcl_action_wait_set_add_action_server+0x26>
 8016f42:	6821      	ldr	r1, [r4, #0]
 8016f44:	4628      	mov	r0, r5
 8016f46:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016f4a:	3108      	adds	r1, #8
 8016f4c:	f7ff fabe 	bl	80164cc <rcl_wait_set_add_service>
 8016f50:	2800      	cmp	r0, #0
 8016f52:	d1d2      	bne.n	8016efa <rcl_action_wait_set_add_action_server+0x26>
 8016f54:	6821      	ldr	r1, [r4, #0]
 8016f56:	4628      	mov	r0, r5
 8016f58:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016f5c:	3114      	adds	r1, #20
 8016f5e:	f7ff fa59 	bl	8016414 <rcl_wait_set_add_timer>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d1c9      	bne.n	8016efa <rcl_action_wait_set_add_action_server+0x26>
 8016f66:	2e00      	cmp	r6, #0
 8016f68:	d0c7      	beq.n	8016efa <rcl_action_wait_set_add_action_server+0x26>
 8016f6a:	6823      	ldr	r3, [r4, #0]
 8016f6c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016f70:	6033      	str	r3, [r6, #0]
 8016f72:	bd70      	pop	{r4, r5, r6, pc}
 8016f74:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016f78:	4770      	bx	lr
 8016f7a:	bf00      	nop

08016f7c <rcl_action_server_wait_set_get_entities_ready>:
 8016f7c:	2800      	cmp	r0, #0
 8016f7e:	d067      	beq.n	8017050 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8016f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f84:	460c      	mov	r4, r1
 8016f86:	b161      	cbz	r1, 8016fa2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016f88:	4605      	mov	r5, r0
 8016f8a:	6808      	ldr	r0, [r1, #0]
 8016f8c:	b148      	cbz	r0, 8016fa2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016f8e:	4616      	mov	r6, r2
 8016f90:	4698      	mov	r8, r3
 8016f92:	f7fe faef 	bl	8015574 <rcl_service_is_valid>
 8016f96:	b120      	cbz	r0, 8016fa2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016f98:	6820      	ldr	r0, [r4, #0]
 8016f9a:	3004      	adds	r0, #4
 8016f9c:	f7fe faea 	bl	8015574 <rcl_service_is_valid>
 8016fa0:	b918      	cbnz	r0, 8016faa <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8016fa2:	f640 0098 	movw	r0, #2200	@ 0x898
 8016fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016faa:	6820      	ldr	r0, [r4, #0]
 8016fac:	3008      	adds	r0, #8
 8016fae:	f7fe fae1 	bl	8015574 <rcl_service_is_valid>
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	d0f5      	beq.n	8016fa2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016fb6:	6820      	ldr	r0, [r4, #0]
 8016fb8:	300c      	adds	r0, #12
 8016fba:	f7fe f8b9 	bl	8015130 <rcl_publisher_is_valid_except_context>
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	d0ef      	beq.n	8016fa2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016fc2:	6820      	ldr	r0, [r4, #0]
 8016fc4:	3010      	adds	r0, #16
 8016fc6:	f7fe f8b3 	bl	8015130 <rcl_publisher_is_valid_except_context>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d0e9      	beq.n	8016fa2 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8016fce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016fd2:	2a00      	cmp	r2, #0
 8016fd4:	bf18      	it	ne
 8016fd6:	2b00      	cmpne	r3, #0
 8016fd8:	bf0c      	ite	eq
 8016fda:	2101      	moveq	r1, #1
 8016fdc:	2100      	movne	r1, #0
 8016fde:	f1b8 0f00 	cmp.w	r8, #0
 8016fe2:	bf08      	it	eq
 8016fe4:	f041 0101 	orreq.w	r1, r1, #1
 8016fe8:	bba9      	cbnz	r1, 8017056 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8016fea:	b3a6      	cbz	r6, 8017056 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8016fec:	6821      	ldr	r1, [r4, #0]
 8016fee:	2000      	movs	r0, #0
 8016ff0:	692c      	ldr	r4, [r5, #16]
 8016ff2:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8016ff6:	6a2f      	ldr	r7, [r5, #32]
 8016ff8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016ffc:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8017000:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017004:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8017008:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801700c:	1a64      	subs	r4, r4, r1
 801700e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8017012:	fab4 f484 	clz	r4, r4
 8017016:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801701a:	0964      	lsrs	r4, r4, #5
 801701c:	7034      	strb	r4, [r6, #0]
 801701e:	1d0c      	adds	r4, r1, #4
 8017020:	1b2c      	subs	r4, r5, r4
 8017022:	fab4 f484 	clz	r4, r4
 8017026:	0964      	lsrs	r4, r4, #5
 8017028:	f888 4000 	strb.w	r4, [r8]
 801702c:	f101 0408 	add.w	r4, r1, #8
 8017030:	1b1b      	subs	r3, r3, r4
 8017032:	9c06      	ldr	r4, [sp, #24]
 8017034:	fab3 f383 	clz	r3, r3
 8017038:	095b      	lsrs	r3, r3, #5
 801703a:	7023      	strb	r3, [r4, #0]
 801703c:	f101 0314 	add.w	r3, r1, #20
 8017040:	1ad3      	subs	r3, r2, r3
 8017042:	9a07      	ldr	r2, [sp, #28]
 8017044:	fab3 f383 	clz	r3, r3
 8017048:	095b      	lsrs	r3, r3, #5
 801704a:	7013      	strb	r3, [r2, #0]
 801704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017050:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017054:	4770      	bx	lr
 8017056:	200b      	movs	r0, #11
 8017058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801705c <_execute_event_handler>:
 801705c:	2002      	movs	r0, #2
 801705e:	4770      	bx	lr

08017060 <_cancel_goal_event_handler>:
 8017060:	2003      	movs	r0, #3
 8017062:	4770      	bx	lr

08017064 <_succeed_event_handler>:
 8017064:	2004      	movs	r0, #4
 8017066:	4770      	bx	lr

08017068 <_abort_event_handler>:
 8017068:	2006      	movs	r0, #6
 801706a:	4770      	bx	lr

0801706c <_canceled_event_handler>:
 801706c:	2005      	movs	r0, #5
 801706e:	4770      	bx	lr

08017070 <rcl_action_transition_goal_state>:
 8017070:	b2c2      	uxtb	r2, r0
 8017072:	2a06      	cmp	r2, #6
 8017074:	d810      	bhi.n	8017098 <rcl_action_transition_goal_state+0x28>
 8017076:	2904      	cmp	r1, #4
 8017078:	d80e      	bhi.n	8017098 <rcl_action_transition_goal_state+0x28>
 801707a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801707e:	b410      	push	{r4}
 8017080:	1853      	adds	r3, r2, r1
 8017082:	4c06      	ldr	r4, [pc, #24]	@ (801709c <rcl_action_transition_goal_state+0x2c>)
 8017084:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017088:	b113      	cbz	r3, 8017090 <rcl_action_transition_goal_state+0x20>
 801708a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801708e:	4718      	bx	r3
 8017090:	2000      	movs	r0, #0
 8017092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017096:	4770      	bx	lr
 8017098:	2000      	movs	r0, #0
 801709a:	4770      	bx	lr
 801709c:	08022804 	.word	0x08022804

080170a0 <rcl_action_get_zero_initialized_cancel_response>:
 80170a0:	b510      	push	{r4, lr}
 80170a2:	4c07      	ldr	r4, [pc, #28]	@ (80170c0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80170a4:	4686      	mov	lr, r0
 80170a6:	4684      	mov	ip, r0
 80170a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170b4:	6823      	ldr	r3, [r4, #0]
 80170b6:	4670      	mov	r0, lr
 80170b8:	f8cc 3000 	str.w	r3, [ip]
 80170bc:	bd10      	pop	{r4, pc}
 80170be:	bf00      	nop
 80170c0:	08022890 	.word	0x08022890

080170c4 <rclc_action_send_result_request>:
 80170c4:	b1d0      	cbz	r0, 80170fc <rclc_action_send_result_request+0x38>
 80170c6:	4684      	mov	ip, r0
 80170c8:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80170cc:	b500      	push	{lr}
 80170ce:	b087      	sub	sp, #28
 80170d0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80170d4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80170d8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80170dc:	f10d 0e08 	add.w	lr, sp, #8
 80170e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80170e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80170e8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80170ec:	a902      	add	r1, sp, #8
 80170ee:	3010      	adds	r0, #16
 80170f0:	f7ff fbca 	bl	8016888 <rcl_action_send_result_request>
 80170f4:	b920      	cbnz	r0, 8017100 <rclc_action_send_result_request+0x3c>
 80170f6:	b007      	add	sp, #28
 80170f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80170fc:	200b      	movs	r0, #11
 80170fe:	4770      	bx	lr
 8017100:	9001      	str	r0, [sp, #4]
 8017102:	f7fc fb79 	bl	80137f8 <rcutils_reset_error>
 8017106:	9801      	ldr	r0, [sp, #4]
 8017108:	b007      	add	sp, #28
 801710a:	f85d fb04 	ldr.w	pc, [sp], #4
 801710e:	bf00      	nop

08017110 <rclc_action_take_goal_handle>:
 8017110:	b160      	cbz	r0, 801712c <rclc_action_take_goal_handle+0x1c>
 8017112:	6883      	ldr	r3, [r0, #8]
 8017114:	b143      	cbz	r3, 8017128 <rclc_action_take_goal_handle+0x18>
 8017116:	6819      	ldr	r1, [r3, #0]
 8017118:	2200      	movs	r2, #0
 801711a:	6081      	str	r1, [r0, #8]
 801711c:	721a      	strb	r2, [r3, #8]
 801711e:	68c1      	ldr	r1, [r0, #12]
 8017120:	621a      	str	r2, [r3, #32]
 8017122:	849a      	strh	r2, [r3, #36]	@ 0x24
 8017124:	6019      	str	r1, [r3, #0]
 8017126:	60c3      	str	r3, [r0, #12]
 8017128:	4618      	mov	r0, r3
 801712a:	4770      	bx	lr
 801712c:	4603      	mov	r3, r0
 801712e:	e7fb      	b.n	8017128 <rclc_action_take_goal_handle+0x18>

08017130 <rclc_action_remove_used_goal_handle>:
 8017130:	b180      	cbz	r0, 8017154 <rclc_action_remove_used_goal_handle+0x24>
 8017132:	b179      	cbz	r1, 8017154 <rclc_action_remove_used_goal_handle+0x24>
 8017134:	68c3      	ldr	r3, [r0, #12]
 8017136:	4299      	cmp	r1, r3
 8017138:	d00d      	beq.n	8017156 <rclc_action_remove_used_goal_handle+0x26>
 801713a:	b12b      	cbz	r3, 8017148 <rclc_action_remove_used_goal_handle+0x18>
 801713c:	681a      	ldr	r2, [r3, #0]
 801713e:	4291      	cmp	r1, r2
 8017140:	d003      	beq.n	801714a <rclc_action_remove_used_goal_handle+0x1a>
 8017142:	4613      	mov	r3, r2
 8017144:	2b00      	cmp	r3, #0
 8017146:	d1f9      	bne.n	801713c <rclc_action_remove_used_goal_handle+0xc>
 8017148:	4770      	bx	lr
 801714a:	680a      	ldr	r2, [r1, #0]
 801714c:	601a      	str	r2, [r3, #0]
 801714e:	6883      	ldr	r3, [r0, #8]
 8017150:	600b      	str	r3, [r1, #0]
 8017152:	6081      	str	r1, [r0, #8]
 8017154:	4770      	bx	lr
 8017156:	680b      	ldr	r3, [r1, #0]
 8017158:	60c3      	str	r3, [r0, #12]
 801715a:	e7f8      	b.n	801714e <rclc_action_remove_used_goal_handle+0x1e>

0801715c <rclc_action_find_goal_handle_by_uuid>:
 801715c:	b538      	push	{r3, r4, r5, lr}
 801715e:	b181      	cbz	r1, 8017182 <rclc_action_find_goal_handle_by_uuid+0x26>
 8017160:	b178      	cbz	r0, 8017182 <rclc_action_find_goal_handle_by_uuid+0x26>
 8017162:	68c4      	ldr	r4, [r0, #12]
 8017164:	460d      	mov	r5, r1
 8017166:	b914      	cbnz	r4, 801716e <rclc_action_find_goal_handle_by_uuid+0x12>
 8017168:	e009      	b.n	801717e <rclc_action_find_goal_handle_by_uuid+0x22>
 801716a:	6824      	ldr	r4, [r4, #0]
 801716c:	b13c      	cbz	r4, 801717e <rclc_action_find_goal_handle_by_uuid+0x22>
 801716e:	f104 0009 	add.w	r0, r4, #9
 8017172:	2210      	movs	r2, #16
 8017174:	4629      	mov	r1, r5
 8017176:	f008 fc33 	bl	801f9e0 <memcmp>
 801717a:	2800      	cmp	r0, #0
 801717c:	d1f5      	bne.n	801716a <rclc_action_find_goal_handle_by_uuid+0xe>
 801717e:	4620      	mov	r0, r4
 8017180:	bd38      	pop	{r3, r4, r5, pc}
 8017182:	2400      	movs	r4, #0
 8017184:	4620      	mov	r0, r4
 8017186:	bd38      	pop	{r3, r4, r5, pc}

08017188 <rclc_action_find_first_handle_by_status>:
 8017188:	b140      	cbz	r0, 801719c <rclc_action_find_first_handle_by_status+0x14>
 801718a:	68c0      	ldr	r0, [r0, #12]
 801718c:	b910      	cbnz	r0, 8017194 <rclc_action_find_first_handle_by_status+0xc>
 801718e:	e005      	b.n	801719c <rclc_action_find_first_handle_by_status+0x14>
 8017190:	6800      	ldr	r0, [r0, #0]
 8017192:	b118      	cbz	r0, 801719c <rclc_action_find_first_handle_by_status+0x14>
 8017194:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017198:	428b      	cmp	r3, r1
 801719a:	d1f9      	bne.n	8017190 <rclc_action_find_first_handle_by_status+0x8>
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop

080171a0 <rclc_action_find_first_terminated_handle>:
 80171a0:	b140      	cbz	r0, 80171b4 <rclc_action_find_first_terminated_handle+0x14>
 80171a2:	68c0      	ldr	r0, [r0, #12]
 80171a4:	b910      	cbnz	r0, 80171ac <rclc_action_find_first_terminated_handle+0xc>
 80171a6:	e005      	b.n	80171b4 <rclc_action_find_first_terminated_handle+0x14>
 80171a8:	6800      	ldr	r0, [r0, #0]
 80171aa:	b118      	cbz	r0, 80171b4 <rclc_action_find_first_terminated_handle+0x14>
 80171ac:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80171b0:	2b03      	cmp	r3, #3
 80171b2:	ddf9      	ble.n	80171a8 <rclc_action_find_first_terminated_handle+0x8>
 80171b4:	4770      	bx	lr
 80171b6:	bf00      	nop

080171b8 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80171b8:	b170      	cbz	r0, 80171d8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80171ba:	68c0      	ldr	r0, [r0, #12]
 80171bc:	b160      	cbz	r0, 80171d8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80171be:	b410      	push	{r4}
 80171c0:	e001      	b.n	80171c6 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80171c2:	6800      	ldr	r0, [r0, #0]
 80171c4:	b128      	cbz	r0, 80171d2 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80171c6:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80171ca:	4299      	cmp	r1, r3
 80171cc:	bf08      	it	eq
 80171ce:	4294      	cmpeq	r4, r2
 80171d0:	d1f7      	bne.n	80171c2 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80171d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171d6:	4770      	bx	lr
 80171d8:	4770      	bx	lr
 80171da:	bf00      	nop

080171dc <rclc_action_find_handle_by_result_request_sequence_number>:
 80171dc:	b170      	cbz	r0, 80171fc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80171de:	68c0      	ldr	r0, [r0, #12]
 80171e0:	b160      	cbz	r0, 80171fc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80171e2:	b410      	push	{r4}
 80171e4:	e001      	b.n	80171ea <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80171e6:	6800      	ldr	r0, [r0, #0]
 80171e8:	b128      	cbz	r0, 80171f6 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80171ea:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80171ee:	4299      	cmp	r1, r3
 80171f0:	bf08      	it	eq
 80171f2:	4294      	cmpeq	r4, r2
 80171f4:	d1f7      	bne.n	80171e6 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80171f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171fa:	4770      	bx	lr
 80171fc:	4770      	bx	lr
 80171fe:	bf00      	nop

08017200 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017200:	b170      	cbz	r0, 8017220 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017202:	68c0      	ldr	r0, [r0, #12]
 8017204:	b160      	cbz	r0, 8017220 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017206:	b410      	push	{r4}
 8017208:	e001      	b.n	801720e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801720a:	6800      	ldr	r0, [r0, #0]
 801720c:	b128      	cbz	r0, 801721a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801720e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017212:	4299      	cmp	r1, r3
 8017214:	bf08      	it	eq
 8017216:	4294      	cmpeq	r4, r2
 8017218:	d1f7      	bne.n	801720a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801721a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801721e:	4770      	bx	lr
 8017220:	4770      	bx	lr
 8017222:	bf00      	nop

08017224 <rclc_action_find_first_handle_with_goal_response>:
 8017224:	b140      	cbz	r0, 8017238 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017226:	68c0      	ldr	r0, [r0, #12]
 8017228:	b910      	cbnz	r0, 8017230 <rclc_action_find_first_handle_with_goal_response+0xc>
 801722a:	e005      	b.n	8017238 <rclc_action_find_first_handle_with_goal_response+0x14>
 801722c:	6800      	ldr	r0, [r0, #0]
 801722e:	b118      	cbz	r0, 8017238 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017230:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d0f9      	beq.n	801722c <rclc_action_find_first_handle_with_goal_response+0x8>
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop

0801723c <rclc_action_find_first_handle_with_result_response>:
 801723c:	b140      	cbz	r0, 8017250 <rclc_action_find_first_handle_with_result_response+0x14>
 801723e:	68c0      	ldr	r0, [r0, #12]
 8017240:	b910      	cbnz	r0, 8017248 <rclc_action_find_first_handle_with_result_response+0xc>
 8017242:	e005      	b.n	8017250 <rclc_action_find_first_handle_with_result_response+0x14>
 8017244:	6800      	ldr	r0, [r0, #0]
 8017246:	b118      	cbz	r0, 8017250 <rclc_action_find_first_handle_with_result_response+0x14>
 8017248:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801724c:	2b00      	cmp	r3, #0
 801724e:	d0f9      	beq.n	8017244 <rclc_action_find_first_handle_with_result_response+0x8>
 8017250:	4770      	bx	lr
 8017252:	bf00      	nop

08017254 <rclc_action_server_response_goal_request>:
 8017254:	b198      	cbz	r0, 801727e <rclc_action_server_response_goal_request+0x2a>
 8017256:	2200      	movs	r2, #0
 8017258:	460b      	mov	r3, r1
 801725a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801725e:	b510      	push	{r4, lr}
 8017260:	6844      	ldr	r4, [r0, #4]
 8017262:	b086      	sub	sp, #24
 8017264:	f104 0010 	add.w	r0, r4, #16
 8017268:	9205      	str	r2, [sp, #20]
 801726a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801726e:	aa03      	add	r2, sp, #12
 8017270:	f88d 300c 	strb.w	r3, [sp, #12]
 8017274:	f7ff fd3e 	bl	8016cf4 <rcl_action_send_goal_response>
 8017278:	b918      	cbnz	r0, 8017282 <rclc_action_server_response_goal_request+0x2e>
 801727a:	b006      	add	sp, #24
 801727c:	bd10      	pop	{r4, pc}
 801727e:	200b      	movs	r0, #11
 8017280:	4770      	bx	lr
 8017282:	9001      	str	r0, [sp, #4]
 8017284:	f7fc fab8 	bl	80137f8 <rcutils_reset_error>
 8017288:	9801      	ldr	r0, [sp, #4]
 801728a:	b006      	add	sp, #24
 801728c:	bd10      	pop	{r4, pc}
 801728e:	bf00      	nop

08017290 <rclc_action_server_goal_cancel_accept>:
 8017290:	b310      	cbz	r0, 80172d8 <rclc_action_server_goal_cancel_accept+0x48>
 8017292:	b510      	push	{r4, lr}
 8017294:	b090      	sub	sp, #64	@ 0x40
 8017296:	4604      	mov	r4, r0
 8017298:	a806      	add	r0, sp, #24
 801729a:	f7ff ff01 	bl	80170a0 <rcl_action_get_zero_initialized_cancel_response>
 801729e:	2300      	movs	r3, #0
 80172a0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80172a4:	46ec      	mov	ip, sp
 80172a6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80172aa:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80172ae:	f88d 3018 	strb.w	r3, [sp, #24]
 80172b2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80172b6:	f8cd d01c 	str.w	sp, [sp, #28]
 80172ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172be:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80172e0 <rclc_action_server_goal_cancel_accept+0x50>
 80172c2:	6860      	ldr	r0, [r4, #4]
 80172c4:	aa06      	add	r2, sp, #24
 80172c6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80172ca:	3010      	adds	r0, #16
 80172cc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80172d0:	f7ff fdc8 	bl	8016e64 <rcl_action_send_cancel_response>
 80172d4:	b010      	add	sp, #64	@ 0x40
 80172d6:	bd10      	pop	{r4, pc}
 80172d8:	200b      	movs	r0, #11
 80172da:	4770      	bx	lr
 80172dc:	f3af 8000 	nop.w
 80172e0:	00000001 	.word	0x00000001
 80172e4:	00000001 	.word	0x00000001

080172e8 <rclc_action_server_goal_cancel_reject>:
 80172e8:	b082      	sub	sp, #8
 80172ea:	b530      	push	{r4, r5, lr}
 80172ec:	b08b      	sub	sp, #44	@ 0x2c
 80172ee:	ac0e      	add	r4, sp, #56	@ 0x38
 80172f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80172f4:	b188      	cbz	r0, 801731a <rclc_action_server_goal_cancel_reject+0x32>
 80172f6:	4604      	mov	r4, r0
 80172f8:	a801      	add	r0, sp, #4
 80172fa:	460d      	mov	r5, r1
 80172fc:	f7ff fed0 	bl	80170a0 <rcl_action_get_zero_initialized_cancel_response>
 8017300:	aa01      	add	r2, sp, #4
 8017302:	a90e      	add	r1, sp, #56	@ 0x38
 8017304:	f104 0010 	add.w	r0, r4, #16
 8017308:	f88d 5004 	strb.w	r5, [sp, #4]
 801730c:	f7ff fdaa 	bl	8016e64 <rcl_action_send_cancel_response>
 8017310:	b00b      	add	sp, #44	@ 0x2c
 8017312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017316:	b002      	add	sp, #8
 8017318:	4770      	bx	lr
 801731a:	200b      	movs	r0, #11
 801731c:	b00b      	add	sp, #44	@ 0x2c
 801731e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017322:	b002      	add	sp, #8
 8017324:	4770      	bx	lr
 8017326:	bf00      	nop

08017328 <__atomic_load_8>:
 8017328:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801732c:	4a16      	ldr	r2, [pc, #88]	@ (8017388 <__atomic_load_8+0x60>)
 801732e:	4b17      	ldr	r3, [pc, #92]	@ (801738c <__atomic_load_8+0x64>)
 8017330:	f04f 0c01 	mov.w	ip, #1
 8017334:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017338:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801733c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017340:	fb02 f101 	mul.w	r1, r2, r1
 8017344:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017348:	fba3 2301 	umull	r2, r3, r3, r1
 801734c:	091b      	lsrs	r3, r3, #4
 801734e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017352:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017356:	b4d0      	push	{r4, r6, r7}
 8017358:	1ac9      	subs	r1, r1, r3
 801735a:	4c0d      	ldr	r4, [pc, #52]	@ (8017390 <__atomic_load_8+0x68>)
 801735c:	1862      	adds	r2, r4, r1
 801735e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017362:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017366:	2e00      	cmp	r6, #0
 8017368:	d1f9      	bne.n	801735e <__atomic_load_8+0x36>
 801736a:	b2db      	uxtb	r3, r3
 801736c:	f3bf 8f5b 	dmb	ish
 8017370:	2b00      	cmp	r3, #0
 8017372:	d1f4      	bne.n	801735e <__atomic_load_8+0x36>
 8017374:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017378:	f3bf 8f5b 	dmb	ish
 801737c:	5463      	strb	r3, [r4, r1]
 801737e:	4630      	mov	r0, r6
 8017380:	4639      	mov	r1, r7
 8017382:	bcd0      	pop	{r4, r6, r7}
 8017384:	4770      	bx	lr
 8017386:	bf00      	nop
 8017388:	27d4eb2d 	.word	0x27d4eb2d
 801738c:	b21642c9 	.word	0xb21642c9
 8017390:	240648f8 	.word	0x240648f8

08017394 <__atomic_store_8>:
 8017394:	b570      	push	{r4, r5, r6, lr}
 8017396:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801739a:	4916      	ldr	r1, [pc, #88]	@ (80173f4 <__atomic_store_8+0x60>)
 801739c:	4c16      	ldr	r4, [pc, #88]	@ (80173f8 <__atomic_store_8+0x64>)
 801739e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80173a2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80173a6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80173aa:	fb01 fe0e 	mul.w	lr, r1, lr
 80173ae:	4913      	ldr	r1, [pc, #76]	@ (80173fc <__atomic_store_8+0x68>)
 80173b0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80173b4:	fba1 510e 	umull	r5, r1, r1, lr
 80173b8:	f04f 0501 	mov.w	r5, #1
 80173bc:	0909      	lsrs	r1, r1, #4
 80173be:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 80173c2:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 80173c6:	ebae 0e01 	sub.w	lr, lr, r1
 80173ca:	eb04 0c0e 	add.w	ip, r4, lr
 80173ce:	e8dc 1f4f 	ldrexb	r1, [ip]
 80173d2:	e8cc 5f46 	strexb	r6, r5, [ip]
 80173d6:	2e00      	cmp	r6, #0
 80173d8:	d1f9      	bne.n	80173ce <__atomic_store_8+0x3a>
 80173da:	b2c9      	uxtb	r1, r1
 80173dc:	f3bf 8f5b 	dmb	ish
 80173e0:	2900      	cmp	r1, #0
 80173e2:	d1f4      	bne.n	80173ce <__atomic_store_8+0x3a>
 80173e4:	e9c0 2300 	strd	r2, r3, [r0]
 80173e8:	f3bf 8f5b 	dmb	ish
 80173ec:	f804 100e 	strb.w	r1, [r4, lr]
 80173f0:	bd70      	pop	{r4, r5, r6, pc}
 80173f2:	bf00      	nop
 80173f4:	27d4eb2d 	.word	0x27d4eb2d
 80173f8:	240648f8 	.word	0x240648f8
 80173fc:	b21642c9 	.word	0xb21642c9

08017400 <__atomic_exchange_8>:
 8017400:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8017404:	4917      	ldr	r1, [pc, #92]	@ (8017464 <__atomic_exchange_8+0x64>)
 8017406:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801740a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801740e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8017412:	fb01 fc0c 	mul.w	ip, r1, ip
 8017416:	4914      	ldr	r1, [pc, #80]	@ (8017468 <__atomic_exchange_8+0x68>)
 8017418:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801741c:	b570      	push	{r4, r5, r6, lr}
 801741e:	4686      	mov	lr, r0
 8017420:	fba1 010c 	umull	r0, r1, r1, ip
 8017424:	4d11      	ldr	r5, [pc, #68]	@ (801746c <__atomic_exchange_8+0x6c>)
 8017426:	f04f 0001 	mov.w	r0, #1
 801742a:	0909      	lsrs	r1, r1, #4
 801742c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8017430:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8017434:	ebac 0c01 	sub.w	ip, ip, r1
 8017438:	eb05 010c 	add.w	r1, r5, ip
 801743c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017440:	e8c1 0f46 	strexb	r6, r0, [r1]
 8017444:	2e00      	cmp	r6, #0
 8017446:	d1f9      	bne.n	801743c <__atomic_exchange_8+0x3c>
 8017448:	b2e4      	uxtb	r4, r4
 801744a:	f3bf 8f5b 	dmb	ish
 801744e:	2c00      	cmp	r4, #0
 8017450:	d1f4      	bne.n	801743c <__atomic_exchange_8+0x3c>
 8017452:	e9de 0100 	ldrd	r0, r1, [lr]
 8017456:	e9ce 2300 	strd	r2, r3, [lr]
 801745a:	f3bf 8f5b 	dmb	ish
 801745e:	f805 400c 	strb.w	r4, [r5, ip]
 8017462:	bd70      	pop	{r4, r5, r6, pc}
 8017464:	27d4eb2d 	.word	0x27d4eb2d
 8017468:	b21642c9 	.word	0xb21642c9
 801746c:	240648f8 	.word	0x240648f8

08017470 <rcutils_get_env>:
 8017470:	b168      	cbz	r0, 801748e <rcutils_get_env+0x1e>
 8017472:	b510      	push	{r4, lr}
 8017474:	460c      	mov	r4, r1
 8017476:	b129      	cbz	r1, 8017484 <rcutils_get_env+0x14>
 8017478:	f007 fe32 	bl	801f0e0 <getenv>
 801747c:	b120      	cbz	r0, 8017488 <rcutils_get_env+0x18>
 801747e:	6020      	str	r0, [r4, #0]
 8017480:	2000      	movs	r0, #0
 8017482:	bd10      	pop	{r4, pc}
 8017484:	4803      	ldr	r0, [pc, #12]	@ (8017494 <rcutils_get_env+0x24>)
 8017486:	bd10      	pop	{r4, pc}
 8017488:	4b03      	ldr	r3, [pc, #12]	@ (8017498 <rcutils_get_env+0x28>)
 801748a:	6023      	str	r3, [r4, #0]
 801748c:	bd10      	pop	{r4, pc}
 801748e:	4803      	ldr	r0, [pc, #12]	@ (801749c <rcutils_get_env+0x2c>)
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	080228d0 	.word	0x080228d0
 8017498:	08022f90 	.word	0x08022f90
 801749c:	080228b4 	.word	0x080228b4

080174a0 <rcutils_is_directory>:
 80174a0:	2000      	movs	r0, #0
 80174a2:	4770      	bx	lr

080174a4 <rcutils_join_path>:
 80174a4:	b082      	sub	sp, #8
 80174a6:	2000      	movs	r0, #0
 80174a8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80174ac:	b002      	add	sp, #8
 80174ae:	4770      	bx	lr

080174b0 <rcutils_to_native_path>:
 80174b0:	b084      	sub	sp, #16
 80174b2:	2000      	movs	r0, #0
 80174b4:	f10d 0c04 	add.w	ip, sp, #4
 80174b8:	b004      	add	sp, #16
 80174ba:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80174be:	4770      	bx	lr

080174c0 <rcutils_format_string_limit>:
 80174c0:	b40f      	push	{r0, r1, r2, r3}
 80174c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174c4:	b083      	sub	sp, #12
 80174c6:	ac08      	add	r4, sp, #32
 80174c8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80174ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80174ce:	b326      	cbz	r6, 801751a <rcutils_format_string_limit+0x5a>
 80174d0:	a808      	add	r0, sp, #32
 80174d2:	f7fc f96d 	bl	80137b0 <rcutils_allocator_is_valid>
 80174d6:	b300      	cbz	r0, 801751a <rcutils_format_string_limit+0x5a>
 80174d8:	2100      	movs	r1, #0
 80174da:	ab0f      	add	r3, sp, #60	@ 0x3c
 80174dc:	4632      	mov	r2, r6
 80174de:	4608      	mov	r0, r1
 80174e0:	e9cd 3300 	strd	r3, r3, [sp]
 80174e4:	f000 f906 	bl	80176f4 <rcutils_vsnprintf>
 80174e8:	1c43      	adds	r3, r0, #1
 80174ea:	4605      	mov	r5, r0
 80174ec:	d015      	beq.n	801751a <rcutils_format_string_limit+0x5a>
 80174ee:	1c47      	adds	r7, r0, #1
 80174f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80174f2:	429f      	cmp	r7, r3
 80174f4:	d901      	bls.n	80174fa <rcutils_format_string_limit+0x3a>
 80174f6:	1e5d      	subs	r5, r3, #1
 80174f8:	461f      	mov	r7, r3
 80174fa:	9b08      	ldr	r3, [sp, #32]
 80174fc:	4638      	mov	r0, r7
 80174fe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017500:	4798      	blx	r3
 8017502:	4604      	mov	r4, r0
 8017504:	b148      	cbz	r0, 801751a <rcutils_format_string_limit+0x5a>
 8017506:	4632      	mov	r2, r6
 8017508:	4639      	mov	r1, r7
 801750a:	9b01      	ldr	r3, [sp, #4]
 801750c:	f000 f8f2 	bl	80176f4 <rcutils_vsnprintf>
 8017510:	2800      	cmp	r0, #0
 8017512:	db09      	blt.n	8017528 <rcutils_format_string_limit+0x68>
 8017514:	2300      	movs	r3, #0
 8017516:	5563      	strb	r3, [r4, r5]
 8017518:	e000      	b.n	801751c <rcutils_format_string_limit+0x5c>
 801751a:	2400      	movs	r4, #0
 801751c:	4620      	mov	r0, r4
 801751e:	b003      	add	sp, #12
 8017520:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017524:	b004      	add	sp, #16
 8017526:	4770      	bx	lr
 8017528:	4620      	mov	r0, r4
 801752a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801752c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801752e:	2400      	movs	r4, #0
 8017530:	4798      	blx	r3
 8017532:	e7f3      	b.n	801751c <rcutils_format_string_limit+0x5c>

08017534 <rcutils_repl_str>:
 8017534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017538:	ed2d 8b02 	vpush	{d8}
 801753c:	b087      	sub	sp, #28
 801753e:	2600      	movs	r6, #0
 8017540:	4680      	mov	r8, r0
 8017542:	468a      	mov	sl, r1
 8017544:	9000      	str	r0, [sp, #0]
 8017546:	4608      	mov	r0, r1
 8017548:	ee08 2a10 	vmov	s16, r2
 801754c:	4699      	mov	r9, r3
 801754e:	2510      	movs	r5, #16
 8017550:	f7e8 fed0 	bl	80002f4 <strlen>
 8017554:	4637      	mov	r7, r6
 8017556:	46b3      	mov	fp, r6
 8017558:	9001      	str	r0, [sp, #4]
 801755a:	e01e      	b.n	801759a <rcutils_repl_str+0x66>
 801755c:	f10b 0b01 	add.w	fp, fp, #1
 8017560:	9b01      	ldr	r3, [sp, #4]
 8017562:	455e      	cmp	r6, fp
 8017564:	eb04 0803 	add.w	r8, r4, r3
 8017568:	d211      	bcs.n	801758e <rcutils_repl_str+0x5a>
 801756a:	442e      	add	r6, r5
 801756c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017570:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017578:	00b1      	lsls	r1, r6, #2
 801757a:	4798      	blx	r3
 801757c:	2800      	cmp	r0, #0
 801757e:	f000 8088 	beq.w	8017692 <rcutils_repl_str+0x15e>
 8017582:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8017586:	4607      	mov	r7, r0
 8017588:	bf28      	it	cs
 801758a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801758e:	9a00      	ldr	r2, [sp, #0]
 8017590:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8017594:	1aa4      	subs	r4, r4, r2
 8017596:	f843 4c04 	str.w	r4, [r3, #-4]
 801759a:	4651      	mov	r1, sl
 801759c:	4640      	mov	r0, r8
 801759e:	f008 fa70 	bl	801fa82 <strstr>
 80175a2:	4604      	mov	r4, r0
 80175a4:	4638      	mov	r0, r7
 80175a6:	2c00      	cmp	r4, #0
 80175a8:	d1d8      	bne.n	801755c <rcutils_repl_str+0x28>
 80175aa:	4640      	mov	r0, r8
 80175ac:	f7e8 fea2 	bl	80002f4 <strlen>
 80175b0:	9b00      	ldr	r3, [sp, #0]
 80175b2:	eba8 0803 	sub.w	r8, r8, r3
 80175b6:	eb08 0400 	add.w	r4, r8, r0
 80175ba:	9402      	str	r4, [sp, #8]
 80175bc:	f1bb 0f00 	cmp.w	fp, #0
 80175c0:	d045      	beq.n	801764e <rcutils_repl_str+0x11a>
 80175c2:	ee18 0a10 	vmov	r0, s16
 80175c6:	f7e8 fe95 	bl	80002f4 <strlen>
 80175ca:	9a01      	ldr	r2, [sp, #4]
 80175cc:	4606      	mov	r6, r0
 80175ce:	f8d9 3000 	ldr.w	r3, [r9]
 80175d2:	1a82      	subs	r2, r0, r2
 80175d4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80175d8:	fb0b 4202 	mla	r2, fp, r2, r4
 80175dc:	1c50      	adds	r0, r2, #1
 80175de:	9205      	str	r2, [sp, #20]
 80175e0:	4798      	blx	r3
 80175e2:	4682      	mov	sl, r0
 80175e4:	2800      	cmp	r0, #0
 80175e6:	d054      	beq.n	8017692 <rcutils_repl_str+0x15e>
 80175e8:	683a      	ldr	r2, [r7, #0]
 80175ea:	463d      	mov	r5, r7
 80175ec:	9900      	ldr	r1, [sp, #0]
 80175ee:	2401      	movs	r4, #1
 80175f0:	f008 fb3f 	bl	801fc72 <memcpy>
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80175fa:	eb0a 0803 	add.w	r8, sl, r3
 80175fe:	ee18 7a10 	vmov	r7, s16
 8017602:	f8dd a000 	ldr.w	sl, [sp]
 8017606:	f8cd 9000 	str.w	r9, [sp]
 801760a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801760e:	4632      	mov	r2, r6
 8017610:	4639      	mov	r1, r7
 8017612:	4640      	mov	r0, r8
 8017614:	44b0      	add	r8, r6
 8017616:	f008 fb2c 	bl	801fc72 <memcpy>
 801761a:	f855 2b04 	ldr.w	r2, [r5], #4
 801761e:	45a3      	cmp	fp, r4
 8017620:	444a      	add	r2, r9
 8017622:	eb0a 0102 	add.w	r1, sl, r2
 8017626:	d02a      	beq.n	801767e <rcutils_repl_str+0x14a>
 8017628:	6828      	ldr	r0, [r5, #0]
 801762a:	1a82      	subs	r2, r0, r2
 801762c:	4640      	mov	r0, r8
 801762e:	4490      	add	r8, r2
 8017630:	f008 fb1f 	bl	801fc72 <memcpy>
 8017634:	1c62      	adds	r2, r4, #1
 8017636:	45a3      	cmp	fp, r4
 8017638:	4614      	mov	r4, r2
 801763a:	d8e8      	bhi.n	801760e <rcutils_repl_str+0xda>
 801763c:	f8dd 9000 	ldr.w	r9, [sp]
 8017640:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8017644:	2300      	movs	r3, #0
 8017646:	9a05      	ldr	r2, [sp, #20]
 8017648:	f80a 3002 	strb.w	r3, [sl, r2]
 801764c:	e00b      	b.n	8017666 <rcutils_repl_str+0x132>
 801764e:	4620      	mov	r0, r4
 8017650:	f8d9 3000 	ldr.w	r3, [r9]
 8017654:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017658:	3001      	adds	r0, #1
 801765a:	4798      	blx	r3
 801765c:	4682      	mov	sl, r0
 801765e:	b110      	cbz	r0, 8017666 <rcutils_repl_str+0x132>
 8017660:	9900      	ldr	r1, [sp, #0]
 8017662:	f008 fafe 	bl	801fc62 <strcpy>
 8017666:	4638      	mov	r0, r7
 8017668:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801766c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017670:	4798      	blx	r3
 8017672:	4650      	mov	r0, sl
 8017674:	b007      	add	sp, #28
 8017676:	ecbd 8b02 	vpop	{d8}
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	9b02      	ldr	r3, [sp, #8]
 8017680:	4640      	mov	r0, r8
 8017682:	f8dd 9000 	ldr.w	r9, [sp]
 8017686:	1a9a      	subs	r2, r3, r2
 8017688:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801768c:	f008 faf1 	bl	801fc72 <memcpy>
 8017690:	e7d8      	b.n	8017644 <rcutils_repl_str+0x110>
 8017692:	f04f 0a00 	mov.w	sl, #0
 8017696:	e7e6      	b.n	8017666 <rcutils_repl_str+0x132>

08017698 <rcutils_snprintf>:
 8017698:	b40c      	push	{r2, r3}
 801769a:	b530      	push	{r4, r5, lr}
 801769c:	b083      	sub	sp, #12
 801769e:	ab06      	add	r3, sp, #24
 80176a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80176a4:	9301      	str	r3, [sp, #4]
 80176a6:	b1e2      	cbz	r2, 80176e2 <rcutils_snprintf+0x4a>
 80176a8:	fab0 f480 	clz	r4, r0
 80176ac:	fab1 f581 	clz	r5, r1
 80176b0:	ea50 0c01 	orrs.w	ip, r0, r1
 80176b4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80176b8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80176bc:	d008      	beq.n	80176d0 <rcutils_snprintf+0x38>
 80176be:	b984      	cbnz	r4, 80176e2 <rcutils_snprintf+0x4a>
 80176c0:	b97d      	cbnz	r5, 80176e2 <rcutils_snprintf+0x4a>
 80176c2:	f008 f8eb 	bl	801f89c <vsniprintf>
 80176c6:	b003      	add	sp, #12
 80176c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80176cc:	b002      	add	sp, #8
 80176ce:	4770      	bx	lr
 80176d0:	4661      	mov	r1, ip
 80176d2:	4660      	mov	r0, ip
 80176d4:	f008 f8e2 	bl	801f89c <vsniprintf>
 80176d8:	b003      	add	sp, #12
 80176da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80176de:	b002      	add	sp, #8
 80176e0:	4770      	bx	lr
 80176e2:	f008 fa91 	bl	801fc08 <__errno>
 80176e6:	2216      	movs	r2, #22
 80176e8:	4603      	mov	r3, r0
 80176ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176ee:	601a      	str	r2, [r3, #0]
 80176f0:	e7e9      	b.n	80176c6 <rcutils_snprintf+0x2e>
 80176f2:	bf00      	nop

080176f4 <rcutils_vsnprintf>:
 80176f4:	b570      	push	{r4, r5, r6, lr}
 80176f6:	b1b2      	cbz	r2, 8017726 <rcutils_vsnprintf+0x32>
 80176f8:	fab0 f480 	clz	r4, r0
 80176fc:	fab1 f581 	clz	r5, r1
 8017700:	ea50 0c01 	orrs.w	ip, r0, r1
 8017704:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017708:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801770c:	d005      	beq.n	801771a <rcutils_vsnprintf+0x26>
 801770e:	b954      	cbnz	r4, 8017726 <rcutils_vsnprintf+0x32>
 8017710:	b94d      	cbnz	r5, 8017726 <rcutils_vsnprintf+0x32>
 8017712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017716:	f008 b8c1 	b.w	801f89c <vsniprintf>
 801771a:	4661      	mov	r1, ip
 801771c:	4660      	mov	r0, ip
 801771e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017722:	f008 b8bb 	b.w	801f89c <vsniprintf>
 8017726:	f008 fa6f 	bl	801fc08 <__errno>
 801772a:	2316      	movs	r3, #22
 801772c:	6003      	str	r3, [r0, #0]
 801772e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017732:	bd70      	pop	{r4, r5, r6, pc}

08017734 <rcutils_strdup>:
 8017734:	b084      	sub	sp, #16
 8017736:	b570      	push	{r4, r5, r6, lr}
 8017738:	b082      	sub	sp, #8
 801773a:	4605      	mov	r5, r0
 801773c:	ac07      	add	r4, sp, #28
 801773e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017742:	b1b0      	cbz	r0, 8017772 <rcutils_strdup+0x3e>
 8017744:	f7e8 fdd6 	bl	80002f4 <strlen>
 8017748:	1c42      	adds	r2, r0, #1
 801774a:	9b07      	ldr	r3, [sp, #28]
 801774c:	4606      	mov	r6, r0
 801774e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017750:	4610      	mov	r0, r2
 8017752:	9201      	str	r2, [sp, #4]
 8017754:	4798      	blx	r3
 8017756:	4604      	mov	r4, r0
 8017758:	b128      	cbz	r0, 8017766 <rcutils_strdup+0x32>
 801775a:	9a01      	ldr	r2, [sp, #4]
 801775c:	4629      	mov	r1, r5
 801775e:	f008 fa88 	bl	801fc72 <memcpy>
 8017762:	2300      	movs	r3, #0
 8017764:	55a3      	strb	r3, [r4, r6]
 8017766:	4620      	mov	r0, r4
 8017768:	b002      	add	sp, #8
 801776a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801776e:	b004      	add	sp, #16
 8017770:	4770      	bx	lr
 8017772:	4604      	mov	r4, r0
 8017774:	e7f7      	b.n	8017766 <rcutils_strdup+0x32>
 8017776:	bf00      	nop

08017778 <rcutils_strndup>:
 8017778:	b082      	sub	sp, #8
 801777a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801777c:	ac06      	add	r4, sp, #24
 801777e:	4605      	mov	r5, r0
 8017780:	e884 000c 	stmia.w	r4, {r2, r3}
 8017784:	b188      	cbz	r0, 80177aa <rcutils_strndup+0x32>
 8017786:	1c4f      	adds	r7, r1, #1
 8017788:	460e      	mov	r6, r1
 801778a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801778c:	4638      	mov	r0, r7
 801778e:	4790      	blx	r2
 8017790:	4604      	mov	r4, r0
 8017792:	b128      	cbz	r0, 80177a0 <rcutils_strndup+0x28>
 8017794:	463a      	mov	r2, r7
 8017796:	4629      	mov	r1, r5
 8017798:	f008 fa6b 	bl	801fc72 <memcpy>
 801779c:	2300      	movs	r3, #0
 801779e:	55a3      	strb	r3, [r4, r6]
 80177a0:	4620      	mov	r0, r4
 80177a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80177a6:	b002      	add	sp, #8
 80177a8:	4770      	bx	lr
 80177aa:	4604      	mov	r4, r0
 80177ac:	e7f8      	b.n	80177a0 <rcutils_strndup+0x28>
 80177ae:	bf00      	nop

080177b0 <rcutils_get_zero_initialized_string_map>:
 80177b0:	2000      	movs	r0, #0
 80177b2:	4b01      	ldr	r3, [pc, #4]	@ (80177b8 <rcutils_get_zero_initialized_string_map+0x8>)
 80177b4:	6018      	str	r0, [r3, #0]
 80177b6:	4770      	bx	lr
 80177b8:	24064910 	.word	0x24064910

080177bc <rcutils_string_map_reserve>:
 80177bc:	2800      	cmp	r0, #0
 80177be:	d05e      	beq.n	801787e <rcutils_string_map_reserve+0xc2>
 80177c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c4:	460c      	mov	r4, r1
 80177c6:	6801      	ldr	r1, [r0, #0]
 80177c8:	b082      	sub	sp, #8
 80177ca:	4605      	mov	r5, r0
 80177cc:	b129      	cbz	r1, 80177da <rcutils_string_map_reserve+0x1e>
 80177ce:	68cb      	ldr	r3, [r1, #12]
 80177d0:	42a3      	cmp	r3, r4
 80177d2:	d906      	bls.n	80177e2 <rcutils_string_map_reserve+0x26>
 80177d4:	461c      	mov	r4, r3
 80177d6:	2900      	cmp	r1, #0
 80177d8:	d1f9      	bne.n	80177ce <rcutils_string_map_reserve+0x12>
 80177da:	201f      	movs	r0, #31
 80177dc:	b002      	add	sp, #8
 80177de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177e2:	688b      	ldr	r3, [r1, #8]
 80177e4:	42a3      	cmp	r3, r4
 80177e6:	d046      	beq.n	8017876 <rcutils_string_map_reserve+0xba>
 80177e8:	6a0e      	ldr	r6, [r1, #32]
 80177ea:	2c00      	cmp	r4, #0
 80177ec:	d033      	beq.n	8017856 <rcutils_string_map_reserve+0x9a>
 80177ee:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80177f2:	d242      	bcs.n	801787a <rcutils_string_map_reserve+0xbe>
 80177f4:	00a7      	lsls	r7, r4, #2
 80177f6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80177fa:	6808      	ldr	r0, [r1, #0]
 80177fc:	4632      	mov	r2, r6
 80177fe:	4639      	mov	r1, r7
 8017800:	47c0      	blx	r8
 8017802:	2800      	cmp	r0, #0
 8017804:	d039      	beq.n	801787a <rcutils_string_map_reserve+0xbe>
 8017806:	682b      	ldr	r3, [r5, #0]
 8017808:	4632      	mov	r2, r6
 801780a:	4639      	mov	r1, r7
 801780c:	6018      	str	r0, [r3, #0]
 801780e:	6858      	ldr	r0, [r3, #4]
 8017810:	47c0      	blx	r8
 8017812:	2800      	cmp	r0, #0
 8017814:	d031      	beq.n	801787a <rcutils_string_map_reserve+0xbe>
 8017816:	682d      	ldr	r5, [r5, #0]
 8017818:	68ab      	ldr	r3, [r5, #8]
 801781a:	6068      	str	r0, [r5, #4]
 801781c:	42a3      	cmp	r3, r4
 801781e:	d225      	bcs.n	801786c <rcutils_string_map_reserve+0xb0>
 8017820:	682a      	ldr	r2, [r5, #0]
 8017822:	eb00 0c07 	add.w	ip, r0, r7
 8017826:	0099      	lsls	r1, r3, #2
 8017828:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801782c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8017830:	45e6      	cmp	lr, ip
 8017832:	d203      	bcs.n	801783c <rcutils_string_map_reserve+0x80>
 8017834:	eb02 0c07 	add.w	ip, r2, r7
 8017838:	4566      	cmp	r6, ip
 801783a:	d322      	bcc.n	8017882 <rcutils_string_map_reserve+0xc6>
 801783c:	1ae3      	subs	r3, r4, r3
 801783e:	4670      	mov	r0, lr
 8017840:	2100      	movs	r1, #0
 8017842:	009a      	lsls	r2, r3, #2
 8017844:	9201      	str	r2, [sp, #4]
 8017846:	f008 f8f5 	bl	801fa34 <memset>
 801784a:	9a01      	ldr	r2, [sp, #4]
 801784c:	2100      	movs	r1, #0
 801784e:	4630      	mov	r0, r6
 8017850:	f008 f8f0 	bl	801fa34 <memset>
 8017854:	e00a      	b.n	801786c <rcutils_string_map_reserve+0xb0>
 8017856:	694f      	ldr	r7, [r1, #20]
 8017858:	6808      	ldr	r0, [r1, #0]
 801785a:	4631      	mov	r1, r6
 801785c:	47b8      	blx	r7
 801785e:	682b      	ldr	r3, [r5, #0]
 8017860:	4631      	mov	r1, r6
 8017862:	6858      	ldr	r0, [r3, #4]
 8017864:	601c      	str	r4, [r3, #0]
 8017866:	47b8      	blx	r7
 8017868:	682d      	ldr	r5, [r5, #0]
 801786a:	606c      	str	r4, [r5, #4]
 801786c:	2000      	movs	r0, #0
 801786e:	60ac      	str	r4, [r5, #8]
 8017870:	b002      	add	sp, #8
 8017872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017876:	2000      	movs	r0, #0
 8017878:	e7b0      	b.n	80177dc <rcutils_string_map_reserve+0x20>
 801787a:	200a      	movs	r0, #10
 801787c:	e7ae      	b.n	80177dc <rcutils_string_map_reserve+0x20>
 801787e:	200b      	movs	r0, #11
 8017880:	4770      	bx	lr
 8017882:	1f0b      	subs	r3, r1, #4
 8017884:	4418      	add	r0, r3
 8017886:	4413      	add	r3, r2
 8017888:	3a04      	subs	r2, #4
 801788a:	4417      	add	r7, r2
 801788c:	2200      	movs	r2, #0
 801788e:	f843 2f04 	str.w	r2, [r3, #4]!
 8017892:	42bb      	cmp	r3, r7
 8017894:	f840 2f04 	str.w	r2, [r0, #4]!
 8017898:	d1f9      	bne.n	801788e <rcutils_string_map_reserve+0xd2>
 801789a:	e7e7      	b.n	801786c <rcutils_string_map_reserve+0xb0>

0801789c <rcutils_string_map_init>:
 801789c:	b082      	sub	sp, #8
 801789e:	b570      	push	{r4, r5, r6, lr}
 80178a0:	ac04      	add	r4, sp, #16
 80178a2:	e884 000c 	stmia.w	r4, {r2, r3}
 80178a6:	b380      	cbz	r0, 801790a <rcutils_string_map_init+0x6e>
 80178a8:	6806      	ldr	r6, [r0, #0]
 80178aa:	4604      	mov	r4, r0
 80178ac:	b12e      	cbz	r6, 80178ba <rcutils_string_map_init+0x1e>
 80178ae:	251e      	movs	r5, #30
 80178b0:	4628      	mov	r0, r5
 80178b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178b6:	b002      	add	sp, #8
 80178b8:	4770      	bx	lr
 80178ba:	a804      	add	r0, sp, #16
 80178bc:	460d      	mov	r5, r1
 80178be:	f7fb ff77 	bl	80137b0 <rcutils_allocator_is_valid>
 80178c2:	b310      	cbz	r0, 801790a <rcutils_string_map_init+0x6e>
 80178c4:	9b04      	ldr	r3, [sp, #16]
 80178c6:	2024      	movs	r0, #36	@ 0x24
 80178c8:	9908      	ldr	r1, [sp, #32]
 80178ca:	4798      	blx	r3
 80178cc:	6020      	str	r0, [r4, #0]
 80178ce:	b310      	cbz	r0, 8017916 <rcutils_string_map_init+0x7a>
 80178d0:	f10d 0e10 	add.w	lr, sp, #16
 80178d4:	f100 0c10 	add.w	ip, r0, #16
 80178d8:	e9c0 6600 	strd	r6, r6, [r0]
 80178dc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80178e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80178e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178e8:	f8de 3000 	ldr.w	r3, [lr]
 80178ec:	4629      	mov	r1, r5
 80178ee:	4620      	mov	r0, r4
 80178f0:	f8cc 3000 	str.w	r3, [ip]
 80178f4:	f7ff ff62 	bl	80177bc <rcutils_string_map_reserve>
 80178f8:	4605      	mov	r5, r0
 80178fa:	2800      	cmp	r0, #0
 80178fc:	d0d8      	beq.n	80178b0 <rcutils_string_map_init+0x14>
 80178fe:	9b05      	ldr	r3, [sp, #20]
 8017900:	9908      	ldr	r1, [sp, #32]
 8017902:	6820      	ldr	r0, [r4, #0]
 8017904:	4798      	blx	r3
 8017906:	6026      	str	r6, [r4, #0]
 8017908:	e7d2      	b.n	80178b0 <rcutils_string_map_init+0x14>
 801790a:	250b      	movs	r5, #11
 801790c:	4628      	mov	r0, r5
 801790e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017912:	b002      	add	sp, #8
 8017914:	4770      	bx	lr
 8017916:	250a      	movs	r5, #10
 8017918:	e7ca      	b.n	80178b0 <rcutils_string_map_init+0x14>
 801791a:	bf00      	nop

0801791c <rcutils_string_map_fini>:
 801791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017920:	b082      	sub	sp, #8
 8017922:	2800      	cmp	r0, #0
 8017924:	d03a      	beq.n	801799c <rcutils_string_map_fini+0x80>
 8017926:	6804      	ldr	r4, [r0, #0]
 8017928:	4606      	mov	r6, r0
 801792a:	2c00      	cmp	r4, #0
 801792c:	d032      	beq.n	8017994 <rcutils_string_map_fini+0x78>
 801792e:	68a3      	ldr	r3, [r4, #8]
 8017930:	b32b      	cbz	r3, 801797e <rcutils_string_map_fini+0x62>
 8017932:	2500      	movs	r5, #0
 8017934:	6822      	ldr	r2, [r4, #0]
 8017936:	462f      	mov	r7, r5
 8017938:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801793c:	b1e0      	cbz	r0, 8017978 <rcutils_string_map_fini+0x5c>
 801793e:	6a21      	ldr	r1, [r4, #32]
 8017940:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017944:	9101      	str	r1, [sp, #4]
 8017946:	47c0      	blx	r8
 8017948:	9901      	ldr	r1, [sp, #4]
 801794a:	e9d4 3200 	ldrd	r3, r2, [r4]
 801794e:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8017952:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017956:	47c0      	blx	r8
 8017958:	68e3      	ldr	r3, [r4, #12]
 801795a:	6862      	ldr	r2, [r4, #4]
 801795c:	3b01      	subs	r3, #1
 801795e:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017962:	3501      	adds	r5, #1
 8017964:	60e3      	str	r3, [r4, #12]
 8017966:	6834      	ldr	r4, [r6, #0]
 8017968:	68a3      	ldr	r3, [r4, #8]
 801796a:	429d      	cmp	r5, r3
 801796c:	d207      	bcs.n	801797e <rcutils_string_map_fini+0x62>
 801796e:	6822      	ldr	r2, [r4, #0]
 8017970:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017974:	2800      	cmp	r0, #0
 8017976:	d1e2      	bne.n	801793e <rcutils_string_map_fini+0x22>
 8017978:	3501      	adds	r5, #1
 801797a:	429d      	cmp	r5, r3
 801797c:	d3dc      	bcc.n	8017938 <rcutils_string_map_fini+0x1c>
 801797e:	2100      	movs	r1, #0
 8017980:	4630      	mov	r0, r6
 8017982:	f7ff ff1b 	bl	80177bc <rcutils_string_map_reserve>
 8017986:	4604      	mov	r4, r0
 8017988:	b920      	cbnz	r0, 8017994 <rcutils_string_map_fini+0x78>
 801798a:	6830      	ldr	r0, [r6, #0]
 801798c:	6943      	ldr	r3, [r0, #20]
 801798e:	6a01      	ldr	r1, [r0, #32]
 8017990:	4798      	blx	r3
 8017992:	6034      	str	r4, [r6, #0]
 8017994:	4620      	mov	r0, r4
 8017996:	b002      	add	sp, #8
 8017998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801799c:	240b      	movs	r4, #11
 801799e:	4620      	mov	r0, r4
 80179a0:	b002      	add	sp, #8
 80179a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a6:	bf00      	nop

080179a8 <rcutils_string_map_getn>:
 80179a8:	b378      	cbz	r0, 8017a0a <rcutils_string_map_getn+0x62>
 80179aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ae:	f8d0 b000 	ldr.w	fp, [r0]
 80179b2:	f1bb 0f00 	cmp.w	fp, #0
 80179b6:	d01f      	beq.n	80179f8 <rcutils_string_map_getn+0x50>
 80179b8:	fab1 f481 	clz	r4, r1
 80179bc:	4688      	mov	r8, r1
 80179be:	0964      	lsrs	r4, r4, #5
 80179c0:	b1d1      	cbz	r1, 80179f8 <rcutils_string_map_getn+0x50>
 80179c2:	f8db 7008 	ldr.w	r7, [fp, #8]
 80179c6:	f8db 6000 	ldr.w	r6, [fp]
 80179ca:	b1af      	cbz	r7, 80179f8 <rcutils_string_map_getn+0x50>
 80179cc:	4691      	mov	r9, r2
 80179ce:	3e04      	subs	r6, #4
 80179d0:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80179d4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80179d8:	3401      	adds	r4, #1
 80179da:	4628      	mov	r0, r5
 80179dc:	b155      	cbz	r5, 80179f4 <rcutils_string_map_getn+0x4c>
 80179de:	f7e8 fc89 	bl	80002f4 <strlen>
 80179e2:	4602      	mov	r2, r0
 80179e4:	4629      	mov	r1, r5
 80179e6:	4640      	mov	r0, r8
 80179e8:	454a      	cmp	r2, r9
 80179ea:	bf38      	it	cc
 80179ec:	464a      	movcc	r2, r9
 80179ee:	f008 f836 	bl	801fa5e <strncmp>
 80179f2:	b120      	cbz	r0, 80179fe <rcutils_string_map_getn+0x56>
 80179f4:	42a7      	cmp	r7, r4
 80179f6:	d1eb      	bne.n	80179d0 <rcutils_string_map_getn+0x28>
 80179f8:	2000      	movs	r0, #0
 80179fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179fe:	f8db 3004 	ldr.w	r3, [fp, #4]
 8017a02:	f853 000a 	ldr.w	r0, [r3, sl]
 8017a06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a0a:	4770      	bx	lr
 8017a0c:	0000      	movs	r0, r0
	...

08017a10 <rmw_get_zero_initialized_context>:
 8017a10:	b510      	push	{r4, lr}
 8017a12:	4604      	mov	r4, r0
 8017a14:	3010      	adds	r0, #16
 8017a16:	f000 f80f 	bl	8017a38 <rmw_get_zero_initialized_init_options>
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	60a3      	str	r3, [r4, #8]
 8017a20:	64a3      	str	r3, [r4, #72]	@ 0x48
 8017a22:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8017a24:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8017a30 <rmw_get_zero_initialized_context+0x20>
 8017a28:	ed84 7b00 	vstr	d7, [r4]
 8017a2c:	bd10      	pop	{r4, pc}
 8017a2e:	bf00      	nop
	...

08017a38 <rmw_get_zero_initialized_init_options>:
 8017a38:	b510      	push	{r4, lr}
 8017a3a:	4604      	mov	r4, r0
 8017a3c:	2238      	movs	r2, #56	@ 0x38
 8017a3e:	2100      	movs	r1, #0
 8017a40:	f007 fff8 	bl	801fa34 <memset>
 8017a44:	f104 0010 	add.w	r0, r4, #16
 8017a48:	f000 f80a 	bl	8017a60 <rmw_get_default_security_options>
 8017a4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a50:	4620      	mov	r0, r4
 8017a52:	60e3      	str	r3, [r4, #12]
 8017a54:	bd10      	pop	{r4, pc}
 8017a56:	bf00      	nop

08017a58 <rmw_get_default_publisher_options>:
 8017a58:	2200      	movs	r2, #0
 8017a5a:	6002      	str	r2, [r0, #0]
 8017a5c:	7102      	strb	r2, [r0, #4]
 8017a5e:	4770      	bx	lr

08017a60 <rmw_get_default_security_options>:
 8017a60:	2200      	movs	r2, #0
 8017a62:	7002      	strb	r2, [r0, #0]
 8017a64:	6042      	str	r2, [r0, #4]
 8017a66:	4770      	bx	lr

08017a68 <rmw_subscription_content_filter_options_fini>:
 8017a68:	b1b0      	cbz	r0, 8017a98 <rmw_subscription_content_filter_options_fini+0x30>
 8017a6a:	b538      	push	{r3, r4, r5, lr}
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	4608      	mov	r0, r1
 8017a70:	460d      	mov	r5, r1
 8017a72:	f7fb fe9d 	bl	80137b0 <rcutils_allocator_is_valid>
 8017a76:	b168      	cbz	r0, 8017a94 <rmw_subscription_content_filter_options_fini+0x2c>
 8017a78:	6820      	ldr	r0, [r4, #0]
 8017a7a:	b120      	cbz	r0, 8017a86 <rmw_subscription_content_filter_options_fini+0x1e>
 8017a7c:	686b      	ldr	r3, [r5, #4]
 8017a7e:	6929      	ldr	r1, [r5, #16]
 8017a80:	4798      	blx	r3
 8017a82:	2300      	movs	r3, #0
 8017a84:	6023      	str	r3, [r4, #0]
 8017a86:	1d20      	adds	r0, r4, #4
 8017a88:	f006 fac8 	bl	801e01c <rcutils_string_array_fini>
 8017a8c:	3800      	subs	r0, #0
 8017a8e:	bf18      	it	ne
 8017a90:	2001      	movne	r0, #1
 8017a92:	bd38      	pop	{r3, r4, r5, pc}
 8017a94:	200b      	movs	r0, #11
 8017a96:	bd38      	pop	{r3, r4, r5, pc}
 8017a98:	200b      	movs	r0, #11
 8017a9a:	4770      	bx	lr

08017a9c <rmw_get_default_subscription_options>:
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	e9c0 2200 	strd	r2, r2, [r0]
 8017aa2:	6082      	str	r2, [r0, #8]
 8017aa4:	4770      	bx	lr
 8017aa6:	bf00      	nop

08017aa8 <rmw_get_zero_initialized_message_info>:
 8017aa8:	b510      	push	{r4, lr}
 8017aaa:	4604      	mov	r4, r0
 8017aac:	2240      	movs	r2, #64	@ 0x40
 8017aae:	2100      	movs	r1, #0
 8017ab0:	f007 ffc0 	bl	801fa34 <memset>
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	bd10      	pop	{r4, pc}

08017ab8 <rmw_validate_full_topic_name>:
 8017ab8:	2800      	cmp	r0, #0
 8017aba:	d05d      	beq.n	8017b78 <rmw_validate_full_topic_name+0xc0>
 8017abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ac0:	460d      	mov	r5, r1
 8017ac2:	2900      	cmp	r1, #0
 8017ac4:	d05a      	beq.n	8017b7c <rmw_validate_full_topic_name+0xc4>
 8017ac6:	4604      	mov	r4, r0
 8017ac8:	4616      	mov	r6, r2
 8017aca:	f7e8 fc13 	bl	80002f4 <strlen>
 8017ace:	b150      	cbz	r0, 8017ae6 <rmw_validate_full_topic_name+0x2e>
 8017ad0:	7823      	ldrb	r3, [r4, #0]
 8017ad2:	2b2f      	cmp	r3, #47	@ 0x2f
 8017ad4:	d00e      	beq.n	8017af4 <rmw_validate_full_topic_name+0x3c>
 8017ad6:	2302      	movs	r3, #2
 8017ad8:	602b      	str	r3, [r5, #0]
 8017ada:	b146      	cbz	r6, 8017aee <rmw_validate_full_topic_name+0x36>
 8017adc:	2300      	movs	r3, #0
 8017ade:	4618      	mov	r0, r3
 8017ae0:	6033      	str	r3, [r6, #0]
 8017ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	602b      	str	r3, [r5, #0]
 8017aea:	2e00      	cmp	r6, #0
 8017aec:	d1f6      	bne.n	8017adc <rmw_validate_full_topic_name+0x24>
 8017aee:	2000      	movs	r0, #0
 8017af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af4:	1e43      	subs	r3, r0, #1
 8017af6:	5ce2      	ldrb	r2, [r4, r3]
 8017af8:	2a2f      	cmp	r2, #47	@ 0x2f
 8017afa:	d041      	beq.n	8017b80 <rmw_validate_full_topic_name+0xc8>
 8017afc:	1e62      	subs	r2, r4, #1
 8017afe:	f1c4 0e01 	rsb	lr, r4, #1
 8017b02:	eb02 0800 	add.w	r8, r2, r0
 8017b06:	eb0e 0702 	add.w	r7, lr, r2
 8017b0a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017b0e:	f023 0120 	bic.w	r1, r3, #32
 8017b12:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8017b16:	3941      	subs	r1, #65	@ 0x41
 8017b18:	2919      	cmp	r1, #25
 8017b1a:	d90f      	bls.n	8017b3c <rmw_validate_full_topic_name+0x84>
 8017b1c:	f1bc 0f0a 	cmp.w	ip, #10
 8017b20:	d90c      	bls.n	8017b3c <rmw_validate_full_topic_name+0x84>
 8017b22:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8017b26:	fab3 f383 	clz	r3, r3
 8017b2a:	095b      	lsrs	r3, r3, #5
 8017b2c:	b933      	cbnz	r3, 8017b3c <rmw_validate_full_topic_name+0x84>
 8017b2e:	2204      	movs	r2, #4
 8017b30:	602a      	str	r2, [r5, #0]
 8017b32:	2e00      	cmp	r6, #0
 8017b34:	d0db      	beq.n	8017aee <rmw_validate_full_topic_name+0x36>
 8017b36:	4618      	mov	r0, r3
 8017b38:	6037      	str	r7, [r6, #0]
 8017b3a:	e7d2      	b.n	8017ae2 <rmw_validate_full_topic_name+0x2a>
 8017b3c:	4542      	cmp	r2, r8
 8017b3e:	d1e2      	bne.n	8017b06 <rmw_validate_full_topic_name+0x4e>
 8017b40:	2301      	movs	r3, #1
 8017b42:	4f1a      	ldr	r7, [pc, #104]	@ (8017bac <rmw_validate_full_topic_name+0xf4>)
 8017b44:	e004      	b.n	8017b50 <rmw_validate_full_topic_name+0x98>
 8017b46:	4298      	cmp	r0, r3
 8017b48:	f104 0401 	add.w	r4, r4, #1
 8017b4c:	4613      	mov	r3, r2
 8017b4e:	d91c      	bls.n	8017b8a <rmw_validate_full_topic_name+0xd2>
 8017b50:	4298      	cmp	r0, r3
 8017b52:	f103 0201 	add.w	r2, r3, #1
 8017b56:	d0f6      	beq.n	8017b46 <rmw_validate_full_topic_name+0x8e>
 8017b58:	7821      	ldrb	r1, [r4, #0]
 8017b5a:	292f      	cmp	r1, #47	@ 0x2f
 8017b5c:	d1f3      	bne.n	8017b46 <rmw_validate_full_topic_name+0x8e>
 8017b5e:	7861      	ldrb	r1, [r4, #1]
 8017b60:	292f      	cmp	r1, #47	@ 0x2f
 8017b62:	d01e      	beq.n	8017ba2 <rmw_validate_full_topic_name+0xea>
 8017b64:	5dc9      	ldrb	r1, [r1, r7]
 8017b66:	0749      	lsls	r1, r1, #29
 8017b68:	d5ed      	bpl.n	8017b46 <rmw_validate_full_topic_name+0x8e>
 8017b6a:	2206      	movs	r2, #6
 8017b6c:	602a      	str	r2, [r5, #0]
 8017b6e:	2e00      	cmp	r6, #0
 8017b70:	d0bd      	beq.n	8017aee <rmw_validate_full_topic_name+0x36>
 8017b72:	2000      	movs	r0, #0
 8017b74:	6033      	str	r3, [r6, #0]
 8017b76:	e7b4      	b.n	8017ae2 <rmw_validate_full_topic_name+0x2a>
 8017b78:	200b      	movs	r0, #11
 8017b7a:	4770      	bx	lr
 8017b7c:	200b      	movs	r0, #11
 8017b7e:	e7b0      	b.n	8017ae2 <rmw_validate_full_topic_name+0x2a>
 8017b80:	2203      	movs	r2, #3
 8017b82:	602a      	str	r2, [r5, #0]
 8017b84:	2e00      	cmp	r6, #0
 8017b86:	d1f4      	bne.n	8017b72 <rmw_validate_full_topic_name+0xba>
 8017b88:	e7b1      	b.n	8017aee <rmw_validate_full_topic_name+0x36>
 8017b8a:	28f7      	cmp	r0, #247	@ 0xf7
 8017b8c:	d803      	bhi.n	8017b96 <rmw_validate_full_topic_name+0xde>
 8017b8e:	2300      	movs	r3, #0
 8017b90:	4618      	mov	r0, r3
 8017b92:	602b      	str	r3, [r5, #0]
 8017b94:	e7a5      	b.n	8017ae2 <rmw_validate_full_topic_name+0x2a>
 8017b96:	2307      	movs	r3, #7
 8017b98:	602b      	str	r3, [r5, #0]
 8017b9a:	2e00      	cmp	r6, #0
 8017b9c:	d0a7      	beq.n	8017aee <rmw_validate_full_topic_name+0x36>
 8017b9e:	23f6      	movs	r3, #246	@ 0xf6
 8017ba0:	e7e7      	b.n	8017b72 <rmw_validate_full_topic_name+0xba>
 8017ba2:	2205      	movs	r2, #5
 8017ba4:	602a      	str	r2, [r5, #0]
 8017ba6:	2e00      	cmp	r6, #0
 8017ba8:	d1e3      	bne.n	8017b72 <rmw_validate_full_topic_name+0xba>
 8017baa:	e7a0      	b.n	8017aee <rmw_validate_full_topic_name+0x36>
 8017bac:	080230a6 	.word	0x080230a6

08017bb0 <rmw_validate_namespace_with_size>:
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d043      	beq.n	8017c3c <rmw_validate_namespace_with_size+0x8c>
 8017bb4:	b570      	push	{r4, r5, r6, lr}
 8017bb6:	4614      	mov	r4, r2
 8017bb8:	b0c2      	sub	sp, #264	@ 0x108
 8017bba:	b32a      	cbz	r2, 8017c08 <rmw_validate_namespace_with_size+0x58>
 8017bbc:	2901      	cmp	r1, #1
 8017bbe:	460d      	mov	r5, r1
 8017bc0:	461e      	mov	r6, r3
 8017bc2:	d102      	bne.n	8017bca <rmw_validate_namespace_with_size+0x1a>
 8017bc4:	7803      	ldrb	r3, [r0, #0]
 8017bc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8017bc8:	d012      	beq.n	8017bf0 <rmw_validate_namespace_with_size+0x40>
 8017bca:	aa01      	add	r2, sp, #4
 8017bcc:	4669      	mov	r1, sp
 8017bce:	f7ff ff73 	bl	8017ab8 <rmw_validate_full_topic_name>
 8017bd2:	b980      	cbnz	r0, 8017bf6 <rmw_validate_namespace_with_size+0x46>
 8017bd4:	9a00      	ldr	r2, [sp, #0]
 8017bd6:	b14a      	cbz	r2, 8017bec <rmw_validate_namespace_with_size+0x3c>
 8017bd8:	2a07      	cmp	r2, #7
 8017bda:	d007      	beq.n	8017bec <rmw_validate_namespace_with_size+0x3c>
 8017bdc:	1e53      	subs	r3, r2, #1
 8017bde:	2b05      	cmp	r3, #5
 8017be0:	d82e      	bhi.n	8017c40 <rmw_validate_namespace_with_size+0x90>
 8017be2:	e8df f003 	tbb	[pc, r3]
 8017be6:	1f1c      	.short	0x1f1c
 8017be8:	14282522 	.word	0x14282522
 8017bec:	2df5      	cmp	r5, #245	@ 0xf5
 8017bee:	d804      	bhi.n	8017bfa <rmw_validate_namespace_with_size+0x4a>
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	6023      	str	r3, [r4, #0]
 8017bf6:	b042      	add	sp, #264	@ 0x108
 8017bf8:	bd70      	pop	{r4, r5, r6, pc}
 8017bfa:	2307      	movs	r3, #7
 8017bfc:	6023      	str	r3, [r4, #0]
 8017bfe:	2e00      	cmp	r6, #0
 8017c00:	d0f9      	beq.n	8017bf6 <rmw_validate_namespace_with_size+0x46>
 8017c02:	23f4      	movs	r3, #244	@ 0xf4
 8017c04:	6033      	str	r3, [r6, #0]
 8017c06:	e7f6      	b.n	8017bf6 <rmw_validate_namespace_with_size+0x46>
 8017c08:	200b      	movs	r0, #11
 8017c0a:	b042      	add	sp, #264	@ 0x108
 8017c0c:	bd70      	pop	{r4, r5, r6, pc}
 8017c0e:	2306      	movs	r3, #6
 8017c10:	6023      	str	r3, [r4, #0]
 8017c12:	2e00      	cmp	r6, #0
 8017c14:	d0ef      	beq.n	8017bf6 <rmw_validate_namespace_with_size+0x46>
 8017c16:	9b01      	ldr	r3, [sp, #4]
 8017c18:	6033      	str	r3, [r6, #0]
 8017c1a:	b042      	add	sp, #264	@ 0x108
 8017c1c:	bd70      	pop	{r4, r5, r6, pc}
 8017c1e:	2301      	movs	r3, #1
 8017c20:	6023      	str	r3, [r4, #0]
 8017c22:	e7f6      	b.n	8017c12 <rmw_validate_namespace_with_size+0x62>
 8017c24:	2302      	movs	r3, #2
 8017c26:	6023      	str	r3, [r4, #0]
 8017c28:	e7f3      	b.n	8017c12 <rmw_validate_namespace_with_size+0x62>
 8017c2a:	2303      	movs	r3, #3
 8017c2c:	6023      	str	r3, [r4, #0]
 8017c2e:	e7f0      	b.n	8017c12 <rmw_validate_namespace_with_size+0x62>
 8017c30:	2304      	movs	r3, #4
 8017c32:	6023      	str	r3, [r4, #0]
 8017c34:	e7ed      	b.n	8017c12 <rmw_validate_namespace_with_size+0x62>
 8017c36:	2305      	movs	r3, #5
 8017c38:	6023      	str	r3, [r4, #0]
 8017c3a:	e7ea      	b.n	8017c12 <rmw_validate_namespace_with_size+0x62>
 8017c3c:	200b      	movs	r0, #11
 8017c3e:	4770      	bx	lr
 8017c40:	4613      	mov	r3, r2
 8017c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017c46:	4a03      	ldr	r2, [pc, #12]	@ (8017c54 <rmw_validate_namespace_with_size+0xa4>)
 8017c48:	a802      	add	r0, sp, #8
 8017c4a:	f7ff fd25 	bl	8017698 <rcutils_snprintf>
 8017c4e:	2001      	movs	r0, #1
 8017c50:	e7d1      	b.n	8017bf6 <rmw_validate_namespace_with_size+0x46>
 8017c52:	bf00      	nop
 8017c54:	080228ec 	.word	0x080228ec

08017c58 <rmw_validate_namespace>:
 8017c58:	b168      	cbz	r0, 8017c76 <rmw_validate_namespace+0x1e>
 8017c5a:	b570      	push	{r4, r5, r6, lr}
 8017c5c:	460d      	mov	r5, r1
 8017c5e:	4616      	mov	r6, r2
 8017c60:	4604      	mov	r4, r0
 8017c62:	f7e8 fb47 	bl	80002f4 <strlen>
 8017c66:	4633      	mov	r3, r6
 8017c68:	4601      	mov	r1, r0
 8017c6a:	462a      	mov	r2, r5
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c72:	f7ff bf9d 	b.w	8017bb0 <rmw_validate_namespace_with_size>
 8017c76:	200b      	movs	r0, #11
 8017c78:	4770      	bx	lr
 8017c7a:	bf00      	nop

08017c7c <rmw_namespace_validation_result_string>:
 8017c7c:	2807      	cmp	r0, #7
 8017c7e:	d803      	bhi.n	8017c88 <rmw_namespace_validation_result_string+0xc>
 8017c80:	4b02      	ldr	r3, [pc, #8]	@ (8017c8c <rmw_namespace_validation_result_string+0x10>)
 8017c82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017c86:	4770      	bx	lr
 8017c88:	4801      	ldr	r0, [pc, #4]	@ (8017c90 <rmw_namespace_validation_result_string+0x14>)
 8017c8a:	4770      	bx	lr
 8017c8c:	08022ae4 	.word	0x08022ae4
 8017c90:	0802293c 	.word	0x0802293c

08017c94 <rmw_validate_node_name>:
 8017c94:	2800      	cmp	r0, #0
 8017c96:	d042      	beq.n	8017d1e <rmw_validate_node_name+0x8a>
 8017c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c9c:	460d      	mov	r5, r1
 8017c9e:	2900      	cmp	r1, #0
 8017ca0:	d03f      	beq.n	8017d22 <rmw_validate_node_name+0x8e>
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	4616      	mov	r6, r2
 8017ca6:	f7e8 fb25 	bl	80002f4 <strlen>
 8017caa:	b310      	cbz	r0, 8017cf2 <rmw_validate_node_name+0x5e>
 8017cac:	1e63      	subs	r3, r4, #1
 8017cae:	f1c4 0101 	rsb	r1, r4, #1
 8017cb2:	eb03 0800 	add.w	r8, r3, r0
 8017cb6:	18cf      	adds	r7, r1, r3
 8017cb8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017cbc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8017cc0:	f02e 0c20 	bic.w	ip, lr, #32
 8017cc4:	2a09      	cmp	r2, #9
 8017cc6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8017cca:	d905      	bls.n	8017cd8 <rmw_validate_node_name+0x44>
 8017ccc:	f1bc 0f19 	cmp.w	ip, #25
 8017cd0:	d902      	bls.n	8017cd8 <rmw_validate_node_name+0x44>
 8017cd2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017cd6:	d114      	bne.n	8017d02 <rmw_validate_node_name+0x6e>
 8017cd8:	4598      	cmp	r8, r3
 8017cda:	d1ec      	bne.n	8017cb6 <rmw_validate_node_name+0x22>
 8017cdc:	7822      	ldrb	r2, [r4, #0]
 8017cde:	4b16      	ldr	r3, [pc, #88]	@ (8017d38 <rmw_validate_node_name+0xa4>)
 8017ce0:	5cd3      	ldrb	r3, [r2, r3]
 8017ce2:	f013 0304 	ands.w	r3, r3, #4
 8017ce6:	d113      	bne.n	8017d10 <rmw_validate_node_name+0x7c>
 8017ce8:	28ff      	cmp	r0, #255	@ 0xff
 8017cea:	d81c      	bhi.n	8017d26 <rmw_validate_node_name+0x92>
 8017cec:	4618      	mov	r0, r3
 8017cee:	602b      	str	r3, [r5, #0]
 8017cf0:	e00c      	b.n	8017d0c <rmw_validate_node_name+0x78>
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	602b      	str	r3, [r5, #0]
 8017cf6:	b17e      	cbz	r6, 8017d18 <rmw_validate_node_name+0x84>
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	6033      	str	r3, [r6, #0]
 8017cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d02:	2302      	movs	r3, #2
 8017d04:	602b      	str	r3, [r5, #0]
 8017d06:	b13e      	cbz	r6, 8017d18 <rmw_validate_node_name+0x84>
 8017d08:	2000      	movs	r0, #0
 8017d0a:	6037      	str	r7, [r6, #0]
 8017d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d10:	2303      	movs	r3, #3
 8017d12:	602b      	str	r3, [r5, #0]
 8017d14:	2e00      	cmp	r6, #0
 8017d16:	d1ef      	bne.n	8017cf8 <rmw_validate_node_name+0x64>
 8017d18:	2000      	movs	r0, #0
 8017d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d1e:	200b      	movs	r0, #11
 8017d20:	4770      	bx	lr
 8017d22:	200b      	movs	r0, #11
 8017d24:	e7f2      	b.n	8017d0c <rmw_validate_node_name+0x78>
 8017d26:	2204      	movs	r2, #4
 8017d28:	602a      	str	r2, [r5, #0]
 8017d2a:	2e00      	cmp	r6, #0
 8017d2c:	d0f4      	beq.n	8017d18 <rmw_validate_node_name+0x84>
 8017d2e:	22fe      	movs	r2, #254	@ 0xfe
 8017d30:	4618      	mov	r0, r3
 8017d32:	6032      	str	r2, [r6, #0]
 8017d34:	e7ea      	b.n	8017d0c <rmw_validate_node_name+0x78>
 8017d36:	bf00      	nop
 8017d38:	080230a6 	.word	0x080230a6

08017d3c <rmw_node_name_validation_result_string>:
 8017d3c:	2804      	cmp	r0, #4
 8017d3e:	d803      	bhi.n	8017d48 <rmw_node_name_validation_result_string+0xc>
 8017d40:	4b02      	ldr	r3, [pc, #8]	@ (8017d4c <rmw_node_name_validation_result_string+0x10>)
 8017d42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017d46:	4770      	bx	lr
 8017d48:	4801      	ldr	r0, [pc, #4]	@ (8017d50 <rmw_node_name_validation_result_string+0x14>)
 8017d4a:	4770      	bx	lr
 8017d4c:	08022bf0 	.word	0x08022bf0
 8017d50:	08022b04 	.word	0x08022b04

08017d54 <rmw_destroy_client>:
 8017d54:	b570      	push	{r4, r5, r6, lr}
 8017d56:	b128      	cbz	r0, 8017d64 <rmw_destroy_client+0x10>
 8017d58:	4604      	mov	r4, r0
 8017d5a:	6800      	ldr	r0, [r0, #0]
 8017d5c:	460d      	mov	r5, r1
 8017d5e:	f001 feef 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8017d62:	b910      	cbnz	r0, 8017d6a <rmw_destroy_client+0x16>
 8017d64:	2401      	movs	r4, #1
 8017d66:	4620      	mov	r0, r4
 8017d68:	bd70      	pop	{r4, r5, r6, pc}
 8017d6a:	6863      	ldr	r3, [r4, #4]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d0f9      	beq.n	8017d64 <rmw_destroy_client+0x10>
 8017d70:	2d00      	cmp	r5, #0
 8017d72:	d0f7      	beq.n	8017d64 <rmw_destroy_client+0x10>
 8017d74:	6828      	ldr	r0, [r5, #0]
 8017d76:	f001 fee3 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8017d7a:	2800      	cmp	r0, #0
 8017d7c:	d0f2      	beq.n	8017d64 <rmw_destroy_client+0x10>
 8017d7e:	686e      	ldr	r6, [r5, #4]
 8017d80:	2e00      	cmp	r6, #0
 8017d82:	d0ef      	beq.n	8017d64 <rmw_destroy_client+0x10>
 8017d84:	6864      	ldr	r4, [r4, #4]
 8017d86:	6932      	ldr	r2, [r6, #16]
 8017d88:	6920      	ldr	r0, [r4, #16]
 8017d8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017d8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d92:	6819      	ldr	r1, [r3, #0]
 8017d94:	f002 fd70 	bl	801a878 <uxr_buffer_cancel_data>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	6920      	ldr	r0, [r4, #16]
 8017d9c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017da0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017da4:	f001 fdba 	bl	801991c <run_xrce_session>
 8017da8:	6920      	ldr	r0, [r4, #16]
 8017daa:	6932      	ldr	r2, [r6, #16]
 8017dac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017db0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017db4:	6819      	ldr	r1, [r3, #0]
 8017db6:	f002 f9fb 	bl	801a1b0 <uxr_buffer_delete_entity>
 8017dba:	4602      	mov	r2, r0
 8017dbc:	6920      	ldr	r0, [r4, #16]
 8017dbe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017dc2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017dc6:	f001 fda9 	bl	801991c <run_xrce_session>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	4628      	mov	r0, r5
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	bf14      	ite	ne
 8017dd2:	2400      	movne	r4, #0
 8017dd4:	2402      	moveq	r4, #2
 8017dd6:	f001 fc7f 	bl	80196d8 <rmw_uxrce_fini_client_memory>
 8017dda:	e7c4      	b.n	8017d66 <rmw_destroy_client+0x12>

08017ddc <rmw_get_implementation_identifier>:
 8017ddc:	4b01      	ldr	r3, [pc, #4]	@ (8017de4 <rmw_get_implementation_identifier+0x8>)
 8017dde:	6818      	ldr	r0, [r3, #0]
 8017de0:	4770      	bx	lr
 8017de2:	bf00      	nop
 8017de4:	08022f40 	.word	0x08022f40

08017de8 <rmw_init_options_init>:
 8017de8:	b084      	sub	sp, #16
 8017dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dec:	b083      	sub	sp, #12
 8017dee:	ad09      	add	r5, sp, #36	@ 0x24
 8017df0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017df4:	b130      	cbz	r0, 8017e04 <rmw_init_options_init+0x1c>
 8017df6:	4604      	mov	r4, r0
 8017df8:	4628      	mov	r0, r5
 8017dfa:	f7fb fcd9 	bl	80137b0 <rcutils_allocator_is_valid>
 8017dfe:	b108      	cbz	r0, 8017e04 <rmw_init_options_init+0x1c>
 8017e00:	68a6      	ldr	r6, [r4, #8]
 8017e02:	b12e      	cbz	r6, 8017e10 <rmw_init_options_init+0x28>
 8017e04:	200b      	movs	r0, #11
 8017e06:	b003      	add	sp, #12
 8017e08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e0c:	b004      	add	sp, #16
 8017e0e:	4770      	bx	lr
 8017e10:	2200      	movs	r2, #0
 8017e12:	2300      	movs	r3, #0
 8017e14:	f104 0c20 	add.w	ip, r4, #32
 8017e18:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8017eb4 <rmw_init_options_init+0xcc>
 8017e1c:	466f      	mov	r7, sp
 8017e1e:	e9c4 2300 	strd	r2, r3, [r4]
 8017e22:	4b20      	ldr	r3, [pc, #128]	@ (8017ea4 <rmw_init_options_init+0xbc>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	60a3      	str	r3, [r4, #8]
 8017e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e2e:	682b      	ldr	r3, [r5, #0]
 8017e30:	4638      	mov	r0, r7
 8017e32:	f8cc 3000 	str.w	r3, [ip]
 8017e36:	f8c4 e01c 	str.w	lr, [r4, #28]
 8017e3a:	60e6      	str	r6, [r4, #12]
 8017e3c:	f7ff fe10 	bl	8017a60 <rmw_get_default_security_options>
 8017e40:	f104 0310 	add.w	r3, r4, #16
 8017e44:	2203      	movs	r2, #3
 8017e46:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017e4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8017e4e:	4816      	ldr	r0, [pc, #88]	@ (8017ea8 <rmw_init_options_init+0xc0>)
 8017e50:	4916      	ldr	r1, [pc, #88]	@ (8017eac <rmw_init_options_init+0xc4>)
 8017e52:	7626      	strb	r6, [r4, #24]
 8017e54:	f001 fb80 	bl	8019558 <rmw_uxrce_init_init_options_impl_memory>
 8017e58:	4813      	ldr	r0, [pc, #76]	@ (8017ea8 <rmw_init_options_init+0xc0>)
 8017e5a:	f006 fa79 	bl	801e350 <get_memory>
 8017e5e:	b1f0      	cbz	r0, 8017e9e <rmw_init_options_init+0xb6>
 8017e60:	4a13      	ldr	r2, [pc, #76]	@ (8017eb0 <rmw_init_options_init+0xc8>)
 8017e62:	6883      	ldr	r3, [r0, #8]
 8017e64:	6851      	ldr	r1, [r2, #4]
 8017e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8017e68:	7810      	ldrb	r0, [r2, #0]
 8017e6a:	6159      	str	r1, [r3, #20]
 8017e6c:	68d1      	ldr	r1, [r2, #12]
 8017e6e:	7418      	strb	r0, [r3, #16]
 8017e70:	61d9      	str	r1, [r3, #28]
 8017e72:	6911      	ldr	r1, [r2, #16]
 8017e74:	6219      	str	r1, [r3, #32]
 8017e76:	6951      	ldr	r1, [r2, #20]
 8017e78:	6892      	ldr	r2, [r2, #8]
 8017e7a:	6259      	str	r1, [r3, #36]	@ 0x24
 8017e7c:	619a      	str	r2, [r3, #24]
 8017e7e:	f004 fca5 	bl	801c7cc <uxr_nanos>
 8017e82:	f007 fa33 	bl	801f2ec <srand>
 8017e86:	f007 fa5f 	bl	801f348 <rand>
 8017e8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017e8c:	6298      	str	r0, [r3, #40]	@ 0x28
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	d0f9      	beq.n	8017e86 <rmw_init_options_init+0x9e>
 8017e92:	2000      	movs	r0, #0
 8017e94:	b003      	add	sp, #12
 8017e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e9a:	b004      	add	sp, #16
 8017e9c:	4770      	bx	lr
 8017e9e:	2001      	movs	r0, #1
 8017ea0:	e7b1      	b.n	8017e06 <rmw_init_options_init+0x1e>
 8017ea2:	bf00      	nop
 8017ea4:	08022f40 	.word	0x08022f40
 8017ea8:	2406934c 	.word	0x2406934c
 8017eac:	24064be8 	.word	0x24064be8
 8017eb0:	2406478c 	.word	0x2406478c
 8017eb4:	080225c8 	.word	0x080225c8

08017eb8 <rmw_init_options_copy>:
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d047      	beq.n	8017f4c <rmw_init_options_copy+0x94>
 8017ebc:	b570      	push	{r4, r5, r6, lr}
 8017ebe:	460d      	mov	r5, r1
 8017ec0:	b149      	cbz	r1, 8017ed6 <rmw_init_options_copy+0x1e>
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	6880      	ldr	r0, [r0, #8]
 8017ec6:	b120      	cbz	r0, 8017ed2 <rmw_init_options_copy+0x1a>
 8017ec8:	4b22      	ldr	r3, [pc, #136]	@ (8017f54 <rmw_init_options_copy+0x9c>)
 8017eca:	6819      	ldr	r1, [r3, #0]
 8017ecc:	f7e8 fa08 	bl	80002e0 <strcmp>
 8017ed0:	bba8      	cbnz	r0, 8017f3e <rmw_init_options_copy+0x86>
 8017ed2:	68ab      	ldr	r3, [r5, #8]
 8017ed4:	b11b      	cbz	r3, 8017ede <rmw_init_options_copy+0x26>
 8017ed6:	f04f 0c0b 	mov.w	ip, #11
 8017eda:	4660      	mov	r0, ip
 8017edc:	bd70      	pop	{r4, r5, r6, pc}
 8017ede:	4623      	mov	r3, r4
 8017ee0:	462a      	mov	r2, r5
 8017ee2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8017ee6:	f8d3 e000 	ldr.w	lr, [r3]
 8017eea:	3310      	adds	r3, #16
 8017eec:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8017ef0:	3210      	adds	r2, #16
 8017ef2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8017ef6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017efa:	42b3      	cmp	r3, r6
 8017efc:	f842 ec10 	str.w	lr, [r2, #-16]
 8017f00:	f842 cc0c 	str.w	ip, [r2, #-12]
 8017f04:	f842 0c08 	str.w	r0, [r2, #-8]
 8017f08:	f842 1c04 	str.w	r1, [r2, #-4]
 8017f0c:	d1eb      	bne.n	8017ee6 <rmw_init_options_copy+0x2e>
 8017f0e:	6819      	ldr	r1, [r3, #0]
 8017f10:	685b      	ldr	r3, [r3, #4]
 8017f12:	4811      	ldr	r0, [pc, #68]	@ (8017f58 <rmw_init_options_copy+0xa0>)
 8017f14:	6011      	str	r1, [r2, #0]
 8017f16:	6053      	str	r3, [r2, #4]
 8017f18:	f006 fa1a 	bl	801e350 <get_memory>
 8017f1c:	b198      	cbz	r0, 8017f46 <rmw_init_options_copy+0x8e>
 8017f1e:	6883      	ldr	r3, [r0, #8]
 8017f20:	f04f 0c00 	mov.w	ip, #0
 8017f24:	636b      	str	r3, [r5, #52]	@ 0x34
 8017f26:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8017f28:	f103 0410 	add.w	r4, r3, #16
 8017f2c:	3510      	adds	r5, #16
 8017f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017f36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017f3a:	4660      	mov	r0, ip
 8017f3c:	bd70      	pop	{r4, r5, r6, pc}
 8017f3e:	f04f 0c0c 	mov.w	ip, #12
 8017f42:	4660      	mov	r0, ip
 8017f44:	bd70      	pop	{r4, r5, r6, pc}
 8017f46:	f04f 0c01 	mov.w	ip, #1
 8017f4a:	e7c6      	b.n	8017eda <rmw_init_options_copy+0x22>
 8017f4c:	f04f 0c0b 	mov.w	ip, #11
 8017f50:	4660      	mov	r0, ip
 8017f52:	4770      	bx	lr
 8017f54:	08022f40 	.word	0x08022f40
 8017f58:	2406934c 	.word	0x2406934c

08017f5c <rmw_init_options_fini>:
 8017f5c:	b510      	push	{r4, lr}
 8017f5e:	b08e      	sub	sp, #56	@ 0x38
 8017f60:	b388      	cbz	r0, 8017fc6 <rmw_init_options_fini+0x6a>
 8017f62:	4604      	mov	r4, r0
 8017f64:	3020      	adds	r0, #32
 8017f66:	f7fb fc23 	bl	80137b0 <rcutils_allocator_is_valid>
 8017f6a:	b360      	cbz	r0, 8017fc6 <rmw_init_options_fini+0x6a>
 8017f6c:	68a0      	ldr	r0, [r4, #8]
 8017f6e:	b120      	cbz	r0, 8017f7a <rmw_init_options_fini+0x1e>
 8017f70:	4b1a      	ldr	r3, [pc, #104]	@ (8017fdc <rmw_init_options_fini+0x80>)
 8017f72:	6819      	ldr	r1, [r3, #0]
 8017f74:	f7e8 f9b4 	bl	80002e0 <strcmp>
 8017f78:	bb68      	cbnz	r0, 8017fd6 <rmw_init_options_fini+0x7a>
 8017f7a:	4b19      	ldr	r3, [pc, #100]	@ (8017fe0 <rmw_init_options_fini+0x84>)
 8017f7c:	6819      	ldr	r1, [r3, #0]
 8017f7e:	b331      	cbz	r1, 8017fce <rmw_init_options_fini+0x72>
 8017f80:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8017f82:	e001      	b.n	8017f88 <rmw_init_options_fini+0x2c>
 8017f84:	6849      	ldr	r1, [r1, #4]
 8017f86:	b311      	cbz	r1, 8017fce <rmw_init_options_fini+0x72>
 8017f88:	688b      	ldr	r3, [r1, #8]
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	d1fa      	bne.n	8017f84 <rmw_init_options_fini+0x28>
 8017f8e:	4814      	ldr	r0, [pc, #80]	@ (8017fe0 <rmw_init_options_fini+0x84>)
 8017f90:	f006 f9ee 	bl	801e370 <put_memory>
 8017f94:	4668      	mov	r0, sp
 8017f96:	f7ff fd4f 	bl	8017a38 <rmw_get_zero_initialized_init_options>
 8017f9a:	46ee      	mov	lr, sp
 8017f9c:	46a4      	mov	ip, r4
 8017f9e:	2400      	movs	r4, #0
 8017fa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017fac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fb8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017fbc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017fc0:	4620      	mov	r0, r4
 8017fc2:	b00e      	add	sp, #56	@ 0x38
 8017fc4:	bd10      	pop	{r4, pc}
 8017fc6:	240b      	movs	r4, #11
 8017fc8:	4620      	mov	r0, r4
 8017fca:	b00e      	add	sp, #56	@ 0x38
 8017fcc:	bd10      	pop	{r4, pc}
 8017fce:	2401      	movs	r4, #1
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	b00e      	add	sp, #56	@ 0x38
 8017fd4:	bd10      	pop	{r4, pc}
 8017fd6:	240c      	movs	r4, #12
 8017fd8:	e7f2      	b.n	8017fc0 <rmw_init_options_fini+0x64>
 8017fda:	bf00      	nop
 8017fdc:	08022f40 	.word	0x08022f40
 8017fe0:	2406934c 	.word	0x2406934c

08017fe4 <rmw_init>:
 8017fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fe8:	b083      	sub	sp, #12
 8017fea:	2800      	cmp	r0, #0
 8017fec:	f000 80d3 	beq.w	8018196 <rmw_init+0x1b2>
 8017ff0:	460e      	mov	r6, r1
 8017ff2:	2900      	cmp	r1, #0
 8017ff4:	f000 80cf 	beq.w	8018196 <rmw_init+0x1b2>
 8017ff8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017ffa:	4605      	mov	r5, r0
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	f000 80ca 	beq.w	8018196 <rmw_init+0x1b2>
 8018002:	4b78      	ldr	r3, [pc, #480]	@ (80181e4 <rmw_init+0x200>)
 8018004:	6880      	ldr	r0, [r0, #8]
 8018006:	681f      	ldr	r7, [r3, #0]
 8018008:	b128      	cbz	r0, 8018016 <rmw_init+0x32>
 801800a:	4639      	mov	r1, r7
 801800c:	f7e8 f968 	bl	80002e0 <strcmp>
 8018010:	2800      	cmp	r0, #0
 8018012:	f040 80ca 	bne.w	80181aa <rmw_init+0x1c6>
 8018016:	4c74      	ldr	r4, [pc, #464]	@ (80181e8 <rmw_init+0x204>)
 8018018:	f04f 0800 	mov.w	r8, #0
 801801c:	4973      	ldr	r1, [pc, #460]	@ (80181ec <rmw_init+0x208>)
 801801e:	4874      	ldr	r0, [pc, #464]	@ (80181f0 <rmw_init+0x20c>)
 8018020:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018024:	60b7      	str	r7, [r6, #8]
 8018026:	e9c6 2300 	strd	r2, r3, [r6]
 801802a:	68eb      	ldr	r3, [r5, #12]
 801802c:	2201      	movs	r2, #1
 801802e:	64b3      	str	r3, [r6, #72]	@ 0x48
 8018030:	f001 fa32 	bl	8019498 <rmw_uxrce_init_session_memory>
 8018034:	4620      	mov	r0, r4
 8018036:	2204      	movs	r2, #4
 8018038:	496e      	ldr	r1, [pc, #440]	@ (80181f4 <rmw_init+0x210>)
 801803a:	f001 fa6d 	bl	8019518 <rmw_uxrce_init_static_input_buffer_memory>
 801803e:	486c      	ldr	r0, [pc, #432]	@ (80181f0 <rmw_init+0x20c>)
 8018040:	f884 800d 	strb.w	r8, [r4, #13]
 8018044:	f006 f984 	bl	801e350 <get_memory>
 8018048:	2800      	cmp	r0, #0
 801804a:	f000 80a9 	beq.w	80181a0 <rmw_init+0x1bc>
 801804e:	6884      	ldr	r4, [r0, #8]
 8018050:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8018052:	f104 0910 	add.w	r9, r4, #16
 8018056:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018058:	f890 c010 	ldrb.w	ip, [r0, #16]
 801805c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018060:	9101      	str	r1, [sp, #4]
 8018062:	4661      	mov	r1, ip
 8018064:	6a00      	ldr	r0, [r0, #32]
 8018066:	9000      	str	r0, [sp, #0]
 8018068:	4648      	mov	r0, r9
 801806a:	f002 fb59 	bl	801a720 <uxr_set_custom_transport_callbacks>
 801806e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018072:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8018076:	4960      	ldr	r1, [pc, #384]	@ (80181f8 <rmw_init+0x214>)
 8018078:	4860      	ldr	r0, [pc, #384]	@ (80181fc <rmw_init+0x218>)
 801807a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801807e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8018082:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8018086:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801808a:	2201      	movs	r2, #1
 801808c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8018090:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8018094:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8018098:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801809c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801809e:	f001 f9db 	bl	8019458 <rmw_uxrce_init_node_memory>
 80180a2:	2205      	movs	r2, #5
 80180a4:	4956      	ldr	r1, [pc, #344]	@ (8018200 <rmw_init+0x21c>)
 80180a6:	4857      	ldr	r0, [pc, #348]	@ (8018204 <rmw_init+0x220>)
 80180a8:	f001 f9b6 	bl	8019418 <rmw_uxrce_init_subscription_memory>
 80180ac:	220a      	movs	r2, #10
 80180ae:	4956      	ldr	r1, [pc, #344]	@ (8018208 <rmw_init+0x224>)
 80180b0:	4856      	ldr	r0, [pc, #344]	@ (801820c <rmw_init+0x228>)
 80180b2:	f001 f991 	bl	80193d8 <rmw_uxrce_init_publisher_memory>
 80180b6:	2201      	movs	r2, #1
 80180b8:	4955      	ldr	r1, [pc, #340]	@ (8018210 <rmw_init+0x22c>)
 80180ba:	4856      	ldr	r0, [pc, #344]	@ (8018214 <rmw_init+0x230>)
 80180bc:	f001 f94c 	bl	8019358 <rmw_uxrce_init_service_memory>
 80180c0:	2201      	movs	r2, #1
 80180c2:	4955      	ldr	r1, [pc, #340]	@ (8018218 <rmw_init+0x234>)
 80180c4:	4855      	ldr	r0, [pc, #340]	@ (801821c <rmw_init+0x238>)
 80180c6:	f001 f967 	bl	8019398 <rmw_uxrce_init_client_memory>
 80180ca:	220f      	movs	r2, #15
 80180cc:	4954      	ldr	r1, [pc, #336]	@ (8018220 <rmw_init+0x23c>)
 80180ce:	4855      	ldr	r0, [pc, #340]	@ (8018224 <rmw_init+0x240>)
 80180d0:	f001 fa02 	bl	80194d8 <rmw_uxrce_init_topic_memory>
 80180d4:	2203      	movs	r2, #3
 80180d6:	4954      	ldr	r1, [pc, #336]	@ (8018228 <rmw_init+0x244>)
 80180d8:	4854      	ldr	r0, [pc, #336]	@ (801822c <rmw_init+0x248>)
 80180da:	f001 fa3d 	bl	8019558 <rmw_uxrce_init_init_options_impl_memory>
 80180de:	2204      	movs	r2, #4
 80180e0:	4953      	ldr	r1, [pc, #332]	@ (8018230 <rmw_init+0x24c>)
 80180e2:	4854      	ldr	r0, [pc, #336]	@ (8018234 <rmw_init+0x250>)
 80180e4:	f001 fa58 	bl	8019598 <rmw_uxrce_init_wait_set_memory>
 80180e8:	4953      	ldr	r1, [pc, #332]	@ (8018238 <rmw_init+0x254>)
 80180ea:	4854      	ldr	r0, [pc, #336]	@ (801823c <rmw_init+0x258>)
 80180ec:	2204      	movs	r2, #4
 80180ee:	f001 fa73 	bl	80195d8 <rmw_uxrce_init_guard_condition_memory>
 80180f2:	4642      	mov	r2, r8
 80180f4:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80180f6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80180f8:	f000 ff94 	bl	8019024 <rmw_uxrce_transport_init>
 80180fc:	4607      	mov	r7, r0
 80180fe:	2800      	cmp	r0, #0
 8018100:	d158      	bne.n	80181b4 <rmw_init+0x1d0>
 8018102:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8018104:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8018108:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801810c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801810e:	4628      	mov	r0, r5
 8018110:	f002 fd36 	bl	801ab80 <uxr_init_session>
 8018114:	4622      	mov	r2, r4
 8018116:	494a      	ldr	r1, [pc, #296]	@ (8018240 <rmw_init+0x25c>)
 8018118:	4628      	mov	r0, r5
 801811a:	f002 fd55 	bl	801abc8 <uxr_set_topic_callback>
 801811e:	463a      	mov	r2, r7
 8018120:	4948      	ldr	r1, [pc, #288]	@ (8018244 <rmw_init+0x260>)
 8018122:	4628      	mov	r0, r5
 8018124:	f002 fd4c 	bl	801abc0 <uxr_set_status_callback>
 8018128:	463a      	mov	r2, r7
 801812a:	4947      	ldr	r1, [pc, #284]	@ (8018248 <rmw_init+0x264>)
 801812c:	4628      	mov	r0, r5
 801812e:	f002 fd4f 	bl	801abd0 <uxr_set_request_callback>
 8018132:	463a      	mov	r2, r7
 8018134:	4945      	ldr	r1, [pc, #276]	@ (801824c <rmw_init+0x268>)
 8018136:	4628      	mov	r0, r5
 8018138:	f002 fd4e 	bl	801abd8 <uxr_set_reply_callback>
 801813c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018140:	2304      	movs	r3, #4
 8018142:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8018146:	0092      	lsls	r2, r2, #2
 8018148:	4628      	mov	r0, r5
 801814a:	f002 fd85 	bl	801ac58 <uxr_create_input_reliable_stream>
 801814e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018152:	2304      	movs	r3, #4
 8018154:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8018158:	0092      	lsls	r2, r2, #2
 801815a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801815e:	4628      	mov	r0, r5
 8018160:	f002 fd50 	bl	801ac04 <uxr_create_output_reliable_stream>
 8018164:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8018168:	4628      	mov	r0, r5
 801816a:	f002 fd6f 	bl	801ac4c <uxr_create_input_best_effort_stream>
 801816e:	f241 3194 	movw	r1, #5012	@ 0x1394
 8018172:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8018176:	4628      	mov	r0, r5
 8018178:	4421      	add	r1, r4
 801817a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801817e:	f002 fd2f 	bl	801abe0 <uxr_create_output_best_effort_stream>
 8018182:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8018186:	4628      	mov	r0, r5
 8018188:	f003 fab8 	bl	801b6fc <uxr_create_session>
 801818c:	b1f8      	cbz	r0, 80181ce <rmw_init+0x1ea>
 801818e:	4638      	mov	r0, r7
 8018190:	b003      	add	sp, #12
 8018192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018196:	270b      	movs	r7, #11
 8018198:	4638      	mov	r0, r7
 801819a:	b003      	add	sp, #12
 801819c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181a0:	2701      	movs	r7, #1
 80181a2:	4638      	mov	r0, r7
 80181a4:	b003      	add	sp, #12
 80181a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181aa:	270c      	movs	r7, #12
 80181ac:	4638      	mov	r0, r7
 80181ae:	b003      	add	sp, #12
 80181b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181b4:	4648      	mov	r0, r9
 80181b6:	f002 faf1 	bl	801a79c <uxr_close_custom_transport>
 80181ba:	4621      	mov	r1, r4
 80181bc:	480c      	ldr	r0, [pc, #48]	@ (80181f0 <rmw_init+0x20c>)
 80181be:	f006 f8d7 	bl	801e370 <put_memory>
 80181c2:	4638      	mov	r0, r7
 80181c4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80181c8:	b003      	add	sp, #12
 80181ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181ce:	4648      	mov	r0, r9
 80181d0:	f002 fae4 	bl	801a79c <uxr_close_custom_transport>
 80181d4:	4621      	mov	r1, r4
 80181d6:	4806      	ldr	r0, [pc, #24]	@ (80181f0 <rmw_init+0x20c>)
 80181d8:	f006 f8ca 	bl	801e370 <put_memory>
 80181dc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80181de:	2701      	movs	r7, #1
 80181e0:	e7d5      	b.n	801818e <rmw_init+0x1aa>
 80181e2:	bf00      	nop
 80181e4:	08022f40 	.word	0x08022f40
 80181e8:	2406939c 	.word	0x2406939c
 80181ec:	24065648 	.word	0x24065648
 80181f0:	2406938c 	.word	0x2406938c
 80181f4:	24066bf0 	.word	0x24066bf0
 80181f8:	24064c6c 	.word	0x24064c6c
 80181fc:	2406935c 	.word	0x2406935c
 8018200:	24068cf0 	.word	0x24068cf0
 8018204:	240693ac 	.word	0x240693ac
 8018208:	24064d10 	.word	0x24064d10
 801820c:	2406936c 	.word	0x2406936c
 8018210:	24065580 	.word	0x24065580
 8018214:	2406937c 	.word	0x2406937c
 8018218:	24064aa0 	.word	0x24064aa0
 801821c:	24064a90 	.word	0x24064a90
 8018220:	24069128 	.word	0x24069128
 8018224:	240693bc 	.word	0x240693bc
 8018228:	24064be8 	.word	0x24064be8
 801822c:	2406934c 	.word	0x2406934c
 8018230:	240692cc 	.word	0x240692cc
 8018234:	240693cc 	.word	0x240693cc
 8018238:	24064b68 	.word	0x24064b68
 801823c:	2406933c 	.word	0x2406933c
 8018240:	0801e189 	.word	0x0801e189
 8018244:	0801e181 	.word	0x0801e181
 8018248:	0801e221 	.word	0x0801e221
 801824c:	0801e2bd 	.word	0x0801e2bd

08018250 <rmw_context_fini>:
 8018250:	4b17      	ldr	r3, [pc, #92]	@ (80182b0 <rmw_context_fini+0x60>)
 8018252:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8018254:	b570      	push	{r4, r5, r6, lr}
 8018256:	681c      	ldr	r4, [r3, #0]
 8018258:	4605      	mov	r5, r0
 801825a:	b334      	cbz	r4, 80182aa <rmw_context_fini+0x5a>
 801825c:	2600      	movs	r6, #0
 801825e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8018262:	6902      	ldr	r2, [r0, #16]
 8018264:	428a      	cmp	r2, r1
 8018266:	d018      	beq.n	801829a <rmw_context_fini+0x4a>
 8018268:	2c00      	cmp	r4, #0
 801826a:	d1f8      	bne.n	801825e <rmw_context_fini+0xe>
 801826c:	b189      	cbz	r1, 8018292 <rmw_context_fini+0x42>
 801826e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8018272:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8018276:	789b      	ldrb	r3, [r3, #2]
 8018278:	2b01      	cmp	r3, #1
 801827a:	bf14      	ite	ne
 801827c:	210a      	movne	r1, #10
 801827e:	2100      	moveq	r1, #0
 8018280:	f003 fa14 	bl	801b6ac <uxr_delete_session_retries>
 8018284:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8018286:	f001 f9c7 	bl	8019618 <rmw_uxrce_fini_session_memory>
 801828a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801828c:	3010      	adds	r0, #16
 801828e:	f002 fa85 	bl	801a79c <uxr_close_custom_transport>
 8018292:	2300      	movs	r3, #0
 8018294:	4630      	mov	r0, r6
 8018296:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8018298:	bd70      	pop	{r4, r5, r6, pc}
 801829a:	3018      	adds	r0, #24
 801829c:	f000 f89c 	bl	80183d8 <rmw_destroy_node>
 80182a0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80182a2:	4606      	mov	r6, r0
 80182a4:	2c00      	cmp	r4, #0
 80182a6:	d1da      	bne.n	801825e <rmw_context_fini+0xe>
 80182a8:	e7e0      	b.n	801826c <rmw_context_fini+0x1c>
 80182aa:	4626      	mov	r6, r4
 80182ac:	e7de      	b.n	801826c <rmw_context_fini+0x1c>
 80182ae:	bf00      	nop
 80182b0:	2406935c 	.word	0x2406935c

080182b4 <create_node>:
 80182b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182b8:	b083      	sub	sp, #12
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d064      	beq.n	8018388 <create_node+0xd4>
 80182be:	4606      	mov	r6, r0
 80182c0:	4838      	ldr	r0, [pc, #224]	@ (80183a4 <create_node+0xf0>)
 80182c2:	460f      	mov	r7, r1
 80182c4:	4690      	mov	r8, r2
 80182c6:	461d      	mov	r5, r3
 80182c8:	f006 f842 	bl	801e350 <get_memory>
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d05b      	beq.n	8018388 <create_node+0xd4>
 80182d0:	6884      	ldr	r4, [r0, #8]
 80182d2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80182d4:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80182d8:	f104 0518 	add.w	r5, r4, #24
 80182dc:	6123      	str	r3, [r4, #16]
 80182de:	f7ff fd7d 	bl	8017ddc <rmw_get_implementation_identifier>
 80182e2:	f8c4 9020 	str.w	r9, [r4, #32]
 80182e6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80182ea:	4630      	mov	r0, r6
 80182ec:	f7e8 f802 	bl	80002f4 <strlen>
 80182f0:	1c42      	adds	r2, r0, #1
 80182f2:	2a3c      	cmp	r2, #60	@ 0x3c
 80182f4:	d840      	bhi.n	8018378 <create_node+0xc4>
 80182f6:	4648      	mov	r0, r9
 80182f8:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80182fc:	4631      	mov	r1, r6
 80182fe:	f007 fcb8 	bl	801fc72 <memcpy>
 8018302:	4638      	mov	r0, r7
 8018304:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8018308:	f7e7 fff4 	bl	80002f4 <strlen>
 801830c:	1c42      	adds	r2, r0, #1
 801830e:	2a3c      	cmp	r2, #60	@ 0x3c
 8018310:	d832      	bhi.n	8018378 <create_node+0xc4>
 8018312:	4639      	mov	r1, r7
 8018314:	4648      	mov	r0, r9
 8018316:	f007 fcac 	bl	801fc72 <memcpy>
 801831a:	6923      	ldr	r3, [r4, #16]
 801831c:	2101      	movs	r1, #1
 801831e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018322:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8018326:	1842      	adds	r2, r0, r1
 8018328:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801832c:	f002 fa3a 	bl	801a7a4 <uxr_object_id>
 8018330:	6160      	str	r0, [r4, #20]
 8018332:	783b      	ldrb	r3, [r7, #0]
 8018334:	2b2f      	cmp	r3, #47	@ 0x2f
 8018336:	d12c      	bne.n	8018392 <create_node+0xde>
 8018338:	787b      	ldrb	r3, [r7, #1]
 801833a:	bb53      	cbnz	r3, 8018392 <create_node+0xde>
 801833c:	4633      	mov	r3, r6
 801833e:	4a1a      	ldr	r2, [pc, #104]	@ (80183a8 <create_node+0xf4>)
 8018340:	213c      	movs	r1, #60	@ 0x3c
 8018342:	481a      	ldr	r0, [pc, #104]	@ (80183ac <create_node+0xf8>)
 8018344:	f007 fa08 	bl	801f758 <sniprintf>
 8018348:	6920      	ldr	r0, [r4, #16]
 801834a:	2106      	movs	r1, #6
 801834c:	fa1f f388 	uxth.w	r3, r8
 8018350:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018354:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018358:	9101      	str	r1, [sp, #4]
 801835a:	4914      	ldr	r1, [pc, #80]	@ (80183ac <create_node+0xf8>)
 801835c:	9100      	str	r1, [sp, #0]
 801835e:	6811      	ldr	r1, [r2, #0]
 8018360:	6962      	ldr	r2, [r4, #20]
 8018362:	f001 ff71 	bl	801a248 <uxr_buffer_create_participant_bin>
 8018366:	4602      	mov	r2, r0
 8018368:	6920      	ldr	r0, [r4, #16]
 801836a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801836e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018372:	f001 fad3 	bl	801991c <run_xrce_session>
 8018376:	b918      	cbnz	r0, 8018380 <create_node+0xcc>
 8018378:	4628      	mov	r0, r5
 801837a:	2500      	movs	r5, #0
 801837c:	f001 f952 	bl	8019624 <rmw_uxrce_fini_node_memory>
 8018380:	4628      	mov	r0, r5
 8018382:	b003      	add	sp, #12
 8018384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018388:	2500      	movs	r5, #0
 801838a:	4628      	mov	r0, r5
 801838c:	b003      	add	sp, #12
 801838e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018392:	463b      	mov	r3, r7
 8018394:	4a06      	ldr	r2, [pc, #24]	@ (80183b0 <create_node+0xfc>)
 8018396:	213c      	movs	r1, #60	@ 0x3c
 8018398:	9600      	str	r6, [sp, #0]
 801839a:	4804      	ldr	r0, [pc, #16]	@ (80183ac <create_node+0xf8>)
 801839c:	f007 f9dc 	bl	801f758 <sniprintf>
 80183a0:	e7d2      	b.n	8018348 <create_node+0x94>
 80183a2:	bf00      	nop
 80183a4:	2406935c 	.word	0x2406935c
 80183a8:	08022c14 	.word	0x08022c14
 80183ac:	24064914 	.word	0x24064914
 80183b0:	080225d8 	.word	0x080225d8

080183b4 <rmw_create_node>:
 80183b4:	468c      	mov	ip, r1
 80183b6:	4611      	mov	r1, r2
 80183b8:	f1bc 0f00 	cmp.w	ip, #0
 80183bc:	d00a      	beq.n	80183d4 <rmw_create_node+0x20>
 80183be:	f89c 3000 	ldrb.w	r3, [ip]
 80183c2:	b13b      	cbz	r3, 80183d4 <rmw_create_node+0x20>
 80183c4:	b132      	cbz	r2, 80183d4 <rmw_create_node+0x20>
 80183c6:	7813      	ldrb	r3, [r2, #0]
 80183c8:	b123      	cbz	r3, 80183d4 <rmw_create_node+0x20>
 80183ca:	4603      	mov	r3, r0
 80183cc:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80183ce:	4660      	mov	r0, ip
 80183d0:	f7ff bf70 	b.w	80182b4 <create_node>
 80183d4:	2000      	movs	r0, #0
 80183d6:	4770      	bx	lr

080183d8 <rmw_destroy_node>:
 80183d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183da:	b328      	cbz	r0, 8018428 <rmw_destroy_node+0x50>
 80183dc:	4607      	mov	r7, r0
 80183de:	6800      	ldr	r0, [r0, #0]
 80183e0:	b120      	cbz	r0, 80183ec <rmw_destroy_node+0x14>
 80183e2:	4b37      	ldr	r3, [pc, #220]	@ (80184c0 <rmw_destroy_node+0xe8>)
 80183e4:	6819      	ldr	r1, [r3, #0]
 80183e6:	f7e7 ff7b 	bl	80002e0 <strcmp>
 80183ea:	b9e8      	cbnz	r0, 8018428 <rmw_destroy_node+0x50>
 80183ec:	687d      	ldr	r5, [r7, #4]
 80183ee:	b1dd      	cbz	r5, 8018428 <rmw_destroy_node+0x50>
 80183f0:	4b34      	ldr	r3, [pc, #208]	@ (80184c4 <rmw_destroy_node+0xec>)
 80183f2:	681c      	ldr	r4, [r3, #0]
 80183f4:	2c00      	cmp	r4, #0
 80183f6:	d060      	beq.n	80184ba <rmw_destroy_node+0xe2>
 80183f8:	2600      	movs	r6, #0
 80183fa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80183fe:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8018402:	429d      	cmp	r5, r3
 8018404:	d013      	beq.n	801842e <rmw_destroy_node+0x56>
 8018406:	2c00      	cmp	r4, #0
 8018408:	d1f7      	bne.n	80183fa <rmw_destroy_node+0x22>
 801840a:	4b2f      	ldr	r3, [pc, #188]	@ (80184c8 <rmw_destroy_node+0xf0>)
 801840c:	681c      	ldr	r4, [r3, #0]
 801840e:	b1c4      	cbz	r4, 8018442 <rmw_destroy_node+0x6a>
 8018410:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018414:	6a0b      	ldr	r3, [r1, #32]
 8018416:	429d      	cmp	r5, r3
 8018418:	d1f9      	bne.n	801840e <rmw_destroy_node+0x36>
 801841a:	317c      	adds	r1, #124	@ 0x7c
 801841c:	4638      	mov	r0, r7
 801841e:	f000 fd4b 	bl	8018eb8 <rmw_destroy_subscription>
 8018422:	2801      	cmp	r0, #1
 8018424:	4606      	mov	r6, r0
 8018426:	d1f2      	bne.n	801840e <rmw_destroy_node+0x36>
 8018428:	2601      	movs	r6, #1
 801842a:	4630      	mov	r0, r6
 801842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801842e:	3184      	adds	r1, #132	@ 0x84
 8018430:	4638      	mov	r0, r7
 8018432:	f000 f94d 	bl	80186d0 <rmw_destroy_publisher>
 8018436:	2801      	cmp	r0, #1
 8018438:	4606      	mov	r6, r0
 801843a:	d0f5      	beq.n	8018428 <rmw_destroy_node+0x50>
 801843c:	2c00      	cmp	r4, #0
 801843e:	d1dc      	bne.n	80183fa <rmw_destroy_node+0x22>
 8018440:	e7e3      	b.n	801840a <rmw_destroy_node+0x32>
 8018442:	4b22      	ldr	r3, [pc, #136]	@ (80184cc <rmw_destroy_node+0xf4>)
 8018444:	681c      	ldr	r4, [r3, #0]
 8018446:	b16c      	cbz	r4, 8018464 <rmw_destroy_node+0x8c>
 8018448:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801844c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801844e:	429d      	cmp	r5, r3
 8018450:	d1f9      	bne.n	8018446 <rmw_destroy_node+0x6e>
 8018452:	317c      	adds	r1, #124	@ 0x7c
 8018454:	4638      	mov	r0, r7
 8018456:	f000 fbb9 	bl	8018bcc <rmw_destroy_service>
 801845a:	2801      	cmp	r0, #1
 801845c:	4606      	mov	r6, r0
 801845e:	d0e3      	beq.n	8018428 <rmw_destroy_node+0x50>
 8018460:	2c00      	cmp	r4, #0
 8018462:	d1f1      	bne.n	8018448 <rmw_destroy_node+0x70>
 8018464:	4b1a      	ldr	r3, [pc, #104]	@ (80184d0 <rmw_destroy_node+0xf8>)
 8018466:	681c      	ldr	r4, [r3, #0]
 8018468:	b16c      	cbz	r4, 8018486 <rmw_destroy_node+0xae>
 801846a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801846e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018470:	429d      	cmp	r5, r3
 8018472:	d1f9      	bne.n	8018468 <rmw_destroy_node+0x90>
 8018474:	317c      	adds	r1, #124	@ 0x7c
 8018476:	4638      	mov	r0, r7
 8018478:	f7ff fc6c 	bl	8017d54 <rmw_destroy_client>
 801847c:	2801      	cmp	r0, #1
 801847e:	4606      	mov	r6, r0
 8018480:	d0d2      	beq.n	8018428 <rmw_destroy_node+0x50>
 8018482:	2c00      	cmp	r4, #0
 8018484:	d1f1      	bne.n	801846a <rmw_destroy_node+0x92>
 8018486:	6928      	ldr	r0, [r5, #16]
 8018488:	696a      	ldr	r2, [r5, #20]
 801848a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801848e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018492:	6819      	ldr	r1, [r3, #0]
 8018494:	f001 fe8c 	bl	801a1b0 <uxr_buffer_delete_entity>
 8018498:	4602      	mov	r2, r0
 801849a:	6928      	ldr	r0, [r5, #16]
 801849c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80184a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80184a4:	f001 fa3a 	bl	801991c <run_xrce_session>
 80184a8:	4603      	mov	r3, r0
 80184aa:	4638      	mov	r0, r7
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	bf08      	it	eq
 80184b0:	2602      	moveq	r6, #2
 80184b2:	f001 f8b7 	bl	8019624 <rmw_uxrce_fini_node_memory>
 80184b6:	4630      	mov	r0, r6
 80184b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184ba:	4626      	mov	r6, r4
 80184bc:	e7a5      	b.n	801840a <rmw_destroy_node+0x32>
 80184be:	bf00      	nop
 80184c0:	08022f40 	.word	0x08022f40
 80184c4:	2406936c 	.word	0x2406936c
 80184c8:	240693ac 	.word	0x240693ac
 80184cc:	2406937c 	.word	0x2406937c
 80184d0:	24064a90 	.word	0x24064a90

080184d4 <rmw_node_get_graph_guard_condition>:
 80184d4:	6843      	ldr	r3, [r0, #4]
 80184d6:	6918      	ldr	r0, [r3, #16]
 80184d8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80184dc:	4770      	bx	lr
 80184de:	bf00      	nop

080184e0 <rmw_create_publisher>:
 80184e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e4:	b087      	sub	sp, #28
 80184e6:	2800      	cmp	r0, #0
 80184e8:	f000 80d2 	beq.w	8018690 <rmw_create_publisher+0x1b0>
 80184ec:	460e      	mov	r6, r1
 80184ee:	2900      	cmp	r1, #0
 80184f0:	f000 80ce 	beq.w	8018690 <rmw_create_publisher+0x1b0>
 80184f4:	4604      	mov	r4, r0
 80184f6:	6800      	ldr	r0, [r0, #0]
 80184f8:	4615      	mov	r5, r2
 80184fa:	461f      	mov	r7, r3
 80184fc:	f001 fb20 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018500:	f080 0001 	eor.w	r0, r0, #1
 8018504:	b2c0      	uxtb	r0, r0
 8018506:	2800      	cmp	r0, #0
 8018508:	f040 80c2 	bne.w	8018690 <rmw_create_publisher+0x1b0>
 801850c:	2d00      	cmp	r5, #0
 801850e:	f000 80bf 	beq.w	8018690 <rmw_create_publisher+0x1b0>
 8018512:	782b      	ldrb	r3, [r5, #0]
 8018514:	2b00      	cmp	r3, #0
 8018516:	f000 80bb 	beq.w	8018690 <rmw_create_publisher+0x1b0>
 801851a:	2f00      	cmp	r7, #0
 801851c:	f000 80b8 	beq.w	8018690 <rmw_create_publisher+0x1b0>
 8018520:	485e      	ldr	r0, [pc, #376]	@ (801869c <rmw_create_publisher+0x1bc>)
 8018522:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8018526:	f005 ff13 	bl	801e350 <get_memory>
 801852a:	2800      	cmp	r0, #0
 801852c:	f000 80b0 	beq.w	8018690 <rmw_create_publisher+0x1b0>
 8018530:	6884      	ldr	r4, [r0, #8]
 8018532:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8018536:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801853a:	f7ff fc4f 	bl	8017ddc <rmw_get_implementation_identifier>
 801853e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8018542:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8018546:	4628      	mov	r0, r5
 8018548:	f7e7 fed4 	bl	80002f4 <strlen>
 801854c:	3001      	adds	r0, #1
 801854e:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8018552:	283c      	cmp	r0, #60	@ 0x3c
 8018554:	f200 808f 	bhi.w	8018676 <rmw_create_publisher+0x196>
 8018558:	462b      	mov	r3, r5
 801855a:	4a51      	ldr	r2, [pc, #324]	@ (80186a0 <rmw_create_publisher+0x1c0>)
 801855c:	213c      	movs	r1, #60	@ 0x3c
 801855e:	4650      	mov	r0, sl
 8018560:	f007 f8fa 	bl	801f758 <sniprintf>
 8018564:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018568:	4639      	mov	r1, r7
 801856a:	2250      	movs	r2, #80	@ 0x50
 801856c:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801856e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8018572:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8018576:	f007 fb7c 	bl	801fc72 <memcpy>
 801857a:	7a3b      	ldrb	r3, [r7, #8]
 801857c:	4630      	mov	r0, r6
 801857e:	4949      	ldr	r1, [pc, #292]	@ (80186a4 <rmw_create_publisher+0x1c4>)
 8018580:	2b02      	cmp	r3, #2
 8018582:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018586:	bf0c      	ite	eq
 8018588:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 801858c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8018590:	67a3      	str	r3, [r4, #120]	@ 0x78
 8018592:	2300      	movs	r3, #0
 8018594:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8018598:	f7fb f9ac 	bl	80138f4 <get_message_typesupport_handle>
 801859c:	2800      	cmp	r0, #0
 801859e:	d06a      	beq.n	8018676 <rmw_create_publisher+0x196>
 80185a0:	6842      	ldr	r2, [r0, #4]
 80185a2:	61a2      	str	r2, [r4, #24]
 80185a4:	2a00      	cmp	r2, #0
 80185a6:	d066      	beq.n	8018676 <rmw_create_publisher+0x196>
 80185a8:	4629      	mov	r1, r5
 80185aa:	463b      	mov	r3, r7
 80185ac:	4648      	mov	r0, r9
 80185ae:	f005 ff1d 	bl	801e3ec <create_topic>
 80185b2:	6260      	str	r0, [r4, #36]	@ 0x24
 80185b4:	2800      	cmp	r0, #0
 80185b6:	d062      	beq.n	801867e <rmw_create_publisher+0x19e>
 80185b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80185bc:	2103      	movs	r1, #3
 80185be:	2506      	movs	r5, #6
 80185c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80185c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80185c8:	1c42      	adds	r2, r0, #1
 80185ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80185ce:	f002 f8e9 	bl	801a7a4 <uxr_object_id>
 80185d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80185d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80185da:	6120      	str	r0, [r4, #16]
 80185dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80185e0:	6910      	ldr	r0, [r2, #16]
 80185e2:	9500      	str	r5, [sp, #0]
 80185e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80185e8:	6819      	ldr	r1, [r3, #0]
 80185ea:	6922      	ldr	r2, [r4, #16]
 80185ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80185f0:	f001 fe92 	bl	801a318 <uxr_buffer_create_publisher_bin>
 80185f4:	4602      	mov	r2, r0
 80185f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80185fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80185fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018602:	f001 f98b 	bl	801991c <run_xrce_session>
 8018606:	b3b0      	cbz	r0, 8018676 <rmw_create_publisher+0x196>
 8018608:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801860c:	2105      	movs	r1, #5
 801860e:	f10d 0a10 	add.w	sl, sp, #16
 8018612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018616:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801861a:	1c42      	adds	r2, r0, #1
 801861c:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8018620:	f002 f8c0 	bl	801a7a4 <uxr_object_id>
 8018624:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8018628:	4639      	mov	r1, r7
 801862a:	6160      	str	r0, [r4, #20]
 801862c:	691e      	ldr	r6, [r3, #16]
 801862e:	4650      	mov	r0, sl
 8018630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018634:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8018638:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 801863c:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 8018640:	f001 f988 	bl	8019954 <convert_qos_profile>
 8018644:	9503      	str	r5, [sp, #12]
 8018646:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801864a:	9001      	str	r0, [sp, #4]
 801864c:	4630      	mov	r0, r6
 801864e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018652:	f8db 3010 	ldr.w	r3, [fp, #16]
 8018656:	9300      	str	r3, [sp, #0]
 8018658:	6839      	ldr	r1, [r7, #0]
 801865a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801865e:	f001 febb 	bl	801a3d8 <uxr_buffer_create_datawriter_bin>
 8018662:	4602      	mov	r2, r0
 8018664:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018668:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801866c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018670:	f001 f954 	bl	801991c <run_xrce_session>
 8018674:	b970      	cbnz	r0, 8018694 <rmw_create_publisher+0x1b4>
 8018676:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8018678:	b108      	cbz	r0, 801867e <rmw_create_publisher+0x19e>
 801867a:	f001 f843 	bl	8019704 <rmw_uxrce_fini_topic_memory>
 801867e:	4640      	mov	r0, r8
 8018680:	f04f 0800 	mov.w	r8, #0
 8018684:	f000 ffe6 	bl	8019654 <rmw_uxrce_fini_publisher_memory>
 8018688:	4640      	mov	r0, r8
 801868a:	b007      	add	sp, #28
 801868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018690:	f04f 0800 	mov.w	r8, #0
 8018694:	4640      	mov	r0, r8
 8018696:	b007      	add	sp, #28
 8018698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801869c:	2406936c 	.word	0x2406936c
 80186a0:	08022c14 	.word	0x08022c14
 80186a4:	08020d54 	.word	0x08020d54

080186a8 <rmw_publisher_get_actual_qos>:
 80186a8:	b178      	cbz	r0, 80186ca <rmw_publisher_get_actual_qos+0x22>
 80186aa:	b510      	push	{r4, lr}
 80186ac:	fab1 f481 	clz	r4, r1
 80186b0:	0964      	lsrs	r4, r4, #5
 80186b2:	b141      	cbz	r1, 80186c6 <rmw_publisher_get_actual_qos+0x1e>
 80186b4:	6843      	ldr	r3, [r0, #4]
 80186b6:	2250      	movs	r2, #80	@ 0x50
 80186b8:	4608      	mov	r0, r1
 80186ba:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80186be:	f007 fad8 	bl	801fc72 <memcpy>
 80186c2:	4620      	mov	r0, r4
 80186c4:	bd10      	pop	{r4, pc}
 80186c6:	200b      	movs	r0, #11
 80186c8:	bd10      	pop	{r4, pc}
 80186ca:	200b      	movs	r0, #11
 80186cc:	4770      	bx	lr
 80186ce:	bf00      	nop

080186d0 <rmw_destroy_publisher>:
 80186d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d4:	b128      	cbz	r0, 80186e2 <rmw_destroy_publisher+0x12>
 80186d6:	4604      	mov	r4, r0
 80186d8:	6800      	ldr	r0, [r0, #0]
 80186da:	460d      	mov	r5, r1
 80186dc:	f001 fa30 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 80186e0:	b918      	cbnz	r0, 80186ea <rmw_destroy_publisher+0x1a>
 80186e2:	2401      	movs	r4, #1
 80186e4:	4620      	mov	r0, r4
 80186e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186ea:	6863      	ldr	r3, [r4, #4]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d0f8      	beq.n	80186e2 <rmw_destroy_publisher+0x12>
 80186f0:	fab5 f485 	clz	r4, r5
 80186f4:	0964      	lsrs	r4, r4, #5
 80186f6:	2d00      	cmp	r5, #0
 80186f8:	d0f3      	beq.n	80186e2 <rmw_destroy_publisher+0x12>
 80186fa:	6828      	ldr	r0, [r5, #0]
 80186fc:	f001 fa20 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018700:	2800      	cmp	r0, #0
 8018702:	d0ee      	beq.n	80186e2 <rmw_destroy_publisher+0x12>
 8018704:	686e      	ldr	r6, [r5, #4]
 8018706:	2e00      	cmp	r6, #0
 8018708:	d0eb      	beq.n	80186e2 <rmw_destroy_publisher+0x12>
 801870a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801870c:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8018710:	f005 febc 	bl	801e48c <destroy_topic>
 8018714:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8018718:	6972      	ldr	r2, [r6, #20]
 801871a:	6918      	ldr	r0, [r3, #16]
 801871c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018720:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018724:	6819      	ldr	r1, [r3, #0]
 8018726:	f001 fd43 	bl	801a1b0 <uxr_buffer_delete_entity>
 801872a:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801872e:	4680      	mov	r8, r0
 8018730:	6932      	ldr	r2, [r6, #16]
 8018732:	6918      	ldr	r0, [r3, #16]
 8018734:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018738:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801873c:	6819      	ldr	r1, [r3, #0]
 801873e:	f001 fd37 	bl	801a1b0 <uxr_buffer_delete_entity>
 8018742:	4606      	mov	r6, r0
 8018744:	6938      	ldr	r0, [r7, #16]
 8018746:	4642      	mov	r2, r8
 8018748:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801874c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018750:	f001 f8e4 	bl	801991c <run_xrce_session>
 8018754:	693f      	ldr	r7, [r7, #16]
 8018756:	4632      	mov	r2, r6
 8018758:	4606      	mov	r6, r0
 801875a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801875e:	4638      	mov	r0, r7
 8018760:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8018764:	f001 f8da 	bl	801991c <run_xrce_session>
 8018768:	b126      	cbz	r6, 8018774 <rmw_destroy_publisher+0xa4>
 801876a:	b118      	cbz	r0, 8018774 <rmw_destroy_publisher+0xa4>
 801876c:	4628      	mov	r0, r5
 801876e:	f000 ff71 	bl	8019654 <rmw_uxrce_fini_publisher_memory>
 8018772:	e7b7      	b.n	80186e4 <rmw_destroy_publisher+0x14>
 8018774:	2402      	movs	r4, #2
 8018776:	e7f9      	b.n	801876c <rmw_destroy_publisher+0x9c>

08018778 <rmw_send_request>:
 8018778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801877c:	4604      	mov	r4, r0
 801877e:	6800      	ldr	r0, [r0, #0]
 8018780:	b08b      	sub	sp, #44	@ 0x2c
 8018782:	460e      	mov	r6, r1
 8018784:	4615      	mov	r5, r2
 8018786:	b128      	cbz	r0, 8018794 <rmw_send_request+0x1c>
 8018788:	4b21      	ldr	r3, [pc, #132]	@ (8018810 <rmw_send_request+0x98>)
 801878a:	6819      	ldr	r1, [r3, #0]
 801878c:	f7e7 fda8 	bl	80002e0 <strcmp>
 8018790:	2800      	cmp	r0, #0
 8018792:	d139      	bne.n	8018808 <rmw_send_request+0x90>
 8018794:	6864      	ldr	r4, [r4, #4]
 8018796:	2700      	movs	r7, #0
 8018798:	6963      	ldr	r3, [r4, #20]
 801879a:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801879e:	689b      	ldr	r3, [r3, #8]
 80187a0:	4798      	blx	r3
 80187a2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80187a6:	4630      	mov	r0, r6
 80187a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80187ac:	4798      	blx	r3
 80187ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80187b2:	9000      	str	r0, [sp, #0]
 80187b4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80187b8:	6922      	ldr	r2, [r4, #16]
 80187ba:	ab02      	add	r3, sp, #8
 80187bc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80187be:	f004 f81b 	bl	801c7f8 <uxr_prepare_output_stream>
 80187c2:	e9c5 0700 	strd	r0, r7, [r5]
 80187c6:	b198      	cbz	r0, 80187f0 <rmw_send_request+0x78>
 80187c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80187cc:	a902      	add	r1, sp, #8
 80187ce:	4630      	mov	r0, r6
 80187d0:	4798      	blx	r3
 80187d2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80187d6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80187da:	2b01      	cmp	r3, #1
 80187dc:	d00c      	beq.n	80187f8 <rmw_send_request+0x80>
 80187de:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80187e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187e4:	f002 fe18 	bl	801b418 <uxr_run_session_until_confirm_delivery>
 80187e8:	4638      	mov	r0, r7
 80187ea:	b00b      	add	sp, #44	@ 0x2c
 80187ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187f0:	2001      	movs	r0, #1
 80187f2:	b00b      	add	sp, #44	@ 0x2c
 80187f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187fc:	f002 fa52 	bl	801aca4 <uxr_flash_output_streams>
 8018800:	4638      	mov	r0, r7
 8018802:	b00b      	add	sp, #44	@ 0x2c
 8018804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018808:	200c      	movs	r0, #12
 801880a:	b00b      	add	sp, #44	@ 0x2c
 801880c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018810:	08022f40 	.word	0x08022f40

08018814 <rmw_take_request>:
 8018814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018818:	4605      	mov	r5, r0
 801881a:	6800      	ldr	r0, [r0, #0]
 801881c:	b089      	sub	sp, #36	@ 0x24
 801881e:	460c      	mov	r4, r1
 8018820:	4690      	mov	r8, r2
 8018822:	461e      	mov	r6, r3
 8018824:	b128      	cbz	r0, 8018832 <rmw_take_request+0x1e>
 8018826:	4b28      	ldr	r3, [pc, #160]	@ (80188c8 <rmw_take_request+0xb4>)
 8018828:	6819      	ldr	r1, [r3, #0]
 801882a:	f7e7 fd59 	bl	80002e0 <strcmp>
 801882e:	2800      	cmp	r0, #0
 8018830:	d146      	bne.n	80188c0 <rmw_take_request+0xac>
 8018832:	b10e      	cbz	r6, 8018838 <rmw_take_request+0x24>
 8018834:	2300      	movs	r3, #0
 8018836:	7033      	strb	r3, [r6, #0]
 8018838:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801883c:	f000 fff0 	bl	8019820 <rmw_uxrce_clean_expired_static_input_buffer>
 8018840:	4648      	mov	r0, r9
 8018842:	f000 ffc5 	bl	80197d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018846:	4607      	mov	r7, r0
 8018848:	b3b0      	cbz	r0, 80188b8 <rmw_take_request+0xa4>
 801884a:	6885      	ldr	r5, [r0, #8]
 801884c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8018850:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8018854:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8018858:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801885c:	7423      	strb	r3, [r4, #16]
 801885e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8018862:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8018866:	f8a4 2011 	strh.w	r2, [r4, #17]
 801886a:	74e3      	strb	r3, [r4, #19]
 801886c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8018870:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8018874:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8018878:	6161      	str	r1, [r4, #20]
 801887a:	61a2      	str	r2, [r4, #24]
 801887c:	61e3      	str	r3, [r4, #28]
 801887e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018882:	689b      	ldr	r3, [r3, #8]
 8018884:	4798      	blx	r3
 8018886:	6844      	ldr	r4, [r0, #4]
 8018888:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801888c:	f105 0110 	add.w	r1, r5, #16
 8018890:	4668      	mov	r0, sp
 8018892:	f7f9 ff27 	bl	80126e4 <ucdr_init_buffer>
 8018896:	4641      	mov	r1, r8
 8018898:	68e3      	ldr	r3, [r4, #12]
 801889a:	4668      	mov	r0, sp
 801889c:	4798      	blx	r3
 801889e:	4639      	mov	r1, r7
 80188a0:	4604      	mov	r4, r0
 80188a2:	480a      	ldr	r0, [pc, #40]	@ (80188cc <rmw_take_request+0xb8>)
 80188a4:	f005 fd64 	bl	801e370 <put_memory>
 80188a8:	b106      	cbz	r6, 80188ac <rmw_take_request+0x98>
 80188aa:	7034      	strb	r4, [r6, #0]
 80188ac:	f084 0001 	eor.w	r0, r4, #1
 80188b0:	b2c0      	uxtb	r0, r0
 80188b2:	b009      	add	sp, #36	@ 0x24
 80188b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188b8:	2001      	movs	r0, #1
 80188ba:	b009      	add	sp, #36	@ 0x24
 80188bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188c0:	200c      	movs	r0, #12
 80188c2:	b009      	add	sp, #36	@ 0x24
 80188c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188c8:	08022f40 	.word	0x08022f40
 80188cc:	2406939c 	.word	0x2406939c

080188d0 <rmw_send_response>:
 80188d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188d2:	4605      	mov	r5, r0
 80188d4:	6800      	ldr	r0, [r0, #0]
 80188d6:	b091      	sub	sp, #68	@ 0x44
 80188d8:	460c      	mov	r4, r1
 80188da:	4616      	mov	r6, r2
 80188dc:	b128      	cbz	r0, 80188ea <rmw_send_response+0x1a>
 80188de:	4b29      	ldr	r3, [pc, #164]	@ (8018984 <rmw_send_response+0xb4>)
 80188e0:	6819      	ldr	r1, [r3, #0]
 80188e2:	f7e7 fcfd 	bl	80002e0 <strcmp>
 80188e6:	2800      	cmp	r0, #0
 80188e8:	d141      	bne.n	801896e <rmw_send_response+0x9e>
 80188ea:	686d      	ldr	r5, [r5, #4]
 80188ec:	68a1      	ldr	r1, [r4, #8]
 80188ee:	6860      	ldr	r0, [r4, #4]
 80188f0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80188f2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80188f6:	9307      	str	r3, [sp, #28]
 80188f8:	4623      	mov	r3, r4
 80188fa:	9206      	str	r2, [sp, #24]
 80188fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018900:	789b      	ldrb	r3, [r3, #2]
 8018902:	f88d 2017 	strb.w	r2, [sp, #23]
 8018906:	f88d 3016 	strb.w	r3, [sp, #22]
 801890a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801890e:	68e2      	ldr	r2, [r4, #12]
 8018910:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018914:	ab02      	add	r3, sp, #8
 8018916:	696c      	ldr	r4, [r5, #20]
 8018918:	c307      	stmia	r3!, {r0, r1, r2}
 801891a:	68e3      	ldr	r3, [r4, #12]
 801891c:	4798      	blx	r3
 801891e:	6844      	ldr	r4, [r0, #4]
 8018920:	4630      	mov	r0, r6
 8018922:	6923      	ldr	r3, [r4, #16]
 8018924:	4798      	blx	r3
 8018926:	f100 0318 	add.w	r3, r0, #24
 801892a:	6938      	ldr	r0, [r7, #16]
 801892c:	9300      	str	r3, [sp, #0]
 801892e:	ab08      	add	r3, sp, #32
 8018930:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018934:	692a      	ldr	r2, [r5, #16]
 8018936:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018938:	f003 ff5e 	bl	801c7f8 <uxr_prepare_output_stream>
 801893c:	b910      	cbnz	r0, 8018944 <rmw_send_response+0x74>
 801893e:	2001      	movs	r0, #1
 8018940:	b011      	add	sp, #68	@ 0x44
 8018942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018944:	a902      	add	r1, sp, #8
 8018946:	a808      	add	r0, sp, #32
 8018948:	f004 fff8 	bl	801d93c <uxr_serialize_SampleIdentity>
 801894c:	68a3      	ldr	r3, [r4, #8]
 801894e:	a908      	add	r1, sp, #32
 8018950:	4630      	mov	r0, r6
 8018952:	4798      	blx	r3
 8018954:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018958:	6938      	ldr	r0, [r7, #16]
 801895a:	2b01      	cmp	r3, #1
 801895c:	d00a      	beq.n	8018974 <rmw_send_response+0xa4>
 801895e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018960:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018964:	f002 fd58 	bl	801b418 <uxr_run_session_until_confirm_delivery>
 8018968:	2000      	movs	r0, #0
 801896a:	b011      	add	sp, #68	@ 0x44
 801896c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801896e:	200c      	movs	r0, #12
 8018970:	b011      	add	sp, #68	@ 0x44
 8018972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018974:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018978:	f002 f994 	bl	801aca4 <uxr_flash_output_streams>
 801897c:	2000      	movs	r0, #0
 801897e:	b011      	add	sp, #68	@ 0x44
 8018980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018982:	bf00      	nop
 8018984:	08022f40 	.word	0x08022f40

08018988 <rmw_take_response>:
 8018988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801898c:	4604      	mov	r4, r0
 801898e:	6800      	ldr	r0, [r0, #0]
 8018990:	b088      	sub	sp, #32
 8018992:	460f      	mov	r7, r1
 8018994:	4690      	mov	r8, r2
 8018996:	461d      	mov	r5, r3
 8018998:	b120      	cbz	r0, 80189a4 <rmw_take_response+0x1c>
 801899a:	4b1d      	ldr	r3, [pc, #116]	@ (8018a10 <rmw_take_response+0x88>)
 801899c:	6819      	ldr	r1, [r3, #0]
 801899e:	f7e7 fc9f 	bl	80002e0 <strcmp>
 80189a2:	bb68      	cbnz	r0, 8018a00 <rmw_take_response+0x78>
 80189a4:	b10d      	cbz	r5, 80189aa <rmw_take_response+0x22>
 80189a6:	2300      	movs	r3, #0
 80189a8:	702b      	strb	r3, [r5, #0]
 80189aa:	6864      	ldr	r4, [r4, #4]
 80189ac:	f000 ff38 	bl	8019820 <rmw_uxrce_clean_expired_static_input_buffer>
 80189b0:	4620      	mov	r0, r4
 80189b2:	f000 ff0d 	bl	80197d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80189b6:	4606      	mov	r6, r0
 80189b8:	b330      	cbz	r0, 8018a08 <rmw_take_response+0x80>
 80189ba:	6963      	ldr	r3, [r4, #20]
 80189bc:	6884      	ldr	r4, [r0, #8]
 80189be:	68db      	ldr	r3, [r3, #12]
 80189c0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80189c4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80189c8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80189cc:	4798      	blx	r3
 80189ce:	6847      	ldr	r7, [r0, #4]
 80189d0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80189d4:	f104 0110 	add.w	r1, r4, #16
 80189d8:	4668      	mov	r0, sp
 80189da:	f7f9 fe83 	bl	80126e4 <ucdr_init_buffer>
 80189de:	4641      	mov	r1, r8
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	4668      	mov	r0, sp
 80189e4:	4798      	blx	r3
 80189e6:	4631      	mov	r1, r6
 80189e8:	4604      	mov	r4, r0
 80189ea:	480a      	ldr	r0, [pc, #40]	@ (8018a14 <rmw_take_response+0x8c>)
 80189ec:	f005 fcc0 	bl	801e370 <put_memory>
 80189f0:	b105      	cbz	r5, 80189f4 <rmw_take_response+0x6c>
 80189f2:	702c      	strb	r4, [r5, #0]
 80189f4:	f084 0001 	eor.w	r0, r4, #1
 80189f8:	b2c0      	uxtb	r0, r0
 80189fa:	b008      	add	sp, #32
 80189fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a00:	200c      	movs	r0, #12
 8018a02:	b008      	add	sp, #32
 8018a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a08:	2001      	movs	r0, #1
 8018a0a:	b008      	add	sp, #32
 8018a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a10:	08022f40 	.word	0x08022f40
 8018a14:	2406939c 	.word	0x2406939c

08018a18 <rmw_create_service>:
 8018a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a1c:	b091      	sub	sp, #68	@ 0x44
 8018a1e:	2900      	cmp	r1, #0
 8018a20:	f000 80bb 	beq.w	8018b9a <rmw_create_service+0x182>
 8018a24:	4606      	mov	r6, r0
 8018a26:	2800      	cmp	r0, #0
 8018a28:	f000 80b7 	beq.w	8018b9a <rmw_create_service+0x182>
 8018a2c:	4614      	mov	r4, r2
 8018a2e:	6800      	ldr	r0, [r0, #0]
 8018a30:	4689      	mov	r9, r1
 8018a32:	461d      	mov	r5, r3
 8018a34:	f001 f884 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018a38:	2c00      	cmp	r4, #0
 8018a3a:	f000 80ae 	beq.w	8018b9a <rmw_create_service+0x182>
 8018a3e:	f080 0001 	eor.w	r0, r0, #1
 8018a42:	b2c0      	uxtb	r0, r0
 8018a44:	2800      	cmp	r0, #0
 8018a46:	f040 80a8 	bne.w	8018b9a <rmw_create_service+0x182>
 8018a4a:	7823      	ldrb	r3, [r4, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	f000 80a4 	beq.w	8018b9a <rmw_create_service+0x182>
 8018a52:	2d00      	cmp	r5, #0
 8018a54:	f000 80a1 	beq.w	8018b9a <rmw_create_service+0x182>
 8018a58:	4856      	ldr	r0, [pc, #344]	@ (8018bb4 <rmw_create_service+0x19c>)
 8018a5a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8018a5e:	f005 fc77 	bl	801e350 <get_memory>
 8018a62:	4606      	mov	r6, r0
 8018a64:	2800      	cmp	r0, #0
 8018a66:	f000 8099 	beq.w	8018b9c <rmw_create_service+0x184>
 8018a6a:	6887      	ldr	r7, [r0, #8]
 8018a6c:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8018a70:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8018a74:	f7ff f9b2 	bl	8017ddc <rmw_get_implementation_identifier>
 8018a78:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8018a7a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f7e7 fc38 	bl	80002f4 <strlen>
 8018a84:	1c42      	adds	r2, r0, #1
 8018a86:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 8018a8a:	2a3c      	cmp	r2, #60	@ 0x3c
 8018a8c:	f200 808a 	bhi.w	8018ba4 <rmw_create_service+0x18c>
 8018a90:	4621      	mov	r1, r4
 8018a92:	4650      	mov	r0, sl
 8018a94:	f007 f8ed 	bl	801fc72 <memcpy>
 8018a98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	2250      	movs	r2, #80	@ 0x50
 8018aa0:	f107 0020 	add.w	r0, r7, #32
 8018aa4:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8018aa8:	677b      	str	r3, [r7, #116]	@ 0x74
 8018aaa:	f007 f8e2 	bl	801fc72 <memcpy>
 8018aae:	4648      	mov	r0, r9
 8018ab0:	4941      	ldr	r1, [pc, #260]	@ (8018bb8 <rmw_create_service+0x1a0>)
 8018ab2:	f7fa ff2b 	bl	801390c <get_service_typesupport_handle>
 8018ab6:	2800      	cmp	r0, #0
 8018ab8:	d074      	beq.n	8018ba4 <rmw_create_service+0x18c>
 8018aba:	6843      	ldr	r3, [r0, #4]
 8018abc:	617b      	str	r3, [r7, #20]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d070      	beq.n	8018ba4 <rmw_create_service+0x18c>
 8018ac2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018ac6:	2108      	movs	r1, #8
 8018ac8:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 8018bc0 <rmw_create_service+0x1a8>
 8018acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ad0:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8018bc4 <rmw_create_service+0x1ac>
 8018ad4:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8018ad8:	1c42      	adds	r2, r0, #1
 8018ada:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8018ade:	f001 fe61 	bl	801a7a4 <uxr_object_id>
 8018ae2:	2364      	movs	r3, #100	@ 0x64
 8018ae4:	6138      	str	r0, [r7, #16]
 8018ae6:	4652      	mov	r2, sl
 8018ae8:	4649      	mov	r1, r9
 8018aea:	6978      	ldr	r0, [r7, #20]
 8018aec:	f000 ff7c 	bl	80199e8 <generate_service_types>
 8018af0:	2800      	cmp	r0, #0
 8018af2:	d057      	beq.n	8018ba4 <rmw_create_service+0x18c>
 8018af4:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 8018bc8 <rmw_create_service+0x1b0>
 8018af8:	233c      	movs	r3, #60	@ 0x3c
 8018afa:	4a30      	ldr	r2, [pc, #192]	@ (8018bbc <rmw_create_service+0x1a4>)
 8018afc:	4620      	mov	r0, r4
 8018afe:	4659      	mov	r1, fp
 8018b00:	f000 ff40 	bl	8019984 <generate_service_topics>
 8018b04:	2800      	cmp	r0, #0
 8018b06:	d04d      	beq.n	8018ba4 <rmw_create_service+0x18c>
 8018b08:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018b0c:	a80c      	add	r0, sp, #48	@ 0x30
 8018b0e:	4629      	mov	r1, r5
 8018b10:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8018b14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018b18:	f000 ff1c 	bl	8019954 <convert_qos_profile>
 8018b1c:	4a27      	ldr	r2, [pc, #156]	@ (8018bbc <rmw_create_service+0x1a4>)
 8018b1e:	a80c      	add	r0, sp, #48	@ 0x30
 8018b20:	9400      	str	r4, [sp, #0]
 8018b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b24:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018b28:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8018b2c:	c803      	ldmia	r0, {r0, r1}
 8018b2e:	9a08      	ldr	r2, [sp, #32]
 8018b30:	9005      	str	r0, [sp, #20]
 8018b32:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018b36:	2306      	movs	r3, #6
 8018b38:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018b3c:	9307      	str	r3, [sp, #28]
 8018b3e:	6811      	ldr	r1, [r2, #0]
 8018b40:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8018b44:	693a      	ldr	r2, [r7, #16]
 8018b46:	f001 fd35 	bl	801a5b4 <uxr_buffer_create_replier_bin>
 8018b4a:	4602      	mov	r2, r0
 8018b4c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018b50:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018b54:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018b58:	f000 fee0 	bl	801991c <run_xrce_session>
 8018b5c:	b310      	cbz	r0, 8018ba4 <rmw_create_service+0x18c>
 8018b5e:	7a2b      	ldrb	r3, [r5, #8]
 8018b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018b64:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018b68:	2b02      	cmp	r3, #2
 8018b6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8018b6c:	f04f 0200 	mov.w	r2, #0
 8018b70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018b72:	bf0c      	ite	eq
 8018b74:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8018b78:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8018b7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018b82:	ab0e      	add	r3, sp, #56	@ 0x38
 8018b84:	673a      	str	r2, [r7, #112]	@ 0x70
 8018b86:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 8018b8a:	9300      	str	r3, [sp, #0]
 8018b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b8e:	6811      	ldr	r1, [r2, #0]
 8018b90:	693a      	ldr	r2, [r7, #16]
 8018b92:	f001 fe37 	bl	801a804 <uxr_buffer_request_data>
 8018b96:	8338      	strh	r0, [r7, #24]
 8018b98:	e000      	b.n	8018b9c <rmw_create_service+0x184>
 8018b9a:	2600      	movs	r6, #0
 8018b9c:	4630      	mov	r0, r6
 8018b9e:	b011      	add	sp, #68	@ 0x44
 8018ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ba4:	4630      	mov	r0, r6
 8018ba6:	2600      	movs	r6, #0
 8018ba8:	f000 fd80 	bl	80196ac <rmw_uxrce_fini_service_memory>
 8018bac:	4630      	mov	r0, r6
 8018bae:	b011      	add	sp, #68	@ 0x44
 8018bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bb4:	2406937c 	.word	0x2406937c
 8018bb8:	08020d54 	.word	0x08020d54
 8018bbc:	240649f0 	.word	0x240649f0
 8018bc0:	24064a2c 	.word	0x24064a2c
 8018bc4:	2406498c 	.word	0x2406498c
 8018bc8:	24064950 	.word	0x24064950

08018bcc <rmw_destroy_service>:
 8018bcc:	b570      	push	{r4, r5, r6, lr}
 8018bce:	b128      	cbz	r0, 8018bdc <rmw_destroy_service+0x10>
 8018bd0:	4604      	mov	r4, r0
 8018bd2:	6800      	ldr	r0, [r0, #0]
 8018bd4:	460d      	mov	r5, r1
 8018bd6:	f000 ffb3 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018bda:	b910      	cbnz	r0, 8018be2 <rmw_destroy_service+0x16>
 8018bdc:	2401      	movs	r4, #1
 8018bde:	4620      	mov	r0, r4
 8018be0:	bd70      	pop	{r4, r5, r6, pc}
 8018be2:	6863      	ldr	r3, [r4, #4]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d0f9      	beq.n	8018bdc <rmw_destroy_service+0x10>
 8018be8:	2d00      	cmp	r5, #0
 8018bea:	d0f7      	beq.n	8018bdc <rmw_destroy_service+0x10>
 8018bec:	6828      	ldr	r0, [r5, #0]
 8018bee:	f000 ffa7 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018bf2:	2800      	cmp	r0, #0
 8018bf4:	d0f2      	beq.n	8018bdc <rmw_destroy_service+0x10>
 8018bf6:	686e      	ldr	r6, [r5, #4]
 8018bf8:	2e00      	cmp	r6, #0
 8018bfa:	d0ef      	beq.n	8018bdc <rmw_destroy_service+0x10>
 8018bfc:	6864      	ldr	r4, [r4, #4]
 8018bfe:	6932      	ldr	r2, [r6, #16]
 8018c00:	6920      	ldr	r0, [r4, #16]
 8018c02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c0a:	6819      	ldr	r1, [r3, #0]
 8018c0c:	f001 fe34 	bl	801a878 <uxr_buffer_cancel_data>
 8018c10:	4602      	mov	r2, r0
 8018c12:	6920      	ldr	r0, [r4, #16]
 8018c14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c1c:	f000 fe7e 	bl	801991c <run_xrce_session>
 8018c20:	6920      	ldr	r0, [r4, #16]
 8018c22:	6932      	ldr	r2, [r6, #16]
 8018c24:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c2c:	6819      	ldr	r1, [r3, #0]
 8018c2e:	f001 fabf 	bl	801a1b0 <uxr_buffer_delete_entity>
 8018c32:	4602      	mov	r2, r0
 8018c34:	6920      	ldr	r0, [r4, #16]
 8018c36:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c3e:	f000 fe6d 	bl	801991c <run_xrce_session>
 8018c42:	4603      	mov	r3, r0
 8018c44:	4628      	mov	r0, r5
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	bf14      	ite	ne
 8018c4a:	2400      	movne	r4, #0
 8018c4c:	2402      	moveq	r4, #2
 8018c4e:	f000 fd2d 	bl	80196ac <rmw_uxrce_fini_service_memory>
 8018c52:	e7c4      	b.n	8018bde <rmw_destroy_service+0x12>

08018c54 <rmw_service_response_publisher_get_actual_qos>:
 8018c54:	b181      	cbz	r1, 8018c78 <rmw_service_response_publisher_get_actual_qos+0x24>
 8018c56:	4603      	mov	r3, r0
 8018c58:	b510      	push	{r4, lr}
 8018c5a:	fab0 f480 	clz	r4, r0
 8018c5e:	0964      	lsrs	r4, r4, #5
 8018c60:	b140      	cbz	r0, 8018c74 <rmw_service_response_publisher_get_actual_qos+0x20>
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	4608      	mov	r0, r1
 8018c66:	2250      	movs	r2, #80	@ 0x50
 8018c68:	f103 0120 	add.w	r1, r3, #32
 8018c6c:	f007 f801 	bl	801fc72 <memcpy>
 8018c70:	4620      	mov	r0, r4
 8018c72:	bd10      	pop	{r4, pc}
 8018c74:	200b      	movs	r0, #11
 8018c76:	bd10      	pop	{r4, pc}
 8018c78:	200b      	movs	r0, #11
 8018c7a:	4770      	bx	lr

08018c7c <rmw_service_request_subscription_get_actual_qos>:
 8018c7c:	b178      	cbz	r0, 8018c9e <rmw_service_request_subscription_get_actual_qos+0x22>
 8018c7e:	b510      	push	{r4, lr}
 8018c80:	fab1 f481 	clz	r4, r1
 8018c84:	0964      	lsrs	r4, r4, #5
 8018c86:	b141      	cbz	r1, 8018c9a <rmw_service_request_subscription_get_actual_qos+0x1e>
 8018c88:	6843      	ldr	r3, [r0, #4]
 8018c8a:	2250      	movs	r2, #80	@ 0x50
 8018c8c:	4608      	mov	r0, r1
 8018c8e:	f103 0120 	add.w	r1, r3, #32
 8018c92:	f006 ffee 	bl	801fc72 <memcpy>
 8018c96:	4620      	mov	r0, r4
 8018c98:	bd10      	pop	{r4, pc}
 8018c9a:	200b      	movs	r0, #11
 8018c9c:	bd10      	pop	{r4, pc}
 8018c9e:	200b      	movs	r0, #11
 8018ca0:	4770      	bx	lr
 8018ca2:	bf00      	nop

08018ca4 <rmw_create_subscription>:
 8018ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca8:	b08d      	sub	sp, #52	@ 0x34
 8018caa:	2900      	cmp	r1, #0
 8018cac:	f000 80d8 	beq.w	8018e60 <rmw_create_subscription+0x1bc>
 8018cb0:	4604      	mov	r4, r0
 8018cb2:	2800      	cmp	r0, #0
 8018cb4:	f000 80d4 	beq.w	8018e60 <rmw_create_subscription+0x1bc>
 8018cb8:	6800      	ldr	r0, [r0, #0]
 8018cba:	460e      	mov	r6, r1
 8018cbc:	4615      	mov	r5, r2
 8018cbe:	461f      	mov	r7, r3
 8018cc0:	f000 ff3e 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018cc4:	f080 0001 	eor.w	r0, r0, #1
 8018cc8:	b2c0      	uxtb	r0, r0
 8018cca:	2800      	cmp	r0, #0
 8018ccc:	f040 80c8 	bne.w	8018e60 <rmw_create_subscription+0x1bc>
 8018cd0:	2d00      	cmp	r5, #0
 8018cd2:	f000 80c5 	beq.w	8018e60 <rmw_create_subscription+0x1bc>
 8018cd6:	782b      	ldrb	r3, [r5, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	f000 80c1 	beq.w	8018e60 <rmw_create_subscription+0x1bc>
 8018cde:	2f00      	cmp	r7, #0
 8018ce0:	f000 80be 	beq.w	8018e60 <rmw_create_subscription+0x1bc>
 8018ce4:	4867      	ldr	r0, [pc, #412]	@ (8018e84 <rmw_create_subscription+0x1e0>)
 8018ce6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8018cea:	f005 fb31 	bl	801e350 <get_memory>
 8018cee:	4604      	mov	r4, r0
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	f000 80b6 	beq.w	8018e62 <rmw_create_subscription+0x1be>
 8018cf6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018cfa:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 8018cfe:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 8018d02:	f7ff f86b 	bl	8017ddc <rmw_get_implementation_identifier>
 8018d06:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 8018d0a:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 8018d0e:	4628      	mov	r0, r5
 8018d10:	f7e7 faf0 	bl	80002f4 <strlen>
 8018d14:	3001      	adds	r0, #1
 8018d16:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 8018d1a:	283c      	cmp	r0, #60	@ 0x3c
 8018d1c:	f200 80a5 	bhi.w	8018e6a <rmw_create_subscription+0x1c6>
 8018d20:	462b      	mov	r3, r5
 8018d22:	4a59      	ldr	r2, [pc, #356]	@ (8018e88 <rmw_create_subscription+0x1e4>)
 8018d24:	213c      	movs	r1, #60	@ 0x3c
 8018d26:	4650      	mov	r0, sl
 8018d28:	f006 fd16 	bl	801f758 <sniprintf>
 8018d2c:	4639      	mov	r1, r7
 8018d2e:	2250      	movs	r2, #80	@ 0x50
 8018d30:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8018d34:	f8c8 9020 	str.w	r9, [r8, #32]
 8018d38:	f006 ff9b 	bl	801fc72 <memcpy>
 8018d3c:	4630      	mov	r0, r6
 8018d3e:	4953      	ldr	r1, [pc, #332]	@ (8018e8c <rmw_create_subscription+0x1e8>)
 8018d40:	f7fa fdd8 	bl	80138f4 <get_message_typesupport_handle>
 8018d44:	2800      	cmp	r0, #0
 8018d46:	f000 8090 	beq.w	8018e6a <rmw_create_subscription+0x1c6>
 8018d4a:	6842      	ldr	r2, [r0, #4]
 8018d4c:	f8c8 2018 	str.w	r2, [r8, #24]
 8018d50:	2a00      	cmp	r2, #0
 8018d52:	f000 808a 	beq.w	8018e6a <rmw_create_subscription+0x1c6>
 8018d56:	4629      	mov	r1, r5
 8018d58:	463b      	mov	r3, r7
 8018d5a:	4648      	mov	r0, r9
 8018d5c:	f005 fb46 	bl	801e3ec <create_topic>
 8018d60:	f8c8 001c 	str.w	r0, [r8, #28]
 8018d64:	2800      	cmp	r0, #0
 8018d66:	f000 8085 	beq.w	8018e74 <rmw_create_subscription+0x1d0>
 8018d6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d6e:	2104      	movs	r1, #4
 8018d70:	2506      	movs	r5, #6
 8018d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d76:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8018d7a:	1c42      	adds	r2, r0, #1
 8018d7c:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8018d80:	f001 fd10 	bl	801a7a4 <uxr_object_id>
 8018d84:	f8c8 0010 	str.w	r0, [r8, #16]
 8018d88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018d8c:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8018d90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018d94:	9500      	str	r5, [sp, #0]
 8018d96:	6819      	ldr	r1, [r3, #0]
 8018d98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018d9c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018da0:	f001 faea 	bl	801a378 <uxr_buffer_create_subscriber_bin>
 8018da4:	4602      	mov	r2, r0
 8018da6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018daa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018dae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018db2:	f000 fdb3 	bl	801991c <run_xrce_session>
 8018db6:	2800      	cmp	r0, #0
 8018db8:	d057      	beq.n	8018e6a <rmw_create_subscription+0x1c6>
 8018dba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018dbe:	4629      	mov	r1, r5
 8018dc0:	ae08      	add	r6, sp, #32
 8018dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018dc6:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8018dca:	1c42      	adds	r2, r0, #1
 8018dcc:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8018dd0:	f001 fce8 	bl	801a7a4 <uxr_object_id>
 8018dd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018dd8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8018ddc:	4639      	mov	r1, r7
 8018dde:	f8c8 0014 	str.w	r0, [r8, #20]
 8018de2:	4630      	mov	r0, r6
 8018de4:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8018de8:	9305      	str	r3, [sp, #20]
 8018dea:	f000 fdb3 	bl	8019954 <convert_qos_profile>
 8018dee:	9503      	str	r5, [sp, #12]
 8018df0:	9b05      	ldr	r3, [sp, #20]
 8018df2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018df6:	9001      	str	r0, [sp, #4]
 8018df8:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8018dfc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018e00:	691b      	ldr	r3, [r3, #16]
 8018e02:	9300      	str	r3, [sp, #0]
 8018e04:	f8db 1000 	ldr.w	r1, [fp]
 8018e08:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8018e0c:	f001 fb5a 	bl	801a4c4 <uxr_buffer_create_datareader_bin>
 8018e10:	4602      	mov	r2, r0
 8018e12:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018e16:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018e1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018e1e:	f000 fd7d 	bl	801991c <run_xrce_session>
 8018e22:	b310      	cbz	r0, 8018e6a <rmw_create_subscription+0x1c6>
 8018e24:	7a3b      	ldrb	r3, [r7, #8]
 8018e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018e2e:	2b02      	cmp	r3, #2
 8018e30:	920a      	str	r2, [sp, #40]	@ 0x28
 8018e32:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018e36:	f04f 0200 	mov.w	r2, #0
 8018e3a:	bf08      	it	eq
 8018e3c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8018e40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e44:	bf18      	it	ne
 8018e46:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 8018e4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018e4c:	9307      	str	r3, [sp, #28]
 8018e4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8018e50:	9300      	str	r3, [sp, #0]
 8018e52:	9b07      	ldr	r3, [sp, #28]
 8018e54:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8018e58:	6809      	ldr	r1, [r1, #0]
 8018e5a:	f001 fcd3 	bl	801a804 <uxr_buffer_request_data>
 8018e5e:	e000      	b.n	8018e62 <rmw_create_subscription+0x1be>
 8018e60:	2400      	movs	r4, #0
 8018e62:	4620      	mov	r0, r4
 8018e64:	b00d      	add	sp, #52	@ 0x34
 8018e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e6a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8018e6e:	b108      	cbz	r0, 8018e74 <rmw_create_subscription+0x1d0>
 8018e70:	f000 fc48 	bl	8019704 <rmw_uxrce_fini_topic_memory>
 8018e74:	4620      	mov	r0, r4
 8018e76:	2400      	movs	r4, #0
 8018e78:	f000 fc02 	bl	8019680 <rmw_uxrce_fini_subscription_memory>
 8018e7c:	4620      	mov	r0, r4
 8018e7e:	b00d      	add	sp, #52	@ 0x34
 8018e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e84:	240693ac 	.word	0x240693ac
 8018e88:	08022c14 	.word	0x08022c14
 8018e8c:	08020d54 	.word	0x08020d54

08018e90 <rmw_subscription_get_actual_qos>:
 8018e90:	b178      	cbz	r0, 8018eb2 <rmw_subscription_get_actual_qos+0x22>
 8018e92:	b510      	push	{r4, lr}
 8018e94:	fab1 f481 	clz	r4, r1
 8018e98:	0964      	lsrs	r4, r4, #5
 8018e9a:	b141      	cbz	r1, 8018eae <rmw_subscription_get_actual_qos+0x1e>
 8018e9c:	6843      	ldr	r3, [r0, #4]
 8018e9e:	2250      	movs	r2, #80	@ 0x50
 8018ea0:	4608      	mov	r0, r1
 8018ea2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8018ea6:	f006 fee4 	bl	801fc72 <memcpy>
 8018eaa:	4620      	mov	r0, r4
 8018eac:	bd10      	pop	{r4, pc}
 8018eae:	200b      	movs	r0, #11
 8018eb0:	bd10      	pop	{r4, pc}
 8018eb2:	200b      	movs	r0, #11
 8018eb4:	4770      	bx	lr
 8018eb6:	bf00      	nop

08018eb8 <rmw_destroy_subscription>:
 8018eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ebc:	b128      	cbz	r0, 8018eca <rmw_destroy_subscription+0x12>
 8018ebe:	4604      	mov	r4, r0
 8018ec0:	6800      	ldr	r0, [r0, #0]
 8018ec2:	460d      	mov	r5, r1
 8018ec4:	f000 fe3c 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018ec8:	b918      	cbnz	r0, 8018ed2 <rmw_destroy_subscription+0x1a>
 8018eca:	2401      	movs	r4, #1
 8018ecc:	4620      	mov	r0, r4
 8018ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ed2:	6863      	ldr	r3, [r4, #4]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d0f8      	beq.n	8018eca <rmw_destroy_subscription+0x12>
 8018ed8:	fab5 f485 	clz	r4, r5
 8018edc:	0964      	lsrs	r4, r4, #5
 8018ede:	2d00      	cmp	r5, #0
 8018ee0:	d0f3      	beq.n	8018eca <rmw_destroy_subscription+0x12>
 8018ee2:	6828      	ldr	r0, [r5, #0]
 8018ee4:	f000 fe2c 	bl	8019b40 <is_uxrce_rmw_identifier_valid>
 8018ee8:	2800      	cmp	r0, #0
 8018eea:	d0ee      	beq.n	8018eca <rmw_destroy_subscription+0x12>
 8018eec:	686e      	ldr	r6, [r5, #4]
 8018eee:	2e00      	cmp	r6, #0
 8018ef0:	d0eb      	beq.n	8018eca <rmw_destroy_subscription+0x12>
 8018ef2:	6a37      	ldr	r7, [r6, #32]
 8018ef4:	6972      	ldr	r2, [r6, #20]
 8018ef6:	6938      	ldr	r0, [r7, #16]
 8018ef8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018efc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f00:	6819      	ldr	r1, [r3, #0]
 8018f02:	f001 fcb9 	bl	801a878 <uxr_buffer_cancel_data>
 8018f06:	4602      	mov	r2, r0
 8018f08:	6938      	ldr	r0, [r7, #16]
 8018f0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018f0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018f12:	f000 fd03 	bl	801991c <run_xrce_session>
 8018f16:	69f0      	ldr	r0, [r6, #28]
 8018f18:	f005 fab8 	bl	801e48c <destroy_topic>
 8018f1c:	6a33      	ldr	r3, [r6, #32]
 8018f1e:	6972      	ldr	r2, [r6, #20]
 8018f20:	6918      	ldr	r0, [r3, #16]
 8018f22:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018f26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f2a:	6819      	ldr	r1, [r3, #0]
 8018f2c:	f001 f940 	bl	801a1b0 <uxr_buffer_delete_entity>
 8018f30:	6a33      	ldr	r3, [r6, #32]
 8018f32:	4680      	mov	r8, r0
 8018f34:	6932      	ldr	r2, [r6, #16]
 8018f36:	6918      	ldr	r0, [r3, #16]
 8018f38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018f3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f40:	6819      	ldr	r1, [r3, #0]
 8018f42:	f001 f935 	bl	801a1b0 <uxr_buffer_delete_entity>
 8018f46:	4606      	mov	r6, r0
 8018f48:	6938      	ldr	r0, [r7, #16]
 8018f4a:	4642      	mov	r2, r8
 8018f4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018f50:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018f54:	f000 fce2 	bl	801991c <run_xrce_session>
 8018f58:	693f      	ldr	r7, [r7, #16]
 8018f5a:	4632      	mov	r2, r6
 8018f5c:	4606      	mov	r6, r0
 8018f5e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8018f62:	4638      	mov	r0, r7
 8018f64:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8018f68:	f000 fcd8 	bl	801991c <run_xrce_session>
 8018f6c:	b126      	cbz	r6, 8018f78 <rmw_destroy_subscription+0xc0>
 8018f6e:	b118      	cbz	r0, 8018f78 <rmw_destroy_subscription+0xc0>
 8018f70:	4628      	mov	r0, r5
 8018f72:	f000 fb85 	bl	8019680 <rmw_uxrce_fini_subscription_memory>
 8018f76:	e7a9      	b.n	8018ecc <rmw_destroy_subscription+0x14>
 8018f78:	2402      	movs	r4, #2
 8018f7a:	e7f9      	b.n	8018f70 <rmw_destroy_subscription+0xb8>

08018f7c <rmw_take_with_info>:
 8018f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f7e:	4604      	mov	r4, r0
 8018f80:	6800      	ldr	r0, [r0, #0]
 8018f82:	b089      	sub	sp, #36	@ 0x24
 8018f84:	460f      	mov	r7, r1
 8018f86:	4615      	mov	r5, r2
 8018f88:	b128      	cbz	r0, 8018f96 <rmw_take_with_info+0x1a>
 8018f8a:	4b24      	ldr	r3, [pc, #144]	@ (801901c <rmw_take_with_info+0xa0>)
 8018f8c:	6819      	ldr	r1, [r3, #0]
 8018f8e:	f7e7 f9a7 	bl	80002e0 <strcmp>
 8018f92:	2800      	cmp	r0, #0
 8018f94:	d13e      	bne.n	8019014 <rmw_take_with_info+0x98>
 8018f96:	b305      	cbz	r5, 8018fda <rmw_take_with_info+0x5e>
 8018f98:	2300      	movs	r3, #0
 8018f9a:	6864      	ldr	r4, [r4, #4]
 8018f9c:	702b      	strb	r3, [r5, #0]
 8018f9e:	f000 fc3f 	bl	8019820 <rmw_uxrce_clean_expired_static_input_buffer>
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	f000 fc14 	bl	80197d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018fa8:	4606      	mov	r6, r0
 8018faa:	b1f0      	cbz	r0, 8018fea <rmw_take_with_info+0x6e>
 8018fac:	6881      	ldr	r1, [r0, #8]
 8018fae:	4668      	mov	r0, sp
 8018fb0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018fb4:	3110      	adds	r1, #16
 8018fb6:	f7f9 fb95 	bl	80126e4 <ucdr_init_buffer>
 8018fba:	69a3      	ldr	r3, [r4, #24]
 8018fbc:	4639      	mov	r1, r7
 8018fbe:	4668      	mov	r0, sp
 8018fc0:	68db      	ldr	r3, [r3, #12]
 8018fc2:	4798      	blx	r3
 8018fc4:	4604      	mov	r4, r0
 8018fc6:	4631      	mov	r1, r6
 8018fc8:	4815      	ldr	r0, [pc, #84]	@ (8019020 <rmw_take_with_info+0xa4>)
 8018fca:	f005 f9d1 	bl	801e370 <put_memory>
 8018fce:	702c      	strb	r4, [r5, #0]
 8018fd0:	f084 0001 	eor.w	r0, r4, #1
 8018fd4:	b2c0      	uxtb	r0, r0
 8018fd6:	b009      	add	sp, #36	@ 0x24
 8018fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fda:	6864      	ldr	r4, [r4, #4]
 8018fdc:	f000 fc20 	bl	8019820 <rmw_uxrce_clean_expired_static_input_buffer>
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	f000 fbf5 	bl	80197d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018fe6:	4605      	mov	r5, r0
 8018fe8:	b910      	cbnz	r0, 8018ff0 <rmw_take_with_info+0x74>
 8018fea:	2001      	movs	r0, #1
 8018fec:	b009      	add	sp, #36	@ 0x24
 8018fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ff0:	68a9      	ldr	r1, [r5, #8]
 8018ff2:	4668      	mov	r0, sp
 8018ff4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018ff8:	3110      	adds	r1, #16
 8018ffa:	f7f9 fb73 	bl	80126e4 <ucdr_init_buffer>
 8018ffe:	69a3      	ldr	r3, [r4, #24]
 8019000:	4639      	mov	r1, r7
 8019002:	4668      	mov	r0, sp
 8019004:	68db      	ldr	r3, [r3, #12]
 8019006:	4798      	blx	r3
 8019008:	4629      	mov	r1, r5
 801900a:	4604      	mov	r4, r0
 801900c:	4804      	ldr	r0, [pc, #16]	@ (8019020 <rmw_take_with_info+0xa4>)
 801900e:	f005 f9af 	bl	801e370 <put_memory>
 8019012:	e7dd      	b.n	8018fd0 <rmw_take_with_info+0x54>
 8019014:	200c      	movs	r0, #12
 8019016:	b009      	add	sp, #36	@ 0x24
 8019018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801901a:	bf00      	nop
 801901c:	08022f40 	.word	0x08022f40
 8019020:	2406939c 	.word	0x2406939c

08019024 <rmw_uxrce_transport_init>:
 8019024:	b508      	push	{r3, lr}
 8019026:	b108      	cbz	r0, 801902c <rmw_uxrce_transport_init+0x8>
 8019028:	f100 0210 	add.w	r2, r0, #16
 801902c:	b139      	cbz	r1, 801903e <rmw_uxrce_transport_init+0x1a>
 801902e:	6949      	ldr	r1, [r1, #20]
 8019030:	4610      	mov	r0, r2
 8019032:	f001 fb7f 	bl	801a734 <uxr_init_custom_transport>
 8019036:	f080 0001 	eor.w	r0, r0, #1
 801903a:	b2c0      	uxtb	r0, r0
 801903c:	bd08      	pop	{r3, pc}
 801903e:	4b04      	ldr	r3, [pc, #16]	@ (8019050 <rmw_uxrce_transport_init+0x2c>)
 8019040:	4610      	mov	r0, r2
 8019042:	6859      	ldr	r1, [r3, #4]
 8019044:	f001 fb76 	bl	801a734 <uxr_init_custom_transport>
 8019048:	f080 0001 	eor.w	r0, r0, #1
 801904c:	b2c0      	uxtb	r0, r0
 801904e:	bd08      	pop	{r3, pc}
 8019050:	2406478c 	.word	0x2406478c

08019054 <rmw_wait>:
 8019054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019058:	4698      	mov	r8, r3
 801905a:	ea40 0301 	orr.w	r3, r0, r1
 801905e:	b089      	sub	sp, #36	@ 0x24
 8019060:	ea48 0303 	orr.w	r3, r8, r3
 8019064:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019066:	4313      	orrs	r3, r2
 8019068:	f000 8106 	beq.w	8019278 <rmw_wait+0x224>
 801906c:	4605      	mov	r5, r0
 801906e:	460e      	mov	r6, r1
 8019070:	4691      	mov	r9, r2
 8019072:	b16c      	cbz	r4, 8019090 <rmw_wait+0x3c>
 8019074:	4ba6      	ldr	r3, [pc, #664]	@ (8019310 <rmw_wait+0x2bc>)
 8019076:	af04      	add	r7, sp, #16
 8019078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801907a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801907e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019082:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019086:	f004 fff3 	bl	801e070 <rmw_time_equal>
 801908a:	2800      	cmp	r0, #0
 801908c:	f000 810b 	beq.w	80192a6 <rmw_wait+0x252>
 8019090:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019094:	f000 fbc4 	bl	8019820 <rmw_uxrce_clean_expired_static_input_buffer>
 8019098:	4b9e      	ldr	r3, [pc, #632]	@ (8019314 <rmw_wait+0x2c0>)
 801909a:	681c      	ldr	r4, [r3, #0]
 801909c:	b14c      	cbz	r4, 80190b2 <rmw_wait+0x5e>
 801909e:	4623      	mov	r3, r4
 80190a0:	2100      	movs	r1, #0
 80190a2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80190a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190aa:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d1f7      	bne.n	80190a2 <rmw_wait+0x4e>
 80190b2:	f1b9 0f00 	cmp.w	r9, #0
 80190b6:	d011      	beq.n	80190dc <rmw_wait+0x88>
 80190b8:	f8d9 1000 	ldr.w	r1, [r9]
 80190bc:	b171      	cbz	r1, 80190dc <rmw_wait+0x88>
 80190be:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80190c2:	2300      	movs	r3, #0
 80190c4:	2001      	movs	r0, #1
 80190c6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80190ca:	3301      	adds	r3, #1
 80190cc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80190ce:	4299      	cmp	r1, r3
 80190d0:	6912      	ldr	r2, [r2, #16]
 80190d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80190d6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80190da:	d1f4      	bne.n	80190c6 <rmw_wait+0x72>
 80190dc:	f1b8 0f00 	cmp.w	r8, #0
 80190e0:	d011      	beq.n	8019106 <rmw_wait+0xb2>
 80190e2:	f8d8 1000 	ldr.w	r1, [r8]
 80190e6:	b171      	cbz	r1, 8019106 <rmw_wait+0xb2>
 80190e8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80190ec:	2300      	movs	r3, #0
 80190ee:	2001      	movs	r0, #1
 80190f0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80190f4:	3301      	adds	r3, #1
 80190f6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80190f8:	4299      	cmp	r1, r3
 80190fa:	6912      	ldr	r2, [r2, #16]
 80190fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019100:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019104:	d1f4      	bne.n	80190f0 <rmw_wait+0x9c>
 8019106:	b185      	cbz	r5, 801912a <rmw_wait+0xd6>
 8019108:	6829      	ldr	r1, [r5, #0]
 801910a:	b171      	cbz	r1, 801912a <rmw_wait+0xd6>
 801910c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019110:	2300      	movs	r3, #0
 8019112:	2001      	movs	r0, #1
 8019114:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019118:	3301      	adds	r3, #1
 801911a:	6a12      	ldr	r2, [r2, #32]
 801911c:	4299      	cmp	r1, r3
 801911e:	6912      	ldr	r2, [r2, #16]
 8019120:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019124:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019128:	d1f4      	bne.n	8019114 <rmw_wait+0xc0>
 801912a:	b344      	cbz	r4, 801917e <rmw_wait+0x12a>
 801912c:	4622      	mov	r2, r4
 801912e:	2300      	movs	r3, #0
 8019130:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019134:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019138:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801913c:	440b      	add	r3, r1
 801913e:	b2db      	uxtb	r3, r3
 8019140:	2a00      	cmp	r2, #0
 8019142:	d1f5      	bne.n	8019130 <rmw_wait+0xdc>
 8019144:	2b00      	cmp	r3, #0
 8019146:	d05f      	beq.n	8019208 <rmw_wait+0x1b4>
 8019148:	1c7a      	adds	r2, r7, #1
 801914a:	d00d      	beq.n	8019168 <rmw_wait+0x114>
 801914c:	ee07 7a90 	vmov	s15, r7
 8019150:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019154:	ee07 3a90 	vmov	s15, r3
 8019158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801915c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019160:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019164:	ee17 7a90 	vmov	r7, s15
 8019168:	68a0      	ldr	r0, [r4, #8]
 801916a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801916e:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019172:	2b00      	cmp	r3, #0
 8019174:	f040 808d 	bne.w	8019292 <rmw_wait+0x23e>
 8019178:	6864      	ldr	r4, [r4, #4]
 801917a:	2c00      	cmp	r4, #0
 801917c:	d1f4      	bne.n	8019168 <rmw_wait+0x114>
 801917e:	f1b9 0f00 	cmp.w	r9, #0
 8019182:	f000 80a1 	beq.w	80192c8 <rmw_wait+0x274>
 8019186:	f8d9 7000 	ldr.w	r7, [r9]
 801918a:	2f00      	cmp	r7, #0
 801918c:	f000 80a4 	beq.w	80192d8 <rmw_wait+0x284>
 8019190:	2400      	movs	r4, #0
 8019192:	4627      	mov	r7, r4
 8019194:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019198:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801919c:	f000 fb18 	bl	80197d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80191a0:	2800      	cmp	r0, #0
 80191a2:	d03b      	beq.n	801921c <rmw_wait+0x1c8>
 80191a4:	3401      	adds	r4, #1
 80191a6:	f8d9 3000 	ldr.w	r3, [r9]
 80191aa:	2701      	movs	r7, #1
 80191ac:	42a3      	cmp	r3, r4
 80191ae:	d8f1      	bhi.n	8019194 <rmw_wait+0x140>
 80191b0:	2701      	movs	r7, #1
 80191b2:	f1b8 0f00 	cmp.w	r8, #0
 80191b6:	d010      	beq.n	80191da <rmw_wait+0x186>
 80191b8:	f8d8 3000 	ldr.w	r3, [r8]
 80191bc:	b16b      	cbz	r3, 80191da <rmw_wait+0x186>
 80191be:	2400      	movs	r4, #0
 80191c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80191c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80191c8:	f000 fb02 	bl	80197d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80191cc:	b370      	cbz	r0, 801922c <rmw_wait+0x1d8>
 80191ce:	3401      	adds	r4, #1
 80191d0:	f8d8 3000 	ldr.w	r3, [r8]
 80191d4:	2701      	movs	r7, #1
 80191d6:	42a3      	cmp	r3, r4
 80191d8:	d8f2      	bhi.n	80191c0 <rmw_wait+0x16c>
 80191da:	2d00      	cmp	r5, #0
 80191dc:	d035      	beq.n	801924a <rmw_wait+0x1f6>
 80191de:	682b      	ldr	r3, [r5, #0]
 80191e0:	b39b      	cbz	r3, 801924a <rmw_wait+0x1f6>
 80191e2:	2400      	movs	r4, #0
 80191e4:	686b      	ldr	r3, [r5, #4]
 80191e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80191ea:	f000 faf1 	bl	80197d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80191ee:	b328      	cbz	r0, 801923c <rmw_wait+0x1e8>
 80191f0:	3401      	adds	r4, #1
 80191f2:	682b      	ldr	r3, [r5, #0]
 80191f4:	2701      	movs	r7, #1
 80191f6:	42a3      	cmp	r3, r4
 80191f8:	d8f4      	bhi.n	80191e4 <rmw_wait+0x190>
 80191fa:	2e00      	cmp	r6, #0
 80191fc:	d03c      	beq.n	8019278 <rmw_wait+0x224>
 80191fe:	6834      	ldr	r4, [r6, #0]
 8019200:	2c00      	cmp	r4, #0
 8019202:	d039      	beq.n	8019278 <rmw_wait+0x224>
 8019204:	2701      	movs	r7, #1
 8019206:	e023      	b.n	8019250 <rmw_wait+0x1fc>
 8019208:	68a0      	ldr	r0, [r4, #8]
 801920a:	2100      	movs	r1, #0
 801920c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019210:	f002 f8c8 	bl	801b3a4 <uxr_run_session_timeout>
 8019214:	6864      	ldr	r4, [r4, #4]
 8019216:	2c00      	cmp	r4, #0
 8019218:	d1f6      	bne.n	8019208 <rmw_wait+0x1b4>
 801921a:	e7b0      	b.n	801917e <rmw_wait+0x12a>
 801921c:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019220:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019224:	3401      	adds	r4, #1
 8019226:	42a3      	cmp	r3, r4
 8019228:	d8b4      	bhi.n	8019194 <rmw_wait+0x140>
 801922a:	e7c2      	b.n	80191b2 <rmw_wait+0x15e>
 801922c:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019230:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019234:	3401      	adds	r4, #1
 8019236:	429c      	cmp	r4, r3
 8019238:	d3c2      	bcc.n	80191c0 <rmw_wait+0x16c>
 801923a:	e7ce      	b.n	80191da <rmw_wait+0x186>
 801923c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019240:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019244:	3401      	adds	r4, #1
 8019246:	42a3      	cmp	r3, r4
 8019248:	d8cc      	bhi.n	80191e4 <rmw_wait+0x190>
 801924a:	b1a6      	cbz	r6, 8019276 <rmw_wait+0x222>
 801924c:	6834      	ldr	r4, [r6, #0]
 801924e:	b194      	cbz	r4, 8019276 <rmw_wait+0x222>
 8019250:	2300      	movs	r3, #0
 8019252:	461d      	mov	r5, r3
 8019254:	e004      	b.n	8019260 <rmw_wait+0x20c>
 8019256:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801925a:	3301      	adds	r3, #1
 801925c:	42a3      	cmp	r3, r4
 801925e:	d00a      	beq.n	8019276 <rmw_wait+0x222>
 8019260:	6870      	ldr	r0, [r6, #4]
 8019262:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019266:	7c0a      	ldrb	r2, [r1, #16]
 8019268:	2a00      	cmp	r2, #0
 801926a:	d0f4      	beq.n	8019256 <rmw_wait+0x202>
 801926c:	3301      	adds	r3, #1
 801926e:	4617      	mov	r7, r2
 8019270:	740d      	strb	r5, [r1, #16]
 8019272:	42a3      	cmp	r3, r4
 8019274:	d1f4      	bne.n	8019260 <rmw_wait+0x20c>
 8019276:	b147      	cbz	r7, 801928a <rmw_wait+0x236>
 8019278:	2000      	movs	r0, #0
 801927a:	b009      	add	sp, #36	@ 0x24
 801927c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019280:	b11e      	cbz	r6, 801928a <rmw_wait+0x236>
 8019282:	6834      	ldr	r4, [r6, #0]
 8019284:	462f      	mov	r7, r5
 8019286:	2c00      	cmp	r4, #0
 8019288:	d1e2      	bne.n	8019250 <rmw_wait+0x1fc>
 801928a:	2002      	movs	r0, #2
 801928c:	b009      	add	sp, #36	@ 0x24
 801928e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019292:	4639      	mov	r1, r7
 8019294:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019298:	f002 f89e 	bl	801b3d8 <uxr_run_session_until_data>
 801929c:	6864      	ldr	r4, [r4, #4]
 801929e:	2c00      	cmp	r4, #0
 80192a0:	f47f af62 	bne.w	8019168 <rmw_wait+0x114>
 80192a4:	e76b      	b.n	801917e <rmw_wait+0x12a>
 80192a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80192aa:	f004 ff37 	bl	801e11c <rmw_time_total_nsec>
 80192ae:	2300      	movs	r3, #0
 80192b0:	4a19      	ldr	r2, [pc, #100]	@ (8019318 <rmw_wait+0x2c4>)
 80192b2:	f7e7 f8cd 	bl	8000450 <__aeabi_uldivmod>
 80192b6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80192ba:	4607      	mov	r7, r0
 80192bc:	f171 0300 	sbcs.w	r3, r1, #0
 80192c0:	bfa8      	it	ge
 80192c2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80192c6:	e6e5      	b.n	8019094 <rmw_wait+0x40>
 80192c8:	f1b8 0f00 	cmp.w	r8, #0
 80192cc:	d00f      	beq.n	80192ee <rmw_wait+0x29a>
 80192ce:	f8d8 3000 	ldr.w	r3, [r8]
 80192d2:	b193      	cbz	r3, 80192fa <rmw_wait+0x2a6>
 80192d4:	464f      	mov	r7, r9
 80192d6:	e772      	b.n	80191be <rmw_wait+0x16a>
 80192d8:	f1b8 0f00 	cmp.w	r8, #0
 80192dc:	d007      	beq.n	80192ee <rmw_wait+0x29a>
 80192de:	f8d8 3000 	ldr.w	r3, [r8]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	f47f af6b 	bne.w	80191be <rmw_wait+0x16a>
 80192e8:	b155      	cbz	r5, 8019300 <rmw_wait+0x2ac>
 80192ea:	461f      	mov	r7, r3
 80192ec:	e777      	b.n	80191de <rmw_wait+0x18a>
 80192ee:	2d00      	cmp	r5, #0
 80192f0:	d0c6      	beq.n	8019280 <rmw_wait+0x22c>
 80192f2:	682b      	ldr	r3, [r5, #0]
 80192f4:	b143      	cbz	r3, 8019308 <rmw_wait+0x2b4>
 80192f6:	4647      	mov	r7, r8
 80192f8:	e773      	b.n	80191e2 <rmw_wait+0x18e>
 80192fa:	b10d      	cbz	r5, 8019300 <rmw_wait+0x2ac>
 80192fc:	464f      	mov	r7, r9
 80192fe:	e76e      	b.n	80191de <rmw_wait+0x18a>
 8019300:	462f      	mov	r7, r5
 8019302:	2e00      	cmp	r6, #0
 8019304:	d1a2      	bne.n	801924c <rmw_wait+0x1f8>
 8019306:	e7c0      	b.n	801928a <rmw_wait+0x236>
 8019308:	4647      	mov	r7, r8
 801930a:	2e00      	cmp	r6, #0
 801930c:	d19e      	bne.n	801924c <rmw_wait+0x1f8>
 801930e:	e7bc      	b.n	801928a <rmw_wait+0x236>
 8019310:	08020b80 	.word	0x08020b80
 8019314:	2406938c 	.word	0x2406938c
 8019318:	000f4240 	.word	0x000f4240

0801931c <rmw_create_wait_set>:
 801931c:	b508      	push	{r3, lr}
 801931e:	4803      	ldr	r0, [pc, #12]	@ (801932c <rmw_create_wait_set+0x10>)
 8019320:	f005 f816 	bl	801e350 <get_memory>
 8019324:	b108      	cbz	r0, 801932a <rmw_create_wait_set+0xe>
 8019326:	6880      	ldr	r0, [r0, #8]
 8019328:	3010      	adds	r0, #16
 801932a:	bd08      	pop	{r3, pc}
 801932c:	240693cc 	.word	0x240693cc

08019330 <rmw_destroy_wait_set>:
 8019330:	b508      	push	{r3, lr}
 8019332:	4b08      	ldr	r3, [pc, #32]	@ (8019354 <rmw_destroy_wait_set+0x24>)
 8019334:	6819      	ldr	r1, [r3, #0]
 8019336:	b911      	cbnz	r1, 801933e <rmw_destroy_wait_set+0xe>
 8019338:	e00a      	b.n	8019350 <rmw_destroy_wait_set+0x20>
 801933a:	6849      	ldr	r1, [r1, #4]
 801933c:	b141      	cbz	r1, 8019350 <rmw_destroy_wait_set+0x20>
 801933e:	688b      	ldr	r3, [r1, #8]
 8019340:	3310      	adds	r3, #16
 8019342:	4298      	cmp	r0, r3
 8019344:	d1f9      	bne.n	801933a <rmw_destroy_wait_set+0xa>
 8019346:	4803      	ldr	r0, [pc, #12]	@ (8019354 <rmw_destroy_wait_set+0x24>)
 8019348:	f005 f812 	bl	801e370 <put_memory>
 801934c:	2000      	movs	r0, #0
 801934e:	bd08      	pop	{r3, pc}
 8019350:	2001      	movs	r0, #1
 8019352:	bd08      	pop	{r3, pc}
 8019354:	240693cc 	.word	0x240693cc

08019358 <rmw_uxrce_init_service_memory>:
 8019358:	b1e2      	cbz	r2, 8019394 <rmw_uxrce_init_service_memory+0x3c>
 801935a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801935e:	7b05      	ldrb	r5, [r0, #12]
 8019360:	4606      	mov	r6, r0
 8019362:	b9ad      	cbnz	r5, 8019390 <rmw_uxrce_init_service_memory+0x38>
 8019364:	23c8      	movs	r3, #200	@ 0xc8
 8019366:	4617      	mov	r7, r2
 8019368:	460c      	mov	r4, r1
 801936a:	46a8      	mov	r8, r5
 801936c:	6083      	str	r3, [r0, #8]
 801936e:	f240 1301 	movw	r3, #257	@ 0x101
 8019372:	e9c0 5500 	strd	r5, r5, [r0]
 8019376:	8183      	strh	r3, [r0, #12]
 8019378:	3501      	adds	r5, #1
 801937a:	4621      	mov	r1, r4
 801937c:	4630      	mov	r0, r6
 801937e:	f004 fff7 	bl	801e370 <put_memory>
 8019382:	42af      	cmp	r7, r5
 8019384:	60a4      	str	r4, [r4, #8]
 8019386:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 801938a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801938e:	d1f3      	bne.n	8019378 <rmw_uxrce_init_service_memory+0x20>
 8019390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019394:	4770      	bx	lr
 8019396:	bf00      	nop

08019398 <rmw_uxrce_init_client_memory>:
 8019398:	b1e2      	cbz	r2, 80193d4 <rmw_uxrce_init_client_memory+0x3c>
 801939a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801939e:	7b05      	ldrb	r5, [r0, #12]
 80193a0:	4606      	mov	r6, r0
 80193a2:	b9ad      	cbnz	r5, 80193d0 <rmw_uxrce_init_client_memory+0x38>
 80193a4:	23c8      	movs	r3, #200	@ 0xc8
 80193a6:	4617      	mov	r7, r2
 80193a8:	460c      	mov	r4, r1
 80193aa:	46a8      	mov	r8, r5
 80193ac:	6083      	str	r3, [r0, #8]
 80193ae:	f240 1301 	movw	r3, #257	@ 0x101
 80193b2:	e9c0 5500 	strd	r5, r5, [r0]
 80193b6:	8183      	strh	r3, [r0, #12]
 80193b8:	3501      	adds	r5, #1
 80193ba:	4621      	mov	r1, r4
 80193bc:	4630      	mov	r0, r6
 80193be:	f004 ffd7 	bl	801e370 <put_memory>
 80193c2:	42af      	cmp	r7, r5
 80193c4:	60a4      	str	r4, [r4, #8]
 80193c6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80193ca:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80193ce:	d1f3      	bne.n	80193b8 <rmw_uxrce_init_client_memory+0x20>
 80193d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d4:	4770      	bx	lr
 80193d6:	bf00      	nop

080193d8 <rmw_uxrce_init_publisher_memory>:
 80193d8:	b1e2      	cbz	r2, 8019414 <rmw_uxrce_init_publisher_memory+0x3c>
 80193da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193de:	7b05      	ldrb	r5, [r0, #12]
 80193e0:	4606      	mov	r6, r0
 80193e2:	b9ad      	cbnz	r5, 8019410 <rmw_uxrce_init_publisher_memory+0x38>
 80193e4:	23d8      	movs	r3, #216	@ 0xd8
 80193e6:	4617      	mov	r7, r2
 80193e8:	460c      	mov	r4, r1
 80193ea:	46a8      	mov	r8, r5
 80193ec:	6083      	str	r3, [r0, #8]
 80193ee:	f240 1301 	movw	r3, #257	@ 0x101
 80193f2:	e9c0 5500 	strd	r5, r5, [r0]
 80193f6:	8183      	strh	r3, [r0, #12]
 80193f8:	3501      	adds	r5, #1
 80193fa:	4621      	mov	r1, r4
 80193fc:	4630      	mov	r0, r6
 80193fe:	f004 ffb7 	bl	801e370 <put_memory>
 8019402:	42af      	cmp	r7, r5
 8019404:	60a4      	str	r4, [r4, #8]
 8019406:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801940a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801940e:	d1f3      	bne.n	80193f8 <rmw_uxrce_init_publisher_memory+0x20>
 8019410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019414:	4770      	bx	lr
 8019416:	bf00      	nop

08019418 <rmw_uxrce_init_subscription_memory>:
 8019418:	b1e2      	cbz	r2, 8019454 <rmw_uxrce_init_subscription_memory+0x3c>
 801941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801941e:	7b05      	ldrb	r5, [r0, #12]
 8019420:	4606      	mov	r6, r0
 8019422:	b9ad      	cbnz	r5, 8019450 <rmw_uxrce_init_subscription_memory+0x38>
 8019424:	23d8      	movs	r3, #216	@ 0xd8
 8019426:	4617      	mov	r7, r2
 8019428:	460c      	mov	r4, r1
 801942a:	46a8      	mov	r8, r5
 801942c:	6083      	str	r3, [r0, #8]
 801942e:	f240 1301 	movw	r3, #257	@ 0x101
 8019432:	e9c0 5500 	strd	r5, r5, [r0]
 8019436:	8183      	strh	r3, [r0, #12]
 8019438:	3501      	adds	r5, #1
 801943a:	4621      	mov	r1, r4
 801943c:	4630      	mov	r0, r6
 801943e:	f004 ff97 	bl	801e370 <put_memory>
 8019442:	42af      	cmp	r7, r5
 8019444:	60a4      	str	r4, [r4, #8]
 8019446:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801944a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801944e:	d1f3      	bne.n	8019438 <rmw_uxrce_init_subscription_memory+0x20>
 8019450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019454:	4770      	bx	lr
 8019456:	bf00      	nop

08019458 <rmw_uxrce_init_node_memory>:
 8019458:	b1e2      	cbz	r2, 8019494 <rmw_uxrce_init_node_memory+0x3c>
 801945a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801945e:	7b05      	ldrb	r5, [r0, #12]
 8019460:	4606      	mov	r6, r0
 8019462:	b9ad      	cbnz	r5, 8019490 <rmw_uxrce_init_node_memory+0x38>
 8019464:	23a4      	movs	r3, #164	@ 0xa4
 8019466:	4617      	mov	r7, r2
 8019468:	460c      	mov	r4, r1
 801946a:	46a8      	mov	r8, r5
 801946c:	6083      	str	r3, [r0, #8]
 801946e:	f240 1301 	movw	r3, #257	@ 0x101
 8019472:	e9c0 5500 	strd	r5, r5, [r0]
 8019476:	8183      	strh	r3, [r0, #12]
 8019478:	3501      	adds	r5, #1
 801947a:	4621      	mov	r1, r4
 801947c:	4630      	mov	r0, r6
 801947e:	f004 ff77 	bl	801e370 <put_memory>
 8019482:	42af      	cmp	r7, r5
 8019484:	60a4      	str	r4, [r4, #8]
 8019486:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801948a:	f804 8c98 	strb.w	r8, [r4, #-152]
 801948e:	d1f3      	bne.n	8019478 <rmw_uxrce_init_node_memory+0x20>
 8019490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019494:	4770      	bx	lr
 8019496:	bf00      	nop

08019498 <rmw_uxrce_init_session_memory>:
 8019498:	b1ea      	cbz	r2, 80194d6 <rmw_uxrce_init_session_memory+0x3e>
 801949a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801949e:	7b05      	ldrb	r5, [r0, #12]
 80194a0:	4606      	mov	r6, r0
 80194a2:	b9b5      	cbnz	r5, 80194d2 <rmw_uxrce_init_session_memory+0x3a>
 80194a4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80194a8:	f240 1301 	movw	r3, #257	@ 0x101
 80194ac:	4617      	mov	r7, r2
 80194ae:	460c      	mov	r4, r1
 80194b0:	46a9      	mov	r9, r5
 80194b2:	f8c0 8008 	str.w	r8, [r0, #8]
 80194b6:	8183      	strh	r3, [r0, #12]
 80194b8:	e9c0 5500 	strd	r5, r5, [r0]
 80194bc:	3501      	adds	r5, #1
 80194be:	4621      	mov	r1, r4
 80194c0:	4630      	mov	r0, r6
 80194c2:	f004 ff55 	bl	801e370 <put_memory>
 80194c6:	42af      	cmp	r7, r5
 80194c8:	60a4      	str	r4, [r4, #8]
 80194ca:	f884 900c 	strb.w	r9, [r4, #12]
 80194ce:	4444      	add	r4, r8
 80194d0:	d1f4      	bne.n	80194bc <rmw_uxrce_init_session_memory+0x24>
 80194d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194d6:	4770      	bx	lr

080194d8 <rmw_uxrce_init_topic_memory>:
 80194d8:	b1e2      	cbz	r2, 8019514 <rmw_uxrce_init_topic_memory+0x3c>
 80194da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194de:	7b05      	ldrb	r5, [r0, #12]
 80194e0:	4606      	mov	r6, r0
 80194e2:	b9ad      	cbnz	r5, 8019510 <rmw_uxrce_init_topic_memory+0x38>
 80194e4:	231c      	movs	r3, #28
 80194e6:	4617      	mov	r7, r2
 80194e8:	460c      	mov	r4, r1
 80194ea:	46a8      	mov	r8, r5
 80194ec:	6083      	str	r3, [r0, #8]
 80194ee:	f240 1301 	movw	r3, #257	@ 0x101
 80194f2:	e9c0 5500 	strd	r5, r5, [r0]
 80194f6:	8183      	strh	r3, [r0, #12]
 80194f8:	3501      	adds	r5, #1
 80194fa:	4621      	mov	r1, r4
 80194fc:	4630      	mov	r0, r6
 80194fe:	f004 ff37 	bl	801e370 <put_memory>
 8019502:	42af      	cmp	r7, r5
 8019504:	60a4      	str	r4, [r4, #8]
 8019506:	f104 041c 	add.w	r4, r4, #28
 801950a:	f804 8c10 	strb.w	r8, [r4, #-16]
 801950e:	d1f3      	bne.n	80194f8 <rmw_uxrce_init_topic_memory+0x20>
 8019510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019514:	4770      	bx	lr
 8019516:	bf00      	nop

08019518 <rmw_uxrce_init_static_input_buffer_memory>:
 8019518:	b1ea      	cbz	r2, 8019556 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801951a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801951e:	7b05      	ldrb	r5, [r0, #12]
 8019520:	4606      	mov	r6, r0
 8019522:	b9b5      	cbnz	r5, 8019552 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8019524:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8019528:	4617      	mov	r7, r2
 801952a:	460c      	mov	r4, r1
 801952c:	46a8      	mov	r8, r5
 801952e:	6083      	str	r3, [r0, #8]
 8019530:	f240 1301 	movw	r3, #257	@ 0x101
 8019534:	e9c0 5500 	strd	r5, r5, [r0]
 8019538:	8183      	strh	r3, [r0, #12]
 801953a:	3501      	adds	r5, #1
 801953c:	4621      	mov	r1, r4
 801953e:	4630      	mov	r0, r6
 8019540:	f004 ff16 	bl	801e370 <put_memory>
 8019544:	42af      	cmp	r7, r5
 8019546:	60a4      	str	r4, [r4, #8]
 8019548:	f884 800c 	strb.w	r8, [r4, #12]
 801954c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8019550:	d1f3      	bne.n	801953a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8019552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019556:	4770      	bx	lr

08019558 <rmw_uxrce_init_init_options_impl_memory>:
 8019558:	b1e2      	cbz	r2, 8019594 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801955a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801955e:	7b05      	ldrb	r5, [r0, #12]
 8019560:	4606      	mov	r6, r0
 8019562:	b9ad      	cbnz	r5, 8019590 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8019564:	232c      	movs	r3, #44	@ 0x2c
 8019566:	4617      	mov	r7, r2
 8019568:	460c      	mov	r4, r1
 801956a:	46a8      	mov	r8, r5
 801956c:	6083      	str	r3, [r0, #8]
 801956e:	f240 1301 	movw	r3, #257	@ 0x101
 8019572:	e9c0 5500 	strd	r5, r5, [r0]
 8019576:	8183      	strh	r3, [r0, #12]
 8019578:	3501      	adds	r5, #1
 801957a:	4621      	mov	r1, r4
 801957c:	4630      	mov	r0, r6
 801957e:	f004 fef7 	bl	801e370 <put_memory>
 8019582:	42af      	cmp	r7, r5
 8019584:	60a4      	str	r4, [r4, #8]
 8019586:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801958a:	f804 8c20 	strb.w	r8, [r4, #-32]
 801958e:	d1f3      	bne.n	8019578 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8019590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019594:	4770      	bx	lr
 8019596:	bf00      	nop

08019598 <rmw_uxrce_init_wait_set_memory>:
 8019598:	b1e2      	cbz	r2, 80195d4 <rmw_uxrce_init_wait_set_memory+0x3c>
 801959a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801959e:	7b05      	ldrb	r5, [r0, #12]
 80195a0:	4606      	mov	r6, r0
 80195a2:	b9ad      	cbnz	r5, 80195d0 <rmw_uxrce_init_wait_set_memory+0x38>
 80195a4:	231c      	movs	r3, #28
 80195a6:	4617      	mov	r7, r2
 80195a8:	460c      	mov	r4, r1
 80195aa:	46a8      	mov	r8, r5
 80195ac:	6083      	str	r3, [r0, #8]
 80195ae:	f240 1301 	movw	r3, #257	@ 0x101
 80195b2:	e9c0 5500 	strd	r5, r5, [r0]
 80195b6:	8183      	strh	r3, [r0, #12]
 80195b8:	3501      	adds	r5, #1
 80195ba:	4621      	mov	r1, r4
 80195bc:	4630      	mov	r0, r6
 80195be:	f004 fed7 	bl	801e370 <put_memory>
 80195c2:	42af      	cmp	r7, r5
 80195c4:	60a4      	str	r4, [r4, #8]
 80195c6:	f104 041c 	add.w	r4, r4, #28
 80195ca:	f804 8c10 	strb.w	r8, [r4, #-16]
 80195ce:	d1f3      	bne.n	80195b8 <rmw_uxrce_init_wait_set_memory+0x20>
 80195d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d4:	4770      	bx	lr
 80195d6:	bf00      	nop

080195d8 <rmw_uxrce_init_guard_condition_memory>:
 80195d8:	b1e2      	cbz	r2, 8019614 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80195da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195de:	7b05      	ldrb	r5, [r0, #12]
 80195e0:	4606      	mov	r6, r0
 80195e2:	b9ad      	cbnz	r5, 8019610 <rmw_uxrce_init_guard_condition_memory+0x38>
 80195e4:	2320      	movs	r3, #32
 80195e6:	4617      	mov	r7, r2
 80195e8:	460c      	mov	r4, r1
 80195ea:	46a8      	mov	r8, r5
 80195ec:	6083      	str	r3, [r0, #8]
 80195ee:	f240 1301 	movw	r3, #257	@ 0x101
 80195f2:	e9c0 5500 	strd	r5, r5, [r0]
 80195f6:	8183      	strh	r3, [r0, #12]
 80195f8:	3501      	adds	r5, #1
 80195fa:	4621      	mov	r1, r4
 80195fc:	4630      	mov	r0, r6
 80195fe:	f004 feb7 	bl	801e370 <put_memory>
 8019602:	42af      	cmp	r7, r5
 8019604:	60a4      	str	r4, [r4, #8]
 8019606:	f104 0420 	add.w	r4, r4, #32
 801960a:	f804 8c14 	strb.w	r8, [r4, #-20]
 801960e:	d1f3      	bne.n	80195f8 <rmw_uxrce_init_guard_condition_memory+0x20>
 8019610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019614:	4770      	bx	lr
 8019616:	bf00      	nop

08019618 <rmw_uxrce_fini_session_memory>:
 8019618:	4601      	mov	r1, r0
 801961a:	4801      	ldr	r0, [pc, #4]	@ (8019620 <rmw_uxrce_fini_session_memory+0x8>)
 801961c:	f004 bea8 	b.w	801e370 <put_memory>
 8019620:	2406938c 	.word	0x2406938c

08019624 <rmw_uxrce_fini_node_memory>:
 8019624:	b538      	push	{r3, r4, r5, lr}
 8019626:	4604      	mov	r4, r0
 8019628:	6800      	ldr	r0, [r0, #0]
 801962a:	b128      	cbz	r0, 8019638 <rmw_uxrce_fini_node_memory+0x14>
 801962c:	4b07      	ldr	r3, [pc, #28]	@ (801964c <rmw_uxrce_fini_node_memory+0x28>)
 801962e:	6819      	ldr	r1, [r3, #0]
 8019630:	f7e6 fe56 	bl	80002e0 <strcmp>
 8019634:	b940      	cbnz	r0, 8019648 <rmw_uxrce_fini_node_memory+0x24>
 8019636:	6020      	str	r0, [r4, #0]
 8019638:	6861      	ldr	r1, [r4, #4]
 801963a:	b129      	cbz	r1, 8019648 <rmw_uxrce_fini_node_memory+0x24>
 801963c:	2500      	movs	r5, #0
 801963e:	4804      	ldr	r0, [pc, #16]	@ (8019650 <rmw_uxrce_fini_node_memory+0x2c>)
 8019640:	610d      	str	r5, [r1, #16]
 8019642:	f004 fe95 	bl	801e370 <put_memory>
 8019646:	6065      	str	r5, [r4, #4]
 8019648:	bd38      	pop	{r3, r4, r5, pc}
 801964a:	bf00      	nop
 801964c:	08022f40 	.word	0x08022f40
 8019650:	2406935c 	.word	0x2406935c

08019654 <rmw_uxrce_fini_publisher_memory>:
 8019654:	b510      	push	{r4, lr}
 8019656:	4604      	mov	r4, r0
 8019658:	6800      	ldr	r0, [r0, #0]
 801965a:	b128      	cbz	r0, 8019668 <rmw_uxrce_fini_publisher_memory+0x14>
 801965c:	4b06      	ldr	r3, [pc, #24]	@ (8019678 <rmw_uxrce_fini_publisher_memory+0x24>)
 801965e:	6819      	ldr	r1, [r3, #0]
 8019660:	f7e6 fe3e 	bl	80002e0 <strcmp>
 8019664:	b938      	cbnz	r0, 8019676 <rmw_uxrce_fini_publisher_memory+0x22>
 8019666:	6020      	str	r0, [r4, #0]
 8019668:	6861      	ldr	r1, [r4, #4]
 801966a:	b121      	cbz	r1, 8019676 <rmw_uxrce_fini_publisher_memory+0x22>
 801966c:	4803      	ldr	r0, [pc, #12]	@ (801967c <rmw_uxrce_fini_publisher_memory+0x28>)
 801966e:	f004 fe7f 	bl	801e370 <put_memory>
 8019672:	2300      	movs	r3, #0
 8019674:	6063      	str	r3, [r4, #4]
 8019676:	bd10      	pop	{r4, pc}
 8019678:	08022f40 	.word	0x08022f40
 801967c:	2406936c 	.word	0x2406936c

08019680 <rmw_uxrce_fini_subscription_memory>:
 8019680:	b510      	push	{r4, lr}
 8019682:	4604      	mov	r4, r0
 8019684:	6800      	ldr	r0, [r0, #0]
 8019686:	b128      	cbz	r0, 8019694 <rmw_uxrce_fini_subscription_memory+0x14>
 8019688:	4b06      	ldr	r3, [pc, #24]	@ (80196a4 <rmw_uxrce_fini_subscription_memory+0x24>)
 801968a:	6819      	ldr	r1, [r3, #0]
 801968c:	f7e6 fe28 	bl	80002e0 <strcmp>
 8019690:	b938      	cbnz	r0, 80196a2 <rmw_uxrce_fini_subscription_memory+0x22>
 8019692:	6020      	str	r0, [r4, #0]
 8019694:	6861      	ldr	r1, [r4, #4]
 8019696:	b121      	cbz	r1, 80196a2 <rmw_uxrce_fini_subscription_memory+0x22>
 8019698:	4803      	ldr	r0, [pc, #12]	@ (80196a8 <rmw_uxrce_fini_subscription_memory+0x28>)
 801969a:	f004 fe69 	bl	801e370 <put_memory>
 801969e:	2300      	movs	r3, #0
 80196a0:	6063      	str	r3, [r4, #4]
 80196a2:	bd10      	pop	{r4, pc}
 80196a4:	08022f40 	.word	0x08022f40
 80196a8:	240693ac 	.word	0x240693ac

080196ac <rmw_uxrce_fini_service_memory>:
 80196ac:	b510      	push	{r4, lr}
 80196ae:	4604      	mov	r4, r0
 80196b0:	6800      	ldr	r0, [r0, #0]
 80196b2:	b128      	cbz	r0, 80196c0 <rmw_uxrce_fini_service_memory+0x14>
 80196b4:	4b06      	ldr	r3, [pc, #24]	@ (80196d0 <rmw_uxrce_fini_service_memory+0x24>)
 80196b6:	6819      	ldr	r1, [r3, #0]
 80196b8:	f7e6 fe12 	bl	80002e0 <strcmp>
 80196bc:	b938      	cbnz	r0, 80196ce <rmw_uxrce_fini_service_memory+0x22>
 80196be:	6020      	str	r0, [r4, #0]
 80196c0:	6861      	ldr	r1, [r4, #4]
 80196c2:	b121      	cbz	r1, 80196ce <rmw_uxrce_fini_service_memory+0x22>
 80196c4:	4803      	ldr	r0, [pc, #12]	@ (80196d4 <rmw_uxrce_fini_service_memory+0x28>)
 80196c6:	f004 fe53 	bl	801e370 <put_memory>
 80196ca:	2300      	movs	r3, #0
 80196cc:	6063      	str	r3, [r4, #4]
 80196ce:	bd10      	pop	{r4, pc}
 80196d0:	08022f40 	.word	0x08022f40
 80196d4:	2406937c 	.word	0x2406937c

080196d8 <rmw_uxrce_fini_client_memory>:
 80196d8:	b510      	push	{r4, lr}
 80196da:	4604      	mov	r4, r0
 80196dc:	6800      	ldr	r0, [r0, #0]
 80196de:	b128      	cbz	r0, 80196ec <rmw_uxrce_fini_client_memory+0x14>
 80196e0:	4b06      	ldr	r3, [pc, #24]	@ (80196fc <rmw_uxrce_fini_client_memory+0x24>)
 80196e2:	6819      	ldr	r1, [r3, #0]
 80196e4:	f7e6 fdfc 	bl	80002e0 <strcmp>
 80196e8:	b938      	cbnz	r0, 80196fa <rmw_uxrce_fini_client_memory+0x22>
 80196ea:	6020      	str	r0, [r4, #0]
 80196ec:	6861      	ldr	r1, [r4, #4]
 80196ee:	b121      	cbz	r1, 80196fa <rmw_uxrce_fini_client_memory+0x22>
 80196f0:	4803      	ldr	r0, [pc, #12]	@ (8019700 <rmw_uxrce_fini_client_memory+0x28>)
 80196f2:	f004 fe3d 	bl	801e370 <put_memory>
 80196f6:	2300      	movs	r3, #0
 80196f8:	6063      	str	r3, [r4, #4]
 80196fa:	bd10      	pop	{r4, pc}
 80196fc:	08022f40 	.word	0x08022f40
 8019700:	24064a90 	.word	0x24064a90

08019704 <rmw_uxrce_fini_topic_memory>:
 8019704:	b510      	push	{r4, lr}
 8019706:	4604      	mov	r4, r0
 8019708:	4803      	ldr	r0, [pc, #12]	@ (8019718 <rmw_uxrce_fini_topic_memory+0x14>)
 801970a:	4621      	mov	r1, r4
 801970c:	f004 fe30 	bl	801e370 <put_memory>
 8019710:	2300      	movs	r3, #0
 8019712:	61a3      	str	r3, [r4, #24]
 8019714:	bd10      	pop	{r4, pc}
 8019716:	bf00      	nop
 8019718:	240693bc 	.word	0x240693bc

0801971c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801971c:	b082      	sub	sp, #8
 801971e:	492b      	ldr	r1, [pc, #172]	@ (80197cc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8019720:	b530      	push	{r4, r5, lr}
 8019722:	680d      	ldr	r5, [r1, #0]
 8019724:	ac03      	add	r4, sp, #12
 8019726:	e884 000c 	stmia.w	r4, {r2, r3}
 801972a:	461c      	mov	r4, r3
 801972c:	2d00      	cmp	r5, #0
 801972e:	d04b      	beq.n	80197c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8019730:	462b      	mov	r3, r5
 8019732:	2100      	movs	r1, #0
 8019734:	689a      	ldr	r2, [r3, #8]
 8019736:	685b      	ldr	r3, [r3, #4]
 8019738:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801973c:	4290      	cmp	r0, r2
 801973e:	bf08      	it	eq
 8019740:	3101      	addeq	r1, #1
 8019742:	2b00      	cmp	r3, #0
 8019744:	d1f6      	bne.n	8019734 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8019746:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801974a:	2b02      	cmp	r3, #2
 801974c:	d029      	beq.n	80197a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801974e:	d820      	bhi.n	8019792 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8019750:	428c      	cmp	r4, r1
 8019752:	d828      	bhi.n	80197a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8019754:	fab4 f284 	clz	r2, r4
 8019758:	0952      	lsrs	r2, r2, #5
 801975a:	b324      	cbz	r4, 80197a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801975c:	b1dd      	cbz	r5, 8019796 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801975e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8019762:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8019766:	e001      	b.n	801976c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8019768:	686d      	ldr	r5, [r5, #4]
 801976a:	b1ad      	cbz	r5, 8019798 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801976c:	68ab      	ldr	r3, [r5, #8]
 801976e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8019772:	4288      	cmp	r0, r1
 8019774:	d1f8      	bne.n	8019768 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8019776:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801977a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801977e:	4561      	cmp	r1, ip
 8019780:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019784:	eb73 0e04 	sbcs.w	lr, r3, r4
 8019788:	daee      	bge.n	8019768 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801978a:	468c      	mov	ip, r1
 801978c:	461c      	mov	r4, r3
 801978e:	462a      	mov	r2, r5
 8019790:	e7ea      	b.n	8019768 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8019792:	2b03      	cmp	r3, #3
 8019794:	d0dc      	beq.n	8019750 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8019796:	2200      	movs	r2, #0
 8019798:	4610      	mov	r0, r2
 801979a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801979e:	b002      	add	sp, #8
 80197a0:	4770      	bx	lr
 80197a2:	428c      	cmp	r4, r1
 80197a4:	d905      	bls.n	80197b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80197a6:	4809      	ldr	r0, [pc, #36]	@ (80197cc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80197a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80197ac:	b002      	add	sp, #8
 80197ae:	f004 bdcf 	b.w	801e350 <get_memory>
 80197b2:	fab4 f284 	clz	r2, r4
 80197b6:	0952      	lsrs	r2, r2, #5
 80197b8:	2c00      	cmp	r4, #0
 80197ba:	d1ed      	bne.n	8019798 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80197bc:	4803      	ldr	r0, [pc, #12]	@ (80197cc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80197be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80197c2:	b002      	add	sp, #8
 80197c4:	f004 bdc4 	b.w	801e350 <get_memory>
 80197c8:	4629      	mov	r1, r5
 80197ca:	e7bc      	b.n	8019746 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80197cc:	2406939c 	.word	0x2406939c

080197d0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80197d0:	4b12      	ldr	r3, [pc, #72]	@ (801981c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	b530      	push	{r4, r5, lr}
 80197d6:	b1f3      	cbz	r3, 8019816 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80197d8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80197dc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80197e0:	2400      	movs	r4, #0
 80197e2:	e001      	b.n	80197e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80197e4:	685b      	ldr	r3, [r3, #4]
 80197e6:	b1a3      	cbz	r3, 8019812 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80197e8:	689a      	ldr	r2, [r3, #8]
 80197ea:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80197ee:	4288      	cmp	r0, r1
 80197f0:	d1f8      	bne.n	80197e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80197f2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80197f6:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 80197fa:	4571      	cmp	r1, lr
 80197fc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8019800:	eb72 050c 	sbcs.w	r5, r2, ip
 8019804:	daee      	bge.n	80197e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8019806:	461c      	mov	r4, r3
 8019808:	685b      	ldr	r3, [r3, #4]
 801980a:	468e      	mov	lr, r1
 801980c:	4694      	mov	ip, r2
 801980e:	2b00      	cmp	r3, #0
 8019810:	d1ea      	bne.n	80197e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8019812:	4620      	mov	r0, r4
 8019814:	bd30      	pop	{r4, r5, pc}
 8019816:	461c      	mov	r4, r3
 8019818:	4620      	mov	r0, r4
 801981a:	bd30      	pop	{r4, r5, pc}
 801981c:	2406939c 	.word	0x2406939c

08019820 <rmw_uxrce_clean_expired_static_input_buffer>:
 8019820:	4b3d      	ldr	r3, [pc, #244]	@ (8019918 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8019822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019826:	681f      	ldr	r7, [r3, #0]
 8019828:	ed2d 8b06 	vpush	{d8-d10}
 801982c:	b08d      	sub	sp, #52	@ 0x34
 801982e:	f004 fe4f 	bl	801e4d0 <rmw_uros_epoch_nanos>
 8019832:	2f00      	cmp	r7, #0
 8019834:	d05d      	beq.n	80198f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8019836:	46b8      	mov	r8, r7
 8019838:	4681      	mov	r9, r0
 801983a:	468a      	mov	sl, r1
 801983c:	ac04      	add	r4, sp, #16
 801983e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019842:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8019846:	2b04      	cmp	r3, #4
 8019848:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8019900 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801984c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8019908 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8019850:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8019910 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8019854:	d03f      	beq.n	80198d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8019856:	2b05      	cmp	r3, #5
 8019858:	d044      	beq.n	80198e4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801985a:	2b03      	cmp	r3, #3
 801985c:	d03b      	beq.n	80198d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801985e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019862:	ed8d ab06 	vstr	d10, [sp, #24]
 8019866:	ab08      	add	r3, sp, #32
 8019868:	ed8d 8b08 	vstr	d8, [sp, #32]
 801986c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8019870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019872:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019876:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801987a:	f004 fbf9 	bl	801e070 <rmw_time_equal>
 801987e:	b118      	cbz	r0, 8019888 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8019880:	ed8d 9b04 	vstr	d9, [sp, #16]
 8019884:	ed8d 8b06 	vstr	d8, [sp, #24]
 8019888:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801988c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8019890:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8019894:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8019898:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801989c:	f004 fc3e 	bl	801e11c <rmw_time_total_nsec>
 80198a0:	1830      	adds	r0, r6, r0
 80198a2:	eb47 0101 	adc.w	r1, r7, r1
 80198a6:	4548      	cmp	r0, r9
 80198a8:	eb71 030a 	sbcs.w	r3, r1, sl
 80198ac:	db05      	blt.n	80198ba <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80198ae:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80198b2:	4591      	cmp	r9, r2
 80198b4:	eb7a 0303 	sbcs.w	r3, sl, r3
 80198b8:	da03      	bge.n	80198c2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80198ba:	4641      	mov	r1, r8
 80198bc:	4816      	ldr	r0, [pc, #88]	@ (8019918 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80198be:	f004 fd57 	bl	801e370 <put_memory>
 80198c2:	f1bb 0f00 	cmp.w	fp, #0
 80198c6:	d014      	beq.n	80198f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80198c8:	46d8      	mov	r8, fp
 80198ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80198ce:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80198d2:	2b04      	cmp	r3, #4
 80198d4:	d1bf      	bne.n	8019856 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80198d6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80198da:	3340      	adds	r3, #64	@ 0x40
 80198dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80198de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80198e2:	e7c0      	b.n	8019866 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80198e4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80198e8:	3348      	adds	r3, #72	@ 0x48
 80198ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80198ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80198f0:	e7b9      	b.n	8019866 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80198f2:	b00d      	add	sp, #52	@ 0x34
 80198f4:	ecbd 8b06 	vpop	{d8-d10}
 80198f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198fc:	f3af 8000 	nop.w
	...
 8019908:	00000001 	.word	0x00000001
 801990c:	00000000 	.word	0x00000000
 8019910:	0000001e 	.word	0x0000001e
 8019914:	00000000 	.word	0x00000000
 8019918:	2406939c 	.word	0x2406939c

0801991c <run_xrce_session>:
 801991c:	b510      	push	{r4, lr}
 801991e:	788c      	ldrb	r4, [r1, #2]
 8019920:	b086      	sub	sp, #24
 8019922:	2c01      	cmp	r4, #1
 8019924:	f8ad 200e 	strh.w	r2, [sp, #14]
 8019928:	d00c      	beq.n	8019944 <run_xrce_session+0x28>
 801992a:	2401      	movs	r4, #1
 801992c:	4619      	mov	r1, r3
 801992e:	f10d 020e 	add.w	r2, sp, #14
 8019932:	f10d 0317 	add.w	r3, sp, #23
 8019936:	9400      	str	r4, [sp, #0]
 8019938:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801993c:	f001 fd90 	bl	801b460 <uxr_run_session_until_all_status>
 8019940:	b006      	add	sp, #24
 8019942:	bd10      	pop	{r4, pc}
 8019944:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019948:	f001 f9ac 	bl	801aca4 <uxr_flash_output_streams>
 801994c:	4620      	mov	r0, r4
 801994e:	b006      	add	sp, #24
 8019950:	bd10      	pop	{r4, pc}
 8019952:	bf00      	nop

08019954 <convert_qos_profile>:
 8019954:	7a4a      	ldrb	r2, [r1, #9]
 8019956:	f891 c008 	ldrb.w	ip, [r1, #8]
 801995a:	2a02      	cmp	r2, #2
 801995c:	bf18      	it	ne
 801995e:	2200      	movne	r2, #0
 8019960:	7002      	strb	r2, [r0, #0]
 8019962:	f1ac 0202 	sub.w	r2, ip, #2
 8019966:	fab2 f282 	clz	r2, r2
 801996a:	0952      	lsrs	r2, r2, #5
 801996c:	7042      	strb	r2, [r0, #1]
 801996e:	780a      	ldrb	r2, [r1, #0]
 8019970:	8889      	ldrh	r1, [r1, #4]
 8019972:	f1a2 0202 	sub.w	r2, r2, #2
 8019976:	8081      	strh	r1, [r0, #4]
 8019978:	fab2 f282 	clz	r2, r2
 801997c:	0952      	lsrs	r2, r2, #5
 801997e:	7082      	strb	r2, [r0, #2]
 8019980:	4770      	bx	lr
 8019982:	bf00      	nop

08019984 <generate_service_topics>:
 8019984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019986:	461d      	mov	r5, r3
 8019988:	b083      	sub	sp, #12
 801998a:	4606      	mov	r6, r0
 801998c:	4c11      	ldr	r4, [pc, #68]	@ (80199d4 <generate_service_topics+0x50>)
 801998e:	4608      	mov	r0, r1
 8019990:	4b11      	ldr	r3, [pc, #68]	@ (80199d8 <generate_service_topics+0x54>)
 8019992:	4617      	mov	r7, r2
 8019994:	4629      	mov	r1, r5
 8019996:	4a11      	ldr	r2, [pc, #68]	@ (80199dc <generate_service_topics+0x58>)
 8019998:	9401      	str	r4, [sp, #4]
 801999a:	9600      	str	r6, [sp, #0]
 801999c:	f005 fedc 	bl	801f758 <sniprintf>
 80199a0:	4a0f      	ldr	r2, [pc, #60]	@ (80199e0 <generate_service_topics+0x5c>)
 80199a2:	4604      	mov	r4, r0
 80199a4:	4b0f      	ldr	r3, [pc, #60]	@ (80199e4 <generate_service_topics+0x60>)
 80199a6:	9201      	str	r2, [sp, #4]
 80199a8:	4638      	mov	r0, r7
 80199aa:	4a0c      	ldr	r2, [pc, #48]	@ (80199dc <generate_service_topics+0x58>)
 80199ac:	4629      	mov	r1, r5
 80199ae:	9600      	str	r6, [sp, #0]
 80199b0:	f005 fed2 	bl	801f758 <sniprintf>
 80199b4:	2c00      	cmp	r4, #0
 80199b6:	bfa8      	it	ge
 80199b8:	42a5      	cmpge	r5, r4
 80199ba:	bfcc      	ite	gt
 80199bc:	2401      	movgt	r4, #1
 80199be:	2400      	movle	r4, #0
 80199c0:	dd05      	ble.n	80199ce <generate_service_topics+0x4a>
 80199c2:	2800      	cmp	r0, #0
 80199c4:	bfa8      	it	ge
 80199c6:	4285      	cmpge	r5, r0
 80199c8:	bfcc      	ite	gt
 80199ca:	2401      	movgt	r4, #1
 80199cc:	2400      	movle	r4, #0
 80199ce:	4620      	mov	r0, r4
 80199d0:	b003      	add	sp, #12
 80199d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199d4:	08022c30 	.word	0x08022c30
 80199d8:	08022c2c 	.word	0x08022c2c
 80199dc:	08022c10 	.word	0x08022c10
 80199e0:	08022c24 	.word	0x08022c24
 80199e4:	08022c20 	.word	0x08022c20

080199e8 <generate_service_types>:
 80199e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199ec:	4606      	mov	r6, r0
 80199ee:	b087      	sub	sp, #28
 80199f0:	461c      	mov	r4, r3
 80199f2:	6883      	ldr	r3, [r0, #8]
 80199f4:	460d      	mov	r5, r1
 80199f6:	4617      	mov	r7, r2
 80199f8:	4798      	blx	r3
 80199fa:	68f3      	ldr	r3, [r6, #12]
 80199fc:	4606      	mov	r6, r0
 80199fe:	4798      	blx	r3
 8019a00:	2300      	movs	r3, #0
 8019a02:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8019a06:	6872      	ldr	r2, [r6, #4]
 8019a08:	702b      	strb	r3, [r5, #0]
 8019a0a:	6813      	ldr	r3, [r2, #0]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d03f      	beq.n	8019a90 <generate_service_types+0xa8>
 8019a10:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8019aa4 <generate_service_types+0xbc>
 8019a14:	4649      	mov	r1, r9
 8019a16:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8019aac <generate_service_types+0xc4>
 8019a1a:	4628      	mov	r0, r5
 8019a1c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8019ab0 <generate_service_types+0xc8>
 8019a20:	f8cd 8014 	str.w	r8, [sp, #20]
 8019a24:	6852      	ldr	r2, [r2, #4]
 8019a26:	9100      	str	r1, [sp, #0]
 8019a28:	4621      	mov	r1, r4
 8019a2a:	f8cd 8008 	str.w	r8, [sp, #8]
 8019a2e:	f8cd a004 	str.w	sl, [sp, #4]
 8019a32:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8019a36:	4a1a      	ldr	r2, [pc, #104]	@ (8019aa0 <generate_service_types+0xb8>)
 8019a38:	f005 fe8e 	bl	801f758 <sniprintf>
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	42a0      	cmp	r0, r4
 8019a40:	ea6f 0600 	mvn.w	r6, r0
 8019a44:	703b      	strb	r3, [r7, #0]
 8019a46:	f8db 3000 	ldr.w	r3, [fp]
 8019a4a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8019a4e:	bfac      	ite	ge
 8019a50:	2500      	movge	r5, #0
 8019a52:	2501      	movlt	r5, #1
 8019a54:	b30b      	cbz	r3, 8019a9a <generate_service_types+0xb2>
 8019a56:	4a13      	ldr	r2, [pc, #76]	@ (8019aa4 <generate_service_types+0xbc>)
 8019a58:	f8cd 8014 	str.w	r8, [sp, #20]
 8019a5c:	402e      	ands	r6, r5
 8019a5e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8019a62:	4638      	mov	r0, r7
 8019a64:	9104      	str	r1, [sp, #16]
 8019a66:	4621      	mov	r1, r4
 8019a68:	e9cd 2a00 	strd	r2, sl, [sp]
 8019a6c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8019a70:	4a0b      	ldr	r2, [pc, #44]	@ (8019aa0 <generate_service_types+0xb8>)
 8019a72:	f005 fe71 	bl	801f758 <sniprintf>
 8019a76:	2800      	cmp	r0, #0
 8019a78:	bfb4      	ite	lt
 8019a7a:	2600      	movlt	r6, #0
 8019a7c:	f006 0601 	andge.w	r6, r6, #1
 8019a80:	42a0      	cmp	r0, r4
 8019a82:	bfac      	ite	ge
 8019a84:	2000      	movge	r0, #0
 8019a86:	f006 0001 	andlt.w	r0, r6, #1
 8019a8a:	b007      	add	sp, #28
 8019a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a90:	4b05      	ldr	r3, [pc, #20]	@ (8019aa8 <generate_service_types+0xc0>)
 8019a92:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 8019aa4 <generate_service_types+0xbc>
 8019a96:	4619      	mov	r1, r3
 8019a98:	e7bd      	b.n	8019a16 <generate_service_types+0x2e>
 8019a9a:	4b03      	ldr	r3, [pc, #12]	@ (8019aa8 <generate_service_types+0xc0>)
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	e7db      	b.n	8019a58 <generate_service_types+0x70>
 8019aa0:	08022c08 	.word	0x08022c08
 8019aa4:	08022c04 	.word	0x08022c04
 8019aa8:	08022f90 	.word	0x08022f90
 8019aac:	08022c18 	.word	0x08022c18
 8019ab0:	08022c1c 	.word	0x08022c1c

08019ab4 <generate_type_name>:
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	b530      	push	{r4, r5, lr}
 8019ab8:	700b      	strb	r3, [r1, #0]
 8019aba:	b087      	sub	sp, #28
 8019abc:	6803      	ldr	r3, [r0, #0]
 8019abe:	4614      	mov	r4, r2
 8019ac0:	b1bb      	cbz	r3, 8019af2 <generate_type_name+0x3e>
 8019ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8019afc <generate_type_name+0x48>)
 8019ac4:	4615      	mov	r5, r2
 8019ac6:	9500      	str	r5, [sp, #0]
 8019ac8:	9203      	str	r2, [sp, #12]
 8019aca:	4d0d      	ldr	r5, [pc, #52]	@ (8019b00 <generate_type_name+0x4c>)
 8019acc:	6842      	ldr	r2, [r0, #4]
 8019ace:	4608      	mov	r0, r1
 8019ad0:	490c      	ldr	r1, [pc, #48]	@ (8019b04 <generate_type_name+0x50>)
 8019ad2:	9204      	str	r2, [sp, #16]
 8019ad4:	9105      	str	r1, [sp, #20]
 8019ad6:	9102      	str	r1, [sp, #8]
 8019ad8:	4621      	mov	r1, r4
 8019ada:	4a0b      	ldr	r2, [pc, #44]	@ (8019b08 <generate_type_name+0x54>)
 8019adc:	9501      	str	r5, [sp, #4]
 8019ade:	f005 fe3b 	bl	801f758 <sniprintf>
 8019ae2:	2800      	cmp	r0, #0
 8019ae4:	bfa8      	it	ge
 8019ae6:	4284      	cmpge	r4, r0
 8019ae8:	bfcc      	ite	gt
 8019aea:	2001      	movgt	r0, #1
 8019aec:	2000      	movle	r0, #0
 8019aee:	b007      	add	sp, #28
 8019af0:	bd30      	pop	{r4, r5, pc}
 8019af2:	4b06      	ldr	r3, [pc, #24]	@ (8019b0c <generate_type_name+0x58>)
 8019af4:	4a01      	ldr	r2, [pc, #4]	@ (8019afc <generate_type_name+0x48>)
 8019af6:	461d      	mov	r5, r3
 8019af8:	e7e5      	b.n	8019ac6 <generate_type_name+0x12>
 8019afa:	bf00      	nop
 8019afc:	08022c04 	.word	0x08022c04
 8019b00:	08022c1c 	.word	0x08022c1c
 8019b04:	08022c18 	.word	0x08022c18
 8019b08:	08022c08 	.word	0x08022c08
 8019b0c:	08022f90 	.word	0x08022f90

08019b10 <generate_topic_name>:
 8019b10:	b530      	push	{r4, r5, lr}
 8019b12:	4614      	mov	r4, r2
 8019b14:	b083      	sub	sp, #12
 8019b16:	4605      	mov	r5, r0
 8019b18:	4b07      	ldr	r3, [pc, #28]	@ (8019b38 <generate_topic_name+0x28>)
 8019b1a:	4a08      	ldr	r2, [pc, #32]	@ (8019b3c <generate_topic_name+0x2c>)
 8019b1c:	4608      	mov	r0, r1
 8019b1e:	9500      	str	r5, [sp, #0]
 8019b20:	4621      	mov	r1, r4
 8019b22:	f005 fe19 	bl	801f758 <sniprintf>
 8019b26:	2800      	cmp	r0, #0
 8019b28:	bfa8      	it	ge
 8019b2a:	4284      	cmpge	r4, r0
 8019b2c:	bfcc      	ite	gt
 8019b2e:	2001      	movgt	r0, #1
 8019b30:	2000      	movle	r0, #0
 8019b32:	b003      	add	sp, #12
 8019b34:	bd30      	pop	{r4, r5, pc}
 8019b36:	bf00      	nop
 8019b38:	08022c38 	.word	0x08022c38
 8019b3c:	080225d0 	.word	0x080225d0

08019b40 <is_uxrce_rmw_identifier_valid>:
 8019b40:	b510      	push	{r4, lr}
 8019b42:	4604      	mov	r4, r0
 8019b44:	b140      	cbz	r0, 8019b58 <is_uxrce_rmw_identifier_valid+0x18>
 8019b46:	f7fe f949 	bl	8017ddc <rmw_get_implementation_identifier>
 8019b4a:	4601      	mov	r1, r0
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	f7e6 fbc7 	bl	80002e0 <strcmp>
 8019b52:	fab0 f080 	clz	r0, r0
 8019b56:	0940      	lsrs	r0, r0, #5
 8019b58:	bd10      	pop	{r4, pc}
 8019b5a:	bf00      	nop

08019b5c <std_msgs__msg__Header__init>:
 8019b5c:	b570      	push	{r4, r5, r6, lr}
 8019b5e:	4605      	mov	r5, r0
 8019b60:	b1a8      	cbz	r0, 8019b8e <std_msgs__msg__Header__init+0x32>
 8019b62:	f7fa fbf7 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8019b66:	4604      	mov	r4, r0
 8019b68:	b140      	cbz	r0, 8019b7c <std_msgs__msg__Header__init+0x20>
 8019b6a:	f105 0608 	add.w	r6, r5, #8
 8019b6e:	4630      	mov	r0, r6
 8019b70:	f004 fcbc 	bl	801e4ec <rosidl_runtime_c__String__init>
 8019b74:	4604      	mov	r4, r0
 8019b76:	b168      	cbz	r0, 8019b94 <std_msgs__msg__Header__init+0x38>
 8019b78:	4620      	mov	r0, r4
 8019b7a:	bd70      	pop	{r4, r5, r6, pc}
 8019b7c:	4628      	mov	r0, r5
 8019b7e:	f7fa fbed 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8019b82:	f105 0008 	add.w	r0, r5, #8
 8019b86:	f004 fcc7 	bl	801e518 <rosidl_runtime_c__String__fini>
 8019b8a:	4620      	mov	r0, r4
 8019b8c:	bd70      	pop	{r4, r5, r6, pc}
 8019b8e:	4604      	mov	r4, r0
 8019b90:	4620      	mov	r0, r4
 8019b92:	bd70      	pop	{r4, r5, r6, pc}
 8019b94:	4628      	mov	r0, r5
 8019b96:	f7fa fbe1 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8019b9a:	4630      	mov	r0, r6
 8019b9c:	f004 fcbc 	bl	801e518 <rosidl_runtime_c__String__fini>
 8019ba0:	e7ea      	b.n	8019b78 <std_msgs__msg__Header__init+0x1c>
 8019ba2:	bf00      	nop

08019ba4 <std_msgs__msg__Header__fini>:
 8019ba4:	b148      	cbz	r0, 8019bba <std_msgs__msg__Header__fini+0x16>
 8019ba6:	b510      	push	{r4, lr}
 8019ba8:	4604      	mov	r4, r0
 8019baa:	f7fa fbd7 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8019bae:	f104 0008 	add.w	r0, r4, #8
 8019bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bb6:	f004 bcaf 	b.w	801e518 <rosidl_runtime_c__String__fini>
 8019bba:	4770      	bx	lr

08019bbc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 8019bbc:	b570      	push	{r4, r5, r6, lr}
 8019bbe:	4605      	mov	r5, r0
 8019bc0:	b1a8      	cbz	r0, 8019bee <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8019bc2:	f7ff ffcb 	bl	8019b5c <std_msgs__msg__Header__init>
 8019bc6:	4604      	mov	r4, r0
 8019bc8:	b140      	cbz	r0, 8019bdc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 8019bca:	f105 0618 	add.w	r6, r5, #24
 8019bce:	4630      	mov	r0, r6
 8019bd0:	f004 fcea 	bl	801e5a8 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8019bd4:	4604      	mov	r4, r0
 8019bd6:	b168      	cbz	r0, 8019bf4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8019bd8:	4620      	mov	r0, r4
 8019bda:	bd70      	pop	{r4, r5, r6, pc}
 8019bdc:	4628      	mov	r0, r5
 8019bde:	f7ff ffe1 	bl	8019ba4 <std_msgs__msg__Header__fini>
 8019be2:	f105 0018 	add.w	r0, r5, #24
 8019be6:	f004 fce3 	bl	801e5b0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8019bea:	4620      	mov	r0, r4
 8019bec:	bd70      	pop	{r4, r5, r6, pc}
 8019bee:	4604      	mov	r4, r0
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
 8019bf4:	4628      	mov	r0, r5
 8019bf6:	f7ff ffd5 	bl	8019ba4 <std_msgs__msg__Header__fini>
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	f004 fcd8 	bl	801e5b0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8019c00:	e7ea      	b.n	8019bd8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8019c02:	bf00      	nop

08019c04 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8019c04:	b148      	cbz	r0, 8019c1a <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8019c06:	b510      	push	{r4, lr}
 8019c08:	4604      	mov	r4, r0
 8019c0a:	f7ff ffcb 	bl	8019ba4 <std_msgs__msg__Header__fini>
 8019c0e:	f104 0018 	add.w	r0, r4, #24
 8019c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c16:	f004 bccb 	b.w	801e5b0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8019c1a:	4770      	bx	lr

08019c1c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 8019c1c:	b570      	push	{r4, r5, r6, lr}
 8019c1e:	4605      	mov	r5, r0
 8019c20:	b1a8      	cbz	r0, 8019c4e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8019c22:	f7ff ff9b 	bl	8019b5c <std_msgs__msg__Header__init>
 8019c26:	4604      	mov	r4, r0
 8019c28:	b140      	cbz	r0, 8019c3c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 8019c2a:	f105 0618 	add.w	r6, r5, #24
 8019c2e:	4630      	mov	r0, r6
 8019c30:	f004 fcc0 	bl	801e5b4 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8019c34:	4604      	mov	r4, r0
 8019c36:	b168      	cbz	r0, 8019c54 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8019c38:	4620      	mov	r0, r4
 8019c3a:	bd70      	pop	{r4, r5, r6, pc}
 8019c3c:	4628      	mov	r0, r5
 8019c3e:	f7ff ffb1 	bl	8019ba4 <std_msgs__msg__Header__fini>
 8019c42:	f105 0018 	add.w	r0, r5, #24
 8019c46:	f004 fcb9 	bl	801e5bc <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8019c4a:	4620      	mov	r0, r4
 8019c4c:	bd70      	pop	{r4, r5, r6, pc}
 8019c4e:	4604      	mov	r4, r0
 8019c50:	4620      	mov	r0, r4
 8019c52:	bd70      	pop	{r4, r5, r6, pc}
 8019c54:	4628      	mov	r0, r5
 8019c56:	f7ff ffa5 	bl	8019ba4 <std_msgs__msg__Header__fini>
 8019c5a:	4630      	mov	r0, r6
 8019c5c:	f004 fcae 	bl	801e5bc <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8019c60:	e7ea      	b.n	8019c38 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8019c62:	bf00      	nop

08019c64 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8019c64:	b148      	cbz	r0, 8019c7a <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8019c66:	b510      	push	{r4, lr}
 8019c68:	4604      	mov	r4, r0
 8019c6a:	f7ff ff9b 	bl	8019ba4 <std_msgs__msg__Header__fini>
 8019c6e:	f104 0018 	add.w	r0, r4, #24
 8019c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c76:	f004 bca1 	b.w	801e5bc <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8019c7a:	4770      	bx	lr

08019c7c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 8019c7c:	b538      	push	{r3, r4, r5, lr}
 8019c7e:	4604      	mov	r4, r0
 8019c80:	b128      	cbz	r0, 8019c8e <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8019c82:	f7fa fb67 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8019c86:	4605      	mov	r5, r0
 8019c88:	b120      	cbz	r0, 8019c94 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 8019c8a:	4628      	mov	r0, r5
 8019c8c:	bd38      	pop	{r3, r4, r5, pc}
 8019c8e:	4605      	mov	r5, r0
 8019c90:	4628      	mov	r0, r5
 8019c92:	bd38      	pop	{r3, r4, r5, pc}
 8019c94:	4620      	mov	r0, r4
 8019c96:	f7fa fb61 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8019c9a:	4628      	mov	r0, r5
 8019c9c:	bd38      	pop	{r3, r4, r5, pc}
 8019c9e:	bf00      	nop

08019ca0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8019ca0:	b108      	cbz	r0, 8019ca6 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8019ca2:	f7fa bb5b 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 8019ca6:	4770      	bx	lr

08019ca8 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 8019ca8:	b538      	push	{r3, r4, r5, lr}
 8019caa:	4604      	mov	r4, r0
 8019cac:	b128      	cbz	r0, 8019cba <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 8019cae:	f7fa fb51 	bl	8014354 <builtin_interfaces__msg__Time__init>
 8019cb2:	4605      	mov	r5, r0
 8019cb4:	b120      	cbz	r0, 8019cc0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 8019cb6:	4628      	mov	r0, r5
 8019cb8:	bd38      	pop	{r3, r4, r5, pc}
 8019cba:	4605      	mov	r5, r0
 8019cbc:	4628      	mov	r0, r5
 8019cbe:	bd38      	pop	{r3, r4, r5, pc}
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	f7fa fb4b 	bl	801435c <builtin_interfaces__msg__Time__fini>
 8019cc6:	4628      	mov	r0, r5
 8019cc8:	bd38      	pop	{r3, r4, r5, pc}
 8019cca:	bf00      	nop

08019ccc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 8019ccc:	b108      	cbz	r0, 8019cd2 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 8019cce:	f7fa bb45 	b.w	801435c <builtin_interfaces__msg__Time__fini>
 8019cd2:	4770      	bx	lr

08019cd4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8019cd4:	f004 bc68 	b.w	801e5a8 <tier4_vehicle_msgs__msg__ActuationCommand__init>

08019cd8 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 8019cd8:	f004 bc6a 	b.w	801e5b0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

08019cdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8019cdc:	4b04      	ldr	r3, [pc, #16]	@ (8019cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8019cde:	681a      	ldr	r2, [r3, #0]
 8019ce0:	b10a      	cbz	r2, 8019ce6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8019ce2:	4803      	ldr	r0, [pc, #12]	@ (8019cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8019ce4:	4770      	bx	lr
 8019ce6:	4a03      	ldr	r2, [pc, #12]	@ (8019cf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8019ce8:	4801      	ldr	r0, [pc, #4]	@ (8019cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8019cea:	6812      	ldr	r2, [r2, #0]
 8019cec:	601a      	str	r2, [r3, #0]
 8019cee:	4770      	bx	lr
 8019cf0:	24001278 	.word	0x24001278
 8019cf4:	24000e14 	.word	0x24000e14

08019cf8 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8019cf8:	f004 bc5c 	b.w	801e5b4 <tier4_vehicle_msgs__msg__ActuationStatus__init>

08019cfc <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 8019cfc:	f004 bc5e 	b.w	801e5bc <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08019d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8019d00:	4b04      	ldr	r3, [pc, #16]	@ (8019d14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8019d02:	681a      	ldr	r2, [r3, #0]
 8019d04:	b10a      	cbz	r2, 8019d0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8019d06:	4803      	ldr	r0, [pc, #12]	@ (8019d14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8019d08:	4770      	bx	lr
 8019d0a:	4a03      	ldr	r2, [pc, #12]	@ (8019d18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 8019d0c:	4801      	ldr	r0, [pc, #4]	@ (8019d14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8019d0e:	6812      	ldr	r2, [r2, #0]
 8019d10:	601a      	str	r2, [r3, #0]
 8019d12:	4770      	bx	lr
 8019d14:	24001338 	.word	0x24001338
 8019d18:	24000e14 	.word	0x24000e14

08019d1c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8019d1c:	b1b8      	cbz	r0, 8019d4e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 8019d1e:	b538      	push	{r3, r4, r5, lr}
 8019d20:	460d      	mov	r5, r1
 8019d22:	2108      	movs	r1, #8
 8019d24:	4628      	mov	r0, r5
 8019d26:	f7f8 fce1 	bl	80126ec <ucdr_alignment>
 8019d2a:	f105 0308 	add.w	r3, r5, #8
 8019d2e:	2108      	movs	r1, #8
 8019d30:	f1c5 0508 	rsb	r5, r5, #8
 8019d34:	181c      	adds	r4, r3, r0
 8019d36:	4620      	mov	r0, r4
 8019d38:	f7f8 fcd8 	bl	80126ec <ucdr_alignment>
 8019d3c:	2108      	movs	r1, #8
 8019d3e:	4408      	add	r0, r1
 8019d40:	4404      	add	r4, r0
 8019d42:	4620      	mov	r0, r4
 8019d44:	f7f8 fcd2 	bl	80126ec <ucdr_alignment>
 8019d48:	4428      	add	r0, r5
 8019d4a:	4420      	add	r0, r4
 8019d4c:	bd38      	pop	{r3, r4, r5, pc}
 8019d4e:	4770      	bx	lr

08019d50 <_ActuationCommand__cdr_deserialize>:
 8019d50:	b538      	push	{r3, r4, r5, lr}
 8019d52:	460c      	mov	r4, r1
 8019d54:	b171      	cbz	r1, 8019d74 <_ActuationCommand__cdr_deserialize+0x24>
 8019d56:	4605      	mov	r5, r0
 8019d58:	f7f8 fbaa 	bl	80124b0 <ucdr_deserialize_double>
 8019d5c:	f104 0108 	add.w	r1, r4, #8
 8019d60:	4628      	mov	r0, r5
 8019d62:	f7f8 fba5 	bl	80124b0 <ucdr_deserialize_double>
 8019d66:	f104 0110 	add.w	r1, r4, #16
 8019d6a:	4628      	mov	r0, r5
 8019d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d70:	f7f8 bb9e 	b.w	80124b0 <ucdr_deserialize_double>
 8019d74:	4608      	mov	r0, r1
 8019d76:	bd38      	pop	{r3, r4, r5, pc}

08019d78 <_ActuationCommand__cdr_serialize>:
 8019d78:	b198      	cbz	r0, 8019da2 <_ActuationCommand__cdr_serialize+0x2a>
 8019d7a:	b538      	push	{r3, r4, r5, lr}
 8019d7c:	460d      	mov	r5, r1
 8019d7e:	4604      	mov	r4, r0
 8019d80:	ed90 0b00 	vldr	d0, [r0]
 8019d84:	4608      	mov	r0, r1
 8019d86:	f7f8 fac3 	bl	8012310 <ucdr_serialize_double>
 8019d8a:	4628      	mov	r0, r5
 8019d8c:	ed94 0b02 	vldr	d0, [r4, #8]
 8019d90:	f7f8 fabe 	bl	8012310 <ucdr_serialize_double>
 8019d94:	4628      	mov	r0, r5
 8019d96:	ed94 0b04 	vldr	d0, [r4, #16]
 8019d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d9e:	f7f8 bab7 	b.w	8012310 <ucdr_serialize_double>
 8019da2:	4770      	bx	lr

08019da4 <_ActuationCommand__get_serialized_size>:
 8019da4:	b190      	cbz	r0, 8019dcc <_ActuationCommand__get_serialized_size+0x28>
 8019da6:	2108      	movs	r1, #8
 8019da8:	2000      	movs	r0, #0
 8019daa:	b510      	push	{r4, lr}
 8019dac:	f7f8 fc9e 	bl	80126ec <ucdr_alignment>
 8019db0:	2108      	movs	r1, #8
 8019db2:	1844      	adds	r4, r0, r1
 8019db4:	4620      	mov	r0, r4
 8019db6:	f7f8 fc99 	bl	80126ec <ucdr_alignment>
 8019dba:	2108      	movs	r1, #8
 8019dbc:	4408      	add	r0, r1
 8019dbe:	4404      	add	r4, r0
 8019dc0:	4620      	mov	r0, r4
 8019dc2:	f7f8 fc93 	bl	80126ec <ucdr_alignment>
 8019dc6:	3008      	adds	r0, #8
 8019dc8:	4420      	add	r0, r4
 8019dca:	bd10      	pop	{r4, pc}
 8019dcc:	4770      	bx	lr
 8019dce:	bf00      	nop

08019dd0 <_ActuationCommand__max_serialized_size>:
 8019dd0:	b538      	push	{r3, r4, r5, lr}
 8019dd2:	2108      	movs	r1, #8
 8019dd4:	2000      	movs	r0, #0
 8019dd6:	f7f8 fc89 	bl	80126ec <ucdr_alignment>
 8019dda:	2108      	movs	r1, #8
 8019ddc:	1845      	adds	r5, r0, r1
 8019dde:	4628      	mov	r0, r5
 8019de0:	f7f8 fc84 	bl	80126ec <ucdr_alignment>
 8019de4:	2108      	movs	r1, #8
 8019de6:	1844      	adds	r4, r0, r1
 8019de8:	442c      	add	r4, r5
 8019dea:	4620      	mov	r0, r4
 8019dec:	f7f8 fc7e 	bl	80126ec <ucdr_alignment>
 8019df0:	3008      	adds	r0, #8
 8019df2:	4420      	add	r0, r4
 8019df4:	bd38      	pop	{r3, r4, r5, pc}
 8019df6:	bf00      	nop

08019df8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8019df8:	b570      	push	{r4, r5, r6, lr}
 8019dfa:	460c      	mov	r4, r1
 8019dfc:	2301      	movs	r3, #1
 8019dfe:	2108      	movs	r1, #8
 8019e00:	f104 0508 	add.w	r5, r4, #8
 8019e04:	7003      	strb	r3, [r0, #0]
 8019e06:	4620      	mov	r0, r4
 8019e08:	f1c4 0408 	rsb	r4, r4, #8
 8019e0c:	f7f8 fc6e 	bl	80126ec <ucdr_alignment>
 8019e10:	1946      	adds	r6, r0, r5
 8019e12:	2108      	movs	r1, #8
 8019e14:	4630      	mov	r0, r6
 8019e16:	f7f8 fc69 	bl	80126ec <ucdr_alignment>
 8019e1a:	2108      	movs	r1, #8
 8019e1c:	1845      	adds	r5, r0, r1
 8019e1e:	4435      	add	r5, r6
 8019e20:	4628      	mov	r0, r5
 8019e22:	f7f8 fc63 	bl	80126ec <ucdr_alignment>
 8019e26:	4420      	add	r0, r4
 8019e28:	4428      	add	r0, r5
 8019e2a:	bd70      	pop	{r4, r5, r6, pc}

08019e2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8019e2c:	4800      	ldr	r0, [pc, #0]	@ (8019e30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 8019e2e:	4770      	bx	lr
 8019e30:	24001344 	.word	0x24001344

08019e34 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8019e34:	b1b8      	cbz	r0, 8019e66 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8019e36:	b538      	push	{r3, r4, r5, lr}
 8019e38:	460d      	mov	r5, r1
 8019e3a:	2108      	movs	r1, #8
 8019e3c:	4628      	mov	r0, r5
 8019e3e:	f7f8 fc55 	bl	80126ec <ucdr_alignment>
 8019e42:	f105 0308 	add.w	r3, r5, #8
 8019e46:	2108      	movs	r1, #8
 8019e48:	f1c5 0508 	rsb	r5, r5, #8
 8019e4c:	181c      	adds	r4, r3, r0
 8019e4e:	4620      	mov	r0, r4
 8019e50:	f7f8 fc4c 	bl	80126ec <ucdr_alignment>
 8019e54:	2108      	movs	r1, #8
 8019e56:	4408      	add	r0, r1
 8019e58:	4404      	add	r4, r0
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	f7f8 fc46 	bl	80126ec <ucdr_alignment>
 8019e60:	4428      	add	r0, r5
 8019e62:	4420      	add	r0, r4
 8019e64:	bd38      	pop	{r3, r4, r5, pc}
 8019e66:	4770      	bx	lr

08019e68 <_ActuationStatus__cdr_deserialize>:
 8019e68:	b538      	push	{r3, r4, r5, lr}
 8019e6a:	460c      	mov	r4, r1
 8019e6c:	b171      	cbz	r1, 8019e8c <_ActuationStatus__cdr_deserialize+0x24>
 8019e6e:	4605      	mov	r5, r0
 8019e70:	f7f8 fb1e 	bl	80124b0 <ucdr_deserialize_double>
 8019e74:	f104 0108 	add.w	r1, r4, #8
 8019e78:	4628      	mov	r0, r5
 8019e7a:	f7f8 fb19 	bl	80124b0 <ucdr_deserialize_double>
 8019e7e:	f104 0110 	add.w	r1, r4, #16
 8019e82:	4628      	mov	r0, r5
 8019e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e88:	f7f8 bb12 	b.w	80124b0 <ucdr_deserialize_double>
 8019e8c:	4608      	mov	r0, r1
 8019e8e:	bd38      	pop	{r3, r4, r5, pc}

08019e90 <_ActuationStatus__cdr_serialize>:
 8019e90:	b198      	cbz	r0, 8019eba <_ActuationStatus__cdr_serialize+0x2a>
 8019e92:	b538      	push	{r3, r4, r5, lr}
 8019e94:	460d      	mov	r5, r1
 8019e96:	4604      	mov	r4, r0
 8019e98:	ed90 0b00 	vldr	d0, [r0]
 8019e9c:	4608      	mov	r0, r1
 8019e9e:	f7f8 fa37 	bl	8012310 <ucdr_serialize_double>
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	ed94 0b02 	vldr	d0, [r4, #8]
 8019ea8:	f7f8 fa32 	bl	8012310 <ucdr_serialize_double>
 8019eac:	4628      	mov	r0, r5
 8019eae:	ed94 0b04 	vldr	d0, [r4, #16]
 8019eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019eb6:	f7f8 ba2b 	b.w	8012310 <ucdr_serialize_double>
 8019eba:	4770      	bx	lr

08019ebc <_ActuationStatus__get_serialized_size>:
 8019ebc:	b190      	cbz	r0, 8019ee4 <_ActuationStatus__get_serialized_size+0x28>
 8019ebe:	2108      	movs	r1, #8
 8019ec0:	2000      	movs	r0, #0
 8019ec2:	b510      	push	{r4, lr}
 8019ec4:	f7f8 fc12 	bl	80126ec <ucdr_alignment>
 8019ec8:	2108      	movs	r1, #8
 8019eca:	1844      	adds	r4, r0, r1
 8019ecc:	4620      	mov	r0, r4
 8019ece:	f7f8 fc0d 	bl	80126ec <ucdr_alignment>
 8019ed2:	2108      	movs	r1, #8
 8019ed4:	4408      	add	r0, r1
 8019ed6:	4404      	add	r4, r0
 8019ed8:	4620      	mov	r0, r4
 8019eda:	f7f8 fc07 	bl	80126ec <ucdr_alignment>
 8019ede:	3008      	adds	r0, #8
 8019ee0:	4420      	add	r0, r4
 8019ee2:	bd10      	pop	{r4, pc}
 8019ee4:	4770      	bx	lr
 8019ee6:	bf00      	nop

08019ee8 <_ActuationStatus__max_serialized_size>:
 8019ee8:	b538      	push	{r3, r4, r5, lr}
 8019eea:	2108      	movs	r1, #8
 8019eec:	2000      	movs	r0, #0
 8019eee:	f7f8 fbfd 	bl	80126ec <ucdr_alignment>
 8019ef2:	2108      	movs	r1, #8
 8019ef4:	1845      	adds	r5, r0, r1
 8019ef6:	4628      	mov	r0, r5
 8019ef8:	f7f8 fbf8 	bl	80126ec <ucdr_alignment>
 8019efc:	2108      	movs	r1, #8
 8019efe:	1844      	adds	r4, r0, r1
 8019f00:	442c      	add	r4, r5
 8019f02:	4620      	mov	r0, r4
 8019f04:	f7f8 fbf2 	bl	80126ec <ucdr_alignment>
 8019f08:	3008      	adds	r0, #8
 8019f0a:	4420      	add	r0, r4
 8019f0c:	bd38      	pop	{r3, r4, r5, pc}
 8019f0e:	bf00      	nop

08019f10 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8019f10:	b570      	push	{r4, r5, r6, lr}
 8019f12:	460c      	mov	r4, r1
 8019f14:	2301      	movs	r3, #1
 8019f16:	2108      	movs	r1, #8
 8019f18:	f104 0508 	add.w	r5, r4, #8
 8019f1c:	7003      	strb	r3, [r0, #0]
 8019f1e:	4620      	mov	r0, r4
 8019f20:	f1c4 0408 	rsb	r4, r4, #8
 8019f24:	f7f8 fbe2 	bl	80126ec <ucdr_alignment>
 8019f28:	1946      	adds	r6, r0, r5
 8019f2a:	2108      	movs	r1, #8
 8019f2c:	4630      	mov	r0, r6
 8019f2e:	f7f8 fbdd 	bl	80126ec <ucdr_alignment>
 8019f32:	2108      	movs	r1, #8
 8019f34:	1845      	adds	r5, r0, r1
 8019f36:	4435      	add	r5, r6
 8019f38:	4628      	mov	r0, r5
 8019f3a:	f7f8 fbd7 	bl	80126ec <ucdr_alignment>
 8019f3e:	4420      	add	r0, r4
 8019f40:	4428      	add	r0, r5
 8019f42:	bd70      	pop	{r4, r5, r6, pc}

08019f44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8019f44:	4800      	ldr	r0, [pc, #0]	@ (8019f48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8019f46:	4770      	bx	lr
 8019f48:	2400136c 	.word	0x2400136c

08019f4c <ucdr_serialize_endian_array_char>:
 8019f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f50:	4619      	mov	r1, r3
 8019f52:	461f      	mov	r7, r3
 8019f54:	4605      	mov	r5, r0
 8019f56:	4690      	mov	r8, r2
 8019f58:	f7f8 fb70 	bl	801263c <ucdr_check_buffer_available_for>
 8019f5c:	b9e0      	cbnz	r0, 8019f98 <ucdr_serialize_endian_array_char+0x4c>
 8019f5e:	463e      	mov	r6, r7
 8019f60:	e00b      	b.n	8019f7a <ucdr_serialize_endian_array_char+0x2e>
 8019f62:	4441      	add	r1, r8
 8019f64:	68a8      	ldr	r0, [r5, #8]
 8019f66:	4622      	mov	r2, r4
 8019f68:	1b36      	subs	r6, r6, r4
 8019f6a:	f005 fe82 	bl	801fc72 <memcpy>
 8019f6e:	68ab      	ldr	r3, [r5, #8]
 8019f70:	6928      	ldr	r0, [r5, #16]
 8019f72:	4423      	add	r3, r4
 8019f74:	4420      	add	r0, r4
 8019f76:	60ab      	str	r3, [r5, #8]
 8019f78:	6128      	str	r0, [r5, #16]
 8019f7a:	4631      	mov	r1, r6
 8019f7c:	2201      	movs	r2, #1
 8019f7e:	4628      	mov	r0, r5
 8019f80:	f7f8 fbe6 	bl	8012750 <ucdr_check_final_buffer_behavior_array>
 8019f84:	1bb9      	subs	r1, r7, r6
 8019f86:	4604      	mov	r4, r0
 8019f88:	2800      	cmp	r0, #0
 8019f8a:	d1ea      	bne.n	8019f62 <ucdr_serialize_endian_array_char+0x16>
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	7da8      	ldrb	r0, [r5, #22]
 8019f90:	756b      	strb	r3, [r5, #21]
 8019f92:	4058      	eors	r0, r3
 8019f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f98:	463a      	mov	r2, r7
 8019f9a:	4641      	mov	r1, r8
 8019f9c:	68a8      	ldr	r0, [r5, #8]
 8019f9e:	f005 fe68 	bl	801fc72 <memcpy>
 8019fa2:	68aa      	ldr	r2, [r5, #8]
 8019fa4:	692b      	ldr	r3, [r5, #16]
 8019fa6:	443a      	add	r2, r7
 8019fa8:	443b      	add	r3, r7
 8019faa:	60aa      	str	r2, [r5, #8]
 8019fac:	612b      	str	r3, [r5, #16]
 8019fae:	e7ed      	b.n	8019f8c <ucdr_serialize_endian_array_char+0x40>

08019fb0 <ucdr_deserialize_endian_array_char>:
 8019fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fb4:	4619      	mov	r1, r3
 8019fb6:	461f      	mov	r7, r3
 8019fb8:	4605      	mov	r5, r0
 8019fba:	4690      	mov	r8, r2
 8019fbc:	f7f8 fb3e 	bl	801263c <ucdr_check_buffer_available_for>
 8019fc0:	b9e8      	cbnz	r0, 8019ffe <ucdr_deserialize_endian_array_char+0x4e>
 8019fc2:	463e      	mov	r6, r7
 8019fc4:	e00c      	b.n	8019fe0 <ucdr_deserialize_endian_array_char+0x30>
 8019fc6:	eb08 0003 	add.w	r0, r8, r3
 8019fca:	68a9      	ldr	r1, [r5, #8]
 8019fcc:	4622      	mov	r2, r4
 8019fce:	1b36      	subs	r6, r6, r4
 8019fd0:	f005 fe4f 	bl	801fc72 <memcpy>
 8019fd4:	68ab      	ldr	r3, [r5, #8]
 8019fd6:	6928      	ldr	r0, [r5, #16]
 8019fd8:	4423      	add	r3, r4
 8019fda:	4420      	add	r0, r4
 8019fdc:	60ab      	str	r3, [r5, #8]
 8019fde:	6128      	str	r0, [r5, #16]
 8019fe0:	4631      	mov	r1, r6
 8019fe2:	2201      	movs	r2, #1
 8019fe4:	4628      	mov	r0, r5
 8019fe6:	f7f8 fbb3 	bl	8012750 <ucdr_check_final_buffer_behavior_array>
 8019fea:	1bbb      	subs	r3, r7, r6
 8019fec:	4604      	mov	r4, r0
 8019fee:	2800      	cmp	r0, #0
 8019ff0:	d1e9      	bne.n	8019fc6 <ucdr_deserialize_endian_array_char+0x16>
 8019ff2:	2301      	movs	r3, #1
 8019ff4:	7da8      	ldrb	r0, [r5, #22]
 8019ff6:	756b      	strb	r3, [r5, #21]
 8019ff8:	4058      	eors	r0, r3
 8019ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ffe:	463a      	mov	r2, r7
 801a000:	68a9      	ldr	r1, [r5, #8]
 801a002:	4640      	mov	r0, r8
 801a004:	f005 fe35 	bl	801fc72 <memcpy>
 801a008:	68aa      	ldr	r2, [r5, #8]
 801a00a:	692b      	ldr	r3, [r5, #16]
 801a00c:	443a      	add	r2, r7
 801a00e:	443b      	add	r3, r7
 801a010:	60aa      	str	r2, [r5, #8]
 801a012:	612b      	str	r3, [r5, #16]
 801a014:	e7ed      	b.n	8019ff2 <ucdr_deserialize_endian_array_char+0x42>
 801a016:	bf00      	nop

0801a018 <ucdr_serialize_array_uint8_t>:
 801a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a01c:	4688      	mov	r8, r1
 801a01e:	4611      	mov	r1, r2
 801a020:	4617      	mov	r7, r2
 801a022:	4605      	mov	r5, r0
 801a024:	f7f8 fb0a 	bl	801263c <ucdr_check_buffer_available_for>
 801a028:	b9e0      	cbnz	r0, 801a064 <ucdr_serialize_array_uint8_t+0x4c>
 801a02a:	463e      	mov	r6, r7
 801a02c:	e00b      	b.n	801a046 <ucdr_serialize_array_uint8_t+0x2e>
 801a02e:	4441      	add	r1, r8
 801a030:	68a8      	ldr	r0, [r5, #8]
 801a032:	4622      	mov	r2, r4
 801a034:	1b36      	subs	r6, r6, r4
 801a036:	f005 fe1c 	bl	801fc72 <memcpy>
 801a03a:	68ab      	ldr	r3, [r5, #8]
 801a03c:	6928      	ldr	r0, [r5, #16]
 801a03e:	4423      	add	r3, r4
 801a040:	4420      	add	r0, r4
 801a042:	60ab      	str	r3, [r5, #8]
 801a044:	6128      	str	r0, [r5, #16]
 801a046:	4631      	mov	r1, r6
 801a048:	2201      	movs	r2, #1
 801a04a:	4628      	mov	r0, r5
 801a04c:	f7f8 fb80 	bl	8012750 <ucdr_check_final_buffer_behavior_array>
 801a050:	1bb9      	subs	r1, r7, r6
 801a052:	4604      	mov	r4, r0
 801a054:	2800      	cmp	r0, #0
 801a056:	d1ea      	bne.n	801a02e <ucdr_serialize_array_uint8_t+0x16>
 801a058:	2301      	movs	r3, #1
 801a05a:	7da8      	ldrb	r0, [r5, #22]
 801a05c:	756b      	strb	r3, [r5, #21]
 801a05e:	4058      	eors	r0, r3
 801a060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a064:	463a      	mov	r2, r7
 801a066:	4641      	mov	r1, r8
 801a068:	68a8      	ldr	r0, [r5, #8]
 801a06a:	f005 fe02 	bl	801fc72 <memcpy>
 801a06e:	68aa      	ldr	r2, [r5, #8]
 801a070:	692b      	ldr	r3, [r5, #16]
 801a072:	443a      	add	r2, r7
 801a074:	443b      	add	r3, r7
 801a076:	60aa      	str	r2, [r5, #8]
 801a078:	612b      	str	r3, [r5, #16]
 801a07a:	e7ed      	b.n	801a058 <ucdr_serialize_array_uint8_t+0x40>

0801a07c <ucdr_serialize_endian_array_uint8_t>:
 801a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a080:	4619      	mov	r1, r3
 801a082:	461f      	mov	r7, r3
 801a084:	4605      	mov	r5, r0
 801a086:	4690      	mov	r8, r2
 801a088:	f7f8 fad8 	bl	801263c <ucdr_check_buffer_available_for>
 801a08c:	b9e0      	cbnz	r0, 801a0c8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801a08e:	463e      	mov	r6, r7
 801a090:	e00b      	b.n	801a0aa <ucdr_serialize_endian_array_uint8_t+0x2e>
 801a092:	4441      	add	r1, r8
 801a094:	68a8      	ldr	r0, [r5, #8]
 801a096:	4622      	mov	r2, r4
 801a098:	1b36      	subs	r6, r6, r4
 801a09a:	f005 fdea 	bl	801fc72 <memcpy>
 801a09e:	68ab      	ldr	r3, [r5, #8]
 801a0a0:	6928      	ldr	r0, [r5, #16]
 801a0a2:	4423      	add	r3, r4
 801a0a4:	4420      	add	r0, r4
 801a0a6:	60ab      	str	r3, [r5, #8]
 801a0a8:	6128      	str	r0, [r5, #16]
 801a0aa:	4631      	mov	r1, r6
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	f7f8 fb4e 	bl	8012750 <ucdr_check_final_buffer_behavior_array>
 801a0b4:	1bb9      	subs	r1, r7, r6
 801a0b6:	4604      	mov	r4, r0
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	d1ea      	bne.n	801a092 <ucdr_serialize_endian_array_uint8_t+0x16>
 801a0bc:	2301      	movs	r3, #1
 801a0be:	7da8      	ldrb	r0, [r5, #22]
 801a0c0:	756b      	strb	r3, [r5, #21]
 801a0c2:	4058      	eors	r0, r3
 801a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0c8:	463a      	mov	r2, r7
 801a0ca:	4641      	mov	r1, r8
 801a0cc:	68a8      	ldr	r0, [r5, #8]
 801a0ce:	f005 fdd0 	bl	801fc72 <memcpy>
 801a0d2:	68aa      	ldr	r2, [r5, #8]
 801a0d4:	692b      	ldr	r3, [r5, #16]
 801a0d6:	443a      	add	r2, r7
 801a0d8:	443b      	add	r3, r7
 801a0da:	60aa      	str	r2, [r5, #8]
 801a0dc:	612b      	str	r3, [r5, #16]
 801a0de:	e7ed      	b.n	801a0bc <ucdr_serialize_endian_array_uint8_t+0x40>

0801a0e0 <ucdr_deserialize_array_uint8_t>:
 801a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0e4:	4688      	mov	r8, r1
 801a0e6:	4611      	mov	r1, r2
 801a0e8:	4617      	mov	r7, r2
 801a0ea:	4605      	mov	r5, r0
 801a0ec:	f7f8 faa6 	bl	801263c <ucdr_check_buffer_available_for>
 801a0f0:	b9e8      	cbnz	r0, 801a12e <ucdr_deserialize_array_uint8_t+0x4e>
 801a0f2:	463e      	mov	r6, r7
 801a0f4:	e00c      	b.n	801a110 <ucdr_deserialize_array_uint8_t+0x30>
 801a0f6:	eb08 0003 	add.w	r0, r8, r3
 801a0fa:	68a9      	ldr	r1, [r5, #8]
 801a0fc:	4622      	mov	r2, r4
 801a0fe:	1b36      	subs	r6, r6, r4
 801a100:	f005 fdb7 	bl	801fc72 <memcpy>
 801a104:	68ab      	ldr	r3, [r5, #8]
 801a106:	6928      	ldr	r0, [r5, #16]
 801a108:	4423      	add	r3, r4
 801a10a:	4420      	add	r0, r4
 801a10c:	60ab      	str	r3, [r5, #8]
 801a10e:	6128      	str	r0, [r5, #16]
 801a110:	4631      	mov	r1, r6
 801a112:	2201      	movs	r2, #1
 801a114:	4628      	mov	r0, r5
 801a116:	f7f8 fb1b 	bl	8012750 <ucdr_check_final_buffer_behavior_array>
 801a11a:	1bbb      	subs	r3, r7, r6
 801a11c:	4604      	mov	r4, r0
 801a11e:	2800      	cmp	r0, #0
 801a120:	d1e9      	bne.n	801a0f6 <ucdr_deserialize_array_uint8_t+0x16>
 801a122:	2301      	movs	r3, #1
 801a124:	7da8      	ldrb	r0, [r5, #22]
 801a126:	756b      	strb	r3, [r5, #21]
 801a128:	4058      	eors	r0, r3
 801a12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a12e:	463a      	mov	r2, r7
 801a130:	68a9      	ldr	r1, [r5, #8]
 801a132:	4640      	mov	r0, r8
 801a134:	f005 fd9d 	bl	801fc72 <memcpy>
 801a138:	68aa      	ldr	r2, [r5, #8]
 801a13a:	692b      	ldr	r3, [r5, #16]
 801a13c:	443a      	add	r2, r7
 801a13e:	443b      	add	r3, r7
 801a140:	60aa      	str	r2, [r5, #8]
 801a142:	612b      	str	r3, [r5, #16]
 801a144:	e7ed      	b.n	801a122 <ucdr_deserialize_array_uint8_t+0x42>
 801a146:	bf00      	nop

0801a148 <ucdr_deserialize_endian_array_uint8_t>:
 801a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a14c:	4619      	mov	r1, r3
 801a14e:	461f      	mov	r7, r3
 801a150:	4605      	mov	r5, r0
 801a152:	4690      	mov	r8, r2
 801a154:	f7f8 fa72 	bl	801263c <ucdr_check_buffer_available_for>
 801a158:	b9e8      	cbnz	r0, 801a196 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 801a15a:	463e      	mov	r6, r7
 801a15c:	e00c      	b.n	801a178 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801a15e:	eb08 0003 	add.w	r0, r8, r3
 801a162:	68a9      	ldr	r1, [r5, #8]
 801a164:	4622      	mov	r2, r4
 801a166:	1b36      	subs	r6, r6, r4
 801a168:	f005 fd83 	bl	801fc72 <memcpy>
 801a16c:	68ab      	ldr	r3, [r5, #8]
 801a16e:	6928      	ldr	r0, [r5, #16]
 801a170:	4423      	add	r3, r4
 801a172:	4420      	add	r0, r4
 801a174:	60ab      	str	r3, [r5, #8]
 801a176:	6128      	str	r0, [r5, #16]
 801a178:	4631      	mov	r1, r6
 801a17a:	2201      	movs	r2, #1
 801a17c:	4628      	mov	r0, r5
 801a17e:	f7f8 fae7 	bl	8012750 <ucdr_check_final_buffer_behavior_array>
 801a182:	1bbb      	subs	r3, r7, r6
 801a184:	4604      	mov	r4, r0
 801a186:	2800      	cmp	r0, #0
 801a188:	d1e9      	bne.n	801a15e <ucdr_deserialize_endian_array_uint8_t+0x16>
 801a18a:	2301      	movs	r3, #1
 801a18c:	7da8      	ldrb	r0, [r5, #22]
 801a18e:	756b      	strb	r3, [r5, #21]
 801a190:	4058      	eors	r0, r3
 801a192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a196:	463a      	mov	r2, r7
 801a198:	68a9      	ldr	r1, [r5, #8]
 801a19a:	4640      	mov	r0, r8
 801a19c:	f005 fd69 	bl	801fc72 <memcpy>
 801a1a0:	68aa      	ldr	r2, [r5, #8]
 801a1a2:	692b      	ldr	r3, [r5, #16]
 801a1a4:	443a      	add	r2, r7
 801a1a6:	443b      	add	r3, r7
 801a1a8:	60aa      	str	r2, [r5, #8]
 801a1aa:	612b      	str	r3, [r5, #16]
 801a1ac:	e7ed      	b.n	801a18a <ucdr_deserialize_endian_array_uint8_t+0x42>
 801a1ae:	bf00      	nop

0801a1b0 <uxr_buffer_delete_entity>:
 801a1b0:	b510      	push	{r4, lr}
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	b08e      	sub	sp, #56	@ 0x38
 801a1b6:	4604      	mov	r4, r0
 801a1b8:	9103      	str	r1, [sp, #12]
 801a1ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801a1be:	2303      	movs	r3, #3
 801a1c0:	2204      	movs	r2, #4
 801a1c2:	9300      	str	r3, [sp, #0]
 801a1c4:	ab06      	add	r3, sp, #24
 801a1c6:	f001 fb77 	bl	801b8b8 <uxr_prepare_stream_to_write_submessage>
 801a1ca:	b918      	cbnz	r0, 801a1d4 <uxr_buffer_delete_entity+0x24>
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	4620      	mov	r0, r4
 801a1d0:	b00e      	add	sp, #56	@ 0x38
 801a1d2:	bd10      	pop	{r4, pc}
 801a1d4:	9902      	ldr	r1, [sp, #8]
 801a1d6:	aa05      	add	r2, sp, #20
 801a1d8:	4620      	mov	r0, r4
 801a1da:	f001 fca9 	bl	801bb30 <uxr_init_base_object_request>
 801a1de:	4604      	mov	r4, r0
 801a1e0:	a905      	add	r1, sp, #20
 801a1e2:	a806      	add	r0, sp, #24
 801a1e4:	f003 fa5a 	bl	801d69c <uxr_serialize_DELETE_Payload>
 801a1e8:	4620      	mov	r0, r4
 801a1ea:	b00e      	add	sp, #56	@ 0x38
 801a1ec:	bd10      	pop	{r4, pc}
 801a1ee:	bf00      	nop

0801a1f0 <uxr_common_create_entity>:
 801a1f0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801a1f4:	b510      	push	{r4, lr}
 801a1f6:	f1bc 0f01 	cmp.w	ip, #1
 801a1fa:	b08c      	sub	sp, #48	@ 0x30
 801a1fc:	4604      	mov	r4, r0
 801a1fe:	9202      	str	r2, [sp, #8]
 801a200:	bf0c      	ite	eq
 801a202:	f003 0201 	andeq.w	r2, r3, #1
 801a206:	2200      	movne	r2, #0
 801a208:	330e      	adds	r3, #14
 801a20a:	9103      	str	r1, [sp, #12]
 801a20c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801a210:	441a      	add	r2, r3
 801a212:	ab04      	add	r3, sp, #16
 801a214:	9101      	str	r1, [sp, #4]
 801a216:	2101      	movs	r1, #1
 801a218:	b292      	uxth	r2, r2
 801a21a:	9100      	str	r1, [sp, #0]
 801a21c:	9903      	ldr	r1, [sp, #12]
 801a21e:	f001 fb4b 	bl	801b8b8 <uxr_prepare_stream_to_write_submessage>
 801a222:	b918      	cbnz	r0, 801a22c <uxr_common_create_entity+0x3c>
 801a224:	4604      	mov	r4, r0
 801a226:	4620      	mov	r0, r4
 801a228:	b00c      	add	sp, #48	@ 0x30
 801a22a:	bd10      	pop	{r4, pc}
 801a22c:	9902      	ldr	r1, [sp, #8]
 801a22e:	4620      	mov	r0, r4
 801a230:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a232:	f001 fc7d 	bl	801bb30 <uxr_init_base_object_request>
 801a236:	4604      	mov	r4, r0
 801a238:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801a23a:	a804      	add	r0, sp, #16
 801a23c:	f003 f988 	bl	801d550 <uxr_serialize_CREATE_Payload>
 801a240:	4620      	mov	r0, r4
 801a242:	b00c      	add	sp, #48	@ 0x30
 801a244:	bd10      	pop	{r4, pc}
 801a246:	bf00      	nop

0801a248 <uxr_buffer_create_participant_bin>:
 801a248:	b570      	push	{r4, r5, r6, lr}
 801a24a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801a24e:	4605      	mov	r5, r0
 801a250:	ac11      	add	r4, sp, #68	@ 0x44
 801a252:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801a256:	2303      	movs	r3, #3
 801a258:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801a25c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a260:	7223      	strb	r3, [r4, #8]
 801a262:	2300      	movs	r3, #0
 801a264:	2201      	movs	r2, #1
 801a266:	f88d 3014 	strb.w	r3, [sp, #20]
 801a26a:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801a26c:	7122      	strb	r2, [r4, #4]
 801a26e:	b1cb      	cbz	r3, 801a2a4 <uxr_buffer_create_participant_bin+0x5c>
 801a270:	f88d 201c 	strb.w	r2, [sp, #28]
 801a274:	9308      	str	r3, [sp, #32]
 801a276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a27a:	a915      	add	r1, sp, #84	@ 0x54
 801a27c:	a809      	add	r0, sp, #36	@ 0x24
 801a27e:	f7f8 fa31 	bl	80126e4 <ucdr_init_buffer>
 801a282:	a905      	add	r1, sp, #20
 801a284:	a809      	add	r0, sp, #36	@ 0x24
 801a286:	f002 fd19 	bl	801ccbc <uxr_serialize_OBJK_DomainParticipant_Binary>
 801a28a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a28c:	9600      	str	r6, [sp, #0]
 801a28e:	4628      	mov	r0, r5
 801a290:	9401      	str	r4, [sp, #4]
 801a292:	60e3      	str	r3, [r4, #12]
 801a294:	b29b      	uxth	r3, r3
 801a296:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a29a:	f7ff ffa9 	bl	801a1f0 <uxr_common_create_entity>
 801a29e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801a2a2:	bd70      	pop	{r4, r5, r6, pc}
 801a2a4:	f88d 301c 	strb.w	r3, [sp, #28]
 801a2a8:	e7e5      	b.n	801a276 <uxr_buffer_create_participant_bin+0x2e>
 801a2aa:	bf00      	nop

0801a2ac <uxr_buffer_create_topic_bin>:
 801a2ac:	b570      	push	{r4, r5, r6, lr}
 801a2ae:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	4618      	mov	r0, r3
 801a2b6:	9105      	str	r1, [sp, #20]
 801a2b8:	a997      	add	r1, sp, #604	@ 0x25c
 801a2ba:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801a2be:	ac13      	add	r4, sp, #76	@ 0x4c
 801a2c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801a2c4:	2302      	movs	r3, #2
 801a2c6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801a2ca:	f000 fa8d 	bl	801a7e8 <uxr_object_id_to_raw>
 801a2ce:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801a2d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2d4:	a917      	add	r1, sp, #92	@ 0x5c
 801a2d6:	a80b      	add	r0, sp, #44	@ 0x2c
 801a2d8:	9306      	str	r3, [sp, #24]
 801a2da:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801a2dc:	930a      	str	r3, [sp, #40]	@ 0x28
 801a2de:	2303      	movs	r3, #3
 801a2e0:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801a2e4:	2301      	movs	r3, #1
 801a2e6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	f88d 301c 	strb.w	r3, [sp, #28]
 801a2f0:	f7f8 f9f8 	bl	80126e4 <ucdr_init_buffer>
 801a2f4:	a906      	add	r1, sp, #24
 801a2f6:	a80b      	add	r0, sp, #44	@ 0x2c
 801a2f8:	f002 fd02 	bl	801cd00 <uxr_serialize_OBJK_Topic_Binary>
 801a2fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2fe:	4628      	mov	r0, r5
 801a300:	9600      	str	r6, [sp, #0]
 801a302:	9316      	str	r3, [sp, #88]	@ 0x58
 801a304:	b29b      	uxth	r3, r3
 801a306:	9401      	str	r4, [sp, #4]
 801a308:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801a30c:	f7ff ff70 	bl	801a1f0 <uxr_common_create_entity>
 801a310:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801a314:	bd70      	pop	{r4, r5, r6, pc}
 801a316:	bf00      	nop

0801a318 <uxr_buffer_create_publisher_bin>:
 801a318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a31a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801a31e:	2603      	movs	r6, #3
 801a320:	4605      	mov	r5, r0
 801a322:	4618      	mov	r0, r3
 801a324:	9105      	str	r1, [sp, #20]
 801a326:	a992      	add	r1, sp, #584	@ 0x248
 801a328:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801a32c:	ac0e      	add	r4, sp, #56	@ 0x38
 801a32e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801a332:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801a336:	f000 fa57 	bl	801a7e8 <uxr_object_id_to_raw>
 801a33a:	2300      	movs	r3, #0
 801a33c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a340:	a912      	add	r1, sp, #72	@ 0x48
 801a342:	a806      	add	r0, sp, #24
 801a344:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801a348:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801a34c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801a350:	f7f8 f9c8 	bl	80126e4 <ucdr_init_buffer>
 801a354:	a993      	add	r1, sp, #588	@ 0x24c
 801a356:	a806      	add	r0, sp, #24
 801a358:	f002 fd86 	bl	801ce68 <uxr_serialize_OBJK_Publisher_Binary>
 801a35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a35e:	4628      	mov	r0, r5
 801a360:	9700      	str	r7, [sp, #0]
 801a362:	9311      	str	r3, [sp, #68]	@ 0x44
 801a364:	b29b      	uxth	r3, r3
 801a366:	9401      	str	r4, [sp, #4]
 801a368:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801a36c:	f7ff ff40 	bl	801a1f0 <uxr_common_create_entity>
 801a370:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801a374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a376:	bf00      	nop

0801a378 <uxr_buffer_create_subscriber_bin>:
 801a378:	b570      	push	{r4, r5, r6, lr}
 801a37a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801a37e:	4605      	mov	r5, r0
 801a380:	4618      	mov	r0, r3
 801a382:	9105      	str	r1, [sp, #20]
 801a384:	a992      	add	r1, sp, #584	@ 0x248
 801a386:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 801a38a:	ac0e      	add	r4, sp, #56	@ 0x38
 801a38c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801a390:	2304      	movs	r3, #4
 801a392:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801a396:	f000 fa27 	bl	801a7e8 <uxr_object_id_to_raw>
 801a39a:	2300      	movs	r3, #0
 801a39c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a3a0:	a912      	add	r1, sp, #72	@ 0x48
 801a3a2:	a806      	add	r0, sp, #24
 801a3a4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801a3a8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801a3ac:	2303      	movs	r3, #3
 801a3ae:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801a3b2:	f7f8 f997 	bl	80126e4 <ucdr_init_buffer>
 801a3b6:	a993      	add	r1, sp, #588	@ 0x24c
 801a3b8:	a806      	add	r0, sp, #24
 801a3ba:	f002 fe05 	bl	801cfc8 <uxr_serialize_OBJK_Subscriber_Binary>
 801a3be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a3c0:	4628      	mov	r0, r5
 801a3c2:	9600      	str	r6, [sp, #0]
 801a3c4:	9311      	str	r3, [sp, #68]	@ 0x44
 801a3c6:	b29b      	uxth	r3, r3
 801a3c8:	9401      	str	r4, [sp, #4]
 801a3ca:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801a3ce:	f7ff ff0f 	bl	801a1f0 <uxr_common_create_entity>
 801a3d2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801a3d6:	bd70      	pop	{r4, r5, r6, pc}

0801a3d8 <uxr_buffer_create_datawriter_bin>:
 801a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3dc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801a3e0:	4606      	mov	r6, r0
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	2703      	movs	r7, #3
 801a3e6:	ac1d      	add	r4, sp, #116	@ 0x74
 801a3e8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801a3ec:	9105      	str	r1, [sp, #20]
 801a3ee:	a9a1      	add	r1, sp, #644	@ 0x284
 801a3f0:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801a3f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801a3f8:	2305      	movs	r3, #5
 801a3fa:	7123      	strb	r3, [r4, #4]
 801a3fc:	f000 f9f4 	bl	801a7e8 <uxr_object_id_to_raw>
 801a400:	a90e      	add	r1, sp, #56	@ 0x38
 801a402:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801a404:	7227      	strb	r7, [r4, #8]
 801a406:	f000 f9ef 	bl	801a7e8 <uxr_object_id_to_raw>
 801a40a:	2300      	movs	r3, #0
 801a40c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801a410:	3d00      	subs	r5, #0
 801a412:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 801a416:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801a41a:	bf18      	it	ne
 801a41c:	2501      	movne	r5, #1
 801a41e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801a422:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801a426:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801a42a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801a42e:	2301      	movs	r3, #1
 801a430:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801a434:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801a438:	bb8a      	cbnz	r2, 801a49e <uxr_buffer_create_datawriter_bin+0xc6>
 801a43a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801a43e:	f04f 0c13 	mov.w	ip, #19
 801a442:	250b      	movs	r5, #11
 801a444:	2221      	movs	r2, #33	@ 0x21
 801a446:	2111      	movs	r1, #17
 801a448:	2009      	movs	r0, #9
 801a44a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801a44e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801a452:	b923      	cbnz	r3, 801a45e <uxr_buffer_create_datawriter_bin+0x86>
 801a454:	4672      	mov	r2, lr
 801a456:	4661      	mov	r1, ip
 801a458:	4628      	mov	r0, r5
 801a45a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801a45e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801a462:	2b01      	cmp	r3, #1
 801a464:	d025      	beq.n	801a4b2 <uxr_buffer_create_datawriter_bin+0xda>
 801a466:	2b03      	cmp	r3, #3
 801a468:	d029      	beq.n	801a4be <uxr_buffer_create_datawriter_bin+0xe6>
 801a46a:	b32b      	cbz	r3, 801a4b8 <uxr_buffer_create_datawriter_bin+0xe0>
 801a46c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a470:	a921      	add	r1, sp, #132	@ 0x84
 801a472:	a806      	add	r0, sp, #24
 801a474:	f7f8 f936 	bl	80126e4 <ucdr_init_buffer>
 801a478:	a90e      	add	r1, sp, #56	@ 0x38
 801a47a:	a806      	add	r0, sp, #24
 801a47c:	f002 fe56 	bl	801d12c <uxr_serialize_OBJK_DataWriter_Binary>
 801a480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a482:	f8cd 8000 	str.w	r8, [sp]
 801a486:	4630      	mov	r0, r6
 801a488:	9401      	str	r4, [sp, #4]
 801a48a:	60e3      	str	r3, [r4, #12]
 801a48c:	b29b      	uxth	r3, r3
 801a48e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801a492:	f7ff fead 	bl	801a1f0 <uxr_common_create_entity>
 801a496:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801a49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a49e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801a4a2:	f04f 0c12 	mov.w	ip, #18
 801a4a6:	250a      	movs	r5, #10
 801a4a8:	2220      	movs	r2, #32
 801a4aa:	2110      	movs	r1, #16
 801a4ac:	2008      	movs	r0, #8
 801a4ae:	2702      	movs	r7, #2
 801a4b0:	e7cd      	b.n	801a44e <uxr_buffer_create_datawriter_bin+0x76>
 801a4b2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801a4b6:	e7d9      	b.n	801a46c <uxr_buffer_create_datawriter_bin+0x94>
 801a4b8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801a4bc:	e7d6      	b.n	801a46c <uxr_buffer_create_datawriter_bin+0x94>
 801a4be:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801a4c2:	e7d3      	b.n	801a46c <uxr_buffer_create_datawriter_bin+0x94>

0801a4c4 <uxr_buffer_create_datareader_bin>:
 801a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4c8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801a4cc:	4606      	mov	r6, r0
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	2703      	movs	r7, #3
 801a4d2:	ac1f      	add	r4, sp, #124	@ 0x7c
 801a4d4:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801a4d8:	9105      	str	r1, [sp, #20]
 801a4da:	a9a3      	add	r1, sp, #652	@ 0x28c
 801a4dc:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801a4e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801a4e4:	2306      	movs	r3, #6
 801a4e6:	7123      	strb	r3, [r4, #4]
 801a4e8:	f000 f97e 	bl	801a7e8 <uxr_object_id_to_raw>
 801a4ec:	a90e      	add	r1, sp, #56	@ 0x38
 801a4ee:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801a4f0:	7227      	strb	r7, [r4, #8]
 801a4f2:	f000 f979 	bl	801a7e8 <uxr_object_id_to_raw>
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801a4fc:	3d00      	subs	r5, #0
 801a4fe:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801a502:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 801a506:	bf18      	it	ne
 801a508:	2501      	movne	r5, #1
 801a50a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801a50e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801a512:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801a516:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801a51a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801a51e:	2301      	movs	r3, #1
 801a520:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 801a524:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801a528:	bb8a      	cbnz	r2, 801a58e <uxr_buffer_create_datareader_bin+0xca>
 801a52a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801a52e:	f04f 0c13 	mov.w	ip, #19
 801a532:	250b      	movs	r5, #11
 801a534:	2221      	movs	r2, #33	@ 0x21
 801a536:	2111      	movs	r1, #17
 801a538:	2009      	movs	r0, #9
 801a53a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801a53e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801a542:	b923      	cbnz	r3, 801a54e <uxr_buffer_create_datareader_bin+0x8a>
 801a544:	4672      	mov	r2, lr
 801a546:	4661      	mov	r1, ip
 801a548:	4628      	mov	r0, r5
 801a54a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801a54e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801a552:	2b01      	cmp	r3, #1
 801a554:	d025      	beq.n	801a5a2 <uxr_buffer_create_datareader_bin+0xde>
 801a556:	2b03      	cmp	r3, #3
 801a558:	d029      	beq.n	801a5ae <uxr_buffer_create_datareader_bin+0xea>
 801a55a:	b32b      	cbz	r3, 801a5a8 <uxr_buffer_create_datareader_bin+0xe4>
 801a55c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a560:	a923      	add	r1, sp, #140	@ 0x8c
 801a562:	a806      	add	r0, sp, #24
 801a564:	f7f8 f8be 	bl	80126e4 <ucdr_init_buffer>
 801a568:	a90e      	add	r1, sp, #56	@ 0x38
 801a56a:	a806      	add	r0, sp, #24
 801a56c:	f002 fda2 	bl	801d0b4 <uxr_serialize_OBJK_DataReader_Binary>
 801a570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a572:	f8cd 8000 	str.w	r8, [sp]
 801a576:	4630      	mov	r0, r6
 801a578:	9401      	str	r4, [sp, #4]
 801a57a:	60e3      	str	r3, [r4, #12]
 801a57c:	b29b      	uxth	r3, r3
 801a57e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801a582:	f7ff fe35 	bl	801a1f0 <uxr_common_create_entity>
 801a586:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801a58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a58e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801a592:	f04f 0c12 	mov.w	ip, #18
 801a596:	250a      	movs	r5, #10
 801a598:	2220      	movs	r2, #32
 801a59a:	2110      	movs	r1, #16
 801a59c:	2008      	movs	r0, #8
 801a59e:	2702      	movs	r7, #2
 801a5a0:	e7cd      	b.n	801a53e <uxr_buffer_create_datareader_bin+0x7a>
 801a5a2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801a5a6:	e7d9      	b.n	801a55c <uxr_buffer_create_datareader_bin+0x98>
 801a5a8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801a5ac:	e7d6      	b.n	801a55c <uxr_buffer_create_datareader_bin+0x98>
 801a5ae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801a5b2:	e7d3      	b.n	801a55c <uxr_buffer_create_datareader_bin+0x98>

0801a5b4 <uxr_buffer_create_replier_bin>:
 801a5b4:	b570      	push	{r4, r5, r6, lr}
 801a5b6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801a5ba:	4605      	mov	r5, r0
 801a5bc:	4618      	mov	r0, r3
 801a5be:	9105      	str	r1, [sp, #20]
 801a5c0:	a999      	add	r1, sp, #612	@ 0x264
 801a5c2:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 801a5c6:	ac15      	add	r4, sp, #84	@ 0x54
 801a5c8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801a5cc:	2308      	movs	r3, #8
 801a5ce:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 801a5d2:	f000 f909 	bl	801a7e8 <uxr_object_id_to_raw>
 801a5d6:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801a5d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a5dc:	a919      	add	r1, sp, #100	@ 0x64
 801a5de:	a80d      	add	r0, sp, #52	@ 0x34
 801a5e0:	9306      	str	r3, [sp, #24]
 801a5e2:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 801a5e4:	9307      	str	r3, [sp, #28]
 801a5e6:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801a5e8:	9308      	str	r3, [sp, #32]
 801a5ea:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801a5ec:	930c      	str	r3, [sp, #48]	@ 0x30
 801a5ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801a5f0:	930a      	str	r3, [sp, #40]	@ 0x28
 801a5f2:	2301      	movs	r3, #1
 801a5f4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801a5f8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801a5fc:	2303      	movs	r3, #3
 801a5fe:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 801a602:	f7f8 f86f 	bl	80126e4 <ucdr_init_buffer>
 801a606:	a906      	add	r1, sp, #24
 801a608:	a80d      	add	r0, sp, #52	@ 0x34
 801a60a:	f002 fdbb 	bl	801d184 <uxr_serialize_OBJK_Replier_Binary>
 801a60e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a610:	4628      	mov	r0, r5
 801a612:	9600      	str	r6, [sp, #0]
 801a614:	9318      	str	r3, [sp, #96]	@ 0x60
 801a616:	b29b      	uxth	r3, r3
 801a618:	9401      	str	r4, [sp, #4]
 801a61a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801a61e:	f7ff fde7 	bl	801a1f0 <uxr_common_create_entity>
 801a622:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801a626:	bd70      	pop	{r4, r5, r6, pc}

0801a628 <get_custom_error>:
 801a628:	4b01      	ldr	r3, [pc, #4]	@ (801a630 <get_custom_error+0x8>)
 801a62a:	7818      	ldrb	r0, [r3, #0]
 801a62c:	4770      	bx	lr
 801a62e:	bf00      	nop
 801a630:	240693dc 	.word	0x240693dc

0801a634 <recv_custom_msg>:
 801a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a638:	4693      	mov	fp, r2
 801a63a:	b089      	sub	sp, #36	@ 0x24
 801a63c:	2200      	movs	r2, #0
 801a63e:	4604      	mov	r4, r0
 801a640:	468a      	mov	sl, r1
 801a642:	9305      	str	r3, [sp, #20]
 801a644:	f88d 201e 	strb.w	r2, [sp, #30]
 801a648:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801a64c:	b322      	cbz	r2, 801a698 <recv_custom_msg+0x64>
 801a64e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801a652:	f10d 081f 	add.w	r8, sp, #31
 801a656:	af05      	add	r7, sp, #20
 801a658:	f10d 061e 	add.w	r6, sp, #30
 801a65c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801a660:	e002      	b.n	801a668 <recv_custom_msg+0x34>
 801a662:	9b05      	ldr	r3, [sp, #20]
 801a664:	2b00      	cmp	r3, #0
 801a666:	dd0f      	ble.n	801a688 <recv_custom_msg+0x54>
 801a668:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801a66c:	4623      	mov	r3, r4
 801a66e:	4622      	mov	r2, r4
 801a670:	4648      	mov	r0, r9
 801a672:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801a676:	e9cd 5600 	strd	r5, r6, [sp]
 801a67a:	f001 fc6f 	bl	801bf5c <uxr_read_framed_msg>
 801a67e:	2800      	cmp	r0, #0
 801a680:	d0ef      	beq.n	801a662 <recv_custom_msg+0x2e>
 801a682:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801a686:	b1b3      	cbz	r3, 801a6b6 <recv_custom_msg+0x82>
 801a688:	4b0f      	ldr	r3, [pc, #60]	@ (801a6c8 <recv_custom_msg+0x94>)
 801a68a:	2000      	movs	r0, #0
 801a68c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801a690:	701a      	strb	r2, [r3, #0]
 801a692:	b009      	add	sp, #36	@ 0x24
 801a694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a698:	f10d 021f 	add.w	r2, sp, #31
 801a69c:	4601      	mov	r1, r0
 801a69e:	9200      	str	r2, [sp, #0]
 801a6a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a6a4:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801a6a8:	47a8      	blx	r5
 801a6aa:	2800      	cmp	r0, #0
 801a6ac:	d0ec      	beq.n	801a688 <recv_custom_msg+0x54>
 801a6ae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d1e8      	bne.n	801a688 <recv_custom_msg+0x54>
 801a6b6:	f8cb 0000 	str.w	r0, [fp]
 801a6ba:	2001      	movs	r0, #1
 801a6bc:	f8ca 4000 	str.w	r4, [sl]
 801a6c0:	b009      	add	sp, #36	@ 0x24
 801a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6c6:	bf00      	nop
 801a6c8:	240693dc 	.word	0x240693dc

0801a6cc <send_custom_msg>:
 801a6cc:	b530      	push	{r4, r5, lr}
 801a6ce:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801a6d2:	b087      	sub	sp, #28
 801a6d4:	4614      	mov	r4, r2
 801a6d6:	b995      	cbnz	r5, 801a6fe <send_custom_msg+0x32>
 801a6d8:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801a6dc:	f10d 0317 	add.w	r3, sp, #23
 801a6e0:	47a8      	blx	r5
 801a6e2:	1e03      	subs	r3, r0, #0
 801a6e4:	bf18      	it	ne
 801a6e6:	2301      	movne	r3, #1
 801a6e8:	42a0      	cmp	r0, r4
 801a6ea:	bf18      	it	ne
 801a6ec:	2300      	movne	r3, #0
 801a6ee:	b91b      	cbnz	r3, 801a6f8 <send_custom_msg+0x2c>
 801a6f0:	4a0a      	ldr	r2, [pc, #40]	@ (801a71c <send_custom_msg+0x50>)
 801a6f2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801a6f6:	7011      	strb	r1, [r2, #0]
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	b007      	add	sp, #28
 801a6fc:	bd30      	pop	{r4, r5, pc}
 801a6fe:	460b      	mov	r3, r1
 801a700:	2200      	movs	r2, #0
 801a702:	f10d 0117 	add.w	r1, sp, #23
 801a706:	9400      	str	r4, [sp, #0]
 801a708:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801a70c:	4602      	mov	r2, r0
 801a70e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801a712:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801a716:	f001 fa43 	bl	801bba0 <uxr_write_framed_msg>
 801a71a:	e7e2      	b.n	801a6e2 <send_custom_msg+0x16>
 801a71c:	240693dc 	.word	0x240693dc

0801a720 <uxr_set_custom_transport_callbacks>:
 801a720:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801a724:	9901      	ldr	r1, [sp, #4]
 801a726:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801a72a:	9b00      	ldr	r3, [sp, #0]
 801a72c:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 801a730:	4770      	bx	lr
 801a732:	bf00      	nop

0801a734 <uxr_init_custom_transport>:
 801a734:	b538      	push	{r3, r4, r5, lr}
 801a736:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801a73a:	b303      	cbz	r3, 801a77e <uxr_init_custom_transport+0x4a>
 801a73c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801a740:	4604      	mov	r4, r0
 801a742:	b1e2      	cbz	r2, 801a77e <uxr_init_custom_transport+0x4a>
 801a744:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801a748:	b1ca      	cbz	r2, 801a77e <uxr_init_custom_transport+0x4a>
 801a74a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801a74e:	b1b2      	cbz	r2, 801a77e <uxr_init_custom_transport+0x4a>
 801a750:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801a754:	4798      	blx	r3
 801a756:	4605      	mov	r5, r0
 801a758:	b188      	cbz	r0, 801a77e <uxr_init_custom_transport+0x4a>
 801a75a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801a75e:	b98b      	cbnz	r3, 801a784 <uxr_init_custom_transport+0x50>
 801a760:	4b0b      	ldr	r3, [pc, #44]	@ (801a790 <uxr_init_custom_transport+0x5c>)
 801a762:	4628      	mov	r0, r5
 801a764:	490b      	ldr	r1, [pc, #44]	@ (801a794 <uxr_init_custom_transport+0x60>)
 801a766:	4a0c      	ldr	r2, [pc, #48]	@ (801a798 <uxr_init_custom_transport+0x64>)
 801a768:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801a76c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a770:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801a774:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801a778:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801a77c:	bd38      	pop	{r3, r4, r5, pc}
 801a77e:	2500      	movs	r5, #0
 801a780:	4628      	mov	r0, r5
 801a782:	bd38      	pop	{r3, r4, r5, pc}
 801a784:	2100      	movs	r1, #0
 801a786:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801a78a:	f001 fa03 	bl	801bb94 <uxr_init_framing_io>
 801a78e:	e7e7      	b.n	801a760 <uxr_init_custom_transport+0x2c>
 801a790:	0801a635 	.word	0x0801a635
 801a794:	0801a6cd 	.word	0x0801a6cd
 801a798:	0801a629 	.word	0x0801a629

0801a79c <uxr_close_custom_transport>:
 801a79c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801a7a0:	4718      	bx	r3
 801a7a2:	bf00      	nop

0801a7a4 <uxr_object_id>:
 801a7a4:	b082      	sub	sp, #8
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	f88d 1006 	strb.w	r1, [sp, #6]
 801a7ac:	f360 030f 	bfi	r3, r0, #0, #16
 801a7b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a7b4:	f362 431f 	bfi	r3, r2, #16, #16
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	b002      	add	sp, #8
 801a7bc:	4770      	bx	lr
 801a7be:	bf00      	nop

0801a7c0 <uxr_object_id_from_raw>:
 801a7c0:	7843      	ldrb	r3, [r0, #1]
 801a7c2:	b082      	sub	sp, #8
 801a7c4:	7801      	ldrb	r1, [r0, #0]
 801a7c6:	2000      	movs	r0, #0
 801a7c8:	091a      	lsrs	r2, r3, #4
 801a7ca:	f003 030f 	and.w	r3, r3, #15
 801a7ce:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801a7d2:	f88d 3006 	strb.w	r3, [sp, #6]
 801a7d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a7da:	f362 000f 	bfi	r0, r2, #0, #16
 801a7de:	f363 401f 	bfi	r0, r3, #16, #16
 801a7e2:	b002      	add	sp, #8
 801a7e4:	4770      	bx	lr
 801a7e6:	bf00      	nop

0801a7e8 <uxr_object_id_to_raw>:
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801a7f4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801a7f8:	f881 c000 	strb.w	ip, [r1]
 801a7fc:	7048      	strb	r0, [r1, #1]
 801a7fe:	b002      	add	sp, #8
 801a800:	4770      	bx	lr
 801a802:	bf00      	nop

0801a804 <uxr_buffer_request_data>:
 801a804:	b530      	push	{r4, r5, lr}
 801a806:	b095      	sub	sp, #84	@ 0x54
 801a808:	4604      	mov	r4, r0
 801a80a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801a80c:	9303      	str	r3, [sp, #12]
 801a80e:	2d00      	cmp	r5, #0
 801a810:	f88d 301c 	strb.w	r3, [sp, #28]
 801a814:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801a818:	f04f 0200 	mov.w	r2, #0
 801a81c:	bf14      	ite	ne
 801a81e:	2101      	movne	r1, #1
 801a820:	4611      	moveq	r1, r2
 801a822:	f88d 201d 	strb.w	r2, [sp, #29]
 801a826:	f88d 201e 	strb.w	r2, [sp, #30]
 801a82a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a82e:	d021      	beq.n	801a874 <uxr_buffer_request_data+0x70>
 801a830:	686b      	ldr	r3, [r5, #4]
 801a832:	2210      	movs	r2, #16
 801a834:	6829      	ldr	r1, [r5, #0]
 801a836:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a83a:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 801a83e:	2308      	movs	r3, #8
 801a840:	2100      	movs	r1, #0
 801a842:	4620      	mov	r0, r4
 801a844:	e9cd 3100 	strd	r3, r1, [sp]
 801a848:	ab0c      	add	r3, sp, #48	@ 0x30
 801a84a:	9905      	ldr	r1, [sp, #20]
 801a84c:	f001 f834 	bl	801b8b8 <uxr_prepare_stream_to_write_submessage>
 801a850:	b918      	cbnz	r0, 801a85a <uxr_buffer_request_data+0x56>
 801a852:	4604      	mov	r4, r0
 801a854:	4620      	mov	r0, r4
 801a856:	b015      	add	sp, #84	@ 0x54
 801a858:	bd30      	pop	{r4, r5, pc}
 801a85a:	9904      	ldr	r1, [sp, #16]
 801a85c:	aa06      	add	r2, sp, #24
 801a85e:	4620      	mov	r0, r4
 801a860:	f001 f966 	bl	801bb30 <uxr_init_base_object_request>
 801a864:	4604      	mov	r4, r0
 801a866:	a906      	add	r1, sp, #24
 801a868:	a80c      	add	r0, sp, #48	@ 0x30
 801a86a:	f002 ffc1 	bl	801d7f0 <uxr_serialize_READ_DATA_Payload>
 801a86e:	4620      	mov	r0, r4
 801a870:	b015      	add	sp, #84	@ 0x54
 801a872:	bd30      	pop	{r4, r5, pc}
 801a874:	2208      	movs	r2, #8
 801a876:	e7e2      	b.n	801a83e <uxr_buffer_request_data+0x3a>

0801a878 <uxr_buffer_cancel_data>:
 801a878:	b510      	push	{r4, lr}
 801a87a:	2300      	movs	r3, #0
 801a87c:	b094      	sub	sp, #80	@ 0x50
 801a87e:	4604      	mov	r4, r0
 801a880:	9205      	str	r2, [sp, #20]
 801a882:	9301      	str	r3, [sp, #4]
 801a884:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a888:	f88d 301e 	strb.w	r3, [sp, #30]
 801a88c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801a890:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a894:	2308      	movs	r3, #8
 801a896:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a89a:	2201      	movs	r2, #1
 801a89c:	9300      	str	r3, [sp, #0]
 801a89e:	ab0c      	add	r3, sp, #48	@ 0x30
 801a8a0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801a8a4:	2210      	movs	r2, #16
 801a8a6:	f001 f807 	bl	801b8b8 <uxr_prepare_stream_to_write_submessage>
 801a8aa:	b918      	cbnz	r0, 801a8b4 <uxr_buffer_cancel_data+0x3c>
 801a8ac:	4604      	mov	r4, r0
 801a8ae:	4620      	mov	r0, r4
 801a8b0:	b014      	add	sp, #80	@ 0x50
 801a8b2:	bd10      	pop	{r4, pc}
 801a8b4:	9905      	ldr	r1, [sp, #20]
 801a8b6:	aa06      	add	r2, sp, #24
 801a8b8:	4620      	mov	r0, r4
 801a8ba:	f001 f939 	bl	801bb30 <uxr_init_base_object_request>
 801a8be:	4604      	mov	r4, r0
 801a8c0:	a906      	add	r1, sp, #24
 801a8c2:	a80c      	add	r0, sp, #48	@ 0x30
 801a8c4:	f002 ff94 	bl	801d7f0 <uxr_serialize_READ_DATA_Payload>
 801a8c8:	4620      	mov	r0, r4
 801a8ca:	b014      	add	sp, #80	@ 0x50
 801a8cc:	bd10      	pop	{r4, pc}
 801a8ce:	bf00      	nop

0801a8d0 <read_submessage_format>:
 801a8d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8d4:	b095      	sub	sp, #84	@ 0x54
 801a8d6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801a8da:	b113      	cbz	r3, 801a8e2 <read_submessage_format+0x12>
 801a8dc:	b015      	add	sp, #84	@ 0x54
 801a8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8e2:	4606      	mov	r6, r0
 801a8e4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801a8e6:	460c      	mov	r4, r1
 801a8e8:	4615      	mov	r5, r2
 801a8ea:	9004      	str	r0, [sp, #16]
 801a8ec:	4699      	mov	r9, r3
 801a8ee:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801a8f0:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801a8f4:	9005      	str	r0, [sp, #20]
 801a8f6:	a80c      	add	r0, sp, #48	@ 0x30
 801a8f8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801a8fc:	1a52      	subs	r2, r2, r1
 801a8fe:	f7f7 fef1 	bl	80126e4 <ucdr_init_buffer>
 801a902:	a80c      	add	r0, sp, #48	@ 0x30
 801a904:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a908:	f7f7 fec0 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801a90c:	69e2      	ldr	r2, [r4, #28]
 801a90e:	b19a      	cbz	r2, 801a938 <read_submessage_format+0x68>
 801a910:	f1b8 0f07 	cmp.w	r8, #7
 801a914:	f882 9014 	strb.w	r9, [r2, #20]
 801a918:	d040      	beq.n	801a99c <read_submessage_format+0xcc>
 801a91a:	f1b8 0f08 	cmp.w	r8, #8
 801a91e:	d02e      	beq.n	801a97e <read_submessage_format+0xae>
 801a920:	f1b8 0f06 	cmp.w	r8, #6
 801a924:	d011      	beq.n	801a94a <read_submessage_format+0x7a>
 801a926:	2301      	movs	r3, #1
 801a928:	7513      	strb	r3, [r2, #20]
 801a92a:	4629      	mov	r1, r5
 801a92c:	4620      	mov	r0, r4
 801a92e:	f7f7 ff2d 	bl	801278c <ucdr_advance_buffer>
 801a932:	b015      	add	sp, #84	@ 0x54
 801a934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a938:	f1b8 0f07 	cmp.w	r8, #7
 801a93c:	d02e      	beq.n	801a99c <read_submessage_format+0xcc>
 801a93e:	f1b8 0f08 	cmp.w	r8, #8
 801a942:	d01c      	beq.n	801a97e <read_submessage_format+0xae>
 801a944:	f1b8 0f06 	cmp.w	r8, #6
 801a948:	d1ef      	bne.n	801a92a <read_submessage_format+0x5a>
 801a94a:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801a94e:	f1b8 0f00 	cmp.w	r8, #0
 801a952:	d011      	beq.n	801a978 <read_submessage_format+0xa8>
 801a954:	ab0c      	add	r3, sp, #48	@ 0x30
 801a956:	9501      	str	r5, [sp, #4]
 801a958:	463a      	mov	r2, r7
 801a95a:	4630      	mov	r0, r6
 801a95c:	9300      	str	r3, [sp, #0]
 801a95e:	2306      	movs	r3, #6
 801a960:	f88d 3016 	strb.w	r3, [sp, #22]
 801a964:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 801a968:	9302      	str	r3, [sp, #8]
 801a96a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801a96e:	47c0      	blx	r8
 801a970:	2301      	movs	r3, #1
 801a972:	69e2      	ldr	r2, [r4, #28]
 801a974:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801a978:	2a00      	cmp	r2, #0
 801a97a:	d1d4      	bne.n	801a926 <read_submessage_format+0x56>
 801a97c:	e7d5      	b.n	801a92a <read_submessage_format+0x5a>
 801a97e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801a982:	2b00      	cmp	r3, #0
 801a984:	d0f8      	beq.n	801a978 <read_submessage_format+0xa8>
 801a986:	a80c      	add	r0, sp, #48	@ 0x30
 801a988:	a906      	add	r1, sp, #24
 801a98a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801a98e:	f002 fffb 	bl	801d988 <uxr_deserialize_SampleIdentity>
 801a992:	b9a0      	cbnz	r0, 801a9be <read_submessage_format+0xee>
 801a994:	69e2      	ldr	r2, [r4, #28]
 801a996:	2a00      	cmp	r2, #0
 801a998:	d1c5      	bne.n	801a926 <read_submessage_format+0x56>
 801a99a:	e7c6      	b.n	801a92a <read_submessage_format+0x5a>
 801a99c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 801a9a0:	b13b      	cbz	r3, 801a9b2 <read_submessage_format+0xe2>
 801a9a2:	a906      	add	r1, sp, #24
 801a9a4:	a80c      	add	r0, sp, #48	@ 0x30
 801a9a6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801a9aa:	f002 fcc1 	bl	801d330 <uxr_deserialize_BaseObjectRequest>
 801a9ae:	bb60      	cbnz	r0, 801aa0a <read_submessage_format+0x13a>
 801a9b0:	69e2      	ldr	r2, [r4, #28]
 801a9b2:	68a3      	ldr	r3, [r4, #8]
 801a9b4:	442b      	add	r3, r5
 801a9b6:	60a3      	str	r3, [r4, #8]
 801a9b8:	2a00      	cmp	r2, #0
 801a9ba:	d1b4      	bne.n	801a926 <read_submessage_format+0x56>
 801a9bc:	e7b5      	b.n	801a92a <read_submessage_format+0x5a>
 801a9be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a9c0:	a80c      	add	r0, sp, #48	@ 0x30
 801a9c2:	eba8 0803 	sub.w	r8, r8, r3
 801a9c6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801a9ca:	44a8      	add	r8, r5
 801a9cc:	1a52      	subs	r2, r2, r1
 801a9ce:	f7f7 fe89 	bl	80126e4 <ucdr_init_buffer>
 801a9d2:	a80c      	add	r0, sp, #48	@ 0x30
 801a9d4:	fa1f f888 	uxth.w	r8, r8
 801a9d8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a9dc:	f7f7 fe56 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801a9e0:	ab0c      	add	r3, sp, #48	@ 0x30
 801a9e2:	2108      	movs	r1, #8
 801a9e4:	f8cd 8004 	str.w	r8, [sp, #4]
 801a9e8:	9300      	str	r3, [sp, #0]
 801a9ea:	463a      	mov	r2, r7
 801a9ec:	f88d 1016 	strb.w	r1, [sp, #22]
 801a9f0:	ab06      	add	r3, sp, #24
 801a9f2:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801a9f6:	4630      	mov	r0, r6
 801a9f8:	9102      	str	r1, [sp, #8]
 801a9fa:	9905      	ldr	r1, [sp, #20]
 801a9fc:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 801aa00:	47b8      	blx	r7
 801aa02:	2301      	movs	r3, #1
 801aa04:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801aa08:	e7c4      	b.n	801a994 <read_submessage_format+0xc4>
 801aa0a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801aa0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aa10:	a80c      	add	r0, sp, #48	@ 0x30
 801aa12:	1a52      	subs	r2, r2, r1
 801aa14:	eba8 0803 	sub.w	r8, r8, r3
 801aa18:	f7f7 fe64 	bl	80126e4 <ucdr_init_buffer>
 801aa1c:	a80c      	add	r0, sp, #48	@ 0x30
 801aa1e:	44a8      	add	r8, r5
 801aa20:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801aa24:	f7f7 fe32 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801aa28:	ab0c      	add	r3, sp, #48	@ 0x30
 801aa2a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801aa2e:	fa1f f888 	uxth.w	r8, r8
 801aa32:	9300      	str	r3, [sp, #0]
 801aa34:	463a      	mov	r2, r7
 801aa36:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801aa3a:	4630      	mov	r0, r6
 801aa3c:	f8cd 8004 	str.w	r8, [sp, #4]
 801aa40:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801aa44:	2107      	movs	r1, #7
 801aa46:	f88d 1016 	strb.w	r1, [sp, #22]
 801aa4a:	b29b      	uxth	r3, r3
 801aa4c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 801aa50:	9102      	str	r1, [sp, #8]
 801aa52:	9905      	ldr	r1, [sp, #20]
 801aa54:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 801aa58:	47b8      	blx	r7
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801aa60:	e7a6      	b.n	801a9b0 <read_submessage_format+0xe0>
 801aa62:	bf00      	nop

0801aa64 <on_get_fragmentation_info>:
 801aa64:	b500      	push	{lr}
 801aa66:	b08b      	sub	sp, #44	@ 0x2c
 801aa68:	4601      	mov	r1, r0
 801aa6a:	2204      	movs	r2, #4
 801aa6c:	a802      	add	r0, sp, #8
 801aa6e:	f7f7 fe39 	bl	80126e4 <ucdr_init_buffer>
 801aa72:	f10d 0305 	add.w	r3, sp, #5
 801aa76:	f10d 0206 	add.w	r2, sp, #6
 801aa7a:	a901      	add	r1, sp, #4
 801aa7c:	a802      	add	r0, sp, #8
 801aa7e:	f001 fe5d 	bl	801c73c <uxr_read_submessage_header>
 801aa82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801aa86:	2b0d      	cmp	r3, #13
 801aa88:	d003      	beq.n	801aa92 <on_get_fragmentation_info+0x2e>
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	b00b      	add	sp, #44	@ 0x2c
 801aa8e:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801aa96:	f013 0f02 	tst.w	r3, #2
 801aa9a:	bf14      	ite	ne
 801aa9c:	2002      	movne	r0, #2
 801aa9e:	2001      	moveq	r0, #1
 801aaa0:	b00b      	add	sp, #44	@ 0x2c
 801aaa2:	f85d fb04 	ldr.w	pc, [sp], #4
 801aaa6:	bf00      	nop

0801aaa8 <read_submessage_get_info>:
 801aaa8:	b570      	push	{r4, r5, r6, lr}
 801aaaa:	2500      	movs	r5, #0
 801aaac:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801aab0:	460e      	mov	r6, r1
 801aab2:	4604      	mov	r4, r0
 801aab4:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801aab8:	4629      	mov	r1, r5
 801aaba:	a810      	add	r0, sp, #64	@ 0x40
 801aabc:	9503      	str	r5, [sp, #12]
 801aabe:	9504      	str	r5, [sp, #16]
 801aac0:	f004 ffb8 	bl	801fa34 <memset>
 801aac4:	a903      	add	r1, sp, #12
 801aac6:	4630      	mov	r0, r6
 801aac8:	f002 fdd2 	bl	801d670 <uxr_deserialize_GET_INFO_Payload>
 801aacc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801aad0:	4620      	mov	r0, r4
 801aad2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801aad6:	f001 f823 	bl	801bb20 <uxr_session_header_offset>
 801aada:	462b      	mov	r3, r5
 801aadc:	220c      	movs	r2, #12
 801aade:	a905      	add	r1, sp, #20
 801aae0:	9000      	str	r0, [sp, #0]
 801aae2:	a808      	add	r0, sp, #32
 801aae4:	f7f7 fdec 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801aae8:	a910      	add	r1, sp, #64	@ 0x40
 801aaea:	a808      	add	r0, sp, #32
 801aaec:	f002 fe34 	bl	801d758 <uxr_serialize_INFO_Payload>
 801aaf0:	9b08      	ldr	r3, [sp, #32]
 801aaf2:	462a      	mov	r2, r5
 801aaf4:	4629      	mov	r1, r5
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	f000 ffbe 	bl	801ba78 <uxr_stamp_session_header>
 801aafc:	a808      	add	r0, sp, #32
 801aafe:	f7f7 fe1f 	bl	8012740 <ucdr_buffer_length>
 801ab02:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ab04:	4602      	mov	r2, r0
 801ab06:	a905      	add	r1, sp, #20
 801ab08:	e9d3 0400 	ldrd	r0, r4, [r3]
 801ab0c:	47a0      	blx	r4
 801ab0e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801ab12:	bd70      	pop	{r4, r5, r6, pc}

0801ab14 <write_submessage_acknack.isra.0>:
 801ab14:	b570      	push	{r4, r5, r6, lr}
 801ab16:	b092      	sub	sp, #72	@ 0x48
 801ab18:	4605      	mov	r5, r0
 801ab1a:	460e      	mov	r6, r1
 801ab1c:	4614      	mov	r4, r2
 801ab1e:	f000 ffff 	bl	801bb20 <uxr_session_header_offset>
 801ab22:	a905      	add	r1, sp, #20
 801ab24:	9000      	str	r0, [sp, #0]
 801ab26:	2300      	movs	r3, #0
 801ab28:	a80a      	add	r0, sp, #40	@ 0x28
 801ab2a:	2211      	movs	r2, #17
 801ab2c:	f7f7 fdc8 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801ab30:	2218      	movs	r2, #24
 801ab32:	2300      	movs	r3, #0
 801ab34:	210a      	movs	r1, #10
 801ab36:	fb02 5404 	mla	r4, r2, r4, r5
 801ab3a:	a80a      	add	r0, sp, #40	@ 0x28
 801ab3c:	2205      	movs	r2, #5
 801ab3e:	3450      	adds	r4, #80	@ 0x50
 801ab40:	f001 fde2 	bl	801c708 <uxr_buffer_submessage_header>
 801ab44:	a903      	add	r1, sp, #12
 801ab46:	4620      	mov	r0, r4
 801ab48:	f003 feec 	bl	801e924 <uxr_compute_acknack>
 801ab4c:	ba40      	rev16	r0, r0
 801ab4e:	a903      	add	r1, sp, #12
 801ab50:	f88d 6010 	strb.w	r6, [sp, #16]
 801ab54:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ab58:	a80a      	add	r0, sp, #40	@ 0x28
 801ab5a:	f002 fe6f 	bl	801d83c <uxr_serialize_ACKNACK_Payload>
 801ab5e:	2200      	movs	r2, #0
 801ab60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ab62:	4628      	mov	r0, r5
 801ab64:	4611      	mov	r1, r2
 801ab66:	f000 ff87 	bl	801ba78 <uxr_stamp_session_header>
 801ab6a:	a80a      	add	r0, sp, #40	@ 0x28
 801ab6c:	f7f7 fde8 	bl	8012740 <ucdr_buffer_length>
 801ab70:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801ab72:	4602      	mov	r2, r0
 801ab74:	a905      	add	r1, sp, #20
 801ab76:	e9d3 0400 	ldrd	r0, r4, [r3]
 801ab7a:	47a0      	blx	r4
 801ab7c:	b012      	add	sp, #72	@ 0x48
 801ab7e:	bd70      	pop	{r4, r5, r6, pc}

0801ab80 <uxr_init_session>:
 801ab80:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801abb8 <uxr_init_session+0x38>
 801ab84:	2300      	movs	r3, #0
 801ab86:	b510      	push	{r4, lr}
 801ab88:	4604      	mov	r4, r0
 801ab8a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801ab8e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801ab92:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801ab96:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801ab9a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801ab9e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801aba2:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801aba6:	2181      	movs	r1, #129	@ 0x81
 801aba8:	f000 feca 	bl	801b940 <uxr_init_session_info>
 801abac:	f104 0008 	add.w	r0, r4, #8
 801abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abb4:	f001 bcc4 	b.w	801c540 <uxr_init_stream_storage>
	...

0801abc0 <uxr_set_status_callback>:
 801abc0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801abc4:	4770      	bx	lr
 801abc6:	bf00      	nop

0801abc8 <uxr_set_topic_callback>:
 801abc8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801abcc:	4770      	bx	lr
 801abce:	bf00      	nop

0801abd0 <uxr_set_request_callback>:
 801abd0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801abd4:	4770      	bx	lr
 801abd6:	bf00      	nop

0801abd8 <uxr_set_reply_callback>:
 801abd8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801abdc:	4770      	bx	lr
 801abde:	bf00      	nop

0801abe0 <uxr_create_output_best_effort_stream>:
 801abe0:	b510      	push	{r4, lr}
 801abe2:	4604      	mov	r4, r0
 801abe4:	b084      	sub	sp, #16
 801abe6:	e9cd 2100 	strd	r2, r1, [sp]
 801abea:	f000 ff99 	bl	801bb20 <uxr_session_header_offset>
 801abee:	4603      	mov	r3, r0
 801abf0:	f104 0008 	add.w	r0, r4, #8
 801abf4:	e9dd 2100 	ldrd	r2, r1, [sp]
 801abf8:	b004      	add	sp, #16
 801abfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abfe:	f001 bce5 	b.w	801c5cc <uxr_add_output_best_effort_buffer>
 801ac02:	bf00      	nop

0801ac04 <uxr_create_output_reliable_stream>:
 801ac04:	b530      	push	{r4, r5, lr}
 801ac06:	b089      	sub	sp, #36	@ 0x24
 801ac08:	4604      	mov	r4, r0
 801ac0a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ac0e:	9303      	str	r3, [sp, #12]
 801ac10:	f000 ff86 	bl	801bb20 <uxr_session_header_offset>
 801ac14:	4605      	mov	r5, r0
 801ac16:	9905      	ldr	r1, [sp, #20]
 801ac18:	f104 0008 	add.w	r0, r4, #8
 801ac1c:	9500      	str	r5, [sp, #0]
 801ac1e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801ac22:	f001 fce7 	bl	801c5f4 <uxr_add_output_reliable_buffer>
 801ac26:	2200      	movs	r2, #0
 801ac28:	fa5f fc80 	uxtb.w	ip, r0
 801ac2c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801ac30:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801ac34:	0e03      	lsrs	r3, r0, #24
 801ac36:	f36c 0207 	bfi	r2, ip, #0, #8
 801ac3a:	f364 220f 	bfi	r2, r4, #8, #8
 801ac3e:	f361 4217 	bfi	r2, r1, #16, #8
 801ac42:	f363 621f 	bfi	r2, r3, #24, #8
 801ac46:	4610      	mov	r0, r2
 801ac48:	b009      	add	sp, #36	@ 0x24
 801ac4a:	bd30      	pop	{r4, r5, pc}

0801ac4c <uxr_create_input_best_effort_stream>:
 801ac4c:	b082      	sub	sp, #8
 801ac4e:	3008      	adds	r0, #8
 801ac50:	b002      	add	sp, #8
 801ac52:	f001 bce9 	b.w	801c628 <uxr_add_input_best_effort_buffer>
 801ac56:	bf00      	nop

0801ac58 <uxr_create_input_reliable_stream>:
 801ac58:	b510      	push	{r4, lr}
 801ac5a:	4c0c      	ldr	r4, [pc, #48]	@ (801ac8c <uxr_create_input_reliable_stream+0x34>)
 801ac5c:	b084      	sub	sp, #16
 801ac5e:	3008      	adds	r0, #8
 801ac60:	9400      	str	r4, [sp, #0]
 801ac62:	f001 fcf7 	bl	801c654 <uxr_add_input_reliable_buffer>
 801ac66:	2200      	movs	r2, #0
 801ac68:	fa5f fe80 	uxtb.w	lr, r0
 801ac6c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 801ac70:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801ac74:	0e03      	lsrs	r3, r0, #24
 801ac76:	f36e 0207 	bfi	r2, lr, #0, #8
 801ac7a:	f36c 220f 	bfi	r2, ip, #8, #8
 801ac7e:	f361 4217 	bfi	r2, r1, #16, #8
 801ac82:	f363 621f 	bfi	r2, r3, #24, #8
 801ac86:	4610      	mov	r0, r2
 801ac88:	b004      	add	sp, #16
 801ac8a:	bd10      	pop	{r4, pc}
 801ac8c:	0801aa65 	.word	0x0801aa65

0801ac90 <uxr_epoch_nanos>:
 801ac90:	b510      	push	{r4, lr}
 801ac92:	4604      	mov	r4, r0
 801ac94:	f001 fd9a 	bl	801c7cc <uxr_nanos>
 801ac98:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801ac9c:	1ac0      	subs	r0, r0, r3
 801ac9e:	eb61 0102 	sbc.w	r1, r1, r2
 801aca2:	bd10      	pop	{r4, pc}

0801aca4 <uxr_flash_output_streams>:
 801aca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aca8:	7e03      	ldrb	r3, [r0, #24]
 801acaa:	b084      	sub	sp, #16
 801acac:	4604      	mov	r4, r0
 801acae:	b1fb      	cbz	r3, 801acf0 <uxr_flash_output_streams+0x4c>
 801acb0:	f04f 0900 	mov.w	r9, #0
 801acb4:	f10d 0802 	add.w	r8, sp, #2
 801acb8:	af03      	add	r7, sp, #12
 801acba:	ae02      	add	r6, sp, #8
 801acbc:	4648      	mov	r0, r9
 801acbe:	2201      	movs	r2, #1
 801acc0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801acc4:	4611      	mov	r1, r2
 801acc6:	3508      	adds	r5, #8
 801acc8:	f001 fbe0 	bl	801c48c <uxr_stream_id>
 801accc:	4684      	mov	ip, r0
 801acce:	4643      	mov	r3, r8
 801acd0:	463a      	mov	r2, r7
 801acd2:	4631      	mov	r1, r6
 801acd4:	4628      	mov	r0, r5
 801acd6:	f8cd c004 	str.w	ip, [sp, #4]
 801acda:	f003 fead 	bl	801ea38 <uxr_prepare_best_effort_buffer_to_send>
 801acde:	2800      	cmp	r0, #0
 801ace0:	d13d      	bne.n	801ad5e <uxr_flash_output_streams+0xba>
 801ace2:	f109 0901 	add.w	r9, r9, #1
 801ace6:	7e23      	ldrb	r3, [r4, #24]
 801ace8:	fa5f f089 	uxtb.w	r0, r9
 801acec:	4283      	cmp	r3, r0
 801acee:	d8e6      	bhi.n	801acbe <uxr_flash_output_streams+0x1a>
 801acf0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801acf4:	b383      	cbz	r3, 801ad58 <uxr_flash_output_streams+0xb4>
 801acf6:	f04f 0900 	mov.w	r9, #0
 801acfa:	f10d 0802 	add.w	r8, sp, #2
 801acfe:	af03      	add	r7, sp, #12
 801ad00:	ae02      	add	r6, sp, #8
 801ad02:	4648      	mov	r0, r9
 801ad04:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801ad08:	2201      	movs	r2, #1
 801ad0a:	2102      	movs	r1, #2
 801ad0c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801ad10:	f001 fbbc 	bl	801c48c <uxr_stream_id>
 801ad14:	9001      	str	r0, [sp, #4]
 801ad16:	3520      	adds	r5, #32
 801ad18:	e00c      	b.n	801ad34 <uxr_flash_output_streams+0x90>
 801ad1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ad1e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801ad22:	9b02      	ldr	r3, [sp, #8]
 801ad24:	f000 fea8 	bl	801ba78 <uxr_stamp_session_header>
 801ad28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ad2a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ad2e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801ad32:	47d0      	blx	sl
 801ad34:	4643      	mov	r3, r8
 801ad36:	463a      	mov	r2, r7
 801ad38:	4631      	mov	r1, r6
 801ad3a:	4628      	mov	r0, r5
 801ad3c:	f004 f8a0 	bl	801ee80 <uxr_prepare_next_reliable_buffer_to_send>
 801ad40:	4603      	mov	r3, r0
 801ad42:	4620      	mov	r0, r4
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d1e8      	bne.n	801ad1a <uxr_flash_output_streams+0x76>
 801ad48:	f109 0901 	add.w	r9, r9, #1
 801ad4c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801ad50:	fa5f f089 	uxtb.w	r0, r9
 801ad54:	4283      	cmp	r3, r0
 801ad56:	d8d5      	bhi.n	801ad04 <uxr_flash_output_streams+0x60>
 801ad58:	b004      	add	sp, #16
 801ad5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad5e:	9b02      	ldr	r3, [sp, #8]
 801ad60:	4620      	mov	r0, r4
 801ad62:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ad66:	f109 0901 	add.w	r9, r9, #1
 801ad6a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801ad6e:	f000 fe83 	bl	801ba78 <uxr_stamp_session_header>
 801ad72:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ad74:	9a03      	ldr	r2, [sp, #12]
 801ad76:	685d      	ldr	r5, [r3, #4]
 801ad78:	6818      	ldr	r0, [r3, #0]
 801ad7a:	9902      	ldr	r1, [sp, #8]
 801ad7c:	47a8      	blx	r5
 801ad7e:	7e23      	ldrb	r3, [r4, #24]
 801ad80:	fa5f f089 	uxtb.w	r0, r9
 801ad84:	4283      	cmp	r3, r0
 801ad86:	d89a      	bhi.n	801acbe <uxr_flash_output_streams+0x1a>
 801ad88:	e7b2      	b.n	801acf0 <uxr_flash_output_streams+0x4c>
 801ad8a:	bf00      	nop

0801ad8c <read_submessage_info>:
 801ad8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad90:	460d      	mov	r5, r1
 801ad92:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801ad96:	4606      	mov	r6, r0
 801ad98:	4669      	mov	r1, sp
 801ad9a:	4628      	mov	r0, r5
 801ad9c:	f002 fb7a 	bl	801d494 <uxr_deserialize_BaseObjectReply>
 801ada0:	4604      	mov	r4, r0
 801ada2:	a902      	add	r1, sp, #8
 801ada4:	4628      	mov	r0, r5
 801ada6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801adaa:	f7f6 fa19 	bl	80111e0 <ucdr_deserialize_bool>
 801adae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801adb2:	4004      	ands	r4, r0
 801adb4:	b2e4      	uxtb	r4, r4
 801adb6:	b95b      	cbnz	r3, 801add0 <read_submessage_info+0x44>
 801adb8:	a987      	add	r1, sp, #540	@ 0x21c
 801adba:	4628      	mov	r0, r5
 801adbc:	f7f6 fa10 	bl	80111e0 <ucdr_deserialize_bool>
 801adc0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801adc4:	4680      	mov	r8, r0
 801adc6:	b94b      	cbnz	r3, 801addc <read_submessage_info+0x50>
 801adc8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801adcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801add0:	a903      	add	r1, sp, #12
 801add2:	4628      	mov	r0, r5
 801add4:	f002 fa0a 	bl	801d1ec <uxr_deserialize_ObjectVariant>
 801add8:	4004      	ands	r4, r0
 801adda:	e7ed      	b.n	801adb8 <read_submessage_info+0x2c>
 801addc:	a988      	add	r1, sp, #544	@ 0x220
 801adde:	4628      	mov	r0, r5
 801ade0:	f7f6 fa2c 	bl	801123c <ucdr_deserialize_uint8_t>
 801ade4:	ea14 0f08 	tst.w	r4, r8
 801ade8:	d0ee      	beq.n	801adc8 <read_submessage_info+0x3c>
 801adea:	2800      	cmp	r0, #0
 801adec:	d0ec      	beq.n	801adc8 <read_submessage_info+0x3c>
 801adee:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801adf2:	2b0d      	cmp	r3, #13
 801adf4:	d1e8      	bne.n	801adc8 <read_submessage_info+0x3c>
 801adf6:	a98a      	add	r1, sp, #552	@ 0x228
 801adf8:	4628      	mov	r0, r5
 801adfa:	f7f6 ffc5 	bl	8011d88 <ucdr_deserialize_int16_t>
 801adfe:	b138      	cbz	r0, 801ae10 <read_submessage_info+0x84>
 801ae00:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	dd06      	ble.n	801ae16 <read_submessage_info+0x8a>
 801ae08:	2f00      	cmp	r7, #0
 801ae0a:	bf14      	ite	ne
 801ae0c:	2001      	movne	r0, #1
 801ae0e:	2002      	moveq	r0, #2
 801ae10:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801ae14:	e7d8      	b.n	801adc8 <read_submessage_info+0x3c>
 801ae16:	2000      	movs	r0, #0
 801ae18:	e7fa      	b.n	801ae10 <read_submessage_info+0x84>
 801ae1a:	bf00      	nop

0801ae1c <read_submessage_list>:
 801ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae20:	4604      	mov	r4, r0
 801ae22:	b097      	sub	sp, #92	@ 0x5c
 801ae24:	460d      	mov	r5, r1
 801ae26:	4ec1      	ldr	r6, [pc, #772]	@ (801b12c <read_submessage_list+0x310>)
 801ae28:	9209      	str	r2, [sp, #36]	@ 0x24
 801ae2a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801ae2e:	aa0c      	add	r2, sp, #48	@ 0x30
 801ae30:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801ae34:	4628      	mov	r0, r5
 801ae36:	f001 fc81 	bl	801c73c <uxr_read_submessage_header>
 801ae3a:	2800      	cmp	r0, #0
 801ae3c:	f000 8142 	beq.w	801b0c4 <read_submessage_list+0x2a8>
 801ae40:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801ae44:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 801ae48:	3b02      	subs	r3, #2
 801ae4a:	2b0d      	cmp	r3, #13
 801ae4c:	d8ed      	bhi.n	801ae2a <read_submessage_list+0xe>
 801ae4e:	a101      	add	r1, pc, #4	@ (adr r1, 801ae54 <read_submessage_list+0x38>)
 801ae50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae54:	0801b0bb 	.word	0x0801b0bb
 801ae58:	0801ae2b 	.word	0x0801ae2b
 801ae5c:	0801b0ab 	.word	0x0801b0ab
 801ae60:	0801b049 	.word	0x0801b049
 801ae64:	0801b03f 	.word	0x0801b03f
 801ae68:	0801ae2b 	.word	0x0801ae2b
 801ae6c:	0801ae2b 	.word	0x0801ae2b
 801ae70:	0801af95 	.word	0x0801af95
 801ae74:	0801af27 	.word	0x0801af27
 801ae78:	0801aee7 	.word	0x0801aee7
 801ae7c:	0801ae2b 	.word	0x0801ae2b
 801ae80:	0801ae2b 	.word	0x0801ae2b
 801ae84:	0801ae2b 	.word	0x0801ae2b
 801ae88:	0801ae8d 	.word	0x0801ae8d
 801ae8c:	a910      	add	r1, sp, #64	@ 0x40
 801ae8e:	4628      	mov	r0, r5
 801ae90:	f002 fd28 	bl	801d8e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801ae94:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 801ae98:	f1b8 0f00 	cmp.w	r8, #0
 801ae9c:	f000 811a 	beq.w	801b0d4 <read_submessage_list+0x2b8>
 801aea0:	f001 fc94 	bl	801c7cc <uxr_nanos>
 801aea4:	4602      	mov	r2, r0
 801aea6:	460b      	mov	r3, r1
 801aea8:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801aeac:	2100      	movs	r1, #0
 801aeae:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801aeb0:	9006      	str	r0, [sp, #24]
 801aeb2:	468c      	mov	ip, r1
 801aeb4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801aeb6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801aeba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801aebc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 801aec0:	468c      	mov	ip, r1
 801aec2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801aec4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801aec8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801aecc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 801aed0:	fbc7 0106 	smlal	r0, r1, r7, r6
 801aed4:	e9cd 0100 	strd	r0, r1, [sp]
 801aed8:	4620      	mov	r0, r4
 801aeda:	47c0      	blx	r8
 801aedc:	f04f 0301 	mov.w	r3, #1
 801aee0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801aee4:	e7a1      	b.n	801ae2a <read_submessage_list+0xe>
 801aee6:	a910      	add	r1, sp, #64	@ 0x40
 801aee8:	4628      	mov	r0, r5
 801aeea:	f002 fce7 	bl	801d8bc <uxr_deserialize_HEARTBEAT_Payload>
 801aeee:	2100      	movs	r1, #0
 801aef0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801aef4:	f001 faf8 	bl	801c4e8 <uxr_stream_id_from_raw>
 801aef8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801aefc:	900f      	str	r0, [sp, #60]	@ 0x3c
 801aefe:	f104 0008 	add.w	r0, r4, #8
 801af02:	4641      	mov	r1, r8
 801af04:	f001 fbde 	bl	801c6c4 <uxr_get_input_reliable_stream>
 801af08:	2800      	cmp	r0, #0
 801af0a:	d08e      	beq.n	801ae2a <read_submessage_list+0xe>
 801af0c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801af10:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801af14:	f003 fcfa 	bl	801e90c <uxr_process_heartbeat>
 801af18:	4642      	mov	r2, r8
 801af1a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801af1e:	4620      	mov	r0, r4
 801af20:	f7ff fdf8 	bl	801ab14 <write_submessage_acknack.isra.0>
 801af24:	e781      	b.n	801ae2a <read_submessage_list+0xe>
 801af26:	a910      	add	r1, sp, #64	@ 0x40
 801af28:	4628      	mov	r0, r5
 801af2a:	f002 fc9f 	bl	801d86c <uxr_deserialize_ACKNACK_Payload>
 801af2e:	2100      	movs	r1, #0
 801af30:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801af34:	f001 fad8 	bl	801c4e8 <uxr_stream_id_from_raw>
 801af38:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801af3c:	900d      	str	r0, [sp, #52]	@ 0x34
 801af3e:	f104 0008 	add.w	r0, r4, #8
 801af42:	f001 fba9 	bl	801c698 <uxr_get_output_reliable_stream>
 801af46:	4680      	mov	r8, r0
 801af48:	2800      	cmp	r0, #0
 801af4a:	f43f af6e 	beq.w	801ae2a <read_submessage_list+0xe>
 801af4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801af52:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801af56:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801af5a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801af5e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801af62:	b289      	uxth	r1, r1
 801af64:	f004 f834 	bl	801efd0 <uxr_process_acknack>
 801af68:	4640      	mov	r0, r8
 801af6a:	f003 fff5 	bl	801ef58 <uxr_begin_output_nack_buffer_it>
 801af6e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801af72:	e005      	b.n	801af80 <read_submessage_list+0x164>
 801af74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801af76:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801af7a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801af7e:	47c8      	blx	r9
 801af80:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801af84:	aa0f      	add	r2, sp, #60	@ 0x3c
 801af86:	4651      	mov	r1, sl
 801af88:	4640      	mov	r0, r8
 801af8a:	f003 ffe7 	bl	801ef5c <uxr_next_reliable_nack_buffer_to_send>
 801af8e:	2800      	cmp	r0, #0
 801af90:	d1f0      	bne.n	801af74 <read_submessage_list+0x158>
 801af92:	e74a      	b.n	801ae2a <read_submessage_list+0xe>
 801af94:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801af98:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801af9c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 801afa0:	4628      	mov	r0, r5
 801afa2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801afa6:	4651      	mov	r1, sl
 801afa8:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801afac:	f1a8 0804 	sub.w	r8, r8, #4
 801afb0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801afb4:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801afb8:	fa1f f888 	uxth.w	r8, r8
 801afbc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801afc0:	f009 090e 	and.w	r9, r9, #14
 801afc4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801afc8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801afcc:	f002 f9b0 	bl	801d330 <uxr_deserialize_BaseObjectRequest>
 801afd0:	4650      	mov	r0, sl
 801afd2:	a90f      	add	r1, sp, #60	@ 0x3c
 801afd4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801afd8:	f000 fdca 	bl	801bb70 <uxr_parse_base_object_request>
 801afdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801afde:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801afe2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801afe6:	9110      	str	r1, [sp, #64]	@ 0x40
 801afe8:	f1bb 0f00 	cmp.w	fp, #0
 801afec:	d006      	beq.n	801affc <read_submessage_list+0x1e0>
 801afee:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801aff2:	4652      	mov	r2, sl
 801aff4:	4620      	mov	r0, r4
 801aff6:	9300      	str	r3, [sp, #0]
 801aff8:	2300      	movs	r3, #0
 801affa:	47d8      	blx	fp
 801affc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801affe:	b182      	cbz	r2, 801b022 <read_submessage_list+0x206>
 801b000:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801b002:	f04f 0c00 	mov.w	ip, #0
 801b006:	3902      	subs	r1, #2
 801b008:	e003      	b.n	801b012 <read_submessage_list+0x1f6>
 801b00a:	f10c 0c01 	add.w	ip, ip, #1
 801b00e:	4594      	cmp	ip, r2
 801b010:	d007      	beq.n	801b022 <read_submessage_list+0x206>
 801b012:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801b016:	4553      	cmp	r3, sl
 801b018:	d1f7      	bne.n	801b00a <read_submessage_list+0x1ee>
 801b01a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801b01c:	2200      	movs	r2, #0
 801b01e:	f803 200c 	strb.w	r2, [r3, ip]
 801b022:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801b026:	464b      	mov	r3, r9
 801b028:	4642      	mov	r2, r8
 801b02a:	4620      	mov	r0, r4
 801b02c:	9102      	str	r1, [sp, #8]
 801b02e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b030:	9101      	str	r1, [sp, #4]
 801b032:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b034:	9100      	str	r1, [sp, #0]
 801b036:	4629      	mov	r1, r5
 801b038:	f7ff fc4a 	bl	801a8d0 <read_submessage_format>
 801b03c:	e6f5      	b.n	801ae2a <read_submessage_list+0xe>
 801b03e:	4629      	mov	r1, r5
 801b040:	4620      	mov	r0, r4
 801b042:	f7ff fea3 	bl	801ad8c <read_submessage_info>
 801b046:	e6f0      	b.n	801ae2a <read_submessage_list+0xe>
 801b048:	2a00      	cmp	r2, #0
 801b04a:	d03e      	beq.n	801b0ca <read_submessage_list+0x2ae>
 801b04c:	a910      	add	r1, sp, #64	@ 0x40
 801b04e:	4628      	mov	r0, r5
 801b050:	f002 fb64 	bl	801d71c <uxr_deserialize_STATUS_Payload>
 801b054:	a90e      	add	r1, sp, #56	@ 0x38
 801b056:	aa0d      	add	r2, sp, #52	@ 0x34
 801b058:	a810      	add	r0, sp, #64	@ 0x40
 801b05a:	f000 fd89 	bl	801bb70 <uxr_parse_base_object_request>
 801b05e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b060:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801b064:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801b068:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801b06c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b06e:	f1ba 0f00 	cmp.w	sl, #0
 801b072:	d006      	beq.n	801b082 <read_submessage_list+0x266>
 801b074:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801b078:	4642      	mov	r2, r8
 801b07a:	4620      	mov	r0, r4
 801b07c:	9300      	str	r3, [sp, #0]
 801b07e:	464b      	mov	r3, r9
 801b080:	47d0      	blx	sl
 801b082:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801b084:	2a00      	cmp	r2, #0
 801b086:	f43f aed0 	beq.w	801ae2a <read_submessage_list+0xe>
 801b08a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801b08c:	2100      	movs	r1, #0
 801b08e:	3802      	subs	r0, #2
 801b090:	e003      	b.n	801b09a <read_submessage_list+0x27e>
 801b092:	3101      	adds	r1, #1
 801b094:	4291      	cmp	r1, r2
 801b096:	f43f aec8 	beq.w	801ae2a <read_submessage_list+0xe>
 801b09a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801b09e:	4543      	cmp	r3, r8
 801b0a0:	d1f7      	bne.n	801b092 <read_submessage_list+0x276>
 801b0a2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801b0a4:	f803 9001 	strb.w	r9, [r3, r1]
 801b0a8:	e6bf      	b.n	801ae2a <read_submessage_list+0xe>
 801b0aa:	2a00      	cmp	r2, #0
 801b0ac:	f47f aebd 	bne.w	801ae2a <read_submessage_list+0xe>
 801b0b0:	4629      	mov	r1, r5
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	f000 fca0 	bl	801b9f8 <uxr_read_create_session_status>
 801b0b8:	e6b7      	b.n	801ae2a <read_submessage_list+0xe>
 801b0ba:	4629      	mov	r1, r5
 801b0bc:	4620      	mov	r0, r4
 801b0be:	f7ff fcf3 	bl	801aaa8 <read_submessage_get_info>
 801b0c2:	e6b2      	b.n	801ae2a <read_submessage_list+0xe>
 801b0c4:	b017      	add	sp, #92	@ 0x5c
 801b0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ca:	4629      	mov	r1, r5
 801b0cc:	4620      	mov	r0, r4
 801b0ce:	f000 fca1 	bl	801ba14 <uxr_read_delete_session_status>
 801b0d2:	e6aa      	b.n	801ae2a <read_submessage_list+0xe>
 801b0d4:	f001 fb7a 	bl	801c7cc <uxr_nanos>
 801b0d8:	4642      	mov	r2, r8
 801b0da:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801b0dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b0de:	fbc7 3206 	smlal	r3, r2, r7, r6
 801b0e2:	1818      	adds	r0, r3, r0
 801b0e4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801b0e6:	eb42 0101 	adc.w	r1, r2, r1
 801b0ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b0ec:	4642      	mov	r2, r8
 801b0ee:	fbc7 3206 	smlal	r3, r2, r7, r6
 801b0f2:	469c      	mov	ip, r3
 801b0f4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 801b0f8:	fbc3 7806 	smlal	r7, r8, r3, r6
 801b0fc:	4643      	mov	r3, r8
 801b0fe:	eb1c 0c07 	adds.w	ip, ip, r7
 801b102:	eb42 0203 	adc.w	r2, r2, r3
 801b106:	ebb0 030c 	subs.w	r3, r0, ip
 801b10a:	eb61 0202 	sbc.w	r2, r1, r2
 801b10e:	2a00      	cmp	r2, #0
 801b110:	db08      	blt.n	801b124 <read_submessage_list+0x308>
 801b112:	085b      	lsrs	r3, r3, #1
 801b114:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801b118:	1052      	asrs	r2, r2, #1
 801b11a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801b11e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801b122:	e6db      	b.n	801aedc <read_submessage_list+0xc0>
 801b124:	3301      	adds	r3, #1
 801b126:	f142 0200 	adc.w	r2, r2, #0
 801b12a:	e7f2      	b.n	801b112 <read_submessage_list+0x2f6>
 801b12c:	3b9aca00 	.word	0x3b9aca00

0801b130 <listen_message_reliably>:
 801b130:	1e0b      	subs	r3, r1, #0
 801b132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b136:	bfb8      	it	lt
 801b138:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801b13c:	b09d      	sub	sp, #116	@ 0x74
 801b13e:	4680      	mov	r8, r0
 801b140:	9305      	str	r3, [sp, #20]
 801b142:	f001 fb27 	bl	801c794 <uxr_millis>
 801b146:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801b14a:	4681      	mov	r9, r0
 801b14c:	2a00      	cmp	r2, #0
 801b14e:	f000 809a 	beq.w	801b286 <listen_message_reliably+0x156>
 801b152:	2600      	movs	r6, #0
 801b154:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b158:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801b15c:	460f      	mov	r7, r1
 801b15e:	4630      	mov	r0, r6
 801b160:	9303      	str	r3, [sp, #12]
 801b162:	e00e      	b.n	801b182 <listen_message_reliably+0x52>
 801b164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b166:	3601      	adds	r6, #1
 801b168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b16a:	455a      	cmp	r2, fp
 801b16c:	9903      	ldr	r1, [sp, #12]
 801b16e:	b2f0      	uxtb	r0, r6
 801b170:	eb73 0101 	sbcs.w	r1, r3, r1
 801b174:	da01      	bge.n	801b17a <listen_message_reliably+0x4a>
 801b176:	4693      	mov	fp, r2
 801b178:	9303      	str	r3, [sp, #12]
 801b17a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801b17e:	4283      	cmp	r3, r0
 801b180:	d95f      	bls.n	801b242 <listen_message_reliably+0x112>
 801b182:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801b186:	2102      	movs	r1, #2
 801b188:	2201      	movs	r2, #1
 801b18a:	00e4      	lsls	r4, r4, #3
 801b18c:	f001 f97e 	bl	801c48c <uxr_stream_id>
 801b190:	4601      	mov	r1, r0
 801b192:	f104 0520 	add.w	r5, r4, #32
 801b196:	463b      	mov	r3, r7
 801b198:	464a      	mov	r2, r9
 801b19a:	9109      	str	r1, [sp, #36]	@ 0x24
 801b19c:	4445      	add	r5, r8
 801b19e:	4628      	mov	r0, r5
 801b1a0:	f003 feae 	bl	801ef00 <uxr_update_output_stream_heartbeat_timestamp>
 801b1a4:	eb08 0304 	add.w	r3, r8, r4
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	d0db      	beq.n	801b164 <listen_message_reliably+0x34>
 801b1ac:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801b1b0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801b1b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801b1b8:	4640      	mov	r0, r8
 801b1ba:	3501      	adds	r5, #1
 801b1bc:	4444      	add	r4, r8
 801b1be:	9304      	str	r3, [sp, #16]
 801b1c0:	f000 fcae 	bl	801bb20 <uxr_session_header_offset>
 801b1c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	2211      	movs	r2, #17
 801b1cc:	a90c      	add	r1, sp, #48	@ 0x30
 801b1ce:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801b1d2:	9000      	str	r0, [sp, #0]
 801b1d4:	4650      	mov	r0, sl
 801b1d6:	3601      	adds	r6, #1
 801b1d8:	f7f7 fa72 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801b1dc:	2300      	movs	r3, #0
 801b1de:	2205      	movs	r2, #5
 801b1e0:	210b      	movs	r1, #11
 801b1e2:	4650      	mov	r0, sl
 801b1e4:	f001 fa90 	bl	801c708 <uxr_buffer_submessage_header>
 801b1e8:	2101      	movs	r1, #1
 801b1ea:	8968      	ldrh	r0, [r5, #10]
 801b1ec:	f003 ff2a 	bl	801f044 <uxr_seq_num_add>
 801b1f0:	892b      	ldrh	r3, [r5, #8]
 801b1f2:	4602      	mov	r2, r0
 801b1f4:	a90a      	add	r1, sp, #40	@ 0x28
 801b1f6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801b1fa:	4650      	mov	r0, sl
 801b1fc:	9b04      	ldr	r3, [sp, #16]
 801b1fe:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b202:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801b206:	f002 fb45 	bl	801d894 <uxr_serialize_HEARTBEAT_Payload>
 801b20a:	2200      	movs	r2, #0
 801b20c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b20e:	4640      	mov	r0, r8
 801b210:	4611      	mov	r1, r2
 801b212:	f000 fc31 	bl	801ba78 <uxr_stamp_session_header>
 801b216:	4650      	mov	r0, sl
 801b218:	f7f7 fa92 	bl	8012740 <ucdr_buffer_length>
 801b21c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801b220:	4602      	mov	r2, r0
 801b222:	a90c      	add	r1, sp, #48	@ 0x30
 801b224:	e9d3 0500 	ldrd	r0, r5, [r3]
 801b228:	47a8      	blx	r5
 801b22a:	9903      	ldr	r1, [sp, #12]
 801b22c:	b2f0      	uxtb	r0, r6
 801b22e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801b232:	455a      	cmp	r2, fp
 801b234:	eb73 0101 	sbcs.w	r1, r3, r1
 801b238:	db9d      	blt.n	801b176 <listen_message_reliably+0x46>
 801b23a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801b23e:	4283      	cmp	r3, r0
 801b240:	d89f      	bhi.n	801b182 <listen_message_reliably+0x52>
 801b242:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b246:	9a03      	ldr	r2, [sp, #12]
 801b248:	429a      	cmp	r2, r3
 801b24a:	bf08      	it	eq
 801b24c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801b250:	d019      	beq.n	801b286 <listen_message_reliably+0x156>
 801b252:	ebab 0309 	sub.w	r3, fp, r9
 801b256:	2b00      	cmp	r3, #0
 801b258:	9d05      	ldr	r5, [sp, #20]
 801b25a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801b25e:	aa08      	add	r2, sp, #32
 801b260:	bf08      	it	eq
 801b262:	2301      	moveq	r3, #1
 801b264:	a907      	add	r1, sp, #28
 801b266:	6884      	ldr	r4, [r0, #8]
 801b268:	429d      	cmp	r5, r3
 801b26a:	6800      	ldr	r0, [r0, #0]
 801b26c:	bfa8      	it	ge
 801b26e:	461d      	movge	r5, r3
 801b270:	462b      	mov	r3, r5
 801b272:	47a0      	blx	r4
 801b274:	b948      	cbnz	r0, 801b28a <listen_message_reliably+0x15a>
 801b276:	9b05      	ldr	r3, [sp, #20]
 801b278:	1b5b      	subs	r3, r3, r5
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	9305      	str	r3, [sp, #20]
 801b27e:	f73f af60 	bgt.w	801b142 <listen_message_reliably+0x12>
 801b282:	4604      	mov	r4, r0
 801b284:	e012      	b.n	801b2ac <listen_message_reliably+0x17c>
 801b286:	9b05      	ldr	r3, [sp, #20]
 801b288:	e7e5      	b.n	801b256 <listen_message_reliably+0x126>
 801b28a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801b28e:	4604      	mov	r4, r0
 801b290:	2500      	movs	r5, #0
 801b292:	a80c      	add	r0, sp, #48	@ 0x30
 801b294:	f7f7 fa26 	bl	80126e4 <ucdr_init_buffer>
 801b298:	f10d 031a 	add.w	r3, sp, #26
 801b29c:	aa06      	add	r2, sp, #24
 801b29e:	a90c      	add	r1, sp, #48	@ 0x30
 801b2a0:	4640      	mov	r0, r8
 801b2a2:	f88d 5018 	strb.w	r5, [sp, #24]
 801b2a6:	f000 fbfb 	bl	801baa0 <uxr_read_session_header>
 801b2aa:	b918      	cbnz	r0, 801b2b4 <listen_message_reliably+0x184>
 801b2ac:	4620      	mov	r0, r4
 801b2ae:	b01d      	add	sp, #116	@ 0x74
 801b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2b4:	4629      	mov	r1, r5
 801b2b6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801b2ba:	f001 f915 	bl	801c4e8 <uxr_stream_id_from_raw>
 801b2be:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801b2c2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801b2c6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801b2ca:	2e01      	cmp	r6, #1
 801b2cc:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801b2d0:	d04b      	beq.n	801b36a <listen_message_reliably+0x23a>
 801b2d2:	2e02      	cmp	r6, #2
 801b2d4:	d00f      	beq.n	801b2f6 <listen_message_reliably+0x1c6>
 801b2d6:	2e00      	cmp	r6, #0
 801b2d8:	d1e8      	bne.n	801b2ac <listen_message_reliably+0x17c>
 801b2da:	4631      	mov	r1, r6
 801b2dc:	4630      	mov	r0, r6
 801b2de:	f001 f903 	bl	801c4e8 <uxr_stream_id_from_raw>
 801b2e2:	4602      	mov	r2, r0
 801b2e4:	a90c      	add	r1, sp, #48	@ 0x30
 801b2e6:	4640      	mov	r0, r8
 801b2e8:	920a      	str	r2, [sp, #40]	@ 0x28
 801b2ea:	f7ff fd97 	bl	801ae1c <read_submessage_list>
 801b2ee:	4620      	mov	r0, r4
 801b2f0:	b01d      	add	sp, #116	@ 0x74
 801b2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2f6:	4629      	mov	r1, r5
 801b2f8:	f108 0008 	add.w	r0, r8, #8
 801b2fc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801b300:	f001 f9e0 	bl	801c6c4 <uxr_get_input_reliable_stream>
 801b304:	4607      	mov	r7, r0
 801b306:	b338      	cbz	r0, 801b358 <listen_message_reliably+0x228>
 801b308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b30a:	a80c      	add	r0, sp, #48	@ 0x30
 801b30c:	9203      	str	r2, [sp, #12]
 801b30e:	f7f7 fa1b 	bl	8012748 <ucdr_buffer_remaining>
 801b312:	4603      	mov	r3, r0
 801b314:	f10d 0019 	add.w	r0, sp, #25
 801b318:	9a03      	ldr	r2, [sp, #12]
 801b31a:	4651      	mov	r1, sl
 801b31c:	9000      	str	r0, [sp, #0]
 801b31e:	4638      	mov	r0, r7
 801b320:	f003 f9f8 	bl	801e714 <uxr_receive_reliable_message>
 801b324:	b1c0      	cbz	r0, 801b358 <listen_message_reliably+0x228>
 801b326:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801b32a:	b393      	cbz	r3, 801b392 <listen_message_reliably+0x262>
 801b32c:	ae14      	add	r6, sp, #80	@ 0x50
 801b32e:	f04f 0a02 	mov.w	sl, #2
 801b332:	e00a      	b.n	801b34a <listen_message_reliably+0x21a>
 801b334:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801b338:	4631      	mov	r1, r6
 801b33a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801b33e:	4640      	mov	r0, r8
 801b340:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801b344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b346:	f7ff fd69 	bl	801ae1c <read_submessage_list>
 801b34a:	2204      	movs	r2, #4
 801b34c:	4631      	mov	r1, r6
 801b34e:	4638      	mov	r0, r7
 801b350:	f003 fa62 	bl	801e818 <uxr_next_input_reliable_buffer_available>
 801b354:	2800      	cmp	r0, #0
 801b356:	d1ed      	bne.n	801b334 <listen_message_reliably+0x204>
 801b358:	4640      	mov	r0, r8
 801b35a:	462a      	mov	r2, r5
 801b35c:	4649      	mov	r1, r9
 801b35e:	f7ff fbd9 	bl	801ab14 <write_submessage_acknack.isra.0>
 801b362:	4620      	mov	r0, r4
 801b364:	b01d      	add	sp, #116	@ 0x74
 801b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b36a:	4629      	mov	r1, r5
 801b36c:	f108 0008 	add.w	r0, r8, #8
 801b370:	f001 f99e 	bl	801c6b0 <uxr_get_input_best_effort_stream>
 801b374:	2800      	cmp	r0, #0
 801b376:	d099      	beq.n	801b2ac <listen_message_reliably+0x17c>
 801b378:	4651      	mov	r1, sl
 801b37a:	f003 f941 	bl	801e600 <uxr_receive_best_effort_message>
 801b37e:	2800      	cmp	r0, #0
 801b380:	d094      	beq.n	801b2ac <listen_message_reliably+0x17c>
 801b382:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801b386:	a90c      	add	r1, sp, #48	@ 0x30
 801b388:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b38a:	4640      	mov	r0, r8
 801b38c:	f7ff fd46 	bl	801ae1c <read_submessage_list>
 801b390:	e78c      	b.n	801b2ac <listen_message_reliably+0x17c>
 801b392:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801b396:	a90c      	add	r1, sp, #48	@ 0x30
 801b398:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b39a:	4640      	mov	r0, r8
 801b39c:	f7ff fd3e 	bl	801ae1c <read_submessage_list>
 801b3a0:	e7c4      	b.n	801b32c <listen_message_reliably+0x1fc>
 801b3a2:	bf00      	nop

0801b3a4 <uxr_run_session_timeout>:
 801b3a4:	b570      	push	{r4, r5, r6, lr}
 801b3a6:	4604      	mov	r4, r0
 801b3a8:	460d      	mov	r5, r1
 801b3aa:	f001 f9f3 	bl	801c794 <uxr_millis>
 801b3ae:	4606      	mov	r6, r0
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f7ff fc77 	bl	801aca4 <uxr_flash_output_streams>
 801b3b6:	4629      	mov	r1, r5
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	f7ff feb9 	bl	801b130 <listen_message_reliably>
 801b3be:	f001 f9e9 	bl	801c794 <uxr_millis>
 801b3c2:	1b83      	subs	r3, r0, r6
 801b3c4:	1ae9      	subs	r1, r5, r3
 801b3c6:	2900      	cmp	r1, #0
 801b3c8:	dcf6      	bgt.n	801b3b8 <uxr_run_session_timeout+0x14>
 801b3ca:	f104 0008 	add.w	r0, r4, #8
 801b3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3d2:	f001 b983 	b.w	801c6dc <uxr_output_streams_confirmed>
 801b3d6:	bf00      	nop

0801b3d8 <uxr_run_session_until_data>:
 801b3d8:	b570      	push	{r4, r5, r6, lr}
 801b3da:	4604      	mov	r4, r0
 801b3dc:	460d      	mov	r5, r1
 801b3de:	f001 f9d9 	bl	801c794 <uxr_millis>
 801b3e2:	4606      	mov	r6, r0
 801b3e4:	4620      	mov	r0, r4
 801b3e6:	f7ff fc5d 	bl	801aca4 <uxr_flash_output_streams>
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	4629      	mov	r1, r5
 801b3ee:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801b3f2:	e005      	b.n	801b400 <uxr_run_session_until_data+0x28>
 801b3f4:	f001 f9ce 	bl	801c794 <uxr_millis>
 801b3f8:	1b83      	subs	r3, r0, r6
 801b3fa:	1ae9      	subs	r1, r5, r3
 801b3fc:	2900      	cmp	r1, #0
 801b3fe:	dd07      	ble.n	801b410 <uxr_run_session_until_data+0x38>
 801b400:	4620      	mov	r0, r4
 801b402:	f7ff fe95 	bl	801b130 <listen_message_reliably>
 801b406:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801b40a:	2800      	cmp	r0, #0
 801b40c:	d0f2      	beq.n	801b3f4 <uxr_run_session_until_data+0x1c>
 801b40e:	bd70      	pop	{r4, r5, r6, pc}
 801b410:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801b414:	bd70      	pop	{r4, r5, r6, pc}
 801b416:	bf00      	nop

0801b418 <uxr_run_session_until_confirm_delivery>:
 801b418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b41c:	4606      	mov	r6, r0
 801b41e:	460d      	mov	r5, r1
 801b420:	f001 f9b8 	bl	801c794 <uxr_millis>
 801b424:	4607      	mov	r7, r0
 801b426:	4630      	mov	r0, r6
 801b428:	f106 0808 	add.w	r8, r6, #8
 801b42c:	f7ff fc3a 	bl	801aca4 <uxr_flash_output_streams>
 801b430:	2d00      	cmp	r5, #0
 801b432:	db10      	blt.n	801b456 <uxr_run_session_until_confirm_delivery+0x3e>
 801b434:	462c      	mov	r4, r5
 801b436:	e006      	b.n	801b446 <uxr_run_session_until_confirm_delivery+0x2e>
 801b438:	f7ff fe7a 	bl	801b130 <listen_message_reliably>
 801b43c:	f001 f9aa 	bl	801c794 <uxr_millis>
 801b440:	1bc3      	subs	r3, r0, r7
 801b442:	1aec      	subs	r4, r5, r3
 801b444:	d407      	bmi.n	801b456 <uxr_run_session_until_confirm_delivery+0x3e>
 801b446:	4640      	mov	r0, r8
 801b448:	f001 f948 	bl	801c6dc <uxr_output_streams_confirmed>
 801b44c:	4603      	mov	r3, r0
 801b44e:	4621      	mov	r1, r4
 801b450:	4630      	mov	r0, r6
 801b452:	2b00      	cmp	r3, #0
 801b454:	d0f0      	beq.n	801b438 <uxr_run_session_until_confirm_delivery+0x20>
 801b456:	4640      	mov	r0, r8
 801b458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b45c:	f001 b93e 	b.w	801c6dc <uxr_output_streams_confirmed>

0801b460 <uxr_run_session_until_all_status>:
 801b460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b464:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 801b468:	4606      	mov	r6, r0
 801b46a:	4688      	mov	r8, r1
 801b46c:	4692      	mov	sl, r2
 801b46e:	461f      	mov	r7, r3
 801b470:	f7ff fc18 	bl	801aca4 <uxr_flash_output_streams>
 801b474:	f1bb 0f00 	cmp.w	fp, #0
 801b478:	d004      	beq.n	801b484 <uxr_run_session_until_all_status+0x24>
 801b47a:	465a      	mov	r2, fp
 801b47c:	21ff      	movs	r1, #255	@ 0xff
 801b47e:	4638      	mov	r0, r7
 801b480:	f004 fad8 	bl	801fa34 <memset>
 801b484:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801b488:	1e7d      	subs	r5, r7, #1
 801b48a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801b48e:	f001 f981 	bl	801c794 <uxr_millis>
 801b492:	4641      	mov	r1, r8
 801b494:	4681      	mov	r9, r0
 801b496:	4630      	mov	r0, r6
 801b498:	f7ff fe4a 	bl	801b130 <listen_message_reliably>
 801b49c:	f001 f97a 	bl	801c794 <uxr_millis>
 801b4a0:	eba0 0009 	sub.w	r0, r0, r9
 801b4a4:	eba8 0100 	sub.w	r1, r8, r0
 801b4a8:	f1bb 0f00 	cmp.w	fp, #0
 801b4ac:	d029      	beq.n	801b502 <uxr_run_session_until_all_status+0xa2>
 801b4ae:	46ae      	mov	lr, r5
 801b4b0:	f04f 0c00 	mov.w	ip, #0
 801b4b4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 801b4b8:	2cff      	cmp	r4, #255	@ 0xff
 801b4ba:	d015      	beq.n	801b4e8 <uxr_run_session_until_all_status+0x88>
 801b4bc:	f10c 0c01 	add.w	ip, ip, #1
 801b4c0:	45e3      	cmp	fp, ip
 801b4c2:	d8f7      	bhi.n	801b4b4 <uxr_run_session_until_all_status+0x54>
 801b4c4:	2300      	movs	r3, #0
 801b4c6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801b4c8:	e000      	b.n	801b4cc <uxr_run_session_until_all_status+0x6c>
 801b4ca:	b158      	cbz	r0, 801b4e4 <uxr_run_session_until_all_status+0x84>
 801b4cc:	462b      	mov	r3, r5
 801b4ce:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801b4d2:	3302      	adds	r3, #2
 801b4d4:	2801      	cmp	r0, #1
 801b4d6:	eba3 0307 	sub.w	r3, r3, r7
 801b4da:	bf8c      	ite	hi
 801b4dc:	2000      	movhi	r0, #0
 801b4de:	2001      	movls	r0, #1
 801b4e0:	459b      	cmp	fp, r3
 801b4e2:	d8f2      	bhi.n	801b4ca <uxr_run_session_until_all_status+0x6a>
 801b4e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4e8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801b4ec:	f10c 0c01 	add.w	ip, ip, #1
 801b4f0:	45dc      	cmp	ip, fp
 801b4f2:	d201      	bcs.n	801b4f8 <uxr_run_session_until_all_status+0x98>
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d0dd      	beq.n	801b4b4 <uxr_run_session_until_all_status+0x54>
 801b4f8:	2900      	cmp	r1, #0
 801b4fa:	dde3      	ble.n	801b4c4 <uxr_run_session_until_all_status+0x64>
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d1ca      	bne.n	801b496 <uxr_run_session_until_all_status+0x36>
 801b500:	e7e0      	b.n	801b4c4 <uxr_run_session_until_all_status+0x64>
 801b502:	2001      	movs	r0, #1
 801b504:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 801b508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b50c <wait_session_status>:
 801b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b510:	4604      	mov	r4, r0
 801b512:	b09d      	sub	sp, #116	@ 0x74
 801b514:	20ff      	movs	r0, #255	@ 0xff
 801b516:	9303      	str	r3, [sp, #12]
 801b518:	7160      	strb	r0, [r4, #5]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	f000 80b6 	beq.w	801b68c <wait_session_status+0x180>
 801b520:	4689      	mov	r9, r1
 801b522:	4692      	mov	sl, r2
 801b524:	f04f 0b00 	mov.w	fp, #0
 801b528:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801b52a:	4652      	mov	r2, sl
 801b52c:	4649      	mov	r1, r9
 801b52e:	e9d3 0500 	ldrd	r0, r5, [r3]
 801b532:	47a8      	blx	r5
 801b534:	f001 f92e 	bl	801c794 <uxr_millis>
 801b538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b53c:	4605      	mov	r5, r0
 801b53e:	e009      	b.n	801b554 <wait_session_status+0x48>
 801b540:	f001 f928 	bl	801c794 <uxr_millis>
 801b544:	1b40      	subs	r0, r0, r5
 801b546:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	dd40      	ble.n	801b5d0 <wait_session_status+0xc4>
 801b54e:	7960      	ldrb	r0, [r4, #5]
 801b550:	28ff      	cmp	r0, #255	@ 0xff
 801b552:	d145      	bne.n	801b5e0 <wait_session_status+0xd4>
 801b554:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801b556:	a908      	add	r1, sp, #32
 801b558:	6896      	ldr	r6, [r2, #8]
 801b55a:	6810      	ldr	r0, [r2, #0]
 801b55c:	aa09      	add	r2, sp, #36	@ 0x24
 801b55e:	47b0      	blx	r6
 801b560:	2800      	cmp	r0, #0
 801b562:	d0ed      	beq.n	801b540 <wait_session_status+0x34>
 801b564:	a80c      	add	r0, sp, #48	@ 0x30
 801b566:	2600      	movs	r6, #0
 801b568:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801b56c:	f7f7 f8ba 	bl	80126e4 <ucdr_init_buffer>
 801b570:	f10d 031e 	add.w	r3, sp, #30
 801b574:	aa07      	add	r2, sp, #28
 801b576:	a90c      	add	r1, sp, #48	@ 0x30
 801b578:	4620      	mov	r0, r4
 801b57a:	f88d 601c 	strb.w	r6, [sp, #28]
 801b57e:	f000 fa8f 	bl	801baa0 <uxr_read_session_header>
 801b582:	2800      	cmp	r0, #0
 801b584:	d0dc      	beq.n	801b540 <wait_session_status+0x34>
 801b586:	4631      	mov	r1, r6
 801b588:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b58c:	f000 ffac 	bl	801c4e8 <uxr_stream_id_from_raw>
 801b590:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b594:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801b598:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801b59c:	2f01      	cmp	r7, #1
 801b59e:	9302      	str	r3, [sp, #8]
 801b5a0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801b5a4:	d05c      	beq.n	801b660 <wait_session_status+0x154>
 801b5a6:	2f02      	cmp	r7, #2
 801b5a8:	d020      	beq.n	801b5ec <wait_session_status+0xe0>
 801b5aa:	2f00      	cmp	r7, #0
 801b5ac:	d1c8      	bne.n	801b540 <wait_session_status+0x34>
 801b5ae:	4639      	mov	r1, r7
 801b5b0:	4638      	mov	r0, r7
 801b5b2:	f000 ff99 	bl	801c4e8 <uxr_stream_id_from_raw>
 801b5b6:	a90c      	add	r1, sp, #48	@ 0x30
 801b5b8:	4602      	mov	r2, r0
 801b5ba:	900b      	str	r0, [sp, #44]	@ 0x2c
 801b5bc:	4620      	mov	r0, r4
 801b5be:	f7ff fc2d 	bl	801ae1c <read_submessage_list>
 801b5c2:	f001 f8e7 	bl	801c794 <uxr_millis>
 801b5c6:	1b40      	subs	r0, r0, r5
 801b5c8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	dcbe      	bgt.n	801b54e <wait_session_status+0x42>
 801b5d0:	f10b 0b01 	add.w	fp, fp, #1
 801b5d4:	9b03      	ldr	r3, [sp, #12]
 801b5d6:	7960      	ldrb	r0, [r4, #5]
 801b5d8:	455b      	cmp	r3, fp
 801b5da:	d001      	beq.n	801b5e0 <wait_session_status+0xd4>
 801b5dc:	28ff      	cmp	r0, #255	@ 0xff
 801b5de:	d0a3      	beq.n	801b528 <wait_session_status+0x1c>
 801b5e0:	38ff      	subs	r0, #255	@ 0xff
 801b5e2:	bf18      	it	ne
 801b5e4:	2001      	movne	r0, #1
 801b5e6:	b01d      	add	sp, #116	@ 0x74
 801b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ec:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801b5f0:	4631      	mov	r1, r6
 801b5f2:	f104 0008 	add.w	r0, r4, #8
 801b5f6:	9304      	str	r3, [sp, #16]
 801b5f8:	f001 f864 	bl	801c6c4 <uxr_get_input_reliable_stream>
 801b5fc:	4680      	mov	r8, r0
 801b5fe:	b348      	cbz	r0, 801b654 <wait_session_status+0x148>
 801b600:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b602:	a80c      	add	r0, sp, #48	@ 0x30
 801b604:	9205      	str	r2, [sp, #20]
 801b606:	f7f7 f89f 	bl	8012748 <ucdr_buffer_remaining>
 801b60a:	4603      	mov	r3, r0
 801b60c:	f10d 001d 	add.w	r0, sp, #29
 801b610:	9a05      	ldr	r2, [sp, #20]
 801b612:	9000      	str	r0, [sp, #0]
 801b614:	4640      	mov	r0, r8
 801b616:	9902      	ldr	r1, [sp, #8]
 801b618:	f003 f87c 	bl	801e714 <uxr_receive_reliable_message>
 801b61c:	b1d0      	cbz	r0, 801b654 <wait_session_status+0x148>
 801b61e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d03a      	beq.n	801b69c <wait_session_status+0x190>
 801b626:	9f04      	ldr	r7, [sp, #16]
 801b628:	e00a      	b.n	801b640 <wait_session_status+0x134>
 801b62a:	f04f 0302 	mov.w	r3, #2
 801b62e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801b632:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801b636:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801b63a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b63c:	f7ff fbee 	bl	801ae1c <read_submessage_list>
 801b640:	a914      	add	r1, sp, #80	@ 0x50
 801b642:	2204      	movs	r2, #4
 801b644:	4640      	mov	r0, r8
 801b646:	f003 f8e7 	bl	801e818 <uxr_next_input_reliable_buffer_available>
 801b64a:	4603      	mov	r3, r0
 801b64c:	a914      	add	r1, sp, #80	@ 0x50
 801b64e:	4620      	mov	r0, r4
 801b650:	2b00      	cmp	r3, #0
 801b652:	d1ea      	bne.n	801b62a <wait_session_status+0x11e>
 801b654:	4632      	mov	r2, r6
 801b656:	9904      	ldr	r1, [sp, #16]
 801b658:	4620      	mov	r0, r4
 801b65a:	f7ff fa5b 	bl	801ab14 <write_submessage_acknack.isra.0>
 801b65e:	e76f      	b.n	801b540 <wait_session_status+0x34>
 801b660:	4631      	mov	r1, r6
 801b662:	f104 0008 	add.w	r0, r4, #8
 801b666:	f001 f823 	bl	801c6b0 <uxr_get_input_best_effort_stream>
 801b66a:	2800      	cmp	r0, #0
 801b66c:	f43f af68 	beq.w	801b540 <wait_session_status+0x34>
 801b670:	9902      	ldr	r1, [sp, #8]
 801b672:	f002 ffc5 	bl	801e600 <uxr_receive_best_effort_message>
 801b676:	2800      	cmp	r0, #0
 801b678:	f43f af62 	beq.w	801b540 <wait_session_status+0x34>
 801b67c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801b680:	a90c      	add	r1, sp, #48	@ 0x30
 801b682:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b684:	4620      	mov	r0, r4
 801b686:	f7ff fbc9 	bl	801ae1c <read_submessage_list>
 801b68a:	e759      	b.n	801b540 <wait_session_status+0x34>
 801b68c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801b68e:	e9d3 0400 	ldrd	r0, r4, [r3]
 801b692:	47a0      	blx	r4
 801b694:	2001      	movs	r0, #1
 801b696:	b01d      	add	sp, #116	@ 0x74
 801b698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b69c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801b6a0:	a90c      	add	r1, sp, #48	@ 0x30
 801b6a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b6a4:	4620      	mov	r0, r4
 801b6a6:	f7ff fbb9 	bl	801ae1c <read_submessage_list>
 801b6aa:	e7bc      	b.n	801b626 <wait_session_status+0x11a>

0801b6ac <uxr_delete_session_retries>:
 801b6ac:	b530      	push	{r4, r5, lr}
 801b6ae:	b08f      	sub	sp, #60	@ 0x3c
 801b6b0:	4604      	mov	r4, r0
 801b6b2:	460d      	mov	r5, r1
 801b6b4:	f000 fa34 	bl	801bb20 <uxr_session_header_offset>
 801b6b8:	2300      	movs	r3, #0
 801b6ba:	2210      	movs	r2, #16
 801b6bc:	a902      	add	r1, sp, #8
 801b6be:	9000      	str	r0, [sp, #0]
 801b6c0:	a806      	add	r0, sp, #24
 801b6c2:	f7f6 fffd 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801b6c6:	a906      	add	r1, sp, #24
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	f000 f979 	bl	801b9c0 <uxr_buffer_delete_session>
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	9b06      	ldr	r3, [sp, #24]
 801b6d2:	4620      	mov	r0, r4
 801b6d4:	4611      	mov	r1, r2
 801b6d6:	f000 f9cf 	bl	801ba78 <uxr_stamp_session_header>
 801b6da:	a806      	add	r0, sp, #24
 801b6dc:	f7f7 f830 	bl	8012740 <ucdr_buffer_length>
 801b6e0:	462b      	mov	r3, r5
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	a902      	add	r1, sp, #8
 801b6e6:	4620      	mov	r0, r4
 801b6e8:	f7ff ff10 	bl	801b50c <wait_session_status>
 801b6ec:	b118      	cbz	r0, 801b6f6 <uxr_delete_session_retries+0x4a>
 801b6ee:	7960      	ldrb	r0, [r4, #5]
 801b6f0:	fab0 f080 	clz	r0, r0
 801b6f4:	0940      	lsrs	r0, r0, #5
 801b6f6:	b00f      	add	sp, #60	@ 0x3c
 801b6f8:	bd30      	pop	{r4, r5, pc}
 801b6fa:	bf00      	nop

0801b6fc <uxr_create_session>:
 801b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b700:	f100 0b08 	add.w	fp, r0, #8
 801b704:	4604      	mov	r4, r0
 801b706:	b0ab      	sub	sp, #172	@ 0xac
 801b708:	4658      	mov	r0, fp
 801b70a:	465e      	mov	r6, fp
 801b70c:	f000 ff22 	bl	801c554 <uxr_reset_stream_storage>
 801b710:	4620      	mov	r0, r4
 801b712:	f000 fa05 	bl	801bb20 <uxr_session_header_offset>
 801b716:	2300      	movs	r3, #0
 801b718:	221c      	movs	r2, #28
 801b71a:	a90b      	add	r1, sp, #44	@ 0x2c
 801b71c:	9000      	str	r0, [sp, #0]
 801b71e:	a812      	add	r0, sp, #72	@ 0x48
 801b720:	f7f6 ffce 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801b724:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801b726:	a912      	add	r1, sp, #72	@ 0x48
 801b728:	4620      	mov	r0, r4
 801b72a:	8a1a      	ldrh	r2, [r3, #16]
 801b72c:	3a04      	subs	r2, #4
 801b72e:	b292      	uxth	r2, r2
 801b730:	f000 f91c 	bl	801b96c <uxr_buffer_create_session>
 801b734:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b736:	4620      	mov	r0, r4
 801b738:	f000 f98a 	bl	801ba50 <uxr_stamp_create_session_header>
 801b73c:	a812      	add	r0, sp, #72	@ 0x48
 801b73e:	f7f6 ffff 	bl	8012740 <ucdr_buffer_length>
 801b742:	23ff      	movs	r3, #255	@ 0xff
 801b744:	4681      	mov	r9, r0
 801b746:	7163      	strb	r3, [r4, #5]
 801b748:	230a      	movs	r3, #10
 801b74a:	9303      	str	r3, [sp, #12]
 801b74c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801b74e:	464a      	mov	r2, r9
 801b750:	a90b      	add	r1, sp, #44	@ 0x2c
 801b752:	e9d3 0500 	ldrd	r0, r5, [r3]
 801b756:	47a8      	blx	r5
 801b758:	f001 f81c 	bl	801c794 <uxr_millis>
 801b75c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b760:	4605      	mov	r5, r0
 801b762:	e009      	b.n	801b778 <uxr_create_session+0x7c>
 801b764:	f001 f816 	bl	801c794 <uxr_millis>
 801b768:	1b40      	subs	r0, r0, r5
 801b76a:	7962      	ldrb	r2, [r4, #5]
 801b76c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801b770:	2b00      	cmp	r3, #0
 801b772:	dd38      	ble.n	801b7e6 <uxr_create_session+0xea>
 801b774:	2aff      	cmp	r2, #255	@ 0xff
 801b776:	d13c      	bne.n	801b7f2 <uxr_create_session+0xf6>
 801b778:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801b77a:	a907      	add	r1, sp, #28
 801b77c:	6897      	ldr	r7, [r2, #8]
 801b77e:	6810      	ldr	r0, [r2, #0]
 801b780:	aa08      	add	r2, sp, #32
 801b782:	47b8      	blx	r7
 801b784:	2800      	cmp	r0, #0
 801b786:	d0ed      	beq.n	801b764 <uxr_create_session+0x68>
 801b788:	a81a      	add	r0, sp, #104	@ 0x68
 801b78a:	2700      	movs	r7, #0
 801b78c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801b790:	f7f6 ffa8 	bl	80126e4 <ucdr_init_buffer>
 801b794:	f10d 031a 	add.w	r3, sp, #26
 801b798:	aa06      	add	r2, sp, #24
 801b79a:	a91a      	add	r1, sp, #104	@ 0x68
 801b79c:	4620      	mov	r0, r4
 801b79e:	f88d 7018 	strb.w	r7, [sp, #24]
 801b7a2:	f000 f97d 	bl	801baa0 <uxr_read_session_header>
 801b7a6:	2800      	cmp	r0, #0
 801b7a8:	d0dc      	beq.n	801b764 <uxr_create_session+0x68>
 801b7aa:	4639      	mov	r1, r7
 801b7ac:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801b7b0:	f000 fe9a 	bl	801c4e8 <uxr_stream_id_from_raw>
 801b7b4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b7b8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801b7bc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801b7c0:	2f01      	cmp	r7, #1
 801b7c2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801b7c6:	d053      	beq.n	801b870 <uxr_create_session+0x174>
 801b7c8:	2f02      	cmp	r7, #2
 801b7ca:	d018      	beq.n	801b7fe <uxr_create_session+0x102>
 801b7cc:	2f00      	cmp	r7, #0
 801b7ce:	d1c9      	bne.n	801b764 <uxr_create_session+0x68>
 801b7d0:	4639      	mov	r1, r7
 801b7d2:	4638      	mov	r0, r7
 801b7d4:	f000 fe88 	bl	801c4e8 <uxr_stream_id_from_raw>
 801b7d8:	a91a      	add	r1, sp, #104	@ 0x68
 801b7da:	4602      	mov	r2, r0
 801b7dc:	900a      	str	r0, [sp, #40]	@ 0x28
 801b7de:	4620      	mov	r0, r4
 801b7e0:	f7ff fb1c 	bl	801ae1c <read_submessage_list>
 801b7e4:	e7be      	b.n	801b764 <uxr_create_session+0x68>
 801b7e6:	9b03      	ldr	r3, [sp, #12]
 801b7e8:	3b01      	subs	r3, #1
 801b7ea:	9303      	str	r3, [sp, #12]
 801b7ec:	d001      	beq.n	801b7f2 <uxr_create_session+0xf6>
 801b7ee:	2aff      	cmp	r2, #255	@ 0xff
 801b7f0:	d0ac      	beq.n	801b74c <uxr_create_session+0x50>
 801b7f2:	2a00      	cmp	r2, #0
 801b7f4:	d051      	beq.n	801b89a <uxr_create_session+0x19e>
 801b7f6:	2000      	movs	r0, #0
 801b7f8:	b02b      	add	sp, #172	@ 0xac
 801b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7fe:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801b802:	4641      	mov	r1, r8
 801b804:	4630      	mov	r0, r6
 801b806:	9304      	str	r3, [sp, #16]
 801b808:	f000 ff5c 	bl	801c6c4 <uxr_get_input_reliable_stream>
 801b80c:	4682      	mov	sl, r0
 801b80e:	b348      	cbz	r0, 801b864 <uxr_create_session+0x168>
 801b810:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801b812:	a81a      	add	r0, sp, #104	@ 0x68
 801b814:	9205      	str	r2, [sp, #20]
 801b816:	f7f6 ff97 	bl	8012748 <ucdr_buffer_remaining>
 801b81a:	4603      	mov	r3, r0
 801b81c:	f10d 0019 	add.w	r0, sp, #25
 801b820:	9a05      	ldr	r2, [sp, #20]
 801b822:	4659      	mov	r1, fp
 801b824:	9000      	str	r0, [sp, #0]
 801b826:	4650      	mov	r0, sl
 801b828:	f002 ff74 	bl	801e714 <uxr_receive_reliable_message>
 801b82c:	b1d0      	cbz	r0, 801b864 <uxr_create_session+0x168>
 801b82e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d038      	beq.n	801b8a8 <uxr_create_session+0x1ac>
 801b836:	9f04      	ldr	r7, [sp, #16]
 801b838:	e00a      	b.n	801b850 <uxr_create_session+0x154>
 801b83a:	f04f 0302 	mov.w	r3, #2
 801b83e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801b842:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801b846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b84a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b84c:	f7ff fae6 	bl	801ae1c <read_submessage_list>
 801b850:	a922      	add	r1, sp, #136	@ 0x88
 801b852:	2204      	movs	r2, #4
 801b854:	4650      	mov	r0, sl
 801b856:	f002 ffdf 	bl	801e818 <uxr_next_input_reliable_buffer_available>
 801b85a:	4603      	mov	r3, r0
 801b85c:	a922      	add	r1, sp, #136	@ 0x88
 801b85e:	4620      	mov	r0, r4
 801b860:	2b00      	cmp	r3, #0
 801b862:	d1ea      	bne.n	801b83a <uxr_create_session+0x13e>
 801b864:	4642      	mov	r2, r8
 801b866:	9904      	ldr	r1, [sp, #16]
 801b868:	4620      	mov	r0, r4
 801b86a:	f7ff f953 	bl	801ab14 <write_submessage_acknack.isra.0>
 801b86e:	e779      	b.n	801b764 <uxr_create_session+0x68>
 801b870:	4641      	mov	r1, r8
 801b872:	4630      	mov	r0, r6
 801b874:	f000 ff1c 	bl	801c6b0 <uxr_get_input_best_effort_stream>
 801b878:	2800      	cmp	r0, #0
 801b87a:	f43f af73 	beq.w	801b764 <uxr_create_session+0x68>
 801b87e:	4659      	mov	r1, fp
 801b880:	f002 febe 	bl	801e600 <uxr_receive_best_effort_message>
 801b884:	2800      	cmp	r0, #0
 801b886:	f43f af6d 	beq.w	801b764 <uxr_create_session+0x68>
 801b88a:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801b88e:	a91a      	add	r1, sp, #104	@ 0x68
 801b890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b892:	4620      	mov	r0, r4
 801b894:	f7ff fac2 	bl	801ae1c <read_submessage_list>
 801b898:	e764      	b.n	801b764 <uxr_create_session+0x68>
 801b89a:	4630      	mov	r0, r6
 801b89c:	f000 fe5a 	bl	801c554 <uxr_reset_stream_storage>
 801b8a0:	2001      	movs	r0, #1
 801b8a2:	b02b      	add	sp, #172	@ 0xac
 801b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8a8:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801b8ac:	a91a      	add	r1, sp, #104	@ 0x68
 801b8ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	f7ff fab3 	bl	801ae1c <read_submessage_list>
 801b8b6:	e7be      	b.n	801b836 <uxr_create_session+0x13a>

0801b8b8 <uxr_prepare_stream_to_write_submessage>:
 801b8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8bc:	b082      	sub	sp, #8
 801b8be:	4604      	mov	r4, r0
 801b8c0:	4610      	mov	r0, r2
 801b8c2:	4615      	mov	r5, r2
 801b8c4:	461e      	mov	r6, r3
 801b8c6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801b8ca:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801b8ce:	f105 0904 	add.w	r9, r5, #4
 801b8d2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801b8d6:	9101      	str	r1, [sp, #4]
 801b8d8:	f000 ff56 	bl	801c788 <uxr_submessage_padding>
 801b8dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801b8e0:	4481      	add	r9, r0
 801b8e2:	2b01      	cmp	r3, #1
 801b8e4:	d01d      	beq.n	801b922 <uxr_prepare_stream_to_write_submessage+0x6a>
 801b8e6:	2b02      	cmp	r3, #2
 801b8e8:	d116      	bne.n	801b918 <uxr_prepare_stream_to_write_submessage+0x60>
 801b8ea:	f104 0008 	add.w	r0, r4, #8
 801b8ee:	4651      	mov	r1, sl
 801b8f0:	f000 fed2 	bl	801c698 <uxr_get_output_reliable_stream>
 801b8f4:	4604      	mov	r4, r0
 801b8f6:	b158      	cbz	r0, 801b910 <uxr_prepare_stream_to_write_submessage+0x58>
 801b8f8:	4649      	mov	r1, r9
 801b8fa:	4632      	mov	r2, r6
 801b8fc:	f003 f952 	bl	801eba4 <uxr_prepare_reliable_buffer_to_write>
 801b900:	4604      	mov	r4, r0
 801b902:	b12c      	cbz	r4, 801b910 <uxr_prepare_stream_to_write_submessage+0x58>
 801b904:	4643      	mov	r3, r8
 801b906:	b2aa      	uxth	r2, r5
 801b908:	4639      	mov	r1, r7
 801b90a:	4630      	mov	r0, r6
 801b90c:	f000 fefc 	bl	801c708 <uxr_buffer_submessage_header>
 801b910:	4620      	mov	r0, r4
 801b912:	b002      	add	sp, #8
 801b914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b918:	2400      	movs	r4, #0
 801b91a:	4620      	mov	r0, r4
 801b91c:	b002      	add	sp, #8
 801b91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b922:	f104 0008 	add.w	r0, r4, #8
 801b926:	4651      	mov	r1, sl
 801b928:	f000 feae 	bl	801c688 <uxr_get_output_best_effort_stream>
 801b92c:	4604      	mov	r4, r0
 801b92e:	2800      	cmp	r0, #0
 801b930:	d0ee      	beq.n	801b910 <uxr_prepare_stream_to_write_submessage+0x58>
 801b932:	4649      	mov	r1, r9
 801b934:	4632      	mov	r2, r6
 801b936:	f003 f85f 	bl	801e9f8 <uxr_prepare_best_effort_buffer_to_write>
 801b93a:	4604      	mov	r4, r0
 801b93c:	e7e1      	b.n	801b902 <uxr_prepare_stream_to_write_submessage+0x4a>
 801b93e:	bf00      	nop

0801b940 <uxr_init_session_info>:
 801b940:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801b944:	23ff      	movs	r3, #255	@ 0xff
 801b946:	7102      	strb	r2, [r0, #4]
 801b948:	f880 c001 	strb.w	ip, [r0, #1]
 801b94c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801b950:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b954:	7001      	strb	r1, [r0, #0]
 801b956:	f880 c002 	strb.w	ip, [r0, #2]
 801b95a:	7143      	strb	r3, [r0, #5]
 801b95c:	70c2      	strb	r2, [r0, #3]
 801b95e:	b500      	push	{lr}
 801b960:	f04f 0e09 	mov.w	lr, #9
 801b964:	f8a0 e006 	strh.w	lr, [r0, #6]
 801b968:	f85d fb04 	ldr.w	pc, [sp], #4

0801b96c <uxr_buffer_create_session>:
 801b96c:	b530      	push	{r4, r5, lr}
 801b96e:	2300      	movs	r3, #0
 801b970:	b089      	sub	sp, #36	@ 0x24
 801b972:	4d12      	ldr	r5, [pc, #72]	@ (801b9bc <uxr_buffer_create_session+0x50>)
 801b974:	460c      	mov	r4, r1
 801b976:	9307      	str	r3, [sp, #28]
 801b978:	4619      	mov	r1, r3
 801b97a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b97e:	2201      	movs	r2, #1
 801b980:	9301      	str	r3, [sp, #4]
 801b982:	80c2      	strh	r2, [r0, #6]
 801b984:	f88d 2004 	strb.w	r2, [sp, #4]
 801b988:	682a      	ldr	r2, [r5, #0]
 801b98a:	9303      	str	r3, [sp, #12]
 801b98c:	9200      	str	r2, [sp, #0]
 801b98e:	88aa      	ldrh	r2, [r5, #4]
 801b990:	9306      	str	r3, [sp, #24]
 801b992:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b996:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801b99a:	9202      	str	r2, [sp, #8]
 801b99c:	7802      	ldrb	r2, [r0, #0]
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f88d 200c 	strb.w	r2, [sp, #12]
 801b9a4:	2210      	movs	r2, #16
 801b9a6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801b9aa:	f000 fead 	bl	801c708 <uxr_buffer_submessage_header>
 801b9ae:	4669      	mov	r1, sp
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	f001 fdcb 	bl	801d54c <uxr_serialize_CREATE_CLIENT_Payload>
 801b9b6:	b009      	add	sp, #36	@ 0x24
 801b9b8:	bd30      	pop	{r4, r5, pc}
 801b9ba:	bf00      	nop
 801b9bc:	08020b90 	.word	0x08020b90

0801b9c0 <uxr_buffer_delete_session>:
 801b9c0:	4a0c      	ldr	r2, [pc, #48]	@ (801b9f4 <uxr_buffer_delete_session+0x34>)
 801b9c2:	2302      	movs	r3, #2
 801b9c4:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801b9c8:	b510      	push	{r4, lr}
 801b9ca:	460c      	mov	r4, r1
 801b9cc:	b082      	sub	sp, #8
 801b9ce:	8911      	ldrh	r1, [r2, #8]
 801b9d0:	2204      	movs	r2, #4
 801b9d2:	80c3      	strh	r3, [r0, #6]
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	f8ad 1006 	strh.w	r1, [sp, #6]
 801b9da:	4620      	mov	r0, r4
 801b9dc:	2103      	movs	r1, #3
 801b9de:	f8ad c004 	strh.w	ip, [sp, #4]
 801b9e2:	f000 fe91 	bl	801c708 <uxr_buffer_submessage_header>
 801b9e6:	a901      	add	r1, sp, #4
 801b9e8:	4620      	mov	r0, r4
 801b9ea:	f001 fe57 	bl	801d69c <uxr_serialize_DELETE_Payload>
 801b9ee:	b002      	add	sp, #8
 801b9f0:	bd10      	pop	{r4, pc}
 801b9f2:	bf00      	nop
 801b9f4:	08020b90 	.word	0x08020b90

0801b9f8 <uxr_read_create_session_status>:
 801b9f8:	b510      	push	{r4, lr}
 801b9fa:	460b      	mov	r3, r1
 801b9fc:	b088      	sub	sp, #32
 801b9fe:	4604      	mov	r4, r0
 801ba00:	a901      	add	r1, sp, #4
 801ba02:	4618      	mov	r0, r3
 801ba04:	f001 fe5a 	bl	801d6bc <uxr_deserialize_STATUS_AGENT_Payload>
 801ba08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ba0c:	7163      	strb	r3, [r4, #5]
 801ba0e:	b008      	add	sp, #32
 801ba10:	bd10      	pop	{r4, pc}
 801ba12:	bf00      	nop

0801ba14 <uxr_read_delete_session_status>:
 801ba14:	b510      	push	{r4, lr}
 801ba16:	b084      	sub	sp, #16
 801ba18:	4604      	mov	r4, r0
 801ba1a:	4608      	mov	r0, r1
 801ba1c:	a902      	add	r1, sp, #8
 801ba1e:	f001 fe7d 	bl	801d71c <uxr_deserialize_STATUS_Payload>
 801ba22:	88e3      	ldrh	r3, [r4, #6]
 801ba24:	2b02      	cmp	r3, #2
 801ba26:	d001      	beq.n	801ba2c <uxr_read_delete_session_status+0x18>
 801ba28:	b004      	add	sp, #16
 801ba2a:	bd10      	pop	{r4, pc}
 801ba2c:	f10d 000a 	add.w	r0, sp, #10
 801ba30:	f7fe fec6 	bl	801a7c0 <uxr_object_id_from_raw>
 801ba34:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801ba38:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801ba3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ba40:	b29b      	uxth	r3, r3
 801ba42:	2b02      	cmp	r3, #2
 801ba44:	d1f0      	bne.n	801ba28 <uxr_read_delete_session_status+0x14>
 801ba46:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ba4a:	7163      	strb	r3, [r4, #5]
 801ba4c:	e7ec      	b.n	801ba28 <uxr_read_delete_session_status+0x14>
 801ba4e:	bf00      	nop

0801ba50 <uxr_stamp_create_session_header>:
 801ba50:	b510      	push	{r4, lr}
 801ba52:	2208      	movs	r2, #8
 801ba54:	b08a      	sub	sp, #40	@ 0x28
 801ba56:	4604      	mov	r4, r0
 801ba58:	eb0d 0002 	add.w	r0, sp, r2
 801ba5c:	f7f6 fe42 	bl	80126e4 <ucdr_init_buffer>
 801ba60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba64:	2300      	movs	r3, #0
 801ba66:	a802      	add	r0, sp, #8
 801ba68:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801ba6c:	9400      	str	r4, [sp, #0]
 801ba6e:	461a      	mov	r2, r3
 801ba70:	f000 fef2 	bl	801c858 <uxr_serialize_message_header>
 801ba74:	b00a      	add	sp, #40	@ 0x28
 801ba76:	bd10      	pop	{r4, pc}

0801ba78 <uxr_stamp_session_header>:
 801ba78:	b530      	push	{r4, r5, lr}
 801ba7a:	b08d      	sub	sp, #52	@ 0x34
 801ba7c:	4604      	mov	r4, r0
 801ba7e:	460d      	mov	r5, r1
 801ba80:	4619      	mov	r1, r3
 801ba82:	a804      	add	r0, sp, #16
 801ba84:	9203      	str	r2, [sp, #12]
 801ba86:	2208      	movs	r2, #8
 801ba88:	f7f6 fe2c 	bl	80126e4 <ucdr_init_buffer>
 801ba8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba90:	9b03      	ldr	r3, [sp, #12]
 801ba92:	462a      	mov	r2, r5
 801ba94:	a804      	add	r0, sp, #16
 801ba96:	9400      	str	r4, [sp, #0]
 801ba98:	f000 fede 	bl	801c858 <uxr_serialize_message_header>
 801ba9c:	b00d      	add	sp, #52	@ 0x34
 801ba9e:	bd30      	pop	{r4, r5, pc}

0801baa0 <uxr_read_session_header>:
 801baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baa4:	4607      	mov	r7, r0
 801baa6:	b084      	sub	sp, #16
 801baa8:	4608      	mov	r0, r1
 801baaa:	460c      	mov	r4, r1
 801baac:	4615      	mov	r5, r2
 801baae:	461e      	mov	r6, r3
 801bab0:	f7f6 fe4a 	bl	8012748 <ucdr_buffer_remaining>
 801bab4:	2808      	cmp	r0, #8
 801bab6:	d803      	bhi.n	801bac0 <uxr_read_session_header+0x20>
 801bab8:	2000      	movs	r0, #0
 801baba:	b004      	add	sp, #16
 801babc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bac0:	f10d 080c 	add.w	r8, sp, #12
 801bac4:	4633      	mov	r3, r6
 801bac6:	462a      	mov	r2, r5
 801bac8:	4620      	mov	r0, r4
 801baca:	f10d 010b 	add.w	r1, sp, #11
 801bace:	f8cd 8000 	str.w	r8, [sp]
 801bad2:	f000 fedf 	bl	801c894 <uxr_deserialize_message_header>
 801bad6:	783a      	ldrb	r2, [r7, #0]
 801bad8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801badc:	4293      	cmp	r3, r2
 801bade:	d1eb      	bne.n	801bab8 <uxr_read_session_header+0x18>
 801bae0:	061b      	lsls	r3, r3, #24
 801bae2:	d41b      	bmi.n	801bb1c <uxr_read_session_header+0x7c>
 801bae4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801bae8:	787b      	ldrb	r3, [r7, #1]
 801baea:	429a      	cmp	r2, r3
 801baec:	d003      	beq.n	801baf6 <uxr_read_session_header+0x56>
 801baee:	2001      	movs	r0, #1
 801baf0:	f080 0001 	eor.w	r0, r0, #1
 801baf4:	e7e1      	b.n	801baba <uxr_read_session_header+0x1a>
 801baf6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801bafa:	1cb8      	adds	r0, r7, #2
 801bafc:	78bb      	ldrb	r3, [r7, #2]
 801bafe:	429a      	cmp	r2, r3
 801bb00:	d1f5      	bne.n	801baee <uxr_read_session_header+0x4e>
 801bb02:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801bb06:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801bb0a:	429a      	cmp	r2, r3
 801bb0c:	d1ef      	bne.n	801baee <uxr_read_session_header+0x4e>
 801bb0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801bb12:	7843      	ldrb	r3, [r0, #1]
 801bb14:	429a      	cmp	r2, r3
 801bb16:	d1ea      	bne.n	801baee <uxr_read_session_header+0x4e>
 801bb18:	2000      	movs	r0, #0
 801bb1a:	e7e9      	b.n	801baf0 <uxr_read_session_header+0x50>
 801bb1c:	2001      	movs	r0, #1
 801bb1e:	e7cc      	b.n	801baba <uxr_read_session_header+0x1a>

0801bb20 <uxr_session_header_offset>:
 801bb20:	f990 3000 	ldrsb.w	r3, [r0]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	bfac      	ite	ge
 801bb28:	2008      	movge	r0, #8
 801bb2a:	2004      	movlt	r0, #4
 801bb2c:	4770      	bx	lr
 801bb2e:	bf00      	nop

0801bb30 <uxr_init_base_object_request>:
 801bb30:	b510      	push	{r4, lr}
 801bb32:	b082      	sub	sp, #8
 801bb34:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801bb38:	9101      	str	r1, [sp, #4]
 801bb3a:	88c3      	ldrh	r3, [r0, #6]
 801bb3c:	f1a3 010a 	sub.w	r1, r3, #10
 801bb40:	b289      	uxth	r1, r1
 801bb42:	42a1      	cmp	r1, r4
 801bb44:	d80f      	bhi.n	801bb66 <uxr_init_base_object_request+0x36>
 801bb46:	3301      	adds	r3, #1
 801bb48:	b29c      	uxth	r4, r3
 801bb4a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801bb4e:	b2db      	uxtb	r3, r3
 801bb50:	80c4      	strh	r4, [r0, #6]
 801bb52:	1c91      	adds	r1, r2, #2
 801bb54:	9801      	ldr	r0, [sp, #4]
 801bb56:	f882 c000 	strb.w	ip, [r2]
 801bb5a:	7053      	strb	r3, [r2, #1]
 801bb5c:	f7fe fe44 	bl	801a7e8 <uxr_object_id_to_raw>
 801bb60:	4620      	mov	r0, r4
 801bb62:	b002      	add	sp, #8
 801bb64:	bd10      	pop	{r4, pc}
 801bb66:	230a      	movs	r3, #10
 801bb68:	f04f 0c00 	mov.w	ip, #0
 801bb6c:	461c      	mov	r4, r3
 801bb6e:	e7ef      	b.n	801bb50 <uxr_init_base_object_request+0x20>

0801bb70 <uxr_parse_base_object_request>:
 801bb70:	b570      	push	{r4, r5, r6, lr}
 801bb72:	4604      	mov	r4, r0
 801bb74:	3002      	adds	r0, #2
 801bb76:	460d      	mov	r5, r1
 801bb78:	4616      	mov	r6, r2
 801bb7a:	f7fe fe21 	bl	801a7c0 <uxr_object_id_from_raw>
 801bb7e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801bb82:	8028      	strh	r0, [r5, #0]
 801bb84:	806b      	strh	r3, [r5, #2]
 801bb86:	7822      	ldrb	r2, [r4, #0]
 801bb88:	7863      	ldrb	r3, [r4, #1]
 801bb8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801bb8e:	8033      	strh	r3, [r6, #0]
 801bb90:	bd70      	pop	{r4, r5, r6, pc}
 801bb92:	bf00      	nop

0801bb94 <uxr_init_framing_io>:
 801bb94:	2300      	movs	r3, #0
 801bb96:	7041      	strb	r1, [r0, #1]
 801bb98:	7003      	strb	r3, [r0, #0]
 801bb9a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801bb9c:	4770      	bx	lr
 801bb9e:	bf00      	nop

0801bba0 <uxr_write_framed_msg>:
 801bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bba4:	4617      	mov	r7, r2
 801bba6:	7842      	ldrb	r2, [r0, #1]
 801bba8:	460e      	mov	r6, r1
 801bbaa:	b083      	sub	sp, #12
 801bbac:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801bbb0:	469b      	mov	fp, r3
 801bbb2:	237e      	movs	r3, #126	@ 0x7e
 801bbb4:	4604      	mov	r4, r0
 801bbb6:	2901      	cmp	r1, #1
 801bbb8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bbbc:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801bbc0:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801bbc4:	f240 8115 	bls.w	801bdf2 <uxr_write_framed_msg+0x252>
 801bbc8:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801bbcc:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801bbd0:	2202      	movs	r2, #2
 801bbd2:	2901      	cmp	r1, #1
 801bbd4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801bbd8:	d952      	bls.n	801bc80 <uxr_write_framed_msg+0xe0>
 801bbda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbdc:	2103      	movs	r1, #3
 801bbde:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801bbe2:	b2dd      	uxtb	r5, r3
 801bbe4:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801bbe8:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801bbec:	2a01      	cmp	r2, #1
 801bbee:	d95c      	bls.n	801bcaa <uxr_write_framed_msg+0x10a>
 801bbf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbf2:	1862      	adds	r2, r4, r1
 801bbf4:	3101      	adds	r1, #1
 801bbf6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bbfa:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 801bbfe:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801bc02:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801bc06:	2a01      	cmp	r2, #1
 801bc08:	d961      	bls.n	801bcce <uxr_write_framed_msg+0x12e>
 801bc0a:	1c4a      	adds	r2, r1, #1
 801bc0c:	4421      	add	r1, r4
 801bc0e:	b2d2      	uxtb	r2, r2
 801bc10:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801bc14:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d06a      	beq.n	801bcf2 <uxr_write_framed_msg+0x152>
 801bc1c:	f04f 0800 	mov.w	r8, #0
 801bc20:	46c1      	mov	r9, r8
 801bc22:	e016      	b.n	801bc52 <uxr_write_framed_msg+0xb2>
 801bc24:	2a29      	cmp	r2, #41	@ 0x29
 801bc26:	d868      	bhi.n	801bcfa <uxr_write_framed_msg+0x15a>
 801bc28:	18a0      	adds	r0, r4, r2
 801bc2a:	3201      	adds	r2, #1
 801bc2c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801bc30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801bc34:	ea88 0101 	eor.w	r1, r8, r1
 801bc38:	4b7d      	ldr	r3, [pc, #500]	@ (801be30 <uxr_write_framed_msg+0x290>)
 801bc3a:	f109 0901 	add.w	r9, r9, #1
 801bc3e:	b2c9      	uxtb	r1, r1
 801bc40:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801bc44:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801bc48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc4a:	454b      	cmp	r3, r9
 801bc4c:	d969      	bls.n	801bd22 <uxr_write_framed_msg+0x182>
 801bc4e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801bc52:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801bc56:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801bc5a:	2801      	cmp	r0, #1
 801bc5c:	d8e2      	bhi.n	801bc24 <uxr_write_framed_msg+0x84>
 801bc5e:	1c50      	adds	r0, r2, #1
 801bc60:	b2c0      	uxtb	r0, r0
 801bc62:	2829      	cmp	r0, #41	@ 0x29
 801bc64:	d849      	bhi.n	801bcfa <uxr_write_framed_msg+0x15a>
 801bc66:	18a0      	adds	r0, r4, r2
 801bc68:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801bc6c:	3202      	adds	r2, #2
 801bc6e:	f081 0520 	eor.w	r5, r1, #32
 801bc72:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801bc76:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801bc7a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801bc7e:	e7d9      	b.n	801bc34 <uxr_write_framed_msg+0x94>
 801bc80:	2104      	movs	r1, #4
 801bc82:	f04f 0c03 	mov.w	ip, #3
 801bc86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc88:	4422      	add	r2, r4
 801bc8a:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801bc8e:	44a4      	add	ip, r4
 801bc90:	b2dd      	uxtb	r5, r3
 801bc92:	f080 0020 	eor.w	r0, r0, #32
 801bc96:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801bc9a:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801bc9e:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801bca2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801bca6:	2a01      	cmp	r2, #1
 801bca8:	d8a2      	bhi.n	801bbf0 <uxr_write_framed_msg+0x50>
 801bcaa:	1862      	adds	r2, r4, r1
 801bcac:	207d      	movs	r0, #125	@ 0x7d
 801bcae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bcb0:	f085 0520 	eor.w	r5, r5, #32
 801bcb4:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 801bcb8:	3102      	adds	r1, #2
 801bcba:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bcbe:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801bcc2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801bcc6:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801bcca:	2a01      	cmp	r2, #1
 801bccc:	d89d      	bhi.n	801bc0a <uxr_write_framed_msg+0x6a>
 801bcce:	1c4d      	adds	r5, r1, #1
 801bcd0:	1c8a      	adds	r2, r1, #2
 801bcd2:	f080 0020 	eor.w	r0, r0, #32
 801bcd6:	4421      	add	r1, r4
 801bcd8:	fa54 f585 	uxtab	r5, r4, r5
 801bcdc:	b2d2      	uxtb	r2, r2
 801bcde:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801bce2:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801bce6:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801bcea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d194      	bne.n	801bc1c <uxr_write_framed_msg+0x7c>
 801bcf2:	4619      	mov	r1, r3
 801bcf4:	f8ad 3004 	strh.w	r3, [sp, #4]
 801bcf8:	e019      	b.n	801bd2e <uxr_write_framed_msg+0x18e>
 801bcfa:	2500      	movs	r5, #0
 801bcfc:	e000      	b.n	801bd00 <uxr_write_framed_msg+0x160>
 801bcfe:	b160      	cbz	r0, 801bd1a <uxr_write_framed_msg+0x17a>
 801bd00:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801bd04:	1b52      	subs	r2, r2, r5
 801bd06:	4653      	mov	r3, sl
 801bd08:	4638      	mov	r0, r7
 801bd0a:	4421      	add	r1, r4
 801bd0c:	47b0      	blx	r6
 801bd0e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801bd12:	4405      	add	r5, r0
 801bd14:	4295      	cmp	r5, r2
 801bd16:	d3f2      	bcc.n	801bcfe <uxr_write_framed_msg+0x15e>
 801bd18:	d066      	beq.n	801bde8 <uxr_write_framed_msg+0x248>
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	b003      	add	sp, #12
 801bd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd22:	fa5f f188 	uxtb.w	r1, r8
 801bd26:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801bd2a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801bd2e:	f04f 0900 	mov.w	r9, #0
 801bd32:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801bd36:	46c8      	mov	r8, r9
 801bd38:	e013      	b.n	801bd62 <uxr_write_framed_msg+0x1c2>
 801bd3a:	2a29      	cmp	r2, #41	@ 0x29
 801bd3c:	d824      	bhi.n	801bd88 <uxr_write_framed_msg+0x1e8>
 801bd3e:	18a3      	adds	r3, r4, r2
 801bd40:	3201      	adds	r2, #1
 801bd42:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801bd46:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801bd4a:	f109 0901 	add.w	r9, r9, #1
 801bd4e:	f1b9 0f02 	cmp.w	r9, #2
 801bd52:	d02d      	beq.n	801bdb0 <uxr_write_framed_msg+0x210>
 801bd54:	f109 0308 	add.w	r3, r9, #8
 801bd58:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801bd5c:	446b      	add	r3, sp
 801bd5e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801bd62:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801bd66:	2b01      	cmp	r3, #1
 801bd68:	d8e7      	bhi.n	801bd3a <uxr_write_framed_msg+0x19a>
 801bd6a:	1c53      	adds	r3, r2, #1
 801bd6c:	b2db      	uxtb	r3, r3
 801bd6e:	2b29      	cmp	r3, #41	@ 0x29
 801bd70:	d80a      	bhi.n	801bd88 <uxr_write_framed_msg+0x1e8>
 801bd72:	18a3      	adds	r3, r4, r2
 801bd74:	f081 0120 	eor.w	r1, r1, #32
 801bd78:	3202      	adds	r2, #2
 801bd7a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801bd7e:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801bd82:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801bd86:	e7e0      	b.n	801bd4a <uxr_write_framed_msg+0x1aa>
 801bd88:	2500      	movs	r5, #0
 801bd8a:	e001      	b.n	801bd90 <uxr_write_framed_msg+0x1f0>
 801bd8c:	2800      	cmp	r0, #0
 801bd8e:	d0c4      	beq.n	801bd1a <uxr_write_framed_msg+0x17a>
 801bd90:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801bd94:	1b52      	subs	r2, r2, r5
 801bd96:	4653      	mov	r3, sl
 801bd98:	4638      	mov	r0, r7
 801bd9a:	4421      	add	r1, r4
 801bd9c:	47b0      	blx	r6
 801bd9e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801bda2:	4405      	add	r5, r0
 801bda4:	4295      	cmp	r5, r2
 801bda6:	d3f1      	bcc.n	801bd8c <uxr_write_framed_msg+0x1ec>
 801bda8:	d1b7      	bne.n	801bd1a <uxr_write_framed_msg+0x17a>
 801bdaa:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801bdae:	e7d1      	b.n	801bd54 <uxr_write_framed_msg+0x1b4>
 801bdb0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801bdb4:	b19a      	cbz	r2, 801bdde <uxr_write_framed_msg+0x23e>
 801bdb6:	2500      	movs	r5, #0
 801bdb8:	e001      	b.n	801bdbe <uxr_write_framed_msg+0x21e>
 801bdba:	2800      	cmp	r0, #0
 801bdbc:	d0ad      	beq.n	801bd1a <uxr_write_framed_msg+0x17a>
 801bdbe:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801bdc2:	1b52      	subs	r2, r2, r5
 801bdc4:	4653      	mov	r3, sl
 801bdc6:	4638      	mov	r0, r7
 801bdc8:	4421      	add	r1, r4
 801bdca:	47b0      	blx	r6
 801bdcc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801bdd0:	4405      	add	r5, r0
 801bdd2:	4295      	cmp	r5, r2
 801bdd4:	d3f1      	bcc.n	801bdba <uxr_write_framed_msg+0x21a>
 801bdd6:	d1a0      	bne.n	801bd1a <uxr_write_framed_msg+0x17a>
 801bdd8:	2300      	movs	r3, #0
 801bdda:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801bdde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bde0:	b298      	uxth	r0, r3
 801bde2:	b003      	add	sp, #12
 801bde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bde8:	f04f 0300 	mov.w	r3, #0
 801bdec:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801bdf0:	e72a      	b.n	801bc48 <uxr_write_framed_msg+0xa8>
 801bdf2:	217d      	movs	r1, #125	@ 0x7d
 801bdf4:	f082 0220 	eor.w	r2, r2, #32
 801bdf8:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801bdfc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801be00:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801be04:	2203      	movs	r2, #3
 801be06:	2901      	cmp	r1, #1
 801be08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801be0c:	d803      	bhi.n	801be16 <uxr_write_framed_msg+0x276>
 801be0e:	2105      	movs	r1, #5
 801be10:	f04f 0c04 	mov.w	ip, #4
 801be14:	e737      	b.n	801bc86 <uxr_write_framed_msg+0xe6>
 801be16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be18:	2104      	movs	r1, #4
 801be1a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801be1e:	b2dd      	uxtb	r5, r3
 801be20:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801be24:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801be28:	2a01      	cmp	r2, #1
 801be2a:	f63f aee1 	bhi.w	801bbf0 <uxr_write_framed_msg+0x50>
 801be2e:	e73c      	b.n	801bcaa <uxr_write_framed_msg+0x10a>
 801be30:	08022cec 	.word	0x08022cec

0801be34 <uxr_framing_read_transport>:
 801be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be38:	4604      	mov	r4, r0
 801be3a:	b085      	sub	sp, #20
 801be3c:	4692      	mov	sl, r2
 801be3e:	4689      	mov	r9, r1
 801be40:	461d      	mov	r5, r3
 801be42:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801be44:	f000 fca6 	bl	801c794 <uxr_millis>
 801be48:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801be4c:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 801be50:	4680      	mov	r8, r0
 801be52:	42ba      	cmp	r2, r7
 801be54:	d05f      	beq.n	801bf16 <uxr_framing_read_transport+0xe2>
 801be56:	d817      	bhi.n	801be88 <uxr_framing_read_transport+0x54>
 801be58:	3f01      	subs	r7, #1
 801be5a:	1aba      	subs	r2, r7, r2
 801be5c:	2700      	movs	r7, #0
 801be5e:	b2d2      	uxtb	r2, r2
 801be60:	42b2      	cmp	r2, r6
 801be62:	d81a      	bhi.n	801be9a <uxr_framing_read_transport+0x66>
 801be64:	19d3      	adds	r3, r2, r7
 801be66:	42b3      	cmp	r3, r6
 801be68:	d852      	bhi.n	801bf10 <uxr_framing_read_transport+0xdc>
 801be6a:	b9d2      	cbnz	r2, 801bea2 <uxr_framing_read_transport+0x6e>
 801be6c:	2600      	movs	r6, #0
 801be6e:	f000 fc91 	bl	801c794 <uxr_millis>
 801be72:	682b      	ldr	r3, [r5, #0]
 801be74:	eba0 0008 	sub.w	r0, r0, r8
 801be78:	1a1b      	subs	r3, r3, r0
 801be7a:	4630      	mov	r0, r6
 801be7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be80:	602b      	str	r3, [r5, #0]
 801be82:	b005      	add	sp, #20
 801be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be88:	2f00      	cmp	r7, #0
 801be8a:	d060      	beq.n	801bf4e <uxr_framing_read_transport+0x11a>
 801be8c:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 801be90:	3f01      	subs	r7, #1
 801be92:	b2d2      	uxtb	r2, r2
 801be94:	b2ff      	uxtb	r7, r7
 801be96:	42b2      	cmp	r2, r6
 801be98:	d9e4      	bls.n	801be64 <uxr_framing_read_transport+0x30>
 801be9a:	b2f2      	uxtb	r2, r6
 801be9c:	2700      	movs	r7, #0
 801be9e:	2a00      	cmp	r2, #0
 801bea0:	d0e4      	beq.n	801be6c <uxr_framing_read_transport+0x38>
 801bea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bea4:	4650      	mov	r0, sl
 801bea6:	9203      	str	r2, [sp, #12]
 801bea8:	9300      	str	r3, [sp, #0]
 801beaa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801beae:	682b      	ldr	r3, [r5, #0]
 801beb0:	3102      	adds	r1, #2
 801beb2:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801bf58 <uxr_framing_read_transport+0x124>
 801beb6:	4421      	add	r1, r4
 801beb8:	47c8      	blx	r9
 801beba:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801bebe:	4606      	mov	r6, r0
 801bec0:	4403      	add	r3, r0
 801bec2:	0859      	lsrs	r1, r3, #1
 801bec4:	fbab 2101 	umull	r2, r1, fp, r1
 801bec8:	222a      	movs	r2, #42	@ 0x2a
 801beca:	0889      	lsrs	r1, r1, #2
 801becc:	fb02 3111 	mls	r1, r2, r1, r3
 801bed0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801bed4:	2800      	cmp	r0, #0
 801bed6:	d0c9      	beq.n	801be6c <uxr_framing_read_transport+0x38>
 801bed8:	9a03      	ldr	r2, [sp, #12]
 801beda:	4290      	cmp	r0, r2
 801bedc:	d1c7      	bne.n	801be6e <uxr_framing_read_transport+0x3a>
 801bede:	2f00      	cmp	r7, #0
 801bee0:	d0c5      	beq.n	801be6e <uxr_framing_read_transport+0x3a>
 801bee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bee4:	3102      	adds	r1, #2
 801bee6:	463a      	mov	r2, r7
 801bee8:	4650      	mov	r0, sl
 801beea:	4421      	add	r1, r4
 801beec:	9300      	str	r3, [sp, #0]
 801beee:	2300      	movs	r3, #0
 801bef0:	47c8      	blx	r9
 801bef2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801bef6:	4406      	add	r6, r0
 801bef8:	1813      	adds	r3, r2, r0
 801befa:	085a      	lsrs	r2, r3, #1
 801befc:	fbab 1b02 	umull	r1, fp, fp, r2
 801bf00:	222a      	movs	r2, #42	@ 0x2a
 801bf02:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801bf06:	fb02 331b 	mls	r3, r2, fp, r3
 801bf0a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801bf0e:	e7ae      	b.n	801be6e <uxr_framing_read_transport+0x3a>
 801bf10:	1ab6      	subs	r6, r6, r2
 801bf12:	b2f7      	uxtb	r7, r6
 801bf14:	e7a9      	b.n	801be6a <uxr_framing_read_transport+0x36>
 801bf16:	2300      	movs	r3, #0
 801bf18:	2e28      	cmp	r6, #40	@ 0x28
 801bf1a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801bf1c:	d9bd      	bls.n	801be9a <uxr_framing_read_transport+0x66>
 801bf1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf20:	2229      	movs	r2, #41	@ 0x29
 801bf22:	1ca1      	adds	r1, r4, #2
 801bf24:	4650      	mov	r0, sl
 801bf26:	9300      	str	r3, [sp, #0]
 801bf28:	682b      	ldr	r3, [r5, #0]
 801bf2a:	47c8      	blx	r9
 801bf2c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801bf30:	4606      	mov	r6, r0
 801bf32:	212a      	movs	r1, #42	@ 0x2a
 801bf34:	4403      	add	r3, r0
 801bf36:	4808      	ldr	r0, [pc, #32]	@ (801bf58 <uxr_framing_read_transport+0x124>)
 801bf38:	085a      	lsrs	r2, r3, #1
 801bf3a:	fba0 0202 	umull	r0, r2, r0, r2
 801bf3e:	0892      	lsrs	r2, r2, #2
 801bf40:	fb01 3312 	mls	r3, r1, r2, r3
 801bf44:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801bf48:	2e00      	cmp	r6, #0
 801bf4a:	d08f      	beq.n	801be6c <uxr_framing_read_transport+0x38>
 801bf4c:	e78f      	b.n	801be6e <uxr_framing_read_transport+0x3a>
 801bf4e:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801bf52:	b2d2      	uxtb	r2, r2
 801bf54:	e784      	b.n	801be60 <uxr_framing_read_transport+0x2c>
 801bf56:	bf00      	nop
 801bf58:	30c30c31 	.word	0x30c30c31

0801bf5c <uxr_read_framed_msg>:
 801bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf60:	461e      	mov	r6, r3
 801bf62:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801bf66:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801bf6a:	b083      	sub	sp, #12
 801bf6c:	4604      	mov	r4, r0
 801bf6e:	4688      	mov	r8, r1
 801bf70:	429d      	cmp	r5, r3
 801bf72:	4691      	mov	r9, r2
 801bf74:	f000 818c 	beq.w	801c290 <uxr_read_framed_msg+0x334>
 801bf78:	7823      	ldrb	r3, [r4, #0]
 801bf7a:	4dc3      	ldr	r5, [pc, #780]	@ (801c288 <uxr_read_framed_msg+0x32c>)
 801bf7c:	4fc3      	ldr	r7, [pc, #780]	@ (801c28c <uxr_read_framed_msg+0x330>)
 801bf7e:	2b07      	cmp	r3, #7
 801bf80:	d8fd      	bhi.n	801bf7e <uxr_read_framed_msg+0x22>
 801bf82:	e8df f013 	tbh	[pc, r3, lsl #1]
 801bf86:	011c      	.short	0x011c
 801bf88:	00d900fb 	.word	0x00d900fb
 801bf8c:	008f00ba 	.word	0x008f00ba
 801bf90:	00320051 	.word	0x00320051
 801bf94:	0008      	.short	0x0008
 801bf96:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801bf9a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801bf9e:	4299      	cmp	r1, r3
 801bfa0:	f000 814d 	beq.w	801c23e <uxr_read_framed_msg+0x2e2>
 801bfa4:	18e2      	adds	r2, r4, r3
 801bfa6:	7892      	ldrb	r2, [r2, #2]
 801bfa8:	2a7d      	cmp	r2, #125	@ 0x7d
 801bfaa:	f000 81b8 	beq.w	801c31e <uxr_read_framed_msg+0x3c2>
 801bfae:	3301      	adds	r3, #1
 801bfb0:	212a      	movs	r1, #42	@ 0x2a
 801bfb2:	2a7e      	cmp	r2, #126	@ 0x7e
 801bfb4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801bfb8:	fba5 c000 	umull	ip, r0, r5, r0
 801bfbc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801bfc0:	fb01 3310 	mls	r3, r1, r0, r3
 801bfc4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801bfc8:	f000 8257 	beq.w	801c47a <uxr_read_framed_msg+0x51e>
 801bfcc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801bfce:	2000      	movs	r0, #0
 801bfd0:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801bfd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801bfd6:	7020      	strb	r0, [r4, #0]
 801bfd8:	b29b      	uxth	r3, r3
 801bfda:	4299      	cmp	r1, r3
 801bfdc:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801bfde:	f000 8178 	beq.w	801c2d2 <uxr_read_framed_msg+0x376>
 801bfe2:	2000      	movs	r0, #0
 801bfe4:	b003      	add	sp, #12
 801bfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfea:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801bfee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801bff2:	4298      	cmp	r0, r3
 801bff4:	f000 8132 	beq.w	801c25c <uxr_read_framed_msg+0x300>
 801bff8:	18e2      	adds	r2, r4, r3
 801bffa:	7891      	ldrb	r1, [r2, #2]
 801bffc:	297d      	cmp	r1, #125	@ 0x7d
 801bffe:	f000 8170 	beq.w	801c2e2 <uxr_read_framed_msg+0x386>
 801c002:	3301      	adds	r3, #1
 801c004:	202a      	movs	r0, #42	@ 0x2a
 801c006:	297e      	cmp	r1, #126	@ 0x7e
 801c008:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c00c:	fba5 c202 	umull	ip, r2, r5, r2
 801c010:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c014:	fb00 3312 	mls	r3, r0, r2, r3
 801c018:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c01c:	f000 821d 	beq.w	801c45a <uxr_read_framed_msg+0x4fe>
 801c020:	2307      	movs	r3, #7
 801c022:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801c024:	7023      	strb	r3, [r4, #0]
 801c026:	e7aa      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c028:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801c02a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801c02e:	459e      	cmp	lr, r3
 801c030:	d827      	bhi.n	801c082 <uxr_read_framed_msg+0x126>
 801c032:	e032      	b.n	801c09a <uxr_read_framed_msg+0x13e>
 801c034:	fba5 b101 	umull	fp, r1, r5, r1
 801c038:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c03c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801c040:	0889      	lsrs	r1, r1, #2
 801c042:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801c046:	fb0b 0111 	mls	r1, fp, r1, r0
 801c04a:	f000 80d4 	beq.w	801c1f6 <uxr_read_framed_msg+0x29a>
 801c04e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801c052:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801c056:	f000 80cb 	beq.w	801c1f0 <uxr_read_framed_msg+0x294>
 801c05a:	f806 c003 	strb.w	ip, [r6, r3]
 801c05e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801c060:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801c062:	ea80 010c 	eor.w	r1, r0, ip
 801c066:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801c06a:	3301      	adds	r3, #1
 801c06c:	b2c9      	uxtb	r1, r1
 801c06e:	b29b      	uxth	r3, r3
 801c070:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801c074:	4573      	cmp	r3, lr
 801c076:	8663      	strh	r3, [r4, #50]	@ 0x32
 801c078:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801c07c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801c07e:	f080 811d 	bcs.w	801c2bc <uxr_read_framed_msg+0x360>
 801c082:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801c086:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801c08a:	1c50      	adds	r0, r2, #1
 801c08c:	eb04 0c02 	add.w	ip, r4, r2
 801c090:	4592      	cmp	sl, r2
 801c092:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801c096:	d1cd      	bne.n	801c034 <uxr_read_framed_msg+0xd8>
 801c098:	459e      	cmp	lr, r3
 801c09a:	f040 8114 	bne.w	801c2c6 <uxr_read_framed_msg+0x36a>
 801c09e:	2306      	movs	r3, #6
 801c0a0:	7023      	strb	r3, [r4, #0]
 801c0a2:	e76c      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c0a4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801c0a8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801c0ac:	4298      	cmp	r0, r3
 801c0ae:	f000 80c6 	beq.w	801c23e <uxr_read_framed_msg+0x2e2>
 801c0b2:	18e2      	adds	r2, r4, r3
 801c0b4:	7891      	ldrb	r1, [r2, #2]
 801c0b6:	297d      	cmp	r1, #125	@ 0x7d
 801c0b8:	f000 8193 	beq.w	801c3e2 <uxr_read_framed_msg+0x486>
 801c0bc:	3301      	adds	r3, #1
 801c0be:	202a      	movs	r0, #42	@ 0x2a
 801c0c0:	297e      	cmp	r1, #126	@ 0x7e
 801c0c2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c0c6:	fba5 c202 	umull	ip, r2, r5, r2
 801c0ca:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c0ce:	fb00 3312 	mls	r3, r0, r2, r3
 801c0d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c0d6:	f000 81d0 	beq.w	801c47a <uxr_read_framed_msg+0x51e>
 801c0da:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801c0dc:	2000      	movs	r0, #0
 801c0de:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801c0e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c0e4:	8660      	strh	r0, [r4, #50]	@ 0x32
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801c0ea:	428b      	cmp	r3, r1
 801c0ec:	8623      	strh	r3, [r4, #48]	@ 0x30
 801c0ee:	f240 80e2 	bls.w	801c2b6 <uxr_read_framed_msg+0x35a>
 801c0f2:	7020      	strb	r0, [r4, #0]
 801c0f4:	b003      	add	sp, #12
 801c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801c0fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801c102:	4298      	cmp	r0, r3
 801c104:	f000 80aa 	beq.w	801c25c <uxr_read_framed_msg+0x300>
 801c108:	18e2      	adds	r2, r4, r3
 801c10a:	7891      	ldrb	r1, [r2, #2]
 801c10c:	297d      	cmp	r1, #125	@ 0x7d
 801c10e:	f000 8186 	beq.w	801c41e <uxr_read_framed_msg+0x4c2>
 801c112:	3301      	adds	r3, #1
 801c114:	202a      	movs	r0, #42	@ 0x2a
 801c116:	297e      	cmp	r1, #126	@ 0x7e
 801c118:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c11c:	fba5 c202 	umull	ip, r2, r5, r2
 801c120:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c124:	fb00 3312 	mls	r3, r0, r2, r3
 801c128:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c12c:	f000 8195 	beq.w	801c45a <uxr_read_framed_msg+0x4fe>
 801c130:	2304      	movs	r3, #4
 801c132:	8621      	strh	r1, [r4, #48]	@ 0x30
 801c134:	7023      	strb	r3, [r4, #0]
 801c136:	e722      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c138:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801c13c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801c140:	4290      	cmp	r0, r2
 801c142:	f000 80b4 	beq.w	801c2ae <uxr_read_framed_msg+0x352>
 801c146:	18a3      	adds	r3, r4, r2
 801c148:	7899      	ldrb	r1, [r3, #2]
 801c14a:	297d      	cmp	r1, #125	@ 0x7d
 801c14c:	f000 8107 	beq.w	801c35e <uxr_read_framed_msg+0x402>
 801c150:	3201      	adds	r2, #1
 801c152:	232a      	movs	r3, #42	@ 0x2a
 801c154:	297e      	cmp	r1, #126	@ 0x7e
 801c156:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801c15a:	fba5 c000 	umull	ip, r0, r5, r0
 801c15e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c162:	fb03 2210 	mls	r2, r3, r0, r2
 801c166:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801c16a:	f000 818a 	beq.w	801c482 <uxr_read_framed_msg+0x526>
 801c16e:	7863      	ldrb	r3, [r4, #1]
 801c170:	428b      	cmp	r3, r1
 801c172:	bf0c      	ite	eq
 801c174:	2303      	moveq	r3, #3
 801c176:	2300      	movne	r3, #0
 801c178:	7023      	strb	r3, [r4, #0]
 801c17a:	e700      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c17c:	2300      	movs	r3, #0
 801c17e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801c182:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801c186:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801c18a:	4299      	cmp	r1, r3
 801c18c:	d06a      	beq.n	801c264 <uxr_read_framed_msg+0x308>
 801c18e:	18e2      	adds	r2, r4, r3
 801c190:	7890      	ldrb	r0, [r2, #2]
 801c192:	287d      	cmp	r0, #125	@ 0x7d
 801c194:	f000 8100 	beq.w	801c398 <uxr_read_framed_msg+0x43c>
 801c198:	3301      	adds	r3, #1
 801c19a:	212a      	movs	r1, #42	@ 0x2a
 801c19c:	287e      	cmp	r0, #126	@ 0x7e
 801c19e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801c1a2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c1a6:	fba5 c202 	umull	ip, r2, r5, r2
 801c1aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c1ae:	fb01 3312 	mls	r3, r1, r2, r3
 801c1b2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c1b6:	d055      	beq.n	801c264 <uxr_read_framed_msg+0x308>
 801c1b8:	2302      	movs	r3, #2
 801c1ba:	7023      	strb	r3, [r4, #0]
 801c1bc:	e6df      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c1be:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801c1c2:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801c1c6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801c1ca:	1c5a      	adds	r2, r3, #1
 801c1cc:	459c      	cmp	ip, r3
 801c1ce:	eb04 0103 	add.w	r1, r4, r3
 801c1d2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801c1d6:	f43f af04 	beq.w	801bfe2 <uxr_read_framed_msg+0x86>
 801c1da:	fba5 0303 	umull	r0, r3, r5, r3
 801c1de:	7889      	ldrb	r1, [r1, #2]
 801c1e0:	089b      	lsrs	r3, r3, #2
 801c1e2:	297e      	cmp	r1, #126	@ 0x7e
 801c1e4:	fb0e 2313 	mls	r3, lr, r3, r2
 801c1e8:	b2db      	uxtb	r3, r3
 801c1ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c1ee:	d1ec      	bne.n	801c1ca <uxr_read_framed_msg+0x26e>
 801c1f0:	2301      	movs	r3, #1
 801c1f2:	7023      	strb	r3, [r4, #0]
 801c1f4:	e6c3      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c1f6:	1c50      	adds	r0, r2, #1
 801c1f8:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801c1fc:	3202      	adds	r2, #2
 801c1fe:	0841      	lsrs	r1, r0, #1
 801c200:	fba5 c101 	umull	ip, r1, r5, r1
 801c204:	0889      	lsrs	r1, r1, #2
 801c206:	fb0b 0111 	mls	r1, fp, r1, r0
 801c20a:	1860      	adds	r0, r4, r1
 801c20c:	b2c9      	uxtb	r1, r1
 801c20e:	458a      	cmp	sl, r1
 801c210:	f43f af42 	beq.w	801c098 <uxr_read_framed_msg+0x13c>
 801c214:	0851      	lsrs	r1, r2, #1
 801c216:	7880      	ldrb	r0, [r0, #2]
 801c218:	fba5 a101 	umull	sl, r1, r5, r1
 801c21c:	287e      	cmp	r0, #126	@ 0x7e
 801c21e:	f080 0c20 	eor.w	ip, r0, #32
 801c222:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c226:	fb0b 2211 	mls	r2, fp, r1, r2
 801c22a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801c22e:	f47f af14 	bne.w	801c05a <uxr_read_framed_msg+0xfe>
 801c232:	459e      	cmp	lr, r3
 801c234:	f43f af33 	beq.w	801c09e <uxr_read_framed_msg+0x142>
 801c238:	2301      	movs	r3, #1
 801c23a:	7023      	strb	r3, [r4, #0]
 801c23c:	e69f      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c23e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c240:	9300      	str	r3, [sp, #0]
 801c242:	2301      	movs	r3, #1
 801c244:	9301      	str	r3, [sp, #4]
 801c246:	464a      	mov	r2, r9
 801c248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c24a:	4641      	mov	r1, r8
 801c24c:	4620      	mov	r0, r4
 801c24e:	f7ff fdf1 	bl	801be34 <uxr_framing_read_transport>
 801c252:	2800      	cmp	r0, #0
 801c254:	f43f aec5 	beq.w	801bfe2 <uxr_read_framed_msg+0x86>
 801c258:	7823      	ldrb	r3, [r4, #0]
 801c25a:	e690      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c25e:	9300      	str	r3, [sp, #0]
 801c260:	2302      	movs	r3, #2
 801c262:	e7ef      	b.n	801c244 <uxr_read_framed_msg+0x2e8>
 801c264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c266:	464a      	mov	r2, r9
 801c268:	4641      	mov	r1, r8
 801c26a:	4620      	mov	r0, r4
 801c26c:	9300      	str	r3, [sp, #0]
 801c26e:	2304      	movs	r3, #4
 801c270:	9301      	str	r3, [sp, #4]
 801c272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c274:	f7ff fdde 	bl	801be34 <uxr_framing_read_transport>
 801c278:	2800      	cmp	r0, #0
 801c27a:	d1ed      	bne.n	801c258 <uxr_read_framed_msg+0x2fc>
 801c27c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801c280:	2b7e      	cmp	r3, #126	@ 0x7e
 801c282:	d0e9      	beq.n	801c258 <uxr_read_framed_msg+0x2fc>
 801c284:	e6ad      	b.n	801bfe2 <uxr_read_framed_msg+0x86>
 801c286:	bf00      	nop
 801c288:	30c30c31 	.word	0x30c30c31
 801c28c:	08022cec 	.word	0x08022cec
 801c290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c292:	9300      	str	r3, [sp, #0]
 801c294:	2305      	movs	r3, #5
 801c296:	9301      	str	r3, [sp, #4]
 801c298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c29a:	f7ff fdcb 	bl	801be34 <uxr_framing_read_transport>
 801c29e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801c2a2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801c2a6:	429a      	cmp	r2, r3
 801c2a8:	f43f ae9b 	beq.w	801bfe2 <uxr_read_framed_msg+0x86>
 801c2ac:	e664      	b.n	801bf78 <uxr_read_framed_msg+0x1c>
 801c2ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c2b0:	9300      	str	r3, [sp, #0]
 801c2b2:	2303      	movs	r3, #3
 801c2b4:	e7c6      	b.n	801c244 <uxr_read_framed_msg+0x2e8>
 801c2b6:	2305      	movs	r3, #5
 801c2b8:	7023      	strb	r3, [r4, #0]
 801c2ba:	e660      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c2bc:	f43f aeef 	beq.w	801c09e <uxr_read_framed_msg+0x142>
 801c2c0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801c2c4:	d094      	beq.n	801c1f0 <uxr_read_framed_msg+0x294>
 801c2c6:	ebae 0303 	sub.w	r3, lr, r3
 801c2ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c2cc:	3302      	adds	r3, #2
 801c2ce:	9200      	str	r2, [sp, #0]
 801c2d0:	e7b8      	b.n	801c244 <uxr_read_framed_msg+0x2e8>
 801c2d2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801c2d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c2d8:	7013      	strb	r3, [r2, #0]
 801c2da:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801c2dc:	b003      	add	sp, #12
 801c2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2e2:	1c59      	adds	r1, r3, #1
 801c2e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801c2e8:	084a      	lsrs	r2, r1, #1
 801c2ea:	fba5 e202 	umull	lr, r2, r5, r2
 801c2ee:	0892      	lsrs	r2, r2, #2
 801c2f0:	fb0c 1212 	mls	r2, ip, r2, r1
 801c2f4:	b2d1      	uxtb	r1, r2
 801c2f6:	4288      	cmp	r0, r1
 801c2f8:	d0b0      	beq.n	801c25c <uxr_read_framed_msg+0x300>
 801c2fa:	3302      	adds	r3, #2
 801c2fc:	4422      	add	r2, r4
 801c2fe:	7891      	ldrb	r1, [r2, #2]
 801c300:	085a      	lsrs	r2, r3, #1
 801c302:	fba5 0202 	umull	r0, r2, r5, r2
 801c306:	297e      	cmp	r1, #126	@ 0x7e
 801c308:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c30c:	fb0c 3312 	mls	r3, ip, r2, r3
 801c310:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c314:	f000 80a1 	beq.w	801c45a <uxr_read_framed_msg+0x4fe>
 801c318:	f081 0120 	eor.w	r1, r1, #32
 801c31c:	e680      	b.n	801c020 <uxr_read_framed_msg+0xc4>
 801c31e:	f103 0c01 	add.w	ip, r3, #1
 801c322:	202a      	movs	r0, #42	@ 0x2a
 801c324:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c328:	fba5 e202 	umull	lr, r2, r5, r2
 801c32c:	0892      	lsrs	r2, r2, #2
 801c32e:	fb00 c212 	mls	r2, r0, r2, ip
 801c332:	fa5f fc82 	uxtb.w	ip, r2
 801c336:	4561      	cmp	r1, ip
 801c338:	d081      	beq.n	801c23e <uxr_read_framed_msg+0x2e2>
 801c33a:	3302      	adds	r3, #2
 801c33c:	4422      	add	r2, r4
 801c33e:	0859      	lsrs	r1, r3, #1
 801c340:	7892      	ldrb	r2, [r2, #2]
 801c342:	fba5 c101 	umull	ip, r1, r5, r1
 801c346:	2a7e      	cmp	r2, #126	@ 0x7e
 801c348:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c34c:	fb00 3311 	mls	r3, r0, r1, r3
 801c350:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c354:	f000 8091 	beq.w	801c47a <uxr_read_framed_msg+0x51e>
 801c358:	f082 0220 	eor.w	r2, r2, #32
 801c35c:	e636      	b.n	801bfcc <uxr_read_framed_msg+0x70>
 801c35e:	1c51      	adds	r1, r2, #1
 801c360:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801c364:	084b      	lsrs	r3, r1, #1
 801c366:	fba5 e303 	umull	lr, r3, r5, r3
 801c36a:	089b      	lsrs	r3, r3, #2
 801c36c:	fb0c 1313 	mls	r3, ip, r3, r1
 801c370:	b2d9      	uxtb	r1, r3
 801c372:	4288      	cmp	r0, r1
 801c374:	d09b      	beq.n	801c2ae <uxr_read_framed_msg+0x352>
 801c376:	3202      	adds	r2, #2
 801c378:	4423      	add	r3, r4
 801c37a:	0850      	lsrs	r0, r2, #1
 801c37c:	789b      	ldrb	r3, [r3, #2]
 801c37e:	fba5 1000 	umull	r1, r0, r5, r0
 801c382:	2b7e      	cmp	r3, #126	@ 0x7e
 801c384:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c388:	fb0c 2210 	mls	r2, ip, r0, r2
 801c38c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801c390:	d077      	beq.n	801c482 <uxr_read_framed_msg+0x526>
 801c392:	f083 0120 	eor.w	r1, r3, #32
 801c396:	e6ea      	b.n	801c16e <uxr_read_framed_msg+0x212>
 801c398:	f103 0c01 	add.w	ip, r3, #1
 801c39c:	202a      	movs	r0, #42	@ 0x2a
 801c39e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c3a2:	fba5 e202 	umull	lr, r2, r5, r2
 801c3a6:	0892      	lsrs	r2, r2, #2
 801c3a8:	fb00 c212 	mls	r2, r0, r2, ip
 801c3ac:	fa5f fc82 	uxtb.w	ip, r2
 801c3b0:	4561      	cmp	r1, ip
 801c3b2:	f43f af57 	beq.w	801c264 <uxr_read_framed_msg+0x308>
 801c3b6:	3302      	adds	r3, #2
 801c3b8:	4422      	add	r2, r4
 801c3ba:	7891      	ldrb	r1, [r2, #2]
 801c3bc:	085a      	lsrs	r2, r3, #1
 801c3be:	fba5 c202 	umull	ip, r2, r5, r2
 801c3c2:	297e      	cmp	r1, #126	@ 0x7e
 801c3c4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801c3c8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c3cc:	fb00 3312 	mls	r3, r0, r2, r3
 801c3d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c3d4:	f43f af46 	beq.w	801c264 <uxr_read_framed_msg+0x308>
 801c3d8:	f081 0120 	eor.w	r1, r1, #32
 801c3dc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801c3e0:	e6ea      	b.n	801c1b8 <uxr_read_framed_msg+0x25c>
 801c3e2:	1c59      	adds	r1, r3, #1
 801c3e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801c3e8:	084a      	lsrs	r2, r1, #1
 801c3ea:	fba5 e202 	umull	lr, r2, r5, r2
 801c3ee:	0892      	lsrs	r2, r2, #2
 801c3f0:	fb0c 1212 	mls	r2, ip, r2, r1
 801c3f4:	b2d1      	uxtb	r1, r2
 801c3f6:	4288      	cmp	r0, r1
 801c3f8:	f43f af21 	beq.w	801c23e <uxr_read_framed_msg+0x2e2>
 801c3fc:	3302      	adds	r3, #2
 801c3fe:	4422      	add	r2, r4
 801c400:	7891      	ldrb	r1, [r2, #2]
 801c402:	085a      	lsrs	r2, r3, #1
 801c404:	fba5 0202 	umull	r0, r2, r5, r2
 801c408:	297e      	cmp	r1, #126	@ 0x7e
 801c40a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c40e:	fb0c 3312 	mls	r3, ip, r2, r3
 801c412:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c416:	d030      	beq.n	801c47a <uxr_read_framed_msg+0x51e>
 801c418:	f081 0120 	eor.w	r1, r1, #32
 801c41c:	e65d      	b.n	801c0da <uxr_read_framed_msg+0x17e>
 801c41e:	1c59      	adds	r1, r3, #1
 801c420:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801c424:	084a      	lsrs	r2, r1, #1
 801c426:	fba5 e202 	umull	lr, r2, r5, r2
 801c42a:	0892      	lsrs	r2, r2, #2
 801c42c:	fb0c 1212 	mls	r2, ip, r2, r1
 801c430:	b2d1      	uxtb	r1, r2
 801c432:	4288      	cmp	r0, r1
 801c434:	f43f af12 	beq.w	801c25c <uxr_read_framed_msg+0x300>
 801c438:	3302      	adds	r3, #2
 801c43a:	4422      	add	r2, r4
 801c43c:	7891      	ldrb	r1, [r2, #2]
 801c43e:	085a      	lsrs	r2, r3, #1
 801c440:	fba5 0202 	umull	r0, r2, r5, r2
 801c444:	297e      	cmp	r1, #126	@ 0x7e
 801c446:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c44a:	fb0c 3312 	mls	r3, ip, r2, r3
 801c44e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801c452:	d002      	beq.n	801c45a <uxr_read_framed_msg+0x4fe>
 801c454:	f081 0120 	eor.w	r1, r1, #32
 801c458:	e66a      	b.n	801c130 <uxr_read_framed_msg+0x1d4>
 801c45a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c45c:	9300      	str	r3, [sp, #0]
 801c45e:	2302      	movs	r3, #2
 801c460:	9301      	str	r3, [sp, #4]
 801c462:	464a      	mov	r2, r9
 801c464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c466:	4641      	mov	r1, r8
 801c468:	4620      	mov	r0, r4
 801c46a:	f7ff fce3 	bl	801be34 <uxr_framing_read_transport>
 801c46e:	2800      	cmp	r0, #0
 801c470:	f47f aef2 	bne.w	801c258 <uxr_read_framed_msg+0x2fc>
 801c474:	2301      	movs	r3, #1
 801c476:	7023      	strb	r3, [r4, #0]
 801c478:	e581      	b.n	801bf7e <uxr_read_framed_msg+0x22>
 801c47a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c47c:	9300      	str	r3, [sp, #0]
 801c47e:	2301      	movs	r3, #1
 801c480:	e7ee      	b.n	801c460 <uxr_read_framed_msg+0x504>
 801c482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c484:	9300      	str	r3, [sp, #0]
 801c486:	2303      	movs	r3, #3
 801c488:	e7ea      	b.n	801c460 <uxr_read_framed_msg+0x504>
 801c48a:	bf00      	nop

0801c48c <uxr_stream_id>:
 801c48c:	2901      	cmp	r1, #1
 801c48e:	4684      	mov	ip, r0
 801c490:	b500      	push	{lr}
 801c492:	b083      	sub	sp, #12
 801c494:	d01f      	beq.n	801c4d6 <uxr_stream_id+0x4a>
 801c496:	2902      	cmp	r1, #2
 801c498:	f04f 0e00 	mov.w	lr, #0
 801c49c:	d020      	beq.n	801c4e0 <uxr_stream_id+0x54>
 801c49e:	2300      	movs	r3, #0
 801c4a0:	2000      	movs	r0, #0
 801c4a2:	f36e 0307 	bfi	r3, lr, #0, #8
 801c4a6:	f36c 230f 	bfi	r3, ip, #8, #8
 801c4aa:	f361 4317 	bfi	r3, r1, #16, #8
 801c4ae:	f362 631f 	bfi	r3, r2, #24, #8
 801c4b2:	fa5f fc83 	uxtb.w	ip, r3
 801c4b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801c4ba:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801c4be:	0e1b      	lsrs	r3, r3, #24
 801c4c0:	f36c 0007 	bfi	r0, ip, #0, #8
 801c4c4:	f361 200f 	bfi	r0, r1, #8, #8
 801c4c8:	f362 4017 	bfi	r0, r2, #16, #8
 801c4cc:	f363 601f 	bfi	r0, r3, #24, #8
 801c4d0:	b003      	add	sp, #12
 801c4d2:	f85d fb04 	ldr.w	pc, [sp], #4
 801c4d6:	f100 0e01 	add.w	lr, r0, #1
 801c4da:	fa5f fe8e 	uxtb.w	lr, lr
 801c4de:	e7de      	b.n	801c49e <uxr_stream_id+0x12>
 801c4e0:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 801c4e4:	e7db      	b.n	801c49e <uxr_stream_id+0x12>
 801c4e6:	bf00      	nop

0801c4e8 <uxr_stream_id_from_raw>:
 801c4e8:	b082      	sub	sp, #8
 801c4ea:	b130      	cbz	r0, 801c4fa <uxr_stream_id_from_raw+0x12>
 801c4ec:	0603      	lsls	r3, r0, #24
 801c4ee:	d421      	bmi.n	801c534 <uxr_stream_id_from_raw+0x4c>
 801c4f0:	1e42      	subs	r2, r0, #1
 801c4f2:	f04f 0c01 	mov.w	ip, #1
 801c4f6:	b2d2      	uxtb	r2, r2
 801c4f8:	e001      	b.n	801c4fe <uxr_stream_id_from_raw+0x16>
 801c4fa:	4684      	mov	ip, r0
 801c4fc:	4602      	mov	r2, r0
 801c4fe:	2300      	movs	r3, #0
 801c500:	f360 0307 	bfi	r3, r0, #0, #8
 801c504:	2000      	movs	r0, #0
 801c506:	f362 230f 	bfi	r3, r2, #8, #8
 801c50a:	f36c 4317 	bfi	r3, ip, #16, #8
 801c50e:	f361 631f 	bfi	r3, r1, #24, #8
 801c512:	fa5f fc83 	uxtb.w	ip, r3
 801c516:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801c51a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801c51e:	0e1b      	lsrs	r3, r3, #24
 801c520:	f36c 0007 	bfi	r0, ip, #0, #8
 801c524:	f361 200f 	bfi	r0, r1, #8, #8
 801c528:	f362 4017 	bfi	r0, r2, #16, #8
 801c52c:	f363 601f 	bfi	r0, r3, #24, #8
 801c530:	b002      	add	sp, #8
 801c532:	4770      	bx	lr
 801c534:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801c538:	f04f 0c02 	mov.w	ip, #2
 801c53c:	e7df      	b.n	801c4fe <uxr_stream_id_from_raw+0x16>
 801c53e:	bf00      	nop

0801c540 <uxr_init_stream_storage>:
 801c540:	2300      	movs	r3, #0
 801c542:	7403      	strb	r3, [r0, #16]
 801c544:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801c548:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801c54c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801c550:	4770      	bx	lr
 801c552:	bf00      	nop

0801c554 <uxr_reset_stream_storage>:
 801c554:	b570      	push	{r4, r5, r6, lr}
 801c556:	7c03      	ldrb	r3, [r0, #16]
 801c558:	4604      	mov	r4, r0
 801c55a:	b14b      	cbz	r3, 801c570 <uxr_reset_stream_storage+0x1c>
 801c55c:	4606      	mov	r6, r0
 801c55e:	2500      	movs	r5, #0
 801c560:	4630      	mov	r0, r6
 801c562:	3501      	adds	r5, #1
 801c564:	f002 fa42 	bl	801e9ec <uxr_reset_output_best_effort_stream>
 801c568:	7c23      	ldrb	r3, [r4, #16]
 801c56a:	3610      	adds	r6, #16
 801c56c:	42ab      	cmp	r3, r5
 801c56e:	d8f7      	bhi.n	801c560 <uxr_reset_stream_storage+0xc>
 801c570:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801c574:	b15b      	cbz	r3, 801c58e <uxr_reset_stream_storage+0x3a>
 801c576:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c57a:	2500      	movs	r5, #0
 801c57c:	4630      	mov	r0, r6
 801c57e:	3501      	adds	r5, #1
 801c580:	f002 f83a 	bl	801e5f8 <uxr_reset_input_best_effort_stream>
 801c584:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801c588:	3602      	adds	r6, #2
 801c58a:	42ab      	cmp	r3, r5
 801c58c:	d8f6      	bhi.n	801c57c <uxr_reset_stream_storage+0x28>
 801c58e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801c592:	b15b      	cbz	r3, 801c5ac <uxr_reset_stream_storage+0x58>
 801c594:	f104 0618 	add.w	r6, r4, #24
 801c598:	2500      	movs	r5, #0
 801c59a:	4630      	mov	r0, r6
 801c59c:	3501      	adds	r5, #1
 801c59e:	f002 fad3 	bl	801eb48 <uxr_reset_output_reliable_stream>
 801c5a2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801c5a6:	3628      	adds	r6, #40	@ 0x28
 801c5a8:	42ab      	cmp	r3, r5
 801c5aa:	d8f6      	bhi.n	801c59a <uxr_reset_stream_storage+0x46>
 801c5ac:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801c5b0:	b15b      	cbz	r3, 801c5ca <uxr_reset_stream_storage+0x76>
 801c5b2:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801c5b6:	2500      	movs	r5, #0
 801c5b8:	4630      	mov	r0, r6
 801c5ba:	3501      	adds	r5, #1
 801c5bc:	f002 f888 	bl	801e6d0 <uxr_reset_input_reliable_stream>
 801c5c0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801c5c4:	3618      	adds	r6, #24
 801c5c6:	42ab      	cmp	r3, r5
 801c5c8:	d8f6      	bhi.n	801c5b8 <uxr_reset_stream_storage+0x64>
 801c5ca:	bd70      	pop	{r4, r5, r6, pc}

0801c5cc <uxr_add_output_best_effort_buffer>:
 801c5cc:	b510      	push	{r4, lr}
 801c5ce:	7c04      	ldrb	r4, [r0, #16]
 801c5d0:	b082      	sub	sp, #8
 801c5d2:	f104 0c01 	add.w	ip, r4, #1
 801c5d6:	f880 c010 	strb.w	ip, [r0, #16]
 801c5da:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801c5de:	f002 f9fb 	bl	801e9d8 <uxr_init_output_best_effort_stream>
 801c5e2:	2201      	movs	r2, #1
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	4611      	mov	r1, r2
 801c5e8:	b002      	add	sp, #8
 801c5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5ee:	f7ff bf4d 	b.w	801c48c <uxr_stream_id>
 801c5f2:	bf00      	nop

0801c5f4 <uxr_add_output_reliable_buffer>:
 801c5f4:	b510      	push	{r4, lr}
 801c5f6:	b084      	sub	sp, #16
 801c5f8:	4684      	mov	ip, r0
 801c5fa:	2028      	movs	r0, #40	@ 0x28
 801c5fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801c600:	9400      	str	r4, [sp, #0]
 801c602:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801c606:	fb00 c004 	mla	r0, r0, r4, ip
 801c60a:	f104 0e01 	add.w	lr, r4, #1
 801c60e:	3018      	adds	r0, #24
 801c610:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801c614:	f002 fa60 	bl	801ead8 <uxr_init_output_reliable_stream>
 801c618:	2201      	movs	r2, #1
 801c61a:	2102      	movs	r1, #2
 801c61c:	4620      	mov	r0, r4
 801c61e:	b004      	add	sp, #16
 801c620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c624:	f7ff bf32 	b.w	801c48c <uxr_stream_id>

0801c628 <uxr_add_input_best_effort_buffer>:
 801c628:	b510      	push	{r4, lr}
 801c62a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801c62e:	b082      	sub	sp, #8
 801c630:	1c62      	adds	r2, r4, #1
 801c632:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801c636:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801c63a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c63e:	f001 ffd7 	bl	801e5f0 <uxr_init_input_best_effort_stream>
 801c642:	2200      	movs	r2, #0
 801c644:	2101      	movs	r1, #1
 801c646:	4620      	mov	r0, r4
 801c648:	b002      	add	sp, #8
 801c64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c64e:	f7ff bf1d 	b.w	801c48c <uxr_stream_id>
 801c652:	bf00      	nop

0801c654 <uxr_add_input_reliable_buffer>:
 801c654:	b510      	push	{r4, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	4684      	mov	ip, r0
 801c65a:	2018      	movs	r0, #24
 801c65c:	9c06      	ldr	r4, [sp, #24]
 801c65e:	9400      	str	r4, [sp, #0]
 801c660:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801c664:	fb00 c004 	mla	r0, r0, r4, ip
 801c668:	f104 0e01 	add.w	lr, r4, #1
 801c66c:	3048      	adds	r0, #72	@ 0x48
 801c66e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801c672:	f002 f807 	bl	801e684 <uxr_init_input_reliable_stream>
 801c676:	2200      	movs	r2, #0
 801c678:	2102      	movs	r1, #2
 801c67a:	4620      	mov	r0, r4
 801c67c:	b004      	add	sp, #16
 801c67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c682:	f7ff bf03 	b.w	801c48c <uxr_stream_id>
 801c686:	bf00      	nop

0801c688 <uxr_get_output_best_effort_stream>:
 801c688:	7c03      	ldrb	r3, [r0, #16]
 801c68a:	428b      	cmp	r3, r1
 801c68c:	bf8c      	ite	hi
 801c68e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801c692:	2000      	movls	r0, #0
 801c694:	4770      	bx	lr
 801c696:	bf00      	nop

0801c698 <uxr_get_output_reliable_stream>:
 801c698:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801c69c:	428b      	cmp	r3, r1
 801c69e:	d904      	bls.n	801c6aa <uxr_get_output_reliable_stream+0x12>
 801c6a0:	2328      	movs	r3, #40	@ 0x28
 801c6a2:	fb03 0001 	mla	r0, r3, r1, r0
 801c6a6:	3018      	adds	r0, #24
 801c6a8:	4770      	bx	lr
 801c6aa:	2000      	movs	r0, #0
 801c6ac:	4770      	bx	lr
 801c6ae:	bf00      	nop

0801c6b0 <uxr_get_input_best_effort_stream>:
 801c6b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801c6b4:	428b      	cmp	r3, r1
 801c6b6:	d903      	bls.n	801c6c0 <uxr_get_input_best_effort_stream+0x10>
 801c6b8:	3121      	adds	r1, #33	@ 0x21
 801c6ba:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c6be:	4770      	bx	lr
 801c6c0:	2000      	movs	r0, #0
 801c6c2:	4770      	bx	lr

0801c6c4 <uxr_get_input_reliable_stream>:
 801c6c4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801c6c8:	428b      	cmp	r3, r1
 801c6ca:	d904      	bls.n	801c6d6 <uxr_get_input_reliable_stream+0x12>
 801c6cc:	2318      	movs	r3, #24
 801c6ce:	fb03 0001 	mla	r0, r3, r1, r0
 801c6d2:	3048      	adds	r0, #72	@ 0x48
 801c6d4:	4770      	bx	lr
 801c6d6:	2000      	movs	r0, #0
 801c6d8:	4770      	bx	lr
 801c6da:	bf00      	nop

0801c6dc <uxr_output_streams_confirmed>:
 801c6dc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801c6e0:	b183      	cbz	r3, 801c704 <uxr_output_streams_confirmed+0x28>
 801c6e2:	b570      	push	{r4, r5, r6, lr}
 801c6e4:	4606      	mov	r6, r0
 801c6e6:	f100 0518 	add.w	r5, r0, #24
 801c6ea:	2400      	movs	r4, #0
 801c6ec:	e000      	b.n	801c6f0 <uxr_output_streams_confirmed+0x14>
 801c6ee:	b140      	cbz	r0, 801c702 <uxr_output_streams_confirmed+0x26>
 801c6f0:	4628      	mov	r0, r5
 801c6f2:	3401      	adds	r4, #1
 801c6f4:	f002 fc9c 	bl	801f030 <uxr_is_output_up_to_date>
 801c6f8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801c6fc:	3528      	adds	r5, #40	@ 0x28
 801c6fe:	42a3      	cmp	r3, r4
 801c700:	d8f5      	bhi.n	801c6ee <uxr_output_streams_confirmed+0x12>
 801c702:	bd70      	pop	{r4, r5, r6, pc}
 801c704:	2001      	movs	r0, #1
 801c706:	4770      	bx	lr

0801c708 <uxr_buffer_submessage_header>:
 801c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c70a:	460e      	mov	r6, r1
 801c70c:	2104      	movs	r1, #4
 801c70e:	4604      	mov	r4, r0
 801c710:	4615      	mov	r5, r2
 801c712:	461f      	mov	r7, r3
 801c714:	f7f6 f802 	bl	801271c <ucdr_align_to>
 801c718:	2301      	movs	r3, #1
 801c71a:	4631      	mov	r1, r6
 801c71c:	4620      	mov	r0, r4
 801c71e:	ea47 0203 	orr.w	r2, r7, r3
 801c722:	7523      	strb	r3, [r4, #20]
 801c724:	462b      	mov	r3, r5
 801c726:	f000 f8d5 	bl	801c8d4 <uxr_serialize_submessage_header>
 801c72a:	4620      	mov	r0, r4
 801c72c:	f7f6 f80c 	bl	8012748 <ucdr_buffer_remaining>
 801c730:	42a8      	cmp	r0, r5
 801c732:	bf34      	ite	cc
 801c734:	2000      	movcc	r0, #0
 801c736:	2001      	movcs	r0, #1
 801c738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c73a:	bf00      	nop

0801c73c <uxr_read_submessage_header>:
 801c73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c740:	4604      	mov	r4, r0
 801c742:	460d      	mov	r5, r1
 801c744:	2104      	movs	r1, #4
 801c746:	4616      	mov	r6, r2
 801c748:	4698      	mov	r8, r3
 801c74a:	f7f5 ffe7 	bl	801271c <ucdr_align_to>
 801c74e:	4620      	mov	r0, r4
 801c750:	f7f5 fffa 	bl	8012748 <ucdr_buffer_remaining>
 801c754:	2803      	cmp	r0, #3
 801c756:	bf8c      	ite	hi
 801c758:	2701      	movhi	r7, #1
 801c75a:	2700      	movls	r7, #0
 801c75c:	d802      	bhi.n	801c764 <uxr_read_submessage_header+0x28>
 801c75e:	4638      	mov	r0, r7
 801c760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c764:	4633      	mov	r3, r6
 801c766:	4642      	mov	r2, r8
 801c768:	4620      	mov	r0, r4
 801c76a:	4629      	mov	r1, r5
 801c76c:	f000 f8c6 	bl	801c8fc <uxr_deserialize_submessage_header>
 801c770:	f898 3000 	ldrb.w	r3, [r8]
 801c774:	4638      	mov	r0, r7
 801c776:	f003 0201 	and.w	r2, r3, #1
 801c77a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801c77e:	f888 3000 	strb.w	r3, [r8]
 801c782:	7522      	strb	r2, [r4, #20]
 801c784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c788 <uxr_submessage_padding>:
 801c788:	f010 0003 	ands.w	r0, r0, #3
 801c78c:	bf18      	it	ne
 801c78e:	f1c0 0004 	rsbne	r0, r0, #4
 801c792:	4770      	bx	lr

0801c794 <uxr_millis>:
 801c794:	b510      	push	{r4, lr}
 801c796:	b084      	sub	sp, #16
 801c798:	2001      	movs	r0, #1
 801c79a:	4669      	mov	r1, sp
 801c79c:	f7e5 fa70 	bl	8001c80 <clock_gettime>
 801c7a0:	4908      	ldr	r1, [pc, #32]	@ (801c7c4 <uxr_millis+0x30>)
 801c7a2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801c7a6:	fba0 0301 	umull	r0, r3, r0, r1
 801c7aa:	1900      	adds	r0, r0, r4
 801c7ac:	fb01 3102 	mla	r1, r1, r2, r3
 801c7b0:	4a05      	ldr	r2, [pc, #20]	@ (801c7c8 <uxr_millis+0x34>)
 801c7b2:	f04f 0300 	mov.w	r3, #0
 801c7b6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801c7ba:	f7e3 fdf9 	bl	80003b0 <__aeabi_ldivmod>
 801c7be:	b004      	add	sp, #16
 801c7c0:	bd10      	pop	{r4, pc}
 801c7c2:	bf00      	nop
 801c7c4:	3b9aca00 	.word	0x3b9aca00
 801c7c8:	000f4240 	.word	0x000f4240

0801c7cc <uxr_nanos>:
 801c7cc:	b510      	push	{r4, lr}
 801c7ce:	b084      	sub	sp, #16
 801c7d0:	2001      	movs	r0, #1
 801c7d2:	4669      	mov	r1, sp
 801c7d4:	f7e5 fa54 	bl	8001c80 <clock_gettime>
 801c7d8:	4a06      	ldr	r2, [pc, #24]	@ (801c7f4 <uxr_nanos+0x28>)
 801c7da:	9800      	ldr	r0, [sp, #0]
 801c7dc:	9902      	ldr	r1, [sp, #8]
 801c7de:	fba0 0302 	umull	r0, r3, r0, r2
 801c7e2:	9c01      	ldr	r4, [sp, #4]
 801c7e4:	1840      	adds	r0, r0, r1
 801c7e6:	fb02 3304 	mla	r3, r2, r4, r3
 801c7ea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801c7ee:	b004      	add	sp, #16
 801c7f0:	bd10      	pop	{r4, pc}
 801c7f2:	bf00      	nop
 801c7f4:	3b9aca00 	.word	0x3b9aca00

0801c7f8 <uxr_prepare_output_stream>:
 801c7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7fa:	b087      	sub	sp, #28
 801c7fc:	2707      	movs	r7, #7
 801c7fe:	2500      	movs	r5, #0
 801c800:	461c      	mov	r4, r3
 801c802:	4606      	mov	r6, r0
 801c804:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801c808:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c80a:	e9cd 7500 	strd	r7, r5, [sp]
 801c80e:	3204      	adds	r2, #4
 801c810:	f7ff f852 	bl	801b8b8 <uxr_prepare_stream_to_write_submessage>
 801c814:	f080 0201 	eor.w	r2, r0, #1
 801c818:	b2d2      	uxtb	r2, r2
 801c81a:	75a2      	strb	r2, [r4, #22]
 801c81c:	b112      	cbz	r2, 801c824 <uxr_prepare_output_stream+0x2c>
 801c81e:	4628      	mov	r0, r5
 801c820:	b007      	add	sp, #28
 801c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c824:	aa05      	add	r2, sp, #20
 801c826:	9902      	ldr	r1, [sp, #8]
 801c828:	4630      	mov	r0, r6
 801c82a:	f7ff f981 	bl	801bb30 <uxr_init_base_object_request>
 801c82e:	a905      	add	r1, sp, #20
 801c830:	4605      	mov	r5, r0
 801c832:	4620      	mov	r0, r4
 801c834:	f000 fff2 	bl	801d81c <uxr_serialize_WRITE_DATA_Payload_Data>
 801c838:	69a6      	ldr	r6, [r4, #24]
 801c83a:	69e7      	ldr	r7, [r4, #28]
 801c83c:	4620      	mov	r0, r4
 801c83e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801c842:	1a52      	subs	r2, r2, r1
 801c844:	f7f5 ff4e 	bl	80126e4 <ucdr_init_buffer>
 801c848:	4620      	mov	r0, r4
 801c84a:	463a      	mov	r2, r7
 801c84c:	4631      	mov	r1, r6
 801c84e:	f7f5 ff1d 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801c852:	4628      	mov	r0, r5
 801c854:	b007      	add	sp, #28
 801c856:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c858 <uxr_serialize_message_header>:
 801c858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c85a:	4616      	mov	r6, r2
 801c85c:	b083      	sub	sp, #12
 801c85e:	4604      	mov	r4, r0
 801c860:	460d      	mov	r5, r1
 801c862:	9301      	str	r3, [sp, #4]
 801c864:	9f08      	ldr	r7, [sp, #32]
 801c866:	f7f4 fcd3 	bl	8011210 <ucdr_serialize_uint8_t>
 801c86a:	4631      	mov	r1, r6
 801c86c:	4620      	mov	r0, r4
 801c86e:	f7f4 fccf 	bl	8011210 <ucdr_serialize_uint8_t>
 801c872:	9a01      	ldr	r2, [sp, #4]
 801c874:	2101      	movs	r1, #1
 801c876:	4620      	mov	r0, r4
 801c878:	f7f4 fd76 	bl	8011368 <ucdr_serialize_endian_uint16_t>
 801c87c:	062b      	lsls	r3, r5, #24
 801c87e:	d501      	bpl.n	801c884 <uxr_serialize_message_header+0x2c>
 801c880:	b003      	add	sp, #12
 801c882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c884:	2204      	movs	r2, #4
 801c886:	4639      	mov	r1, r7
 801c888:	4620      	mov	r0, r4
 801c88a:	b003      	add	sp, #12
 801c88c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c890:	f7fd bbc2 	b.w	801a018 <ucdr_serialize_array_uint8_t>

0801c894 <uxr_deserialize_message_header>:
 801c894:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c896:	4616      	mov	r6, r2
 801c898:	b083      	sub	sp, #12
 801c89a:	4604      	mov	r4, r0
 801c89c:	460d      	mov	r5, r1
 801c89e:	9301      	str	r3, [sp, #4]
 801c8a0:	9f08      	ldr	r7, [sp, #32]
 801c8a2:	f7f4 fccb 	bl	801123c <ucdr_deserialize_uint8_t>
 801c8a6:	4631      	mov	r1, r6
 801c8a8:	4620      	mov	r0, r4
 801c8aa:	f7f4 fcc7 	bl	801123c <ucdr_deserialize_uint8_t>
 801c8ae:	9a01      	ldr	r2, [sp, #4]
 801c8b0:	2101      	movs	r1, #1
 801c8b2:	4620      	mov	r0, r4
 801c8b4:	f7f4 fe4c 	bl	8011550 <ucdr_deserialize_endian_uint16_t>
 801c8b8:	f995 3000 	ldrsb.w	r3, [r5]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	da01      	bge.n	801c8c4 <uxr_deserialize_message_header+0x30>
 801c8c0:	b003      	add	sp, #12
 801c8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8c4:	2204      	movs	r2, #4
 801c8c6:	4639      	mov	r1, r7
 801c8c8:	4620      	mov	r0, r4
 801c8ca:	b003      	add	sp, #12
 801c8cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c8d0:	f7fd bc06 	b.w	801a0e0 <ucdr_deserialize_array_uint8_t>

0801c8d4 <uxr_serialize_submessage_header>:
 801c8d4:	b530      	push	{r4, r5, lr}
 801c8d6:	4615      	mov	r5, r2
 801c8d8:	b083      	sub	sp, #12
 801c8da:	4604      	mov	r4, r0
 801c8dc:	9301      	str	r3, [sp, #4]
 801c8de:	f7f4 fc97 	bl	8011210 <ucdr_serialize_uint8_t>
 801c8e2:	4629      	mov	r1, r5
 801c8e4:	4620      	mov	r0, r4
 801c8e6:	f7f4 fc93 	bl	8011210 <ucdr_serialize_uint8_t>
 801c8ea:	9a01      	ldr	r2, [sp, #4]
 801c8ec:	2101      	movs	r1, #1
 801c8ee:	4620      	mov	r0, r4
 801c8f0:	b003      	add	sp, #12
 801c8f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c8f6:	f7f4 bd37 	b.w	8011368 <ucdr_serialize_endian_uint16_t>
 801c8fa:	bf00      	nop

0801c8fc <uxr_deserialize_submessage_header>:
 801c8fc:	b530      	push	{r4, r5, lr}
 801c8fe:	4615      	mov	r5, r2
 801c900:	b083      	sub	sp, #12
 801c902:	4604      	mov	r4, r0
 801c904:	9301      	str	r3, [sp, #4]
 801c906:	f7f4 fc99 	bl	801123c <ucdr_deserialize_uint8_t>
 801c90a:	4629      	mov	r1, r5
 801c90c:	4620      	mov	r0, r4
 801c90e:	f7f4 fc95 	bl	801123c <ucdr_deserialize_uint8_t>
 801c912:	9a01      	ldr	r2, [sp, #4]
 801c914:	2101      	movs	r1, #1
 801c916:	4620      	mov	r0, r4
 801c918:	b003      	add	sp, #12
 801c91a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c91e:	f7f4 be17 	b.w	8011550 <ucdr_deserialize_endian_uint16_t>
 801c922:	bf00      	nop

0801c924 <uxr_serialize_CLIENT_Representation>:
 801c924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c928:	2204      	movs	r2, #4
 801c92a:	460e      	mov	r6, r1
 801c92c:	4605      	mov	r5, r0
 801c92e:	f7fd fb73 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801c932:	4607      	mov	r7, r0
 801c934:	2202      	movs	r2, #2
 801c936:	1d31      	adds	r1, r6, #4
 801c938:	4628      	mov	r0, r5
 801c93a:	f7fd fb6d 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801c93e:	4038      	ands	r0, r7
 801c940:	2202      	movs	r2, #2
 801c942:	1db1      	adds	r1, r6, #6
 801c944:	b2c7      	uxtb	r7, r0
 801c946:	4628      	mov	r0, r5
 801c948:	f7fd fb66 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801c94c:	2204      	movs	r2, #4
 801c94e:	4007      	ands	r7, r0
 801c950:	f106 0108 	add.w	r1, r6, #8
 801c954:	4628      	mov	r0, r5
 801c956:	f7fd fb5f 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801c95a:	4007      	ands	r7, r0
 801c95c:	7b31      	ldrb	r1, [r6, #12]
 801c95e:	4628      	mov	r0, r5
 801c960:	f7f4 fc56 	bl	8011210 <ucdr_serialize_uint8_t>
 801c964:	7b71      	ldrb	r1, [r6, #13]
 801c966:	4007      	ands	r7, r0
 801c968:	4628      	mov	r0, r5
 801c96a:	f7f4 fc23 	bl	80111b4 <ucdr_serialize_bool>
 801c96e:	7b73      	ldrb	r3, [r6, #13]
 801c970:	ea07 0800 	and.w	r8, r7, r0
 801c974:	b93b      	cbnz	r3, 801c986 <uxr_serialize_CLIENT_Representation+0x62>
 801c976:	8bb1      	ldrh	r1, [r6, #28]
 801c978:	4628      	mov	r0, r5
 801c97a:	f7f4 fc75 	bl	8011268 <ucdr_serialize_uint16_t>
 801c97e:	ea08 0000 	and.w	r0, r8, r0
 801c982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c986:	6931      	ldr	r1, [r6, #16]
 801c988:	4628      	mov	r0, r5
 801c98a:	f7f4 fe57 	bl	801163c <ucdr_serialize_uint32_t>
 801c98e:	6933      	ldr	r3, [r6, #16]
 801c990:	b1e3      	cbz	r3, 801c9cc <uxr_serialize_CLIENT_Representation+0xa8>
 801c992:	b1c0      	cbz	r0, 801c9c6 <uxr_serialize_CLIENT_Representation+0xa2>
 801c994:	4637      	mov	r7, r6
 801c996:	f04f 0900 	mov.w	r9, #0
 801c99a:	e000      	b.n	801c99e <uxr_serialize_CLIENT_Representation+0x7a>
 801c99c:	b19c      	cbz	r4, 801c9c6 <uxr_serialize_CLIENT_Representation+0xa2>
 801c99e:	6979      	ldr	r1, [r7, #20]
 801c9a0:	4628      	mov	r0, r5
 801c9a2:	f001 fe0d 	bl	801e5c0 <ucdr_serialize_string>
 801c9a6:	69b9      	ldr	r1, [r7, #24]
 801c9a8:	4604      	mov	r4, r0
 801c9aa:	4628      	mov	r0, r5
 801c9ac:	f001 fe08 	bl	801e5c0 <ucdr_serialize_string>
 801c9b0:	f109 0901 	add.w	r9, r9, #1
 801c9b4:	6933      	ldr	r3, [r6, #16]
 801c9b6:	4004      	ands	r4, r0
 801c9b8:	3708      	adds	r7, #8
 801c9ba:	4599      	cmp	r9, r3
 801c9bc:	b2e4      	uxtb	r4, r4
 801c9be:	d3ed      	bcc.n	801c99c <uxr_serialize_CLIENT_Representation+0x78>
 801c9c0:	ea08 0804 	and.w	r8, r8, r4
 801c9c4:	e7d7      	b.n	801c976 <uxr_serialize_CLIENT_Representation+0x52>
 801c9c6:	f04f 0800 	mov.w	r8, #0
 801c9ca:	e7d4      	b.n	801c976 <uxr_serialize_CLIENT_Representation+0x52>
 801c9cc:	ea08 0800 	and.w	r8, r8, r0
 801c9d0:	e7d1      	b.n	801c976 <uxr_serialize_CLIENT_Representation+0x52>
 801c9d2:	bf00      	nop

0801c9d4 <uxr_deserialize_CLIENT_Representation>:
 801c9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9d8:	2204      	movs	r2, #4
 801c9da:	460c      	mov	r4, r1
 801c9dc:	4605      	mov	r5, r0
 801c9de:	f7fd fb7f 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801c9e2:	4607      	mov	r7, r0
 801c9e4:	2202      	movs	r2, #2
 801c9e6:	1d21      	adds	r1, r4, #4
 801c9e8:	4628      	mov	r0, r5
 801c9ea:	f7fd fb79 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801c9ee:	4038      	ands	r0, r7
 801c9f0:	2202      	movs	r2, #2
 801c9f2:	1da1      	adds	r1, r4, #6
 801c9f4:	b2c6      	uxtb	r6, r0
 801c9f6:	4628      	mov	r0, r5
 801c9f8:	f7fd fb72 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801c9fc:	2204      	movs	r2, #4
 801c9fe:	4006      	ands	r6, r0
 801ca00:	f104 0108 	add.w	r1, r4, #8
 801ca04:	4628      	mov	r0, r5
 801ca06:	f7fd fb6b 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801ca0a:	4006      	ands	r6, r0
 801ca0c:	f104 010c 	add.w	r1, r4, #12
 801ca10:	4628      	mov	r0, r5
 801ca12:	f7f4 fc13 	bl	801123c <ucdr_deserialize_uint8_t>
 801ca16:	f104 010d 	add.w	r1, r4, #13
 801ca1a:	ea06 0700 	and.w	r7, r6, r0
 801ca1e:	4628      	mov	r0, r5
 801ca20:	f7f4 fbde 	bl	80111e0 <ucdr_deserialize_bool>
 801ca24:	7b63      	ldrb	r3, [r4, #13]
 801ca26:	4007      	ands	r7, r0
 801ca28:	b93b      	cbnz	r3, 801ca3a <uxr_deserialize_CLIENT_Representation+0x66>
 801ca2a:	f104 011c 	add.w	r1, r4, #28
 801ca2e:	4628      	mov	r0, r5
 801ca30:	f7f4 fd1a 	bl	8011468 <ucdr_deserialize_uint16_t>
 801ca34:	4038      	ands	r0, r7
 801ca36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca3a:	f104 0110 	add.w	r1, r4, #16
 801ca3e:	4628      	mov	r0, r5
 801ca40:	f7f4 ff2c 	bl	801189c <ucdr_deserialize_uint32_t>
 801ca44:	6923      	ldr	r3, [r4, #16]
 801ca46:	2b01      	cmp	r3, #1
 801ca48:	d903      	bls.n	801ca52 <uxr_deserialize_CLIENT_Representation+0x7e>
 801ca4a:	2301      	movs	r3, #1
 801ca4c:	2700      	movs	r7, #0
 801ca4e:	75ab      	strb	r3, [r5, #22]
 801ca50:	e7eb      	b.n	801ca2a <uxr_deserialize_CLIENT_Representation+0x56>
 801ca52:	b30b      	cbz	r3, 801ca98 <uxr_deserialize_CLIENT_Representation+0xc4>
 801ca54:	b1f0      	cbz	r0, 801ca94 <uxr_deserialize_CLIENT_Representation+0xc0>
 801ca56:	46a0      	mov	r8, r4
 801ca58:	f04f 0900 	mov.w	r9, #0
 801ca5c:	e000      	b.n	801ca60 <uxr_deserialize_CLIENT_Representation+0x8c>
 801ca5e:	b1ce      	cbz	r6, 801ca94 <uxr_deserialize_CLIENT_Representation+0xc0>
 801ca60:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801ca64:	f108 0808 	add.w	r8, r8, #8
 801ca68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ca6c:	4628      	mov	r0, r5
 801ca6e:	f001 fdb7 	bl	801e5e0 <ucdr_deserialize_string>
 801ca72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ca76:	4606      	mov	r6, r0
 801ca78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ca7c:	4628      	mov	r0, r5
 801ca7e:	f109 0901 	add.w	r9, r9, #1
 801ca82:	f001 fdad 	bl	801e5e0 <ucdr_deserialize_string>
 801ca86:	6923      	ldr	r3, [r4, #16]
 801ca88:	4006      	ands	r6, r0
 801ca8a:	4599      	cmp	r9, r3
 801ca8c:	b2f6      	uxtb	r6, r6
 801ca8e:	d3e6      	bcc.n	801ca5e <uxr_deserialize_CLIENT_Representation+0x8a>
 801ca90:	4037      	ands	r7, r6
 801ca92:	e7ca      	b.n	801ca2a <uxr_deserialize_CLIENT_Representation+0x56>
 801ca94:	2700      	movs	r7, #0
 801ca96:	e7c8      	b.n	801ca2a <uxr_deserialize_CLIENT_Representation+0x56>
 801ca98:	4007      	ands	r7, r0
 801ca9a:	e7c6      	b.n	801ca2a <uxr_deserialize_CLIENT_Representation+0x56>

0801ca9c <uxr_serialize_AGENT_Representation>:
 801ca9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801caa0:	2204      	movs	r2, #4
 801caa2:	460f      	mov	r7, r1
 801caa4:	4605      	mov	r5, r0
 801caa6:	f7fd fab7 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801caaa:	4604      	mov	r4, r0
 801caac:	2202      	movs	r2, #2
 801caae:	1d39      	adds	r1, r7, #4
 801cab0:	4628      	mov	r0, r5
 801cab2:	f7fd fab1 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801cab6:	4020      	ands	r0, r4
 801cab8:	2202      	movs	r2, #2
 801caba:	1db9      	adds	r1, r7, #6
 801cabc:	b2c4      	uxtb	r4, r0
 801cabe:	4628      	mov	r0, r5
 801cac0:	f7fd faaa 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801cac4:	7a39      	ldrb	r1, [r7, #8]
 801cac6:	4004      	ands	r4, r0
 801cac8:	4628      	mov	r0, r5
 801caca:	f7f4 fb73 	bl	80111b4 <ucdr_serialize_bool>
 801cace:	7a3b      	ldrb	r3, [r7, #8]
 801cad0:	ea00 0804 	and.w	r8, r0, r4
 801cad4:	b913      	cbnz	r3, 801cadc <uxr_serialize_AGENT_Representation+0x40>
 801cad6:	4640      	mov	r0, r8
 801cad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cadc:	68f9      	ldr	r1, [r7, #12]
 801cade:	4628      	mov	r0, r5
 801cae0:	f7f4 fdac 	bl	801163c <ucdr_serialize_uint32_t>
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	b303      	cbz	r3, 801cb2a <uxr_serialize_AGENT_Representation+0x8e>
 801cae8:	b1d0      	cbz	r0, 801cb20 <uxr_serialize_AGENT_Representation+0x84>
 801caea:	463e      	mov	r6, r7
 801caec:	f04f 0900 	mov.w	r9, #0
 801caf0:	e000      	b.n	801caf4 <uxr_serialize_AGENT_Representation+0x58>
 801caf2:	b1ac      	cbz	r4, 801cb20 <uxr_serialize_AGENT_Representation+0x84>
 801caf4:	6931      	ldr	r1, [r6, #16]
 801caf6:	4628      	mov	r0, r5
 801caf8:	f001 fd62 	bl	801e5c0 <ucdr_serialize_string>
 801cafc:	6971      	ldr	r1, [r6, #20]
 801cafe:	4604      	mov	r4, r0
 801cb00:	4628      	mov	r0, r5
 801cb02:	f001 fd5d 	bl	801e5c0 <ucdr_serialize_string>
 801cb06:	f109 0901 	add.w	r9, r9, #1
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	4004      	ands	r4, r0
 801cb0e:	3608      	adds	r6, #8
 801cb10:	4599      	cmp	r9, r3
 801cb12:	b2e4      	uxtb	r4, r4
 801cb14:	d3ed      	bcc.n	801caf2 <uxr_serialize_AGENT_Representation+0x56>
 801cb16:	ea08 0804 	and.w	r8, r8, r4
 801cb1a:	4640      	mov	r0, r8
 801cb1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb20:	f04f 0800 	mov.w	r8, #0
 801cb24:	4640      	mov	r0, r8
 801cb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb2a:	ea08 0800 	and.w	r8, r8, r0
 801cb2e:	e7d2      	b.n	801cad6 <uxr_serialize_AGENT_Representation+0x3a>

0801cb30 <uxr_serialize_DATAWRITER_Representation>:
 801cb30:	b570      	push	{r4, r5, r6, lr}
 801cb32:	460d      	mov	r5, r1
 801cb34:	7809      	ldrb	r1, [r1, #0]
 801cb36:	4606      	mov	r6, r0
 801cb38:	f7f4 fb6a 	bl	8011210 <ucdr_serialize_uint8_t>
 801cb3c:	4604      	mov	r4, r0
 801cb3e:	b130      	cbz	r0, 801cb4e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801cb40:	782b      	ldrb	r3, [r5, #0]
 801cb42:	2b02      	cmp	r3, #2
 801cb44:	d00c      	beq.n	801cb60 <uxr_serialize_DATAWRITER_Representation+0x30>
 801cb46:	2b03      	cmp	r3, #3
 801cb48:	d010      	beq.n	801cb6c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801cb4a:	2b01      	cmp	r3, #1
 801cb4c:	d008      	beq.n	801cb60 <uxr_serialize_DATAWRITER_Representation+0x30>
 801cb4e:	2202      	movs	r2, #2
 801cb50:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801cb54:	4630      	mov	r0, r6
 801cb56:	f7fd fa5f 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801cb5a:	4020      	ands	r0, r4
 801cb5c:	b2c0      	uxtb	r0, r0
 801cb5e:	bd70      	pop	{r4, r5, r6, pc}
 801cb60:	6869      	ldr	r1, [r5, #4]
 801cb62:	4630      	mov	r0, r6
 801cb64:	f001 fd2c 	bl	801e5c0 <ucdr_serialize_string>
 801cb68:	4604      	mov	r4, r0
 801cb6a:	e7f0      	b.n	801cb4e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801cb6c:	4629      	mov	r1, r5
 801cb6e:	4630      	mov	r0, r6
 801cb70:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801cb74:	3104      	adds	r1, #4
 801cb76:	f7f7 fc1f 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801cb7a:	4604      	mov	r4, r0
 801cb7c:	e7e7      	b.n	801cb4e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801cb7e:	bf00      	nop

0801cb80 <uxr_serialize_ObjectVariant.part.0>:
 801cb80:	b570      	push	{r4, r5, r6, lr}
 801cb82:	780b      	ldrb	r3, [r1, #0]
 801cb84:	460c      	mov	r4, r1
 801cb86:	4605      	mov	r5, r0
 801cb88:	3b01      	subs	r3, #1
 801cb8a:	2b0d      	cmp	r3, #13
 801cb8c:	d854      	bhi.n	801cc38 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801cb8e:	e8df f003 	tbb	[pc, r3]
 801cb92:	0730      	.short	0x0730
 801cb94:	07071b1b 	.word	0x07071b1b
 801cb98:	0c530707 	.word	0x0c530707
 801cb9c:	494e0c0c 	.word	0x494e0c0c
 801cba0:	3104      	adds	r1, #4
 801cba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cba6:	f7ff bfc3 	b.w	801cb30 <uxr_serialize_DATAWRITER_Representation>
 801cbaa:	7909      	ldrb	r1, [r1, #4]
 801cbac:	f7f4 fb30 	bl	8011210 <ucdr_serialize_uint8_t>
 801cbb0:	b1e8      	cbz	r0, 801cbee <uxr_serialize_ObjectVariant.part.0+0x6e>
 801cbb2:	7923      	ldrb	r3, [r4, #4]
 801cbb4:	2b01      	cmp	r3, #1
 801cbb6:	d001      	beq.n	801cbbc <uxr_serialize_ObjectVariant.part.0+0x3c>
 801cbb8:	2b02      	cmp	r3, #2
 801cbba:	d13d      	bne.n	801cc38 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801cbbc:	68a1      	ldr	r1, [r4, #8]
 801cbbe:	4628      	mov	r0, r5
 801cbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cbc4:	f001 bcfc 	b.w	801e5c0 <ucdr_serialize_string>
 801cbc8:	7909      	ldrb	r1, [r1, #4]
 801cbca:	f7f4 fb21 	bl	8011210 <ucdr_serialize_uint8_t>
 801cbce:	4606      	mov	r6, r0
 801cbd0:	b120      	cbz	r0, 801cbdc <uxr_serialize_ObjectVariant.part.0+0x5c>
 801cbd2:	7923      	ldrb	r3, [r4, #4]
 801cbd4:	2b02      	cmp	r3, #2
 801cbd6:	d039      	beq.n	801cc4c <uxr_serialize_ObjectVariant.part.0+0xcc>
 801cbd8:	2b03      	cmp	r3, #3
 801cbda:	d02f      	beq.n	801cc3c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801cbdc:	2202      	movs	r2, #2
 801cbde:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801cbe2:	4628      	mov	r0, r5
 801cbe4:	f7fd fa18 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801cbe8:	4030      	ands	r0, r6
 801cbea:	b2c0      	uxtb	r0, r0
 801cbec:	bd70      	pop	{r4, r5, r6, pc}
 801cbee:	2000      	movs	r0, #0
 801cbf0:	bd70      	pop	{r4, r5, r6, pc}
 801cbf2:	7909      	ldrb	r1, [r1, #4]
 801cbf4:	f7f4 fb0c 	bl	8011210 <ucdr_serialize_uint8_t>
 801cbf8:	4606      	mov	r6, r0
 801cbfa:	b158      	cbz	r0, 801cc14 <uxr_serialize_ObjectVariant.part.0+0x94>
 801cbfc:	7923      	ldrb	r3, [r4, #4]
 801cbfe:	2b02      	cmp	r3, #2
 801cc00:	d003      	beq.n	801cc0a <uxr_serialize_ObjectVariant.part.0+0x8a>
 801cc02:	2b03      	cmp	r3, #3
 801cc04:	d028      	beq.n	801cc58 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801cc06:	2b01      	cmp	r3, #1
 801cc08:	d104      	bne.n	801cc14 <uxr_serialize_ObjectVariant.part.0+0x94>
 801cc0a:	68a1      	ldr	r1, [r4, #8]
 801cc0c:	4628      	mov	r0, r5
 801cc0e:	f001 fcd7 	bl	801e5c0 <ucdr_serialize_string>
 801cc12:	4606      	mov	r6, r0
 801cc14:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801cc18:	4628      	mov	r0, r5
 801cc1a:	f7f5 f835 	bl	8011c88 <ucdr_serialize_int16_t>
 801cc1e:	4030      	ands	r0, r6
 801cc20:	b2c0      	uxtb	r0, r0
 801cc22:	bd70      	pop	{r4, r5, r6, pc}
 801cc24:	3104      	adds	r1, #4
 801cc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc2a:	f7ff be7b 	b.w	801c924 <uxr_serialize_CLIENT_Representation>
 801cc2e:	3104      	adds	r1, #4
 801cc30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc34:	f7ff bf32 	b.w	801ca9c <uxr_serialize_AGENT_Representation>
 801cc38:	2001      	movs	r0, #1
 801cc3a:	bd70      	pop	{r4, r5, r6, pc}
 801cc3c:	68a2      	ldr	r2, [r4, #8]
 801cc3e:	f104 010c 	add.w	r1, r4, #12
 801cc42:	4628      	mov	r0, r5
 801cc44:	f7f7 fbb8 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801cc48:	4606      	mov	r6, r0
 801cc4a:	e7c7      	b.n	801cbdc <uxr_serialize_ObjectVariant.part.0+0x5c>
 801cc4c:	68a1      	ldr	r1, [r4, #8]
 801cc4e:	4628      	mov	r0, r5
 801cc50:	f001 fcb6 	bl	801e5c0 <ucdr_serialize_string>
 801cc54:	4606      	mov	r6, r0
 801cc56:	e7c1      	b.n	801cbdc <uxr_serialize_ObjectVariant.part.0+0x5c>
 801cc58:	68a2      	ldr	r2, [r4, #8]
 801cc5a:	f104 010c 	add.w	r1, r4, #12
 801cc5e:	4628      	mov	r0, r5
 801cc60:	f7f7 fbaa 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801cc64:	4606      	mov	r6, r0
 801cc66:	e7d5      	b.n	801cc14 <uxr_serialize_ObjectVariant.part.0+0x94>

0801cc68 <uxr_deserialize_DATAWRITER_Representation>:
 801cc68:	b570      	push	{r4, r5, r6, lr}
 801cc6a:	4606      	mov	r6, r0
 801cc6c:	460d      	mov	r5, r1
 801cc6e:	f7f4 fae5 	bl	801123c <ucdr_deserialize_uint8_t>
 801cc72:	4604      	mov	r4, r0
 801cc74:	b130      	cbz	r0, 801cc84 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801cc76:	782b      	ldrb	r3, [r5, #0]
 801cc78:	2b02      	cmp	r3, #2
 801cc7a:	d00c      	beq.n	801cc96 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801cc7c:	2b03      	cmp	r3, #3
 801cc7e:	d012      	beq.n	801cca6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801cc80:	2b01      	cmp	r3, #1
 801cc82:	d008      	beq.n	801cc96 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801cc84:	2202      	movs	r2, #2
 801cc86:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801cc8a:	4630      	mov	r0, r6
 801cc8c:	f7fd fa28 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801cc90:	4020      	ands	r0, r4
 801cc92:	b2c0      	uxtb	r0, r0
 801cc94:	bd70      	pop	{r4, r5, r6, pc}
 801cc96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801cc9a:	6869      	ldr	r1, [r5, #4]
 801cc9c:	4630      	mov	r0, r6
 801cc9e:	f001 fc9f 	bl	801e5e0 <ucdr_deserialize_string>
 801cca2:	4604      	mov	r4, r0
 801cca4:	e7ee      	b.n	801cc84 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801cca6:	1d2b      	adds	r3, r5, #4
 801cca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ccac:	f105 0108 	add.w	r1, r5, #8
 801ccb0:	4630      	mov	r0, r6
 801ccb2:	f7f7 fb93 	bl	80143dc <ucdr_deserialize_sequence_uint8_t>
 801ccb6:	4604      	mov	r4, r0
 801ccb8:	e7e4      	b.n	801cc84 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801ccba:	bf00      	nop

0801ccbc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801ccbc:	b570      	push	{r4, r5, r6, lr}
 801ccbe:	460d      	mov	r5, r1
 801ccc0:	7809      	ldrb	r1, [r1, #0]
 801ccc2:	4606      	mov	r6, r0
 801ccc4:	f7f4 fa76 	bl	80111b4 <ucdr_serialize_bool>
 801ccc8:	782b      	ldrb	r3, [r5, #0]
 801ccca:	4604      	mov	r4, r0
 801cccc:	b94b      	cbnz	r3, 801cce2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801ccce:	7a29      	ldrb	r1, [r5, #8]
 801ccd0:	4630      	mov	r0, r6
 801ccd2:	f7f4 fa6f 	bl	80111b4 <ucdr_serialize_bool>
 801ccd6:	7a2b      	ldrb	r3, [r5, #8]
 801ccd8:	4004      	ands	r4, r0
 801ccda:	b2e4      	uxtb	r4, r4
 801ccdc:	b943      	cbnz	r3, 801ccf0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801ccde:	4620      	mov	r0, r4
 801cce0:	bd70      	pop	{r4, r5, r6, pc}
 801cce2:	6869      	ldr	r1, [r5, #4]
 801cce4:	4630      	mov	r0, r6
 801cce6:	f001 fc6b 	bl	801e5c0 <ucdr_serialize_string>
 801ccea:	4004      	ands	r4, r0
 801ccec:	b2e4      	uxtb	r4, r4
 801ccee:	e7ee      	b.n	801ccce <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801ccf0:	68e9      	ldr	r1, [r5, #12]
 801ccf2:	4630      	mov	r0, r6
 801ccf4:	f001 fc64 	bl	801e5c0 <ucdr_serialize_string>
 801ccf8:	4004      	ands	r4, r0
 801ccfa:	4620      	mov	r0, r4
 801ccfc:	bd70      	pop	{r4, r5, r6, pc}
 801ccfe:	bf00      	nop

0801cd00 <uxr_serialize_OBJK_Topic_Binary>:
 801cd00:	b570      	push	{r4, r5, r6, lr}
 801cd02:	460d      	mov	r5, r1
 801cd04:	4606      	mov	r6, r0
 801cd06:	6809      	ldr	r1, [r1, #0]
 801cd08:	f001 fc5a 	bl	801e5c0 <ucdr_serialize_string>
 801cd0c:	4604      	mov	r4, r0
 801cd0e:	7929      	ldrb	r1, [r5, #4]
 801cd10:	4630      	mov	r0, r6
 801cd12:	f7f4 fa4f 	bl	80111b4 <ucdr_serialize_bool>
 801cd16:	792b      	ldrb	r3, [r5, #4]
 801cd18:	4004      	ands	r4, r0
 801cd1a:	b2e4      	uxtb	r4, r4
 801cd1c:	b943      	cbnz	r3, 801cd30 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801cd1e:	7b29      	ldrb	r1, [r5, #12]
 801cd20:	4630      	mov	r0, r6
 801cd22:	f7f4 fa47 	bl	80111b4 <ucdr_serialize_bool>
 801cd26:	7b2b      	ldrb	r3, [r5, #12]
 801cd28:	4004      	ands	r4, r0
 801cd2a:	b93b      	cbnz	r3, 801cd3c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801cd2c:	4620      	mov	r0, r4
 801cd2e:	bd70      	pop	{r4, r5, r6, pc}
 801cd30:	68a9      	ldr	r1, [r5, #8]
 801cd32:	4630      	mov	r0, r6
 801cd34:	f001 fc44 	bl	801e5c0 <ucdr_serialize_string>
 801cd38:	4004      	ands	r4, r0
 801cd3a:	e7f0      	b.n	801cd1e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801cd3c:	6929      	ldr	r1, [r5, #16]
 801cd3e:	4630      	mov	r0, r6
 801cd40:	f001 fc3e 	bl	801e5c0 <ucdr_serialize_string>
 801cd44:	4004      	ands	r4, r0
 801cd46:	b2e4      	uxtb	r4, r4
 801cd48:	4620      	mov	r0, r4
 801cd4a:	bd70      	pop	{r4, r5, r6, pc}

0801cd4c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801cd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd50:	460c      	mov	r4, r1
 801cd52:	7809      	ldrb	r1, [r1, #0]
 801cd54:	4606      	mov	r6, r0
 801cd56:	f7f4 fa2d 	bl	80111b4 <ucdr_serialize_bool>
 801cd5a:	7823      	ldrb	r3, [r4, #0]
 801cd5c:	4605      	mov	r5, r0
 801cd5e:	b96b      	cbnz	r3, 801cd7c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801cd60:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801cd64:	4630      	mov	r0, r6
 801cd66:	f7f4 fa25 	bl	80111b4 <ucdr_serialize_bool>
 801cd6a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801cd6e:	4005      	ands	r5, r0
 801cd70:	b2ed      	uxtb	r5, r5
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d169      	bne.n	801ce4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801cd76:	4628      	mov	r0, r5
 801cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd7c:	6861      	ldr	r1, [r4, #4]
 801cd7e:	4630      	mov	r0, r6
 801cd80:	f7f4 fc5c 	bl	801163c <ucdr_serialize_uint32_t>
 801cd84:	6863      	ldr	r3, [r4, #4]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d06b      	beq.n	801ce62 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801cd8a:	2800      	cmp	r0, #0
 801cd8c:	d067      	beq.n	801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801cd8e:	68a1      	ldr	r1, [r4, #8]
 801cd90:	4630      	mov	r0, r6
 801cd92:	f001 fc15 	bl	801e5c0 <ucdr_serialize_string>
 801cd96:	6863      	ldr	r3, [r4, #4]
 801cd98:	2b01      	cmp	r3, #1
 801cd9a:	d953      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801cd9c:	2800      	cmp	r0, #0
 801cd9e:	d05e      	beq.n	801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801cda0:	68e1      	ldr	r1, [r4, #12]
 801cda2:	4630      	mov	r0, r6
 801cda4:	f001 fc0c 	bl	801e5c0 <ucdr_serialize_string>
 801cda8:	6863      	ldr	r3, [r4, #4]
 801cdaa:	2b02      	cmp	r3, #2
 801cdac:	d94a      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801cdae:	2800      	cmp	r0, #0
 801cdb0:	d055      	beq.n	801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801cdb2:	6921      	ldr	r1, [r4, #16]
 801cdb4:	4630      	mov	r0, r6
 801cdb6:	f001 fc03 	bl	801e5c0 <ucdr_serialize_string>
 801cdba:	6863      	ldr	r3, [r4, #4]
 801cdbc:	2b03      	cmp	r3, #3
 801cdbe:	d941      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801cdc0:	2800      	cmp	r0, #0
 801cdc2:	d04c      	beq.n	801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801cdc4:	6961      	ldr	r1, [r4, #20]
 801cdc6:	4630      	mov	r0, r6
 801cdc8:	f001 fbfa 	bl	801e5c0 <ucdr_serialize_string>
 801cdcc:	6863      	ldr	r3, [r4, #4]
 801cdce:	2b04      	cmp	r3, #4
 801cdd0:	d938      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801cdd2:	2800      	cmp	r0, #0
 801cdd4:	d043      	beq.n	801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801cdd6:	69a1      	ldr	r1, [r4, #24]
 801cdd8:	4630      	mov	r0, r6
 801cdda:	f001 fbf1 	bl	801e5c0 <ucdr_serialize_string>
 801cdde:	6863      	ldr	r3, [r4, #4]
 801cde0:	2b05      	cmp	r3, #5
 801cde2:	d92f      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801cde4:	2800      	cmp	r0, #0
 801cde6:	d03a      	beq.n	801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801cde8:	69e1      	ldr	r1, [r4, #28]
 801cdea:	4630      	mov	r0, r6
 801cdec:	f001 fbe8 	bl	801e5c0 <ucdr_serialize_string>
 801cdf0:	6863      	ldr	r3, [r4, #4]
 801cdf2:	2b06      	cmp	r3, #6
 801cdf4:	d926      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801cdf6:	b390      	cbz	r0, 801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801cdf8:	6a21      	ldr	r1, [r4, #32]
 801cdfa:	4630      	mov	r0, r6
 801cdfc:	f001 fbe0 	bl	801e5c0 <ucdr_serialize_string>
 801ce00:	6863      	ldr	r3, [r4, #4]
 801ce02:	2b07      	cmp	r3, #7
 801ce04:	d91e      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ce06:	b350      	cbz	r0, 801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ce08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ce0a:	4630      	mov	r0, r6
 801ce0c:	f001 fbd8 	bl	801e5c0 <ucdr_serialize_string>
 801ce10:	6863      	ldr	r3, [r4, #4]
 801ce12:	2b08      	cmp	r3, #8
 801ce14:	d916      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ce16:	b310      	cbz	r0, 801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ce18:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ce1a:	4630      	mov	r0, r6
 801ce1c:	f001 fbd0 	bl	801e5c0 <ucdr_serialize_string>
 801ce20:	6863      	ldr	r3, [r4, #4]
 801ce22:	2b09      	cmp	r3, #9
 801ce24:	d90e      	bls.n	801ce44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801ce26:	b1d0      	cbz	r0, 801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ce28:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801ce2c:	2709      	movs	r7, #9
 801ce2e:	e000      	b.n	801ce32 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801ce30:	b1a8      	cbz	r0, 801ce5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801ce32:	f858 1b04 	ldr.w	r1, [r8], #4
 801ce36:	4630      	mov	r0, r6
 801ce38:	f001 fbc2 	bl	801e5c0 <ucdr_serialize_string>
 801ce3c:	3701      	adds	r7, #1
 801ce3e:	6862      	ldr	r2, [r4, #4]
 801ce40:	4297      	cmp	r7, r2
 801ce42:	d3f5      	bcc.n	801ce30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801ce44:	4005      	ands	r5, r0
 801ce46:	b2ed      	uxtb	r5, r5
 801ce48:	e78a      	b.n	801cd60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801ce4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801ce4c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801ce50:	4630      	mov	r0, r6
 801ce52:	f7f7 fab1 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801ce56:	4005      	ands	r5, r0
 801ce58:	4628      	mov	r0, r5
 801ce5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce5e:	2500      	movs	r5, #0
 801ce60:	e77e      	b.n	801cd60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801ce62:	4028      	ands	r0, r5
 801ce64:	b2c5      	uxtb	r5, r0
 801ce66:	e77b      	b.n	801cd60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801ce68 <uxr_serialize_OBJK_Publisher_Binary>:
 801ce68:	b570      	push	{r4, r5, r6, lr}
 801ce6a:	460d      	mov	r5, r1
 801ce6c:	7809      	ldrb	r1, [r1, #0]
 801ce6e:	4606      	mov	r6, r0
 801ce70:	f7f4 f9a0 	bl	80111b4 <ucdr_serialize_bool>
 801ce74:	782b      	ldrb	r3, [r5, #0]
 801ce76:	4604      	mov	r4, r0
 801ce78:	b94b      	cbnz	r3, 801ce8e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801ce7a:	7a29      	ldrb	r1, [r5, #8]
 801ce7c:	4630      	mov	r0, r6
 801ce7e:	f7f4 f999 	bl	80111b4 <ucdr_serialize_bool>
 801ce82:	7a2b      	ldrb	r3, [r5, #8]
 801ce84:	4004      	ands	r4, r0
 801ce86:	b2e4      	uxtb	r4, r4
 801ce88:	b943      	cbnz	r3, 801ce9c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801ce8a:	4620      	mov	r0, r4
 801ce8c:	bd70      	pop	{r4, r5, r6, pc}
 801ce8e:	6869      	ldr	r1, [r5, #4]
 801ce90:	4630      	mov	r0, r6
 801ce92:	f001 fb95 	bl	801e5c0 <ucdr_serialize_string>
 801ce96:	4004      	ands	r4, r0
 801ce98:	b2e4      	uxtb	r4, r4
 801ce9a:	e7ee      	b.n	801ce7a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801ce9c:	f105 010c 	add.w	r1, r5, #12
 801cea0:	4630      	mov	r0, r6
 801cea2:	f7ff ff53 	bl	801cd4c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801cea6:	4004      	ands	r4, r0
 801cea8:	4620      	mov	r0, r4
 801ceaa:	bd70      	pop	{r4, r5, r6, pc}

0801ceac <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801ceac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ceb0:	460c      	mov	r4, r1
 801ceb2:	7809      	ldrb	r1, [r1, #0]
 801ceb4:	4606      	mov	r6, r0
 801ceb6:	f7f4 f97d 	bl	80111b4 <ucdr_serialize_bool>
 801ceba:	7823      	ldrb	r3, [r4, #0]
 801cebc:	4605      	mov	r5, r0
 801cebe:	b96b      	cbnz	r3, 801cedc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801cec0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801cec4:	4630      	mov	r0, r6
 801cec6:	f7f4 f975 	bl	80111b4 <ucdr_serialize_bool>
 801ceca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801cece:	4005      	ands	r5, r0
 801ced0:	b2ed      	uxtb	r5, r5
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d169      	bne.n	801cfaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801ced6:	4628      	mov	r0, r5
 801ced8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cedc:	6861      	ldr	r1, [r4, #4]
 801cede:	4630      	mov	r0, r6
 801cee0:	f7f4 fbac 	bl	801163c <ucdr_serialize_uint32_t>
 801cee4:	6863      	ldr	r3, [r4, #4]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d06b      	beq.n	801cfc2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801ceea:	2800      	cmp	r0, #0
 801ceec:	d067      	beq.n	801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ceee:	68a1      	ldr	r1, [r4, #8]
 801cef0:	4630      	mov	r0, r6
 801cef2:	f001 fb65 	bl	801e5c0 <ucdr_serialize_string>
 801cef6:	6863      	ldr	r3, [r4, #4]
 801cef8:	2b01      	cmp	r3, #1
 801cefa:	d953      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cefc:	2800      	cmp	r0, #0
 801cefe:	d05e      	beq.n	801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf00:	68e1      	ldr	r1, [r4, #12]
 801cf02:	4630      	mov	r0, r6
 801cf04:	f001 fb5c 	bl	801e5c0 <ucdr_serialize_string>
 801cf08:	6863      	ldr	r3, [r4, #4]
 801cf0a:	2b02      	cmp	r3, #2
 801cf0c:	d94a      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf0e:	2800      	cmp	r0, #0
 801cf10:	d055      	beq.n	801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf12:	6921      	ldr	r1, [r4, #16]
 801cf14:	4630      	mov	r0, r6
 801cf16:	f001 fb53 	bl	801e5c0 <ucdr_serialize_string>
 801cf1a:	6863      	ldr	r3, [r4, #4]
 801cf1c:	2b03      	cmp	r3, #3
 801cf1e:	d941      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf20:	2800      	cmp	r0, #0
 801cf22:	d04c      	beq.n	801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf24:	6961      	ldr	r1, [r4, #20]
 801cf26:	4630      	mov	r0, r6
 801cf28:	f001 fb4a 	bl	801e5c0 <ucdr_serialize_string>
 801cf2c:	6863      	ldr	r3, [r4, #4]
 801cf2e:	2b04      	cmp	r3, #4
 801cf30:	d938      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf32:	2800      	cmp	r0, #0
 801cf34:	d043      	beq.n	801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf36:	69a1      	ldr	r1, [r4, #24]
 801cf38:	4630      	mov	r0, r6
 801cf3a:	f001 fb41 	bl	801e5c0 <ucdr_serialize_string>
 801cf3e:	6863      	ldr	r3, [r4, #4]
 801cf40:	2b05      	cmp	r3, #5
 801cf42:	d92f      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf44:	2800      	cmp	r0, #0
 801cf46:	d03a      	beq.n	801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf48:	69e1      	ldr	r1, [r4, #28]
 801cf4a:	4630      	mov	r0, r6
 801cf4c:	f001 fb38 	bl	801e5c0 <ucdr_serialize_string>
 801cf50:	6863      	ldr	r3, [r4, #4]
 801cf52:	2b06      	cmp	r3, #6
 801cf54:	d926      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf56:	b390      	cbz	r0, 801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf58:	6a21      	ldr	r1, [r4, #32]
 801cf5a:	4630      	mov	r0, r6
 801cf5c:	f001 fb30 	bl	801e5c0 <ucdr_serialize_string>
 801cf60:	6863      	ldr	r3, [r4, #4]
 801cf62:	2b07      	cmp	r3, #7
 801cf64:	d91e      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf66:	b350      	cbz	r0, 801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801cf6a:	4630      	mov	r0, r6
 801cf6c:	f001 fb28 	bl	801e5c0 <ucdr_serialize_string>
 801cf70:	6863      	ldr	r3, [r4, #4]
 801cf72:	2b08      	cmp	r3, #8
 801cf74:	d916      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf76:	b310      	cbz	r0, 801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801cf7a:	4630      	mov	r0, r6
 801cf7c:	f001 fb20 	bl	801e5c0 <ucdr_serialize_string>
 801cf80:	6863      	ldr	r3, [r4, #4]
 801cf82:	2b09      	cmp	r3, #9
 801cf84:	d90e      	bls.n	801cfa4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801cf86:	b1d0      	cbz	r0, 801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf88:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801cf8c:	2709      	movs	r7, #9
 801cf8e:	e000      	b.n	801cf92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801cf90:	b1a8      	cbz	r0, 801cfbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801cf92:	f858 1b04 	ldr.w	r1, [r8], #4
 801cf96:	4630      	mov	r0, r6
 801cf98:	f001 fb12 	bl	801e5c0 <ucdr_serialize_string>
 801cf9c:	3701      	adds	r7, #1
 801cf9e:	6862      	ldr	r2, [r4, #4]
 801cfa0:	4297      	cmp	r7, r2
 801cfa2:	d3f5      	bcc.n	801cf90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801cfa4:	4005      	ands	r5, r0
 801cfa6:	b2ed      	uxtb	r5, r5
 801cfa8:	e78a      	b.n	801cec0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801cfaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cfac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801cfb0:	4630      	mov	r0, r6
 801cfb2:	f7f7 fa01 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801cfb6:	4005      	ands	r5, r0
 801cfb8:	4628      	mov	r0, r5
 801cfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfbe:	2500      	movs	r5, #0
 801cfc0:	e77e      	b.n	801cec0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801cfc2:	4028      	ands	r0, r5
 801cfc4:	b2c5      	uxtb	r5, r0
 801cfc6:	e77b      	b.n	801cec0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801cfc8 <uxr_serialize_OBJK_Subscriber_Binary>:
 801cfc8:	b570      	push	{r4, r5, r6, lr}
 801cfca:	460d      	mov	r5, r1
 801cfcc:	7809      	ldrb	r1, [r1, #0]
 801cfce:	4606      	mov	r6, r0
 801cfd0:	f7f4 f8f0 	bl	80111b4 <ucdr_serialize_bool>
 801cfd4:	782b      	ldrb	r3, [r5, #0]
 801cfd6:	4604      	mov	r4, r0
 801cfd8:	b94b      	cbnz	r3, 801cfee <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801cfda:	7a29      	ldrb	r1, [r5, #8]
 801cfdc:	4630      	mov	r0, r6
 801cfde:	f7f4 f8e9 	bl	80111b4 <ucdr_serialize_bool>
 801cfe2:	7a2b      	ldrb	r3, [r5, #8]
 801cfe4:	4004      	ands	r4, r0
 801cfe6:	b2e4      	uxtb	r4, r4
 801cfe8:	b943      	cbnz	r3, 801cffc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801cfea:	4620      	mov	r0, r4
 801cfec:	bd70      	pop	{r4, r5, r6, pc}
 801cfee:	6869      	ldr	r1, [r5, #4]
 801cff0:	4630      	mov	r0, r6
 801cff2:	f001 fae5 	bl	801e5c0 <ucdr_serialize_string>
 801cff6:	4004      	ands	r4, r0
 801cff8:	b2e4      	uxtb	r4, r4
 801cffa:	e7ee      	b.n	801cfda <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801cffc:	f105 010c 	add.w	r1, r5, #12
 801d000:	4630      	mov	r0, r6
 801d002:	f7ff ff53 	bl	801ceac <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801d006:	4004      	ands	r4, r0
 801d008:	4620      	mov	r0, r4
 801d00a:	bd70      	pop	{r4, r5, r6, pc}

0801d00c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801d00c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801d010:	4688      	mov	r8, r1
 801d012:	4681      	mov	r9, r0
 801d014:	8809      	ldrh	r1, [r1, #0]
 801d016:	f7f4 f927 	bl	8011268 <ucdr_serialize_uint16_t>
 801d01a:	4606      	mov	r6, r0
 801d01c:	f898 1002 	ldrb.w	r1, [r8, #2]
 801d020:	4648      	mov	r0, r9
 801d022:	f7f4 f8c7 	bl	80111b4 <ucdr_serialize_bool>
 801d026:	f898 3002 	ldrb.w	r3, [r8, #2]
 801d02a:	4006      	ands	r6, r0
 801d02c:	b2f5      	uxtb	r5, r6
 801d02e:	b9eb      	cbnz	r3, 801d06c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801d030:	f898 1006 	ldrb.w	r1, [r8, #6]
 801d034:	4648      	mov	r0, r9
 801d036:	f7f4 f8bd 	bl	80111b4 <ucdr_serialize_bool>
 801d03a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801d03e:	4005      	ands	r5, r0
 801d040:	bb7b      	cbnz	r3, 801d0a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801d042:	f898 100c 	ldrb.w	r1, [r8, #12]
 801d046:	4648      	mov	r0, r9
 801d048:	f7f4 f8b4 	bl	80111b4 <ucdr_serialize_bool>
 801d04c:	f898 300c 	ldrb.w	r3, [r8, #12]
 801d050:	4005      	ands	r5, r0
 801d052:	b9f3      	cbnz	r3, 801d092 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801d054:	f898 1014 	ldrb.w	r1, [r8, #20]
 801d058:	4648      	mov	r0, r9
 801d05a:	f7f4 f8ab 	bl	80111b4 <ucdr_serialize_bool>
 801d05e:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d062:	4005      	ands	r5, r0
 801d064:	b94b      	cbnz	r3, 801d07a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801d066:	4628      	mov	r0, r5
 801d068:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801d06c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801d070:	4648      	mov	r0, r9
 801d072:	f7f4 f8f9 	bl	8011268 <ucdr_serialize_uint16_t>
 801d076:	4005      	ands	r5, r0
 801d078:	e7da      	b.n	801d030 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801d07a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801d07e:	f108 011c 	add.w	r1, r8, #28
 801d082:	4648      	mov	r0, r9
 801d084:	f7f7 f998 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801d088:	4028      	ands	r0, r5
 801d08a:	b2c5      	uxtb	r5, r0
 801d08c:	4628      	mov	r0, r5
 801d08e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801d092:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801d096:	4648      	mov	r0, r9
 801d098:	f7f4 fad0 	bl	801163c <ucdr_serialize_uint32_t>
 801d09c:	4028      	ands	r0, r5
 801d09e:	b2c5      	uxtb	r5, r0
 801d0a0:	e7d8      	b.n	801d054 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801d0a2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801d0a6:	4648      	mov	r0, r9
 801d0a8:	f7f4 fac8 	bl	801163c <ucdr_serialize_uint32_t>
 801d0ac:	4028      	ands	r0, r5
 801d0ae:	b2c5      	uxtb	r5, r0
 801d0b0:	e7c7      	b.n	801d042 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801d0b2:	bf00      	nop

0801d0b4 <uxr_serialize_OBJK_DataReader_Binary>:
 801d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0b6:	2202      	movs	r2, #2
 801d0b8:	460c      	mov	r4, r1
 801d0ba:	4606      	mov	r6, r0
 801d0bc:	f7fc ffac 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d0c0:	4605      	mov	r5, r0
 801d0c2:	78a1      	ldrb	r1, [r4, #2]
 801d0c4:	4630      	mov	r0, r6
 801d0c6:	f7f4 f875 	bl	80111b4 <ucdr_serialize_bool>
 801d0ca:	78a3      	ldrb	r3, [r4, #2]
 801d0cc:	4005      	ands	r5, r0
 801d0ce:	b2ed      	uxtb	r5, r5
 801d0d0:	b90b      	cbnz	r3, 801d0d6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801d0d2:	4628      	mov	r0, r5
 801d0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0d6:	f104 0108 	add.w	r1, r4, #8
 801d0da:	4630      	mov	r0, r6
 801d0dc:	f7ff ff96 	bl	801d00c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801d0e0:	4607      	mov	r7, r0
 801d0e2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801d0e6:	4630      	mov	r0, r6
 801d0e8:	f7f4 f864 	bl	80111b4 <ucdr_serialize_bool>
 801d0ec:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801d0f0:	4038      	ands	r0, r7
 801d0f2:	b2c7      	uxtb	r7, r0
 801d0f4:	b95b      	cbnz	r3, 801d10e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801d0f6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801d0fa:	4630      	mov	r0, r6
 801d0fc:	f7f4 f85a 	bl	80111b4 <ucdr_serialize_bool>
 801d100:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801d104:	4007      	ands	r7, r0
 801d106:	b94b      	cbnz	r3, 801d11c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801d108:	403d      	ands	r5, r7
 801d10a:	4628      	mov	r0, r5
 801d10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d10e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801d112:	4630      	mov	r0, r6
 801d114:	f7f4 fce8 	bl	8011ae8 <ucdr_serialize_uint64_t>
 801d118:	4007      	ands	r7, r0
 801d11a:	e7ec      	b.n	801d0f6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801d11c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801d11e:	4630      	mov	r0, r6
 801d120:	f001 fa4e 	bl	801e5c0 <ucdr_serialize_string>
 801d124:	4007      	ands	r7, r0
 801d126:	b2ff      	uxtb	r7, r7
 801d128:	e7ee      	b.n	801d108 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801d12a:	bf00      	nop

0801d12c <uxr_serialize_OBJK_DataWriter_Binary>:
 801d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d12e:	2202      	movs	r2, #2
 801d130:	460d      	mov	r5, r1
 801d132:	4606      	mov	r6, r0
 801d134:	f7fc ff70 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d138:	4604      	mov	r4, r0
 801d13a:	78a9      	ldrb	r1, [r5, #2]
 801d13c:	4630      	mov	r0, r6
 801d13e:	f7f4 f839 	bl	80111b4 <ucdr_serialize_bool>
 801d142:	78ab      	ldrb	r3, [r5, #2]
 801d144:	4004      	ands	r4, r0
 801d146:	b2e4      	uxtb	r4, r4
 801d148:	b90b      	cbnz	r3, 801d14e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801d14a:	4620      	mov	r0, r4
 801d14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d14e:	f105 0108 	add.w	r1, r5, #8
 801d152:	4630      	mov	r0, r6
 801d154:	f7ff ff5a 	bl	801d00c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801d158:	4607      	mov	r7, r0
 801d15a:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801d15e:	4630      	mov	r0, r6
 801d160:	f7f4 f828 	bl	80111b4 <ucdr_serialize_bool>
 801d164:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801d168:	4038      	ands	r0, r7
 801d16a:	b2c7      	uxtb	r7, r0
 801d16c:	b913      	cbnz	r3, 801d174 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801d16e:	403c      	ands	r4, r7
 801d170:	4620      	mov	r0, r4
 801d172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d174:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801d178:	4630      	mov	r0, r6
 801d17a:	f7f4 fcb5 	bl	8011ae8 <ucdr_serialize_uint64_t>
 801d17e:	4007      	ands	r7, r0
 801d180:	e7f5      	b.n	801d16e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801d182:	bf00      	nop

0801d184 <uxr_serialize_OBJK_Replier_Binary>:
 801d184:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801d188:	460f      	mov	r7, r1
 801d18a:	4680      	mov	r8, r0
 801d18c:	6809      	ldr	r1, [r1, #0]
 801d18e:	f001 fa17 	bl	801e5c0 <ucdr_serialize_string>
 801d192:	4605      	mov	r5, r0
 801d194:	6879      	ldr	r1, [r7, #4]
 801d196:	4640      	mov	r0, r8
 801d198:	f001 fa12 	bl	801e5c0 <ucdr_serialize_string>
 801d19c:	4005      	ands	r5, r0
 801d19e:	68b9      	ldr	r1, [r7, #8]
 801d1a0:	4640      	mov	r0, r8
 801d1a2:	b2ec      	uxtb	r4, r5
 801d1a4:	f001 fa0c 	bl	801e5c0 <ucdr_serialize_string>
 801d1a8:	7b39      	ldrb	r1, [r7, #12]
 801d1aa:	4004      	ands	r4, r0
 801d1ac:	4640      	mov	r0, r8
 801d1ae:	f7f4 f801 	bl	80111b4 <ucdr_serialize_bool>
 801d1b2:	7b3b      	ldrb	r3, [r7, #12]
 801d1b4:	4004      	ands	r4, r0
 801d1b6:	b94b      	cbnz	r3, 801d1cc <uxr_serialize_OBJK_Replier_Binary+0x48>
 801d1b8:	7d39      	ldrb	r1, [r7, #20]
 801d1ba:	4640      	mov	r0, r8
 801d1bc:	f7f3 fffa 	bl	80111b4 <ucdr_serialize_bool>
 801d1c0:	7d3b      	ldrb	r3, [r7, #20]
 801d1c2:	4004      	ands	r4, r0
 801d1c4:	b943      	cbnz	r3, 801d1d8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801d1c6:	4620      	mov	r0, r4
 801d1c8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801d1cc:	6939      	ldr	r1, [r7, #16]
 801d1ce:	4640      	mov	r0, r8
 801d1d0:	f001 f9f6 	bl	801e5c0 <ucdr_serialize_string>
 801d1d4:	4004      	ands	r4, r0
 801d1d6:	e7ef      	b.n	801d1b8 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801d1d8:	69b9      	ldr	r1, [r7, #24]
 801d1da:	4640      	mov	r0, r8
 801d1dc:	f001 f9f0 	bl	801e5c0 <ucdr_serialize_string>
 801d1e0:	4004      	ands	r4, r0
 801d1e2:	b2e4      	uxtb	r4, r4
 801d1e4:	4620      	mov	r0, r4
 801d1e6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801d1ea:	bf00      	nop

0801d1ec <uxr_deserialize_ObjectVariant>:
 801d1ec:	b570      	push	{r4, r5, r6, lr}
 801d1ee:	4605      	mov	r5, r0
 801d1f0:	460e      	mov	r6, r1
 801d1f2:	f7f4 f823 	bl	801123c <ucdr_deserialize_uint8_t>
 801d1f6:	b168      	cbz	r0, 801d214 <uxr_deserialize_ObjectVariant+0x28>
 801d1f8:	7833      	ldrb	r3, [r6, #0]
 801d1fa:	4604      	mov	r4, r0
 801d1fc:	3b01      	subs	r3, #1
 801d1fe:	2b0d      	cmp	r3, #13
 801d200:	d809      	bhi.n	801d216 <uxr_deserialize_ObjectVariant+0x2a>
 801d202:	e8df f003 	tbb	[pc, r3]
 801d206:	0a41      	.short	0x0a41
 801d208:	0a0a2323 	.word	0x0a0a2323
 801d20c:	10080a0a 	.word	0x10080a0a
 801d210:	565c1010 	.word	0x565c1010
 801d214:	2400      	movs	r4, #0
 801d216:	4620      	mov	r0, r4
 801d218:	bd70      	pop	{r4, r5, r6, pc}
 801d21a:	1d31      	adds	r1, r6, #4
 801d21c:	4628      	mov	r0, r5
 801d21e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d222:	f7ff bd21 	b.w	801cc68 <uxr_deserialize_DATAWRITER_Representation>
 801d226:	1d31      	adds	r1, r6, #4
 801d228:	4628      	mov	r0, r5
 801d22a:	f7f4 f807 	bl	801123c <ucdr_deserialize_uint8_t>
 801d22e:	2800      	cmp	r0, #0
 801d230:	d0f0      	beq.n	801d214 <uxr_deserialize_ObjectVariant+0x28>
 801d232:	7933      	ldrb	r3, [r6, #4]
 801d234:	2b01      	cmp	r3, #1
 801d236:	d001      	beq.n	801d23c <uxr_deserialize_ObjectVariant+0x50>
 801d238:	2b02      	cmp	r3, #2
 801d23a:	d1ec      	bne.n	801d216 <uxr_deserialize_ObjectVariant+0x2a>
 801d23c:	68b1      	ldr	r1, [r6, #8]
 801d23e:	4628      	mov	r0, r5
 801d240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d248:	f001 b9ca 	b.w	801e5e0 <ucdr_deserialize_string>
 801d24c:	1d31      	adds	r1, r6, #4
 801d24e:	4628      	mov	r0, r5
 801d250:	f7f3 fff4 	bl	801123c <ucdr_deserialize_uint8_t>
 801d254:	4604      	mov	r4, r0
 801d256:	b170      	cbz	r0, 801d276 <uxr_deserialize_ObjectVariant+0x8a>
 801d258:	7933      	ldrb	r3, [r6, #4]
 801d25a:	2b02      	cmp	r3, #2
 801d25c:	d04c      	beq.n	801d2f8 <uxr_deserialize_ObjectVariant+0x10c>
 801d25e:	2b03      	cmp	r3, #3
 801d260:	d109      	bne.n	801d276 <uxr_deserialize_ObjectVariant+0x8a>
 801d262:	f106 0308 	add.w	r3, r6, #8
 801d266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d26a:	f106 010c 	add.w	r1, r6, #12
 801d26e:	4628      	mov	r0, r5
 801d270:	f7f7 f8b4 	bl	80143dc <ucdr_deserialize_sequence_uint8_t>
 801d274:	4604      	mov	r4, r0
 801d276:	2202      	movs	r2, #2
 801d278:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801d27c:	4628      	mov	r0, r5
 801d27e:	f7fc ff2f 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d282:	4020      	ands	r0, r4
 801d284:	b2c4      	uxtb	r4, r0
 801d286:	e7c6      	b.n	801d216 <uxr_deserialize_ObjectVariant+0x2a>
 801d288:	1d31      	adds	r1, r6, #4
 801d28a:	4628      	mov	r0, r5
 801d28c:	f7f3 ffd6 	bl	801123c <ucdr_deserialize_uint8_t>
 801d290:	4604      	mov	r4, r0
 801d292:	b130      	cbz	r0, 801d2a2 <uxr_deserialize_ObjectVariant+0xb6>
 801d294:	7933      	ldrb	r3, [r6, #4]
 801d296:	2b02      	cmp	r3, #2
 801d298:	d036      	beq.n	801d308 <uxr_deserialize_ObjectVariant+0x11c>
 801d29a:	2b03      	cmp	r3, #3
 801d29c:	d03c      	beq.n	801d318 <uxr_deserialize_ObjectVariant+0x12c>
 801d29e:	2b01      	cmp	r3, #1
 801d2a0:	d032      	beq.n	801d308 <uxr_deserialize_ObjectVariant+0x11c>
 801d2a2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801d2a6:	4628      	mov	r0, r5
 801d2a8:	f7f4 fd6e 	bl	8011d88 <ucdr_deserialize_int16_t>
 801d2ac:	4020      	ands	r0, r4
 801d2ae:	b2c4      	uxtb	r4, r0
 801d2b0:	e7b1      	b.n	801d216 <uxr_deserialize_ObjectVariant+0x2a>
 801d2b2:	1d31      	adds	r1, r6, #4
 801d2b4:	4628      	mov	r0, r5
 801d2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d2ba:	f7ff bb8b 	b.w	801c9d4 <uxr_deserialize_CLIENT_Representation>
 801d2be:	2204      	movs	r2, #4
 801d2c0:	4628      	mov	r0, r5
 801d2c2:	18b1      	adds	r1, r6, r2
 801d2c4:	f7fc ff0c 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d2c8:	4604      	mov	r4, r0
 801d2ca:	2202      	movs	r2, #2
 801d2cc:	f106 0108 	add.w	r1, r6, #8
 801d2d0:	4628      	mov	r0, r5
 801d2d2:	f7fc ff05 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d2d6:	4004      	ands	r4, r0
 801d2d8:	2202      	movs	r2, #2
 801d2da:	f106 010a 	add.w	r1, r6, #10
 801d2de:	4628      	mov	r0, r5
 801d2e0:	b2e4      	uxtb	r4, r4
 801d2e2:	f7fc fefd 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	f106 010c 	add.w	r1, r6, #12
 801d2ec:	4628      	mov	r0, r5
 801d2ee:	401c      	ands	r4, r3
 801d2f0:	f7f3 ff76 	bl	80111e0 <ucdr_deserialize_bool>
 801d2f4:	4004      	ands	r4, r0
 801d2f6:	e78e      	b.n	801d216 <uxr_deserialize_ObjectVariant+0x2a>
 801d2f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d2fc:	68b1      	ldr	r1, [r6, #8]
 801d2fe:	4628      	mov	r0, r5
 801d300:	f001 f96e 	bl	801e5e0 <ucdr_deserialize_string>
 801d304:	4604      	mov	r4, r0
 801d306:	e7b6      	b.n	801d276 <uxr_deserialize_ObjectVariant+0x8a>
 801d308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d30c:	68b1      	ldr	r1, [r6, #8]
 801d30e:	4628      	mov	r0, r5
 801d310:	f001 f966 	bl	801e5e0 <ucdr_deserialize_string>
 801d314:	4604      	mov	r4, r0
 801d316:	e7c4      	b.n	801d2a2 <uxr_deserialize_ObjectVariant+0xb6>
 801d318:	f106 0308 	add.w	r3, r6, #8
 801d31c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d320:	f106 010c 	add.w	r1, r6, #12
 801d324:	4628      	mov	r0, r5
 801d326:	f7f7 f859 	bl	80143dc <ucdr_deserialize_sequence_uint8_t>
 801d32a:	4604      	mov	r4, r0
 801d32c:	e7b9      	b.n	801d2a2 <uxr_deserialize_ObjectVariant+0xb6>
 801d32e:	bf00      	nop

0801d330 <uxr_deserialize_BaseObjectRequest>:
 801d330:	b570      	push	{r4, r5, r6, lr}
 801d332:	2202      	movs	r2, #2
 801d334:	4605      	mov	r5, r0
 801d336:	460e      	mov	r6, r1
 801d338:	f7fc fed2 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d33c:	2202      	movs	r2, #2
 801d33e:	4604      	mov	r4, r0
 801d340:	4628      	mov	r0, r5
 801d342:	18b1      	adds	r1, r6, r2
 801d344:	f7fc fecc 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d348:	4020      	ands	r0, r4
 801d34a:	b2c0      	uxtb	r0, r0
 801d34c:	bd70      	pop	{r4, r5, r6, pc}
 801d34e:	bf00      	nop

0801d350 <uxr_serialize_ActivityInfoVariant>:
 801d350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d354:	460e      	mov	r6, r1
 801d356:	7809      	ldrb	r1, [r1, #0]
 801d358:	4680      	mov	r8, r0
 801d35a:	f7f3 ff59 	bl	8011210 <ucdr_serialize_uint8_t>
 801d35e:	4607      	mov	r7, r0
 801d360:	b138      	cbz	r0, 801d372 <uxr_serialize_ActivityInfoVariant+0x22>
 801d362:	7833      	ldrb	r3, [r6, #0]
 801d364:	2b06      	cmp	r3, #6
 801d366:	f000 8081 	beq.w	801d46c <uxr_serialize_ActivityInfoVariant+0x11c>
 801d36a:	2b0d      	cmp	r3, #13
 801d36c:	d014      	beq.n	801d398 <uxr_serialize_ActivityInfoVariant+0x48>
 801d36e:	2b05      	cmp	r3, #5
 801d370:	d002      	beq.n	801d378 <uxr_serialize_ActivityInfoVariant+0x28>
 801d372:	4638      	mov	r0, r7
 801d374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d378:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801d37c:	4640      	mov	r0, r8
 801d37e:	f7f4 fc83 	bl	8011c88 <ucdr_serialize_int16_t>
 801d382:	4607      	mov	r7, r0
 801d384:	4640      	mov	r0, r8
 801d386:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801d38a:	f7f4 fbad 	bl	8011ae8 <ucdr_serialize_uint64_t>
 801d38e:	4038      	ands	r0, r7
 801d390:	b2c7      	uxtb	r7, r0
 801d392:	4638      	mov	r0, r7
 801d394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d398:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801d39c:	4640      	mov	r0, r8
 801d39e:	f7f4 fc73 	bl	8011c88 <ucdr_serialize_int16_t>
 801d3a2:	68f1      	ldr	r1, [r6, #12]
 801d3a4:	4607      	mov	r7, r0
 801d3a6:	4640      	mov	r0, r8
 801d3a8:	f7f4 f948 	bl	801163c <ucdr_serialize_uint32_t>
 801d3ac:	68f3      	ldr	r3, [r6, #12]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d0ed      	beq.n	801d38e <uxr_serialize_ActivityInfoVariant+0x3e>
 801d3b2:	b318      	cbz	r0, 801d3fc <uxr_serialize_ActivityInfoVariant+0xac>
 801d3b4:	f106 090c 	add.w	r9, r6, #12
 801d3b8:	2400      	movs	r4, #0
 801d3ba:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801d3be:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801d3c2:	7c29      	ldrb	r1, [r5, #16]
 801d3c4:	4640      	mov	r0, r8
 801d3c6:	f7f3 ff23 	bl	8011210 <ucdr_serialize_uint8_t>
 801d3ca:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801d3ce:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801d3d2:	2800      	cmp	r0, #0
 801d3d4:	d051      	beq.n	801d47a <uxr_serialize_ActivityInfoVariant+0x12a>
 801d3d6:	7c2b      	ldrb	r3, [r5, #16]
 801d3d8:	00c9      	lsls	r1, r1, #3
 801d3da:	2b03      	cmp	r3, #3
 801d3dc:	d854      	bhi.n	801d488 <uxr_serialize_ActivityInfoVariant+0x138>
 801d3de:	e8df f003 	tbb	[pc, r3]
 801d3e2:	2133      	.short	0x2133
 801d3e4:	020f      	.short	0x020f
 801d3e6:	4449      	add	r1, r9
 801d3e8:	4640      	mov	r0, r8
 801d3ea:	6889      	ldr	r1, [r1, #8]
 801d3ec:	f001 f8e8 	bl	801e5c0 <ucdr_serialize_string>
 801d3f0:	3401      	adds	r4, #1
 801d3f2:	68f2      	ldr	r2, [r6, #12]
 801d3f4:	4294      	cmp	r4, r2
 801d3f6:	d244      	bcs.n	801d482 <uxr_serialize_ActivityInfoVariant+0x132>
 801d3f8:	2800      	cmp	r0, #0
 801d3fa:	d1de      	bne.n	801d3ba <uxr_serialize_ActivityInfoVariant+0x6a>
 801d3fc:	2700      	movs	r7, #0
 801d3fe:	e7b8      	b.n	801d372 <uxr_serialize_ActivityInfoVariant+0x22>
 801d400:	3108      	adds	r1, #8
 801d402:	44a2      	add	sl, r4
 801d404:	2210      	movs	r2, #16
 801d406:	4640      	mov	r0, r8
 801d408:	4449      	add	r1, r9
 801d40a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801d40e:	f7fc fe03 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d412:	4605      	mov	r5, r0
 801d414:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801d418:	4640      	mov	r0, r8
 801d41a:	f7f4 f90f 	bl	801163c <ucdr_serialize_uint32_t>
 801d41e:	4028      	ands	r0, r5
 801d420:	b2c0      	uxtb	r0, r0
 801d422:	e7e5      	b.n	801d3f0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801d424:	3108      	adds	r1, #8
 801d426:	44a2      	add	sl, r4
 801d428:	2204      	movs	r2, #4
 801d42a:	4640      	mov	r0, r8
 801d42c:	4449      	add	r1, r9
 801d42e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801d432:	f7fc fdf1 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d436:	4605      	mov	r5, r0
 801d438:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801d43c:	4640      	mov	r0, r8
 801d43e:	f7f3 ff13 	bl	8011268 <ucdr_serialize_uint16_t>
 801d442:	4028      	ands	r0, r5
 801d444:	b2c0      	uxtb	r0, r0
 801d446:	e7d3      	b.n	801d3f0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801d448:	3108      	adds	r1, #8
 801d44a:	44a2      	add	sl, r4
 801d44c:	2202      	movs	r2, #2
 801d44e:	4640      	mov	r0, r8
 801d450:	4449      	add	r1, r9
 801d452:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801d456:	f7fc fddf 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d45a:	4605      	mov	r5, r0
 801d45c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801d460:	4640      	mov	r0, r8
 801d462:	f7f3 fed5 	bl	8011210 <ucdr_serialize_uint8_t>
 801d466:	4028      	ands	r0, r5
 801d468:	b2c0      	uxtb	r0, r0
 801d46a:	e7c1      	b.n	801d3f0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801d46c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801d470:	4640      	mov	r0, r8
 801d472:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d476:	f7f4 bc07 	b.w	8011c88 <ucdr_serialize_int16_t>
 801d47a:	3401      	adds	r4, #1
 801d47c:	68f2      	ldr	r2, [r6, #12]
 801d47e:	42a2      	cmp	r2, r4
 801d480:	d8bc      	bhi.n	801d3fc <uxr_serialize_ActivityInfoVariant+0xac>
 801d482:	4007      	ands	r7, r0
 801d484:	b2ff      	uxtb	r7, r7
 801d486:	e774      	b.n	801d372 <uxr_serialize_ActivityInfoVariant+0x22>
 801d488:	3401      	adds	r4, #1
 801d48a:	68f3      	ldr	r3, [r6, #12]
 801d48c:	3518      	adds	r5, #24
 801d48e:	429c      	cmp	r4, r3
 801d490:	d397      	bcc.n	801d3c2 <uxr_serialize_ActivityInfoVariant+0x72>
 801d492:	e76e      	b.n	801d372 <uxr_serialize_ActivityInfoVariant+0x22>

0801d494 <uxr_deserialize_BaseObjectReply>:
 801d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d498:	2202      	movs	r2, #2
 801d49a:	4606      	mov	r6, r0
 801d49c:	460f      	mov	r7, r1
 801d49e:	f7fc fe1f 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d4a2:	2202      	movs	r2, #2
 801d4a4:	4605      	mov	r5, r0
 801d4a6:	4630      	mov	r0, r6
 801d4a8:	18b9      	adds	r1, r7, r2
 801d4aa:	f7fc fe19 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d4ae:	4680      	mov	r8, r0
 801d4b0:	1d39      	adds	r1, r7, #4
 801d4b2:	4630      	mov	r0, r6
 801d4b4:	f7f3 fec2 	bl	801123c <ucdr_deserialize_uint8_t>
 801d4b8:	ea05 0508 	and.w	r5, r5, r8
 801d4bc:	4604      	mov	r4, r0
 801d4be:	1d79      	adds	r1, r7, #5
 801d4c0:	4630      	mov	r0, r6
 801d4c2:	402c      	ands	r4, r5
 801d4c4:	f7f3 feba 	bl	801123c <ucdr_deserialize_uint8_t>
 801d4c8:	4020      	ands	r0, r4
 801d4ca:	b2c0      	uxtb	r0, r0
 801d4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d4d0 <uxr_serialize_ReadSpecification>:
 801d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4d2:	460e      	mov	r6, r1
 801d4d4:	4607      	mov	r7, r0
 801d4d6:	7809      	ldrb	r1, [r1, #0]
 801d4d8:	f7f3 fe9a 	bl	8011210 <ucdr_serialize_uint8_t>
 801d4dc:	4604      	mov	r4, r0
 801d4de:	7871      	ldrb	r1, [r6, #1]
 801d4e0:	4638      	mov	r0, r7
 801d4e2:	f7f3 fe95 	bl	8011210 <ucdr_serialize_uint8_t>
 801d4e6:	4004      	ands	r4, r0
 801d4e8:	78b1      	ldrb	r1, [r6, #2]
 801d4ea:	4638      	mov	r0, r7
 801d4ec:	f7f3 fe62 	bl	80111b4 <ucdr_serialize_bool>
 801d4f0:	78b3      	ldrb	r3, [r6, #2]
 801d4f2:	b2e4      	uxtb	r4, r4
 801d4f4:	4004      	ands	r4, r0
 801d4f6:	b943      	cbnz	r3, 801d50a <uxr_serialize_ReadSpecification+0x3a>
 801d4f8:	7a31      	ldrb	r1, [r6, #8]
 801d4fa:	4638      	mov	r0, r7
 801d4fc:	f7f3 fe5a 	bl	80111b4 <ucdr_serialize_bool>
 801d500:	7a33      	ldrb	r3, [r6, #8]
 801d502:	4004      	ands	r4, r0
 801d504:	b93b      	cbnz	r3, 801d516 <uxr_serialize_ReadSpecification+0x46>
 801d506:	4620      	mov	r0, r4
 801d508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d50a:	6871      	ldr	r1, [r6, #4]
 801d50c:	4638      	mov	r0, r7
 801d50e:	f001 f857 	bl	801e5c0 <ucdr_serialize_string>
 801d512:	4004      	ands	r4, r0
 801d514:	e7f0      	b.n	801d4f8 <uxr_serialize_ReadSpecification+0x28>
 801d516:	8971      	ldrh	r1, [r6, #10]
 801d518:	4638      	mov	r0, r7
 801d51a:	f7f3 fea5 	bl	8011268 <ucdr_serialize_uint16_t>
 801d51e:	4605      	mov	r5, r0
 801d520:	89b1      	ldrh	r1, [r6, #12]
 801d522:	4638      	mov	r0, r7
 801d524:	f7f3 fea0 	bl	8011268 <ucdr_serialize_uint16_t>
 801d528:	4005      	ands	r5, r0
 801d52a:	89f1      	ldrh	r1, [r6, #14]
 801d52c:	4638      	mov	r0, r7
 801d52e:	b2ed      	uxtb	r5, r5
 801d530:	f7f3 fe9a 	bl	8011268 <ucdr_serialize_uint16_t>
 801d534:	8a31      	ldrh	r1, [r6, #16]
 801d536:	4025      	ands	r5, r4
 801d538:	4604      	mov	r4, r0
 801d53a:	4638      	mov	r0, r7
 801d53c:	4025      	ands	r5, r4
 801d53e:	f7f3 fe93 	bl	8011268 <ucdr_serialize_uint16_t>
 801d542:	ea00 0405 	and.w	r4, r0, r5
 801d546:	4620      	mov	r0, r4
 801d548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d54a:	bf00      	nop

0801d54c <uxr_serialize_CREATE_CLIENT_Payload>:
 801d54c:	f7ff b9ea 	b.w	801c924 <uxr_serialize_CLIENT_Representation>

0801d550 <uxr_serialize_CREATE_Payload>:
 801d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d552:	2202      	movs	r2, #2
 801d554:	4607      	mov	r7, r0
 801d556:	460e      	mov	r6, r1
 801d558:	f7fc fd5e 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d55c:	2202      	movs	r2, #2
 801d55e:	4605      	mov	r5, r0
 801d560:	4638      	mov	r0, r7
 801d562:	18b1      	adds	r1, r6, r2
 801d564:	f7fc fd58 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d568:	7931      	ldrb	r1, [r6, #4]
 801d56a:	4604      	mov	r4, r0
 801d56c:	4638      	mov	r0, r7
 801d56e:	f7f3 fe4f 	bl	8011210 <ucdr_serialize_uint8_t>
 801d572:	b170      	cbz	r0, 801d592 <uxr_serialize_CREATE_Payload+0x42>
 801d574:	7933      	ldrb	r3, [r6, #4]
 801d576:	402c      	ands	r4, r5
 801d578:	3b01      	subs	r3, #1
 801d57a:	b2e4      	uxtb	r4, r4
 801d57c:	2b0d      	cmp	r3, #13
 801d57e:	d809      	bhi.n	801d594 <uxr_serialize_CREATE_Payload+0x44>
 801d580:	e8df f003 	tbb	[pc, r3]
 801d584:	23230a4c 	.word	0x23230a4c
 801d588:	0a0a0a0a 	.word	0x0a0a0a0a
 801d58c:	12121208 	.word	0x12121208
 801d590:	3e45      	.short	0x3e45
 801d592:	2400      	movs	r4, #0
 801d594:	4620      	mov	r0, r4
 801d596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d598:	f106 0108 	add.w	r1, r6, #8
 801d59c:	4638      	mov	r0, r7
 801d59e:	f7ff fac7 	bl	801cb30 <uxr_serialize_DATAWRITER_Representation>
 801d5a2:	4004      	ands	r4, r0
 801d5a4:	4620      	mov	r0, r4
 801d5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5a8:	7a31      	ldrb	r1, [r6, #8]
 801d5aa:	4638      	mov	r0, r7
 801d5ac:	f7f3 fe30 	bl	8011210 <ucdr_serialize_uint8_t>
 801d5b0:	2800      	cmp	r0, #0
 801d5b2:	d0ee      	beq.n	801d592 <uxr_serialize_CREATE_Payload+0x42>
 801d5b4:	7a33      	ldrb	r3, [r6, #8]
 801d5b6:	2b01      	cmp	r3, #1
 801d5b8:	d001      	beq.n	801d5be <uxr_serialize_CREATE_Payload+0x6e>
 801d5ba:	2b02      	cmp	r3, #2
 801d5bc:	d1ea      	bne.n	801d594 <uxr_serialize_CREATE_Payload+0x44>
 801d5be:	68f1      	ldr	r1, [r6, #12]
 801d5c0:	4638      	mov	r0, r7
 801d5c2:	f000 fffd 	bl	801e5c0 <ucdr_serialize_string>
 801d5c6:	4004      	ands	r4, r0
 801d5c8:	e7e4      	b.n	801d594 <uxr_serialize_CREATE_Payload+0x44>
 801d5ca:	7a31      	ldrb	r1, [r6, #8]
 801d5cc:	4638      	mov	r0, r7
 801d5ce:	f7f3 fe1f 	bl	8011210 <ucdr_serialize_uint8_t>
 801d5d2:	4605      	mov	r5, r0
 801d5d4:	b158      	cbz	r0, 801d5ee <uxr_serialize_CREATE_Payload+0x9e>
 801d5d6:	7a33      	ldrb	r3, [r6, #8]
 801d5d8:	2b02      	cmp	r3, #2
 801d5da:	d034      	beq.n	801d646 <uxr_serialize_CREATE_Payload+0xf6>
 801d5dc:	2b03      	cmp	r3, #3
 801d5de:	d106      	bne.n	801d5ee <uxr_serialize_CREATE_Payload+0x9e>
 801d5e0:	68f2      	ldr	r2, [r6, #12]
 801d5e2:	f106 0110 	add.w	r1, r6, #16
 801d5e6:	4638      	mov	r0, r7
 801d5e8:	f7f6 fee6 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801d5ec:	4605      	mov	r5, r0
 801d5ee:	2202      	movs	r2, #2
 801d5f0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801d5f4:	4638      	mov	r0, r7
 801d5f6:	f7fc fd0f 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d5fa:	4028      	ands	r0, r5
 801d5fc:	4004      	ands	r4, r0
 801d5fe:	e7c9      	b.n	801d594 <uxr_serialize_CREATE_Payload+0x44>
 801d600:	f106 0108 	add.w	r1, r6, #8
 801d604:	4638      	mov	r0, r7
 801d606:	f7ff f98d 	bl	801c924 <uxr_serialize_CLIENT_Representation>
 801d60a:	4004      	ands	r4, r0
 801d60c:	e7c2      	b.n	801d594 <uxr_serialize_CREATE_Payload+0x44>
 801d60e:	f106 0108 	add.w	r1, r6, #8
 801d612:	4638      	mov	r0, r7
 801d614:	f7ff fa42 	bl	801ca9c <uxr_serialize_AGENT_Representation>
 801d618:	4004      	ands	r4, r0
 801d61a:	e7bb      	b.n	801d594 <uxr_serialize_CREATE_Payload+0x44>
 801d61c:	7a31      	ldrb	r1, [r6, #8]
 801d61e:	4638      	mov	r0, r7
 801d620:	f7f3 fdf6 	bl	8011210 <ucdr_serialize_uint8_t>
 801d624:	4605      	mov	r5, r0
 801d626:	b130      	cbz	r0, 801d636 <uxr_serialize_CREATE_Payload+0xe6>
 801d628:	7a33      	ldrb	r3, [r6, #8]
 801d62a:	2b02      	cmp	r3, #2
 801d62c:	d011      	beq.n	801d652 <uxr_serialize_CREATE_Payload+0x102>
 801d62e:	2b03      	cmp	r3, #3
 801d630:	d015      	beq.n	801d65e <uxr_serialize_CREATE_Payload+0x10e>
 801d632:	2b01      	cmp	r3, #1
 801d634:	d00d      	beq.n	801d652 <uxr_serialize_CREATE_Payload+0x102>
 801d636:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801d63a:	4638      	mov	r0, r7
 801d63c:	f7f4 fb24 	bl	8011c88 <ucdr_serialize_int16_t>
 801d640:	4028      	ands	r0, r5
 801d642:	4004      	ands	r4, r0
 801d644:	e7a6      	b.n	801d594 <uxr_serialize_CREATE_Payload+0x44>
 801d646:	68f1      	ldr	r1, [r6, #12]
 801d648:	4638      	mov	r0, r7
 801d64a:	f000 ffb9 	bl	801e5c0 <ucdr_serialize_string>
 801d64e:	4605      	mov	r5, r0
 801d650:	e7cd      	b.n	801d5ee <uxr_serialize_CREATE_Payload+0x9e>
 801d652:	68f1      	ldr	r1, [r6, #12]
 801d654:	4638      	mov	r0, r7
 801d656:	f000 ffb3 	bl	801e5c0 <ucdr_serialize_string>
 801d65a:	4605      	mov	r5, r0
 801d65c:	e7eb      	b.n	801d636 <uxr_serialize_CREATE_Payload+0xe6>
 801d65e:	68f2      	ldr	r2, [r6, #12]
 801d660:	f106 0110 	add.w	r1, r6, #16
 801d664:	4638      	mov	r0, r7
 801d666:	f7f6 fea7 	bl	80143b8 <ucdr_serialize_sequence_uint8_t>
 801d66a:	4605      	mov	r5, r0
 801d66c:	e7e3      	b.n	801d636 <uxr_serialize_CREATE_Payload+0xe6>
 801d66e:	bf00      	nop

0801d670 <uxr_deserialize_GET_INFO_Payload>:
 801d670:	b570      	push	{r4, r5, r6, lr}
 801d672:	2202      	movs	r2, #2
 801d674:	4605      	mov	r5, r0
 801d676:	460e      	mov	r6, r1
 801d678:	f7fc fd32 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d67c:	2202      	movs	r2, #2
 801d67e:	4604      	mov	r4, r0
 801d680:	4628      	mov	r0, r5
 801d682:	18b1      	adds	r1, r6, r2
 801d684:	f7fc fd2c 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d688:	4603      	mov	r3, r0
 801d68a:	1d31      	adds	r1, r6, #4
 801d68c:	4628      	mov	r0, r5
 801d68e:	401c      	ands	r4, r3
 801d690:	f7f4 f904 	bl	801189c <ucdr_deserialize_uint32_t>
 801d694:	b2e4      	uxtb	r4, r4
 801d696:	4020      	ands	r0, r4
 801d698:	bd70      	pop	{r4, r5, r6, pc}
 801d69a:	bf00      	nop

0801d69c <uxr_serialize_DELETE_Payload>:
 801d69c:	b570      	push	{r4, r5, r6, lr}
 801d69e:	2202      	movs	r2, #2
 801d6a0:	4605      	mov	r5, r0
 801d6a2:	460e      	mov	r6, r1
 801d6a4:	f7fc fcb8 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d6a8:	2202      	movs	r2, #2
 801d6aa:	4604      	mov	r4, r0
 801d6ac:	4628      	mov	r0, r5
 801d6ae:	18b1      	adds	r1, r6, r2
 801d6b0:	f7fc fcb2 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d6b4:	4020      	ands	r0, r4
 801d6b6:	b2c0      	uxtb	r0, r0
 801d6b8:	bd70      	pop	{r4, r5, r6, pc}
 801d6ba:	bf00      	nop

0801d6bc <uxr_deserialize_STATUS_AGENT_Payload>:
 801d6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d6c0:	460e      	mov	r6, r1
 801d6c2:	4605      	mov	r5, r0
 801d6c4:	f7f3 fdba 	bl	801123c <ucdr_deserialize_uint8_t>
 801d6c8:	4604      	mov	r4, r0
 801d6ca:	1c71      	adds	r1, r6, #1
 801d6cc:	4628      	mov	r0, r5
 801d6ce:	f7f3 fdb5 	bl	801123c <ucdr_deserialize_uint8_t>
 801d6d2:	2204      	movs	r2, #4
 801d6d4:	4681      	mov	r9, r0
 801d6d6:	4628      	mov	r0, r5
 801d6d8:	18b1      	adds	r1, r6, r2
 801d6da:	f7fc fd01 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d6de:	f106 0108 	add.w	r1, r6, #8
 801d6e2:	4680      	mov	r8, r0
 801d6e4:	2202      	movs	r2, #2
 801d6e6:	4628      	mov	r0, r5
 801d6e8:	f7fc fcfa 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d6ec:	ea04 0309 	and.w	r3, r4, r9
 801d6f0:	4607      	mov	r7, r0
 801d6f2:	2202      	movs	r2, #2
 801d6f4:	b2db      	uxtb	r3, r3
 801d6f6:	f106 010a 	add.w	r1, r6, #10
 801d6fa:	4628      	mov	r0, r5
 801d6fc:	ea03 0408 	and.w	r4, r3, r8
 801d700:	f7fc fcee 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d704:	4603      	mov	r3, r0
 801d706:	4628      	mov	r0, r5
 801d708:	403c      	ands	r4, r7
 801d70a:	f106 010c 	add.w	r1, r6, #12
 801d70e:	461d      	mov	r5, r3
 801d710:	f7f3 fd66 	bl	80111e0 <ucdr_deserialize_bool>
 801d714:	4025      	ands	r5, r4
 801d716:	4028      	ands	r0, r5
 801d718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801d71c <uxr_deserialize_STATUS_Payload>:
 801d71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d720:	2202      	movs	r2, #2
 801d722:	4606      	mov	r6, r0
 801d724:	460f      	mov	r7, r1
 801d726:	f7fc fcdb 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d72a:	2202      	movs	r2, #2
 801d72c:	4605      	mov	r5, r0
 801d72e:	4630      	mov	r0, r6
 801d730:	18b9      	adds	r1, r7, r2
 801d732:	f7fc fcd5 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d736:	4680      	mov	r8, r0
 801d738:	1d39      	adds	r1, r7, #4
 801d73a:	4630      	mov	r0, r6
 801d73c:	f7f3 fd7e 	bl	801123c <ucdr_deserialize_uint8_t>
 801d740:	ea05 0508 	and.w	r5, r5, r8
 801d744:	4604      	mov	r4, r0
 801d746:	1d79      	adds	r1, r7, #5
 801d748:	4630      	mov	r0, r6
 801d74a:	402c      	ands	r4, r5
 801d74c:	f7f3 fd76 	bl	801123c <ucdr_deserialize_uint8_t>
 801d750:	4020      	ands	r0, r4
 801d752:	b2c0      	uxtb	r0, r0
 801d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d758 <uxr_serialize_INFO_Payload>:
 801d758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d75c:	2202      	movs	r2, #2
 801d75e:	460c      	mov	r4, r1
 801d760:	4605      	mov	r5, r0
 801d762:	f7fc fc59 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d766:	2202      	movs	r2, #2
 801d768:	4680      	mov	r8, r0
 801d76a:	4628      	mov	r0, r5
 801d76c:	18a1      	adds	r1, r4, r2
 801d76e:	f7fc fc53 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d772:	4607      	mov	r7, r0
 801d774:	7921      	ldrb	r1, [r4, #4]
 801d776:	4628      	mov	r0, r5
 801d778:	f7f3 fd4a 	bl	8011210 <ucdr_serialize_uint8_t>
 801d77c:	ea08 0807 	and.w	r8, r8, r7
 801d780:	4606      	mov	r6, r0
 801d782:	7961      	ldrb	r1, [r4, #5]
 801d784:	4628      	mov	r0, r5
 801d786:	ea06 0608 	and.w	r6, r6, r8
 801d78a:	f7f3 fd41 	bl	8011210 <ucdr_serialize_uint8_t>
 801d78e:	7a21      	ldrb	r1, [r4, #8]
 801d790:	4030      	ands	r0, r6
 801d792:	b2c7      	uxtb	r7, r0
 801d794:	4628      	mov	r0, r5
 801d796:	f7f3 fd0d 	bl	80111b4 <ucdr_serialize_bool>
 801d79a:	7a23      	ldrb	r3, [r4, #8]
 801d79c:	4606      	mov	r6, r0
 801d79e:	b96b      	cbnz	r3, 801d7bc <uxr_serialize_INFO_Payload+0x64>
 801d7a0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	f7f3 fd05 	bl	80111b4 <ucdr_serialize_bool>
 801d7aa:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801d7ae:	4030      	ands	r0, r6
 801d7b0:	b2c6      	uxtb	r6, r0
 801d7b2:	b983      	cbnz	r3, 801d7d6 <uxr_serialize_INFO_Payload+0x7e>
 801d7b4:	ea06 0007 	and.w	r0, r6, r7
 801d7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7bc:	7b21      	ldrb	r1, [r4, #12]
 801d7be:	4628      	mov	r0, r5
 801d7c0:	f7f3 fd26 	bl	8011210 <ucdr_serialize_uint8_t>
 801d7c4:	b188      	cbz	r0, 801d7ea <uxr_serialize_INFO_Payload+0x92>
 801d7c6:	f104 010c 	add.w	r1, r4, #12
 801d7ca:	4628      	mov	r0, r5
 801d7cc:	f7ff f9d8 	bl	801cb80 <uxr_serialize_ObjectVariant.part.0>
 801d7d0:	4030      	ands	r0, r6
 801d7d2:	b2c6      	uxtb	r6, r0
 801d7d4:	e7e4      	b.n	801d7a0 <uxr_serialize_INFO_Payload+0x48>
 801d7d6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801d7da:	4628      	mov	r0, r5
 801d7dc:	f7ff fdb8 	bl	801d350 <uxr_serialize_ActivityInfoVariant>
 801d7e0:	4006      	ands	r6, r0
 801d7e2:	ea06 0007 	and.w	r0, r6, r7
 801d7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7ea:	4606      	mov	r6, r0
 801d7ec:	e7d8      	b.n	801d7a0 <uxr_serialize_INFO_Payload+0x48>
 801d7ee:	bf00      	nop

0801d7f0 <uxr_serialize_READ_DATA_Payload>:
 801d7f0:	b570      	push	{r4, r5, r6, lr}
 801d7f2:	2202      	movs	r2, #2
 801d7f4:	4605      	mov	r5, r0
 801d7f6:	460e      	mov	r6, r1
 801d7f8:	f7fc fc0e 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d7fc:	2202      	movs	r2, #2
 801d7fe:	4604      	mov	r4, r0
 801d800:	4628      	mov	r0, r5
 801d802:	18b1      	adds	r1, r6, r2
 801d804:	f7fc fc08 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d808:	4603      	mov	r3, r0
 801d80a:	1d31      	adds	r1, r6, #4
 801d80c:	4628      	mov	r0, r5
 801d80e:	401c      	ands	r4, r3
 801d810:	f7ff fe5e 	bl	801d4d0 <uxr_serialize_ReadSpecification>
 801d814:	b2e4      	uxtb	r4, r4
 801d816:	4020      	ands	r0, r4
 801d818:	bd70      	pop	{r4, r5, r6, pc}
 801d81a:	bf00      	nop

0801d81c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801d81c:	b570      	push	{r4, r5, r6, lr}
 801d81e:	2202      	movs	r2, #2
 801d820:	4605      	mov	r5, r0
 801d822:	460e      	mov	r6, r1
 801d824:	f7fc fbf8 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d828:	2202      	movs	r2, #2
 801d82a:	4604      	mov	r4, r0
 801d82c:	4628      	mov	r0, r5
 801d82e:	18b1      	adds	r1, r6, r2
 801d830:	f7fc fbf2 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d834:	4020      	ands	r0, r4
 801d836:	b2c0      	uxtb	r0, r0
 801d838:	bd70      	pop	{r4, r5, r6, pc}
 801d83a:	bf00      	nop

0801d83c <uxr_serialize_ACKNACK_Payload>:
 801d83c:	b570      	push	{r4, r5, r6, lr}
 801d83e:	460c      	mov	r4, r1
 801d840:	4605      	mov	r5, r0
 801d842:	460e      	mov	r6, r1
 801d844:	f834 1b02 	ldrh.w	r1, [r4], #2
 801d848:	f7f3 fd0e 	bl	8011268 <ucdr_serialize_uint16_t>
 801d84c:	2202      	movs	r2, #2
 801d84e:	4621      	mov	r1, r4
 801d850:	4604      	mov	r4, r0
 801d852:	4628      	mov	r0, r5
 801d854:	f7fc fbe0 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d858:	4603      	mov	r3, r0
 801d85a:	7931      	ldrb	r1, [r6, #4]
 801d85c:	4628      	mov	r0, r5
 801d85e:	401c      	ands	r4, r3
 801d860:	f7f3 fcd6 	bl	8011210 <ucdr_serialize_uint8_t>
 801d864:	b2e4      	uxtb	r4, r4
 801d866:	4020      	ands	r0, r4
 801d868:	bd70      	pop	{r4, r5, r6, pc}
 801d86a:	bf00      	nop

0801d86c <uxr_deserialize_ACKNACK_Payload>:
 801d86c:	b570      	push	{r4, r5, r6, lr}
 801d86e:	460e      	mov	r6, r1
 801d870:	4605      	mov	r5, r0
 801d872:	f7f3 fdf9 	bl	8011468 <ucdr_deserialize_uint16_t>
 801d876:	2202      	movs	r2, #2
 801d878:	4604      	mov	r4, r0
 801d87a:	4628      	mov	r0, r5
 801d87c:	18b1      	adds	r1, r6, r2
 801d87e:	f7fc fc2f 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d882:	4603      	mov	r3, r0
 801d884:	1d31      	adds	r1, r6, #4
 801d886:	4628      	mov	r0, r5
 801d888:	401c      	ands	r4, r3
 801d88a:	f7f3 fcd7 	bl	801123c <ucdr_deserialize_uint8_t>
 801d88e:	b2e4      	uxtb	r4, r4
 801d890:	4020      	ands	r0, r4
 801d892:	bd70      	pop	{r4, r5, r6, pc}

0801d894 <uxr_serialize_HEARTBEAT_Payload>:
 801d894:	b570      	push	{r4, r5, r6, lr}
 801d896:	460d      	mov	r5, r1
 801d898:	4606      	mov	r6, r0
 801d89a:	8809      	ldrh	r1, [r1, #0]
 801d89c:	f7f3 fce4 	bl	8011268 <ucdr_serialize_uint16_t>
 801d8a0:	8869      	ldrh	r1, [r5, #2]
 801d8a2:	4604      	mov	r4, r0
 801d8a4:	4630      	mov	r0, r6
 801d8a6:	f7f3 fcdf 	bl	8011268 <ucdr_serialize_uint16_t>
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	7929      	ldrb	r1, [r5, #4]
 801d8ae:	4630      	mov	r0, r6
 801d8b0:	401c      	ands	r4, r3
 801d8b2:	f7f3 fcad 	bl	8011210 <ucdr_serialize_uint8_t>
 801d8b6:	b2e4      	uxtb	r4, r4
 801d8b8:	4020      	ands	r0, r4
 801d8ba:	bd70      	pop	{r4, r5, r6, pc}

0801d8bc <uxr_deserialize_HEARTBEAT_Payload>:
 801d8bc:	b570      	push	{r4, r5, r6, lr}
 801d8be:	460e      	mov	r6, r1
 801d8c0:	4605      	mov	r5, r0
 801d8c2:	f7f3 fdd1 	bl	8011468 <ucdr_deserialize_uint16_t>
 801d8c6:	4604      	mov	r4, r0
 801d8c8:	1cb1      	adds	r1, r6, #2
 801d8ca:	4628      	mov	r0, r5
 801d8cc:	f7f3 fdcc 	bl	8011468 <ucdr_deserialize_uint16_t>
 801d8d0:	4603      	mov	r3, r0
 801d8d2:	1d31      	adds	r1, r6, #4
 801d8d4:	4628      	mov	r0, r5
 801d8d6:	401c      	ands	r4, r3
 801d8d8:	f7f3 fcb0 	bl	801123c <ucdr_deserialize_uint8_t>
 801d8dc:	b2e4      	uxtb	r4, r4
 801d8de:	4020      	ands	r0, r4
 801d8e0:	bd70      	pop	{r4, r5, r6, pc}
 801d8e2:	bf00      	nop

0801d8e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8e8:	460e      	mov	r6, r1
 801d8ea:	4605      	mov	r5, r0
 801d8ec:	f7f4 fb58 	bl	8011fa0 <ucdr_deserialize_int32_t>
 801d8f0:	4607      	mov	r7, r0
 801d8f2:	1d31      	adds	r1, r6, #4
 801d8f4:	4628      	mov	r0, r5
 801d8f6:	f7f3 ffd1 	bl	801189c <ucdr_deserialize_uint32_t>
 801d8fa:	4680      	mov	r8, r0
 801d8fc:	f106 0108 	add.w	r1, r6, #8
 801d900:	4628      	mov	r0, r5
 801d902:	f7f4 fb4d 	bl	8011fa0 <ucdr_deserialize_int32_t>
 801d906:	ea07 0708 	and.w	r7, r7, r8
 801d90a:	4604      	mov	r4, r0
 801d90c:	f106 010c 	add.w	r1, r6, #12
 801d910:	4628      	mov	r0, r5
 801d912:	403c      	ands	r4, r7
 801d914:	f7f3 ffc2 	bl	801189c <ucdr_deserialize_uint32_t>
 801d918:	f106 0110 	add.w	r1, r6, #16
 801d91c:	4004      	ands	r4, r0
 801d91e:	4628      	mov	r0, r5
 801d920:	f7f4 fb3e 	bl	8011fa0 <ucdr_deserialize_int32_t>
 801d924:	4603      	mov	r3, r0
 801d926:	b2e4      	uxtb	r4, r4
 801d928:	4628      	mov	r0, r5
 801d92a:	461d      	mov	r5, r3
 801d92c:	f106 0114 	add.w	r1, r6, #20
 801d930:	f7f3 ffb4 	bl	801189c <ucdr_deserialize_uint32_t>
 801d934:	402c      	ands	r4, r5
 801d936:	4020      	ands	r0, r4
 801d938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d93c <uxr_serialize_SampleIdentity>:
 801d93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d940:	4604      	mov	r4, r0
 801d942:	460d      	mov	r5, r1
 801d944:	220c      	movs	r2, #12
 801d946:	f7fc fb67 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d94a:	2203      	movs	r2, #3
 801d94c:	f105 010c 	add.w	r1, r5, #12
 801d950:	4607      	mov	r7, r0
 801d952:	4620      	mov	r0, r4
 801d954:	f7fc fb60 	bl	801a018 <ucdr_serialize_array_uint8_t>
 801d958:	7be9      	ldrb	r1, [r5, #15]
 801d95a:	4680      	mov	r8, r0
 801d95c:	4620      	mov	r0, r4
 801d95e:	f7f3 fc57 	bl	8011210 <ucdr_serialize_uint8_t>
 801d962:	6929      	ldr	r1, [r5, #16]
 801d964:	4606      	mov	r6, r0
 801d966:	4620      	mov	r0, r4
 801d968:	f7f4 fa82 	bl	8011e70 <ucdr_serialize_int32_t>
 801d96c:	ea07 0708 	and.w	r7, r7, r8
 801d970:	4603      	mov	r3, r0
 801d972:	4620      	mov	r0, r4
 801d974:	403e      	ands	r6, r7
 801d976:	6969      	ldr	r1, [r5, #20]
 801d978:	461c      	mov	r4, r3
 801d97a:	f7f3 fe5f 	bl	801163c <ucdr_serialize_uint32_t>
 801d97e:	4034      	ands	r4, r6
 801d980:	4020      	ands	r0, r4
 801d982:	b2c0      	uxtb	r0, r0
 801d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d988 <uxr_deserialize_SampleIdentity>:
 801d988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d98c:	4604      	mov	r4, r0
 801d98e:	460d      	mov	r5, r1
 801d990:	220c      	movs	r2, #12
 801d992:	f7fc fba5 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d996:	2203      	movs	r2, #3
 801d998:	f105 010c 	add.w	r1, r5, #12
 801d99c:	4607      	mov	r7, r0
 801d99e:	4620      	mov	r0, r4
 801d9a0:	f7fc fb9e 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801d9a4:	f105 010f 	add.w	r1, r5, #15
 801d9a8:	4680      	mov	r8, r0
 801d9aa:	4620      	mov	r0, r4
 801d9ac:	f7f3 fc46 	bl	801123c <ucdr_deserialize_uint8_t>
 801d9b0:	f105 0110 	add.w	r1, r5, #16
 801d9b4:	4606      	mov	r6, r0
 801d9b6:	4620      	mov	r0, r4
 801d9b8:	f7f4 faf2 	bl	8011fa0 <ucdr_deserialize_int32_t>
 801d9bc:	ea07 0708 	and.w	r7, r7, r8
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	4620      	mov	r0, r4
 801d9c4:	403e      	ands	r6, r7
 801d9c6:	f105 0114 	add.w	r1, r5, #20
 801d9ca:	461c      	mov	r4, r3
 801d9cc:	f7f3 ff66 	bl	801189c <ucdr_deserialize_uint32_t>
 801d9d0:	4034      	ands	r4, r6
 801d9d2:	4020      	ands	r0, r4
 801d9d4:	b2c0      	uxtb	r0, r0
 801d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9da:	bf00      	nop

0801d9dc <rcl_convert_rmw_ret_to_rcl_ret>:
 801d9dc:	280b      	cmp	r0, #11
 801d9de:	dc0d      	bgt.n	801d9fc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801d9e0:	2800      	cmp	r0, #0
 801d9e2:	db09      	blt.n	801d9f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801d9e4:	280b      	cmp	r0, #11
 801d9e6:	d807      	bhi.n	801d9f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801d9e8:	e8df f000 	tbb	[pc, r0]
 801d9ec:	07060607 	.word	0x07060607
 801d9f0:	06060606 	.word	0x06060606
 801d9f4:	07070606 	.word	0x07070606
 801d9f8:	2001      	movs	r0, #1
 801d9fa:	4770      	bx	lr
 801d9fc:	28cb      	cmp	r0, #203	@ 0xcb
 801d9fe:	bf18      	it	ne
 801da00:	2001      	movne	r0, #1
 801da02:	4770      	bx	lr

0801da04 <rcl_get_default_domain_id>:
 801da04:	b530      	push	{r4, r5, lr}
 801da06:	2300      	movs	r3, #0
 801da08:	b083      	sub	sp, #12
 801da0a:	9300      	str	r3, [sp, #0]
 801da0c:	b1d0      	cbz	r0, 801da44 <rcl_get_default_domain_id+0x40>
 801da0e:	4604      	mov	r4, r0
 801da10:	4669      	mov	r1, sp
 801da12:	4815      	ldr	r0, [pc, #84]	@ (801da68 <rcl_get_default_domain_id+0x64>)
 801da14:	f7f9 fd2c 	bl	8017470 <rcutils_get_env>
 801da18:	4602      	mov	r2, r0
 801da1a:	b110      	cbz	r0, 801da22 <rcl_get_default_domain_id+0x1e>
 801da1c:	2001      	movs	r0, #1
 801da1e:	b003      	add	sp, #12
 801da20:	bd30      	pop	{r4, r5, pc}
 801da22:	9b00      	ldr	r3, [sp, #0]
 801da24:	b18b      	cbz	r3, 801da4a <rcl_get_default_domain_id+0x46>
 801da26:	7818      	ldrb	r0, [r3, #0]
 801da28:	2800      	cmp	r0, #0
 801da2a:	d0f8      	beq.n	801da1e <rcl_get_default_domain_id+0x1a>
 801da2c:	a901      	add	r1, sp, #4
 801da2e:	4618      	mov	r0, r3
 801da30:	9201      	str	r2, [sp, #4]
 801da32:	f001 fd6b 	bl	801f50c <strtoul>
 801da36:	4605      	mov	r5, r0
 801da38:	b150      	cbz	r0, 801da50 <rcl_get_default_domain_id+0x4c>
 801da3a:	1c43      	adds	r3, r0, #1
 801da3c:	d00d      	beq.n	801da5a <rcl_get_default_domain_id+0x56>
 801da3e:	2000      	movs	r0, #0
 801da40:	6025      	str	r5, [r4, #0]
 801da42:	e7ec      	b.n	801da1e <rcl_get_default_domain_id+0x1a>
 801da44:	200b      	movs	r0, #11
 801da46:	b003      	add	sp, #12
 801da48:	bd30      	pop	{r4, r5, pc}
 801da4a:	4618      	mov	r0, r3
 801da4c:	b003      	add	sp, #12
 801da4e:	bd30      	pop	{r4, r5, pc}
 801da50:	9b01      	ldr	r3, [sp, #4]
 801da52:	781b      	ldrb	r3, [r3, #0]
 801da54:	2b00      	cmp	r3, #0
 801da56:	d0f2      	beq.n	801da3e <rcl_get_default_domain_id+0x3a>
 801da58:	e7e0      	b.n	801da1c <rcl_get_default_domain_id+0x18>
 801da5a:	f002 f8d5 	bl	801fc08 <__errno>
 801da5e:	6803      	ldr	r3, [r0, #0]
 801da60:	2b22      	cmp	r3, #34	@ 0x22
 801da62:	d1ec      	bne.n	801da3e <rcl_get_default_domain_id+0x3a>
 801da64:	e7da      	b.n	801da1c <rcl_get_default_domain_id+0x18>
 801da66:	bf00      	nop
 801da68:	08022eec 	.word	0x08022eec

0801da6c <rcl_expand_topic_name>:
 801da6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da70:	b08d      	sub	sp, #52	@ 0x34
 801da72:	4698      	mov	r8, r3
 801da74:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801da76:	9207      	str	r2, [sp, #28]
 801da78:	2b00      	cmp	r3, #0
 801da7a:	bf18      	it	ne
 801da7c:	f1b8 0f00 	cmpne.w	r8, #0
 801da80:	bf0c      	ite	eq
 801da82:	2301      	moveq	r3, #1
 801da84:	2300      	movne	r3, #0
 801da86:	2a00      	cmp	r2, #0
 801da88:	bf08      	it	eq
 801da8a:	f043 0301 	orreq.w	r3, r3, #1
 801da8e:	2900      	cmp	r1, #0
 801da90:	bf08      	it	eq
 801da92:	f043 0301 	orreq.w	r3, r3, #1
 801da96:	2b00      	cmp	r3, #0
 801da98:	d13d      	bne.n	801db16 <rcl_expand_topic_name+0xaa>
 801da9a:	fab0 f280 	clz	r2, r0
 801da9e:	4604      	mov	r4, r0
 801daa0:	0952      	lsrs	r2, r2, #5
 801daa2:	2800      	cmp	r0, #0
 801daa4:	d037      	beq.n	801db16 <rcl_expand_topic_name+0xaa>
 801daa6:	460f      	mov	r7, r1
 801daa8:	a90b      	add	r1, sp, #44	@ 0x2c
 801daaa:	f000 f9f3 	bl	801de94 <rcl_validate_topic_name>
 801daae:	4605      	mov	r5, r0
 801dab0:	bb68      	cbnz	r0, 801db0e <rcl_expand_topic_name+0xa2>
 801dab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d137      	bne.n	801db28 <rcl_expand_topic_name+0xbc>
 801dab8:	4602      	mov	r2, r0
 801daba:	a90b      	add	r1, sp, #44	@ 0x2c
 801dabc:	4638      	mov	r0, r7
 801dabe:	f7fa f8e9 	bl	8017c94 <rmw_validate_node_name>
 801dac2:	bb68      	cbnz	r0, 801db20 <rcl_expand_topic_name+0xb4>
 801dac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d133      	bne.n	801db32 <rcl_expand_topic_name+0xc6>
 801daca:	462a      	mov	r2, r5
 801dacc:	a90b      	add	r1, sp, #44	@ 0x2c
 801dace:	9807      	ldr	r0, [sp, #28]
 801dad0:	f7fa f8c2 	bl	8017c58 <rmw_validate_namespace>
 801dad4:	bb20      	cbnz	r0, 801db20 <rcl_expand_topic_name+0xb4>
 801dad6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801dad8:	2d00      	cmp	r5, #0
 801dada:	f040 80a2 	bne.w	801dc22 <rcl_expand_topic_name+0x1b6>
 801dade:	217b      	movs	r1, #123	@ 0x7b
 801dae0:	4620      	mov	r0, r4
 801dae2:	f001 ffaf 	bl	801fa44 <strchr>
 801dae6:	7823      	ldrb	r3, [r4, #0]
 801dae8:	4681      	mov	r9, r0
 801daea:	bb20      	cbnz	r0, 801db36 <rcl_expand_topic_name+0xca>
 801daec:	2b2f      	cmp	r3, #47	@ 0x2f
 801daee:	d122      	bne.n	801db36 <rcl_expand_topic_name+0xca>
 801daf0:	ab19      	add	r3, sp, #100	@ 0x64
 801daf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801daf6:	ab16      	add	r3, sp, #88	@ 0x58
 801daf8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801dafc:	4620      	mov	r0, r4
 801dafe:	cb0e      	ldmia	r3, {r1, r2, r3}
 801db00:	f7f9 fe18 	bl	8017734 <rcutils_strdup>
 801db04:	2800      	cmp	r0, #0
 801db06:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801db08:	bf08      	it	eq
 801db0a:	250a      	moveq	r5, #10
 801db0c:	6018      	str	r0, [r3, #0]
 801db0e:	4628      	mov	r0, r5
 801db10:	b00d      	add	sp, #52	@ 0x34
 801db12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db16:	250b      	movs	r5, #11
 801db18:	4628      	mov	r0, r5
 801db1a:	b00d      	add	sp, #52	@ 0x34
 801db1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db20:	f7ff ff5c 	bl	801d9dc <rcl_convert_rmw_ret_to_rcl_ret>
 801db24:	4605      	mov	r5, r0
 801db26:	e7f2      	b.n	801db0e <rcl_expand_topic_name+0xa2>
 801db28:	2567      	movs	r5, #103	@ 0x67
 801db2a:	4628      	mov	r0, r5
 801db2c:	b00d      	add	sp, #52	@ 0x34
 801db2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db32:	25c9      	movs	r5, #201	@ 0xc9
 801db34:	e7eb      	b.n	801db0e <rcl_expand_topic_name+0xa2>
 801db36:	2b7e      	cmp	r3, #126	@ 0x7e
 801db38:	d075      	beq.n	801dc26 <rcl_expand_topic_name+0x1ba>
 801db3a:	f1b9 0f00 	cmp.w	r9, #0
 801db3e:	f000 80c2 	beq.w	801dcc6 <rcl_expand_topic_name+0x25a>
 801db42:	2300      	movs	r3, #0
 801db44:	46a2      	mov	sl, r4
 801db46:	461e      	mov	r6, r3
 801db48:	9508      	str	r5, [sp, #32]
 801db4a:	4655      	mov	r5, sl
 801db4c:	9409      	str	r4, [sp, #36]	@ 0x24
 801db4e:	46b2      	mov	sl, r6
 801db50:	464c      	mov	r4, r9
 801db52:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801db56:	2c00      	cmp	r4, #0
 801db58:	f000 80ae 	beq.w	801dcb8 <rcl_expand_topic_name+0x24c>
 801db5c:	217d      	movs	r1, #125	@ 0x7d
 801db5e:	4628      	mov	r0, r5
 801db60:	f001 ff70 	bl	801fa44 <strchr>
 801db64:	eba0 0904 	sub.w	r9, r0, r4
 801db68:	4621      	mov	r1, r4
 801db6a:	4869      	ldr	r0, [pc, #420]	@ (801dd10 <rcl_expand_topic_name+0x2a4>)
 801db6c:	f109 0601 	add.w	r6, r9, #1
 801db70:	4632      	mov	r2, r6
 801db72:	f001 ff74 	bl	801fa5e <strncmp>
 801db76:	2800      	cmp	r0, #0
 801db78:	d051      	beq.n	801dc1e <rcl_expand_topic_name+0x1b2>
 801db7a:	4632      	mov	r2, r6
 801db7c:	4621      	mov	r1, r4
 801db7e:	4865      	ldr	r0, [pc, #404]	@ (801dd14 <rcl_expand_topic_name+0x2a8>)
 801db80:	f001 ff6d 	bl	801fa5e <strncmp>
 801db84:	b128      	cbz	r0, 801db92 <rcl_expand_topic_name+0x126>
 801db86:	4632      	mov	r2, r6
 801db88:	4621      	mov	r1, r4
 801db8a:	4863      	ldr	r0, [pc, #396]	@ (801dd18 <rcl_expand_topic_name+0x2ac>)
 801db8c:	f001 ff67 	bl	801fa5e <strncmp>
 801db90:	bb38      	cbnz	r0, 801dbe2 <rcl_expand_topic_name+0x176>
 801db92:	46d9      	mov	r9, fp
 801db94:	ab18      	add	r3, sp, #96	@ 0x60
 801db96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801db9a:	ab16      	add	r3, sp, #88	@ 0x58
 801db9c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801dba0:	4620      	mov	r0, r4
 801dba2:	4631      	mov	r1, r6
 801dba4:	cb0c      	ldmia	r3, {r2, r3}
 801dba6:	f7f9 fde7 	bl	8017778 <rcutils_strndup>
 801dbaa:	4604      	mov	r4, r0
 801dbac:	2800      	cmp	r0, #0
 801dbae:	f000 80a3 	beq.w	801dcf8 <rcl_expand_topic_name+0x28c>
 801dbb2:	464a      	mov	r2, r9
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	ab16      	add	r3, sp, #88	@ 0x58
 801dbb8:	4621      	mov	r1, r4
 801dbba:	f7f9 fcbb 	bl	8017534 <rcutils_repl_str>
 801dbbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dbc0:	4605      	mov	r5, r0
 801dbc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	4798      	blx	r3
 801dbc8:	4650      	mov	r0, sl
 801dbca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dbcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dbce:	4798      	blx	r3
 801dbd0:	2d00      	cmp	r5, #0
 801dbd2:	d06c      	beq.n	801dcae <rcl_expand_topic_name+0x242>
 801dbd4:	217b      	movs	r1, #123	@ 0x7b
 801dbd6:	4628      	mov	r0, r5
 801dbd8:	f001 ff34 	bl	801fa44 <strchr>
 801dbdc:	46aa      	mov	sl, r5
 801dbde:	4604      	mov	r4, r0
 801dbe0:	e7b9      	b.n	801db56 <rcl_expand_topic_name+0xea>
 801dbe2:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801dbe6:	1c61      	adds	r1, r4, #1
 801dbe8:	4640      	mov	r0, r8
 801dbea:	f7f9 fedd 	bl	80179a8 <rcutils_string_map_getn>
 801dbee:	4681      	mov	r9, r0
 801dbf0:	2800      	cmp	r0, #0
 801dbf2:	d1cf      	bne.n	801db94 <rcl_expand_topic_name+0x128>
 801dbf4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dbf6:	aa18      	add	r2, sp, #96	@ 0x60
 801dbf8:	2569      	movs	r5, #105	@ 0x69
 801dbfa:	6018      	str	r0, [r3, #0]
 801dbfc:	ab16      	add	r3, sp, #88	@ 0x58
 801dbfe:	ca07      	ldmia	r2, {r0, r1, r2}
 801dc00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801dc04:	4631      	mov	r1, r6
 801dc06:	4620      	mov	r0, r4
 801dc08:	cb0c      	ldmia	r3, {r2, r3}
 801dc0a:	f7f9 fdb5 	bl	8017778 <rcutils_strndup>
 801dc0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dc10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dc12:	4798      	blx	r3
 801dc14:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dc16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dc18:	4650      	mov	r0, sl
 801dc1a:	4798      	blx	r3
 801dc1c:	e777      	b.n	801db0e <rcl_expand_topic_name+0xa2>
 801dc1e:	46b9      	mov	r9, r7
 801dc20:	e7b8      	b.n	801db94 <rcl_expand_topic_name+0x128>
 801dc22:	25ca      	movs	r5, #202	@ 0xca
 801dc24:	e773      	b.n	801db0e <rcl_expand_topic_name+0xa2>
 801dc26:	9e07      	ldr	r6, [sp, #28]
 801dc28:	4630      	mov	r0, r6
 801dc2a:	f7e2 fb63 	bl	80002f4 <strlen>
 801dc2e:	4a3b      	ldr	r2, [pc, #236]	@ (801dd1c <rcl_expand_topic_name+0x2b0>)
 801dc30:	4b3b      	ldr	r3, [pc, #236]	@ (801dd20 <rcl_expand_topic_name+0x2b4>)
 801dc32:	9603      	str	r6, [sp, #12]
 801dc34:	2801      	cmp	r0, #1
 801dc36:	bf18      	it	ne
 801dc38:	4613      	movne	r3, r2
 801dc3a:	9704      	str	r7, [sp, #16]
 801dc3c:	9302      	str	r3, [sp, #8]
 801dc3e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801dc40:	9300      	str	r3, [sp, #0]
 801dc42:	1c63      	adds	r3, r4, #1
 801dc44:	9305      	str	r3, [sp, #20]
 801dc46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801dc4a:	9301      	str	r3, [sp, #4]
 801dc4c:	ab16      	add	r3, sp, #88	@ 0x58
 801dc4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801dc50:	f7f9 fc36 	bl	80174c0 <rcutils_format_string_limit>
 801dc54:	4606      	mov	r6, r0
 801dc56:	b350      	cbz	r0, 801dcae <rcl_expand_topic_name+0x242>
 801dc58:	f1b9 0f00 	cmp.w	r9, #0
 801dc5c:	d005      	beq.n	801dc6a <rcl_expand_topic_name+0x1fe>
 801dc5e:	217b      	movs	r1, #123	@ 0x7b
 801dc60:	46b2      	mov	sl, r6
 801dc62:	f001 feef 	bl	801fa44 <strchr>
 801dc66:	4681      	mov	r9, r0
 801dc68:	e76e      	b.n	801db48 <rcl_expand_topic_name+0xdc>
 801dc6a:	7833      	ldrb	r3, [r6, #0]
 801dc6c:	2b2f      	cmp	r3, #47	@ 0x2f
 801dc6e:	d01b      	beq.n	801dca8 <rcl_expand_topic_name+0x23c>
 801dc70:	9c07      	ldr	r4, [sp, #28]
 801dc72:	4620      	mov	r0, r4
 801dc74:	f7e2 fb3e 	bl	80002f4 <strlen>
 801dc78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801dc7c:	4a29      	ldr	r2, [pc, #164]	@ (801dd24 <rcl_expand_topic_name+0x2b8>)
 801dc7e:	9301      	str	r3, [sp, #4]
 801dc80:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801dc82:	9604      	str	r6, [sp, #16]
 801dc84:	9300      	str	r3, [sp, #0]
 801dc86:	4b28      	ldr	r3, [pc, #160]	@ (801dd28 <rcl_expand_topic_name+0x2bc>)
 801dc88:	9403      	str	r4, [sp, #12]
 801dc8a:	2801      	cmp	r0, #1
 801dc8c:	bf18      	it	ne
 801dc8e:	4613      	movne	r3, r2
 801dc90:	9302      	str	r3, [sp, #8]
 801dc92:	ab16      	add	r3, sp, #88	@ 0x58
 801dc94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801dc96:	f7f9 fc13 	bl	80174c0 <rcutils_format_string_limit>
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801dc9e:	4630      	mov	r0, r6
 801dca0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dca2:	461e      	mov	r6, r3
 801dca4:	4790      	blx	r2
 801dca6:	b116      	cbz	r6, 801dcae <rcl_expand_topic_name+0x242>
 801dca8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dcaa:	601e      	str	r6, [r3, #0]
 801dcac:	e72f      	b.n	801db0e <rcl_expand_topic_name+0xa2>
 801dcae:	2300      	movs	r3, #0
 801dcb0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dcb2:	250a      	movs	r5, #10
 801dcb4:	6013      	str	r3, [r2, #0]
 801dcb6:	e72a      	b.n	801db0e <rcl_expand_topic_name+0xa2>
 801dcb8:	4653      	mov	r3, sl
 801dcba:	4656      	mov	r6, sl
 801dcbc:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d1d2      	bne.n	801dc6a <rcl_expand_topic_name+0x1fe>
 801dcc4:	7823      	ldrb	r3, [r4, #0]
 801dcc6:	2b2f      	cmp	r3, #47	@ 0x2f
 801dcc8:	d01e      	beq.n	801dd08 <rcl_expand_topic_name+0x29c>
 801dcca:	9e07      	ldr	r6, [sp, #28]
 801dccc:	4630      	mov	r0, r6
 801dcce:	f7e2 fb11 	bl	80002f4 <strlen>
 801dcd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dcd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801dcd8:	9603      	str	r6, [sp, #12]
 801dcda:	9404      	str	r4, [sp, #16]
 801dcdc:	e9cd 2300 	strd	r2, r3, [sp]
 801dce0:	4a10      	ldr	r2, [pc, #64]	@ (801dd24 <rcl_expand_topic_name+0x2b8>)
 801dce2:	4b11      	ldr	r3, [pc, #68]	@ (801dd28 <rcl_expand_topic_name+0x2bc>)
 801dce4:	2801      	cmp	r0, #1
 801dce6:	bf18      	it	ne
 801dce8:	4613      	movne	r3, r2
 801dcea:	9302      	str	r3, [sp, #8]
 801dcec:	ab16      	add	r3, sp, #88	@ 0x58
 801dcee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801dcf0:	f7f9 fbe6 	bl	80174c0 <rcutils_format_string_limit>
 801dcf4:	4606      	mov	r6, r0
 801dcf6:	e7d6      	b.n	801dca6 <rcl_expand_topic_name+0x23a>
 801dcf8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801dcfc:	4650      	mov	r0, sl
 801dcfe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dd00:	6014      	str	r4, [r2, #0]
 801dd02:	250a      	movs	r5, #10
 801dd04:	4798      	blx	r3
 801dd06:	e702      	b.n	801db0e <rcl_expand_topic_name+0xa2>
 801dd08:	2300      	movs	r3, #0
 801dd0a:	461e      	mov	r6, r3
 801dd0c:	e7cc      	b.n	801dca8 <rcl_expand_topic_name+0x23c>
 801dd0e:	bf00      	nop
 801dd10:	08022f04 	.word	0x08022f04
 801dd14:	08022f0c 	.word	0x08022f0c
 801dd18:	08022f14 	.word	0x08022f14
 801dd1c:	08022efc 	.word	0x08022efc
 801dd20:	08022c10 	.word	0x08022c10
 801dd24:	080225d8 	.word	0x080225d8
 801dd28:	080225d0 	.word	0x080225d0

0801dd2c <rcl_get_default_topic_name_substitutions>:
 801dd2c:	2800      	cmp	r0, #0
 801dd2e:	bf0c      	ite	eq
 801dd30:	200b      	moveq	r0, #11
 801dd32:	2000      	movne	r0, #0
 801dd34:	4770      	bx	lr
 801dd36:	bf00      	nop

0801dd38 <rcl_get_zero_initialized_guard_condition>:
 801dd38:	4a03      	ldr	r2, [pc, #12]	@ (801dd48 <rcl_get_zero_initialized_guard_condition+0x10>)
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd40:	e883 0003 	stmia.w	r3, {r0, r1}
 801dd44:	4618      	mov	r0, r3
 801dd46:	4770      	bx	lr
 801dd48:	08022f20 	.word	0x08022f20

0801dd4c <rcl_guard_condition_init_from_rmw>:
 801dd4c:	b082      	sub	sp, #8
 801dd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd52:	b086      	sub	sp, #24
 801dd54:	4604      	mov	r4, r0
 801dd56:	460e      	mov	r6, r1
 801dd58:	4615      	mov	r5, r2
 801dd5a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801dd5e:	f10d 0e04 	add.w	lr, sp, #4
 801dd62:	f84c 3f04 	str.w	r3, [ip, #4]!
 801dd66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801dd6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801dd6e:	f8dc 3000 	ldr.w	r3, [ip]
 801dd72:	a801      	add	r0, sp, #4
 801dd74:	f8ce 3000 	str.w	r3, [lr]
 801dd78:	f7f5 fd1a 	bl	80137b0 <rcutils_allocator_is_valid>
 801dd7c:	f080 0301 	eor.w	r3, r0, #1
 801dd80:	b2db      	uxtb	r3, r3
 801dd82:	bb3b      	cbnz	r3, 801ddd4 <rcl_guard_condition_init_from_rmw+0x88>
 801dd84:	b334      	cbz	r4, 801ddd4 <rcl_guard_condition_init_from_rmw+0x88>
 801dd86:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801dd8a:	f1b8 0f00 	cmp.w	r8, #0
 801dd8e:	d11a      	bne.n	801ddc6 <rcl_guard_condition_init_from_rmw+0x7a>
 801dd90:	b305      	cbz	r5, 801ddd4 <rcl_guard_condition_init_from_rmw+0x88>
 801dd92:	4628      	mov	r0, r5
 801dd94:	f7f6 fbd8 	bl	8014548 <rcl_context_is_valid>
 801dd98:	b1f0      	cbz	r0, 801ddd8 <rcl_guard_condition_init_from_rmw+0x8c>
 801dd9a:	9b01      	ldr	r3, [sp, #4]
 801dd9c:	201c      	movs	r0, #28
 801dd9e:	9905      	ldr	r1, [sp, #20]
 801dda0:	4798      	blx	r3
 801dda2:	4607      	mov	r7, r0
 801dda4:	6060      	str	r0, [r4, #4]
 801dda6:	b320      	cbz	r0, 801ddf2 <rcl_guard_condition_init_from_rmw+0xa6>
 801dda8:	b1c6      	cbz	r6, 801dddc <rcl_guard_condition_init_from_rmw+0x90>
 801ddaa:	6006      	str	r6, [r0, #0]
 801ddac:	f880 8004 	strb.w	r8, [r0, #4]
 801ddb0:	ac01      	add	r4, sp, #4
 801ddb2:	f107 0c08 	add.w	ip, r7, #8
 801ddb6:	2500      	movs	r5, #0
 801ddb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ddba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ddbe:	6823      	ldr	r3, [r4, #0]
 801ddc0:	f8cc 3000 	str.w	r3, [ip]
 801ddc4:	e000      	b.n	801ddc8 <rcl_guard_condition_init_from_rmw+0x7c>
 801ddc6:	2564      	movs	r5, #100	@ 0x64
 801ddc8:	4628      	mov	r0, r5
 801ddca:	b006      	add	sp, #24
 801ddcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ddd0:	b002      	add	sp, #8
 801ddd2:	4770      	bx	lr
 801ddd4:	250b      	movs	r5, #11
 801ddd6:	e7f7      	b.n	801ddc8 <rcl_guard_condition_init_from_rmw+0x7c>
 801ddd8:	2565      	movs	r5, #101	@ 0x65
 801ddda:	e7f5      	b.n	801ddc8 <rcl_guard_condition_init_from_rmw+0x7c>
 801dddc:	6828      	ldr	r0, [r5, #0]
 801ddde:	3028      	adds	r0, #40	@ 0x28
 801dde0:	f000 fada 	bl	801e398 <rmw_create_guard_condition>
 801dde4:	6038      	str	r0, [r7, #0]
 801dde6:	6867      	ldr	r7, [r4, #4]
 801dde8:	683e      	ldr	r6, [r7, #0]
 801ddea:	b126      	cbz	r6, 801ddf6 <rcl_guard_condition_init_from_rmw+0xaa>
 801ddec:	2301      	movs	r3, #1
 801ddee:	713b      	strb	r3, [r7, #4]
 801ddf0:	e7de      	b.n	801ddb0 <rcl_guard_condition_init_from_rmw+0x64>
 801ddf2:	250a      	movs	r5, #10
 801ddf4:	e7e8      	b.n	801ddc8 <rcl_guard_condition_init_from_rmw+0x7c>
 801ddf6:	9b02      	ldr	r3, [sp, #8]
 801ddf8:	4638      	mov	r0, r7
 801ddfa:	9905      	ldr	r1, [sp, #20]
 801ddfc:	2501      	movs	r5, #1
 801ddfe:	4798      	blx	r3
 801de00:	6066      	str	r6, [r4, #4]
 801de02:	e7e1      	b.n	801ddc8 <rcl_guard_condition_init_from_rmw+0x7c>

0801de04 <rcl_guard_condition_fini>:
 801de04:	b570      	push	{r4, r5, r6, lr}
 801de06:	b082      	sub	sp, #8
 801de08:	b1f0      	cbz	r0, 801de48 <rcl_guard_condition_fini+0x44>
 801de0a:	6843      	ldr	r3, [r0, #4]
 801de0c:	4604      	mov	r4, r0
 801de0e:	b163      	cbz	r3, 801de2a <rcl_guard_condition_fini+0x26>
 801de10:	6818      	ldr	r0, [r3, #0]
 801de12:	68de      	ldr	r6, [r3, #12]
 801de14:	6999      	ldr	r1, [r3, #24]
 801de16:	b160      	cbz	r0, 801de32 <rcl_guard_condition_fini+0x2e>
 801de18:	791d      	ldrb	r5, [r3, #4]
 801de1a:	b965      	cbnz	r5, 801de36 <rcl_guard_condition_fini+0x32>
 801de1c:	4618      	mov	r0, r3
 801de1e:	47b0      	blx	r6
 801de20:	2300      	movs	r3, #0
 801de22:	4628      	mov	r0, r5
 801de24:	6063      	str	r3, [r4, #4]
 801de26:	b002      	add	sp, #8
 801de28:	bd70      	pop	{r4, r5, r6, pc}
 801de2a:	461d      	mov	r5, r3
 801de2c:	4628      	mov	r0, r5
 801de2e:	b002      	add	sp, #8
 801de30:	bd70      	pop	{r4, r5, r6, pc}
 801de32:	4605      	mov	r5, r0
 801de34:	e7f2      	b.n	801de1c <rcl_guard_condition_fini+0x18>
 801de36:	9101      	str	r1, [sp, #4]
 801de38:	f000 fac4 	bl	801e3c4 <rmw_destroy_guard_condition>
 801de3c:	1e05      	subs	r5, r0, #0
 801de3e:	6863      	ldr	r3, [r4, #4]
 801de40:	9901      	ldr	r1, [sp, #4]
 801de42:	bf18      	it	ne
 801de44:	2501      	movne	r5, #1
 801de46:	e7e9      	b.n	801de1c <rcl_guard_condition_fini+0x18>
 801de48:	250b      	movs	r5, #11
 801de4a:	4628      	mov	r0, r5
 801de4c:	b002      	add	sp, #8
 801de4e:	bd70      	pop	{r4, r5, r6, pc}

0801de50 <rcl_guard_condition_get_default_options>:
 801de50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de52:	b087      	sub	sp, #28
 801de54:	4606      	mov	r6, r0
 801de56:	4c0b      	ldr	r4, [pc, #44]	@ (801de84 <rcl_guard_condition_get_default_options+0x34>)
 801de58:	4668      	mov	r0, sp
 801de5a:	f7f5 fc9b 	bl	8013794 <rcutils_get_default_allocator>
 801de5e:	46ee      	mov	lr, sp
 801de60:	46a4      	mov	ip, r4
 801de62:	4625      	mov	r5, r4
 801de64:	4634      	mov	r4, r6
 801de66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801de6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801de6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801de70:	f8de 7000 	ldr.w	r7, [lr]
 801de74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801de76:	4630      	mov	r0, r6
 801de78:	f8cc 7000 	str.w	r7, [ip]
 801de7c:	6027      	str	r7, [r4, #0]
 801de7e:	b007      	add	sp, #28
 801de80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de82:	bf00      	nop
 801de84:	240693e0 	.word	0x240693e0

0801de88 <rcl_guard_condition_get_rmw_handle>:
 801de88:	b110      	cbz	r0, 801de90 <rcl_guard_condition_get_rmw_handle+0x8>
 801de8a:	6840      	ldr	r0, [r0, #4]
 801de8c:	b100      	cbz	r0, 801de90 <rcl_guard_condition_get_rmw_handle+0x8>
 801de8e:	6800      	ldr	r0, [r0, #0]
 801de90:	4770      	bx	lr
 801de92:	bf00      	nop

0801de94 <rcl_validate_topic_name>:
 801de94:	2800      	cmp	r0, #0
 801de96:	f000 8089 	beq.w	801dfac <rcl_validate_topic_name+0x118>
 801de9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de9e:	460e      	mov	r6, r1
 801dea0:	2900      	cmp	r1, #0
 801dea2:	f000 8085 	beq.w	801dfb0 <rcl_validate_topic_name+0x11c>
 801dea6:	4604      	mov	r4, r0
 801dea8:	4617      	mov	r7, r2
 801deaa:	f7e2 fa23 	bl	80002f4 <strlen>
 801deae:	b1b0      	cbz	r0, 801dede <rcl_validate_topic_name+0x4a>
 801deb0:	f894 e000 	ldrb.w	lr, [r4]
 801deb4:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801e018 <rcl_validate_topic_name+0x184>
 801deb8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801debc:	f013 0304 	ands.w	r3, r3, #4
 801dec0:	d139      	bne.n	801df36 <rcl_validate_topic_name+0xa2>
 801dec2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801dec6:	f814 2008 	ldrb.w	r2, [r4, r8]
 801deca:	2a2f      	cmp	r2, #47	@ 0x2f
 801decc:	d10f      	bne.n	801deee <rcl_validate_topic_name+0x5a>
 801dece:	2202      	movs	r2, #2
 801ded0:	6032      	str	r2, [r6, #0]
 801ded2:	b3a7      	cbz	r7, 801df3e <rcl_validate_topic_name+0xaa>
 801ded4:	4618      	mov	r0, r3
 801ded6:	f8c7 8000 	str.w	r8, [r7]
 801deda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dede:	2301      	movs	r3, #1
 801dee0:	6033      	str	r3, [r6, #0]
 801dee2:	b367      	cbz	r7, 801df3e <rcl_validate_topic_name+0xaa>
 801dee4:	2300      	movs	r3, #0
 801dee6:	4618      	mov	r0, r3
 801dee8:	603b      	str	r3, [r7, #0]
 801deea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801deee:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801def2:	461d      	mov	r5, r3
 801def4:	4619      	mov	r1, r3
 801def6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801defa:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801defe:	f1b9 0f09 	cmp.w	r9, #9
 801df02:	d91f      	bls.n	801df44 <rcl_validate_topic_name+0xb0>
 801df04:	f022 0920 	bic.w	r9, r2, #32
 801df08:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801df0c:	f1b9 0f19 	cmp.w	r9, #25
 801df10:	d918      	bls.n	801df44 <rcl_validate_topic_name+0xb0>
 801df12:	2a5f      	cmp	r2, #95	@ 0x5f
 801df14:	d024      	beq.n	801df60 <rcl_validate_topic_name+0xcc>
 801df16:	2a2f      	cmp	r2, #47	@ 0x2f
 801df18:	d058      	beq.n	801dfcc <rcl_validate_topic_name+0x138>
 801df1a:	2a7e      	cmp	r2, #126	@ 0x7e
 801df1c:	d04a      	beq.n	801dfb4 <rcl_validate_topic_name+0x120>
 801df1e:	2a7b      	cmp	r2, #123	@ 0x7b
 801df20:	d05b      	beq.n	801dfda <rcl_validate_topic_name+0x146>
 801df22:	2a7d      	cmp	r2, #125	@ 0x7d
 801df24:	d169      	bne.n	801dffa <rcl_validate_topic_name+0x166>
 801df26:	2d00      	cmp	r5, #0
 801df28:	d15c      	bne.n	801dfe4 <rcl_validate_topic_name+0x150>
 801df2a:	2305      	movs	r3, #5
 801df2c:	6033      	str	r3, [r6, #0]
 801df2e:	b137      	cbz	r7, 801df3e <rcl_validate_topic_name+0xaa>
 801df30:	2000      	movs	r0, #0
 801df32:	6039      	str	r1, [r7, #0]
 801df34:	e7d9      	b.n	801deea <rcl_validate_topic_name+0x56>
 801df36:	2304      	movs	r3, #4
 801df38:	6033      	str	r3, [r6, #0]
 801df3a:	2f00      	cmp	r7, #0
 801df3c:	d1d2      	bne.n	801dee4 <rcl_validate_topic_name+0x50>
 801df3e:	2000      	movs	r0, #0
 801df40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df44:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801df48:	0752      	lsls	r2, r2, #29
 801df4a:	d509      	bpl.n	801df60 <rcl_validate_topic_name+0xcc>
 801df4c:	2900      	cmp	r1, #0
 801df4e:	bf0c      	ite	eq
 801df50:	2200      	moveq	r2, #0
 801df52:	f005 0201 	andne.w	r2, r5, #1
 801df56:	b11a      	cbz	r2, 801df60 <rcl_validate_topic_name+0xcc>
 801df58:	1e4d      	subs	r5, r1, #1
 801df5a:	429d      	cmp	r5, r3
 801df5c:	d031      	beq.n	801dfc2 <rcl_validate_topic_name+0x12e>
 801df5e:	4615      	mov	r5, r2
 801df60:	3101      	adds	r1, #1
 801df62:	4288      	cmp	r0, r1
 801df64:	d1c7      	bne.n	801def6 <rcl_validate_topic_name+0x62>
 801df66:	2d00      	cmp	r5, #0
 801df68:	d142      	bne.n	801dff0 <rcl_validate_topic_name+0x15c>
 801df6a:	4628      	mov	r0, r5
 801df6c:	2301      	movs	r3, #1
 801df6e:	e00c      	b.n	801df8a <rcl_validate_topic_name+0xf6>
 801df70:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801df74:	d101      	bne.n	801df7a <rcl_validate_topic_name+0xe6>
 801df76:	2801      	cmp	r0, #1
 801df78:	d047      	beq.n	801e00a <rcl_validate_topic_name+0x176>
 801df7a:	1c5a      	adds	r2, r3, #1
 801df7c:	428b      	cmp	r3, r1
 801df7e:	f100 0001 	add.w	r0, r0, #1
 801df82:	f104 0401 	add.w	r4, r4, #1
 801df86:	4613      	mov	r3, r2
 801df88:	d22e      	bcs.n	801dfe8 <rcl_validate_topic_name+0x154>
 801df8a:	4580      	cmp	r8, r0
 801df8c:	d0f5      	beq.n	801df7a <rcl_validate_topic_name+0xe6>
 801df8e:	7822      	ldrb	r2, [r4, #0]
 801df90:	2a2f      	cmp	r2, #47	@ 0x2f
 801df92:	d1ed      	bne.n	801df70 <rcl_validate_topic_name+0xdc>
 801df94:	7862      	ldrb	r2, [r4, #1]
 801df96:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801df9a:	0752      	lsls	r2, r2, #29
 801df9c:	d5ed      	bpl.n	801df7a <rcl_validate_topic_name+0xe6>
 801df9e:	2204      	movs	r2, #4
 801dfa0:	6032      	str	r2, [r6, #0]
 801dfa2:	2f00      	cmp	r7, #0
 801dfa4:	d0cb      	beq.n	801df3e <rcl_validate_topic_name+0xaa>
 801dfa6:	2000      	movs	r0, #0
 801dfa8:	603b      	str	r3, [r7, #0]
 801dfaa:	e79e      	b.n	801deea <rcl_validate_topic_name+0x56>
 801dfac:	200b      	movs	r0, #11
 801dfae:	4770      	bx	lr
 801dfb0:	200b      	movs	r0, #11
 801dfb2:	e79a      	b.n	801deea <rcl_validate_topic_name+0x56>
 801dfb4:	2900      	cmp	r1, #0
 801dfb6:	d0d3      	beq.n	801df60 <rcl_validate_topic_name+0xcc>
 801dfb8:	2306      	movs	r3, #6
 801dfba:	6033      	str	r3, [r6, #0]
 801dfbc:	2f00      	cmp	r7, #0
 801dfbe:	d1b7      	bne.n	801df30 <rcl_validate_topic_name+0x9c>
 801dfc0:	e7bd      	b.n	801df3e <rcl_validate_topic_name+0xaa>
 801dfc2:	2309      	movs	r3, #9
 801dfc4:	6033      	str	r3, [r6, #0]
 801dfc6:	2f00      	cmp	r7, #0
 801dfc8:	d1b2      	bne.n	801df30 <rcl_validate_topic_name+0x9c>
 801dfca:	e7b8      	b.n	801df3e <rcl_validate_topic_name+0xaa>
 801dfcc:	2d00      	cmp	r5, #0
 801dfce:	d0c7      	beq.n	801df60 <rcl_validate_topic_name+0xcc>
 801dfd0:	2308      	movs	r3, #8
 801dfd2:	6033      	str	r3, [r6, #0]
 801dfd4:	2f00      	cmp	r7, #0
 801dfd6:	d1ab      	bne.n	801df30 <rcl_validate_topic_name+0x9c>
 801dfd8:	e7b1      	b.n	801df3e <rcl_validate_topic_name+0xaa>
 801dfda:	2d00      	cmp	r5, #0
 801dfdc:	d1f8      	bne.n	801dfd0 <rcl_validate_topic_name+0x13c>
 801dfde:	460b      	mov	r3, r1
 801dfe0:	2501      	movs	r5, #1
 801dfe2:	e7bd      	b.n	801df60 <rcl_validate_topic_name+0xcc>
 801dfe4:	2500      	movs	r5, #0
 801dfe6:	e7bb      	b.n	801df60 <rcl_validate_topic_name+0xcc>
 801dfe8:	2300      	movs	r3, #0
 801dfea:	4618      	mov	r0, r3
 801dfec:	6033      	str	r3, [r6, #0]
 801dfee:	e77c      	b.n	801deea <rcl_validate_topic_name+0x56>
 801dff0:	2205      	movs	r2, #5
 801dff2:	6032      	str	r2, [r6, #0]
 801dff4:	2f00      	cmp	r7, #0
 801dff6:	d1d6      	bne.n	801dfa6 <rcl_validate_topic_name+0x112>
 801dff8:	e7a1      	b.n	801df3e <rcl_validate_topic_name+0xaa>
 801dffa:	2d00      	cmp	r5, #0
 801dffc:	bf14      	ite	ne
 801dffe:	2308      	movne	r3, #8
 801e000:	2303      	moveq	r3, #3
 801e002:	6033      	str	r3, [r6, #0]
 801e004:	2f00      	cmp	r7, #0
 801e006:	d193      	bne.n	801df30 <rcl_validate_topic_name+0x9c>
 801e008:	e799      	b.n	801df3e <rcl_validate_topic_name+0xaa>
 801e00a:	2307      	movs	r3, #7
 801e00c:	6033      	str	r3, [r6, #0]
 801e00e:	2f00      	cmp	r7, #0
 801e010:	d095      	beq.n	801df3e <rcl_validate_topic_name+0xaa>
 801e012:	2301      	movs	r3, #1
 801e014:	e7c7      	b.n	801dfa6 <rcl_validate_topic_name+0x112>
 801e016:	bf00      	nop
 801e018:	080230a6 	.word	0x080230a6

0801e01c <rcutils_string_array_fini>:
 801e01c:	b328      	cbz	r0, 801e06a <rcutils_string_array_fini+0x4e>
 801e01e:	b570      	push	{r4, r5, r6, lr}
 801e020:	4604      	mov	r4, r0
 801e022:	6840      	ldr	r0, [r0, #4]
 801e024:	b1e0      	cbz	r0, 801e060 <rcutils_string_array_fini+0x44>
 801e026:	f104 0008 	add.w	r0, r4, #8
 801e02a:	f7f5 fbc1 	bl	80137b0 <rcutils_allocator_is_valid>
 801e02e:	b1c0      	cbz	r0, 801e062 <rcutils_string_array_fini+0x46>
 801e030:	6823      	ldr	r3, [r4, #0]
 801e032:	b1c3      	cbz	r3, 801e066 <rcutils_string_array_fini+0x4a>
 801e034:	2500      	movs	r5, #0
 801e036:	6860      	ldr	r0, [r4, #4]
 801e038:	462e      	mov	r6, r5
 801e03a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801e03e:	68e3      	ldr	r3, [r4, #12]
 801e040:	69a1      	ldr	r1, [r4, #24]
 801e042:	4798      	blx	r3
 801e044:	e9d4 3000 	ldrd	r3, r0, [r4]
 801e048:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801e04c:	3501      	adds	r5, #1
 801e04e:	429d      	cmp	r5, r3
 801e050:	d3f3      	bcc.n	801e03a <rcutils_string_array_fini+0x1e>
 801e052:	68e3      	ldr	r3, [r4, #12]
 801e054:	69a1      	ldr	r1, [r4, #24]
 801e056:	4798      	blx	r3
 801e058:	2300      	movs	r3, #0
 801e05a:	4618      	mov	r0, r3
 801e05c:	e9c4 3300 	strd	r3, r3, [r4]
 801e060:	bd70      	pop	{r4, r5, r6, pc}
 801e062:	200b      	movs	r0, #11
 801e064:	bd70      	pop	{r4, r5, r6, pc}
 801e066:	6860      	ldr	r0, [r4, #4]
 801e068:	e7f3      	b.n	801e052 <rcutils_string_array_fini+0x36>
 801e06a:	200b      	movs	r0, #11
 801e06c:	4770      	bx	lr
 801e06e:	bf00      	nop

0801e070 <rmw_time_equal>:
 801e070:	b4f0      	push	{r4, r5, r6, r7}
 801e072:	b084      	sub	sp, #16
 801e074:	ac04      	add	r4, sp, #16
 801e076:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e07a:	4603      	mov	r3, r0
 801e07c:	4925      	ldr	r1, [pc, #148]	@ (801e114 <rmw_time_equal+0xa4>)
 801e07e:	9d01      	ldr	r5, [sp, #4]
 801e080:	4610      	mov	r0, r2
 801e082:	4299      	cmp	r1, r3
 801e084:	f04f 0202 	mov.w	r2, #2
 801e088:	9e03      	ldr	r6, [sp, #12]
 801e08a:	41aa      	sbcs	r2, r5
 801e08c:	d330      	bcc.n	801e0f0 <rmw_time_equal+0x80>
 801e08e:	4c22      	ldr	r4, [pc, #136]	@ (801e118 <rmw_time_equal+0xa8>)
 801e090:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e094:	fba3 3204 	umull	r3, r2, r3, r4
 801e098:	fb04 2205 	mla	r2, r4, r5, r2
 801e09c:	43dd      	mvns	r5, r3
 801e09e:	1a8c      	subs	r4, r1, r2
 801e0a0:	4285      	cmp	r5, r0
 801e0a2:	41b4      	sbcs	r4, r6
 801e0a4:	d332      	bcc.n	801e10c <rmw_time_equal+0x9c>
 801e0a6:	eb10 0c03 	adds.w	ip, r0, r3
 801e0aa:	eb42 0106 	adc.w	r1, r2, r6
 801e0ae:	4819      	ldr	r0, [pc, #100]	@ (801e114 <rmw_time_equal+0xa4>)
 801e0b0:	2202      	movs	r2, #2
 801e0b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e0b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e0b6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e0ba:	4298      	cmp	r0, r3
 801e0bc:	41b2      	sbcs	r2, r6
 801e0be:	d31c      	bcc.n	801e0fa <rmw_time_equal+0x8a>
 801e0c0:	4c15      	ldr	r4, [pc, #84]	@ (801e118 <rmw_time_equal+0xa8>)
 801e0c2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e0c6:	fba3 3204 	umull	r3, r2, r3, r4
 801e0ca:	fb04 2206 	mla	r2, r4, r6, r2
 801e0ce:	43de      	mvns	r6, r3
 801e0d0:	1a84      	subs	r4, r0, r2
 801e0d2:	42ae      	cmp	r6, r5
 801e0d4:	41bc      	sbcs	r4, r7
 801e0d6:	d315      	bcc.n	801e104 <rmw_time_equal+0x94>
 801e0d8:	195b      	adds	r3, r3, r5
 801e0da:	eb42 0207 	adc.w	r2, r2, r7
 801e0de:	428a      	cmp	r2, r1
 801e0e0:	bf08      	it	eq
 801e0e2:	4563      	cmpeq	r3, ip
 801e0e4:	bf0c      	ite	eq
 801e0e6:	2001      	moveq	r0, #1
 801e0e8:	2000      	movne	r0, #0
 801e0ea:	b004      	add	sp, #16
 801e0ec:	bcf0      	pop	{r4, r5, r6, r7}
 801e0ee:	4770      	bx	lr
 801e0f0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e0f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e0f8:	e7d9      	b.n	801e0ae <rmw_time_equal+0x3e>
 801e0fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e0fe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801e102:	e7ec      	b.n	801e0de <rmw_time_equal+0x6e>
 801e104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e108:	4602      	mov	r2, r0
 801e10a:	e7e8      	b.n	801e0de <rmw_time_equal+0x6e>
 801e10c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e110:	e7cd      	b.n	801e0ae <rmw_time_equal+0x3e>
 801e112:	bf00      	nop
 801e114:	25c17d04 	.word	0x25c17d04
 801e118:	3b9aca00 	.word	0x3b9aca00

0801e11c <rmw_time_total_nsec>:
 801e11c:	b470      	push	{r4, r5, r6}
 801e11e:	b085      	sub	sp, #20
 801e120:	ac04      	add	r4, sp, #16
 801e122:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e126:	4603      	mov	r3, r0
 801e128:	4913      	ldr	r1, [pc, #76]	@ (801e178 <rmw_time_total_nsec+0x5c>)
 801e12a:	9d01      	ldr	r5, [sp, #4]
 801e12c:	4610      	mov	r0, r2
 801e12e:	4299      	cmp	r1, r3
 801e130:	f04f 0202 	mov.w	r2, #2
 801e134:	9e03      	ldr	r6, [sp, #12]
 801e136:	41aa      	sbcs	r2, r5
 801e138:	d311      	bcc.n	801e15e <rmw_time_total_nsec+0x42>
 801e13a:	4c10      	ldr	r4, [pc, #64]	@ (801e17c <rmw_time_total_nsec+0x60>)
 801e13c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e140:	fba3 3204 	umull	r3, r2, r3, r4
 801e144:	fb04 2205 	mla	r2, r4, r5, r2
 801e148:	43dd      	mvns	r5, r3
 801e14a:	1a8c      	subs	r4, r1, r2
 801e14c:	4285      	cmp	r5, r0
 801e14e:	41b4      	sbcs	r4, r6
 801e150:	d30c      	bcc.n	801e16c <rmw_time_total_nsec+0x50>
 801e152:	1818      	adds	r0, r3, r0
 801e154:	eb42 0106 	adc.w	r1, r2, r6
 801e158:	b005      	add	sp, #20
 801e15a:	bc70      	pop	{r4, r5, r6}
 801e15c:	4770      	bx	lr
 801e15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e162:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e166:	b005      	add	sp, #20
 801e168:	bc70      	pop	{r4, r5, r6}
 801e16a:	4770      	bx	lr
 801e16c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e170:	b005      	add	sp, #20
 801e172:	bc70      	pop	{r4, r5, r6}
 801e174:	4770      	bx	lr
 801e176:	bf00      	nop
 801e178:	25c17d04 	.word	0x25c17d04
 801e17c:	3b9aca00 	.word	0x3b9aca00

0801e180 <on_status>:
 801e180:	b082      	sub	sp, #8
 801e182:	b002      	add	sp, #8
 801e184:	4770      	bx	lr
 801e186:	bf00      	nop

0801e188 <on_topic>:
 801e188:	4a23      	ldr	r2, [pc, #140]	@ (801e218 <on_topic+0x90>)
 801e18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e18e:	6812      	ldr	r2, [r2, #0]
 801e190:	b094      	sub	sp, #80	@ 0x50
 801e192:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801e194:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801e198:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e19a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e19c:	b3c2      	cbz	r2, 801e210 <on_topic+0x88>
 801e19e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801e1a2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801e1a6:	e001      	b.n	801e1ac <on_topic+0x24>
 801e1a8:	6852      	ldr	r2, [r2, #4]
 801e1aa:	b38a      	cbz	r2, 801e210 <on_topic+0x88>
 801e1ac:	6894      	ldr	r4, [r2, #8]
 801e1ae:	8aa3      	ldrh	r3, [r4, #20]
 801e1b0:	428b      	cmp	r3, r1
 801e1b2:	d1f9      	bne.n	801e1a8 <on_topic+0x20>
 801e1b4:	7da3      	ldrb	r3, [r4, #22]
 801e1b6:	4283      	cmp	r3, r0
 801e1b8:	d1f6      	bne.n	801e1a8 <on_topic+0x20>
 801e1ba:	2248      	movs	r2, #72	@ 0x48
 801e1bc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801e1c0:	4668      	mov	r0, sp
 801e1c2:	f001 fd56 	bl	801fc72 <memcpy>
 801e1c6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801e1ca:	4620      	mov	r0, r4
 801e1cc:	cb0c      	ldmia	r3, {r2, r3}
 801e1ce:	f7fb faa5 	bl	801971c <rmw_uxrce_get_static_input_buffer_for_entity>
 801e1d2:	4607      	mov	r7, r0
 801e1d4:	b1e0      	cbz	r0, 801e210 <on_topic+0x88>
 801e1d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801e1da:	462a      	mov	r2, r5
 801e1dc:	4630      	mov	r0, r6
 801e1de:	f108 0110 	add.w	r1, r8, #16
 801e1e2:	f7fb ff7d 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801e1e6:	b930      	cbnz	r0, 801e1f6 <on_topic+0x6e>
 801e1e8:	4639      	mov	r1, r7
 801e1ea:	480c      	ldr	r0, [pc, #48]	@ (801e21c <on_topic+0x94>)
 801e1ec:	b014      	add	sp, #80	@ 0x50
 801e1ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e1f2:	f000 b8bd 	b.w	801e370 <put_memory>
 801e1f6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801e1fa:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801e1fe:	f000 f967 	bl	801e4d0 <rmw_uros_epoch_nanos>
 801e202:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801e206:	2305      	movs	r3, #5
 801e208:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e20c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801e210:	b014      	add	sp, #80	@ 0x50
 801e212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e216:	bf00      	nop
 801e218:	240693ac 	.word	0x240693ac
 801e21c:	2406939c 	.word	0x2406939c

0801e220 <on_request>:
 801e220:	4824      	ldr	r0, [pc, #144]	@ (801e2b4 <on_request+0x94>)
 801e222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e226:	6800      	ldr	r0, [r0, #0]
 801e228:	b094      	sub	sp, #80	@ 0x50
 801e22a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801e22c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801e230:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e232:	2800      	cmp	r0, #0
 801e234:	d03b      	beq.n	801e2ae <on_request+0x8e>
 801e236:	461d      	mov	r5, r3
 801e238:	e001      	b.n	801e23e <on_request+0x1e>
 801e23a:	6840      	ldr	r0, [r0, #4]
 801e23c:	b3b8      	cbz	r0, 801e2ae <on_request+0x8e>
 801e23e:	6884      	ldr	r4, [r0, #8]
 801e240:	8b21      	ldrh	r1, [r4, #24]
 801e242:	4291      	cmp	r1, r2
 801e244:	d1f9      	bne.n	801e23a <on_request+0x1a>
 801e246:	2248      	movs	r2, #72	@ 0x48
 801e248:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801e24c:	4668      	mov	r0, sp
 801e24e:	f001 fd10 	bl	801fc72 <memcpy>
 801e252:	f104 0320 	add.w	r3, r4, #32
 801e256:	4620      	mov	r0, r4
 801e258:	cb0c      	ldmia	r3, {r2, r3}
 801e25a:	f7fb fa5f 	bl	801971c <rmw_uxrce_get_static_input_buffer_for_entity>
 801e25e:	4680      	mov	r8, r0
 801e260:	b328      	cbz	r0, 801e2ae <on_request+0x8e>
 801e262:	4630      	mov	r0, r6
 801e264:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e268:	463a      	mov	r2, r7
 801e26a:	f106 0110 	add.w	r1, r6, #16
 801e26e:	f7fb ff37 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801e272:	b930      	cbnz	r0, 801e282 <on_request+0x62>
 801e274:	4641      	mov	r1, r8
 801e276:	4810      	ldr	r0, [pc, #64]	@ (801e2b8 <on_request+0x98>)
 801e278:	b014      	add	sp, #80	@ 0x50
 801e27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e27e:	f000 b877 	b.w	801e370 <put_memory>
 801e282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e284:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801e288:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801e28c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801e290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e294:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e298:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e29c:	f000 f918 	bl	801e4d0 <rmw_uros_epoch_nanos>
 801e2a0:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801e2a4:	2303      	movs	r3, #3
 801e2a6:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e2aa:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801e2ae:	b014      	add	sp, #80	@ 0x50
 801e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2b4:	2406937c 	.word	0x2406937c
 801e2b8:	2406939c 	.word	0x2406939c

0801e2bc <on_reply>:
 801e2bc:	4822      	ldr	r0, [pc, #136]	@ (801e348 <on_reply+0x8c>)
 801e2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2c2:	6800      	ldr	r0, [r0, #0]
 801e2c4:	b094      	sub	sp, #80	@ 0x50
 801e2c6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801e2c8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801e2cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e2ce:	b3b8      	cbz	r0, 801e340 <on_reply+0x84>
 801e2d0:	461d      	mov	r5, r3
 801e2d2:	e001      	b.n	801e2d8 <on_reply+0x1c>
 801e2d4:	6840      	ldr	r0, [r0, #4]
 801e2d6:	b398      	cbz	r0, 801e340 <on_reply+0x84>
 801e2d8:	6884      	ldr	r4, [r0, #8]
 801e2da:	8b21      	ldrh	r1, [r4, #24]
 801e2dc:	4291      	cmp	r1, r2
 801e2de:	d1f9      	bne.n	801e2d4 <on_reply+0x18>
 801e2e0:	2248      	movs	r2, #72	@ 0x48
 801e2e2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801e2e6:	4668      	mov	r0, sp
 801e2e8:	f001 fcc3 	bl	801fc72 <memcpy>
 801e2ec:	f104 0320 	add.w	r3, r4, #32
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	cb0c      	ldmia	r3, {r2, r3}
 801e2f4:	f7fb fa12 	bl	801971c <rmw_uxrce_get_static_input_buffer_for_entity>
 801e2f8:	4680      	mov	r8, r0
 801e2fa:	b308      	cbz	r0, 801e340 <on_reply+0x84>
 801e2fc:	4630      	mov	r0, r6
 801e2fe:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e302:	463a      	mov	r2, r7
 801e304:	f106 0110 	add.w	r1, r6, #16
 801e308:	f7fb feea 	bl	801a0e0 <ucdr_deserialize_array_uint8_t>
 801e30c:	b930      	cbnz	r0, 801e31c <on_reply+0x60>
 801e30e:	4641      	mov	r1, r8
 801e310:	480e      	ldr	r0, [pc, #56]	@ (801e34c <on_reply+0x90>)
 801e312:	b014      	add	sp, #80	@ 0x50
 801e314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e318:	f000 b82a 	b.w	801e370 <put_memory>
 801e31c:	2200      	movs	r2, #0
 801e31e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801e322:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801e326:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801e32a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801e32e:	f000 f8cf 	bl	801e4d0 <rmw_uros_epoch_nanos>
 801e332:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801e336:	2304      	movs	r3, #4
 801e338:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e33c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801e340:	b014      	add	sp, #80	@ 0x50
 801e342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e346:	bf00      	nop
 801e348:	24064a90 	.word	0x24064a90
 801e34c:	2406939c 	.word	0x2406939c

0801e350 <get_memory>:
 801e350:	4603      	mov	r3, r0
 801e352:	6840      	ldr	r0, [r0, #4]
 801e354:	b158      	cbz	r0, 801e36e <get_memory+0x1e>
 801e356:	6842      	ldr	r2, [r0, #4]
 801e358:	605a      	str	r2, [r3, #4]
 801e35a:	b10a      	cbz	r2, 801e360 <get_memory+0x10>
 801e35c:	2100      	movs	r1, #0
 801e35e:	6011      	str	r1, [r2, #0]
 801e360:	681a      	ldr	r2, [r3, #0]
 801e362:	6042      	str	r2, [r0, #4]
 801e364:	b102      	cbz	r2, 801e368 <get_memory+0x18>
 801e366:	6010      	str	r0, [r2, #0]
 801e368:	2200      	movs	r2, #0
 801e36a:	6002      	str	r2, [r0, #0]
 801e36c:	6018      	str	r0, [r3, #0]
 801e36e:	4770      	bx	lr

0801e370 <put_memory>:
 801e370:	680b      	ldr	r3, [r1, #0]
 801e372:	b10b      	cbz	r3, 801e378 <put_memory+0x8>
 801e374:	684a      	ldr	r2, [r1, #4]
 801e376:	605a      	str	r2, [r3, #4]
 801e378:	684a      	ldr	r2, [r1, #4]
 801e37a:	b102      	cbz	r2, 801e37e <put_memory+0xe>
 801e37c:	6013      	str	r3, [r2, #0]
 801e37e:	6803      	ldr	r3, [r0, #0]
 801e380:	428b      	cmp	r3, r1
 801e382:	6843      	ldr	r3, [r0, #4]
 801e384:	bf08      	it	eq
 801e386:	6002      	streq	r2, [r0, #0]
 801e388:	604b      	str	r3, [r1, #4]
 801e38a:	b103      	cbz	r3, 801e38e <put_memory+0x1e>
 801e38c:	6019      	str	r1, [r3, #0]
 801e38e:	2300      	movs	r3, #0
 801e390:	600b      	str	r3, [r1, #0]
 801e392:	6041      	str	r1, [r0, #4]
 801e394:	4770      	bx	lr
 801e396:	bf00      	nop

0801e398 <rmw_create_guard_condition>:
 801e398:	b538      	push	{r3, r4, r5, lr}
 801e39a:	4605      	mov	r5, r0
 801e39c:	4808      	ldr	r0, [pc, #32]	@ (801e3c0 <rmw_create_guard_condition+0x28>)
 801e39e:	f7ff ffd7 	bl	801e350 <get_memory>
 801e3a2:	4603      	mov	r3, r0
 801e3a4:	b148      	cbz	r0, 801e3ba <rmw_create_guard_condition+0x22>
 801e3a6:	6884      	ldr	r4, [r0, #8]
 801e3a8:	2300      	movs	r3, #0
 801e3aa:	61e5      	str	r5, [r4, #28]
 801e3ac:	7423      	strb	r3, [r4, #16]
 801e3ae:	f7f9 fd15 	bl	8017ddc <rmw_get_implementation_identifier>
 801e3b2:	f104 0314 	add.w	r3, r4, #20
 801e3b6:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801e3ba:	4618      	mov	r0, r3
 801e3bc:	bd38      	pop	{r3, r4, r5, pc}
 801e3be:	bf00      	nop
 801e3c0:	2406933c 	.word	0x2406933c

0801e3c4 <rmw_destroy_guard_condition>:
 801e3c4:	b508      	push	{r3, lr}
 801e3c6:	4b08      	ldr	r3, [pc, #32]	@ (801e3e8 <rmw_destroy_guard_condition+0x24>)
 801e3c8:	6819      	ldr	r1, [r3, #0]
 801e3ca:	b911      	cbnz	r1, 801e3d2 <rmw_destroy_guard_condition+0xe>
 801e3cc:	e00a      	b.n	801e3e4 <rmw_destroy_guard_condition+0x20>
 801e3ce:	6849      	ldr	r1, [r1, #4]
 801e3d0:	b141      	cbz	r1, 801e3e4 <rmw_destroy_guard_condition+0x20>
 801e3d2:	688b      	ldr	r3, [r1, #8]
 801e3d4:	3314      	adds	r3, #20
 801e3d6:	4298      	cmp	r0, r3
 801e3d8:	d1f9      	bne.n	801e3ce <rmw_destroy_guard_condition+0xa>
 801e3da:	4803      	ldr	r0, [pc, #12]	@ (801e3e8 <rmw_destroy_guard_condition+0x24>)
 801e3dc:	f7ff ffc8 	bl	801e370 <put_memory>
 801e3e0:	2000      	movs	r0, #0
 801e3e2:	bd08      	pop	{r3, pc}
 801e3e4:	2001      	movs	r0, #1
 801e3e6:	bd08      	pop	{r3, pc}
 801e3e8:	2406933c 	.word	0x2406933c

0801e3ec <create_topic>:
 801e3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3f0:	4605      	mov	r5, r0
 801e3f2:	b084      	sub	sp, #16
 801e3f4:	4822      	ldr	r0, [pc, #136]	@ (801e480 <create_topic+0x94>)
 801e3f6:	460f      	mov	r7, r1
 801e3f8:	4616      	mov	r6, r2
 801e3fa:	f7ff ffa9 	bl	801e350 <get_memory>
 801e3fe:	4604      	mov	r4, r0
 801e400:	2800      	cmp	r0, #0
 801e402:	d039      	beq.n	801e478 <create_topic+0x8c>
 801e404:	692b      	ldr	r3, [r5, #16]
 801e406:	2102      	movs	r1, #2
 801e408:	6884      	ldr	r4, [r0, #8]
 801e40a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801e40e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801e488 <create_topic+0x9c>
 801e412:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801e416:	1c42      	adds	r2, r0, #1
 801e418:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e41c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801e420:	f7fc f9c0 	bl	801a7a4 <uxr_object_id>
 801e424:	223c      	movs	r2, #60	@ 0x3c
 801e426:	6120      	str	r0, [r4, #16]
 801e428:	4641      	mov	r1, r8
 801e42a:	4638      	mov	r0, r7
 801e42c:	f7fb fb70 	bl	8019b10 <generate_topic_name>
 801e430:	b1f0      	cbz	r0, 801e470 <create_topic+0x84>
 801e432:	4f14      	ldr	r7, [pc, #80]	@ (801e484 <create_topic+0x98>)
 801e434:	4630      	mov	r0, r6
 801e436:	2264      	movs	r2, #100	@ 0x64
 801e438:	4639      	mov	r1, r7
 801e43a:	f7fb fb3b 	bl	8019ab4 <generate_type_name>
 801e43e:	b1b8      	cbz	r0, 801e470 <create_topic+0x84>
 801e440:	6928      	ldr	r0, [r5, #16]
 801e442:	2106      	movs	r1, #6
 801e444:	696b      	ldr	r3, [r5, #20]
 801e446:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801e44a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e44e:	f8cd 8000 	str.w	r8, [sp]
 801e452:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e456:	6811      	ldr	r1, [r2, #0]
 801e458:	6922      	ldr	r2, [r4, #16]
 801e45a:	f7fb ff27 	bl	801a2ac <uxr_buffer_create_topic_bin>
 801e45e:	4602      	mov	r2, r0
 801e460:	6928      	ldr	r0, [r5, #16]
 801e462:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801e466:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801e46a:	f7fb fa57 	bl	801991c <run_xrce_session>
 801e46e:	b918      	cbnz	r0, 801e478 <create_topic+0x8c>
 801e470:	4620      	mov	r0, r4
 801e472:	2400      	movs	r4, #0
 801e474:	f7fb f946 	bl	8019704 <rmw_uxrce_fini_topic_memory>
 801e478:	4620      	mov	r0, r4
 801e47a:	b004      	add	sp, #16
 801e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e480:	240693bc 	.word	0x240693bc
 801e484:	24069430 	.word	0x24069430
 801e488:	240693f4 	.word	0x240693f4

0801e48c <destroy_topic>:
 801e48c:	b538      	push	{r3, r4, r5, lr}
 801e48e:	6985      	ldr	r5, [r0, #24]
 801e490:	b1dd      	cbz	r5, 801e4ca <destroy_topic+0x3e>
 801e492:	4604      	mov	r4, r0
 801e494:	6928      	ldr	r0, [r5, #16]
 801e496:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e49a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e49e:	6922      	ldr	r2, [r4, #16]
 801e4a0:	6819      	ldr	r1, [r3, #0]
 801e4a2:	f7fb fe85 	bl	801a1b0 <uxr_buffer_delete_entity>
 801e4a6:	4602      	mov	r2, r0
 801e4a8:	6928      	ldr	r0, [r5, #16]
 801e4aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e4ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e4b2:	f7fb fa33 	bl	801991c <run_xrce_session>
 801e4b6:	4603      	mov	r3, r0
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	bf14      	ite	ne
 801e4be:	2400      	movne	r4, #0
 801e4c0:	2402      	moveq	r4, #2
 801e4c2:	f7fb f91f 	bl	8019704 <rmw_uxrce_fini_topic_memory>
 801e4c6:	4620      	mov	r0, r4
 801e4c8:	bd38      	pop	{r3, r4, r5, pc}
 801e4ca:	2401      	movs	r4, #1
 801e4cc:	4620      	mov	r0, r4
 801e4ce:	bd38      	pop	{r3, r4, r5, pc}

0801e4d0 <rmw_uros_epoch_nanos>:
 801e4d0:	4b05      	ldr	r3, [pc, #20]	@ (801e4e8 <rmw_uros_epoch_nanos+0x18>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	b123      	cbz	r3, 801e4e0 <rmw_uros_epoch_nanos+0x10>
 801e4d6:	6898      	ldr	r0, [r3, #8]
 801e4d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e4dc:	f7fc bbd8 	b.w	801ac90 <uxr_epoch_nanos>
 801e4e0:	2000      	movs	r0, #0
 801e4e2:	2100      	movs	r1, #0
 801e4e4:	4770      	bx	lr
 801e4e6:	bf00      	nop
 801e4e8:	2406938c 	.word	0x2406938c

0801e4ec <rosidl_runtime_c__String__init>:
 801e4ec:	b510      	push	{r4, lr}
 801e4ee:	4604      	mov	r4, r0
 801e4f0:	b086      	sub	sp, #24
 801e4f2:	b170      	cbz	r0, 801e512 <rosidl_runtime_c__String__init+0x26>
 801e4f4:	a801      	add	r0, sp, #4
 801e4f6:	f7f5 f94d 	bl	8013794 <rcutils_get_default_allocator>
 801e4fa:	9b01      	ldr	r3, [sp, #4]
 801e4fc:	9905      	ldr	r1, [sp, #20]
 801e4fe:	2001      	movs	r0, #1
 801e500:	4798      	blx	r3
 801e502:	6020      	str	r0, [r4, #0]
 801e504:	b128      	cbz	r0, 801e512 <rosidl_runtime_c__String__init+0x26>
 801e506:	2100      	movs	r1, #0
 801e508:	2201      	movs	r2, #1
 801e50a:	7001      	strb	r1, [r0, #0]
 801e50c:	4610      	mov	r0, r2
 801e50e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801e512:	b006      	add	sp, #24
 801e514:	bd10      	pop	{r4, pc}
 801e516:	bf00      	nop

0801e518 <rosidl_runtime_c__String__fini>:
 801e518:	b320      	cbz	r0, 801e564 <rosidl_runtime_c__String__fini+0x4c>
 801e51a:	6803      	ldr	r3, [r0, #0]
 801e51c:	b510      	push	{r4, lr}
 801e51e:	4604      	mov	r4, r0
 801e520:	b086      	sub	sp, #24
 801e522:	b173      	cbz	r3, 801e542 <rosidl_runtime_c__String__fini+0x2a>
 801e524:	6883      	ldr	r3, [r0, #8]
 801e526:	b1f3      	cbz	r3, 801e566 <rosidl_runtime_c__String__fini+0x4e>
 801e528:	a801      	add	r0, sp, #4
 801e52a:	f7f5 f933 	bl	8013794 <rcutils_get_default_allocator>
 801e52e:	9b02      	ldr	r3, [sp, #8]
 801e530:	9905      	ldr	r1, [sp, #20]
 801e532:	6820      	ldr	r0, [r4, #0]
 801e534:	4798      	blx	r3
 801e536:	2300      	movs	r3, #0
 801e538:	e9c4 3300 	strd	r3, r3, [r4]
 801e53c:	60a3      	str	r3, [r4, #8]
 801e53e:	b006      	add	sp, #24
 801e540:	bd10      	pop	{r4, pc}
 801e542:	6843      	ldr	r3, [r0, #4]
 801e544:	b9db      	cbnz	r3, 801e57e <rosidl_runtime_c__String__fini+0x66>
 801e546:	6883      	ldr	r3, [r0, #8]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d0f8      	beq.n	801e53e <rosidl_runtime_c__String__fini+0x26>
 801e54c:	4b12      	ldr	r3, [pc, #72]	@ (801e598 <rosidl_runtime_c__String__fini+0x80>)
 801e54e:	2251      	movs	r2, #81	@ 0x51
 801e550:	2101      	movs	r1, #1
 801e552:	4812      	ldr	r0, [pc, #72]	@ (801e59c <rosidl_runtime_c__String__fini+0x84>)
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	68db      	ldr	r3, [r3, #12]
 801e558:	f001 f8f0 	bl	801f73c <fwrite>
 801e55c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e560:	f000 fdac 	bl	801f0bc <exit>
 801e564:	4770      	bx	lr
 801e566:	4b0c      	ldr	r3, [pc, #48]	@ (801e598 <rosidl_runtime_c__String__fini+0x80>)
 801e568:	224c      	movs	r2, #76	@ 0x4c
 801e56a:	2101      	movs	r1, #1
 801e56c:	480c      	ldr	r0, [pc, #48]	@ (801e5a0 <rosidl_runtime_c__String__fini+0x88>)
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	68db      	ldr	r3, [r3, #12]
 801e572:	f001 f8e3 	bl	801f73c <fwrite>
 801e576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e57a:	f000 fd9f 	bl	801f0bc <exit>
 801e57e:	4b06      	ldr	r3, [pc, #24]	@ (801e598 <rosidl_runtime_c__String__fini+0x80>)
 801e580:	224e      	movs	r2, #78	@ 0x4e
 801e582:	2101      	movs	r1, #1
 801e584:	4807      	ldr	r0, [pc, #28]	@ (801e5a4 <rosidl_runtime_c__String__fini+0x8c>)
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	68db      	ldr	r3, [r3, #12]
 801e58a:	f001 f8d7 	bl	801f73c <fwrite>
 801e58e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e592:	f000 fd93 	bl	801f0bc <exit>
 801e596:	bf00      	nop
 801e598:	240013a0 	.word	0x240013a0
 801e59c:	08022fe4 	.word	0x08022fe4
 801e5a0:	08022f44 	.word	0x08022f44
 801e5a4:	08022f94 	.word	0x08022f94

0801e5a8 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 801e5a8:	3800      	subs	r0, #0
 801e5aa:	bf18      	it	ne
 801e5ac:	2001      	movne	r0, #1
 801e5ae:	4770      	bx	lr

0801e5b0 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 801e5b0:	4770      	bx	lr
 801e5b2:	bf00      	nop

0801e5b4 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 801e5b4:	3800      	subs	r0, #0
 801e5b6:	bf18      	it	ne
 801e5b8:	2001      	movne	r0, #1
 801e5ba:	4770      	bx	lr

0801e5bc <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801e5bc:	4770      	bx	lr
 801e5be:	bf00      	nop

0801e5c0 <ucdr_serialize_string>:
 801e5c0:	b510      	push	{r4, lr}
 801e5c2:	b082      	sub	sp, #8
 801e5c4:	4604      	mov	r4, r0
 801e5c6:	4608      	mov	r0, r1
 801e5c8:	9101      	str	r1, [sp, #4]
 801e5ca:	f7e1 fe93 	bl	80002f4 <strlen>
 801e5ce:	4602      	mov	r2, r0
 801e5d0:	9901      	ldr	r1, [sp, #4]
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	3201      	adds	r2, #1
 801e5d6:	b002      	add	sp, #8
 801e5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5dc:	f7f5 bec0 	b.w	8014360 <ucdr_serialize_sequence_char>

0801e5e0 <ucdr_deserialize_string>:
 801e5e0:	b500      	push	{lr}
 801e5e2:	b083      	sub	sp, #12
 801e5e4:	ab01      	add	r3, sp, #4
 801e5e6:	f7f5 fecd 	bl	8014384 <ucdr_deserialize_sequence_char>
 801e5ea:	b003      	add	sp, #12
 801e5ec:	f85d fb04 	ldr.w	pc, [sp], #4

0801e5f0 <uxr_init_input_best_effort_stream>:
 801e5f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e5f4:	8003      	strh	r3, [r0, #0]
 801e5f6:	4770      	bx	lr

0801e5f8 <uxr_reset_input_best_effort_stream>:
 801e5f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e5fc:	8003      	strh	r3, [r0, #0]
 801e5fe:	4770      	bx	lr

0801e600 <uxr_receive_best_effort_message>:
 801e600:	b538      	push	{r3, r4, r5, lr}
 801e602:	4604      	mov	r4, r0
 801e604:	8800      	ldrh	r0, [r0, #0]
 801e606:	460d      	mov	r5, r1
 801e608:	f000 fd24 	bl	801f054 <uxr_seq_num_cmp>
 801e60c:	4603      	mov	r3, r0
 801e60e:	0fc0      	lsrs	r0, r0, #31
 801e610:	2b00      	cmp	r3, #0
 801e612:	bfb8      	it	lt
 801e614:	8025      	strhlt	r5, [r4, #0]
 801e616:	bd38      	pop	{r3, r4, r5, pc}

0801e618 <on_full_input_buffer>:
 801e618:	b570      	push	{r4, r5, r6, lr}
 801e61a:	460c      	mov	r4, r1
 801e61c:	4605      	mov	r5, r0
 801e61e:	8908      	ldrh	r0, [r1, #8]
 801e620:	682b      	ldr	r3, [r5, #0]
 801e622:	7d26      	ldrb	r6, [r4, #20]
 801e624:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e628:	fbb2 f2f0 	udiv	r2, r2, r0
 801e62c:	eba3 0c01 	sub.w	ip, r3, r1
 801e630:	fbbc fcf2 	udiv	ip, ip, r2
 801e634:	f10c 0c01 	add.w	ip, ip, #1
 801e638:	fa1f f38c 	uxth.w	r3, ip
 801e63c:	fbb3 fcf0 	udiv	ip, r3, r0
 801e640:	fb00 331c 	mls	r3, r0, ip, r3
 801e644:	b29b      	uxth	r3, r3
 801e646:	fb02 f303 	mul.w	r3, r2, r3
 801e64a:	1d18      	adds	r0, r3, #4
 801e64c:	4408      	add	r0, r1
 801e64e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e652:	b116      	cbz	r6, 801e65a <on_full_input_buffer+0x42>
 801e654:	2600      	movs	r6, #0
 801e656:	f840 6c04 	str.w	r6, [r0, #-4]
 801e65a:	2a03      	cmp	r2, #3
 801e65c:	d801      	bhi.n	801e662 <on_full_input_buffer+0x4a>
 801e65e:	2001      	movs	r0, #1
 801e660:	bd70      	pop	{r4, r5, r6, pc}
 801e662:	3308      	adds	r3, #8
 801e664:	4628      	mov	r0, r5
 801e666:	3a04      	subs	r2, #4
 801e668:	4419      	add	r1, r3
 801e66a:	692b      	ldr	r3, [r5, #16]
 801e66c:	f7f4 f832 	bl	80126d4 <ucdr_init_buffer_origin>
 801e670:	4628      	mov	r0, r5
 801e672:	4622      	mov	r2, r4
 801e674:	4902      	ldr	r1, [pc, #8]	@ (801e680 <on_full_input_buffer+0x68>)
 801e676:	f7f4 f809 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801e67a:	2000      	movs	r0, #0
 801e67c:	bd70      	pop	{r4, r5, r6, pc}
 801e67e:	bf00      	nop
 801e680:	0801e619 	.word	0x0801e619

0801e684 <uxr_init_input_reliable_stream>:
 801e684:	b510      	push	{r4, lr}
 801e686:	e9c0 1200 	strd	r1, r2, [r0]
 801e68a:	2400      	movs	r4, #0
 801e68c:	9a02      	ldr	r2, [sp, #8]
 801e68e:	8103      	strh	r3, [r0, #8]
 801e690:	6102      	str	r2, [r0, #16]
 801e692:	7504      	strb	r4, [r0, #20]
 801e694:	b1c3      	cbz	r3, 801e6c8 <uxr_init_input_reliable_stream+0x44>
 801e696:	600c      	str	r4, [r1, #0]
 801e698:	8901      	ldrh	r1, [r0, #8]
 801e69a:	2901      	cmp	r1, #1
 801e69c:	d914      	bls.n	801e6c8 <uxr_init_input_reliable_stream+0x44>
 801e69e:	f04f 0c01 	mov.w	ip, #1
 801e6a2:	6843      	ldr	r3, [r0, #4]
 801e6a4:	f10c 0e01 	add.w	lr, ip, #1
 801e6a8:	fbbc f2f1 	udiv	r2, ip, r1
 801e6ac:	fbb3 f3f1 	udiv	r3, r3, r1
 801e6b0:	fb01 c212 	mls	r2, r1, r2, ip
 801e6b4:	fa1f fc8e 	uxth.w	ip, lr
 801e6b8:	b292      	uxth	r2, r2
 801e6ba:	fb02 f303 	mul.w	r3, r2, r3
 801e6be:	6802      	ldr	r2, [r0, #0]
 801e6c0:	50d4      	str	r4, [r2, r3]
 801e6c2:	8901      	ldrh	r1, [r0, #8]
 801e6c4:	4561      	cmp	r1, ip
 801e6c6:	d8ec      	bhi.n	801e6a2 <uxr_init_input_reliable_stream+0x1e>
 801e6c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e6cc:	60c3      	str	r3, [r0, #12]
 801e6ce:	bd10      	pop	{r4, pc}

0801e6d0 <uxr_reset_input_reliable_stream>:
 801e6d0:	8901      	ldrh	r1, [r0, #8]
 801e6d2:	b1d9      	cbz	r1, 801e70c <uxr_reset_input_reliable_stream+0x3c>
 801e6d4:	b510      	push	{r4, lr}
 801e6d6:	f04f 0e00 	mov.w	lr, #0
 801e6da:	46f4      	mov	ip, lr
 801e6dc:	4674      	mov	r4, lr
 801e6de:	6843      	ldr	r3, [r0, #4]
 801e6e0:	f10e 0e01 	add.w	lr, lr, #1
 801e6e4:	fbbc f2f1 	udiv	r2, ip, r1
 801e6e8:	fbb3 f3f1 	udiv	r3, r3, r1
 801e6ec:	fb01 c212 	mls	r2, r1, r2, ip
 801e6f0:	fa1f fc8e 	uxth.w	ip, lr
 801e6f4:	b292      	uxth	r2, r2
 801e6f6:	fb02 f303 	mul.w	r3, r2, r3
 801e6fa:	6802      	ldr	r2, [r0, #0]
 801e6fc:	50d4      	str	r4, [r2, r3]
 801e6fe:	8901      	ldrh	r1, [r0, #8]
 801e700:	4561      	cmp	r1, ip
 801e702:	d8ec      	bhi.n	801e6de <uxr_reset_input_reliable_stream+0xe>
 801e704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e708:	60c3      	str	r3, [r0, #12]
 801e70a:	bd10      	pop	{r4, pc}
 801e70c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e710:	60c3      	str	r3, [r0, #12]
 801e712:	4770      	bx	lr

0801e714 <uxr_receive_reliable_message>:
 801e714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e718:	4604      	mov	r4, r0
 801e71a:	460d      	mov	r5, r1
 801e71c:	8901      	ldrh	r1, [r0, #8]
 801e71e:	4617      	mov	r7, r2
 801e720:	8980      	ldrh	r0, [r0, #12]
 801e722:	4698      	mov	r8, r3
 801e724:	f000 fc8e 	bl	801f044 <uxr_seq_num_add>
 801e728:	4629      	mov	r1, r5
 801e72a:	4606      	mov	r6, r0
 801e72c:	89a0      	ldrh	r0, [r4, #12]
 801e72e:	f000 fc91 	bl	801f054 <uxr_seq_num_cmp>
 801e732:	2800      	cmp	r0, #0
 801e734:	db0a      	blt.n	801e74c <uxr_receive_reliable_message+0x38>
 801e736:	2600      	movs	r6, #0
 801e738:	4629      	mov	r1, r5
 801e73a:	89e0      	ldrh	r0, [r4, #14]
 801e73c:	f000 fc8a 	bl	801f054 <uxr_seq_num_cmp>
 801e740:	2800      	cmp	r0, #0
 801e742:	da00      	bge.n	801e746 <uxr_receive_reliable_message+0x32>
 801e744:	81e5      	strh	r5, [r4, #14]
 801e746:	4630      	mov	r0, r6
 801e748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e74c:	4630      	mov	r0, r6
 801e74e:	4629      	mov	r1, r5
 801e750:	f000 fc80 	bl	801f054 <uxr_seq_num_cmp>
 801e754:	2800      	cmp	r0, #0
 801e756:	dbee      	blt.n	801e736 <uxr_receive_reliable_message+0x22>
 801e758:	6923      	ldr	r3, [r4, #16]
 801e75a:	4638      	mov	r0, r7
 801e75c:	4798      	blx	r3
 801e75e:	4681      	mov	r9, r0
 801e760:	2101      	movs	r1, #1
 801e762:	89a0      	ldrh	r0, [r4, #12]
 801e764:	f000 fc6e 	bl	801f044 <uxr_seq_num_add>
 801e768:	f1b9 0f00 	cmp.w	r9, #0
 801e76c:	bf08      	it	eq
 801e76e:	4285      	cmpeq	r5, r0
 801e770:	bf0c      	ite	eq
 801e772:	2601      	moveq	r6, #1
 801e774:	2600      	movne	r6, #0
 801e776:	d104      	bne.n	801e782 <uxr_receive_reliable_message+0x6e>
 801e778:	2300      	movs	r3, #0
 801e77a:	9a08      	ldr	r2, [sp, #32]
 801e77c:	81a0      	strh	r0, [r4, #12]
 801e77e:	7013      	strb	r3, [r2, #0]
 801e780:	e7da      	b.n	801e738 <uxr_receive_reliable_message+0x24>
 801e782:	8922      	ldrh	r2, [r4, #8]
 801e784:	6863      	ldr	r3, [r4, #4]
 801e786:	fbb5 f0f2 	udiv	r0, r5, r2
 801e78a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e78e:	fb02 5010 	mls	r0, r2, r0, r5
 801e792:	b280      	uxth	r0, r0
 801e794:	fb03 f000 	mul.w	r0, r3, r0
 801e798:	6823      	ldr	r3, [r4, #0]
 801e79a:	3004      	adds	r0, #4
 801e79c:	4418      	add	r0, r3
 801e79e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d1c7      	bne.n	801e736 <uxr_receive_reliable_message+0x22>
 801e7a6:	4639      	mov	r1, r7
 801e7a8:	4642      	mov	r2, r8
 801e7aa:	f001 fa62 	bl	801fc72 <memcpy>
 801e7ae:	8921      	ldrh	r1, [r4, #8]
 801e7b0:	6863      	ldr	r3, [r4, #4]
 801e7b2:	fbb5 f2f1 	udiv	r2, r5, r1
 801e7b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801e7ba:	fb01 5212 	mls	r2, r1, r2, r5
 801e7be:	b292      	uxth	r2, r2
 801e7c0:	fb02 f303 	mul.w	r3, r2, r3
 801e7c4:	6822      	ldr	r2, [r4, #0]
 801e7c6:	f842 8003 	str.w	r8, [r2, r3]
 801e7ca:	2301      	movs	r3, #1
 801e7cc:	9a08      	ldr	r2, [sp, #32]
 801e7ce:	7013      	strb	r3, [r2, #0]
 801e7d0:	f1b9 0f00 	cmp.w	r9, #0
 801e7d4:	d0af      	beq.n	801e736 <uxr_receive_reliable_message+0x22>
 801e7d6:	89a6      	ldrh	r6, [r4, #12]
 801e7d8:	2101      	movs	r1, #1
 801e7da:	4630      	mov	r0, r6
 801e7dc:	f000 fc32 	bl	801f044 <uxr_seq_num_add>
 801e7e0:	8921      	ldrh	r1, [r4, #8]
 801e7e2:	6863      	ldr	r3, [r4, #4]
 801e7e4:	4606      	mov	r6, r0
 801e7e6:	fbb0 f2f1 	udiv	r2, r0, r1
 801e7ea:	fbb3 f3f1 	udiv	r3, r3, r1
 801e7ee:	fb01 0212 	mls	r2, r1, r2, r0
 801e7f2:	6820      	ldr	r0, [r4, #0]
 801e7f4:	b292      	uxth	r2, r2
 801e7f6:	fb02 f303 	mul.w	r3, r2, r3
 801e7fa:	3304      	adds	r3, #4
 801e7fc:	4418      	add	r0, r3
 801e7fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e802:	2b00      	cmp	r3, #0
 801e804:	d097      	beq.n	801e736 <uxr_receive_reliable_message+0x22>
 801e806:	6923      	ldr	r3, [r4, #16]
 801e808:	4798      	blx	r3
 801e80a:	2802      	cmp	r0, #2
 801e80c:	d002      	beq.n	801e814 <uxr_receive_reliable_message+0x100>
 801e80e:	2801      	cmp	r0, #1
 801e810:	d0e2      	beq.n	801e7d8 <uxr_receive_reliable_message+0xc4>
 801e812:	e790      	b.n	801e736 <uxr_receive_reliable_message+0x22>
 801e814:	2601      	movs	r6, #1
 801e816:	e78f      	b.n	801e738 <uxr_receive_reliable_message+0x24>

0801e818 <uxr_next_input_reliable_buffer_available>:
 801e818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e81c:	4604      	mov	r4, r0
 801e81e:	460f      	mov	r7, r1
 801e820:	8980      	ldrh	r0, [r0, #12]
 801e822:	2101      	movs	r1, #1
 801e824:	4690      	mov	r8, r2
 801e826:	f000 fc0d 	bl	801f044 <uxr_seq_num_add>
 801e82a:	8922      	ldrh	r2, [r4, #8]
 801e82c:	6866      	ldr	r6, [r4, #4]
 801e82e:	fbb0 f3f2 	udiv	r3, r0, r2
 801e832:	fbb6 f6f2 	udiv	r6, r6, r2
 801e836:	fb02 0313 	mls	r3, r2, r3, r0
 801e83a:	b29b      	uxth	r3, r3
 801e83c:	fb03 f606 	mul.w	r6, r3, r6
 801e840:	6823      	ldr	r3, [r4, #0]
 801e842:	3604      	adds	r6, #4
 801e844:	441e      	add	r6, r3
 801e846:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e84a:	f1b9 0f00 	cmp.w	r9, #0
 801e84e:	d023      	beq.n	801e898 <uxr_next_input_reliable_buffer_available+0x80>
 801e850:	4605      	mov	r5, r0
 801e852:	6923      	ldr	r3, [r4, #16]
 801e854:	4630      	mov	r0, r6
 801e856:	4798      	blx	r3
 801e858:	4682      	mov	sl, r0
 801e85a:	b300      	cbz	r0, 801e89e <uxr_next_input_reliable_buffer_available+0x86>
 801e85c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e860:	2101      	movs	r1, #1
 801e862:	4650      	mov	r0, sl
 801e864:	f000 fbee 	bl	801f044 <uxr_seq_num_add>
 801e868:	8921      	ldrh	r1, [r4, #8]
 801e86a:	4682      	mov	sl, r0
 801e86c:	6863      	ldr	r3, [r4, #4]
 801e86e:	6820      	ldr	r0, [r4, #0]
 801e870:	fbba f2f1 	udiv	r2, sl, r1
 801e874:	fbb3 f3f1 	udiv	r3, r3, r1
 801e878:	fb01 a212 	mls	r2, r1, r2, sl
 801e87c:	b292      	uxth	r2, r2
 801e87e:	fb02 f303 	mul.w	r3, r2, r3
 801e882:	3304      	adds	r3, #4
 801e884:	4418      	add	r0, r3
 801e886:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e88a:	b12b      	cbz	r3, 801e898 <uxr_next_input_reliable_buffer_available+0x80>
 801e88c:	6923      	ldr	r3, [r4, #16]
 801e88e:	4798      	blx	r3
 801e890:	2802      	cmp	r0, #2
 801e892:	d01b      	beq.n	801e8cc <uxr_next_input_reliable_buffer_available+0xb4>
 801e894:	2801      	cmp	r0, #1
 801e896:	d0e3      	beq.n	801e860 <uxr_next_input_reliable_buffer_available+0x48>
 801e898:	2000      	movs	r0, #0
 801e89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e89e:	464a      	mov	r2, r9
 801e8a0:	4631      	mov	r1, r6
 801e8a2:	4638      	mov	r0, r7
 801e8a4:	f7f3 ff1e 	bl	80126e4 <ucdr_init_buffer>
 801e8a8:	8921      	ldrh	r1, [r4, #8]
 801e8aa:	6863      	ldr	r3, [r4, #4]
 801e8ac:	2001      	movs	r0, #1
 801e8ae:	fbb5 f2f1 	udiv	r2, r5, r1
 801e8b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801e8b6:	fb01 5212 	mls	r2, r1, r2, r5
 801e8ba:	b292      	uxth	r2, r2
 801e8bc:	fb02 f303 	mul.w	r3, r2, r3
 801e8c0:	6822      	ldr	r2, [r4, #0]
 801e8c2:	f842 a003 	str.w	sl, [r2, r3]
 801e8c6:	81a5      	strh	r5, [r4, #12]
 801e8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8cc:	8920      	ldrh	r0, [r4, #8]
 801e8ce:	eb06 0108 	add.w	r1, r6, r8
 801e8d2:	6863      	ldr	r3, [r4, #4]
 801e8d4:	eba9 0208 	sub.w	r2, r9, r8
 801e8d8:	fbb5 f6f0 	udiv	r6, r5, r0
 801e8dc:	fbb3 f3f0 	udiv	r3, r3, r0
 801e8e0:	fb00 5516 	mls	r5, r0, r6, r5
 801e8e4:	2000      	movs	r0, #0
 801e8e6:	b2ad      	uxth	r5, r5
 801e8e8:	fb03 f505 	mul.w	r5, r3, r5
 801e8ec:	6823      	ldr	r3, [r4, #0]
 801e8ee:	5158      	str	r0, [r3, r5]
 801e8f0:	4638      	mov	r0, r7
 801e8f2:	f7f3 fef7 	bl	80126e4 <ucdr_init_buffer>
 801e8f6:	4638      	mov	r0, r7
 801e8f8:	4622      	mov	r2, r4
 801e8fa:	4903      	ldr	r1, [pc, #12]	@ (801e908 <uxr_next_input_reliable_buffer_available+0xf0>)
 801e8fc:	f7f3 fec6 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801e900:	2001      	movs	r0, #1
 801e902:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801e906:	e7c8      	b.n	801e89a <uxr_next_input_reliable_buffer_available+0x82>
 801e908:	0801e619 	.word	0x0801e619

0801e90c <uxr_process_heartbeat>:
 801e90c:	b538      	push	{r3, r4, r5, lr}
 801e90e:	4611      	mov	r1, r2
 801e910:	4604      	mov	r4, r0
 801e912:	89c0      	ldrh	r0, [r0, #14]
 801e914:	4615      	mov	r5, r2
 801e916:	f000 fb9d 	bl	801f054 <uxr_seq_num_cmp>
 801e91a:	2800      	cmp	r0, #0
 801e91c:	bfb8      	it	lt
 801e91e:	81e5      	strhlt	r5, [r4, #14]
 801e920:	bd38      	pop	{r3, r4, r5, pc}
 801e922:	bf00      	nop

0801e924 <uxr_compute_acknack>:
 801e924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e928:	8903      	ldrh	r3, [r0, #8]
 801e92a:	4604      	mov	r4, r0
 801e92c:	460f      	mov	r7, r1
 801e92e:	8985      	ldrh	r5, [r0, #12]
 801e930:	b1db      	cbz	r3, 801e96a <uxr_compute_acknack+0x46>
 801e932:	4628      	mov	r0, r5
 801e934:	2601      	movs	r6, #1
 801e936:	e004      	b.n	801e942 <uxr_compute_acknack+0x1e>
 801e938:	4566      	cmp	r6, ip
 801e93a:	f106 0601 	add.w	r6, r6, #1
 801e93e:	d214      	bcs.n	801e96a <uxr_compute_acknack+0x46>
 801e940:	89a0      	ldrh	r0, [r4, #12]
 801e942:	b2b1      	uxth	r1, r6
 801e944:	f000 fb7e 	bl	801f044 <uxr_seq_num_add>
 801e948:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e94c:	fbb0 f2fc 	udiv	r2, r0, ip
 801e950:	e9d4 1300 	ldrd	r1, r3, [r4]
 801e954:	fb0c 0212 	mls	r2, ip, r2, r0
 801e958:	fbb3 f3fc 	udiv	r3, r3, ip
 801e95c:	b292      	uxth	r2, r2
 801e95e:	fb02 f303 	mul.w	r3, r2, r3
 801e962:	58cb      	ldr	r3, [r1, r3]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d1e7      	bne.n	801e938 <uxr_compute_acknack+0x14>
 801e968:	4605      	mov	r5, r0
 801e96a:	803d      	strh	r5, [r7, #0]
 801e96c:	2101      	movs	r1, #1
 801e96e:	89e6      	ldrh	r6, [r4, #14]
 801e970:	4628      	mov	r0, r5
 801e972:	f000 fb6b 	bl	801f04c <uxr_seq_num_sub>
 801e976:	4601      	mov	r1, r0
 801e978:	4630      	mov	r0, r6
 801e97a:	f000 fb67 	bl	801f04c <uxr_seq_num_sub>
 801e97e:	4606      	mov	r6, r0
 801e980:	b328      	cbz	r0, 801e9ce <uxr_compute_acknack+0xaa>
 801e982:	f04f 0900 	mov.w	r9, #0
 801e986:	f04f 0801 	mov.w	r8, #1
 801e98a:	464d      	mov	r5, r9
 801e98c:	fa1f f189 	uxth.w	r1, r9
 801e990:	8838      	ldrh	r0, [r7, #0]
 801e992:	f000 fb57 	bl	801f044 <uxr_seq_num_add>
 801e996:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e99a:	6861      	ldr	r1, [r4, #4]
 801e99c:	fa08 fe09 	lsl.w	lr, r8, r9
 801e9a0:	6822      	ldr	r2, [r4, #0]
 801e9a2:	f109 0901 	add.w	r9, r9, #1
 801e9a6:	ea4e 0e05 	orr.w	lr, lr, r5
 801e9aa:	fbb0 f3fc 	udiv	r3, r0, ip
 801e9ae:	fbb1 f1fc 	udiv	r1, r1, ip
 801e9b2:	fb03 001c 	mls	r0, r3, ip, r0
 801e9b6:	b283      	uxth	r3, r0
 801e9b8:	fb01 f303 	mul.w	r3, r1, r3
 801e9bc:	58d3      	ldr	r3, [r2, r3]
 801e9be:	b90b      	cbnz	r3, 801e9c4 <uxr_compute_acknack+0xa0>
 801e9c0:	fa1f f58e 	uxth.w	r5, lr
 801e9c4:	454e      	cmp	r6, r9
 801e9c6:	d1e1      	bne.n	801e98c <uxr_compute_acknack+0x68>
 801e9c8:	4628      	mov	r0, r5
 801e9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9ce:	4605      	mov	r5, r0
 801e9d0:	4628      	mov	r0, r5
 801e9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9d6:	bf00      	nop

0801e9d8 <uxr_init_output_best_effort_stream>:
 801e9d8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801e9dc:	6001      	str	r1, [r0, #0]
 801e9de:	7303      	strb	r3, [r0, #12]
 801e9e0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801e9e4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801e9e8:	4770      	bx	lr
 801e9ea:	bf00      	nop

0801e9ec <uxr_reset_output_best_effort_stream>:
 801e9ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e9f0:	7b03      	ldrb	r3, [r0, #12]
 801e9f2:	81c2      	strh	r2, [r0, #14]
 801e9f4:	6043      	str	r3, [r0, #4]
 801e9f6:	4770      	bx	lr

0801e9f8 <uxr_prepare_best_effort_buffer_to_write>:
 801e9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9fa:	4604      	mov	r4, r0
 801e9fc:	b083      	sub	sp, #12
 801e9fe:	6840      	ldr	r0, [r0, #4]
 801ea00:	460d      	mov	r5, r1
 801ea02:	4616      	mov	r6, r2
 801ea04:	f7fd fec0 	bl	801c788 <uxr_submessage_padding>
 801ea08:	6863      	ldr	r3, [r4, #4]
 801ea0a:	4418      	add	r0, r3
 801ea0c:	68a3      	ldr	r3, [r4, #8]
 801ea0e:	1942      	adds	r2, r0, r5
 801ea10:	4293      	cmp	r3, r2
 801ea12:	bf2c      	ite	cs
 801ea14:	2701      	movcs	r7, #1
 801ea16:	2700      	movcc	r7, #0
 801ea18:	d202      	bcs.n	801ea20 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801ea1a:	4638      	mov	r0, r7
 801ea1c:	b003      	add	sp, #12
 801ea1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea20:	9000      	str	r0, [sp, #0]
 801ea22:	2300      	movs	r3, #0
 801ea24:	4630      	mov	r0, r6
 801ea26:	6821      	ldr	r1, [r4, #0]
 801ea28:	f7f3 fe4a 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801ea2c:	6861      	ldr	r1, [r4, #4]
 801ea2e:	4638      	mov	r0, r7
 801ea30:	4429      	add	r1, r5
 801ea32:	6061      	str	r1, [r4, #4]
 801ea34:	b003      	add	sp, #12
 801ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ea38 <uxr_prepare_best_effort_buffer_to_send>:
 801ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea3c:	4604      	mov	r4, r0
 801ea3e:	461d      	mov	r5, r3
 801ea40:	6840      	ldr	r0, [r0, #4]
 801ea42:	7b23      	ldrb	r3, [r4, #12]
 801ea44:	4298      	cmp	r0, r3
 801ea46:	bf8c      	ite	hi
 801ea48:	2601      	movhi	r6, #1
 801ea4a:	2600      	movls	r6, #0
 801ea4c:	d802      	bhi.n	801ea54 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ea4e:	4630      	mov	r0, r6
 801ea50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea54:	4688      	mov	r8, r1
 801ea56:	89e0      	ldrh	r0, [r4, #14]
 801ea58:	2101      	movs	r1, #1
 801ea5a:	4617      	mov	r7, r2
 801ea5c:	f000 faf2 	bl	801f044 <uxr_seq_num_add>
 801ea60:	6823      	ldr	r3, [r4, #0]
 801ea62:	81e0      	strh	r0, [r4, #14]
 801ea64:	8028      	strh	r0, [r5, #0]
 801ea66:	4630      	mov	r0, r6
 801ea68:	f8c8 3000 	str.w	r3, [r8]
 801ea6c:	6863      	ldr	r3, [r4, #4]
 801ea6e:	603b      	str	r3, [r7, #0]
 801ea70:	7b23      	ldrb	r3, [r4, #12]
 801ea72:	6063      	str	r3, [r4, #4]
 801ea74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ea78 <on_full_output_buffer>:
 801ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea7a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ea7e:	460c      	mov	r4, r1
 801ea80:	6803      	ldr	r3, [r0, #0]
 801ea82:	4605      	mov	r5, r0
 801ea84:	7b26      	ldrb	r6, [r4, #12]
 801ea86:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ea8a:	fbb2 f2fc 	udiv	r2, r2, ip
 801ea8e:	eba3 0e01 	sub.w	lr, r3, r1
 801ea92:	6903      	ldr	r3, [r0, #16]
 801ea94:	fbbe fef2 	udiv	lr, lr, r2
 801ea98:	f10e 0e01 	add.w	lr, lr, #1
 801ea9c:	fa1f fe8e 	uxth.w	lr, lr
 801eaa0:	fbbe f7fc 	udiv	r7, lr, ip
 801eaa4:	fb0c ec17 	mls	ip, ip, r7, lr
 801eaa8:	fa1f fc8c 	uxth.w	ip, ip
 801eaac:	fb02 fc0c 	mul.w	ip, r2, ip
 801eab0:	f851 200c 	ldr.w	r2, [r1, ip]
 801eab4:	44b4      	add	ip, r6
 801eab6:	1b92      	subs	r2, r2, r6
 801eab8:	f10c 0c08 	add.w	ip, ip, #8
 801eabc:	3a04      	subs	r2, #4
 801eabe:	4461      	add	r1, ip
 801eac0:	f7f3 fe08 	bl	80126d4 <ucdr_init_buffer_origin>
 801eac4:	4628      	mov	r0, r5
 801eac6:	4622      	mov	r2, r4
 801eac8:	4902      	ldr	r1, [pc, #8]	@ (801ead4 <on_full_output_buffer+0x5c>)
 801eaca:	f7f3 fddf 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801eace:	2000      	movs	r0, #0
 801ead0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ead2:	bf00      	nop
 801ead4:	0801ea79 	.word	0x0801ea79

0801ead8 <uxr_init_output_reliable_stream>:
 801ead8:	b530      	push	{r4, r5, lr}
 801eada:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801eade:	8103      	strh	r3, [r0, #8]
 801eae0:	7304      	strb	r4, [r0, #12]
 801eae2:	e9c0 1200 	strd	r1, r2, [r0]
 801eae6:	b1e3      	cbz	r3, 801eb22 <uxr_init_output_reliable_stream+0x4a>
 801eae8:	600c      	str	r4, [r1, #0]
 801eaea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801eaee:	f1bc 0f01 	cmp.w	ip, #1
 801eaf2:	d916      	bls.n	801eb22 <uxr_init_output_reliable_stream+0x4a>
 801eaf4:	f04f 0e01 	mov.w	lr, #1
 801eaf8:	6843      	ldr	r3, [r0, #4]
 801eafa:	f10e 0501 	add.w	r5, lr, #1
 801eafe:	7b04      	ldrb	r4, [r0, #12]
 801eb00:	6801      	ldr	r1, [r0, #0]
 801eb02:	fbbe f2fc 	udiv	r2, lr, ip
 801eb06:	fbb3 f3fc 	udiv	r3, r3, ip
 801eb0a:	fb0c e212 	mls	r2, ip, r2, lr
 801eb0e:	fa1f fe85 	uxth.w	lr, r5
 801eb12:	b292      	uxth	r2, r2
 801eb14:	fb02 f303 	mul.w	r3, r2, r3
 801eb18:	50cc      	str	r4, [r1, r3]
 801eb1a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801eb1e:	45f4      	cmp	ip, lr
 801eb20:	d8ea      	bhi.n	801eaf8 <uxr_init_output_reliable_stream+0x20>
 801eb22:	4b07      	ldr	r3, [pc, #28]	@ (801eb40 <uxr_init_output_reliable_stream+0x68>)
 801eb24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801eb28:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801eb2c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801eb30:	f8c0 300e 	str.w	r3, [r0, #14]
 801eb34:	2300      	movs	r3, #0
 801eb36:	8242      	strh	r2, [r0, #18]
 801eb38:	8403      	strh	r3, [r0, #32]
 801eb3a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801eb3e:	bd30      	pop	{r4, r5, pc}
 801eb40:	ffff0000 	.word	0xffff0000
 801eb44:	00000000 	.word	0x00000000

0801eb48 <uxr_reset_output_reliable_stream>:
 801eb48:	8901      	ldrh	r1, [r0, #8]
 801eb4a:	b510      	push	{r4, lr}
 801eb4c:	b1b1      	cbz	r1, 801eb7c <uxr_reset_output_reliable_stream+0x34>
 801eb4e:	f04f 0e00 	mov.w	lr, #0
 801eb52:	46f4      	mov	ip, lr
 801eb54:	6843      	ldr	r3, [r0, #4]
 801eb56:	f10e 0e01 	add.w	lr, lr, #1
 801eb5a:	7b04      	ldrb	r4, [r0, #12]
 801eb5c:	fbbc f2f1 	udiv	r2, ip, r1
 801eb60:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb64:	fb01 c212 	mls	r2, r1, r2, ip
 801eb68:	fa1f fc8e 	uxth.w	ip, lr
 801eb6c:	b292      	uxth	r2, r2
 801eb6e:	fb02 f303 	mul.w	r3, r2, r3
 801eb72:	6802      	ldr	r2, [r0, #0]
 801eb74:	50d4      	str	r4, [r2, r3]
 801eb76:	8901      	ldrh	r1, [r0, #8]
 801eb78:	4561      	cmp	r1, ip
 801eb7a:	d8eb      	bhi.n	801eb54 <uxr_reset_output_reliable_stream+0xc>
 801eb7c:	4b08      	ldr	r3, [pc, #32]	@ (801eba0 <uxr_reset_output_reliable_stream+0x58>)
 801eb7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801eb82:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801eb98 <uxr_reset_output_reliable_stream+0x50>
 801eb86:	f8c0 300e 	str.w	r3, [r0, #14]
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	8242      	strh	r2, [r0, #18]
 801eb8e:	8403      	strh	r3, [r0, #32]
 801eb90:	ed80 7b06 	vstr	d7, [r0, #24]
 801eb94:	bd10      	pop	{r4, pc}
 801eb96:	bf00      	nop
 801eb98:	ffffffff 	.word	0xffffffff
 801eb9c:	7fffffff 	.word	0x7fffffff
 801eba0:	ffff0000 	.word	0xffff0000

0801eba4 <uxr_prepare_reliable_buffer_to_write>:
 801eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eba8:	4604      	mov	r4, r0
 801ebaa:	b091      	sub	sp, #68	@ 0x44
 801ebac:	8900      	ldrh	r0, [r0, #8]
 801ebae:	468b      	mov	fp, r1
 801ebb0:	89e6      	ldrh	r6, [r4, #14]
 801ebb2:	9204      	str	r2, [sp, #16]
 801ebb4:	6865      	ldr	r5, [r4, #4]
 801ebb6:	6823      	ldr	r3, [r4, #0]
 801ebb8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801ebbc:	fbb6 f2f0 	udiv	r2, r6, r0
 801ebc0:	fbb5 f5f0 	udiv	r5, r5, r0
 801ebc4:	fb00 6212 	mls	r2, r0, r2, r6
 801ebc8:	1f2f      	subs	r7, r5, #4
 801ebca:	b292      	uxth	r2, r2
 801ebcc:	fb05 3202 	mla	r2, r5, r2, r3
 801ebd0:	1d11      	adds	r1, r2, #4
 801ebd2:	f8d2 8000 	ldr.w	r8, [r2]
 801ebd6:	9103      	str	r1, [sp, #12]
 801ebd8:	2800      	cmp	r0, #0
 801ebda:	f000 814a 	beq.w	801ee72 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801ebde:	f04f 0c00 	mov.w	ip, #0
 801ebe2:	46e2      	mov	sl, ip
 801ebe4:	4661      	mov	r1, ip
 801ebe6:	f10c 0c01 	add.w	ip, ip, #1
 801ebea:	fbb1 f2f0 	udiv	r2, r1, r0
 801ebee:	fb00 1212 	mls	r2, r0, r2, r1
 801ebf2:	fa1f f18c 	uxth.w	r1, ip
 801ebf6:	b292      	uxth	r2, r2
 801ebf8:	fb05 f202 	mul.w	r2, r5, r2
 801ebfc:	589a      	ldr	r2, [r3, r2]
 801ebfe:	454a      	cmp	r2, r9
 801ec00:	d103      	bne.n	801ec0a <uxr_prepare_reliable_buffer_to_write+0x66>
 801ec02:	f10a 0a01 	add.w	sl, sl, #1
 801ec06:	fa1f fa8a 	uxth.w	sl, sl
 801ec0a:	4281      	cmp	r1, r0
 801ec0c:	d3eb      	bcc.n	801ebe6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801ec0e:	4640      	mov	r0, r8
 801ec10:	2104      	movs	r1, #4
 801ec12:	f8cd a014 	str.w	sl, [sp, #20]
 801ec16:	f7f3 fd69 	bl	80126ec <ucdr_alignment>
 801ec1a:	4480      	add	r8, r0
 801ec1c:	eb08 020b 	add.w	r2, r8, fp
 801ec20:	42ba      	cmp	r2, r7
 801ec22:	f240 80ca 	bls.w	801edba <uxr_prepare_reliable_buffer_to_write+0x216>
 801ec26:	7b22      	ldrb	r2, [r4, #12]
 801ec28:	445a      	add	r2, fp
 801ec2a:	42ba      	cmp	r2, r7
 801ec2c:	f240 80b2 	bls.w	801ed94 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801ec30:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801ec34:	b2bb      	uxth	r3, r7
 801ec36:	eba2 0209 	sub.w	r2, r2, r9
 801ec3a:	441a      	add	r2, r3
 801ec3c:	b292      	uxth	r2, r2
 801ec3e:	fb0a f902 	mul.w	r9, sl, r2
 801ec42:	9205      	str	r2, [sp, #20]
 801ec44:	45d9      	cmp	r9, fp
 801ec46:	9206      	str	r2, [sp, #24]
 801ec48:	f0c0 80b3 	bcc.w	801edb2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ec4c:	f108 0204 	add.w	r2, r8, #4
 801ec50:	42ba      	cmp	r2, r7
 801ec52:	f080 80da 	bcs.w	801ee0a <uxr_prepare_reliable_buffer_to_write+0x266>
 801ec56:	f1a3 0904 	sub.w	r9, r3, #4
 801ec5a:	9b05      	ldr	r3, [sp, #20]
 801ec5c:	eba9 0908 	sub.w	r9, r9, r8
 801ec60:	fa1f f989 	uxth.w	r9, r9
 801ec64:	ebab 0b09 	sub.w	fp, fp, r9
 801ec68:	fbbb f2f3 	udiv	r2, fp, r3
 801ec6c:	fb03 b312 	mls	r3, r3, r2, fp
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	f040 80c4 	bne.w	801edfe <uxr_prepare_reliable_buffer_to_write+0x25a>
 801ec76:	b293      	uxth	r3, r2
 801ec78:	4553      	cmp	r3, sl
 801ec7a:	f200 809a 	bhi.w	801edb2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	f000 80f9 	beq.w	801ee76 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801ec84:	f8cd 801c 	str.w	r8, [sp, #28]
 801ec88:	f04f 0a00 	mov.w	sl, #0
 801ec8c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ec90:	f10d 0b20 	add.w	fp, sp, #32
 801ec94:	9505      	str	r5, [sp, #20]
 801ec96:	461d      	mov	r5, r3
 801ec98:	e000      	b.n	801ec9c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801ec9a:	46c1      	mov	r9, r8
 801ec9c:	8922      	ldrh	r2, [r4, #8]
 801ec9e:	4658      	mov	r0, fp
 801eca0:	6863      	ldr	r3, [r4, #4]
 801eca2:	f10a 0a01 	add.w	sl, sl, #1
 801eca6:	fbb6 f1f2 	udiv	r1, r6, r2
 801ecaa:	fbb3 f3f2 	udiv	r3, r3, r2
 801ecae:	fb02 6111 	mls	r1, r2, r1, r6
 801ecb2:	463a      	mov	r2, r7
 801ecb4:	b289      	uxth	r1, r1
 801ecb6:	fb03 f101 	mul.w	r1, r3, r1
 801ecba:	6823      	ldr	r3, [r4, #0]
 801ecbc:	3104      	adds	r1, #4
 801ecbe:	4419      	add	r1, r3
 801ecc0:	2300      	movs	r3, #0
 801ecc2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801ecc6:	f8cd c000 	str.w	ip, [sp]
 801ecca:	f7f3 fcf9 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801ecce:	464a      	mov	r2, r9
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	210d      	movs	r1, #13
 801ecd4:	4658      	mov	r0, fp
 801ecd6:	f7fd fd17 	bl	801c708 <uxr_buffer_submessage_header>
 801ecda:	8921      	ldrh	r1, [r4, #8]
 801ecdc:	6863      	ldr	r3, [r4, #4]
 801ecde:	4630      	mov	r0, r6
 801ece0:	fbb6 f2f1 	udiv	r2, r6, r1
 801ece4:	fbb3 f3f1 	udiv	r3, r3, r1
 801ece8:	fb01 6212 	mls	r2, r1, r2, r6
 801ecec:	2101      	movs	r1, #1
 801ecee:	b292      	uxth	r2, r2
 801ecf0:	fb02 f303 	mul.w	r3, r2, r3
 801ecf4:	6822      	ldr	r2, [r4, #0]
 801ecf6:	50d7      	str	r7, [r2, r3]
 801ecf8:	f000 f9a4 	bl	801f044 <uxr_seq_num_add>
 801ecfc:	4606      	mov	r6, r0
 801ecfe:	fa1f f38a 	uxth.w	r3, sl
 801ed02:	429d      	cmp	r5, r3
 801ed04:	d8c9      	bhi.n	801ec9a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801ed06:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ed0a:	9d05      	ldr	r5, [sp, #20]
 801ed0c:	8920      	ldrh	r0, [r4, #8]
 801ed0e:	463a      	mov	r2, r7
 801ed10:	6863      	ldr	r3, [r4, #4]
 801ed12:	fbb6 f1f0 	udiv	r1, r6, r0
 801ed16:	fbb3 f3f0 	udiv	r3, r3, r0
 801ed1a:	fb00 6111 	mls	r1, r0, r1, r6
 801ed1e:	4658      	mov	r0, fp
 801ed20:	b289      	uxth	r1, r1
 801ed22:	fb01 f303 	mul.w	r3, r1, r3
 801ed26:	6821      	ldr	r1, [r4, #0]
 801ed28:	3304      	adds	r3, #4
 801ed2a:	4419      	add	r1, r3
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801ed32:	9700      	str	r7, [sp, #0]
 801ed34:	f7f3 fcc4 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801ed38:	9f06      	ldr	r7, [sp, #24]
 801ed3a:	4658      	mov	r0, fp
 801ed3c:	2302      	movs	r3, #2
 801ed3e:	b2ba      	uxth	r2, r7
 801ed40:	210d      	movs	r1, #13
 801ed42:	f7fd fce1 	bl	801c708 <uxr_buffer_submessage_header>
 801ed46:	f108 0104 	add.w	r1, r8, #4
 801ed4a:	9b03      	ldr	r3, [sp, #12]
 801ed4c:	f1a5 0208 	sub.w	r2, r5, #8
 801ed50:	8925      	ldrh	r5, [r4, #8]
 801ed52:	440b      	add	r3, r1
 801ed54:	eba2 0208 	sub.w	r2, r2, r8
 801ed58:	fbb6 f0f5 	udiv	r0, r6, r5
 801ed5c:	4619      	mov	r1, r3
 801ed5e:	6863      	ldr	r3, [r4, #4]
 801ed60:	fb05 6010 	mls	r0, r5, r0, r6
 801ed64:	fbb3 f3f5 	udiv	r3, r3, r5
 801ed68:	b280      	uxth	r0, r0
 801ed6a:	6825      	ldr	r5, [r4, #0]
 801ed6c:	fb00 f303 	mul.w	r3, r0, r3
 801ed70:	7b20      	ldrb	r0, [r4, #12]
 801ed72:	3004      	adds	r0, #4
 801ed74:	4438      	add	r0, r7
 801ed76:	50e8      	str	r0, [r5, r3]
 801ed78:	9d04      	ldr	r5, [sp, #16]
 801ed7a:	4628      	mov	r0, r5
 801ed7c:	f7f3 fcb2 	bl	80126e4 <ucdr_init_buffer>
 801ed80:	4628      	mov	r0, r5
 801ed82:	4622      	mov	r2, r4
 801ed84:	493d      	ldr	r1, [pc, #244]	@ (801ee7c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ed86:	f7f3 fc81 	bl	801268c <ucdr_set_on_full_buffer_callback>
 801ed8a:	2001      	movs	r0, #1
 801ed8c:	81e6      	strh	r6, [r4, #14]
 801ed8e:	b011      	add	sp, #68	@ 0x44
 801ed90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed94:	2101      	movs	r1, #1
 801ed96:	89e0      	ldrh	r0, [r4, #14]
 801ed98:	f000 f954 	bl	801f044 <uxr_seq_num_add>
 801ed9c:	4605      	mov	r5, r0
 801ed9e:	8921      	ldrh	r1, [r4, #8]
 801eda0:	8a60      	ldrh	r0, [r4, #18]
 801eda2:	f000 f94f 	bl	801f044 <uxr_seq_num_add>
 801eda6:	4601      	mov	r1, r0
 801eda8:	4628      	mov	r0, r5
 801edaa:	f000 f953 	bl	801f054 <uxr_seq_num_cmp>
 801edae:	2800      	cmp	r0, #0
 801edb0:	dd44      	ble.n	801ee3c <uxr_prepare_reliable_buffer_to_write+0x298>
 801edb2:	2000      	movs	r0, #0
 801edb4:	b011      	add	sp, #68	@ 0x44
 801edb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edba:	8921      	ldrh	r1, [r4, #8]
 801edbc:	8a60      	ldrh	r0, [r4, #18]
 801edbe:	9205      	str	r2, [sp, #20]
 801edc0:	f000 f940 	bl	801f044 <uxr_seq_num_add>
 801edc4:	4601      	mov	r1, r0
 801edc6:	4630      	mov	r0, r6
 801edc8:	f000 f944 	bl	801f054 <uxr_seq_num_cmp>
 801edcc:	2800      	cmp	r0, #0
 801edce:	9a05      	ldr	r2, [sp, #20]
 801edd0:	dcef      	bgt.n	801edb2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801edd2:	8925      	ldrh	r5, [r4, #8]
 801edd4:	e9d4 7300 	ldrd	r7, r3, [r4]
 801edd8:	fbb6 f4f5 	udiv	r4, r6, r5
 801eddc:	fbb3 f3f5 	udiv	r3, r3, r5
 801ede0:	fb05 6414 	mls	r4, r5, r4, r6
 801ede4:	b2a4      	uxth	r4, r4
 801ede6:	fb04 f303 	mul.w	r3, r4, r3
 801edea:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801edee:	50fa      	str	r2, [r7, r3]
 801edf0:	2300      	movs	r3, #0
 801edf2:	f8cd 8000 	str.w	r8, [sp]
 801edf6:	f7f3 fc63 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801edfa:	2001      	movs	r0, #1
 801edfc:	e7da      	b.n	801edb4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801edfe:	3201      	adds	r2, #1
 801ee00:	9306      	str	r3, [sp, #24]
 801ee02:	b293      	uxth	r3, r2
 801ee04:	4553      	cmp	r3, sl
 801ee06:	d8d4      	bhi.n	801edb2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ee08:	e739      	b.n	801ec7e <uxr_prepare_reliable_buffer_to_write+0xda>
 801ee0a:	4630      	mov	r0, r6
 801ee0c:	2101      	movs	r1, #1
 801ee0e:	9307      	str	r3, [sp, #28]
 801ee10:	f000 f918 	bl	801f044 <uxr_seq_num_add>
 801ee14:	4606      	mov	r6, r0
 801ee16:	8920      	ldrh	r0, [r4, #8]
 801ee18:	6862      	ldr	r2, [r4, #4]
 801ee1a:	fbb6 f1f0 	udiv	r1, r6, r0
 801ee1e:	fbb2 f2f0 	udiv	r2, r2, r0
 801ee22:	fb00 6111 	mls	r1, r0, r1, r6
 801ee26:	b289      	uxth	r1, r1
 801ee28:	fb01 f202 	mul.w	r2, r1, r2
 801ee2c:	6821      	ldr	r1, [r4, #0]
 801ee2e:	3204      	adds	r2, #4
 801ee30:	188b      	adds	r3, r1, r2
 801ee32:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ee36:	9303      	str	r3, [sp, #12]
 801ee38:	9b07      	ldr	r3, [sp, #28]
 801ee3a:	e70c      	b.n	801ec56 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ee3c:	8921      	ldrh	r1, [r4, #8]
 801ee3e:	6863      	ldr	r3, [r4, #4]
 801ee40:	9804      	ldr	r0, [sp, #16]
 801ee42:	fbb5 f2f1 	udiv	r2, r5, r1
 801ee46:	fbb3 f3f1 	udiv	r3, r3, r1
 801ee4a:	fb01 5212 	mls	r2, r1, r2, r5
 801ee4e:	6821      	ldr	r1, [r4, #0]
 801ee50:	b292      	uxth	r2, r2
 801ee52:	fb02 f303 	mul.w	r3, r2, r3
 801ee56:	7b22      	ldrb	r2, [r4, #12]
 801ee58:	3304      	adds	r3, #4
 801ee5a:	445a      	add	r2, fp
 801ee5c:	4419      	add	r1, r3
 801ee5e:	f841 2c04 	str.w	r2, [r1, #-4]
 801ee62:	7b23      	ldrb	r3, [r4, #12]
 801ee64:	9300      	str	r3, [sp, #0]
 801ee66:	2300      	movs	r3, #0
 801ee68:	f7f3 fc2a 	bl	80126c0 <ucdr_init_buffer_origin_offset>
 801ee6c:	2001      	movs	r0, #1
 801ee6e:	81e5      	strh	r5, [r4, #14]
 801ee70:	e7a0      	b.n	801edb4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801ee72:	4682      	mov	sl, r0
 801ee74:	e6cb      	b.n	801ec0e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ee76:	f10d 0b20 	add.w	fp, sp, #32
 801ee7a:	e747      	b.n	801ed0c <uxr_prepare_reliable_buffer_to_write+0x168>
 801ee7c:	0801ea79 	.word	0x0801ea79

0801ee80 <uxr_prepare_next_reliable_buffer_to_send>:
 801ee80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee82:	4604      	mov	r4, r0
 801ee84:	461d      	mov	r5, r3
 801ee86:	460f      	mov	r7, r1
 801ee88:	8a00      	ldrh	r0, [r0, #16]
 801ee8a:	2101      	movs	r1, #1
 801ee8c:	4616      	mov	r6, r2
 801ee8e:	f000 f8d9 	bl	801f044 <uxr_seq_num_add>
 801ee92:	8028      	strh	r0, [r5, #0]
 801ee94:	8922      	ldrh	r2, [r4, #8]
 801ee96:	6863      	ldr	r3, [r4, #4]
 801ee98:	fbb0 f1f2 	udiv	r1, r0, r2
 801ee9c:	fbb3 f3f2 	udiv	r3, r3, r2
 801eea0:	fb02 0c11 	mls	ip, r2, r1, r0
 801eea4:	89e1      	ldrh	r1, [r4, #14]
 801eea6:	fa1f fc8c 	uxth.w	ip, ip
 801eeaa:	fb0c fc03 	mul.w	ip, ip, r3
 801eeae:	6823      	ldr	r3, [r4, #0]
 801eeb0:	f10c 0c04 	add.w	ip, ip, #4
 801eeb4:	4463      	add	r3, ip
 801eeb6:	603b      	str	r3, [r7, #0]
 801eeb8:	6823      	ldr	r3, [r4, #0]
 801eeba:	449c      	add	ip, r3
 801eebc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801eec0:	6033      	str	r3, [r6, #0]
 801eec2:	f000 f8c7 	bl	801f054 <uxr_seq_num_cmp>
 801eec6:	2800      	cmp	r0, #0
 801eec8:	dd01      	ble.n	801eece <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801eeca:	2000      	movs	r0, #0
 801eecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eece:	7b23      	ldrb	r3, [r4, #12]
 801eed0:	6832      	ldr	r2, [r6, #0]
 801eed2:	429a      	cmp	r2, r3
 801eed4:	d9f9      	bls.n	801eeca <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801eed6:	8a61      	ldrh	r1, [r4, #18]
 801eed8:	8a20      	ldrh	r0, [r4, #16]
 801eeda:	f000 f8b7 	bl	801f04c <uxr_seq_num_sub>
 801eede:	8923      	ldrh	r3, [r4, #8]
 801eee0:	4283      	cmp	r3, r0
 801eee2:	d0f2      	beq.n	801eeca <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801eee4:	8828      	ldrh	r0, [r5, #0]
 801eee6:	89e3      	ldrh	r3, [r4, #14]
 801eee8:	8220      	strh	r0, [r4, #16]
 801eeea:	4298      	cmp	r0, r3
 801eeec:	d001      	beq.n	801eef2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801eeee:	2001      	movs	r0, #1
 801eef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eef2:	2101      	movs	r1, #1
 801eef4:	f000 f8a6 	bl	801f044 <uxr_seq_num_add>
 801eef8:	4603      	mov	r3, r0
 801eefa:	2001      	movs	r0, #1
 801eefc:	81e3      	strh	r3, [r4, #14]
 801eefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ef00 <uxr_update_output_stream_heartbeat_timestamp>:
 801ef00:	b570      	push	{r4, r5, r6, lr}
 801ef02:	8a01      	ldrh	r1, [r0, #16]
 801ef04:	4604      	mov	r4, r0
 801ef06:	8a40      	ldrh	r0, [r0, #18]
 801ef08:	4615      	mov	r5, r2
 801ef0a:	461e      	mov	r6, r3
 801ef0c:	f000 f8a2 	bl	801f054 <uxr_seq_num_cmp>
 801ef10:	2800      	cmp	r0, #0
 801ef12:	db07      	blt.n	801ef24 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ef14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ef18:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ef1c:	2000      	movs	r0, #0
 801ef1e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ef22:	bd70      	pop	{r4, r5, r6, pc}
 801ef24:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ef28:	b940      	cbnz	r0, 801ef3c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801ef2a:	2301      	movs	r3, #1
 801ef2c:	f884 3020 	strb.w	r3, [r4, #32]
 801ef30:	3564      	adds	r5, #100	@ 0x64
 801ef32:	f146 0600 	adc.w	r6, r6, #0
 801ef36:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ef3a:	bd70      	pop	{r4, r5, r6, pc}
 801ef3c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ef40:	4295      	cmp	r5, r2
 801ef42:	eb76 0303 	sbcs.w	r3, r6, r3
 801ef46:	db04      	blt.n	801ef52 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801ef48:	1c43      	adds	r3, r0, #1
 801ef4a:	2001      	movs	r0, #1
 801ef4c:	f884 3020 	strb.w	r3, [r4, #32]
 801ef50:	e7ee      	b.n	801ef30 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ef52:	2000      	movs	r0, #0
 801ef54:	e7ec      	b.n	801ef30 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ef56:	bf00      	nop

0801ef58 <uxr_begin_output_nack_buffer_it>:
 801ef58:	8a40      	ldrh	r0, [r0, #18]
 801ef5a:	4770      	bx	lr

0801ef5c <uxr_next_reliable_nack_buffer_to_send>:
 801ef5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef60:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801ef64:	b197      	cbz	r7, 801ef8c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801ef66:	4680      	mov	r8, r0
 801ef68:	460d      	mov	r5, r1
 801ef6a:	4616      	mov	r6, r2
 801ef6c:	461c      	mov	r4, r3
 801ef6e:	8818      	ldrh	r0, [r3, #0]
 801ef70:	2101      	movs	r1, #1
 801ef72:	f000 f867 	bl	801f044 <uxr_seq_num_add>
 801ef76:	8020      	strh	r0, [r4, #0]
 801ef78:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801ef7c:	f000 f86a 	bl	801f054 <uxr_seq_num_cmp>
 801ef80:	2800      	cmp	r0, #0
 801ef82:	dd06      	ble.n	801ef92 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801ef84:	2300      	movs	r3, #0
 801ef86:	461f      	mov	r7, r3
 801ef88:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801ef8c:	4638      	mov	r0, r7
 801ef8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef92:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801ef96:	8820      	ldrh	r0, [r4, #0]
 801ef98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ef9c:	fbb0 f3f2 	udiv	r3, r0, r2
 801efa0:	fbb1 fcf2 	udiv	ip, r1, r2
 801efa4:	fb02 0313 	mls	r3, r2, r3, r0
 801efa8:	b29b      	uxth	r3, r3
 801efaa:	fb03 fc0c 	mul.w	ip, r3, ip
 801efae:	f8d8 3000 	ldr.w	r3, [r8]
 801efb2:	f10c 0c04 	add.w	ip, ip, #4
 801efb6:	4463      	add	r3, ip
 801efb8:	602b      	str	r3, [r5, #0]
 801efba:	f8d8 3000 	ldr.w	r3, [r8]
 801efbe:	4463      	add	r3, ip
 801efc0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801efc4:	6033      	str	r3, [r6, #0]
 801efc6:	f898 200c 	ldrb.w	r2, [r8, #12]
 801efca:	429a      	cmp	r2, r3
 801efcc:	d0d0      	beq.n	801ef70 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801efce:	e7dd      	b.n	801ef8c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801efd0 <uxr_process_acknack>:
 801efd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efd2:	4604      	mov	r4, r0
 801efd4:	460e      	mov	r6, r1
 801efd6:	4610      	mov	r0, r2
 801efd8:	2101      	movs	r1, #1
 801efda:	f000 f837 	bl	801f04c <uxr_seq_num_sub>
 801efde:	8a61      	ldrh	r1, [r4, #18]
 801efe0:	f000 f834 	bl	801f04c <uxr_seq_num_sub>
 801efe4:	b1c8      	cbz	r0, 801f01a <uxr_process_acknack+0x4a>
 801efe6:	4605      	mov	r5, r0
 801efe8:	2700      	movs	r7, #0
 801efea:	2101      	movs	r1, #1
 801efec:	8a60      	ldrh	r0, [r4, #18]
 801efee:	f000 f829 	bl	801f044 <uxr_seq_num_add>
 801eff2:	8923      	ldrh	r3, [r4, #8]
 801eff4:	6862      	ldr	r2, [r4, #4]
 801eff6:	3701      	adds	r7, #1
 801eff8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801effc:	6821      	ldr	r1, [r4, #0]
 801effe:	42bd      	cmp	r5, r7
 801f000:	8260      	strh	r0, [r4, #18]
 801f002:	fbb0 fef3 	udiv	lr, r0, r3
 801f006:	fbb2 f2f3 	udiv	r2, r2, r3
 801f00a:	fb03 031e 	mls	r3, r3, lr, r0
 801f00e:	b29b      	uxth	r3, r3
 801f010:	fb02 f303 	mul.w	r3, r2, r3
 801f014:	f841 c003 	str.w	ip, [r1, r3]
 801f018:	d1e7      	bne.n	801efea <uxr_process_acknack+0x1a>
 801f01a:	3e00      	subs	r6, #0
 801f01c:	f04f 0300 	mov.w	r3, #0
 801f020:	bf18      	it	ne
 801f022:	2601      	movne	r6, #1
 801f024:	f884 3020 	strb.w	r3, [r4, #32]
 801f028:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801f02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f02e:	bf00      	nop

0801f030 <uxr_is_output_up_to_date>:
 801f030:	8a01      	ldrh	r1, [r0, #16]
 801f032:	8a40      	ldrh	r0, [r0, #18]
 801f034:	b508      	push	{r3, lr}
 801f036:	f000 f80d 	bl	801f054 <uxr_seq_num_cmp>
 801f03a:	fab0 f080 	clz	r0, r0
 801f03e:	0940      	lsrs	r0, r0, #5
 801f040:	bd08      	pop	{r3, pc}
 801f042:	bf00      	nop

0801f044 <uxr_seq_num_add>:
 801f044:	4408      	add	r0, r1
 801f046:	b280      	uxth	r0, r0
 801f048:	4770      	bx	lr
 801f04a:	bf00      	nop

0801f04c <uxr_seq_num_sub>:
 801f04c:	1a40      	subs	r0, r0, r1
 801f04e:	b280      	uxth	r0, r0
 801f050:	4770      	bx	lr
 801f052:	bf00      	nop

0801f054 <uxr_seq_num_cmp>:
 801f054:	4288      	cmp	r0, r1
 801f056:	d011      	beq.n	801f07c <uxr_seq_num_cmp+0x28>
 801f058:	d309      	bcc.n	801f06e <uxr_seq_num_cmp+0x1a>
 801f05a:	4288      	cmp	r0, r1
 801f05c:	d910      	bls.n	801f080 <uxr_seq_num_cmp+0x2c>
 801f05e:	1a40      	subs	r0, r0, r1
 801f060:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801f064:	bfd4      	ite	le
 801f066:	2001      	movle	r0, #1
 801f068:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801f06c:	4770      	bx	lr
 801f06e:	1a0b      	subs	r3, r1, r0
 801f070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801f074:	daf1      	bge.n	801f05a <uxr_seq_num_cmp+0x6>
 801f076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f07a:	4770      	bx	lr
 801f07c:	2000      	movs	r0, #0
 801f07e:	4770      	bx	lr
 801f080:	2001      	movs	r0, #1
 801f082:	4770      	bx	lr

0801f084 <calloc>:
 801f084:	4b02      	ldr	r3, [pc, #8]	@ (801f090 <calloc+0xc>)
 801f086:	460a      	mov	r2, r1
 801f088:	4601      	mov	r1, r0
 801f08a:	6818      	ldr	r0, [r3, #0]
 801f08c:	f000 b802 	b.w	801f094 <_calloc_r>
 801f090:	240013a0 	.word	0x240013a0

0801f094 <_calloc_r>:
 801f094:	b570      	push	{r4, r5, r6, lr}
 801f096:	fba1 5402 	umull	r5, r4, r1, r2
 801f09a:	b93c      	cbnz	r4, 801f0ac <_calloc_r+0x18>
 801f09c:	4629      	mov	r1, r5
 801f09e:	f000 f899 	bl	801f1d4 <_malloc_r>
 801f0a2:	4606      	mov	r6, r0
 801f0a4:	b928      	cbnz	r0, 801f0b2 <_calloc_r+0x1e>
 801f0a6:	2600      	movs	r6, #0
 801f0a8:	4630      	mov	r0, r6
 801f0aa:	bd70      	pop	{r4, r5, r6, pc}
 801f0ac:	220c      	movs	r2, #12
 801f0ae:	6002      	str	r2, [r0, #0]
 801f0b0:	e7f9      	b.n	801f0a6 <_calloc_r+0x12>
 801f0b2:	462a      	mov	r2, r5
 801f0b4:	4621      	mov	r1, r4
 801f0b6:	f000 fcbd 	bl	801fa34 <memset>
 801f0ba:	e7f5      	b.n	801f0a8 <_calloc_r+0x14>

0801f0bc <exit>:
 801f0bc:	b508      	push	{r3, lr}
 801f0be:	4b06      	ldr	r3, [pc, #24]	@ (801f0d8 <exit+0x1c>)
 801f0c0:	4604      	mov	r4, r0
 801f0c2:	b113      	cbz	r3, 801f0ca <exit+0xe>
 801f0c4:	2100      	movs	r1, #0
 801f0c6:	f3af 8000 	nop.w
 801f0ca:	4b04      	ldr	r3, [pc, #16]	@ (801f0dc <exit+0x20>)
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	b103      	cbz	r3, 801f0d2 <exit+0x16>
 801f0d0:	4798      	blx	r3
 801f0d2:	4620      	mov	r0, r4
 801f0d4:	f7e2 ff3a 	bl	8001f4c <_exit>
 801f0d8:	00000000 	.word	0x00000000
 801f0dc:	240695d4 	.word	0x240695d4

0801f0e0 <getenv>:
 801f0e0:	b507      	push	{r0, r1, r2, lr}
 801f0e2:	4b04      	ldr	r3, [pc, #16]	@ (801f0f4 <getenv+0x14>)
 801f0e4:	4601      	mov	r1, r0
 801f0e6:	aa01      	add	r2, sp, #4
 801f0e8:	6818      	ldr	r0, [r3, #0]
 801f0ea:	f000 f805 	bl	801f0f8 <_findenv_r>
 801f0ee:	b003      	add	sp, #12
 801f0f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801f0f4:	240013a0 	.word	0x240013a0

0801f0f8 <_findenv_r>:
 801f0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801f16c <_findenv_r+0x74>
 801f100:	4606      	mov	r6, r0
 801f102:	4689      	mov	r9, r1
 801f104:	4617      	mov	r7, r2
 801f106:	f000 fde1 	bl	801fccc <__env_lock>
 801f10a:	f8da 4000 	ldr.w	r4, [sl]
 801f10e:	b134      	cbz	r4, 801f11e <_findenv_r+0x26>
 801f110:	464b      	mov	r3, r9
 801f112:	4698      	mov	r8, r3
 801f114:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f118:	b13a      	cbz	r2, 801f12a <_findenv_r+0x32>
 801f11a:	2a3d      	cmp	r2, #61	@ 0x3d
 801f11c:	d1f9      	bne.n	801f112 <_findenv_r+0x1a>
 801f11e:	4630      	mov	r0, r6
 801f120:	f000 fdda 	bl	801fcd8 <__env_unlock>
 801f124:	2000      	movs	r0, #0
 801f126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f12a:	eba8 0809 	sub.w	r8, r8, r9
 801f12e:	46a3      	mov	fp, r4
 801f130:	f854 0b04 	ldr.w	r0, [r4], #4
 801f134:	2800      	cmp	r0, #0
 801f136:	d0f2      	beq.n	801f11e <_findenv_r+0x26>
 801f138:	4642      	mov	r2, r8
 801f13a:	4649      	mov	r1, r9
 801f13c:	f000 fc8f 	bl	801fa5e <strncmp>
 801f140:	2800      	cmp	r0, #0
 801f142:	d1f4      	bne.n	801f12e <_findenv_r+0x36>
 801f144:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f148:	eb03 0508 	add.w	r5, r3, r8
 801f14c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f150:	2b3d      	cmp	r3, #61	@ 0x3d
 801f152:	d1ec      	bne.n	801f12e <_findenv_r+0x36>
 801f154:	f8da 3000 	ldr.w	r3, [sl]
 801f158:	ebab 0303 	sub.w	r3, fp, r3
 801f15c:	109b      	asrs	r3, r3, #2
 801f15e:	4630      	mov	r0, r6
 801f160:	603b      	str	r3, [r7, #0]
 801f162:	f000 fdb9 	bl	801fcd8 <__env_unlock>
 801f166:	1c68      	adds	r0, r5, #1
 801f168:	e7dd      	b.n	801f126 <_findenv_r+0x2e>
 801f16a:	bf00      	nop
 801f16c:	24000000 	.word	0x24000000

0801f170 <malloc>:
 801f170:	4b02      	ldr	r3, [pc, #8]	@ (801f17c <malloc+0xc>)
 801f172:	4601      	mov	r1, r0
 801f174:	6818      	ldr	r0, [r3, #0]
 801f176:	f000 b82d 	b.w	801f1d4 <_malloc_r>
 801f17a:	bf00      	nop
 801f17c:	240013a0 	.word	0x240013a0

0801f180 <free>:
 801f180:	4b02      	ldr	r3, [pc, #8]	@ (801f18c <free+0xc>)
 801f182:	4601      	mov	r1, r0
 801f184:	6818      	ldr	r0, [r3, #0]
 801f186:	f000 bdad 	b.w	801fce4 <_free_r>
 801f18a:	bf00      	nop
 801f18c:	240013a0 	.word	0x240013a0

0801f190 <sbrk_aligned>:
 801f190:	b570      	push	{r4, r5, r6, lr}
 801f192:	4e0f      	ldr	r6, [pc, #60]	@ (801f1d0 <sbrk_aligned+0x40>)
 801f194:	460c      	mov	r4, r1
 801f196:	6831      	ldr	r1, [r6, #0]
 801f198:	4605      	mov	r5, r0
 801f19a:	b911      	cbnz	r1, 801f1a2 <sbrk_aligned+0x12>
 801f19c:	f000 fd12 	bl	801fbc4 <_sbrk_r>
 801f1a0:	6030      	str	r0, [r6, #0]
 801f1a2:	4621      	mov	r1, r4
 801f1a4:	4628      	mov	r0, r5
 801f1a6:	f000 fd0d 	bl	801fbc4 <_sbrk_r>
 801f1aa:	1c43      	adds	r3, r0, #1
 801f1ac:	d103      	bne.n	801f1b6 <sbrk_aligned+0x26>
 801f1ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801f1b2:	4620      	mov	r0, r4
 801f1b4:	bd70      	pop	{r4, r5, r6, pc}
 801f1b6:	1cc4      	adds	r4, r0, #3
 801f1b8:	f024 0403 	bic.w	r4, r4, #3
 801f1bc:	42a0      	cmp	r0, r4
 801f1be:	d0f8      	beq.n	801f1b2 <sbrk_aligned+0x22>
 801f1c0:	1a21      	subs	r1, r4, r0
 801f1c2:	4628      	mov	r0, r5
 801f1c4:	f000 fcfe 	bl	801fbc4 <_sbrk_r>
 801f1c8:	3001      	adds	r0, #1
 801f1ca:	d1f2      	bne.n	801f1b2 <sbrk_aligned+0x22>
 801f1cc:	e7ef      	b.n	801f1ae <sbrk_aligned+0x1e>
 801f1ce:	bf00      	nop
 801f1d0:	24069494 	.word	0x24069494

0801f1d4 <_malloc_r>:
 801f1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1d8:	1ccd      	adds	r5, r1, #3
 801f1da:	f025 0503 	bic.w	r5, r5, #3
 801f1de:	3508      	adds	r5, #8
 801f1e0:	2d0c      	cmp	r5, #12
 801f1e2:	bf38      	it	cc
 801f1e4:	250c      	movcc	r5, #12
 801f1e6:	2d00      	cmp	r5, #0
 801f1e8:	4606      	mov	r6, r0
 801f1ea:	db01      	blt.n	801f1f0 <_malloc_r+0x1c>
 801f1ec:	42a9      	cmp	r1, r5
 801f1ee:	d904      	bls.n	801f1fa <_malloc_r+0x26>
 801f1f0:	230c      	movs	r3, #12
 801f1f2:	6033      	str	r3, [r6, #0]
 801f1f4:	2000      	movs	r0, #0
 801f1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f2d0 <_malloc_r+0xfc>
 801f1fe:	f000 f869 	bl	801f2d4 <__malloc_lock>
 801f202:	f8d8 3000 	ldr.w	r3, [r8]
 801f206:	461c      	mov	r4, r3
 801f208:	bb44      	cbnz	r4, 801f25c <_malloc_r+0x88>
 801f20a:	4629      	mov	r1, r5
 801f20c:	4630      	mov	r0, r6
 801f20e:	f7ff ffbf 	bl	801f190 <sbrk_aligned>
 801f212:	1c43      	adds	r3, r0, #1
 801f214:	4604      	mov	r4, r0
 801f216:	d158      	bne.n	801f2ca <_malloc_r+0xf6>
 801f218:	f8d8 4000 	ldr.w	r4, [r8]
 801f21c:	4627      	mov	r7, r4
 801f21e:	2f00      	cmp	r7, #0
 801f220:	d143      	bne.n	801f2aa <_malloc_r+0xd6>
 801f222:	2c00      	cmp	r4, #0
 801f224:	d04b      	beq.n	801f2be <_malloc_r+0xea>
 801f226:	6823      	ldr	r3, [r4, #0]
 801f228:	4639      	mov	r1, r7
 801f22a:	4630      	mov	r0, r6
 801f22c:	eb04 0903 	add.w	r9, r4, r3
 801f230:	f000 fcc8 	bl	801fbc4 <_sbrk_r>
 801f234:	4581      	cmp	r9, r0
 801f236:	d142      	bne.n	801f2be <_malloc_r+0xea>
 801f238:	6821      	ldr	r1, [r4, #0]
 801f23a:	1a6d      	subs	r5, r5, r1
 801f23c:	4629      	mov	r1, r5
 801f23e:	4630      	mov	r0, r6
 801f240:	f7ff ffa6 	bl	801f190 <sbrk_aligned>
 801f244:	3001      	adds	r0, #1
 801f246:	d03a      	beq.n	801f2be <_malloc_r+0xea>
 801f248:	6823      	ldr	r3, [r4, #0]
 801f24a:	442b      	add	r3, r5
 801f24c:	6023      	str	r3, [r4, #0]
 801f24e:	f8d8 3000 	ldr.w	r3, [r8]
 801f252:	685a      	ldr	r2, [r3, #4]
 801f254:	bb62      	cbnz	r2, 801f2b0 <_malloc_r+0xdc>
 801f256:	f8c8 7000 	str.w	r7, [r8]
 801f25a:	e00f      	b.n	801f27c <_malloc_r+0xa8>
 801f25c:	6822      	ldr	r2, [r4, #0]
 801f25e:	1b52      	subs	r2, r2, r5
 801f260:	d420      	bmi.n	801f2a4 <_malloc_r+0xd0>
 801f262:	2a0b      	cmp	r2, #11
 801f264:	d917      	bls.n	801f296 <_malloc_r+0xc2>
 801f266:	1961      	adds	r1, r4, r5
 801f268:	42a3      	cmp	r3, r4
 801f26a:	6025      	str	r5, [r4, #0]
 801f26c:	bf18      	it	ne
 801f26e:	6059      	strne	r1, [r3, #4]
 801f270:	6863      	ldr	r3, [r4, #4]
 801f272:	bf08      	it	eq
 801f274:	f8c8 1000 	streq.w	r1, [r8]
 801f278:	5162      	str	r2, [r4, r5]
 801f27a:	604b      	str	r3, [r1, #4]
 801f27c:	4630      	mov	r0, r6
 801f27e:	f000 f82f 	bl	801f2e0 <__malloc_unlock>
 801f282:	f104 000b 	add.w	r0, r4, #11
 801f286:	1d23      	adds	r3, r4, #4
 801f288:	f020 0007 	bic.w	r0, r0, #7
 801f28c:	1ac2      	subs	r2, r0, r3
 801f28e:	bf1c      	itt	ne
 801f290:	1a1b      	subne	r3, r3, r0
 801f292:	50a3      	strne	r3, [r4, r2]
 801f294:	e7af      	b.n	801f1f6 <_malloc_r+0x22>
 801f296:	6862      	ldr	r2, [r4, #4]
 801f298:	42a3      	cmp	r3, r4
 801f29a:	bf0c      	ite	eq
 801f29c:	f8c8 2000 	streq.w	r2, [r8]
 801f2a0:	605a      	strne	r2, [r3, #4]
 801f2a2:	e7eb      	b.n	801f27c <_malloc_r+0xa8>
 801f2a4:	4623      	mov	r3, r4
 801f2a6:	6864      	ldr	r4, [r4, #4]
 801f2a8:	e7ae      	b.n	801f208 <_malloc_r+0x34>
 801f2aa:	463c      	mov	r4, r7
 801f2ac:	687f      	ldr	r7, [r7, #4]
 801f2ae:	e7b6      	b.n	801f21e <_malloc_r+0x4a>
 801f2b0:	461a      	mov	r2, r3
 801f2b2:	685b      	ldr	r3, [r3, #4]
 801f2b4:	42a3      	cmp	r3, r4
 801f2b6:	d1fb      	bne.n	801f2b0 <_malloc_r+0xdc>
 801f2b8:	2300      	movs	r3, #0
 801f2ba:	6053      	str	r3, [r2, #4]
 801f2bc:	e7de      	b.n	801f27c <_malloc_r+0xa8>
 801f2be:	230c      	movs	r3, #12
 801f2c0:	6033      	str	r3, [r6, #0]
 801f2c2:	4630      	mov	r0, r6
 801f2c4:	f000 f80c 	bl	801f2e0 <__malloc_unlock>
 801f2c8:	e794      	b.n	801f1f4 <_malloc_r+0x20>
 801f2ca:	6005      	str	r5, [r0, #0]
 801f2cc:	e7d6      	b.n	801f27c <_malloc_r+0xa8>
 801f2ce:	bf00      	nop
 801f2d0:	24069498 	.word	0x24069498

0801f2d4 <__malloc_lock>:
 801f2d4:	4801      	ldr	r0, [pc, #4]	@ (801f2dc <__malloc_lock+0x8>)
 801f2d6:	f000 bcc2 	b.w	801fc5e <__retarget_lock_acquire_recursive>
 801f2da:	bf00      	nop
 801f2dc:	240695dd 	.word	0x240695dd

0801f2e0 <__malloc_unlock>:
 801f2e0:	4801      	ldr	r0, [pc, #4]	@ (801f2e8 <__malloc_unlock+0x8>)
 801f2e2:	f000 bcbd 	b.w	801fc60 <__retarget_lock_release_recursive>
 801f2e6:	bf00      	nop
 801f2e8:	240695dd 	.word	0x240695dd

0801f2ec <srand>:
 801f2ec:	b538      	push	{r3, r4, r5, lr}
 801f2ee:	4b10      	ldr	r3, [pc, #64]	@ (801f330 <srand+0x44>)
 801f2f0:	681d      	ldr	r5, [r3, #0]
 801f2f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f2f4:	4604      	mov	r4, r0
 801f2f6:	b9b3      	cbnz	r3, 801f326 <srand+0x3a>
 801f2f8:	2018      	movs	r0, #24
 801f2fa:	f7ff ff39 	bl	801f170 <malloc>
 801f2fe:	4602      	mov	r2, r0
 801f300:	6328      	str	r0, [r5, #48]	@ 0x30
 801f302:	b920      	cbnz	r0, 801f30e <srand+0x22>
 801f304:	4b0b      	ldr	r3, [pc, #44]	@ (801f334 <srand+0x48>)
 801f306:	480c      	ldr	r0, [pc, #48]	@ (801f338 <srand+0x4c>)
 801f308:	2146      	movs	r1, #70	@ 0x46
 801f30a:	f000 fcc1 	bl	801fc90 <__assert_func>
 801f30e:	490b      	ldr	r1, [pc, #44]	@ (801f33c <srand+0x50>)
 801f310:	4b0b      	ldr	r3, [pc, #44]	@ (801f340 <srand+0x54>)
 801f312:	e9c0 1300 	strd	r1, r3, [r0]
 801f316:	4b0b      	ldr	r3, [pc, #44]	@ (801f344 <srand+0x58>)
 801f318:	6083      	str	r3, [r0, #8]
 801f31a:	230b      	movs	r3, #11
 801f31c:	8183      	strh	r3, [r0, #12]
 801f31e:	2100      	movs	r1, #0
 801f320:	2001      	movs	r0, #1
 801f322:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f326:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801f328:	2200      	movs	r2, #0
 801f32a:	611c      	str	r4, [r3, #16]
 801f32c:	615a      	str	r2, [r3, #20]
 801f32e:	bd38      	pop	{r3, r4, r5, pc}
 801f330:	240013a0 	.word	0x240013a0
 801f334:	08023036 	.word	0x08023036
 801f338:	0802304d 	.word	0x0802304d
 801f33c:	abcd330e 	.word	0xabcd330e
 801f340:	e66d1234 	.word	0xe66d1234
 801f344:	0005deec 	.word	0x0005deec

0801f348 <rand>:
 801f348:	4b16      	ldr	r3, [pc, #88]	@ (801f3a4 <rand+0x5c>)
 801f34a:	b510      	push	{r4, lr}
 801f34c:	681c      	ldr	r4, [r3, #0]
 801f34e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f350:	b9b3      	cbnz	r3, 801f380 <rand+0x38>
 801f352:	2018      	movs	r0, #24
 801f354:	f7ff ff0c 	bl	801f170 <malloc>
 801f358:	4602      	mov	r2, r0
 801f35a:	6320      	str	r0, [r4, #48]	@ 0x30
 801f35c:	b920      	cbnz	r0, 801f368 <rand+0x20>
 801f35e:	4b12      	ldr	r3, [pc, #72]	@ (801f3a8 <rand+0x60>)
 801f360:	4812      	ldr	r0, [pc, #72]	@ (801f3ac <rand+0x64>)
 801f362:	2152      	movs	r1, #82	@ 0x52
 801f364:	f000 fc94 	bl	801fc90 <__assert_func>
 801f368:	4911      	ldr	r1, [pc, #68]	@ (801f3b0 <rand+0x68>)
 801f36a:	4b12      	ldr	r3, [pc, #72]	@ (801f3b4 <rand+0x6c>)
 801f36c:	e9c0 1300 	strd	r1, r3, [r0]
 801f370:	4b11      	ldr	r3, [pc, #68]	@ (801f3b8 <rand+0x70>)
 801f372:	6083      	str	r3, [r0, #8]
 801f374:	230b      	movs	r3, #11
 801f376:	8183      	strh	r3, [r0, #12]
 801f378:	2100      	movs	r1, #0
 801f37a:	2001      	movs	r0, #1
 801f37c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f380:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f382:	480e      	ldr	r0, [pc, #56]	@ (801f3bc <rand+0x74>)
 801f384:	690b      	ldr	r3, [r1, #16]
 801f386:	694c      	ldr	r4, [r1, #20]
 801f388:	4a0d      	ldr	r2, [pc, #52]	@ (801f3c0 <rand+0x78>)
 801f38a:	4358      	muls	r0, r3
 801f38c:	fb02 0004 	mla	r0, r2, r4, r0
 801f390:	fba3 3202 	umull	r3, r2, r3, r2
 801f394:	3301      	adds	r3, #1
 801f396:	eb40 0002 	adc.w	r0, r0, r2
 801f39a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f39e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801f3a2:	bd10      	pop	{r4, pc}
 801f3a4:	240013a0 	.word	0x240013a0
 801f3a8:	08023036 	.word	0x08023036
 801f3ac:	0802304d 	.word	0x0802304d
 801f3b0:	abcd330e 	.word	0xabcd330e
 801f3b4:	e66d1234 	.word	0xe66d1234
 801f3b8:	0005deec 	.word	0x0005deec
 801f3bc:	5851f42d 	.word	0x5851f42d
 801f3c0:	4c957f2d 	.word	0x4c957f2d

0801f3c4 <realloc>:
 801f3c4:	4b02      	ldr	r3, [pc, #8]	@ (801f3d0 <realloc+0xc>)
 801f3c6:	460a      	mov	r2, r1
 801f3c8:	4601      	mov	r1, r0
 801f3ca:	6818      	ldr	r0, [r3, #0]
 801f3cc:	f000 b802 	b.w	801f3d4 <_realloc_r>
 801f3d0:	240013a0 	.word	0x240013a0

0801f3d4 <_realloc_r>:
 801f3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3d8:	4680      	mov	r8, r0
 801f3da:	4615      	mov	r5, r2
 801f3dc:	460c      	mov	r4, r1
 801f3de:	b921      	cbnz	r1, 801f3ea <_realloc_r+0x16>
 801f3e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f3e4:	4611      	mov	r1, r2
 801f3e6:	f7ff bef5 	b.w	801f1d4 <_malloc_r>
 801f3ea:	b92a      	cbnz	r2, 801f3f8 <_realloc_r+0x24>
 801f3ec:	f000 fc7a 	bl	801fce4 <_free_r>
 801f3f0:	2400      	movs	r4, #0
 801f3f2:	4620      	mov	r0, r4
 801f3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3f8:	f000 fcbe 	bl	801fd78 <_malloc_usable_size_r>
 801f3fc:	4285      	cmp	r5, r0
 801f3fe:	4606      	mov	r6, r0
 801f400:	d802      	bhi.n	801f408 <_realloc_r+0x34>
 801f402:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801f406:	d8f4      	bhi.n	801f3f2 <_realloc_r+0x1e>
 801f408:	4629      	mov	r1, r5
 801f40a:	4640      	mov	r0, r8
 801f40c:	f7ff fee2 	bl	801f1d4 <_malloc_r>
 801f410:	4607      	mov	r7, r0
 801f412:	2800      	cmp	r0, #0
 801f414:	d0ec      	beq.n	801f3f0 <_realloc_r+0x1c>
 801f416:	42b5      	cmp	r5, r6
 801f418:	462a      	mov	r2, r5
 801f41a:	4621      	mov	r1, r4
 801f41c:	bf28      	it	cs
 801f41e:	4632      	movcs	r2, r6
 801f420:	f000 fc27 	bl	801fc72 <memcpy>
 801f424:	4621      	mov	r1, r4
 801f426:	4640      	mov	r0, r8
 801f428:	f000 fc5c 	bl	801fce4 <_free_r>
 801f42c:	463c      	mov	r4, r7
 801f42e:	e7e0      	b.n	801f3f2 <_realloc_r+0x1e>

0801f430 <_strtoul_l.constprop.0>:
 801f430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f434:	4e34      	ldr	r6, [pc, #208]	@ (801f508 <_strtoul_l.constprop.0+0xd8>)
 801f436:	4686      	mov	lr, r0
 801f438:	460d      	mov	r5, r1
 801f43a:	4628      	mov	r0, r5
 801f43c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f440:	5d37      	ldrb	r7, [r6, r4]
 801f442:	f017 0708 	ands.w	r7, r7, #8
 801f446:	d1f8      	bne.n	801f43a <_strtoul_l.constprop.0+0xa>
 801f448:	2c2d      	cmp	r4, #45	@ 0x2d
 801f44a:	d12f      	bne.n	801f4ac <_strtoul_l.constprop.0+0x7c>
 801f44c:	782c      	ldrb	r4, [r5, #0]
 801f44e:	2701      	movs	r7, #1
 801f450:	1c85      	adds	r5, r0, #2
 801f452:	f033 0010 	bics.w	r0, r3, #16
 801f456:	d109      	bne.n	801f46c <_strtoul_l.constprop.0+0x3c>
 801f458:	2c30      	cmp	r4, #48	@ 0x30
 801f45a:	d12c      	bne.n	801f4b6 <_strtoul_l.constprop.0+0x86>
 801f45c:	7828      	ldrb	r0, [r5, #0]
 801f45e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801f462:	2858      	cmp	r0, #88	@ 0x58
 801f464:	d127      	bne.n	801f4b6 <_strtoul_l.constprop.0+0x86>
 801f466:	786c      	ldrb	r4, [r5, #1]
 801f468:	2310      	movs	r3, #16
 801f46a:	3502      	adds	r5, #2
 801f46c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801f470:	2600      	movs	r6, #0
 801f472:	fbb8 f8f3 	udiv	r8, r8, r3
 801f476:	fb03 f908 	mul.w	r9, r3, r8
 801f47a:	ea6f 0909 	mvn.w	r9, r9
 801f47e:	4630      	mov	r0, r6
 801f480:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801f484:	f1bc 0f09 	cmp.w	ip, #9
 801f488:	d81c      	bhi.n	801f4c4 <_strtoul_l.constprop.0+0x94>
 801f48a:	4664      	mov	r4, ip
 801f48c:	42a3      	cmp	r3, r4
 801f48e:	dd2a      	ble.n	801f4e6 <_strtoul_l.constprop.0+0xb6>
 801f490:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801f494:	d007      	beq.n	801f4a6 <_strtoul_l.constprop.0+0x76>
 801f496:	4580      	cmp	r8, r0
 801f498:	d322      	bcc.n	801f4e0 <_strtoul_l.constprop.0+0xb0>
 801f49a:	d101      	bne.n	801f4a0 <_strtoul_l.constprop.0+0x70>
 801f49c:	45a1      	cmp	r9, r4
 801f49e:	db1f      	blt.n	801f4e0 <_strtoul_l.constprop.0+0xb0>
 801f4a0:	fb00 4003 	mla	r0, r0, r3, r4
 801f4a4:	2601      	movs	r6, #1
 801f4a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f4aa:	e7e9      	b.n	801f480 <_strtoul_l.constprop.0+0x50>
 801f4ac:	2c2b      	cmp	r4, #43	@ 0x2b
 801f4ae:	bf04      	itt	eq
 801f4b0:	782c      	ldrbeq	r4, [r5, #0]
 801f4b2:	1c85      	addeq	r5, r0, #2
 801f4b4:	e7cd      	b.n	801f452 <_strtoul_l.constprop.0+0x22>
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d1d8      	bne.n	801f46c <_strtoul_l.constprop.0+0x3c>
 801f4ba:	2c30      	cmp	r4, #48	@ 0x30
 801f4bc:	bf0c      	ite	eq
 801f4be:	2308      	moveq	r3, #8
 801f4c0:	230a      	movne	r3, #10
 801f4c2:	e7d3      	b.n	801f46c <_strtoul_l.constprop.0+0x3c>
 801f4c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801f4c8:	f1bc 0f19 	cmp.w	ip, #25
 801f4cc:	d801      	bhi.n	801f4d2 <_strtoul_l.constprop.0+0xa2>
 801f4ce:	3c37      	subs	r4, #55	@ 0x37
 801f4d0:	e7dc      	b.n	801f48c <_strtoul_l.constprop.0+0x5c>
 801f4d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801f4d6:	f1bc 0f19 	cmp.w	ip, #25
 801f4da:	d804      	bhi.n	801f4e6 <_strtoul_l.constprop.0+0xb6>
 801f4dc:	3c57      	subs	r4, #87	@ 0x57
 801f4de:	e7d5      	b.n	801f48c <_strtoul_l.constprop.0+0x5c>
 801f4e0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801f4e4:	e7df      	b.n	801f4a6 <_strtoul_l.constprop.0+0x76>
 801f4e6:	1c73      	adds	r3, r6, #1
 801f4e8:	d106      	bne.n	801f4f8 <_strtoul_l.constprop.0+0xc8>
 801f4ea:	2322      	movs	r3, #34	@ 0x22
 801f4ec:	f8ce 3000 	str.w	r3, [lr]
 801f4f0:	4630      	mov	r0, r6
 801f4f2:	b932      	cbnz	r2, 801f502 <_strtoul_l.constprop.0+0xd2>
 801f4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f4f8:	b107      	cbz	r7, 801f4fc <_strtoul_l.constprop.0+0xcc>
 801f4fa:	4240      	negs	r0, r0
 801f4fc:	2a00      	cmp	r2, #0
 801f4fe:	d0f9      	beq.n	801f4f4 <_strtoul_l.constprop.0+0xc4>
 801f500:	b106      	cbz	r6, 801f504 <_strtoul_l.constprop.0+0xd4>
 801f502:	1e69      	subs	r1, r5, #1
 801f504:	6011      	str	r1, [r2, #0]
 801f506:	e7f5      	b.n	801f4f4 <_strtoul_l.constprop.0+0xc4>
 801f508:	080230a6 	.word	0x080230a6

0801f50c <strtoul>:
 801f50c:	4613      	mov	r3, r2
 801f50e:	460a      	mov	r2, r1
 801f510:	4601      	mov	r1, r0
 801f512:	4802      	ldr	r0, [pc, #8]	@ (801f51c <strtoul+0x10>)
 801f514:	6800      	ldr	r0, [r0, #0]
 801f516:	f7ff bf8b 	b.w	801f430 <_strtoul_l.constprop.0>
 801f51a:	bf00      	nop
 801f51c:	240013a0 	.word	0x240013a0

0801f520 <std>:
 801f520:	2300      	movs	r3, #0
 801f522:	b510      	push	{r4, lr}
 801f524:	4604      	mov	r4, r0
 801f526:	e9c0 3300 	strd	r3, r3, [r0]
 801f52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f52e:	6083      	str	r3, [r0, #8]
 801f530:	8181      	strh	r1, [r0, #12]
 801f532:	6643      	str	r3, [r0, #100]	@ 0x64
 801f534:	81c2      	strh	r2, [r0, #14]
 801f536:	6183      	str	r3, [r0, #24]
 801f538:	4619      	mov	r1, r3
 801f53a:	2208      	movs	r2, #8
 801f53c:	305c      	adds	r0, #92	@ 0x5c
 801f53e:	f000 fa79 	bl	801fa34 <memset>
 801f542:	4b0d      	ldr	r3, [pc, #52]	@ (801f578 <std+0x58>)
 801f544:	6263      	str	r3, [r4, #36]	@ 0x24
 801f546:	4b0d      	ldr	r3, [pc, #52]	@ (801f57c <std+0x5c>)
 801f548:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f54a:	4b0d      	ldr	r3, [pc, #52]	@ (801f580 <std+0x60>)
 801f54c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f54e:	4b0d      	ldr	r3, [pc, #52]	@ (801f584 <std+0x64>)
 801f550:	6323      	str	r3, [r4, #48]	@ 0x30
 801f552:	4b0d      	ldr	r3, [pc, #52]	@ (801f588 <std+0x68>)
 801f554:	6224      	str	r4, [r4, #32]
 801f556:	429c      	cmp	r4, r3
 801f558:	d006      	beq.n	801f568 <std+0x48>
 801f55a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801f55e:	4294      	cmp	r4, r2
 801f560:	d002      	beq.n	801f568 <std+0x48>
 801f562:	33d0      	adds	r3, #208	@ 0xd0
 801f564:	429c      	cmp	r4, r3
 801f566:	d105      	bne.n	801f574 <std+0x54>
 801f568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801f56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f570:	f000 bb74 	b.w	801fc5c <__retarget_lock_init_recursive>
 801f574:	bd10      	pop	{r4, pc}
 801f576:	bf00      	nop
 801f578:	0801f7c1 	.word	0x0801f7c1
 801f57c:	0801f7e3 	.word	0x0801f7e3
 801f580:	0801f81b 	.word	0x0801f81b
 801f584:	0801f83f 	.word	0x0801f83f
 801f588:	2406949c 	.word	0x2406949c

0801f58c <stdio_exit_handler>:
 801f58c:	4a02      	ldr	r2, [pc, #8]	@ (801f598 <stdio_exit_handler+0xc>)
 801f58e:	4903      	ldr	r1, [pc, #12]	@ (801f59c <stdio_exit_handler+0x10>)
 801f590:	4803      	ldr	r0, [pc, #12]	@ (801f5a0 <stdio_exit_handler+0x14>)
 801f592:	f000 b869 	b.w	801f668 <_fwalk_sglue>
 801f596:	bf00      	nop
 801f598:	24001394 	.word	0x24001394
 801f59c:	0802045d 	.word	0x0802045d
 801f5a0:	240013a4 	.word	0x240013a4

0801f5a4 <cleanup_stdio>:
 801f5a4:	6841      	ldr	r1, [r0, #4]
 801f5a6:	4b0c      	ldr	r3, [pc, #48]	@ (801f5d8 <cleanup_stdio+0x34>)
 801f5a8:	4299      	cmp	r1, r3
 801f5aa:	b510      	push	{r4, lr}
 801f5ac:	4604      	mov	r4, r0
 801f5ae:	d001      	beq.n	801f5b4 <cleanup_stdio+0x10>
 801f5b0:	f000 ff54 	bl	802045c <_fflush_r>
 801f5b4:	68a1      	ldr	r1, [r4, #8]
 801f5b6:	4b09      	ldr	r3, [pc, #36]	@ (801f5dc <cleanup_stdio+0x38>)
 801f5b8:	4299      	cmp	r1, r3
 801f5ba:	d002      	beq.n	801f5c2 <cleanup_stdio+0x1e>
 801f5bc:	4620      	mov	r0, r4
 801f5be:	f000 ff4d 	bl	802045c <_fflush_r>
 801f5c2:	68e1      	ldr	r1, [r4, #12]
 801f5c4:	4b06      	ldr	r3, [pc, #24]	@ (801f5e0 <cleanup_stdio+0x3c>)
 801f5c6:	4299      	cmp	r1, r3
 801f5c8:	d004      	beq.n	801f5d4 <cleanup_stdio+0x30>
 801f5ca:	4620      	mov	r0, r4
 801f5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5d0:	f000 bf44 	b.w	802045c <_fflush_r>
 801f5d4:	bd10      	pop	{r4, pc}
 801f5d6:	bf00      	nop
 801f5d8:	2406949c 	.word	0x2406949c
 801f5dc:	24069504 	.word	0x24069504
 801f5e0:	2406956c 	.word	0x2406956c

0801f5e4 <global_stdio_init.part.0>:
 801f5e4:	b510      	push	{r4, lr}
 801f5e6:	4b0b      	ldr	r3, [pc, #44]	@ (801f614 <global_stdio_init.part.0+0x30>)
 801f5e8:	4c0b      	ldr	r4, [pc, #44]	@ (801f618 <global_stdio_init.part.0+0x34>)
 801f5ea:	4a0c      	ldr	r2, [pc, #48]	@ (801f61c <global_stdio_init.part.0+0x38>)
 801f5ec:	601a      	str	r2, [r3, #0]
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	2104      	movs	r1, #4
 801f5f4:	f7ff ff94 	bl	801f520 <std>
 801f5f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801f5fc:	2201      	movs	r2, #1
 801f5fe:	2109      	movs	r1, #9
 801f600:	f7ff ff8e 	bl	801f520 <std>
 801f604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801f608:	2202      	movs	r2, #2
 801f60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f60e:	2112      	movs	r1, #18
 801f610:	f7ff bf86 	b.w	801f520 <std>
 801f614:	240695d4 	.word	0x240695d4
 801f618:	2406949c 	.word	0x2406949c
 801f61c:	0801f58d 	.word	0x0801f58d

0801f620 <__sfp_lock_acquire>:
 801f620:	4801      	ldr	r0, [pc, #4]	@ (801f628 <__sfp_lock_acquire+0x8>)
 801f622:	f000 bb1c 	b.w	801fc5e <__retarget_lock_acquire_recursive>
 801f626:	bf00      	nop
 801f628:	240695de 	.word	0x240695de

0801f62c <__sfp_lock_release>:
 801f62c:	4801      	ldr	r0, [pc, #4]	@ (801f634 <__sfp_lock_release+0x8>)
 801f62e:	f000 bb17 	b.w	801fc60 <__retarget_lock_release_recursive>
 801f632:	bf00      	nop
 801f634:	240695de 	.word	0x240695de

0801f638 <__sinit>:
 801f638:	b510      	push	{r4, lr}
 801f63a:	4604      	mov	r4, r0
 801f63c:	f7ff fff0 	bl	801f620 <__sfp_lock_acquire>
 801f640:	6a23      	ldr	r3, [r4, #32]
 801f642:	b11b      	cbz	r3, 801f64c <__sinit+0x14>
 801f644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f648:	f7ff bff0 	b.w	801f62c <__sfp_lock_release>
 801f64c:	4b04      	ldr	r3, [pc, #16]	@ (801f660 <__sinit+0x28>)
 801f64e:	6223      	str	r3, [r4, #32]
 801f650:	4b04      	ldr	r3, [pc, #16]	@ (801f664 <__sinit+0x2c>)
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	2b00      	cmp	r3, #0
 801f656:	d1f5      	bne.n	801f644 <__sinit+0xc>
 801f658:	f7ff ffc4 	bl	801f5e4 <global_stdio_init.part.0>
 801f65c:	e7f2      	b.n	801f644 <__sinit+0xc>
 801f65e:	bf00      	nop
 801f660:	0801f5a5 	.word	0x0801f5a5
 801f664:	240695d4 	.word	0x240695d4

0801f668 <_fwalk_sglue>:
 801f668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f66c:	4607      	mov	r7, r0
 801f66e:	4688      	mov	r8, r1
 801f670:	4614      	mov	r4, r2
 801f672:	2600      	movs	r6, #0
 801f674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f678:	f1b9 0901 	subs.w	r9, r9, #1
 801f67c:	d505      	bpl.n	801f68a <_fwalk_sglue+0x22>
 801f67e:	6824      	ldr	r4, [r4, #0]
 801f680:	2c00      	cmp	r4, #0
 801f682:	d1f7      	bne.n	801f674 <_fwalk_sglue+0xc>
 801f684:	4630      	mov	r0, r6
 801f686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f68a:	89ab      	ldrh	r3, [r5, #12]
 801f68c:	2b01      	cmp	r3, #1
 801f68e:	d907      	bls.n	801f6a0 <_fwalk_sglue+0x38>
 801f690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f694:	3301      	adds	r3, #1
 801f696:	d003      	beq.n	801f6a0 <_fwalk_sglue+0x38>
 801f698:	4629      	mov	r1, r5
 801f69a:	4638      	mov	r0, r7
 801f69c:	47c0      	blx	r8
 801f69e:	4306      	orrs	r6, r0
 801f6a0:	3568      	adds	r5, #104	@ 0x68
 801f6a2:	e7e9      	b.n	801f678 <_fwalk_sglue+0x10>

0801f6a4 <_fwrite_r>:
 801f6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6a8:	9c08      	ldr	r4, [sp, #32]
 801f6aa:	468a      	mov	sl, r1
 801f6ac:	4690      	mov	r8, r2
 801f6ae:	fb02 f903 	mul.w	r9, r2, r3
 801f6b2:	4606      	mov	r6, r0
 801f6b4:	b118      	cbz	r0, 801f6be <_fwrite_r+0x1a>
 801f6b6:	6a03      	ldr	r3, [r0, #32]
 801f6b8:	b90b      	cbnz	r3, 801f6be <_fwrite_r+0x1a>
 801f6ba:	f7ff ffbd 	bl	801f638 <__sinit>
 801f6be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f6c0:	07dd      	lsls	r5, r3, #31
 801f6c2:	d405      	bmi.n	801f6d0 <_fwrite_r+0x2c>
 801f6c4:	89a3      	ldrh	r3, [r4, #12]
 801f6c6:	0598      	lsls	r0, r3, #22
 801f6c8:	d402      	bmi.n	801f6d0 <_fwrite_r+0x2c>
 801f6ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f6cc:	f000 fac7 	bl	801fc5e <__retarget_lock_acquire_recursive>
 801f6d0:	89a3      	ldrh	r3, [r4, #12]
 801f6d2:	0719      	lsls	r1, r3, #28
 801f6d4:	d516      	bpl.n	801f704 <_fwrite_r+0x60>
 801f6d6:	6923      	ldr	r3, [r4, #16]
 801f6d8:	b1a3      	cbz	r3, 801f704 <_fwrite_r+0x60>
 801f6da:	2500      	movs	r5, #0
 801f6dc:	454d      	cmp	r5, r9
 801f6de:	d01f      	beq.n	801f720 <_fwrite_r+0x7c>
 801f6e0:	68a7      	ldr	r7, [r4, #8]
 801f6e2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801f6e6:	3f01      	subs	r7, #1
 801f6e8:	2f00      	cmp	r7, #0
 801f6ea:	60a7      	str	r7, [r4, #8]
 801f6ec:	da04      	bge.n	801f6f8 <_fwrite_r+0x54>
 801f6ee:	69a3      	ldr	r3, [r4, #24]
 801f6f0:	429f      	cmp	r7, r3
 801f6f2:	db0f      	blt.n	801f714 <_fwrite_r+0x70>
 801f6f4:	290a      	cmp	r1, #10
 801f6f6:	d00d      	beq.n	801f714 <_fwrite_r+0x70>
 801f6f8:	6823      	ldr	r3, [r4, #0]
 801f6fa:	1c5a      	adds	r2, r3, #1
 801f6fc:	6022      	str	r2, [r4, #0]
 801f6fe:	7019      	strb	r1, [r3, #0]
 801f700:	3501      	adds	r5, #1
 801f702:	e7eb      	b.n	801f6dc <_fwrite_r+0x38>
 801f704:	4621      	mov	r1, r4
 801f706:	4630      	mov	r0, r6
 801f708:	f000 f914 	bl	801f934 <__swsetup_r>
 801f70c:	2800      	cmp	r0, #0
 801f70e:	d0e4      	beq.n	801f6da <_fwrite_r+0x36>
 801f710:	2500      	movs	r5, #0
 801f712:	e005      	b.n	801f720 <_fwrite_r+0x7c>
 801f714:	4622      	mov	r2, r4
 801f716:	4630      	mov	r0, r6
 801f718:	f000 f8ce 	bl	801f8b8 <__swbuf_r>
 801f71c:	3001      	adds	r0, #1
 801f71e:	d1ef      	bne.n	801f700 <_fwrite_r+0x5c>
 801f720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f722:	07da      	lsls	r2, r3, #31
 801f724:	d405      	bmi.n	801f732 <_fwrite_r+0x8e>
 801f726:	89a3      	ldrh	r3, [r4, #12]
 801f728:	059b      	lsls	r3, r3, #22
 801f72a:	d402      	bmi.n	801f732 <_fwrite_r+0x8e>
 801f72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f72e:	f000 fa97 	bl	801fc60 <__retarget_lock_release_recursive>
 801f732:	fbb5 f0f8 	udiv	r0, r5, r8
 801f736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801f73c <fwrite>:
 801f73c:	b507      	push	{r0, r1, r2, lr}
 801f73e:	9300      	str	r3, [sp, #0]
 801f740:	4613      	mov	r3, r2
 801f742:	460a      	mov	r2, r1
 801f744:	4601      	mov	r1, r0
 801f746:	4803      	ldr	r0, [pc, #12]	@ (801f754 <fwrite+0x18>)
 801f748:	6800      	ldr	r0, [r0, #0]
 801f74a:	f7ff ffab 	bl	801f6a4 <_fwrite_r>
 801f74e:	b003      	add	sp, #12
 801f750:	f85d fb04 	ldr.w	pc, [sp], #4
 801f754:	240013a0 	.word	0x240013a0

0801f758 <sniprintf>:
 801f758:	b40c      	push	{r2, r3}
 801f75a:	b530      	push	{r4, r5, lr}
 801f75c:	4b17      	ldr	r3, [pc, #92]	@ (801f7bc <sniprintf+0x64>)
 801f75e:	1e0c      	subs	r4, r1, #0
 801f760:	681d      	ldr	r5, [r3, #0]
 801f762:	b09d      	sub	sp, #116	@ 0x74
 801f764:	da08      	bge.n	801f778 <sniprintf+0x20>
 801f766:	238b      	movs	r3, #139	@ 0x8b
 801f768:	602b      	str	r3, [r5, #0]
 801f76a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f76e:	b01d      	add	sp, #116	@ 0x74
 801f770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f774:	b002      	add	sp, #8
 801f776:	4770      	bx	lr
 801f778:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801f77c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f780:	bf14      	ite	ne
 801f782:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801f786:	4623      	moveq	r3, r4
 801f788:	9304      	str	r3, [sp, #16]
 801f78a:	9307      	str	r3, [sp, #28]
 801f78c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f790:	9002      	str	r0, [sp, #8]
 801f792:	9006      	str	r0, [sp, #24]
 801f794:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f798:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f79a:	ab21      	add	r3, sp, #132	@ 0x84
 801f79c:	a902      	add	r1, sp, #8
 801f79e:	4628      	mov	r0, r5
 801f7a0:	9301      	str	r3, [sp, #4]
 801f7a2:	f000 fb4d 	bl	801fe40 <_svfiprintf_r>
 801f7a6:	1c43      	adds	r3, r0, #1
 801f7a8:	bfbc      	itt	lt
 801f7aa:	238b      	movlt	r3, #139	@ 0x8b
 801f7ac:	602b      	strlt	r3, [r5, #0]
 801f7ae:	2c00      	cmp	r4, #0
 801f7b0:	d0dd      	beq.n	801f76e <sniprintf+0x16>
 801f7b2:	9b02      	ldr	r3, [sp, #8]
 801f7b4:	2200      	movs	r2, #0
 801f7b6:	701a      	strb	r2, [r3, #0]
 801f7b8:	e7d9      	b.n	801f76e <sniprintf+0x16>
 801f7ba:	bf00      	nop
 801f7bc:	240013a0 	.word	0x240013a0

0801f7c0 <__sread>:
 801f7c0:	b510      	push	{r4, lr}
 801f7c2:	460c      	mov	r4, r1
 801f7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7c8:	f000 f9ea 	bl	801fba0 <_read_r>
 801f7cc:	2800      	cmp	r0, #0
 801f7ce:	bfab      	itete	ge
 801f7d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801f7d2:	89a3      	ldrhlt	r3, [r4, #12]
 801f7d4:	181b      	addge	r3, r3, r0
 801f7d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801f7da:	bfac      	ite	ge
 801f7dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801f7de:	81a3      	strhlt	r3, [r4, #12]
 801f7e0:	bd10      	pop	{r4, pc}

0801f7e2 <__swrite>:
 801f7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7e6:	461f      	mov	r7, r3
 801f7e8:	898b      	ldrh	r3, [r1, #12]
 801f7ea:	05db      	lsls	r3, r3, #23
 801f7ec:	4605      	mov	r5, r0
 801f7ee:	460c      	mov	r4, r1
 801f7f0:	4616      	mov	r6, r2
 801f7f2:	d505      	bpl.n	801f800 <__swrite+0x1e>
 801f7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7f8:	2302      	movs	r3, #2
 801f7fa:	2200      	movs	r2, #0
 801f7fc:	f000 f9be 	bl	801fb7c <_lseek_r>
 801f800:	89a3      	ldrh	r3, [r4, #12]
 801f802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801f80a:	81a3      	strh	r3, [r4, #12]
 801f80c:	4632      	mov	r2, r6
 801f80e:	463b      	mov	r3, r7
 801f810:	4628      	mov	r0, r5
 801f812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f816:	f000 b9e5 	b.w	801fbe4 <_write_r>

0801f81a <__sseek>:
 801f81a:	b510      	push	{r4, lr}
 801f81c:	460c      	mov	r4, r1
 801f81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f822:	f000 f9ab 	bl	801fb7c <_lseek_r>
 801f826:	1c43      	adds	r3, r0, #1
 801f828:	89a3      	ldrh	r3, [r4, #12]
 801f82a:	bf15      	itete	ne
 801f82c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801f82e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801f832:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801f836:	81a3      	strheq	r3, [r4, #12]
 801f838:	bf18      	it	ne
 801f83a:	81a3      	strhne	r3, [r4, #12]
 801f83c:	bd10      	pop	{r4, pc}

0801f83e <__sclose>:
 801f83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f842:	f000 b935 	b.w	801fab0 <_close_r>

0801f846 <_vsniprintf_r>:
 801f846:	b530      	push	{r4, r5, lr}
 801f848:	4614      	mov	r4, r2
 801f84a:	2c00      	cmp	r4, #0
 801f84c:	b09b      	sub	sp, #108	@ 0x6c
 801f84e:	4605      	mov	r5, r0
 801f850:	461a      	mov	r2, r3
 801f852:	da05      	bge.n	801f860 <_vsniprintf_r+0x1a>
 801f854:	238b      	movs	r3, #139	@ 0x8b
 801f856:	6003      	str	r3, [r0, #0]
 801f858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f85c:	b01b      	add	sp, #108	@ 0x6c
 801f85e:	bd30      	pop	{r4, r5, pc}
 801f860:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801f864:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f868:	bf14      	ite	ne
 801f86a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801f86e:	4623      	moveq	r3, r4
 801f870:	9302      	str	r3, [sp, #8]
 801f872:	9305      	str	r3, [sp, #20]
 801f874:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f878:	9100      	str	r1, [sp, #0]
 801f87a:	9104      	str	r1, [sp, #16]
 801f87c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f880:	4669      	mov	r1, sp
 801f882:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f884:	f000 fadc 	bl	801fe40 <_svfiprintf_r>
 801f888:	1c43      	adds	r3, r0, #1
 801f88a:	bfbc      	itt	lt
 801f88c:	238b      	movlt	r3, #139	@ 0x8b
 801f88e:	602b      	strlt	r3, [r5, #0]
 801f890:	2c00      	cmp	r4, #0
 801f892:	d0e3      	beq.n	801f85c <_vsniprintf_r+0x16>
 801f894:	9b00      	ldr	r3, [sp, #0]
 801f896:	2200      	movs	r2, #0
 801f898:	701a      	strb	r2, [r3, #0]
 801f89a:	e7df      	b.n	801f85c <_vsniprintf_r+0x16>

0801f89c <vsniprintf>:
 801f89c:	b507      	push	{r0, r1, r2, lr}
 801f89e:	9300      	str	r3, [sp, #0]
 801f8a0:	4613      	mov	r3, r2
 801f8a2:	460a      	mov	r2, r1
 801f8a4:	4601      	mov	r1, r0
 801f8a6:	4803      	ldr	r0, [pc, #12]	@ (801f8b4 <vsniprintf+0x18>)
 801f8a8:	6800      	ldr	r0, [r0, #0]
 801f8aa:	f7ff ffcc 	bl	801f846 <_vsniprintf_r>
 801f8ae:	b003      	add	sp, #12
 801f8b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801f8b4:	240013a0 	.word	0x240013a0

0801f8b8 <__swbuf_r>:
 801f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8ba:	460e      	mov	r6, r1
 801f8bc:	4614      	mov	r4, r2
 801f8be:	4605      	mov	r5, r0
 801f8c0:	b118      	cbz	r0, 801f8ca <__swbuf_r+0x12>
 801f8c2:	6a03      	ldr	r3, [r0, #32]
 801f8c4:	b90b      	cbnz	r3, 801f8ca <__swbuf_r+0x12>
 801f8c6:	f7ff feb7 	bl	801f638 <__sinit>
 801f8ca:	69a3      	ldr	r3, [r4, #24]
 801f8cc:	60a3      	str	r3, [r4, #8]
 801f8ce:	89a3      	ldrh	r3, [r4, #12]
 801f8d0:	071a      	lsls	r2, r3, #28
 801f8d2:	d501      	bpl.n	801f8d8 <__swbuf_r+0x20>
 801f8d4:	6923      	ldr	r3, [r4, #16]
 801f8d6:	b943      	cbnz	r3, 801f8ea <__swbuf_r+0x32>
 801f8d8:	4621      	mov	r1, r4
 801f8da:	4628      	mov	r0, r5
 801f8dc:	f000 f82a 	bl	801f934 <__swsetup_r>
 801f8e0:	b118      	cbz	r0, 801f8ea <__swbuf_r+0x32>
 801f8e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f8e6:	4638      	mov	r0, r7
 801f8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f8ea:	6823      	ldr	r3, [r4, #0]
 801f8ec:	6922      	ldr	r2, [r4, #16]
 801f8ee:	1a98      	subs	r0, r3, r2
 801f8f0:	6963      	ldr	r3, [r4, #20]
 801f8f2:	b2f6      	uxtb	r6, r6
 801f8f4:	4283      	cmp	r3, r0
 801f8f6:	4637      	mov	r7, r6
 801f8f8:	dc05      	bgt.n	801f906 <__swbuf_r+0x4e>
 801f8fa:	4621      	mov	r1, r4
 801f8fc:	4628      	mov	r0, r5
 801f8fe:	f000 fdad 	bl	802045c <_fflush_r>
 801f902:	2800      	cmp	r0, #0
 801f904:	d1ed      	bne.n	801f8e2 <__swbuf_r+0x2a>
 801f906:	68a3      	ldr	r3, [r4, #8]
 801f908:	3b01      	subs	r3, #1
 801f90a:	60a3      	str	r3, [r4, #8]
 801f90c:	6823      	ldr	r3, [r4, #0]
 801f90e:	1c5a      	adds	r2, r3, #1
 801f910:	6022      	str	r2, [r4, #0]
 801f912:	701e      	strb	r6, [r3, #0]
 801f914:	6962      	ldr	r2, [r4, #20]
 801f916:	1c43      	adds	r3, r0, #1
 801f918:	429a      	cmp	r2, r3
 801f91a:	d004      	beq.n	801f926 <__swbuf_r+0x6e>
 801f91c:	89a3      	ldrh	r3, [r4, #12]
 801f91e:	07db      	lsls	r3, r3, #31
 801f920:	d5e1      	bpl.n	801f8e6 <__swbuf_r+0x2e>
 801f922:	2e0a      	cmp	r6, #10
 801f924:	d1df      	bne.n	801f8e6 <__swbuf_r+0x2e>
 801f926:	4621      	mov	r1, r4
 801f928:	4628      	mov	r0, r5
 801f92a:	f000 fd97 	bl	802045c <_fflush_r>
 801f92e:	2800      	cmp	r0, #0
 801f930:	d0d9      	beq.n	801f8e6 <__swbuf_r+0x2e>
 801f932:	e7d6      	b.n	801f8e2 <__swbuf_r+0x2a>

0801f934 <__swsetup_r>:
 801f934:	b538      	push	{r3, r4, r5, lr}
 801f936:	4b29      	ldr	r3, [pc, #164]	@ (801f9dc <__swsetup_r+0xa8>)
 801f938:	4605      	mov	r5, r0
 801f93a:	6818      	ldr	r0, [r3, #0]
 801f93c:	460c      	mov	r4, r1
 801f93e:	b118      	cbz	r0, 801f948 <__swsetup_r+0x14>
 801f940:	6a03      	ldr	r3, [r0, #32]
 801f942:	b90b      	cbnz	r3, 801f948 <__swsetup_r+0x14>
 801f944:	f7ff fe78 	bl	801f638 <__sinit>
 801f948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f94c:	0719      	lsls	r1, r3, #28
 801f94e:	d422      	bmi.n	801f996 <__swsetup_r+0x62>
 801f950:	06da      	lsls	r2, r3, #27
 801f952:	d407      	bmi.n	801f964 <__swsetup_r+0x30>
 801f954:	2209      	movs	r2, #9
 801f956:	602a      	str	r2, [r5, #0]
 801f958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f95c:	81a3      	strh	r3, [r4, #12]
 801f95e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f962:	e033      	b.n	801f9cc <__swsetup_r+0x98>
 801f964:	0758      	lsls	r0, r3, #29
 801f966:	d512      	bpl.n	801f98e <__swsetup_r+0x5a>
 801f968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f96a:	b141      	cbz	r1, 801f97e <__swsetup_r+0x4a>
 801f96c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f970:	4299      	cmp	r1, r3
 801f972:	d002      	beq.n	801f97a <__swsetup_r+0x46>
 801f974:	4628      	mov	r0, r5
 801f976:	f000 f9b5 	bl	801fce4 <_free_r>
 801f97a:	2300      	movs	r3, #0
 801f97c:	6363      	str	r3, [r4, #52]	@ 0x34
 801f97e:	89a3      	ldrh	r3, [r4, #12]
 801f980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f984:	81a3      	strh	r3, [r4, #12]
 801f986:	2300      	movs	r3, #0
 801f988:	6063      	str	r3, [r4, #4]
 801f98a:	6923      	ldr	r3, [r4, #16]
 801f98c:	6023      	str	r3, [r4, #0]
 801f98e:	89a3      	ldrh	r3, [r4, #12]
 801f990:	f043 0308 	orr.w	r3, r3, #8
 801f994:	81a3      	strh	r3, [r4, #12]
 801f996:	6923      	ldr	r3, [r4, #16]
 801f998:	b94b      	cbnz	r3, 801f9ae <__swsetup_r+0x7a>
 801f99a:	89a3      	ldrh	r3, [r4, #12]
 801f99c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f9a4:	d003      	beq.n	801f9ae <__swsetup_r+0x7a>
 801f9a6:	4621      	mov	r1, r4
 801f9a8:	4628      	mov	r0, r5
 801f9aa:	f000 fdb7 	bl	802051c <__smakebuf_r>
 801f9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f9b2:	f013 0201 	ands.w	r2, r3, #1
 801f9b6:	d00a      	beq.n	801f9ce <__swsetup_r+0x9a>
 801f9b8:	2200      	movs	r2, #0
 801f9ba:	60a2      	str	r2, [r4, #8]
 801f9bc:	6962      	ldr	r2, [r4, #20]
 801f9be:	4252      	negs	r2, r2
 801f9c0:	61a2      	str	r2, [r4, #24]
 801f9c2:	6922      	ldr	r2, [r4, #16]
 801f9c4:	b942      	cbnz	r2, 801f9d8 <__swsetup_r+0xa4>
 801f9c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f9ca:	d1c5      	bne.n	801f958 <__swsetup_r+0x24>
 801f9cc:	bd38      	pop	{r3, r4, r5, pc}
 801f9ce:	0799      	lsls	r1, r3, #30
 801f9d0:	bf58      	it	pl
 801f9d2:	6962      	ldrpl	r2, [r4, #20]
 801f9d4:	60a2      	str	r2, [r4, #8]
 801f9d6:	e7f4      	b.n	801f9c2 <__swsetup_r+0x8e>
 801f9d8:	2000      	movs	r0, #0
 801f9da:	e7f7      	b.n	801f9cc <__swsetup_r+0x98>
 801f9dc:	240013a0 	.word	0x240013a0

0801f9e0 <memcmp>:
 801f9e0:	b510      	push	{r4, lr}
 801f9e2:	3901      	subs	r1, #1
 801f9e4:	4402      	add	r2, r0
 801f9e6:	4290      	cmp	r0, r2
 801f9e8:	d101      	bne.n	801f9ee <memcmp+0xe>
 801f9ea:	2000      	movs	r0, #0
 801f9ec:	e005      	b.n	801f9fa <memcmp+0x1a>
 801f9ee:	7803      	ldrb	r3, [r0, #0]
 801f9f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f9f4:	42a3      	cmp	r3, r4
 801f9f6:	d001      	beq.n	801f9fc <memcmp+0x1c>
 801f9f8:	1b18      	subs	r0, r3, r4
 801f9fa:	bd10      	pop	{r4, pc}
 801f9fc:	3001      	adds	r0, #1
 801f9fe:	e7f2      	b.n	801f9e6 <memcmp+0x6>

0801fa00 <memmove>:
 801fa00:	4288      	cmp	r0, r1
 801fa02:	b510      	push	{r4, lr}
 801fa04:	eb01 0402 	add.w	r4, r1, r2
 801fa08:	d902      	bls.n	801fa10 <memmove+0x10>
 801fa0a:	4284      	cmp	r4, r0
 801fa0c:	4623      	mov	r3, r4
 801fa0e:	d807      	bhi.n	801fa20 <memmove+0x20>
 801fa10:	1e43      	subs	r3, r0, #1
 801fa12:	42a1      	cmp	r1, r4
 801fa14:	d008      	beq.n	801fa28 <memmove+0x28>
 801fa16:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fa1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fa1e:	e7f8      	b.n	801fa12 <memmove+0x12>
 801fa20:	4402      	add	r2, r0
 801fa22:	4601      	mov	r1, r0
 801fa24:	428a      	cmp	r2, r1
 801fa26:	d100      	bne.n	801fa2a <memmove+0x2a>
 801fa28:	bd10      	pop	{r4, pc}
 801fa2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fa2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fa32:	e7f7      	b.n	801fa24 <memmove+0x24>

0801fa34 <memset>:
 801fa34:	4402      	add	r2, r0
 801fa36:	4603      	mov	r3, r0
 801fa38:	4293      	cmp	r3, r2
 801fa3a:	d100      	bne.n	801fa3e <memset+0xa>
 801fa3c:	4770      	bx	lr
 801fa3e:	f803 1b01 	strb.w	r1, [r3], #1
 801fa42:	e7f9      	b.n	801fa38 <memset+0x4>

0801fa44 <strchr>:
 801fa44:	b2c9      	uxtb	r1, r1
 801fa46:	4603      	mov	r3, r0
 801fa48:	4618      	mov	r0, r3
 801fa4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa4e:	b112      	cbz	r2, 801fa56 <strchr+0x12>
 801fa50:	428a      	cmp	r2, r1
 801fa52:	d1f9      	bne.n	801fa48 <strchr+0x4>
 801fa54:	4770      	bx	lr
 801fa56:	2900      	cmp	r1, #0
 801fa58:	bf18      	it	ne
 801fa5a:	2000      	movne	r0, #0
 801fa5c:	4770      	bx	lr

0801fa5e <strncmp>:
 801fa5e:	b510      	push	{r4, lr}
 801fa60:	b16a      	cbz	r2, 801fa7e <strncmp+0x20>
 801fa62:	3901      	subs	r1, #1
 801fa64:	1884      	adds	r4, r0, r2
 801fa66:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fa6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801fa6e:	429a      	cmp	r2, r3
 801fa70:	d103      	bne.n	801fa7a <strncmp+0x1c>
 801fa72:	42a0      	cmp	r0, r4
 801fa74:	d001      	beq.n	801fa7a <strncmp+0x1c>
 801fa76:	2a00      	cmp	r2, #0
 801fa78:	d1f5      	bne.n	801fa66 <strncmp+0x8>
 801fa7a:	1ad0      	subs	r0, r2, r3
 801fa7c:	bd10      	pop	{r4, pc}
 801fa7e:	4610      	mov	r0, r2
 801fa80:	e7fc      	b.n	801fa7c <strncmp+0x1e>

0801fa82 <strstr>:
 801fa82:	780a      	ldrb	r2, [r1, #0]
 801fa84:	b570      	push	{r4, r5, r6, lr}
 801fa86:	b96a      	cbnz	r2, 801faa4 <strstr+0x22>
 801fa88:	bd70      	pop	{r4, r5, r6, pc}
 801fa8a:	429a      	cmp	r2, r3
 801fa8c:	d109      	bne.n	801faa2 <strstr+0x20>
 801fa8e:	460c      	mov	r4, r1
 801fa90:	4605      	mov	r5, r0
 801fa92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d0f6      	beq.n	801fa88 <strstr+0x6>
 801fa9a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801fa9e:	429e      	cmp	r6, r3
 801faa0:	d0f7      	beq.n	801fa92 <strstr+0x10>
 801faa2:	3001      	adds	r0, #1
 801faa4:	7803      	ldrb	r3, [r0, #0]
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d1ef      	bne.n	801fa8a <strstr+0x8>
 801faaa:	4618      	mov	r0, r3
 801faac:	e7ec      	b.n	801fa88 <strstr+0x6>
	...

0801fab0 <_close_r>:
 801fab0:	b538      	push	{r3, r4, r5, lr}
 801fab2:	4d06      	ldr	r5, [pc, #24]	@ (801facc <_close_r+0x1c>)
 801fab4:	2300      	movs	r3, #0
 801fab6:	4604      	mov	r4, r0
 801fab8:	4608      	mov	r0, r1
 801faba:	602b      	str	r3, [r5, #0]
 801fabc:	f7e2 fa8a 	bl	8001fd4 <_close>
 801fac0:	1c43      	adds	r3, r0, #1
 801fac2:	d102      	bne.n	801faca <_close_r+0x1a>
 801fac4:	682b      	ldr	r3, [r5, #0]
 801fac6:	b103      	cbz	r3, 801faca <_close_r+0x1a>
 801fac8:	6023      	str	r3, [r4, #0]
 801faca:	bd38      	pop	{r3, r4, r5, pc}
 801facc:	240695d8 	.word	0x240695d8

0801fad0 <_reclaim_reent>:
 801fad0:	4b29      	ldr	r3, [pc, #164]	@ (801fb78 <_reclaim_reent+0xa8>)
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	4283      	cmp	r3, r0
 801fad6:	b570      	push	{r4, r5, r6, lr}
 801fad8:	4604      	mov	r4, r0
 801fada:	d04b      	beq.n	801fb74 <_reclaim_reent+0xa4>
 801fadc:	69c3      	ldr	r3, [r0, #28]
 801fade:	b1ab      	cbz	r3, 801fb0c <_reclaim_reent+0x3c>
 801fae0:	68db      	ldr	r3, [r3, #12]
 801fae2:	b16b      	cbz	r3, 801fb00 <_reclaim_reent+0x30>
 801fae4:	2500      	movs	r5, #0
 801fae6:	69e3      	ldr	r3, [r4, #28]
 801fae8:	68db      	ldr	r3, [r3, #12]
 801faea:	5959      	ldr	r1, [r3, r5]
 801faec:	2900      	cmp	r1, #0
 801faee:	d13b      	bne.n	801fb68 <_reclaim_reent+0x98>
 801faf0:	3504      	adds	r5, #4
 801faf2:	2d80      	cmp	r5, #128	@ 0x80
 801faf4:	d1f7      	bne.n	801fae6 <_reclaim_reent+0x16>
 801faf6:	69e3      	ldr	r3, [r4, #28]
 801faf8:	4620      	mov	r0, r4
 801fafa:	68d9      	ldr	r1, [r3, #12]
 801fafc:	f000 f8f2 	bl	801fce4 <_free_r>
 801fb00:	69e3      	ldr	r3, [r4, #28]
 801fb02:	6819      	ldr	r1, [r3, #0]
 801fb04:	b111      	cbz	r1, 801fb0c <_reclaim_reent+0x3c>
 801fb06:	4620      	mov	r0, r4
 801fb08:	f000 f8ec 	bl	801fce4 <_free_r>
 801fb0c:	6961      	ldr	r1, [r4, #20]
 801fb0e:	b111      	cbz	r1, 801fb16 <_reclaim_reent+0x46>
 801fb10:	4620      	mov	r0, r4
 801fb12:	f000 f8e7 	bl	801fce4 <_free_r>
 801fb16:	69e1      	ldr	r1, [r4, #28]
 801fb18:	b111      	cbz	r1, 801fb20 <_reclaim_reent+0x50>
 801fb1a:	4620      	mov	r0, r4
 801fb1c:	f000 f8e2 	bl	801fce4 <_free_r>
 801fb20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801fb22:	b111      	cbz	r1, 801fb2a <_reclaim_reent+0x5a>
 801fb24:	4620      	mov	r0, r4
 801fb26:	f000 f8dd 	bl	801fce4 <_free_r>
 801fb2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fb2c:	b111      	cbz	r1, 801fb34 <_reclaim_reent+0x64>
 801fb2e:	4620      	mov	r0, r4
 801fb30:	f000 f8d8 	bl	801fce4 <_free_r>
 801fb34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801fb36:	b111      	cbz	r1, 801fb3e <_reclaim_reent+0x6e>
 801fb38:	4620      	mov	r0, r4
 801fb3a:	f000 f8d3 	bl	801fce4 <_free_r>
 801fb3e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801fb40:	b111      	cbz	r1, 801fb48 <_reclaim_reent+0x78>
 801fb42:	4620      	mov	r0, r4
 801fb44:	f000 f8ce 	bl	801fce4 <_free_r>
 801fb48:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801fb4a:	b111      	cbz	r1, 801fb52 <_reclaim_reent+0x82>
 801fb4c:	4620      	mov	r0, r4
 801fb4e:	f000 f8c9 	bl	801fce4 <_free_r>
 801fb52:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801fb54:	b111      	cbz	r1, 801fb5c <_reclaim_reent+0x8c>
 801fb56:	4620      	mov	r0, r4
 801fb58:	f000 f8c4 	bl	801fce4 <_free_r>
 801fb5c:	6a23      	ldr	r3, [r4, #32]
 801fb5e:	b14b      	cbz	r3, 801fb74 <_reclaim_reent+0xa4>
 801fb60:	4620      	mov	r0, r4
 801fb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fb66:	4718      	bx	r3
 801fb68:	680e      	ldr	r6, [r1, #0]
 801fb6a:	4620      	mov	r0, r4
 801fb6c:	f000 f8ba 	bl	801fce4 <_free_r>
 801fb70:	4631      	mov	r1, r6
 801fb72:	e7bb      	b.n	801faec <_reclaim_reent+0x1c>
 801fb74:	bd70      	pop	{r4, r5, r6, pc}
 801fb76:	bf00      	nop
 801fb78:	240013a0 	.word	0x240013a0

0801fb7c <_lseek_r>:
 801fb7c:	b538      	push	{r3, r4, r5, lr}
 801fb7e:	4d07      	ldr	r5, [pc, #28]	@ (801fb9c <_lseek_r+0x20>)
 801fb80:	4604      	mov	r4, r0
 801fb82:	4608      	mov	r0, r1
 801fb84:	4611      	mov	r1, r2
 801fb86:	2200      	movs	r2, #0
 801fb88:	602a      	str	r2, [r5, #0]
 801fb8a:	461a      	mov	r2, r3
 801fb8c:	f7e2 fa49 	bl	8002022 <_lseek>
 801fb90:	1c43      	adds	r3, r0, #1
 801fb92:	d102      	bne.n	801fb9a <_lseek_r+0x1e>
 801fb94:	682b      	ldr	r3, [r5, #0]
 801fb96:	b103      	cbz	r3, 801fb9a <_lseek_r+0x1e>
 801fb98:	6023      	str	r3, [r4, #0]
 801fb9a:	bd38      	pop	{r3, r4, r5, pc}
 801fb9c:	240695d8 	.word	0x240695d8

0801fba0 <_read_r>:
 801fba0:	b538      	push	{r3, r4, r5, lr}
 801fba2:	4d07      	ldr	r5, [pc, #28]	@ (801fbc0 <_read_r+0x20>)
 801fba4:	4604      	mov	r4, r0
 801fba6:	4608      	mov	r0, r1
 801fba8:	4611      	mov	r1, r2
 801fbaa:	2200      	movs	r2, #0
 801fbac:	602a      	str	r2, [r5, #0]
 801fbae:	461a      	mov	r2, r3
 801fbb0:	f7e2 f9d7 	bl	8001f62 <_read>
 801fbb4:	1c43      	adds	r3, r0, #1
 801fbb6:	d102      	bne.n	801fbbe <_read_r+0x1e>
 801fbb8:	682b      	ldr	r3, [r5, #0]
 801fbba:	b103      	cbz	r3, 801fbbe <_read_r+0x1e>
 801fbbc:	6023      	str	r3, [r4, #0]
 801fbbe:	bd38      	pop	{r3, r4, r5, pc}
 801fbc0:	240695d8 	.word	0x240695d8

0801fbc4 <_sbrk_r>:
 801fbc4:	b538      	push	{r3, r4, r5, lr}
 801fbc6:	4d06      	ldr	r5, [pc, #24]	@ (801fbe0 <_sbrk_r+0x1c>)
 801fbc8:	2300      	movs	r3, #0
 801fbca:	4604      	mov	r4, r0
 801fbcc:	4608      	mov	r0, r1
 801fbce:	602b      	str	r3, [r5, #0]
 801fbd0:	f7e2 fa34 	bl	800203c <_sbrk>
 801fbd4:	1c43      	adds	r3, r0, #1
 801fbd6:	d102      	bne.n	801fbde <_sbrk_r+0x1a>
 801fbd8:	682b      	ldr	r3, [r5, #0]
 801fbda:	b103      	cbz	r3, 801fbde <_sbrk_r+0x1a>
 801fbdc:	6023      	str	r3, [r4, #0]
 801fbde:	bd38      	pop	{r3, r4, r5, pc}
 801fbe0:	240695d8 	.word	0x240695d8

0801fbe4 <_write_r>:
 801fbe4:	b538      	push	{r3, r4, r5, lr}
 801fbe6:	4d07      	ldr	r5, [pc, #28]	@ (801fc04 <_write_r+0x20>)
 801fbe8:	4604      	mov	r4, r0
 801fbea:	4608      	mov	r0, r1
 801fbec:	4611      	mov	r1, r2
 801fbee:	2200      	movs	r2, #0
 801fbf0:	602a      	str	r2, [r5, #0]
 801fbf2:	461a      	mov	r2, r3
 801fbf4:	f7e2 f9d2 	bl	8001f9c <_write>
 801fbf8:	1c43      	adds	r3, r0, #1
 801fbfa:	d102      	bne.n	801fc02 <_write_r+0x1e>
 801fbfc:	682b      	ldr	r3, [r5, #0]
 801fbfe:	b103      	cbz	r3, 801fc02 <_write_r+0x1e>
 801fc00:	6023      	str	r3, [r4, #0]
 801fc02:	bd38      	pop	{r3, r4, r5, pc}
 801fc04:	240695d8 	.word	0x240695d8

0801fc08 <__errno>:
 801fc08:	4b01      	ldr	r3, [pc, #4]	@ (801fc10 <__errno+0x8>)
 801fc0a:	6818      	ldr	r0, [r3, #0]
 801fc0c:	4770      	bx	lr
 801fc0e:	bf00      	nop
 801fc10:	240013a0 	.word	0x240013a0

0801fc14 <__libc_init_array>:
 801fc14:	b570      	push	{r4, r5, r6, lr}
 801fc16:	4d0d      	ldr	r5, [pc, #52]	@ (801fc4c <__libc_init_array+0x38>)
 801fc18:	4c0d      	ldr	r4, [pc, #52]	@ (801fc50 <__libc_init_array+0x3c>)
 801fc1a:	1b64      	subs	r4, r4, r5
 801fc1c:	10a4      	asrs	r4, r4, #2
 801fc1e:	2600      	movs	r6, #0
 801fc20:	42a6      	cmp	r6, r4
 801fc22:	d109      	bne.n	801fc38 <__libc_init_array+0x24>
 801fc24:	4d0b      	ldr	r5, [pc, #44]	@ (801fc54 <__libc_init_array+0x40>)
 801fc26:	4c0c      	ldr	r4, [pc, #48]	@ (801fc58 <__libc_init_array+0x44>)
 801fc28:	f000 fe62 	bl	80208f0 <_init>
 801fc2c:	1b64      	subs	r4, r4, r5
 801fc2e:	10a4      	asrs	r4, r4, #2
 801fc30:	2600      	movs	r6, #0
 801fc32:	42a6      	cmp	r6, r4
 801fc34:	d105      	bne.n	801fc42 <__libc_init_array+0x2e>
 801fc36:	bd70      	pop	{r4, r5, r6, pc}
 801fc38:	f855 3b04 	ldr.w	r3, [r5], #4
 801fc3c:	4798      	blx	r3
 801fc3e:	3601      	adds	r6, #1
 801fc40:	e7ee      	b.n	801fc20 <__libc_init_array+0xc>
 801fc42:	f855 3b04 	ldr.w	r3, [r5], #4
 801fc46:	4798      	blx	r3
 801fc48:	3601      	adds	r6, #1
 801fc4a:	e7f2      	b.n	801fc32 <__libc_init_array+0x1e>
 801fc4c:	08023220 	.word	0x08023220
 801fc50:	08023220 	.word	0x08023220
 801fc54:	08023220 	.word	0x08023220
 801fc58:	08023260 	.word	0x08023260

0801fc5c <__retarget_lock_init_recursive>:
 801fc5c:	4770      	bx	lr

0801fc5e <__retarget_lock_acquire_recursive>:
 801fc5e:	4770      	bx	lr

0801fc60 <__retarget_lock_release_recursive>:
 801fc60:	4770      	bx	lr

0801fc62 <strcpy>:
 801fc62:	4603      	mov	r3, r0
 801fc64:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fc68:	f803 2b01 	strb.w	r2, [r3], #1
 801fc6c:	2a00      	cmp	r2, #0
 801fc6e:	d1f9      	bne.n	801fc64 <strcpy+0x2>
 801fc70:	4770      	bx	lr

0801fc72 <memcpy>:
 801fc72:	440a      	add	r2, r1
 801fc74:	4291      	cmp	r1, r2
 801fc76:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801fc7a:	d100      	bne.n	801fc7e <memcpy+0xc>
 801fc7c:	4770      	bx	lr
 801fc7e:	b510      	push	{r4, lr}
 801fc80:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fc84:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fc88:	4291      	cmp	r1, r2
 801fc8a:	d1f9      	bne.n	801fc80 <memcpy+0xe>
 801fc8c:	bd10      	pop	{r4, pc}
	...

0801fc90 <__assert_func>:
 801fc90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fc92:	4614      	mov	r4, r2
 801fc94:	461a      	mov	r2, r3
 801fc96:	4b09      	ldr	r3, [pc, #36]	@ (801fcbc <__assert_func+0x2c>)
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	4605      	mov	r5, r0
 801fc9c:	68d8      	ldr	r0, [r3, #12]
 801fc9e:	b954      	cbnz	r4, 801fcb6 <__assert_func+0x26>
 801fca0:	4b07      	ldr	r3, [pc, #28]	@ (801fcc0 <__assert_func+0x30>)
 801fca2:	461c      	mov	r4, r3
 801fca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fca8:	9100      	str	r1, [sp, #0]
 801fcaa:	462b      	mov	r3, r5
 801fcac:	4905      	ldr	r1, [pc, #20]	@ (801fcc4 <__assert_func+0x34>)
 801fcae:	f000 fbfd 	bl	80204ac <fiprintf>
 801fcb2:	f000 fc91 	bl	80205d8 <abort>
 801fcb6:	4b04      	ldr	r3, [pc, #16]	@ (801fcc8 <__assert_func+0x38>)
 801fcb8:	e7f4      	b.n	801fca4 <__assert_func+0x14>
 801fcba:	bf00      	nop
 801fcbc:	240013a0 	.word	0x240013a0
 801fcc0:	080231e1 	.word	0x080231e1
 801fcc4:	080231b3 	.word	0x080231b3
 801fcc8:	080231a6 	.word	0x080231a6

0801fccc <__env_lock>:
 801fccc:	4801      	ldr	r0, [pc, #4]	@ (801fcd4 <__env_lock+0x8>)
 801fcce:	f7ff bfc6 	b.w	801fc5e <__retarget_lock_acquire_recursive>
 801fcd2:	bf00      	nop
 801fcd4:	240695dc 	.word	0x240695dc

0801fcd8 <__env_unlock>:
 801fcd8:	4801      	ldr	r0, [pc, #4]	@ (801fce0 <__env_unlock+0x8>)
 801fcda:	f7ff bfc1 	b.w	801fc60 <__retarget_lock_release_recursive>
 801fcde:	bf00      	nop
 801fce0:	240695dc 	.word	0x240695dc

0801fce4 <_free_r>:
 801fce4:	b538      	push	{r3, r4, r5, lr}
 801fce6:	4605      	mov	r5, r0
 801fce8:	2900      	cmp	r1, #0
 801fcea:	d041      	beq.n	801fd70 <_free_r+0x8c>
 801fcec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fcf0:	1f0c      	subs	r4, r1, #4
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	bfb8      	it	lt
 801fcf6:	18e4      	addlt	r4, r4, r3
 801fcf8:	f7ff faec 	bl	801f2d4 <__malloc_lock>
 801fcfc:	4a1d      	ldr	r2, [pc, #116]	@ (801fd74 <_free_r+0x90>)
 801fcfe:	6813      	ldr	r3, [r2, #0]
 801fd00:	b933      	cbnz	r3, 801fd10 <_free_r+0x2c>
 801fd02:	6063      	str	r3, [r4, #4]
 801fd04:	6014      	str	r4, [r2, #0]
 801fd06:	4628      	mov	r0, r5
 801fd08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd0c:	f7ff bae8 	b.w	801f2e0 <__malloc_unlock>
 801fd10:	42a3      	cmp	r3, r4
 801fd12:	d908      	bls.n	801fd26 <_free_r+0x42>
 801fd14:	6820      	ldr	r0, [r4, #0]
 801fd16:	1821      	adds	r1, r4, r0
 801fd18:	428b      	cmp	r3, r1
 801fd1a:	bf01      	itttt	eq
 801fd1c:	6819      	ldreq	r1, [r3, #0]
 801fd1e:	685b      	ldreq	r3, [r3, #4]
 801fd20:	1809      	addeq	r1, r1, r0
 801fd22:	6021      	streq	r1, [r4, #0]
 801fd24:	e7ed      	b.n	801fd02 <_free_r+0x1e>
 801fd26:	461a      	mov	r2, r3
 801fd28:	685b      	ldr	r3, [r3, #4]
 801fd2a:	b10b      	cbz	r3, 801fd30 <_free_r+0x4c>
 801fd2c:	42a3      	cmp	r3, r4
 801fd2e:	d9fa      	bls.n	801fd26 <_free_r+0x42>
 801fd30:	6811      	ldr	r1, [r2, #0]
 801fd32:	1850      	adds	r0, r2, r1
 801fd34:	42a0      	cmp	r0, r4
 801fd36:	d10b      	bne.n	801fd50 <_free_r+0x6c>
 801fd38:	6820      	ldr	r0, [r4, #0]
 801fd3a:	4401      	add	r1, r0
 801fd3c:	1850      	adds	r0, r2, r1
 801fd3e:	4283      	cmp	r3, r0
 801fd40:	6011      	str	r1, [r2, #0]
 801fd42:	d1e0      	bne.n	801fd06 <_free_r+0x22>
 801fd44:	6818      	ldr	r0, [r3, #0]
 801fd46:	685b      	ldr	r3, [r3, #4]
 801fd48:	6053      	str	r3, [r2, #4]
 801fd4a:	4408      	add	r0, r1
 801fd4c:	6010      	str	r0, [r2, #0]
 801fd4e:	e7da      	b.n	801fd06 <_free_r+0x22>
 801fd50:	d902      	bls.n	801fd58 <_free_r+0x74>
 801fd52:	230c      	movs	r3, #12
 801fd54:	602b      	str	r3, [r5, #0]
 801fd56:	e7d6      	b.n	801fd06 <_free_r+0x22>
 801fd58:	6820      	ldr	r0, [r4, #0]
 801fd5a:	1821      	adds	r1, r4, r0
 801fd5c:	428b      	cmp	r3, r1
 801fd5e:	bf04      	itt	eq
 801fd60:	6819      	ldreq	r1, [r3, #0]
 801fd62:	685b      	ldreq	r3, [r3, #4]
 801fd64:	6063      	str	r3, [r4, #4]
 801fd66:	bf04      	itt	eq
 801fd68:	1809      	addeq	r1, r1, r0
 801fd6a:	6021      	streq	r1, [r4, #0]
 801fd6c:	6054      	str	r4, [r2, #4]
 801fd6e:	e7ca      	b.n	801fd06 <_free_r+0x22>
 801fd70:	bd38      	pop	{r3, r4, r5, pc}
 801fd72:	bf00      	nop
 801fd74:	24069498 	.word	0x24069498

0801fd78 <_malloc_usable_size_r>:
 801fd78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd7c:	1f18      	subs	r0, r3, #4
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	bfbc      	itt	lt
 801fd82:	580b      	ldrlt	r3, [r1, r0]
 801fd84:	18c0      	addlt	r0, r0, r3
 801fd86:	4770      	bx	lr

0801fd88 <__ssputs_r>:
 801fd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd8c:	688e      	ldr	r6, [r1, #8]
 801fd8e:	461f      	mov	r7, r3
 801fd90:	42be      	cmp	r6, r7
 801fd92:	680b      	ldr	r3, [r1, #0]
 801fd94:	4682      	mov	sl, r0
 801fd96:	460c      	mov	r4, r1
 801fd98:	4690      	mov	r8, r2
 801fd9a:	d82d      	bhi.n	801fdf8 <__ssputs_r+0x70>
 801fd9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fda0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801fda4:	d026      	beq.n	801fdf4 <__ssputs_r+0x6c>
 801fda6:	6965      	ldr	r5, [r4, #20]
 801fda8:	6909      	ldr	r1, [r1, #16]
 801fdaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fdae:	eba3 0901 	sub.w	r9, r3, r1
 801fdb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fdb6:	1c7b      	adds	r3, r7, #1
 801fdb8:	444b      	add	r3, r9
 801fdba:	106d      	asrs	r5, r5, #1
 801fdbc:	429d      	cmp	r5, r3
 801fdbe:	bf38      	it	cc
 801fdc0:	461d      	movcc	r5, r3
 801fdc2:	0553      	lsls	r3, r2, #21
 801fdc4:	d527      	bpl.n	801fe16 <__ssputs_r+0x8e>
 801fdc6:	4629      	mov	r1, r5
 801fdc8:	f7ff fa04 	bl	801f1d4 <_malloc_r>
 801fdcc:	4606      	mov	r6, r0
 801fdce:	b360      	cbz	r0, 801fe2a <__ssputs_r+0xa2>
 801fdd0:	6921      	ldr	r1, [r4, #16]
 801fdd2:	464a      	mov	r2, r9
 801fdd4:	f7ff ff4d 	bl	801fc72 <memcpy>
 801fdd8:	89a3      	ldrh	r3, [r4, #12]
 801fdda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801fdde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fde2:	81a3      	strh	r3, [r4, #12]
 801fde4:	6126      	str	r6, [r4, #16]
 801fde6:	6165      	str	r5, [r4, #20]
 801fde8:	444e      	add	r6, r9
 801fdea:	eba5 0509 	sub.w	r5, r5, r9
 801fdee:	6026      	str	r6, [r4, #0]
 801fdf0:	60a5      	str	r5, [r4, #8]
 801fdf2:	463e      	mov	r6, r7
 801fdf4:	42be      	cmp	r6, r7
 801fdf6:	d900      	bls.n	801fdfa <__ssputs_r+0x72>
 801fdf8:	463e      	mov	r6, r7
 801fdfa:	6820      	ldr	r0, [r4, #0]
 801fdfc:	4632      	mov	r2, r6
 801fdfe:	4641      	mov	r1, r8
 801fe00:	f7ff fdfe 	bl	801fa00 <memmove>
 801fe04:	68a3      	ldr	r3, [r4, #8]
 801fe06:	1b9b      	subs	r3, r3, r6
 801fe08:	60a3      	str	r3, [r4, #8]
 801fe0a:	6823      	ldr	r3, [r4, #0]
 801fe0c:	4433      	add	r3, r6
 801fe0e:	6023      	str	r3, [r4, #0]
 801fe10:	2000      	movs	r0, #0
 801fe12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe16:	462a      	mov	r2, r5
 801fe18:	f7ff fadc 	bl	801f3d4 <_realloc_r>
 801fe1c:	4606      	mov	r6, r0
 801fe1e:	2800      	cmp	r0, #0
 801fe20:	d1e0      	bne.n	801fde4 <__ssputs_r+0x5c>
 801fe22:	6921      	ldr	r1, [r4, #16]
 801fe24:	4650      	mov	r0, sl
 801fe26:	f7ff ff5d 	bl	801fce4 <_free_r>
 801fe2a:	230c      	movs	r3, #12
 801fe2c:	f8ca 3000 	str.w	r3, [sl]
 801fe30:	89a3      	ldrh	r3, [r4, #12]
 801fe32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fe36:	81a3      	strh	r3, [r4, #12]
 801fe38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fe3c:	e7e9      	b.n	801fe12 <__ssputs_r+0x8a>
	...

0801fe40 <_svfiprintf_r>:
 801fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe44:	4698      	mov	r8, r3
 801fe46:	898b      	ldrh	r3, [r1, #12]
 801fe48:	061b      	lsls	r3, r3, #24
 801fe4a:	b09d      	sub	sp, #116	@ 0x74
 801fe4c:	4607      	mov	r7, r0
 801fe4e:	460d      	mov	r5, r1
 801fe50:	4614      	mov	r4, r2
 801fe52:	d510      	bpl.n	801fe76 <_svfiprintf_r+0x36>
 801fe54:	690b      	ldr	r3, [r1, #16]
 801fe56:	b973      	cbnz	r3, 801fe76 <_svfiprintf_r+0x36>
 801fe58:	2140      	movs	r1, #64	@ 0x40
 801fe5a:	f7ff f9bb 	bl	801f1d4 <_malloc_r>
 801fe5e:	6028      	str	r0, [r5, #0]
 801fe60:	6128      	str	r0, [r5, #16]
 801fe62:	b930      	cbnz	r0, 801fe72 <_svfiprintf_r+0x32>
 801fe64:	230c      	movs	r3, #12
 801fe66:	603b      	str	r3, [r7, #0]
 801fe68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fe6c:	b01d      	add	sp, #116	@ 0x74
 801fe6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe72:	2340      	movs	r3, #64	@ 0x40
 801fe74:	616b      	str	r3, [r5, #20]
 801fe76:	2300      	movs	r3, #0
 801fe78:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe7a:	2320      	movs	r3, #32
 801fe7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fe80:	f8cd 800c 	str.w	r8, [sp, #12]
 801fe84:	2330      	movs	r3, #48	@ 0x30
 801fe86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020024 <_svfiprintf_r+0x1e4>
 801fe8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fe8e:	f04f 0901 	mov.w	r9, #1
 801fe92:	4623      	mov	r3, r4
 801fe94:	469a      	mov	sl, r3
 801fe96:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe9a:	b10a      	cbz	r2, 801fea0 <_svfiprintf_r+0x60>
 801fe9c:	2a25      	cmp	r2, #37	@ 0x25
 801fe9e:	d1f9      	bne.n	801fe94 <_svfiprintf_r+0x54>
 801fea0:	ebba 0b04 	subs.w	fp, sl, r4
 801fea4:	d00b      	beq.n	801febe <_svfiprintf_r+0x7e>
 801fea6:	465b      	mov	r3, fp
 801fea8:	4622      	mov	r2, r4
 801feaa:	4629      	mov	r1, r5
 801feac:	4638      	mov	r0, r7
 801feae:	f7ff ff6b 	bl	801fd88 <__ssputs_r>
 801feb2:	3001      	adds	r0, #1
 801feb4:	f000 80a7 	beq.w	8020006 <_svfiprintf_r+0x1c6>
 801feb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801feba:	445a      	add	r2, fp
 801febc:	9209      	str	r2, [sp, #36]	@ 0x24
 801febe:	f89a 3000 	ldrb.w	r3, [sl]
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	f000 809f 	beq.w	8020006 <_svfiprintf_r+0x1c6>
 801fec8:	2300      	movs	r3, #0
 801feca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801fece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fed2:	f10a 0a01 	add.w	sl, sl, #1
 801fed6:	9304      	str	r3, [sp, #16]
 801fed8:	9307      	str	r3, [sp, #28]
 801feda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fede:	931a      	str	r3, [sp, #104]	@ 0x68
 801fee0:	4654      	mov	r4, sl
 801fee2:	2205      	movs	r2, #5
 801fee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fee8:	484e      	ldr	r0, [pc, #312]	@ (8020024 <_svfiprintf_r+0x1e4>)
 801feea:	f7e0 fa11 	bl	8000310 <memchr>
 801feee:	9a04      	ldr	r2, [sp, #16]
 801fef0:	b9d8      	cbnz	r0, 801ff2a <_svfiprintf_r+0xea>
 801fef2:	06d0      	lsls	r0, r2, #27
 801fef4:	bf44      	itt	mi
 801fef6:	2320      	movmi	r3, #32
 801fef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fefc:	0711      	lsls	r1, r2, #28
 801fefe:	bf44      	itt	mi
 801ff00:	232b      	movmi	r3, #43	@ 0x2b
 801ff02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ff06:	f89a 3000 	ldrb.w	r3, [sl]
 801ff0a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ff0c:	d015      	beq.n	801ff3a <_svfiprintf_r+0xfa>
 801ff0e:	9a07      	ldr	r2, [sp, #28]
 801ff10:	4654      	mov	r4, sl
 801ff12:	2000      	movs	r0, #0
 801ff14:	f04f 0c0a 	mov.w	ip, #10
 801ff18:	4621      	mov	r1, r4
 801ff1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ff1e:	3b30      	subs	r3, #48	@ 0x30
 801ff20:	2b09      	cmp	r3, #9
 801ff22:	d94b      	bls.n	801ffbc <_svfiprintf_r+0x17c>
 801ff24:	b1b0      	cbz	r0, 801ff54 <_svfiprintf_r+0x114>
 801ff26:	9207      	str	r2, [sp, #28]
 801ff28:	e014      	b.n	801ff54 <_svfiprintf_r+0x114>
 801ff2a:	eba0 0308 	sub.w	r3, r0, r8
 801ff2e:	fa09 f303 	lsl.w	r3, r9, r3
 801ff32:	4313      	orrs	r3, r2
 801ff34:	9304      	str	r3, [sp, #16]
 801ff36:	46a2      	mov	sl, r4
 801ff38:	e7d2      	b.n	801fee0 <_svfiprintf_r+0xa0>
 801ff3a:	9b03      	ldr	r3, [sp, #12]
 801ff3c:	1d19      	adds	r1, r3, #4
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	9103      	str	r1, [sp, #12]
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	bfbb      	ittet	lt
 801ff46:	425b      	neglt	r3, r3
 801ff48:	f042 0202 	orrlt.w	r2, r2, #2
 801ff4c:	9307      	strge	r3, [sp, #28]
 801ff4e:	9307      	strlt	r3, [sp, #28]
 801ff50:	bfb8      	it	lt
 801ff52:	9204      	strlt	r2, [sp, #16]
 801ff54:	7823      	ldrb	r3, [r4, #0]
 801ff56:	2b2e      	cmp	r3, #46	@ 0x2e
 801ff58:	d10a      	bne.n	801ff70 <_svfiprintf_r+0x130>
 801ff5a:	7863      	ldrb	r3, [r4, #1]
 801ff5c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ff5e:	d132      	bne.n	801ffc6 <_svfiprintf_r+0x186>
 801ff60:	9b03      	ldr	r3, [sp, #12]
 801ff62:	1d1a      	adds	r2, r3, #4
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	9203      	str	r2, [sp, #12]
 801ff68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ff6c:	3402      	adds	r4, #2
 801ff6e:	9305      	str	r3, [sp, #20]
 801ff70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020034 <_svfiprintf_r+0x1f4>
 801ff74:	7821      	ldrb	r1, [r4, #0]
 801ff76:	2203      	movs	r2, #3
 801ff78:	4650      	mov	r0, sl
 801ff7a:	f7e0 f9c9 	bl	8000310 <memchr>
 801ff7e:	b138      	cbz	r0, 801ff90 <_svfiprintf_r+0x150>
 801ff80:	9b04      	ldr	r3, [sp, #16]
 801ff82:	eba0 000a 	sub.w	r0, r0, sl
 801ff86:	2240      	movs	r2, #64	@ 0x40
 801ff88:	4082      	lsls	r2, r0
 801ff8a:	4313      	orrs	r3, r2
 801ff8c:	3401      	adds	r4, #1
 801ff8e:	9304      	str	r3, [sp, #16]
 801ff90:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff94:	4824      	ldr	r0, [pc, #144]	@ (8020028 <_svfiprintf_r+0x1e8>)
 801ff96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ff9a:	2206      	movs	r2, #6
 801ff9c:	f7e0 f9b8 	bl	8000310 <memchr>
 801ffa0:	2800      	cmp	r0, #0
 801ffa2:	d036      	beq.n	8020012 <_svfiprintf_r+0x1d2>
 801ffa4:	4b21      	ldr	r3, [pc, #132]	@ (802002c <_svfiprintf_r+0x1ec>)
 801ffa6:	bb1b      	cbnz	r3, 801fff0 <_svfiprintf_r+0x1b0>
 801ffa8:	9b03      	ldr	r3, [sp, #12]
 801ffaa:	3307      	adds	r3, #7
 801ffac:	f023 0307 	bic.w	r3, r3, #7
 801ffb0:	3308      	adds	r3, #8
 801ffb2:	9303      	str	r3, [sp, #12]
 801ffb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffb6:	4433      	add	r3, r6
 801ffb8:	9309      	str	r3, [sp, #36]	@ 0x24
 801ffba:	e76a      	b.n	801fe92 <_svfiprintf_r+0x52>
 801ffbc:	fb0c 3202 	mla	r2, ip, r2, r3
 801ffc0:	460c      	mov	r4, r1
 801ffc2:	2001      	movs	r0, #1
 801ffc4:	e7a8      	b.n	801ff18 <_svfiprintf_r+0xd8>
 801ffc6:	2300      	movs	r3, #0
 801ffc8:	3401      	adds	r4, #1
 801ffca:	9305      	str	r3, [sp, #20]
 801ffcc:	4619      	mov	r1, r3
 801ffce:	f04f 0c0a 	mov.w	ip, #10
 801ffd2:	4620      	mov	r0, r4
 801ffd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ffd8:	3a30      	subs	r2, #48	@ 0x30
 801ffda:	2a09      	cmp	r2, #9
 801ffdc:	d903      	bls.n	801ffe6 <_svfiprintf_r+0x1a6>
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d0c6      	beq.n	801ff70 <_svfiprintf_r+0x130>
 801ffe2:	9105      	str	r1, [sp, #20]
 801ffe4:	e7c4      	b.n	801ff70 <_svfiprintf_r+0x130>
 801ffe6:	fb0c 2101 	mla	r1, ip, r1, r2
 801ffea:	4604      	mov	r4, r0
 801ffec:	2301      	movs	r3, #1
 801ffee:	e7f0      	b.n	801ffd2 <_svfiprintf_r+0x192>
 801fff0:	ab03      	add	r3, sp, #12
 801fff2:	9300      	str	r3, [sp, #0]
 801fff4:	462a      	mov	r2, r5
 801fff6:	4b0e      	ldr	r3, [pc, #56]	@ (8020030 <_svfiprintf_r+0x1f0>)
 801fff8:	a904      	add	r1, sp, #16
 801fffa:	4638      	mov	r0, r7
 801fffc:	f3af 8000 	nop.w
 8020000:	1c42      	adds	r2, r0, #1
 8020002:	4606      	mov	r6, r0
 8020004:	d1d6      	bne.n	801ffb4 <_svfiprintf_r+0x174>
 8020006:	89ab      	ldrh	r3, [r5, #12]
 8020008:	065b      	lsls	r3, r3, #25
 802000a:	f53f af2d 	bmi.w	801fe68 <_svfiprintf_r+0x28>
 802000e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020010:	e72c      	b.n	801fe6c <_svfiprintf_r+0x2c>
 8020012:	ab03      	add	r3, sp, #12
 8020014:	9300      	str	r3, [sp, #0]
 8020016:	462a      	mov	r2, r5
 8020018:	4b05      	ldr	r3, [pc, #20]	@ (8020030 <_svfiprintf_r+0x1f0>)
 802001a:	a904      	add	r1, sp, #16
 802001c:	4638      	mov	r0, r7
 802001e:	f000 f879 	bl	8020114 <_printf_i>
 8020022:	e7ed      	b.n	8020000 <_svfiprintf_r+0x1c0>
 8020024:	080231e2 	.word	0x080231e2
 8020028:	080231ec 	.word	0x080231ec
 802002c:	00000000 	.word	0x00000000
 8020030:	0801fd89 	.word	0x0801fd89
 8020034:	080231e8 	.word	0x080231e8

08020038 <_printf_common>:
 8020038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802003c:	4616      	mov	r6, r2
 802003e:	4698      	mov	r8, r3
 8020040:	688a      	ldr	r2, [r1, #8]
 8020042:	690b      	ldr	r3, [r1, #16]
 8020044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020048:	4293      	cmp	r3, r2
 802004a:	bfb8      	it	lt
 802004c:	4613      	movlt	r3, r2
 802004e:	6033      	str	r3, [r6, #0]
 8020050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020054:	4607      	mov	r7, r0
 8020056:	460c      	mov	r4, r1
 8020058:	b10a      	cbz	r2, 802005e <_printf_common+0x26>
 802005a:	3301      	adds	r3, #1
 802005c:	6033      	str	r3, [r6, #0]
 802005e:	6823      	ldr	r3, [r4, #0]
 8020060:	0699      	lsls	r1, r3, #26
 8020062:	bf42      	ittt	mi
 8020064:	6833      	ldrmi	r3, [r6, #0]
 8020066:	3302      	addmi	r3, #2
 8020068:	6033      	strmi	r3, [r6, #0]
 802006a:	6825      	ldr	r5, [r4, #0]
 802006c:	f015 0506 	ands.w	r5, r5, #6
 8020070:	d106      	bne.n	8020080 <_printf_common+0x48>
 8020072:	f104 0a19 	add.w	sl, r4, #25
 8020076:	68e3      	ldr	r3, [r4, #12]
 8020078:	6832      	ldr	r2, [r6, #0]
 802007a:	1a9b      	subs	r3, r3, r2
 802007c:	42ab      	cmp	r3, r5
 802007e:	dc26      	bgt.n	80200ce <_printf_common+0x96>
 8020080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020084:	6822      	ldr	r2, [r4, #0]
 8020086:	3b00      	subs	r3, #0
 8020088:	bf18      	it	ne
 802008a:	2301      	movne	r3, #1
 802008c:	0692      	lsls	r2, r2, #26
 802008e:	d42b      	bmi.n	80200e8 <_printf_common+0xb0>
 8020090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020094:	4641      	mov	r1, r8
 8020096:	4638      	mov	r0, r7
 8020098:	47c8      	blx	r9
 802009a:	3001      	adds	r0, #1
 802009c:	d01e      	beq.n	80200dc <_printf_common+0xa4>
 802009e:	6823      	ldr	r3, [r4, #0]
 80200a0:	6922      	ldr	r2, [r4, #16]
 80200a2:	f003 0306 	and.w	r3, r3, #6
 80200a6:	2b04      	cmp	r3, #4
 80200a8:	bf02      	ittt	eq
 80200aa:	68e5      	ldreq	r5, [r4, #12]
 80200ac:	6833      	ldreq	r3, [r6, #0]
 80200ae:	1aed      	subeq	r5, r5, r3
 80200b0:	68a3      	ldr	r3, [r4, #8]
 80200b2:	bf0c      	ite	eq
 80200b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80200b8:	2500      	movne	r5, #0
 80200ba:	4293      	cmp	r3, r2
 80200bc:	bfc4      	itt	gt
 80200be:	1a9b      	subgt	r3, r3, r2
 80200c0:	18ed      	addgt	r5, r5, r3
 80200c2:	2600      	movs	r6, #0
 80200c4:	341a      	adds	r4, #26
 80200c6:	42b5      	cmp	r5, r6
 80200c8:	d11a      	bne.n	8020100 <_printf_common+0xc8>
 80200ca:	2000      	movs	r0, #0
 80200cc:	e008      	b.n	80200e0 <_printf_common+0xa8>
 80200ce:	2301      	movs	r3, #1
 80200d0:	4652      	mov	r2, sl
 80200d2:	4641      	mov	r1, r8
 80200d4:	4638      	mov	r0, r7
 80200d6:	47c8      	blx	r9
 80200d8:	3001      	adds	r0, #1
 80200da:	d103      	bne.n	80200e4 <_printf_common+0xac>
 80200dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80200e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200e4:	3501      	adds	r5, #1
 80200e6:	e7c6      	b.n	8020076 <_printf_common+0x3e>
 80200e8:	18e1      	adds	r1, r4, r3
 80200ea:	1c5a      	adds	r2, r3, #1
 80200ec:	2030      	movs	r0, #48	@ 0x30
 80200ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80200f2:	4422      	add	r2, r4
 80200f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80200f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80200fc:	3302      	adds	r3, #2
 80200fe:	e7c7      	b.n	8020090 <_printf_common+0x58>
 8020100:	2301      	movs	r3, #1
 8020102:	4622      	mov	r2, r4
 8020104:	4641      	mov	r1, r8
 8020106:	4638      	mov	r0, r7
 8020108:	47c8      	blx	r9
 802010a:	3001      	adds	r0, #1
 802010c:	d0e6      	beq.n	80200dc <_printf_common+0xa4>
 802010e:	3601      	adds	r6, #1
 8020110:	e7d9      	b.n	80200c6 <_printf_common+0x8e>
	...

08020114 <_printf_i>:
 8020114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020118:	7e0f      	ldrb	r7, [r1, #24]
 802011a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802011c:	2f78      	cmp	r7, #120	@ 0x78
 802011e:	4691      	mov	r9, r2
 8020120:	4680      	mov	r8, r0
 8020122:	460c      	mov	r4, r1
 8020124:	469a      	mov	sl, r3
 8020126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802012a:	d807      	bhi.n	802013c <_printf_i+0x28>
 802012c:	2f62      	cmp	r7, #98	@ 0x62
 802012e:	d80a      	bhi.n	8020146 <_printf_i+0x32>
 8020130:	2f00      	cmp	r7, #0
 8020132:	f000 80d2 	beq.w	80202da <_printf_i+0x1c6>
 8020136:	2f58      	cmp	r7, #88	@ 0x58
 8020138:	f000 80b9 	beq.w	80202ae <_printf_i+0x19a>
 802013c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020144:	e03a      	b.n	80201bc <_printf_i+0xa8>
 8020146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802014a:	2b15      	cmp	r3, #21
 802014c:	d8f6      	bhi.n	802013c <_printf_i+0x28>
 802014e:	a101      	add	r1, pc, #4	@ (adr r1, 8020154 <_printf_i+0x40>)
 8020150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020154:	080201ad 	.word	0x080201ad
 8020158:	080201c1 	.word	0x080201c1
 802015c:	0802013d 	.word	0x0802013d
 8020160:	0802013d 	.word	0x0802013d
 8020164:	0802013d 	.word	0x0802013d
 8020168:	0802013d 	.word	0x0802013d
 802016c:	080201c1 	.word	0x080201c1
 8020170:	0802013d 	.word	0x0802013d
 8020174:	0802013d 	.word	0x0802013d
 8020178:	0802013d 	.word	0x0802013d
 802017c:	0802013d 	.word	0x0802013d
 8020180:	080202c1 	.word	0x080202c1
 8020184:	080201eb 	.word	0x080201eb
 8020188:	0802027b 	.word	0x0802027b
 802018c:	0802013d 	.word	0x0802013d
 8020190:	0802013d 	.word	0x0802013d
 8020194:	080202e3 	.word	0x080202e3
 8020198:	0802013d 	.word	0x0802013d
 802019c:	080201eb 	.word	0x080201eb
 80201a0:	0802013d 	.word	0x0802013d
 80201a4:	0802013d 	.word	0x0802013d
 80201a8:	08020283 	.word	0x08020283
 80201ac:	6833      	ldr	r3, [r6, #0]
 80201ae:	1d1a      	adds	r2, r3, #4
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	6032      	str	r2, [r6, #0]
 80201b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80201b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80201bc:	2301      	movs	r3, #1
 80201be:	e09d      	b.n	80202fc <_printf_i+0x1e8>
 80201c0:	6833      	ldr	r3, [r6, #0]
 80201c2:	6820      	ldr	r0, [r4, #0]
 80201c4:	1d19      	adds	r1, r3, #4
 80201c6:	6031      	str	r1, [r6, #0]
 80201c8:	0606      	lsls	r6, r0, #24
 80201ca:	d501      	bpl.n	80201d0 <_printf_i+0xbc>
 80201cc:	681d      	ldr	r5, [r3, #0]
 80201ce:	e003      	b.n	80201d8 <_printf_i+0xc4>
 80201d0:	0645      	lsls	r5, r0, #25
 80201d2:	d5fb      	bpl.n	80201cc <_printf_i+0xb8>
 80201d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80201d8:	2d00      	cmp	r5, #0
 80201da:	da03      	bge.n	80201e4 <_printf_i+0xd0>
 80201dc:	232d      	movs	r3, #45	@ 0x2d
 80201de:	426d      	negs	r5, r5
 80201e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80201e4:	4859      	ldr	r0, [pc, #356]	@ (802034c <_printf_i+0x238>)
 80201e6:	230a      	movs	r3, #10
 80201e8:	e011      	b.n	802020e <_printf_i+0xfa>
 80201ea:	6821      	ldr	r1, [r4, #0]
 80201ec:	6833      	ldr	r3, [r6, #0]
 80201ee:	0608      	lsls	r0, r1, #24
 80201f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80201f4:	d402      	bmi.n	80201fc <_printf_i+0xe8>
 80201f6:	0649      	lsls	r1, r1, #25
 80201f8:	bf48      	it	mi
 80201fa:	b2ad      	uxthmi	r5, r5
 80201fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80201fe:	4853      	ldr	r0, [pc, #332]	@ (802034c <_printf_i+0x238>)
 8020200:	6033      	str	r3, [r6, #0]
 8020202:	bf14      	ite	ne
 8020204:	230a      	movne	r3, #10
 8020206:	2308      	moveq	r3, #8
 8020208:	2100      	movs	r1, #0
 802020a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802020e:	6866      	ldr	r6, [r4, #4]
 8020210:	60a6      	str	r6, [r4, #8]
 8020212:	2e00      	cmp	r6, #0
 8020214:	bfa2      	ittt	ge
 8020216:	6821      	ldrge	r1, [r4, #0]
 8020218:	f021 0104 	bicge.w	r1, r1, #4
 802021c:	6021      	strge	r1, [r4, #0]
 802021e:	b90d      	cbnz	r5, 8020224 <_printf_i+0x110>
 8020220:	2e00      	cmp	r6, #0
 8020222:	d04b      	beq.n	80202bc <_printf_i+0x1a8>
 8020224:	4616      	mov	r6, r2
 8020226:	fbb5 f1f3 	udiv	r1, r5, r3
 802022a:	fb03 5711 	mls	r7, r3, r1, r5
 802022e:	5dc7      	ldrb	r7, [r0, r7]
 8020230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020234:	462f      	mov	r7, r5
 8020236:	42bb      	cmp	r3, r7
 8020238:	460d      	mov	r5, r1
 802023a:	d9f4      	bls.n	8020226 <_printf_i+0x112>
 802023c:	2b08      	cmp	r3, #8
 802023e:	d10b      	bne.n	8020258 <_printf_i+0x144>
 8020240:	6823      	ldr	r3, [r4, #0]
 8020242:	07df      	lsls	r7, r3, #31
 8020244:	d508      	bpl.n	8020258 <_printf_i+0x144>
 8020246:	6923      	ldr	r3, [r4, #16]
 8020248:	6861      	ldr	r1, [r4, #4]
 802024a:	4299      	cmp	r1, r3
 802024c:	bfde      	ittt	le
 802024e:	2330      	movle	r3, #48	@ 0x30
 8020250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020254:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8020258:	1b92      	subs	r2, r2, r6
 802025a:	6122      	str	r2, [r4, #16]
 802025c:	f8cd a000 	str.w	sl, [sp]
 8020260:	464b      	mov	r3, r9
 8020262:	aa03      	add	r2, sp, #12
 8020264:	4621      	mov	r1, r4
 8020266:	4640      	mov	r0, r8
 8020268:	f7ff fee6 	bl	8020038 <_printf_common>
 802026c:	3001      	adds	r0, #1
 802026e:	d14a      	bne.n	8020306 <_printf_i+0x1f2>
 8020270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020274:	b004      	add	sp, #16
 8020276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802027a:	6823      	ldr	r3, [r4, #0]
 802027c:	f043 0320 	orr.w	r3, r3, #32
 8020280:	6023      	str	r3, [r4, #0]
 8020282:	4833      	ldr	r0, [pc, #204]	@ (8020350 <_printf_i+0x23c>)
 8020284:	2778      	movs	r7, #120	@ 0x78
 8020286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802028a:	6823      	ldr	r3, [r4, #0]
 802028c:	6831      	ldr	r1, [r6, #0]
 802028e:	061f      	lsls	r7, r3, #24
 8020290:	f851 5b04 	ldr.w	r5, [r1], #4
 8020294:	d402      	bmi.n	802029c <_printf_i+0x188>
 8020296:	065f      	lsls	r7, r3, #25
 8020298:	bf48      	it	mi
 802029a:	b2ad      	uxthmi	r5, r5
 802029c:	6031      	str	r1, [r6, #0]
 802029e:	07d9      	lsls	r1, r3, #31
 80202a0:	bf44      	itt	mi
 80202a2:	f043 0320 	orrmi.w	r3, r3, #32
 80202a6:	6023      	strmi	r3, [r4, #0]
 80202a8:	b11d      	cbz	r5, 80202b2 <_printf_i+0x19e>
 80202aa:	2310      	movs	r3, #16
 80202ac:	e7ac      	b.n	8020208 <_printf_i+0xf4>
 80202ae:	4827      	ldr	r0, [pc, #156]	@ (802034c <_printf_i+0x238>)
 80202b0:	e7e9      	b.n	8020286 <_printf_i+0x172>
 80202b2:	6823      	ldr	r3, [r4, #0]
 80202b4:	f023 0320 	bic.w	r3, r3, #32
 80202b8:	6023      	str	r3, [r4, #0]
 80202ba:	e7f6      	b.n	80202aa <_printf_i+0x196>
 80202bc:	4616      	mov	r6, r2
 80202be:	e7bd      	b.n	802023c <_printf_i+0x128>
 80202c0:	6833      	ldr	r3, [r6, #0]
 80202c2:	6825      	ldr	r5, [r4, #0]
 80202c4:	6961      	ldr	r1, [r4, #20]
 80202c6:	1d18      	adds	r0, r3, #4
 80202c8:	6030      	str	r0, [r6, #0]
 80202ca:	062e      	lsls	r6, r5, #24
 80202cc:	681b      	ldr	r3, [r3, #0]
 80202ce:	d501      	bpl.n	80202d4 <_printf_i+0x1c0>
 80202d0:	6019      	str	r1, [r3, #0]
 80202d2:	e002      	b.n	80202da <_printf_i+0x1c6>
 80202d4:	0668      	lsls	r0, r5, #25
 80202d6:	d5fb      	bpl.n	80202d0 <_printf_i+0x1bc>
 80202d8:	8019      	strh	r1, [r3, #0]
 80202da:	2300      	movs	r3, #0
 80202dc:	6123      	str	r3, [r4, #16]
 80202de:	4616      	mov	r6, r2
 80202e0:	e7bc      	b.n	802025c <_printf_i+0x148>
 80202e2:	6833      	ldr	r3, [r6, #0]
 80202e4:	1d1a      	adds	r2, r3, #4
 80202e6:	6032      	str	r2, [r6, #0]
 80202e8:	681e      	ldr	r6, [r3, #0]
 80202ea:	6862      	ldr	r2, [r4, #4]
 80202ec:	2100      	movs	r1, #0
 80202ee:	4630      	mov	r0, r6
 80202f0:	f7e0 f80e 	bl	8000310 <memchr>
 80202f4:	b108      	cbz	r0, 80202fa <_printf_i+0x1e6>
 80202f6:	1b80      	subs	r0, r0, r6
 80202f8:	6060      	str	r0, [r4, #4]
 80202fa:	6863      	ldr	r3, [r4, #4]
 80202fc:	6123      	str	r3, [r4, #16]
 80202fe:	2300      	movs	r3, #0
 8020300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020304:	e7aa      	b.n	802025c <_printf_i+0x148>
 8020306:	6923      	ldr	r3, [r4, #16]
 8020308:	4632      	mov	r2, r6
 802030a:	4649      	mov	r1, r9
 802030c:	4640      	mov	r0, r8
 802030e:	47d0      	blx	sl
 8020310:	3001      	adds	r0, #1
 8020312:	d0ad      	beq.n	8020270 <_printf_i+0x15c>
 8020314:	6823      	ldr	r3, [r4, #0]
 8020316:	079b      	lsls	r3, r3, #30
 8020318:	d413      	bmi.n	8020342 <_printf_i+0x22e>
 802031a:	68e0      	ldr	r0, [r4, #12]
 802031c:	9b03      	ldr	r3, [sp, #12]
 802031e:	4298      	cmp	r0, r3
 8020320:	bfb8      	it	lt
 8020322:	4618      	movlt	r0, r3
 8020324:	e7a6      	b.n	8020274 <_printf_i+0x160>
 8020326:	2301      	movs	r3, #1
 8020328:	4632      	mov	r2, r6
 802032a:	4649      	mov	r1, r9
 802032c:	4640      	mov	r0, r8
 802032e:	47d0      	blx	sl
 8020330:	3001      	adds	r0, #1
 8020332:	d09d      	beq.n	8020270 <_printf_i+0x15c>
 8020334:	3501      	adds	r5, #1
 8020336:	68e3      	ldr	r3, [r4, #12]
 8020338:	9903      	ldr	r1, [sp, #12]
 802033a:	1a5b      	subs	r3, r3, r1
 802033c:	42ab      	cmp	r3, r5
 802033e:	dcf2      	bgt.n	8020326 <_printf_i+0x212>
 8020340:	e7eb      	b.n	802031a <_printf_i+0x206>
 8020342:	2500      	movs	r5, #0
 8020344:	f104 0619 	add.w	r6, r4, #25
 8020348:	e7f5      	b.n	8020336 <_printf_i+0x222>
 802034a:	bf00      	nop
 802034c:	080231f3 	.word	0x080231f3
 8020350:	08023204 	.word	0x08023204

08020354 <__sflush_r>:
 8020354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802035c:	0716      	lsls	r6, r2, #28
 802035e:	4605      	mov	r5, r0
 8020360:	460c      	mov	r4, r1
 8020362:	d454      	bmi.n	802040e <__sflush_r+0xba>
 8020364:	684b      	ldr	r3, [r1, #4]
 8020366:	2b00      	cmp	r3, #0
 8020368:	dc02      	bgt.n	8020370 <__sflush_r+0x1c>
 802036a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802036c:	2b00      	cmp	r3, #0
 802036e:	dd48      	ble.n	8020402 <__sflush_r+0xae>
 8020370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020372:	2e00      	cmp	r6, #0
 8020374:	d045      	beq.n	8020402 <__sflush_r+0xae>
 8020376:	2300      	movs	r3, #0
 8020378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802037c:	682f      	ldr	r7, [r5, #0]
 802037e:	6a21      	ldr	r1, [r4, #32]
 8020380:	602b      	str	r3, [r5, #0]
 8020382:	d030      	beq.n	80203e6 <__sflush_r+0x92>
 8020384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020386:	89a3      	ldrh	r3, [r4, #12]
 8020388:	0759      	lsls	r1, r3, #29
 802038a:	d505      	bpl.n	8020398 <__sflush_r+0x44>
 802038c:	6863      	ldr	r3, [r4, #4]
 802038e:	1ad2      	subs	r2, r2, r3
 8020390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020392:	b10b      	cbz	r3, 8020398 <__sflush_r+0x44>
 8020394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020396:	1ad2      	subs	r2, r2, r3
 8020398:	2300      	movs	r3, #0
 802039a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802039c:	6a21      	ldr	r1, [r4, #32]
 802039e:	4628      	mov	r0, r5
 80203a0:	47b0      	blx	r6
 80203a2:	1c43      	adds	r3, r0, #1
 80203a4:	89a3      	ldrh	r3, [r4, #12]
 80203a6:	d106      	bne.n	80203b6 <__sflush_r+0x62>
 80203a8:	6829      	ldr	r1, [r5, #0]
 80203aa:	291d      	cmp	r1, #29
 80203ac:	d82b      	bhi.n	8020406 <__sflush_r+0xb2>
 80203ae:	4a2a      	ldr	r2, [pc, #168]	@ (8020458 <__sflush_r+0x104>)
 80203b0:	410a      	asrs	r2, r1
 80203b2:	07d6      	lsls	r6, r2, #31
 80203b4:	d427      	bmi.n	8020406 <__sflush_r+0xb2>
 80203b6:	2200      	movs	r2, #0
 80203b8:	6062      	str	r2, [r4, #4]
 80203ba:	04d9      	lsls	r1, r3, #19
 80203bc:	6922      	ldr	r2, [r4, #16]
 80203be:	6022      	str	r2, [r4, #0]
 80203c0:	d504      	bpl.n	80203cc <__sflush_r+0x78>
 80203c2:	1c42      	adds	r2, r0, #1
 80203c4:	d101      	bne.n	80203ca <__sflush_r+0x76>
 80203c6:	682b      	ldr	r3, [r5, #0]
 80203c8:	b903      	cbnz	r3, 80203cc <__sflush_r+0x78>
 80203ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80203cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80203ce:	602f      	str	r7, [r5, #0]
 80203d0:	b1b9      	cbz	r1, 8020402 <__sflush_r+0xae>
 80203d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80203d6:	4299      	cmp	r1, r3
 80203d8:	d002      	beq.n	80203e0 <__sflush_r+0x8c>
 80203da:	4628      	mov	r0, r5
 80203dc:	f7ff fc82 	bl	801fce4 <_free_r>
 80203e0:	2300      	movs	r3, #0
 80203e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80203e4:	e00d      	b.n	8020402 <__sflush_r+0xae>
 80203e6:	2301      	movs	r3, #1
 80203e8:	4628      	mov	r0, r5
 80203ea:	47b0      	blx	r6
 80203ec:	4602      	mov	r2, r0
 80203ee:	1c50      	adds	r0, r2, #1
 80203f0:	d1c9      	bne.n	8020386 <__sflush_r+0x32>
 80203f2:	682b      	ldr	r3, [r5, #0]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d0c6      	beq.n	8020386 <__sflush_r+0x32>
 80203f8:	2b1d      	cmp	r3, #29
 80203fa:	d001      	beq.n	8020400 <__sflush_r+0xac>
 80203fc:	2b16      	cmp	r3, #22
 80203fe:	d11e      	bne.n	802043e <__sflush_r+0xea>
 8020400:	602f      	str	r7, [r5, #0]
 8020402:	2000      	movs	r0, #0
 8020404:	e022      	b.n	802044c <__sflush_r+0xf8>
 8020406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802040a:	b21b      	sxth	r3, r3
 802040c:	e01b      	b.n	8020446 <__sflush_r+0xf2>
 802040e:	690f      	ldr	r7, [r1, #16]
 8020410:	2f00      	cmp	r7, #0
 8020412:	d0f6      	beq.n	8020402 <__sflush_r+0xae>
 8020414:	0793      	lsls	r3, r2, #30
 8020416:	680e      	ldr	r6, [r1, #0]
 8020418:	bf08      	it	eq
 802041a:	694b      	ldreq	r3, [r1, #20]
 802041c:	600f      	str	r7, [r1, #0]
 802041e:	bf18      	it	ne
 8020420:	2300      	movne	r3, #0
 8020422:	eba6 0807 	sub.w	r8, r6, r7
 8020426:	608b      	str	r3, [r1, #8]
 8020428:	f1b8 0f00 	cmp.w	r8, #0
 802042c:	dde9      	ble.n	8020402 <__sflush_r+0xae>
 802042e:	6a21      	ldr	r1, [r4, #32]
 8020430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020432:	4643      	mov	r3, r8
 8020434:	463a      	mov	r2, r7
 8020436:	4628      	mov	r0, r5
 8020438:	47b0      	blx	r6
 802043a:	2800      	cmp	r0, #0
 802043c:	dc08      	bgt.n	8020450 <__sflush_r+0xfc>
 802043e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020446:	81a3      	strh	r3, [r4, #12]
 8020448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020450:	4407      	add	r7, r0
 8020452:	eba8 0800 	sub.w	r8, r8, r0
 8020456:	e7e7      	b.n	8020428 <__sflush_r+0xd4>
 8020458:	dfbffffe 	.word	0xdfbffffe

0802045c <_fflush_r>:
 802045c:	b538      	push	{r3, r4, r5, lr}
 802045e:	690b      	ldr	r3, [r1, #16]
 8020460:	4605      	mov	r5, r0
 8020462:	460c      	mov	r4, r1
 8020464:	b913      	cbnz	r3, 802046c <_fflush_r+0x10>
 8020466:	2500      	movs	r5, #0
 8020468:	4628      	mov	r0, r5
 802046a:	bd38      	pop	{r3, r4, r5, pc}
 802046c:	b118      	cbz	r0, 8020476 <_fflush_r+0x1a>
 802046e:	6a03      	ldr	r3, [r0, #32]
 8020470:	b90b      	cbnz	r3, 8020476 <_fflush_r+0x1a>
 8020472:	f7ff f8e1 	bl	801f638 <__sinit>
 8020476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802047a:	2b00      	cmp	r3, #0
 802047c:	d0f3      	beq.n	8020466 <_fflush_r+0xa>
 802047e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020480:	07d0      	lsls	r0, r2, #31
 8020482:	d404      	bmi.n	802048e <_fflush_r+0x32>
 8020484:	0599      	lsls	r1, r3, #22
 8020486:	d402      	bmi.n	802048e <_fflush_r+0x32>
 8020488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802048a:	f7ff fbe8 	bl	801fc5e <__retarget_lock_acquire_recursive>
 802048e:	4628      	mov	r0, r5
 8020490:	4621      	mov	r1, r4
 8020492:	f7ff ff5f 	bl	8020354 <__sflush_r>
 8020496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020498:	07da      	lsls	r2, r3, #31
 802049a:	4605      	mov	r5, r0
 802049c:	d4e4      	bmi.n	8020468 <_fflush_r+0xc>
 802049e:	89a3      	ldrh	r3, [r4, #12]
 80204a0:	059b      	lsls	r3, r3, #22
 80204a2:	d4e1      	bmi.n	8020468 <_fflush_r+0xc>
 80204a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80204a6:	f7ff fbdb 	bl	801fc60 <__retarget_lock_release_recursive>
 80204aa:	e7dd      	b.n	8020468 <_fflush_r+0xc>

080204ac <fiprintf>:
 80204ac:	b40e      	push	{r1, r2, r3}
 80204ae:	b503      	push	{r0, r1, lr}
 80204b0:	4601      	mov	r1, r0
 80204b2:	ab03      	add	r3, sp, #12
 80204b4:	4805      	ldr	r0, [pc, #20]	@ (80204cc <fiprintf+0x20>)
 80204b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80204ba:	6800      	ldr	r0, [r0, #0]
 80204bc:	9301      	str	r3, [sp, #4]
 80204be:	f000 f8bb 	bl	8020638 <_vfiprintf_r>
 80204c2:	b002      	add	sp, #8
 80204c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80204c8:	b003      	add	sp, #12
 80204ca:	4770      	bx	lr
 80204cc:	240013a0 	.word	0x240013a0

080204d0 <__swhatbuf_r>:
 80204d0:	b570      	push	{r4, r5, r6, lr}
 80204d2:	460c      	mov	r4, r1
 80204d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204d8:	2900      	cmp	r1, #0
 80204da:	b096      	sub	sp, #88	@ 0x58
 80204dc:	4615      	mov	r5, r2
 80204de:	461e      	mov	r6, r3
 80204e0:	da0d      	bge.n	80204fe <__swhatbuf_r+0x2e>
 80204e2:	89a3      	ldrh	r3, [r4, #12]
 80204e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80204e8:	f04f 0100 	mov.w	r1, #0
 80204ec:	bf14      	ite	ne
 80204ee:	2340      	movne	r3, #64	@ 0x40
 80204f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80204f4:	2000      	movs	r0, #0
 80204f6:	6031      	str	r1, [r6, #0]
 80204f8:	602b      	str	r3, [r5, #0]
 80204fa:	b016      	add	sp, #88	@ 0x58
 80204fc:	bd70      	pop	{r4, r5, r6, pc}
 80204fe:	466a      	mov	r2, sp
 8020500:	f000 f848 	bl	8020594 <_fstat_r>
 8020504:	2800      	cmp	r0, #0
 8020506:	dbec      	blt.n	80204e2 <__swhatbuf_r+0x12>
 8020508:	9901      	ldr	r1, [sp, #4]
 802050a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802050e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020512:	4259      	negs	r1, r3
 8020514:	4159      	adcs	r1, r3
 8020516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802051a:	e7eb      	b.n	80204f4 <__swhatbuf_r+0x24>

0802051c <__smakebuf_r>:
 802051c:	898b      	ldrh	r3, [r1, #12]
 802051e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020520:	079d      	lsls	r5, r3, #30
 8020522:	4606      	mov	r6, r0
 8020524:	460c      	mov	r4, r1
 8020526:	d507      	bpl.n	8020538 <__smakebuf_r+0x1c>
 8020528:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802052c:	6023      	str	r3, [r4, #0]
 802052e:	6123      	str	r3, [r4, #16]
 8020530:	2301      	movs	r3, #1
 8020532:	6163      	str	r3, [r4, #20]
 8020534:	b003      	add	sp, #12
 8020536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020538:	ab01      	add	r3, sp, #4
 802053a:	466a      	mov	r2, sp
 802053c:	f7ff ffc8 	bl	80204d0 <__swhatbuf_r>
 8020540:	9f00      	ldr	r7, [sp, #0]
 8020542:	4605      	mov	r5, r0
 8020544:	4639      	mov	r1, r7
 8020546:	4630      	mov	r0, r6
 8020548:	f7fe fe44 	bl	801f1d4 <_malloc_r>
 802054c:	b948      	cbnz	r0, 8020562 <__smakebuf_r+0x46>
 802054e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020552:	059a      	lsls	r2, r3, #22
 8020554:	d4ee      	bmi.n	8020534 <__smakebuf_r+0x18>
 8020556:	f023 0303 	bic.w	r3, r3, #3
 802055a:	f043 0302 	orr.w	r3, r3, #2
 802055e:	81a3      	strh	r3, [r4, #12]
 8020560:	e7e2      	b.n	8020528 <__smakebuf_r+0xc>
 8020562:	89a3      	ldrh	r3, [r4, #12]
 8020564:	6020      	str	r0, [r4, #0]
 8020566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802056a:	81a3      	strh	r3, [r4, #12]
 802056c:	9b01      	ldr	r3, [sp, #4]
 802056e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020572:	b15b      	cbz	r3, 802058c <__smakebuf_r+0x70>
 8020574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020578:	4630      	mov	r0, r6
 802057a:	f000 f81d 	bl	80205b8 <_isatty_r>
 802057e:	b128      	cbz	r0, 802058c <__smakebuf_r+0x70>
 8020580:	89a3      	ldrh	r3, [r4, #12]
 8020582:	f023 0303 	bic.w	r3, r3, #3
 8020586:	f043 0301 	orr.w	r3, r3, #1
 802058a:	81a3      	strh	r3, [r4, #12]
 802058c:	89a3      	ldrh	r3, [r4, #12]
 802058e:	431d      	orrs	r5, r3
 8020590:	81a5      	strh	r5, [r4, #12]
 8020592:	e7cf      	b.n	8020534 <__smakebuf_r+0x18>

08020594 <_fstat_r>:
 8020594:	b538      	push	{r3, r4, r5, lr}
 8020596:	4d07      	ldr	r5, [pc, #28]	@ (80205b4 <_fstat_r+0x20>)
 8020598:	2300      	movs	r3, #0
 802059a:	4604      	mov	r4, r0
 802059c:	4608      	mov	r0, r1
 802059e:	4611      	mov	r1, r2
 80205a0:	602b      	str	r3, [r5, #0]
 80205a2:	f7e1 fd23 	bl	8001fec <_fstat>
 80205a6:	1c43      	adds	r3, r0, #1
 80205a8:	d102      	bne.n	80205b0 <_fstat_r+0x1c>
 80205aa:	682b      	ldr	r3, [r5, #0]
 80205ac:	b103      	cbz	r3, 80205b0 <_fstat_r+0x1c>
 80205ae:	6023      	str	r3, [r4, #0]
 80205b0:	bd38      	pop	{r3, r4, r5, pc}
 80205b2:	bf00      	nop
 80205b4:	240695d8 	.word	0x240695d8

080205b8 <_isatty_r>:
 80205b8:	b538      	push	{r3, r4, r5, lr}
 80205ba:	4d06      	ldr	r5, [pc, #24]	@ (80205d4 <_isatty_r+0x1c>)
 80205bc:	2300      	movs	r3, #0
 80205be:	4604      	mov	r4, r0
 80205c0:	4608      	mov	r0, r1
 80205c2:	602b      	str	r3, [r5, #0]
 80205c4:	f7e1 fd22 	bl	800200c <_isatty>
 80205c8:	1c43      	adds	r3, r0, #1
 80205ca:	d102      	bne.n	80205d2 <_isatty_r+0x1a>
 80205cc:	682b      	ldr	r3, [r5, #0]
 80205ce:	b103      	cbz	r3, 80205d2 <_isatty_r+0x1a>
 80205d0:	6023      	str	r3, [r4, #0]
 80205d2:	bd38      	pop	{r3, r4, r5, pc}
 80205d4:	240695d8 	.word	0x240695d8

080205d8 <abort>:
 80205d8:	b508      	push	{r3, lr}
 80205da:	2006      	movs	r0, #6
 80205dc:	f000 f96c 	bl	80208b8 <raise>
 80205e0:	2001      	movs	r0, #1
 80205e2:	f7e1 fcb3 	bl	8001f4c <_exit>

080205e6 <__sfputc_r>:
 80205e6:	6893      	ldr	r3, [r2, #8]
 80205e8:	3b01      	subs	r3, #1
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	b410      	push	{r4}
 80205ee:	6093      	str	r3, [r2, #8]
 80205f0:	da08      	bge.n	8020604 <__sfputc_r+0x1e>
 80205f2:	6994      	ldr	r4, [r2, #24]
 80205f4:	42a3      	cmp	r3, r4
 80205f6:	db01      	blt.n	80205fc <__sfputc_r+0x16>
 80205f8:	290a      	cmp	r1, #10
 80205fa:	d103      	bne.n	8020604 <__sfputc_r+0x1e>
 80205fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020600:	f7ff b95a 	b.w	801f8b8 <__swbuf_r>
 8020604:	6813      	ldr	r3, [r2, #0]
 8020606:	1c58      	adds	r0, r3, #1
 8020608:	6010      	str	r0, [r2, #0]
 802060a:	7019      	strb	r1, [r3, #0]
 802060c:	4608      	mov	r0, r1
 802060e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020612:	4770      	bx	lr

08020614 <__sfputs_r>:
 8020614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020616:	4606      	mov	r6, r0
 8020618:	460f      	mov	r7, r1
 802061a:	4614      	mov	r4, r2
 802061c:	18d5      	adds	r5, r2, r3
 802061e:	42ac      	cmp	r4, r5
 8020620:	d101      	bne.n	8020626 <__sfputs_r+0x12>
 8020622:	2000      	movs	r0, #0
 8020624:	e007      	b.n	8020636 <__sfputs_r+0x22>
 8020626:	f814 1b01 	ldrb.w	r1, [r4], #1
 802062a:	463a      	mov	r2, r7
 802062c:	4630      	mov	r0, r6
 802062e:	f7ff ffda 	bl	80205e6 <__sfputc_r>
 8020632:	1c43      	adds	r3, r0, #1
 8020634:	d1f3      	bne.n	802061e <__sfputs_r+0xa>
 8020636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020638 <_vfiprintf_r>:
 8020638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802063c:	460d      	mov	r5, r1
 802063e:	b09d      	sub	sp, #116	@ 0x74
 8020640:	4614      	mov	r4, r2
 8020642:	4698      	mov	r8, r3
 8020644:	4606      	mov	r6, r0
 8020646:	b118      	cbz	r0, 8020650 <_vfiprintf_r+0x18>
 8020648:	6a03      	ldr	r3, [r0, #32]
 802064a:	b90b      	cbnz	r3, 8020650 <_vfiprintf_r+0x18>
 802064c:	f7fe fff4 	bl	801f638 <__sinit>
 8020650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020652:	07d9      	lsls	r1, r3, #31
 8020654:	d405      	bmi.n	8020662 <_vfiprintf_r+0x2a>
 8020656:	89ab      	ldrh	r3, [r5, #12]
 8020658:	059a      	lsls	r2, r3, #22
 802065a:	d402      	bmi.n	8020662 <_vfiprintf_r+0x2a>
 802065c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802065e:	f7ff fafe 	bl	801fc5e <__retarget_lock_acquire_recursive>
 8020662:	89ab      	ldrh	r3, [r5, #12]
 8020664:	071b      	lsls	r3, r3, #28
 8020666:	d501      	bpl.n	802066c <_vfiprintf_r+0x34>
 8020668:	692b      	ldr	r3, [r5, #16]
 802066a:	b99b      	cbnz	r3, 8020694 <_vfiprintf_r+0x5c>
 802066c:	4629      	mov	r1, r5
 802066e:	4630      	mov	r0, r6
 8020670:	f7ff f960 	bl	801f934 <__swsetup_r>
 8020674:	b170      	cbz	r0, 8020694 <_vfiprintf_r+0x5c>
 8020676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020678:	07dc      	lsls	r4, r3, #31
 802067a:	d504      	bpl.n	8020686 <_vfiprintf_r+0x4e>
 802067c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020680:	b01d      	add	sp, #116	@ 0x74
 8020682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020686:	89ab      	ldrh	r3, [r5, #12]
 8020688:	0598      	lsls	r0, r3, #22
 802068a:	d4f7      	bmi.n	802067c <_vfiprintf_r+0x44>
 802068c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802068e:	f7ff fae7 	bl	801fc60 <__retarget_lock_release_recursive>
 8020692:	e7f3      	b.n	802067c <_vfiprintf_r+0x44>
 8020694:	2300      	movs	r3, #0
 8020696:	9309      	str	r3, [sp, #36]	@ 0x24
 8020698:	2320      	movs	r3, #32
 802069a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802069e:	f8cd 800c 	str.w	r8, [sp, #12]
 80206a2:	2330      	movs	r3, #48	@ 0x30
 80206a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020854 <_vfiprintf_r+0x21c>
 80206a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80206ac:	f04f 0901 	mov.w	r9, #1
 80206b0:	4623      	mov	r3, r4
 80206b2:	469a      	mov	sl, r3
 80206b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80206b8:	b10a      	cbz	r2, 80206be <_vfiprintf_r+0x86>
 80206ba:	2a25      	cmp	r2, #37	@ 0x25
 80206bc:	d1f9      	bne.n	80206b2 <_vfiprintf_r+0x7a>
 80206be:	ebba 0b04 	subs.w	fp, sl, r4
 80206c2:	d00b      	beq.n	80206dc <_vfiprintf_r+0xa4>
 80206c4:	465b      	mov	r3, fp
 80206c6:	4622      	mov	r2, r4
 80206c8:	4629      	mov	r1, r5
 80206ca:	4630      	mov	r0, r6
 80206cc:	f7ff ffa2 	bl	8020614 <__sfputs_r>
 80206d0:	3001      	adds	r0, #1
 80206d2:	f000 80a7 	beq.w	8020824 <_vfiprintf_r+0x1ec>
 80206d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80206d8:	445a      	add	r2, fp
 80206da:	9209      	str	r2, [sp, #36]	@ 0x24
 80206dc:	f89a 3000 	ldrb.w	r3, [sl]
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	f000 809f 	beq.w	8020824 <_vfiprintf_r+0x1ec>
 80206e6:	2300      	movs	r3, #0
 80206e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80206ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80206f0:	f10a 0a01 	add.w	sl, sl, #1
 80206f4:	9304      	str	r3, [sp, #16]
 80206f6:	9307      	str	r3, [sp, #28]
 80206f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80206fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80206fe:	4654      	mov	r4, sl
 8020700:	2205      	movs	r2, #5
 8020702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020706:	4853      	ldr	r0, [pc, #332]	@ (8020854 <_vfiprintf_r+0x21c>)
 8020708:	f7df fe02 	bl	8000310 <memchr>
 802070c:	9a04      	ldr	r2, [sp, #16]
 802070e:	b9d8      	cbnz	r0, 8020748 <_vfiprintf_r+0x110>
 8020710:	06d1      	lsls	r1, r2, #27
 8020712:	bf44      	itt	mi
 8020714:	2320      	movmi	r3, #32
 8020716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802071a:	0713      	lsls	r3, r2, #28
 802071c:	bf44      	itt	mi
 802071e:	232b      	movmi	r3, #43	@ 0x2b
 8020720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020724:	f89a 3000 	ldrb.w	r3, [sl]
 8020728:	2b2a      	cmp	r3, #42	@ 0x2a
 802072a:	d015      	beq.n	8020758 <_vfiprintf_r+0x120>
 802072c:	9a07      	ldr	r2, [sp, #28]
 802072e:	4654      	mov	r4, sl
 8020730:	2000      	movs	r0, #0
 8020732:	f04f 0c0a 	mov.w	ip, #10
 8020736:	4621      	mov	r1, r4
 8020738:	f811 3b01 	ldrb.w	r3, [r1], #1
 802073c:	3b30      	subs	r3, #48	@ 0x30
 802073e:	2b09      	cmp	r3, #9
 8020740:	d94b      	bls.n	80207da <_vfiprintf_r+0x1a2>
 8020742:	b1b0      	cbz	r0, 8020772 <_vfiprintf_r+0x13a>
 8020744:	9207      	str	r2, [sp, #28]
 8020746:	e014      	b.n	8020772 <_vfiprintf_r+0x13a>
 8020748:	eba0 0308 	sub.w	r3, r0, r8
 802074c:	fa09 f303 	lsl.w	r3, r9, r3
 8020750:	4313      	orrs	r3, r2
 8020752:	9304      	str	r3, [sp, #16]
 8020754:	46a2      	mov	sl, r4
 8020756:	e7d2      	b.n	80206fe <_vfiprintf_r+0xc6>
 8020758:	9b03      	ldr	r3, [sp, #12]
 802075a:	1d19      	adds	r1, r3, #4
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	9103      	str	r1, [sp, #12]
 8020760:	2b00      	cmp	r3, #0
 8020762:	bfbb      	ittet	lt
 8020764:	425b      	neglt	r3, r3
 8020766:	f042 0202 	orrlt.w	r2, r2, #2
 802076a:	9307      	strge	r3, [sp, #28]
 802076c:	9307      	strlt	r3, [sp, #28]
 802076e:	bfb8      	it	lt
 8020770:	9204      	strlt	r2, [sp, #16]
 8020772:	7823      	ldrb	r3, [r4, #0]
 8020774:	2b2e      	cmp	r3, #46	@ 0x2e
 8020776:	d10a      	bne.n	802078e <_vfiprintf_r+0x156>
 8020778:	7863      	ldrb	r3, [r4, #1]
 802077a:	2b2a      	cmp	r3, #42	@ 0x2a
 802077c:	d132      	bne.n	80207e4 <_vfiprintf_r+0x1ac>
 802077e:	9b03      	ldr	r3, [sp, #12]
 8020780:	1d1a      	adds	r2, r3, #4
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	9203      	str	r2, [sp, #12]
 8020786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802078a:	3402      	adds	r4, #2
 802078c:	9305      	str	r3, [sp, #20]
 802078e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020864 <_vfiprintf_r+0x22c>
 8020792:	7821      	ldrb	r1, [r4, #0]
 8020794:	2203      	movs	r2, #3
 8020796:	4650      	mov	r0, sl
 8020798:	f7df fdba 	bl	8000310 <memchr>
 802079c:	b138      	cbz	r0, 80207ae <_vfiprintf_r+0x176>
 802079e:	9b04      	ldr	r3, [sp, #16]
 80207a0:	eba0 000a 	sub.w	r0, r0, sl
 80207a4:	2240      	movs	r2, #64	@ 0x40
 80207a6:	4082      	lsls	r2, r0
 80207a8:	4313      	orrs	r3, r2
 80207aa:	3401      	adds	r4, #1
 80207ac:	9304      	str	r3, [sp, #16]
 80207ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80207b2:	4829      	ldr	r0, [pc, #164]	@ (8020858 <_vfiprintf_r+0x220>)
 80207b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80207b8:	2206      	movs	r2, #6
 80207ba:	f7df fda9 	bl	8000310 <memchr>
 80207be:	2800      	cmp	r0, #0
 80207c0:	d03f      	beq.n	8020842 <_vfiprintf_r+0x20a>
 80207c2:	4b26      	ldr	r3, [pc, #152]	@ (802085c <_vfiprintf_r+0x224>)
 80207c4:	bb1b      	cbnz	r3, 802080e <_vfiprintf_r+0x1d6>
 80207c6:	9b03      	ldr	r3, [sp, #12]
 80207c8:	3307      	adds	r3, #7
 80207ca:	f023 0307 	bic.w	r3, r3, #7
 80207ce:	3308      	adds	r3, #8
 80207d0:	9303      	str	r3, [sp, #12]
 80207d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207d4:	443b      	add	r3, r7
 80207d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80207d8:	e76a      	b.n	80206b0 <_vfiprintf_r+0x78>
 80207da:	fb0c 3202 	mla	r2, ip, r2, r3
 80207de:	460c      	mov	r4, r1
 80207e0:	2001      	movs	r0, #1
 80207e2:	e7a8      	b.n	8020736 <_vfiprintf_r+0xfe>
 80207e4:	2300      	movs	r3, #0
 80207e6:	3401      	adds	r4, #1
 80207e8:	9305      	str	r3, [sp, #20]
 80207ea:	4619      	mov	r1, r3
 80207ec:	f04f 0c0a 	mov.w	ip, #10
 80207f0:	4620      	mov	r0, r4
 80207f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80207f6:	3a30      	subs	r2, #48	@ 0x30
 80207f8:	2a09      	cmp	r2, #9
 80207fa:	d903      	bls.n	8020804 <_vfiprintf_r+0x1cc>
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d0c6      	beq.n	802078e <_vfiprintf_r+0x156>
 8020800:	9105      	str	r1, [sp, #20]
 8020802:	e7c4      	b.n	802078e <_vfiprintf_r+0x156>
 8020804:	fb0c 2101 	mla	r1, ip, r1, r2
 8020808:	4604      	mov	r4, r0
 802080a:	2301      	movs	r3, #1
 802080c:	e7f0      	b.n	80207f0 <_vfiprintf_r+0x1b8>
 802080e:	ab03      	add	r3, sp, #12
 8020810:	9300      	str	r3, [sp, #0]
 8020812:	462a      	mov	r2, r5
 8020814:	4b12      	ldr	r3, [pc, #72]	@ (8020860 <_vfiprintf_r+0x228>)
 8020816:	a904      	add	r1, sp, #16
 8020818:	4630      	mov	r0, r6
 802081a:	f3af 8000 	nop.w
 802081e:	4607      	mov	r7, r0
 8020820:	1c78      	adds	r0, r7, #1
 8020822:	d1d6      	bne.n	80207d2 <_vfiprintf_r+0x19a>
 8020824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020826:	07d9      	lsls	r1, r3, #31
 8020828:	d405      	bmi.n	8020836 <_vfiprintf_r+0x1fe>
 802082a:	89ab      	ldrh	r3, [r5, #12]
 802082c:	059a      	lsls	r2, r3, #22
 802082e:	d402      	bmi.n	8020836 <_vfiprintf_r+0x1fe>
 8020830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020832:	f7ff fa15 	bl	801fc60 <__retarget_lock_release_recursive>
 8020836:	89ab      	ldrh	r3, [r5, #12]
 8020838:	065b      	lsls	r3, r3, #25
 802083a:	f53f af1f 	bmi.w	802067c <_vfiprintf_r+0x44>
 802083e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020840:	e71e      	b.n	8020680 <_vfiprintf_r+0x48>
 8020842:	ab03      	add	r3, sp, #12
 8020844:	9300      	str	r3, [sp, #0]
 8020846:	462a      	mov	r2, r5
 8020848:	4b05      	ldr	r3, [pc, #20]	@ (8020860 <_vfiprintf_r+0x228>)
 802084a:	a904      	add	r1, sp, #16
 802084c:	4630      	mov	r0, r6
 802084e:	f7ff fc61 	bl	8020114 <_printf_i>
 8020852:	e7e4      	b.n	802081e <_vfiprintf_r+0x1e6>
 8020854:	080231e2 	.word	0x080231e2
 8020858:	080231ec 	.word	0x080231ec
 802085c:	00000000 	.word	0x00000000
 8020860:	08020615 	.word	0x08020615
 8020864:	080231e8 	.word	0x080231e8

08020868 <_raise_r>:
 8020868:	291f      	cmp	r1, #31
 802086a:	b538      	push	{r3, r4, r5, lr}
 802086c:	4605      	mov	r5, r0
 802086e:	460c      	mov	r4, r1
 8020870:	d904      	bls.n	802087c <_raise_r+0x14>
 8020872:	2316      	movs	r3, #22
 8020874:	6003      	str	r3, [r0, #0]
 8020876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802087a:	bd38      	pop	{r3, r4, r5, pc}
 802087c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802087e:	b112      	cbz	r2, 8020886 <_raise_r+0x1e>
 8020880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020884:	b94b      	cbnz	r3, 802089a <_raise_r+0x32>
 8020886:	4628      	mov	r0, r5
 8020888:	f000 f830 	bl	80208ec <_getpid_r>
 802088c:	4622      	mov	r2, r4
 802088e:	4601      	mov	r1, r0
 8020890:	4628      	mov	r0, r5
 8020892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020896:	f000 b817 	b.w	80208c8 <_kill_r>
 802089a:	2b01      	cmp	r3, #1
 802089c:	d00a      	beq.n	80208b4 <_raise_r+0x4c>
 802089e:	1c59      	adds	r1, r3, #1
 80208a0:	d103      	bne.n	80208aa <_raise_r+0x42>
 80208a2:	2316      	movs	r3, #22
 80208a4:	6003      	str	r3, [r0, #0]
 80208a6:	2001      	movs	r0, #1
 80208a8:	e7e7      	b.n	802087a <_raise_r+0x12>
 80208aa:	2100      	movs	r1, #0
 80208ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80208b0:	4620      	mov	r0, r4
 80208b2:	4798      	blx	r3
 80208b4:	2000      	movs	r0, #0
 80208b6:	e7e0      	b.n	802087a <_raise_r+0x12>

080208b8 <raise>:
 80208b8:	4b02      	ldr	r3, [pc, #8]	@ (80208c4 <raise+0xc>)
 80208ba:	4601      	mov	r1, r0
 80208bc:	6818      	ldr	r0, [r3, #0]
 80208be:	f7ff bfd3 	b.w	8020868 <_raise_r>
 80208c2:	bf00      	nop
 80208c4:	240013a0 	.word	0x240013a0

080208c8 <_kill_r>:
 80208c8:	b538      	push	{r3, r4, r5, lr}
 80208ca:	4d07      	ldr	r5, [pc, #28]	@ (80208e8 <_kill_r+0x20>)
 80208cc:	2300      	movs	r3, #0
 80208ce:	4604      	mov	r4, r0
 80208d0:	4608      	mov	r0, r1
 80208d2:	4611      	mov	r1, r2
 80208d4:	602b      	str	r3, [r5, #0]
 80208d6:	f7e1 fb29 	bl	8001f2c <_kill>
 80208da:	1c43      	adds	r3, r0, #1
 80208dc:	d102      	bne.n	80208e4 <_kill_r+0x1c>
 80208de:	682b      	ldr	r3, [r5, #0]
 80208e0:	b103      	cbz	r3, 80208e4 <_kill_r+0x1c>
 80208e2:	6023      	str	r3, [r4, #0]
 80208e4:	bd38      	pop	{r3, r4, r5, pc}
 80208e6:	bf00      	nop
 80208e8:	240695d8 	.word	0x240695d8

080208ec <_getpid_r>:
 80208ec:	f7e1 bb16 	b.w	8001f1c <_getpid>

080208f0 <_init>:
 80208f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208f2:	bf00      	nop
 80208f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80208f6:	bc08      	pop	{r3}
 80208f8:	469e      	mov	lr, r3
 80208fa:	4770      	bx	lr

080208fc <_fini>:
 80208fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208fe:	bf00      	nop
 8020900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020902:	bc08      	pop	{r3}
 8020904:	469e      	mov	lr, r3
 8020906:	4770      	bx	lr
